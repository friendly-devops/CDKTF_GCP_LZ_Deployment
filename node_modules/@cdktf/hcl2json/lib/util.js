"use strict";
/**
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: MPL-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.wrapTerraformExpression = exports.replaceQuotes = void 0;
/**
 * This function is used to escape quotes within a string.
 *  Note: This is a really naive implmentation that will not be able to work with
 *    nested templates. However, nested templates require parsing, so we will
 *    only handle strings without nested templates for the moment
 * @param input The string to escape
 */
function replaceQuotes(input) {
    const fullyQuotedMatch = /^(\s*")(.*)("\s*)$/.exec(input);
    const hasTemplate = /(?<!\$)\$\{/.test(input);
    if (fullyQuotedMatch !== null && !hasTemplate) {
        return `${fullyQuotedMatch[1]}${fullyQuotedMatch[2].replace(/"/g, `\\"`)}${fullyQuotedMatch[3]}`;
    }
    return input;
}
exports.replaceQuotes = replaceQuotes;
/**
 * This function is used to wrap a string in quotes conditionally.
 *  - If the string is already quoted, it will be returned as-is.
 *  - If the string contains a newline, it will be wrapped in a heredoc.
 *  - If the string is a number, it will be returned as-is.
 *  - If the string is a boolean, it will be returned as-is.
 *  - If the string is a list or map, it will be returned as-is.
 *
 * @param input The string to wrap
 * @returns The wrapped string, and the offset of the cursor within the string
 *
 * @example
 * wrapTerraformExpression("foo") // { wrap: '"foo"', wrapOffset: 1 }
 * wrapTerraformExpression("foo\nbar") // { wrap: '<<EOE\nfoo\nbar\nEOE\n', wrapOffset: 5 }
 * wrapTerraformExpression("22") // { wrap: '22', wrapOffset: 0 }
 * wrapTerraformExpression("true") // { wrap: 'true', wrapOffset: 0 }
 * wrapTerraformExpression("[22, 10]") // { wrap: '[22, 10]', wrapOffset: 0 }
 * wrapTerraformExpression("{ foo = 22 }") // { wrap: '{ foo = 22 }', wrapOffset: 0 }
 */
function wrapTerraformExpression(input) {
    input = replaceQuotes(input);
    if (!isNaN(Number(input))) {
        return { wrap: input, wrapOffset: 0 };
    }
    if (input === "true" || input === "false") {
        return { wrap: input, wrapOffset: 0 };
    }
    if (input.startsWith(`"`)) {
        if (input.indexOf("\n") >= 0) {
            const trimWrapped = input.substring(1, input.length - 1);
            return {
                wrap: `<<EOE\n${trimWrapped}\nEOE\n`,
                wrapOffset: 5,
            };
        }
        return { wrap: input, wrapOffset: 0 };
    }
    if (input.startsWith("[") || input.startsWith("{")) {
        return { wrap: input, wrapOffset: 0 };
    }
    if (input.startsWith("<<")) {
        // For Heredocs, we need to ensure that the string ends with an empty newline as
        // the HCL parser doesn't find the ending token otherwise
        if (!input.endsWith("\n")) {
            return { wrap: input + "\n", wrapOffset: 0 };
        }
        return { wrap: input, wrapOffset: 0 };
    }
    return { wrap: `"${input}"`, wrapOffset: 1 };
}
exports.wrapTerraformExpression = wrapTerraformExpression;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRzs7O0FBRUg7Ozs7OztHQU1HO0FBQ0gsU0FBZ0IsYUFBYSxDQUFDLEtBQWE7SUFDekMsTUFBTSxnQkFBZ0IsR0FBRyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDMUQsTUFBTSxXQUFXLEdBQUcsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUU5QyxJQUFJLGdCQUFnQixLQUFLLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtRQUM3QyxPQUFPLEdBQUcsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLEdBQUcsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsR0FDdEUsZ0JBQWdCLENBQUMsQ0FBQyxDQUNwQixFQUFFLENBQUM7S0FDSjtJQUVELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQVhELHNDQVdDO0FBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQWtCRztBQUNILFNBQWdCLHVCQUF1QixDQUFDLEtBQWE7SUFJbkQsS0FBSyxHQUFHLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUU3QixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO1FBQ3pCLE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsQ0FBQztLQUN2QztJQUNELElBQUksS0FBSyxLQUFLLE1BQU0sSUFBSSxLQUFLLEtBQUssT0FBTyxFQUFFO1FBQ3pDLE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsQ0FBQztLQUN2QztJQUVELElBQUksS0FBSyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUN6QixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzVCLE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDekQsT0FBTztnQkFDTCxJQUFJLEVBQUUsVUFBVSxXQUFXLFNBQVM7Z0JBQ3BDLFVBQVUsRUFBRSxDQUFDO2FBQ2QsQ0FBQztTQUNIO1FBQ0QsT0FBTyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLENBQUMsRUFBRSxDQUFDO0tBQ3ZDO0lBRUQsSUFBSSxLQUFLLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEtBQUssQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDbEQsT0FBTyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLENBQUMsRUFBRSxDQUFDO0tBQ3ZDO0lBRUQsSUFBSSxLQUFLLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQzFCLGdGQUFnRjtRQUNoRix5REFBeUQ7UUFDekQsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDekIsT0FBTyxFQUFFLElBQUksRUFBRSxLQUFLLEdBQUcsSUFBSSxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsQ0FBQztTQUM5QztRQUVELE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsQ0FBQztLQUN2QztJQUVELE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxLQUFLLEdBQUcsRUFBRSxVQUFVLEVBQUUsQ0FBQyxFQUFFLENBQUM7QUFDL0MsQ0FBQztBQXZDRCwwREF1Q0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgSGFzaGlDb3JwLCBJbmMuXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTVBMLTIuMFxuICovXG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIGVzY2FwZSBxdW90ZXMgd2l0aGluIGEgc3RyaW5nLlxuICogIE5vdGU6IFRoaXMgaXMgYSByZWFsbHkgbmFpdmUgaW1wbG1lbnRhdGlvbiB0aGF0IHdpbGwgbm90IGJlIGFibGUgdG8gd29yayB3aXRoXG4gKiAgICBuZXN0ZWQgdGVtcGxhdGVzLiBIb3dldmVyLCBuZXN0ZWQgdGVtcGxhdGVzIHJlcXVpcmUgcGFyc2luZywgc28gd2Ugd2lsbFxuICogICAgb25seSBoYW5kbGUgc3RyaW5ncyB3aXRob3V0IG5lc3RlZCB0ZW1wbGF0ZXMgZm9yIHRoZSBtb21lbnRcbiAqIEBwYXJhbSBpbnB1dCBUaGUgc3RyaW5nIHRvIGVzY2FwZVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVwbGFjZVF1b3RlcyhpbnB1dDogc3RyaW5nKTogc3RyaW5nIHtcbiAgY29uc3QgZnVsbHlRdW90ZWRNYXRjaCA9IC9eKFxccypcIikoLiopKFwiXFxzKikkLy5leGVjKGlucHV0KTtcbiAgY29uc3QgaGFzVGVtcGxhdGUgPSAvKD88IVxcJClcXCRcXHsvLnRlc3QoaW5wdXQpO1xuXG4gIGlmIChmdWxseVF1b3RlZE1hdGNoICE9PSBudWxsICYmICFoYXNUZW1wbGF0ZSkge1xuICAgIHJldHVybiBgJHtmdWxseVF1b3RlZE1hdGNoWzFdfSR7ZnVsbHlRdW90ZWRNYXRjaFsyXS5yZXBsYWNlKC9cIi9nLCBgXFxcXFwiYCl9JHtcbiAgICAgIGZ1bGx5UXVvdGVkTWF0Y2hbM11cbiAgICB9YDtcbiAgfVxuXG4gIHJldHVybiBpbnB1dDtcbn1cblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gd3JhcCBhIHN0cmluZyBpbiBxdW90ZXMgY29uZGl0aW9uYWxseS5cbiAqICAtIElmIHRoZSBzdHJpbmcgaXMgYWxyZWFkeSBxdW90ZWQsIGl0IHdpbGwgYmUgcmV0dXJuZWQgYXMtaXMuXG4gKiAgLSBJZiB0aGUgc3RyaW5nIGNvbnRhaW5zIGEgbmV3bGluZSwgaXQgd2lsbCBiZSB3cmFwcGVkIGluIGEgaGVyZWRvYy5cbiAqICAtIElmIHRoZSBzdHJpbmcgaXMgYSBudW1iZXIsIGl0IHdpbGwgYmUgcmV0dXJuZWQgYXMtaXMuXG4gKiAgLSBJZiB0aGUgc3RyaW5nIGlzIGEgYm9vbGVhbiwgaXQgd2lsbCBiZSByZXR1cm5lZCBhcy1pcy5cbiAqICAtIElmIHRoZSBzdHJpbmcgaXMgYSBsaXN0IG9yIG1hcCwgaXQgd2lsbCBiZSByZXR1cm5lZCBhcy1pcy5cbiAqXG4gKiBAcGFyYW0gaW5wdXQgVGhlIHN0cmluZyB0byB3cmFwXG4gKiBAcmV0dXJucyBUaGUgd3JhcHBlZCBzdHJpbmcsIGFuZCB0aGUgb2Zmc2V0IG9mIHRoZSBjdXJzb3Igd2l0aGluIHRoZSBzdHJpbmdcbiAqXG4gKiBAZXhhbXBsZVxuICogd3JhcFRlcnJhZm9ybUV4cHJlc3Npb24oXCJmb29cIikgLy8geyB3cmFwOiAnXCJmb29cIicsIHdyYXBPZmZzZXQ6IDEgfVxuICogd3JhcFRlcnJhZm9ybUV4cHJlc3Npb24oXCJmb29cXG5iYXJcIikgLy8geyB3cmFwOiAnPDxFT0VcXG5mb29cXG5iYXJcXG5FT0VcXG4nLCB3cmFwT2Zmc2V0OiA1IH1cbiAqIHdyYXBUZXJyYWZvcm1FeHByZXNzaW9uKFwiMjJcIikgLy8geyB3cmFwOiAnMjInLCB3cmFwT2Zmc2V0OiAwIH1cbiAqIHdyYXBUZXJyYWZvcm1FeHByZXNzaW9uKFwidHJ1ZVwiKSAvLyB7IHdyYXA6ICd0cnVlJywgd3JhcE9mZnNldDogMCB9XG4gKiB3cmFwVGVycmFmb3JtRXhwcmVzc2lvbihcIlsyMiwgMTBdXCIpIC8vIHsgd3JhcDogJ1syMiwgMTBdJywgd3JhcE9mZnNldDogMCB9XG4gKiB3cmFwVGVycmFmb3JtRXhwcmVzc2lvbihcInsgZm9vID0gMjIgfVwiKSAvLyB7IHdyYXA6ICd7IGZvbyA9IDIyIH0nLCB3cmFwT2Zmc2V0OiAwIH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdyYXBUZXJyYWZvcm1FeHByZXNzaW9uKGlucHV0OiBzdHJpbmcpOiB7XG4gIHdyYXA6IHN0cmluZztcbiAgd3JhcE9mZnNldDogbnVtYmVyO1xufSB7XG4gIGlucHV0ID0gcmVwbGFjZVF1b3RlcyhpbnB1dCk7XG5cbiAgaWYgKCFpc05hTihOdW1iZXIoaW5wdXQpKSkge1xuICAgIHJldHVybiB7IHdyYXA6IGlucHV0LCB3cmFwT2Zmc2V0OiAwIH07XG4gIH1cbiAgaWYgKGlucHV0ID09PSBcInRydWVcIiB8fCBpbnB1dCA9PT0gXCJmYWxzZVwiKSB7XG4gICAgcmV0dXJuIHsgd3JhcDogaW5wdXQsIHdyYXBPZmZzZXQ6IDAgfTtcbiAgfVxuXG4gIGlmIChpbnB1dC5zdGFydHNXaXRoKGBcImApKSB7XG4gICAgaWYgKGlucHV0LmluZGV4T2YoXCJcXG5cIikgPj0gMCkge1xuICAgICAgY29uc3QgdHJpbVdyYXBwZWQgPSBpbnB1dC5zdWJzdHJpbmcoMSwgaW5wdXQubGVuZ3RoIC0gMSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cmFwOiBgPDxFT0VcXG4ke3RyaW1XcmFwcGVkfVxcbkVPRVxcbmAsXG4gICAgICAgIHdyYXBPZmZzZXQ6IDUsXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4geyB3cmFwOiBpbnB1dCwgd3JhcE9mZnNldDogMCB9O1xuICB9XG5cbiAgaWYgKGlucHV0LnN0YXJ0c1dpdGgoXCJbXCIpIHx8IGlucHV0LnN0YXJ0c1dpdGgoXCJ7XCIpKSB7XG4gICAgcmV0dXJuIHsgd3JhcDogaW5wdXQsIHdyYXBPZmZzZXQ6IDAgfTtcbiAgfVxuXG4gIGlmIChpbnB1dC5zdGFydHNXaXRoKFwiPDxcIikpIHtcbiAgICAvLyBGb3IgSGVyZWRvY3MsIHdlIG5lZWQgdG8gZW5zdXJlIHRoYXQgdGhlIHN0cmluZyBlbmRzIHdpdGggYW4gZW1wdHkgbmV3bGluZSBhc1xuICAgIC8vIHRoZSBIQ0wgcGFyc2VyIGRvZXNuJ3QgZmluZCB0aGUgZW5kaW5nIHRva2VuIG90aGVyd2lzZVxuICAgIGlmICghaW5wdXQuZW5kc1dpdGgoXCJcXG5cIikpIHtcbiAgICAgIHJldHVybiB7IHdyYXA6IGlucHV0ICsgXCJcXG5cIiwgd3JhcE9mZnNldDogMCB9O1xuICAgIH1cblxuICAgIHJldHVybiB7IHdyYXA6IGlucHV0LCB3cmFwT2Zmc2V0OiAwIH07XG4gIH1cblxuICByZXR1cm4geyB3cmFwOiBgXCIke2lucHV0fVwiYCwgd3JhcE9mZnNldDogMSB9O1xufVxuIl19