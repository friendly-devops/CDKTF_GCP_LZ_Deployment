"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReportRequest = exports.getUserId = exports.getProjectId = exports.sendTelemetry = void 0;
// Copyright (c) HashiCorp, Inc
// SPDX-License-Identifier: MPL-2.0
const https = require("https");
const url_1 = require("url");
const uuid_1 = require("uuid");
const os = __importStar(require("os"));
const ci_info_1 = __importDefault(require("ci-info"));
const logging_1 = require("./logging");
const path = __importStar(require("path"));
const fs = __importStar(require("fs-extra"));
const version_1 = require("./version");
const environment_1 = require("./environment");
const BASE_URL = `https://checkpoint-api.hashicorp.com/v1/`;
const VALID_STATUS_CODES = [200, 201];
const MAX_REQUEST_BODY_SIZE = 8192;
function homeDir() {
    var _a;
    return process.env.CDKTF_HOME
        ? path.resolve(process.env.CDKTF_HOME)
        : path.join(((_a = os.userInfo().homedir) !== null && _a !== void 0 ? _a : os.homedir()).trim() || "/", ".cdktf");
}
async function post(url, data) {
    return new Promise((ok, ko) => {
        const req = https.request((0, url_1.format)(url), {
            headers: {
                Accept: "application/json",
                "Content-Length": data.length,
                "User-Agent": "HashiCorp/cdktf-cli",
            },
            method: "POST",
        }, (res) => {
            if (res.statusCode) {
                const statusCode = res.statusCode;
                if (!VALID_STATUS_CODES.includes(statusCode)) {
                    return ko(new Error(res.statusMessage));
                }
            }
            const data = new Array();
            res.on("data", (chunk) => data.push(chunk));
            res.on("error", (err) => ko(err));
            res.on("end", () => {
                return ok();
            });
        });
        req.setTimeout(1000, () => ko(new Error("request timeout")));
        req.write(data);
        req.end();
        req.on("error", (err) => ko(err));
    });
}
async function sendTelemetry(command, payload) {
    const reportParams = {
        command,
        product: "cdktf",
        version: `${version_1.DISPLAY_VERSION}`,
        dateTime: new Date(),
        language: payload.language,
        payload,
    };
    try {
        await ReportRequest(reportParams);
    }
    catch (err) {
        logging_1.logger.error(`Could not send telemetry data: ${err}`);
    }
}
exports.sendTelemetry = sendTelemetry;
function getId(filePath, key, forceCreation = false, explanatoryComment) {
    const _uuid = (0, uuid_1.v4)(); // create a new UUID in case we don't find one
    let jsonFile;
    try {
        jsonFile = require(filePath); // we found the file
    }
    catch (_a) {
        // we found no file, create one if we're forcing a creation
        if (forceCreation) {
            const _idFile = {}; // compose JSON id file in case we don't find one
            if (explanatoryComment) {
                _idFile["//"] = explanatoryComment.replace(/\n/g, " ");
            }
            _idFile[key] = _uuid;
            fs.ensureDirSync(path.dirname(filePath));
            fs.writeFileSync(filePath, JSON.stringify(_idFile, null, 2));
        }
        return _uuid;
    }
    if (jsonFile[key]) {
        return jsonFile[key]; // we found an id
    }
    else {
        // we found no id, we add it to the file for future use
        fs.writeFileSync(filePath, JSON.stringify({ ...jsonFile, [key]: _uuid }, null, 2));
        return _uuid;
    }
}
function getProjectId(projectPath = process.cwd()) {
    return getId(path.resolve(projectPath, "cdktf.json"), "projectId");
}
exports.getProjectId = getProjectId;
function getUserId() {
    return getId(path.resolve(homeDir(), "config.json"), "userId", true, `This signature is a randomly generated UUID used to anonymously differentiate users in telemetry data order to inform product direction.
This signature is random, it is not based on any personally identifiable information.
To create a new signature, you can simply delete this file at any time.
See https://cdk.tf/telemetry for more
information on how to disable it.`);
}
exports.getUserId = getUserId;
async function ReportRequest(reportParams) {
    // we won't report when checkpoint is disabled.
    if (environment_1.CHECKPOINT_DISABLE) {
        return;
    }
    if (!reportParams.runID) {
        reportParams.runID = (0, uuid_1.v4)();
    }
    if (!reportParams.dateTime) {
        reportParams.dateTime = new Date();
    }
    if (!reportParams.arch) {
        reportParams.arch = os.arch();
    }
    if (!reportParams.os) {
        reportParams.os = os.platform();
    }
    const ci = ci_info_1.default.isCI ? ci_info_1.default.name || "unknown" : false;
    if (!reportParams.userId && !ci) {
        reportParams.userId = getUserId();
    }
    if (ci) {
        reportParams.ci = ci;
    }
    reportParams.projectId = reportParams.projectId || getProjectId();
    const postData = JSON.stringify(reportParams);
    if (postData.length > MAX_REQUEST_BODY_SIZE) {
        logging_1.logger.warn(`Skipped sending telemetry as the request body size was ${postData.length} bytes. The limit is ${MAX_REQUEST_BODY_SIZE} bytes`);
        return;
    }
    try {
        await post(`${BASE_URL}telemetry/${reportParams.product}`, postData);
    }
    catch (e) {
        // Log errors writing to checkpoint
        (0, logging_1.processLoggerError)(e.message);
    }
}
exports.ReportRequest = ReportRequest;
//# sourceMappingURL=data:application/json;base64,