"use strict";
/**
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: MPL-2.0
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getGradlePackageVersionFromBuild = exports.getGradlePackageVersion = exports.getDependencyInformationFromLine = exports.getGradleDependencies = exports.isGradleProject = void 0;
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const logging_1 = require("./logging");
const util_1 = require("./util");
function isGradleProject(workingDirectory) {
    const buildGradlePath = path_1.default.join(workingDirectory, "build.gradle");
    try {
        fs_extra_1.default.accessSync(buildGradlePath, fs_extra_1.default.constants.R_OK | fs_extra_1.default.constants.W_OK);
        return true;
    }
    catch (_a) {
        logging_1.logger.debug(`No build.gradle found at ${buildGradlePath}`);
        return false;
    }
}
exports.isGradleProject = isGradleProject;
async function getGradleDependencies() {
    let output;
    try {
        output = await (0, util_1.exec)("gradle", ["dependencies", "--console=plain"], {
            env: process.env,
        });
    }
    catch (e) {
        logging_1.logger.debug(`Unable to run 'gradle dependencies': ${e}`);
        return undefined;
    }
    const lines = output.split(/\r\n|\r|\n/);
    // find the implementation section
    const implementationSection = lines.findIndex((line) => line.includes("implementation - "));
    if (implementationSection === -1) {
        logging_1.logger.debug(`Unable to find implementation section in output of 'gradle dependencies': ${output}`);
        return undefined;
    }
    const emptyLineRegex = /^\s*$/;
    const implementationSectionLines = lines.slice(implementationSection + 1);
    const sectionEnd = implementationSectionLines.findIndex((line) => emptyLineRegex.test(line));
    const implementationLines = implementationSectionLines.slice(0, sectionEnd);
    // find the api section
    const apiSection = lines.findIndex((line) => line.includes("api - "));
    if (apiSection === -1) {
        logging_1.logger.debug(`Unable to find api section in output of 'gradle dependencies': ${output}`);
        return undefined;
    }
    const apiSectionLines = lines.slice(apiSection + 1);
    const apiSectionEnd = apiSectionLines.findIndex((line) => emptyLineRegex.test(line));
    const apiLines = apiSectionLines.slice(0, apiSectionEnd);
    const prefixRegex = /^\s*[+\\-]+\s*/;
    const suffixRegex = /\s+\([nc*]\)\s*$/;
    return [...implementationLines, ...apiLines]
        .filter((line) => line !== "No dependencies")
        .map((line) => line.replace(prefixRegex, "").replace(suffixRegex, ""));
}
exports.getGradleDependencies = getGradleDependencies;
function getDependencyInformationFromLine(line) {
    const packageNameRegex = /^\s*([^:]+):([^:]+)(?::([^\s]+))?/;
    const matches = line.match(packageNameRegex);
    if (!matches) {
        logging_1.logger.debug("Unexpected format for gradle build. Please file an issue at https://cdk.tf/bug");
        return undefined;
    }
    if (matches[3] === undefined) {
        return {
            group: "",
            name: matches[1],
            version: matches[2],
        };
    }
    return {
        group: matches[1],
        name: matches[2],
        version: matches[3],
    };
}
exports.getDependencyInformationFromLine = getDependencyInformationFromLine;
/*
 * Example output:
  implementation - Implementation dependencies for the 'main' feature. (n)
  +--- com.hashicorp:cdktf:0.18.0 (n)
  +--- software.constructs:constructs:10.0.25 (n)
  +--- junit:junit:4.13.2 (n)
  \--- org.junit.jupiter:junit-jupiter:5.8.0 (n)
*/
async function getGradlePackageVersion(packageName) {
    const translationMap = {
        jsii: "jsii-runtime",
    };
    const gradlePackageName = translationMap[packageName] || packageName;
    logging_1.logger.debug("Running 'gradle dependencies' to find package version", gradlePackageName);
    const lines = await getGradleDependencies();
    if (!lines || lines.length === 0) {
        return undefined;
    }
    // loop through the subsequent lines to find the one starting with package name
    for (const line of lines) {
        if (line.includes(`:${gradlePackageName}:`)) {
            const dep = getDependencyInformationFromLine(line);
            if (dep) {
                return dep.version;
            }
            return undefined;
        }
    }
    // Didn't find the right file, read the build.gradle file as a backup
    const buildVersion = await getGradlePackageVersionFromBuild(packageName);
    if (buildVersion) {
        return buildVersion.version;
    }
    return undefined;
}
exports.getGradlePackageVersion = getGradlePackageVersion;
async function getGradlePackageVersionFromBuild(packageName) {
    const buildGradlePath = path_1.default.join(process.cwd(), "build.gradle");
    const buildGradleContents = await fs_extra_1.default.readFile(buildGradlePath, "utf-8");
    const buildLines = buildGradleContents.split(/\r\n|\r|\n/);
    const dependenciesRegex = /^\s*dependencies\s*\{/i;
    const dependenciesStart = buildLines.findIndex((line) => dependenciesRegex.test(line));
    if (dependenciesStart === -1) {
        logging_1.logger.debug(`Unable to find dependencies section in output build.gradle`);
        return undefined;
    }
    const foundIndex = buildLines.findIndex((line) => line.includes(packageName));
    if (foundIndex === -1) {
        logging_1.logger.debug(`Unable to find package ${packageName} in output build.gradle`);
        return undefined;
    }
    const line = buildLines[foundIndex];
    const colonSeparatedPackageNameRegex = new RegExp(`([^:]+):${packageName}(?::([^\\s]+))?`, "i");
    const colonMatch = colonSeparatedPackageNameRegex.exec(line);
    if (colonMatch) {
        return {
            group: colonMatch[1],
            name: packageName,
            version: colonMatch[2] || "",
        };
    }
    const fileSeparatedPackageNameRegex = new RegExp(`java/(.*)/${packageName}/([^/]+)/.*\\.jar`, "i");
    const fileMatch = fileSeparatedPackageNameRegex.exec(line);
    if (fileMatch) {
        return {
            group: fileMatch[1].replace(/\//g, "."),
            name: packageName,
            version: fileMatch[2],
        };
    }
    return undefined;
}
exports.getGradlePackageVersionFromBuild = getGradlePackageVersionFromBuild;
//# sourceMappingURL=data:application/json;base64,