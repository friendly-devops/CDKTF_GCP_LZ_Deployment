"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.logFileName = exports.processLoggerError = exports.processLoggerDebug = exports.logger = void 0;
// Copyright (c) HashiCorp, Inc
// SPDX-License-Identifier: MPL-2.0
const log4js_1 = require("log4js");
const fs = __importStar(require("fs-extra"));
const path = __importStar(require("path"));
const Sentry = __importStar(require("@sentry/node"));
const util_1 = require("./util");
const cliLogger = (0, log4js_1.getLogger)();
const logger = {
    trace(message, ...args) {
        cliLogger.trace(message, ...args);
        Sentry.addBreadcrumb({
            message,
            level: "debug",
        });
    },
    debug(message, ...args) {
        cliLogger.debug(message, ...args);
        Sentry.addBreadcrumb({
            message,
            level: "debug",
        });
    },
    info(message, ...args) {
        cliLogger.info(message, ...args);
        Sentry.addBreadcrumb({
            message,
            level: "info",
        });
    },
    warn(message, ...args) {
        cliLogger.warn(message, ...args);
        Sentry.addBreadcrumb({
            message,
            level: "warning",
        });
    },
    error(message, ...args) {
        cliLogger.error(message, ...args);
        Sentry.addBreadcrumb({
            message,
            level: "error",
        });
    },
    fatal(message, ...args) {
        cliLogger.fatal(message, ...args);
        Sentry.addBreadcrumb({
            message,
            level: "fatal",
        });
    },
    setLevel(level) {
        cliLogger.level = level;
    },
    useDefaultLevel() {
        cliLogger.level = process.env.CDKTF_LOG_LEVEL || "INFO";
    },
};
exports.logger = logger;
cliLogger.level = process.env.CDKTF_LOG_LEVEL || "INFO";
const logFileName = "cdktf.log";
exports.logFileName = logFileName;
if (process.env.CDKTF_LOG_FILE_DIRECTORY &&
    fs.existsSync(process.env.CDKTF_LOG_FILE_DIRECTORY) &&
    fs.statSync(process.env.CDKTF_LOG_FILE_DIRECTORY).isDirectory()) {
    (0, log4js_1.configure)({
        appenders: {
            cdktf: {
                type: "file",
                filename: path.join(process.env.CDKTF_LOG_FILE_DIRECTORY, logFileName),
            },
        },
        categories: { default: { appenders: ["cdktf"], level: "debug" } },
    });
}
else {
    const layoutType = (0, util_1.hasNoColorFlagOrEnv)() ? "basic" : "colored";
    (0, log4js_1.configure)({
        appenders: { out: { type: "stdout", layout: { type: layoutType } } },
        categories: { default: { appenders: ["out"], level: "info" } },
    });
}
const processLoggerDebug = (chunk) => {
    logger.debug(chunk.toString());
};
exports.processLoggerDebug = processLoggerDebug;
const processLoggerError = (chunk) => {
    logger.error(chunk.toString());
};
exports.processLoggerError = processLoggerError;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2luZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImxvZ2dpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSwrQkFBK0I7QUFDL0IsbUNBQW1DO0FBQ25DLG1DQUE4QztBQUM5Qyw2Q0FBK0I7QUFDL0IsMkNBQTZCO0FBQzdCLHFEQUF1QztBQUN2QyxpQ0FBNkM7QUFFN0MsTUFBTSxTQUFTLEdBQUcsSUFBQSxrQkFBUyxHQUFFLENBQUM7QUFDOUIsTUFBTSxNQUFNLEdBQUc7SUFDYixLQUFLLENBQUMsT0FBWSxFQUFFLEdBQUcsSUFBVztRQUNoQyxTQUFTLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sQ0FBQyxhQUFhLENBQUM7WUFDbkIsT0FBTztZQUNQLEtBQUssRUFBRSxPQUFPO1NBQ2YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELEtBQUssQ0FBQyxPQUFZLEVBQUUsR0FBRyxJQUFXO1FBQ2hDLFNBQVMsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDbEMsTUFBTSxDQUFDLGFBQWEsQ0FBQztZQUNuQixPQUFPO1lBQ1AsS0FBSyxFQUFFLE9BQU87U0FDZixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsSUFBSSxDQUFDLE9BQVksRUFBRSxHQUFHLElBQVc7UUFDL0IsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUNqQyxNQUFNLENBQUMsYUFBYSxDQUFDO1lBQ25CLE9BQU87WUFDUCxLQUFLLEVBQUUsTUFBTTtTQUNkLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxJQUFJLENBQUMsT0FBWSxFQUFFLEdBQUcsSUFBVztRQUMvQixTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQ2pDLE1BQU0sQ0FBQyxhQUFhLENBQUM7WUFDbkIsT0FBTztZQUNQLEtBQUssRUFBRSxTQUFTO1NBQ2pCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxLQUFLLENBQUMsT0FBWSxFQUFFLEdBQUcsSUFBVztRQUNoQyxTQUFTLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sQ0FBQyxhQUFhLENBQUM7WUFDbkIsT0FBTztZQUNQLEtBQUssRUFBRSxPQUFPO1NBQ2YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELEtBQUssQ0FBQyxPQUFZLEVBQUUsR0FBRyxJQUFXO1FBQ2hDLFNBQVMsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDbEMsTUFBTSxDQUFDLGFBQWEsQ0FBQztZQUNuQixPQUFPO1lBQ1AsS0FBSyxFQUFFLE9BQU87U0FDZixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsUUFBUSxDQUFDLEtBQWE7UUFDcEIsU0FBUyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDMUIsQ0FBQztJQUVELGVBQWU7UUFDYixTQUFTLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxJQUFJLE1BQU0sQ0FBQztJQUMxRCxDQUFDO0NBQ0YsQ0FBQztBQW1DTyx3QkFBTTtBQWpDZixTQUFTLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxJQUFJLE1BQU0sQ0FBQztBQUN4RCxNQUFNLFdBQVcsR0FBRyxXQUFXLENBQUM7QUFnQ3lCLGtDQUFXO0FBOUJwRSxJQUNFLE9BQU8sQ0FBQyxHQUFHLENBQUMsd0JBQXdCO0lBQ3BDLEVBQUUsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsQ0FBQztJQUNuRCxFQUFFLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxXQUFXLEVBQUUsRUFDL0Q7SUFDQSxJQUFBLGtCQUFTLEVBQUM7UUFDUixTQUFTLEVBQUU7WUFDVCxLQUFLLEVBQUU7Z0JBQ0wsSUFBSSxFQUFFLE1BQU07Z0JBQ1osUUFBUSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsRUFBRSxXQUFXLENBQUM7YUFDdkU7U0FDRjtRQUNELFVBQVUsRUFBRSxFQUFFLE9BQU8sRUFBRSxFQUFFLFNBQVMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsRUFBRTtLQUNsRSxDQUFDLENBQUM7Q0FDSjtLQUFNO0lBQ0wsTUFBTSxVQUFVLEdBQUcsSUFBQSwwQkFBbUIsR0FBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUUvRCxJQUFBLGtCQUFTLEVBQUM7UUFDUixTQUFTLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFO1FBQ3BFLFVBQVUsRUFBRSxFQUFFLE9BQU8sRUFBRSxFQUFFLFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsRUFBRTtLQUMvRCxDQUFDLENBQUM7Q0FDSjtBQUVELE1BQU0sa0JBQWtCLEdBQUcsQ0FBQyxLQUFtQyxFQUFFLEVBQUU7SUFDakUsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUNqQyxDQUFDLENBQUM7QUFLZSxnREFBa0I7QUFKbkMsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLEtBQW1DLEVBQUUsRUFBRTtJQUNqRSxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0FBQ2pDLENBQUMsQ0FBQztBQUVtQyxnREFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIEhhc2hpQ29ycCwgSW5jXG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTVBMLTIuMFxuaW1wb3J0IHsgY29uZmlndXJlLCBnZXRMb2dnZXIgfSBmcm9tIFwibG9nNGpzXCI7XG5pbXBvcnQgKiBhcyBmcyBmcm9tIFwiZnMtZXh0cmFcIjtcbmltcG9ydCAqIGFzIHBhdGggZnJvbSBcInBhdGhcIjtcbmltcG9ydCAqIGFzIFNlbnRyeSBmcm9tIFwiQHNlbnRyeS9ub2RlXCI7XG5pbXBvcnQgeyBoYXNOb0NvbG9yRmxhZ09yRW52IH0gZnJvbSBcIi4vdXRpbFwiO1xuXG5jb25zdCBjbGlMb2dnZXIgPSBnZXRMb2dnZXIoKTtcbmNvbnN0IGxvZ2dlciA9IHtcbiAgdHJhY2UobWVzc2FnZTogYW55LCAuLi5hcmdzOiBhbnlbXSkge1xuICAgIGNsaUxvZ2dlci50cmFjZShtZXNzYWdlLCAuLi5hcmdzKTtcbiAgICBTZW50cnkuYWRkQnJlYWRjcnVtYih7XG4gICAgICBtZXNzYWdlLFxuICAgICAgbGV2ZWw6IFwiZGVidWdcIixcbiAgICB9KTtcbiAgfSxcblxuICBkZWJ1ZyhtZXNzYWdlOiBhbnksIC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgY2xpTG9nZ2VyLmRlYnVnKG1lc3NhZ2UsIC4uLmFyZ3MpO1xuICAgIFNlbnRyeS5hZGRCcmVhZGNydW1iKHtcbiAgICAgIG1lc3NhZ2UsXG4gICAgICBsZXZlbDogXCJkZWJ1Z1wiLFxuICAgIH0pO1xuICB9LFxuXG4gIGluZm8obWVzc2FnZTogYW55LCAuLi5hcmdzOiBhbnlbXSkge1xuICAgIGNsaUxvZ2dlci5pbmZvKG1lc3NhZ2UsIC4uLmFyZ3MpO1xuICAgIFNlbnRyeS5hZGRCcmVhZGNydW1iKHtcbiAgICAgIG1lc3NhZ2UsXG4gICAgICBsZXZlbDogXCJpbmZvXCIsXG4gICAgfSk7XG4gIH0sXG5cbiAgd2FybihtZXNzYWdlOiBhbnksIC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgY2xpTG9nZ2VyLndhcm4obWVzc2FnZSwgLi4uYXJncyk7XG4gICAgU2VudHJ5LmFkZEJyZWFkY3J1bWIoe1xuICAgICAgbWVzc2FnZSxcbiAgICAgIGxldmVsOiBcIndhcm5pbmdcIixcbiAgICB9KTtcbiAgfSxcblxuICBlcnJvcihtZXNzYWdlOiBhbnksIC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgY2xpTG9nZ2VyLmVycm9yKG1lc3NhZ2UsIC4uLmFyZ3MpO1xuICAgIFNlbnRyeS5hZGRCcmVhZGNydW1iKHtcbiAgICAgIG1lc3NhZ2UsXG4gICAgICBsZXZlbDogXCJlcnJvclwiLFxuICAgIH0pO1xuICB9LFxuXG4gIGZhdGFsKG1lc3NhZ2U6IGFueSwgLi4uYXJnczogYW55W10pIHtcbiAgICBjbGlMb2dnZXIuZmF0YWwobWVzc2FnZSwgLi4uYXJncyk7XG4gICAgU2VudHJ5LmFkZEJyZWFkY3J1bWIoe1xuICAgICAgbWVzc2FnZSxcbiAgICAgIGxldmVsOiBcImZhdGFsXCIsXG4gICAgfSk7XG4gIH0sXG5cbiAgc2V0TGV2ZWwobGV2ZWw6IHN0cmluZykge1xuICAgIGNsaUxvZ2dlci5sZXZlbCA9IGxldmVsO1xuICB9LFxuXG4gIHVzZURlZmF1bHRMZXZlbCgpIHtcbiAgICBjbGlMb2dnZXIubGV2ZWwgPSBwcm9jZXNzLmVudi5DREtURl9MT0dfTEVWRUwgfHwgXCJJTkZPXCI7XG4gIH0sXG59O1xuXG5jbGlMb2dnZXIubGV2ZWwgPSBwcm9jZXNzLmVudi5DREtURl9MT0dfTEVWRUwgfHwgXCJJTkZPXCI7XG5jb25zdCBsb2dGaWxlTmFtZSA9IFwiY2RrdGYubG9nXCI7XG5cbmlmIChcbiAgcHJvY2Vzcy5lbnYuQ0RLVEZfTE9HX0ZJTEVfRElSRUNUT1JZICYmXG4gIGZzLmV4aXN0c1N5bmMocHJvY2Vzcy5lbnYuQ0RLVEZfTE9HX0ZJTEVfRElSRUNUT1JZKSAmJlxuICBmcy5zdGF0U3luYyhwcm9jZXNzLmVudi5DREtURl9MT0dfRklMRV9ESVJFQ1RPUlkpLmlzRGlyZWN0b3J5KClcbikge1xuICBjb25maWd1cmUoe1xuICAgIGFwcGVuZGVyczoge1xuICAgICAgY2RrdGY6IHtcbiAgICAgICAgdHlwZTogXCJmaWxlXCIsXG4gICAgICAgIGZpbGVuYW1lOiBwYXRoLmpvaW4ocHJvY2Vzcy5lbnYuQ0RLVEZfTE9HX0ZJTEVfRElSRUNUT1JZLCBsb2dGaWxlTmFtZSksXG4gICAgICB9LFxuICAgIH0sXG4gICAgY2F0ZWdvcmllczogeyBkZWZhdWx0OiB7IGFwcGVuZGVyczogW1wiY2RrdGZcIl0sIGxldmVsOiBcImRlYnVnXCIgfSB9LFxuICB9KTtcbn0gZWxzZSB7XG4gIGNvbnN0IGxheW91dFR5cGUgPSBoYXNOb0NvbG9yRmxhZ09yRW52KCkgPyBcImJhc2ljXCIgOiBcImNvbG9yZWRcIjtcblxuICBjb25maWd1cmUoe1xuICAgIGFwcGVuZGVyczogeyBvdXQ6IHsgdHlwZTogXCJzdGRvdXRcIiwgbGF5b3V0OiB7IHR5cGU6IGxheW91dFR5cGUgfSB9IH0sXG4gICAgY2F0ZWdvcmllczogeyBkZWZhdWx0OiB7IGFwcGVuZGVyczogW1wib3V0XCJdLCBsZXZlbDogXCJpbmZvXCIgfSB9LFxuICB9KTtcbn1cblxuY29uc3QgcHJvY2Vzc0xvZ2dlckRlYnVnID0gKGNodW5rOiBCdWZmZXIgfCBzdHJpbmcgfCBVaW50OEFycmF5KSA9PiB7XG4gIGxvZ2dlci5kZWJ1ZyhjaHVuay50b1N0cmluZygpKTtcbn07XG5jb25zdCBwcm9jZXNzTG9nZ2VyRXJyb3IgPSAoY2h1bms6IEJ1ZmZlciB8IHN0cmluZyB8IFVpbnQ4QXJyYXkpID0+IHtcbiAgbG9nZ2VyLmVycm9yKGNodW5rLnRvU3RyaW5nKCkpO1xufTtcblxuZXhwb3J0IHsgbG9nZ2VyLCBwcm9jZXNzTG9nZ2VyRGVidWcsIHByb2Nlc3NMb2dnZXJFcnJvciwgbG9nRmlsZU5hbWUgfTtcbiJdfQ==