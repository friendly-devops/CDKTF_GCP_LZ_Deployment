"use strict";
/**
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: MPL-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConstructsMakerProviderTarget = exports.ConstructsMakerModuleTarget = exports.ConstructsMakerTarget = void 0;
const config_1 = require("./config");
class ConstructsMakerTarget {
    constructor(constraint, targetLanguage) {
        this.constraint = constraint;
        this.targetLanguage = targetLanguage;
        if (this.constraint instanceof config_1.TerraformModuleConstraint) {
            this.fileName = `${this.typesPath(this.constraint.fileName)}.ts`;
        }
        else {
            this.fileName = `${this.typesPath(this.constraint.name)}.ts`;
        }
    }
    static from(constraint, targetLanguage) {
        if (constraint instanceof config_1.TerraformModuleConstraint) {
            return new ConstructsMakerModuleTarget(constraint, targetLanguage);
        }
        else {
            return new ConstructsMakerProviderTarget(constraint, targetLanguage);
        }
    }
    get version() {
        return this.constraint.version;
    }
    get source() {
        return this.constraint.source;
    }
    get name() {
        return this.constraint.name;
    }
    get fqn() {
        return this.constraint.fqn;
    }
    get namespace() {
        return this.constraint.namespace;
    }
    get moduleKey() {
        return this.fqn.replace(/\//gi, "_");
    }
}
exports.ConstructsMakerTarget = ConstructsMakerTarget;
class ConstructsMakerModuleTarget extends ConstructsMakerTarget {
    get isModule() {
        return true;
    }
    get isProvider() {
        return false;
    }
    get srcMakName() {
        switch (this.targetLanguage) {
            case config_1.Language.GO:
                return this.name.replace(/-/gi, "_");
            case config_1.Language.JAVA:
            case config_1.Language.CSHARP:
            case config_1.Language.PYTHON:
                return this.simplifiedFqn;
            default:
                return this.simplifiedName;
        }
    }
    get trackingPayload() {
        return {
            name: this.name,
            fullName: this.fqn,
            version: this.version,
            type: "module",
        };
    }
    typesPath(name) {
        return `modules/${name}`;
    }
    get simplifiedName() {
        var _a, _b;
        return ((_b = (_a = this.namespace) === null || _a === void 0 ? void 0 : _a.replace(/\//gi, ".").replace(/-/gi, "_")) !== null && _b !== void 0 ? _b : this.name);
    }
    get simplifiedFqn() {
        return this.fqn.replace(/\//gi, ".").replace(/-/gi, "_");
    }
}
exports.ConstructsMakerModuleTarget = ConstructsMakerModuleTarget;
class ConstructsMakerProviderTarget extends ConstructsMakerTarget {
    get isModule() {
        return false;
    }
    get isProvider() {
        return true;
    }
    get srcMakName() {
        switch (this.targetLanguage) {
            case config_1.Language.JAVA:
                // "null" is a reserved keyword and can't be used as a package name
                return this.isNullProvider ? "nullprovider" : this.simplifiedName;
            case config_1.Language.CSHARP:
                // "null" is a reserved keyword and can't be used as a namespace
                return this.isNullProvider ? "Providers.Null" : this.simplifiedName;
            case config_1.Language.PYTHON:
                return this.simplifiedName;
            case config_1.Language.GO:
                return this.name.replace(/-/gi, "_");
            default:
                return this.constraint.fqn;
        }
    }
    get trackingPayload() {
        return {
            name: this.name,
            fullName: this.source,
            version: this.version,
            type: "provider",
        };
    }
    typesPath(name) {
        return `providers/${name}/index`;
    }
    get isNullProvider() {
        return this.constraint.name === "null";
    }
    get simplifiedName() {
        return this.name.replace(/\//gi, ".").replace(/-/gi, "_");
    }
}
exports.ConstructsMakerProviderTarget = ConstructsMakerProviderTarget;
//# sourceMappingURL=data:application/json;base64,