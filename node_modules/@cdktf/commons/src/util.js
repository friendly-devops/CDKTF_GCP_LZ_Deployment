"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasNoColorFlagOrEnv = exports.ensureAllSettledBeforeThrowing = exports.downloadFile = exports.HttpError = exports.downcaseFirst = exports.readCDKTFManifest = exports.readCDKTFVersion = exports.exec = exports.mkdtemp = exports.withTempDir = exports.shell = void 0;
const cross_spawn_1 = require("cross-spawn");
const fs = __importStar(require("fs-extra"));
const follow_redirects_1 = require("follow-redirects");
const os = __importStar(require("os"));
const path = __importStar(require("path"));
const logging_1 = require("./logging");
const cdktf_1 = require("cdktf");
const config = __importStar(require("./config"));
const strip_ansi_1 = __importDefault(require("strip-ansi"));
async function shell(program, args = [], options = {}) {
    const stderr = new Array();
    const stdout = new Array();
    try {
        return await (0, exports.exec)(program, args, options, (chunk) => {
            const sanitizedChunk = options.noColor
                ? (0, strip_ansi_1.default)(chunk.toLocaleString())
                : chunk.toLocaleString();
            stdout.push(sanitizedChunk);
            console.log(sanitizedChunk);
        }, (chunk) => {
            const sanitizedChunk = options.noColor
                ? (0, strip_ansi_1.default)(chunk.toLocaleString())
                : chunk.toLocaleString();
            stderr.push(sanitizedChunk);
        });
    }
    catch (e) {
        if (stderr.length > 0) {
            e.stderr = stderr.map((chunk) => chunk.toString()).join("");
            if (options.noColor) {
                e.stderr = (0, strip_ansi_1.default)(e.stderr);
            }
        }
        if (stdout.length > 0) {
            e.stdout = stdout.join("");
            if (options.noColor) {
                e.stdout = (0, strip_ansi_1.default)(e.stdout);
            }
        }
        throw e;
    }
}
exports.shell = shell;
async function withTempDir(dirname, closure) {
    const prevdir = process.cwd();
    const parent = await fs.mkdtemp(path.join(os.tmpdir(), "cdktf."));
    const workdir = path.join(parent, dirname);
    await fs.mkdirp(workdir);
    try {
        process.chdir(workdir);
        await closure();
    }
    finally {
        process.chdir(prevdir);
        await fs.remove(parent);
    }
}
exports.withTempDir = withTempDir;
async function mkdtemp(closure) {
    const workdir = await fs.mkdtemp(path.join(os.tmpdir(), "cdktf."));
    try {
        await closure(workdir);
    }
    finally {
        await fs.remove(workdir);
    }
}
exports.mkdtemp = mkdtemp;
const exec = async (command, args, options, stdout, stderr, sendToStderr = true) => {
    // if options.noColor is not set, checking the flags & environment if it should be set
    // This is required for collectDebugInformation() which does not have knowledge about flags
    if (typeof options.noColor !== "boolean" && hasNoColorFlagOrEnv()) {
        options.noColor = true;
    }
    return new Promise((ok, ko) => {
        var _a, _b, _c, _d;
        const child = (0, cross_spawn_1.spawn)(command, args, options);
        const out = new Array();
        const err = new Array();
        if (stdout !== undefined) {
            (_a = child.stdout) === null || _a === void 0 ? void 0 : _a.on("data", (chunk) => {
                const sanitizedChunk = options.noColor
                    ? (0, strip_ansi_1.default)(chunk.toLocaleString())
                    : chunk.toLocaleString();
                (0, logging_1.processLoggerDebug)(sanitizedChunk);
                out.push(sanitizedChunk);
                stdout(sanitizedChunk);
            });
        }
        else {
            (_b = child.stdout) === null || _b === void 0 ? void 0 : _b.on("data", (chunk) => {
                const sanitizedChunk = options.noColor
                    ? (0, strip_ansi_1.default)(chunk.toLocaleString())
                    : chunk.toLocaleString();
                (0, logging_1.processLoggerDebug)(sanitizedChunk);
                out.push(sanitizedChunk);
            });
        }
        if (stderr !== undefined) {
            (_c = child.stderr) === null || _c === void 0 ? void 0 : _c.on("data", (chunk) => {
                const sanitizedChunk = options.noColor
                    ? (0, strip_ansi_1.default)(chunk.toLocaleString())
                    : chunk.toLocaleString();
                (0, logging_1.processLoggerError)(sanitizedChunk);
                if (sendToStderr) {
                    stderr(sanitizedChunk);
                }
                err.push(sanitizedChunk);
            });
        }
        else {
            (_d = child.stderr) === null || _d === void 0 ? void 0 : _d.on("data", (chunk) => {
                const sanitizedChunk = options.noColor
                    ? (0, strip_ansi_1.default)(chunk.toLocaleString())
                    : chunk.toLocaleString();
                (0, logging_1.processLoggerError)(sanitizedChunk);
                if (sendToStderr) {
                    process.stderr.write(sanitizedChunk);
                }
                err.push(sanitizedChunk);
            });
        }
        child.once("error", (err) => ko(err));
        child.once("close", (code) => {
            if (code !== 0) {
                const error = new Error(`non-zero exit code ${code}`);
                error.stderr = err.map((chunk) => chunk.toString()).join("");
                return ko(error);
            }
            return ok(out.join(""));
        });
    });
};
exports.exec = exec;
async function readCDKTFVersion(outputDir) {
    const outputFile = path.join(outputDir, "cdk.tf.json");
    if (fs.existsSync(outputFile)) {
        const outputJSON = fs.readFileSync(outputFile, "utf8");
        const data = JSON.parse(outputJSON);
        return data["//"].metadata.version;
    }
    return "";
}
exports.readCDKTFVersion = readCDKTFVersion;
async function readCDKTFManifest() {
    const { output } = config.readConfigSync();
    const json = await fs.readFile(path.join(output, cdktf_1.Manifest.fileName));
    return JSON.parse(json.toString());
}
exports.readCDKTFManifest = readCDKTFManifest;
/**
 * Downcase the first character in a string.
 *
 * @param str the string to be processed.
 */
function downcaseFirst(str) {
    if (str === "") {
        return str;
    }
    return `${str[0].toLocaleLowerCase()}${str.slice(1)}`;
}
exports.downcaseFirst = downcaseFirst;
class HttpError extends Error {
    constructor(message, statusCode) {
        super(message); // 'Error' breaks prototype chain here
        this.statusCode = statusCode;
        Object.setPrototypeOf(this, new.target.prototype); // restore prototype chain
        // see: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html#support-for-newtarget
    }
}
exports.HttpError = HttpError;
async function downloadFile(url, targetFilename) {
    // if the type is inferred to be "http|https" calling .get() is not possible
    // because the options parameter (which we don't use anyway) for get is
    // not compatible between http and https -> so we treat it as http
    const client = (url.startsWith("http://") ? follow_redirects_1.http : follow_redirects_1.https);
    const file = fs.createWriteStream(targetFilename);
    return new Promise((ok, ko) => {
        const request = client.get(url, (response) => {
            if (response.statusCode !== 200) {
                ko(new HttpError(`Failed to get '${url}' (${response.statusCode})`, response.statusCode));
                return;
            }
            response.pipe(file);
        });
        file.on("finish", () => ok());
        request.on("error", (err) => {
            fs.unlink(targetFilename, () => ko(err));
        });
        file.on("error", (err) => {
            fs.unlink(targetFilename, () => ko(err));
        });
        request.end();
    });
}
exports.downloadFile = downloadFile;
/**
 * Awaits a promise and makes sure it's error (if any) is only thrown after all other promises are settled
 * if the promise does not throw an error, the other promises won't be awaited
 * @param p promise to await
 * @param promises promises to await to be all settled if p failed before throwing error that p failed with
 */
async function ensureAllSettledBeforeThrowing(p, promises) {
    try {
        await p;
    }
    catch (e) {
        // if an error happened, we still need to wait for all other promises that
        // are currently in progress to complete to allow them to properly wrap up
        await Promise.allSettled(promises);
        throw e;
    }
}
exports.ensureAllSettledBeforeThrowing = ensureAllSettledBeforeThrowing;
/**
 * returns true if --no-color is passed as CLI flag or the env var FORCE_COLOR is set to "0"
 * Used for cases where we can't pass down the noColor flag (e.g. when collecting debug information from the environment)
 * This is the same behavior as the `chalk` lib we use for coloring output
 */
function hasNoColorFlagOrEnv() {
    return hasFlag("no-color") || process.env.FORCE_COLOR === "0";
}
exports.hasNoColorFlagOrEnv = hasNoColorFlagOrEnv;
// From: https://github.com/sindresorhus/has-flag/blob/main/index.js
// as used in https://github.com/chalk/chalk
function hasFlag(flag) {
    const prefix = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--";
    const position = process.argv.indexOf(prefix + flag);
    const terminatorPosition = process.argv.indexOf("--");
    return (position !== -1 &&
        (terminatorPosition === -1 || position < terminatorPosition));
}
//# sourceMappingURL=data:application/json;base64,