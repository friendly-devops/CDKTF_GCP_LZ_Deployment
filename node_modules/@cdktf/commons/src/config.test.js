"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mkdtemp = void 0;
// Copyright (c) HashiCorp, Inc
// SPDX-License-Identifier: MPL-2.0
const config_1 = require("./config");
const fs = __importStar(require("fs-extra"));
const os = __importStar(require("os"));
const path = __importStar(require("path"));
async function mkdtemp(closure) {
    const workdir = await fs.mkdtemp(path.join(os.tmpdir(), "cdktf."));
    try {
        await closure(workdir);
    }
    finally {
        await fs.remove(workdir);
    }
}
exports.mkdtemp = mkdtemp;
describe("parseConfig", () => {
    it("provides default with no input", async () => {
        expect((0, config_1.parseConfig)()).toMatchInlineSnapshot(`
      {
        "codeMakerOutput": ".gen",
        "output": "cdktf.out",
      }
    `);
    });
    describe("providers", () => {
        it("parses provider string", async () => {
            const input = {
                terraformProviders: ["aws@~> 2.0"],
            };
            expect((0, config_1.parseConfig)(JSON.stringify(input))).toMatchInlineSnapshot(`
        {
          "codeMakerOutput": ".gen",
          "output": "cdktf.out",
          "terraformProviders": [
            TerraformProviderConstraint {
              "fqn": "aws",
              "name": "aws",
              "namespace": undefined,
              "source": "aws",
              "version": "~> 2.0",
            },
          ],
        }
      `);
        });
        it("parses provider string with namespace", async () => {
            const input = {
                terraformProviders: ["hashicorp/aws@~> 2.0"],
            };
            expect((0, config_1.parseConfig)(JSON.stringify(input))).toMatchInlineSnapshot(`
        {
          "codeMakerOutput": ".gen",
          "output": "cdktf.out",
          "terraformProviders": [
            TerraformProviderConstraint {
              "fqn": "hashicorp/aws",
              "name": "aws",
              "namespace": "hashicorp",
              "source": "hashicorp/aws",
              "version": "~> 2.0",
            },
          ],
        }
      `);
        });
        it("parses complex provider config", async () => {
            const input = {
                terraformProviders: [
                    {
                        name: "aws",
                        version: "~> 2.0",
                    },
                ],
            };
            expect((0, config_1.parseConfig)(JSON.stringify(input))).toMatchInlineSnapshot(`
        {
          "codeMakerOutput": ".gen",
          "output": "cdktf.out",
          "terraformProviders": [
            TerraformProviderConstraint {
              "fqn": "aws",
              "name": "aws",
              "namespace": undefined,
              "source": undefined,
              "version": "~> 2.0",
            },
          ],
        }
      `);
        });
    });
    describe("modules", () => {
        it("parses module string", async () => {
            const input = {
                terraformModules: ["terraform-aws-modules/vpc/aws@2.39.0"],
            };
            expect((0, config_1.parseConfig)(JSON.stringify(input))).toMatchInlineSnapshot(`
        {
          "codeMakerOutput": ".gen",
          "output": "cdktf.out",
          "terraformModules": [
            TerraformModuleConstraint {
              "fqn": "terraform-aws-modules/vpc/aws",
              "name": "vpc",
              "namespace": "terraform-aws-modules/aws",
              "source": "terraform-aws-modules/vpc/aws",
              "version": "2.39.0",
            },
          ],
        }
      `);
        });
        it("parses module for local module for module generator", async () => {
            const input = {
                terraformModules: [
                    {
                        name: "local-module",
                        source: "./foo",
                    },
                ],
            };
            const parsed = (0, config_1.parseConfig)(JSON.stringify(input));
            expect(parsed.terraformModules[0].localSourceAbsolutePath).toMatch("/packages/@cdktf/commons/foo");
        });
        it("parses sub module registry string", async () => {
            const input = {
                terraformModules: [
                    "terraform-aws-modules/iam/aws//modules/iam-account@3.12.0",
                ],
            };
            expect((0, config_1.parseConfig)(JSON.stringify(input))).toMatchInlineSnapshot(`
        {
          "codeMakerOutput": ".gen",
          "output": "cdktf.out",
          "terraformModules": [
            TerraformModuleConstraint {
              "fqn": "terraform-aws-modules/iam/aws/modules/iam-account",
              "name": "iam-account",
              "namespace": "terraform-aws-modules/aws/iam/modules",
              "source": "terraform-aws-modules/iam/aws//modules/iam-account",
              "version": "3.12.0",
            },
          ],
        }
      `);
        });
        it("takes complex config", async () => {
            const input = {
                terraformModules: [
                    {
                        name: "customAWSVpc",
                        source: "https://github.com/terraform-aws-modules/terraform-aws-vpc",
                        version: "~> v2.0",
                    },
                ],
            };
            expect((0, config_1.parseConfig)(JSON.stringify(input))).toMatchInlineSnapshot(`
        {
          "codeMakerOutput": ".gen",
          "output": "cdktf.out",
          "terraformModules": [
            TerraformModuleConstraint {
              "fqn": "customAWSVpc",
              "name": "customAWSVpc",
              "namespace": undefined,
              "source": "https://github.com/terraform-aws-modules/terraform-aws-vpc",
              "version": "~> v2.0",
            },
          ],
        }
      `);
        });
        it("takes complex and string config", async () => {
            const input = {
                terraformModules: [
                    "terraform-aws-modules/vpc/aws@2.39.0",
                    {
                        name: "customAWSVpc",
                        source: "https://github.com/terraform-aws-modules/terraform-aws-vpc",
                        version: "~> v2.0",
                    },
                ],
            };
            expect((0, config_1.parseConfig)(JSON.stringify(input))).toMatchInlineSnapshot(`
        {
          "codeMakerOutput": ".gen",
          "output": "cdktf.out",
          "terraformModules": [
            TerraformModuleConstraint {
              "fqn": "terraform-aws-modules/vpc/aws",
              "name": "vpc",
              "namespace": "terraform-aws-modules/aws",
              "source": "terraform-aws-modules/vpc/aws",
              "version": "2.39.0",
            },
            TerraformModuleConstraint {
              "fqn": "customAWSVpc",
              "name": "customAWSVpc",
              "namespace": undefined,
              "source": "https://github.com/terraform-aws-modules/terraform-aws-vpc",
              "version": "~> v2.0",
            },
          ],
        }
      `);
        });
        it("parses local path", async () => {
            const input = {
                terraformModules: ["./consul"],
            };
            const parsed = (0, config_1.parseConfig)(JSON.stringify(input));
            expect(parsed.terraformModules[0].localSourceAbsolutePath).toMatch("/packages/@cdktf/commons/consul");
            expect(parsed.terraformModules[0].name).toMatch("consul");
        });
        it("parses registry", async () => {
            const input = {
                terraformModules: ["hashicorp/consul/aws@0.1.0"],
            };
            expect((0, config_1.parseConfig)(JSON.stringify(input))).toMatchInlineSnapshot(`
        {
          "codeMakerOutput": ".gen",
          "output": "cdktf.out",
          "terraformModules": [
            TerraformModuleConstraint {
              "fqn": "hashicorp/consul/aws",
              "name": "consul",
              "namespace": "hashicorp/aws",
              "source": "hashicorp/consul/aws",
              "version": "0.1.0",
            },
          ],
        }
      `);
        });
        it("parses private registry", async () => {
            const input = {
                terraformModules: [
                    "app.terraform.io/example-corp/k8s-cluster/azurerm@1.1.0",
                ],
            };
            expect((0, config_1.parseConfig)(JSON.stringify(input))).toMatchInlineSnapshot(`
        {
          "codeMakerOutput": ".gen",
          "output": "cdktf.out",
          "terraformModules": [
            TerraformModuleConstraint {
              "fqn": "app-terraform-io/example-corp/k8s-cluster/azurerm",
              "name": "k8s-cluster",
              "namespace": "example-corp/azurerm",
              "source": "app.terraform.io/example-corp/k8s-cluster/azurerm",
              "version": "1.1.0",
            },
          ],
        }
      `);
        });
        it("parses github", async () => {
            const input = {
                terraformModules: ["github.com/hashicorp/example"],
            };
            expect((0, config_1.parseConfig)(JSON.stringify(input))).toMatchInlineSnapshot(`
        {
          "codeMakerOutput": ".gen",
          "output": "cdktf.out",
          "terraformModules": [
            TerraformModuleConstraint {
              "fqn": "hashicorp/example",
              "name": "example",
              "namespace": "hashicorp",
              "source": "github.com/hashicorp/example",
              "version": undefined,
            },
          ],
        }
      `);
        });
        it("parses github ssh", async () => {
            const input = {
                terraformModules: ["git@github.com:hashicorp/example.git"],
            };
            expect((0, config_1.parseConfig)(JSON.stringify(input))).toMatchInlineSnapshot(`
        {
          "codeMakerOutput": ".gen",
          "output": "cdktf.out",
          "terraformModules": [
            TerraformModuleConstraint {
              "fqn": "hashicorp/example",
              "name": "example",
              "namespace": "hashicorp",
              "source": "git@github.com:hashicorp/example.git",
              "version": undefined,
            },
          ],
        }
      `);
        });
        it("parses bitbucket", async () => {
            const input = {
                terraformModules: ["bitbucket.org/hashicorp/terraform-consul-aws"],
            };
            expect((0, config_1.parseConfig)(JSON.stringify(input))).toMatchInlineSnapshot(`
        {
          "codeMakerOutput": ".gen",
          "output": "cdktf.out",
          "terraformModules": [
            TerraformModuleConstraint {
              "fqn": "hashicorp/terraform-consul-aws",
              "name": "terraform-consul-aws",
              "namespace": "hashicorp",
              "source": "bitbucket.org/hashicorp/terraform-consul-aws",
              "version": undefined,
            },
          ],
        }
      `);
        });
        it("parses generic git", async () => {
            const input = {
                terraformModules: ["git::https://example.com/vpc.git"],
            };
            expect((0, config_1.parseConfig)(JSON.stringify(input))).toMatchInlineSnapshot(`
        {
          "codeMakerOutput": ".gen",
          "output": "cdktf.out",
          "terraformModules": [
            TerraformModuleConstraint {
              "fqn": "vpc",
              "name": "vpc",
              "namespace": undefined,
              "source": "git::https://example.com/vpc.git",
              "version": undefined,
            },
          ],
        }
      `);
        });
        it("parses git ssh", async () => {
            const input = {
                terraformModules: ["git::ssh://username@example.com/storage.git"],
            };
            expect((0, config_1.parseConfig)(JSON.stringify(input))).toMatchInlineSnapshot(`
        {
          "codeMakerOutput": ".gen",
          "output": "cdktf.out",
          "terraformModules": [
            TerraformModuleConstraint {
              "fqn": "storage",
              "name": "storage",
              "namespace": undefined,
              "source": "git::ssh://username@example.com/storage.git",
              "version": undefined,
            },
          ],
        }
      `);
        });
        it("parses revision", async () => {
            const input = {
                terraformModules: [
                    "git::https://example.com/infra/main-vpc.git?ref=v1.2.0",
                ],
            };
            expect((0, config_1.parseConfig)(JSON.stringify(input))).toMatchInlineSnapshot(`
        {
          "codeMakerOutput": ".gen",
          "output": "cdktf.out",
          "terraformModules": [
            TerraformModuleConstraint {
              "fqn": "infra/main-vpc",
              "name": "main-vpc",
              "namespace": "infra",
              "source": "git::https://example.com/infra/main-vpc.git?ref=v1.2.0",
              "version": undefined,
            },
          ],
        }
      `);
        });
        it("parses scp", async () => {
            const input = {
                terraformModules: ["git::username@example.com:storage.git"],
            };
            expect((0, config_1.parseConfig)(JSON.stringify(input))).toMatchInlineSnapshot(`
        {
          "codeMakerOutput": ".gen",
          "output": "cdktf.out",
          "terraformModules": [
            TerraformModuleConstraint {
              "fqn": "storage",
              "name": "storage",
              "namespace": undefined,
              "source": "git::username@example.com:storage.git",
              "version": undefined,
            },
          ],
        }
      `);
        });
        it("parses mercurial", async () => {
            const input = {
                terraformModules: ["hg::http://example.com/vpc.hg"],
            };
            expect((0, config_1.parseConfig)(JSON.stringify(input))).toMatchInlineSnapshot(`
        {
          "codeMakerOutput": ".gen",
          "output": "cdktf.out",
          "terraformModules": [
            TerraformModuleConstraint {
              "fqn": "vpc",
              "name": "vpc",
              "namespace": undefined,
              "source": "hg::http://example.com/vpc.hg",
              "version": undefined,
            },
          ],
        }
      `);
        });
        it("parses hg revision", async () => {
            const input = {
                terraformModules: ["hg::http://example.com/vpc.hg?ref=v1.2.0"],
            };
            expect((0, config_1.parseConfig)(JSON.stringify(input))).toMatchInlineSnapshot(`
        {
          "codeMakerOutput": ".gen",
          "output": "cdktf.out",
          "terraformModules": [
            TerraformModuleConstraint {
              "fqn": "vpc",
              "name": "vpc",
              "namespace": undefined,
              "source": "hg::http://example.com/vpc.hg?ref=v1.2.0",
              "version": undefined,
            },
          ],
        }
      `);
        });
        it("parses http", async () => {
            const input = {
                terraformModules: ["https://example.com/vpc-module.zip"],
            };
            expect((0, config_1.parseConfig)(JSON.stringify(input))).toMatchInlineSnapshot(`
        {
          "codeMakerOutput": ".gen",
          "output": "cdktf.out",
          "terraformModules": [
            TerraformModuleConstraint {
              "fqn": "vpc-module",
              "name": "vpc-module",
              "namespace": undefined,
              "source": "https://example.com/vpc-module.zip",
              "version": undefined,
            },
          ],
        }
      `);
        });
        it("parses archive type", async () => {
            const input = {
                terraformModules: ["https://example.com/vpc-module?archive=zip"],
            };
            expect((0, config_1.parseConfig)(JSON.stringify(input))).toMatchInlineSnapshot(`
        {
          "codeMakerOutput": ".gen",
          "output": "cdktf.out",
          "terraformModules": [
            TerraformModuleConstraint {
              "fqn": "vpc-module",
              "name": "vpc-module",
              "namespace": undefined,
              "source": "https://example.com/vpc-module?archive=zip",
              "version": undefined,
            },
          ],
        }
      `);
        });
        it("parses s3", async () => {
            const input = {
                terraformModules: [
                    "s3::https://s3-eu-west-1.amazonaws.com/examplecorp-terraform-modules/vpc.zip",
                ],
            };
            expect((0, config_1.parseConfig)(JSON.stringify(input))).toMatchInlineSnapshot(`
        {
          "codeMakerOutput": ".gen",
          "output": "cdktf.out",
          "terraformModules": [
            TerraformModuleConstraint {
              "fqn": "examplecorp-terraform-modules/vpc",
              "name": "vpc",
              "namespace": "examplecorp-terraform-modules",
              "source": "s3::https://s3-eu-west-1.amazonaws.com/examplecorp-terraform-modules/vpc.zip",
              "version": undefined,
            },
          ],
        }
      `);
        });
        it("parses gcs", async () => {
            const input = {
                terraformModules: [
                    "gcs::https://www.googleapis.com/storage/v1/modules/foomodule.zip",
                ],
            };
            expect((0, config_1.parseConfig)(JSON.stringify(input))).toMatchInlineSnapshot(`
        {
          "codeMakerOutput": ".gen",
          "output": "cdktf.out",
          "terraformModules": [
            TerraformModuleConstraint {
              "fqn": "storage/v1/modules/foomodule",
              "name": "foomodule",
              "namespace": "modules",
              "source": "gcs::https://www.googleapis.com/storage/v1/modules/foomodule.zip",
              "version": undefined,
            },
          ],
        }
      `);
        });
        it("parses submodule registry", async () => {
            const input = {
                terraformModules: ["hashicorp/consul/aws//modules/consul-cluster"],
            };
            expect((0, config_1.parseConfig)(JSON.stringify(input))).toMatchInlineSnapshot(`
        {
          "codeMakerOutput": ".gen",
          "output": "cdktf.out",
          "terraformModules": [
            TerraformModuleConstraint {
              "fqn": "hashicorp/consul/aws/modules/consul-cluster",
              "name": "consul-cluster",
              "namespace": "hashicorp/aws/consul/modules",
              "source": "hashicorp/consul/aws//modules/consul-cluster",
              "version": undefined,
            },
          ],
        }
      `);
        });
        it("parses submodule git", async () => {
            const input = {
                terraformModules: ["git::https://example.com/network.git//modules/vpc"],
            };
            expect((0, config_1.parseConfig)(JSON.stringify(input))).toMatchInlineSnapshot(`
        {
          "codeMakerOutput": ".gen",
          "output": "cdktf.out",
          "terraformModules": [
            TerraformModuleConstraint {
              "fqn": "network/modules/vpc",
              "name": "vpc",
              "namespace": "network/modules",
              "source": "git::https://example.com/network.git//modules/vpc",
              "version": undefined,
            },
          ],
        }
      `);
        });
        it("parses submodule http", async () => {
            const input = {
                terraformModules: [
                    "https://example.com/network-module.zip//modules/vpc",
                ],
            };
            expect((0, config_1.parseConfig)(JSON.stringify(input))).toMatchInlineSnapshot(`
        {
          "codeMakerOutput": ".gen",
          "output": "cdktf.out",
          "terraformModules": [
            TerraformModuleConstraint {
              "fqn": "network-module/modules/vpc",
              "name": "vpc",
              "namespace": "network-module/modules",
              "source": "https://example.com/network-module.zip//modules/vpc",
              "version": undefined,
            },
          ],
        }
      `);
        });
        it("parses submodule s3", async () => {
            const input = {
                terraformModules: [
                    "s3::https://s3-eu-west-1.amazonaws.com/examplecorp-terraform-modules/network.zip//modules/vpc",
                ],
            };
            expect((0, config_1.parseConfig)(JSON.stringify(input))).toMatchInlineSnapshot(`
        {
          "codeMakerOutput": ".gen",
          "output": "cdktf.out",
          "terraformModules": [
            TerraformModuleConstraint {
              "fqn": "examplecorp-terraform-modules/network/modules/vpc",
              "name": "vpc",
              "namespace": "examplecorp-terraform-modules/network/modules",
              "source": "s3::https://s3-eu-west-1.amazonaws.com/examplecorp-terraform-modules/network.zip//modules/vpc",
              "version": undefined,
            },
          ],
        }
      `);
        });
        it("parses submodule ref", async () => {
            const input = {
                terraformModules: [
                    "git::https://example.com/network.git//modules/vpc?ref=v1.2.0",
                ],
            };
            expect((0, config_1.parseConfig)(JSON.stringify(input))).toMatchInlineSnapshot(`
        {
          "codeMakerOutput": ".gen",
          "output": "cdktf.out",
          "terraformModules": [
            TerraformModuleConstraint {
              "fqn": "network/modules/vpc",
              "name": "vpc",
              "namespace": "network/modules",
              "source": "git::https://example.com/network.git//modules/vpc?ref=v1.2.0",
              "version": undefined,
            },
          ],
        }
      `);
        });
        it("parses ref with /", async () => {
            const input = {
                terraformModules: [
                    "git::https://github.com/cloudposse/terraform-null-label.git?ref=tags/0.14.1",
                ],
            };
            expect((0, config_1.parseConfig)(JSON.stringify(input))).toMatchInlineSnapshot(`
        {
          "codeMakerOutput": ".gen",
          "output": "cdktf.out",
          "terraformModules": [
            TerraformModuleConstraint {
              "fqn": "cloudposse/terraform-null-label",
              "name": "terraform-null-label",
              "namespace": "cloudposse",
              "source": "git::https://github.com/cloudposse/terraform-null-label.git?ref=tags/0.14.1",
              "version": undefined,
            },
          ],
        }
      `);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb25maWcudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLCtCQUErQjtBQUMvQixtQ0FBbUM7QUFDbkMscUNBQXVDO0FBQ3ZDLDZDQUErQjtBQUMvQix1Q0FBeUI7QUFDekIsMkNBQTZCO0FBRXRCLEtBQUssVUFBVSxPQUFPLENBQUMsT0FBdUM7SUFDbkUsTUFBTSxPQUFPLEdBQUcsTUFBTSxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDbkUsSUFBSTtRQUNGLE1BQU0sT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQ3hCO1lBQVM7UUFDUixNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDMUI7QUFDSCxDQUFDO0FBUEQsMEJBT0M7QUFFRCxRQUFRLENBQUMsYUFBYSxFQUFFLEdBQUcsRUFBRTtJQUMzQixFQUFFLENBQUMsZ0NBQWdDLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDOUMsTUFBTSxDQUFDLElBQUEsb0JBQVcsR0FBRSxDQUFDLENBQUMscUJBQXFCLENBQUM7Ozs7O0tBSzNDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLFdBQVcsRUFBRSxHQUFHLEVBQUU7UUFDekIsRUFBRSxDQUFDLHdCQUF3QixFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ3RDLE1BQU0sS0FBSyxHQUFHO2dCQUNaLGtCQUFrQixFQUFFLENBQUMsWUFBWSxDQUFDO2FBQ25DLENBQUM7WUFFRixNQUFNLENBQUMsSUFBQSxvQkFBVyxFQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDOzs7Ozs7Ozs7Ozs7OztPQWNo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SCxFQUFFLENBQUMsc0JBQXNCLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDcEMsTUFBTSxLQUFLLEdBQUc7Z0JBQ1osZ0JBQWdCLEVBQUU7b0JBQ2hCLDhEQUE4RDtpQkFDL0Q7YUFDRixDQUFDO1lBRUYsTUFBTSxDQUFDLElBQUEsb0JBQVcsRUFBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7T0FjaEUsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsbUJBQW1CLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDakMsTUFBTSxLQUFLLEdBQUc7Z0JBQ1osZ0JBQWdCLEVBQUU7b0JBQ2hCLDZFQUE2RTtpQkFDOUU7YUFDRixDQUFDO1lBRUYsTUFBTSxDQUFDLElBQUEsb0JBQVcsRUFBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7T0FjaEUsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBIYXNoaUNvcnAsIEluY1xuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1QTC0yLjBcbmltcG9ydCB7IHBhcnNlQ29uZmlnIH0gZnJvbSBcIi4vY29uZmlnXCI7XG5pbXBvcnQgKiBhcyBmcyBmcm9tIFwiZnMtZXh0cmFcIjtcbmltcG9ydCAqIGFzIG9zIGZyb20gXCJvc1wiO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tIFwicGF0aFwiO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWtkdGVtcChjbG9zdXJlOiAoZGlyOiBzdHJpbmcpID0+IFByb21pc2U8dm9pZD4pIHtcbiAgY29uc3Qgd29ya2RpciA9IGF3YWl0IGZzLm1rZHRlbXAocGF0aC5qb2luKG9zLnRtcGRpcigpLCBcImNka3RmLlwiKSk7XG4gIHRyeSB7XG4gICAgYXdhaXQgY2xvc3VyZSh3b3JrZGlyKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBhd2FpdCBmcy5yZW1vdmUod29ya2Rpcik7XG4gIH1cbn1cblxuZGVzY3JpYmUoXCJwYXJzZUNvbmZpZ1wiLCAoKSA9PiB7XG4gIGl0KFwicHJvdmlkZXMgZGVmYXVsdCB3aXRoIG5vIGlucHV0XCIsIGFzeW5jICgpID0+IHtcbiAgICBleHBlY3QocGFyc2VDb25maWcoKSkudG9NYXRjaElubGluZVNuYXBzaG90KGBcbiAgICAgIHtcbiAgICAgICAgXCJjb2RlTWFrZXJPdXRwdXRcIjogXCIuZ2VuXCIsXG4gICAgICAgIFwib3V0cHV0XCI6IFwiY2RrdGYub3V0XCIsXG4gICAgICB9XG4gICAgYCk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKFwicHJvdmlkZXJzXCIsICgpID0+IHtcbiAgICBpdChcInBhcnNlcyBwcm92aWRlciBzdHJpbmdcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgaW5wdXQgPSB7XG4gICAgICAgIHRlcnJhZm9ybVByb3ZpZGVyczogW1wiYXdzQH4+IDIuMFwiXSxcbiAgICAgIH07XG5cbiAgICAgIGV4cGVjdChwYXJzZUNvbmZpZyhKU09OLnN0cmluZ2lmeShpbnB1dCkpKS50b01hdGNoSW5saW5lU25hcHNob3QoYFxuICAgICAgICB7XG4gICAgICAgICAgXCJjb2RlTWFrZXJPdXRwdXRcIjogXCIuZ2VuXCIsXG4gICAgICAgICAgXCJvdXRwdXRcIjogXCJjZGt0Zi5vdXRcIixcbiAgICAgICAgICBcInRlcnJhZm9ybVByb3ZpZGVyc1wiOiBbXG4gICAgICAgICAgICBUZXJyYWZvcm1Qcm92aWRlckNvbnN0cmFpbnQge1xuICAgICAgICAgICAgICBcImZxblwiOiBcImF3c1wiLFxuICAgICAgICAgICAgICBcIm5hbWVcIjogXCJhd3NcIixcbiAgICAgICAgICAgICAgXCJuYW1lc3BhY2VcIjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICBcInNvdXJjZVwiOiBcImF3c1wiLFxuICAgICAgICAgICAgICBcInZlcnNpb25cIjogXCJ+PiAyLjBcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfVxuICAgICAgYCk7XG4gICAgfSk7XG5cbiAgICBpdChcInBhcnNlcyBwcm92aWRlciBzdHJpbmcgd2l0aCBuYW1lc3BhY2VcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgaW5wdXQgPSB7XG4gICAgICAgIHRlcnJhZm9ybVByb3ZpZGVyczogW1wiaGFzaGljb3JwL2F3c0B+PiAyLjBcIl0sXG4gICAgICB9O1xuXG4gICAgICBleHBlY3QocGFyc2VDb25maWcoSlNPTi5zdHJpbmdpZnkoaW5wdXQpKSkudG9NYXRjaElubGluZVNuYXBzaG90KGBcbiAgICAgICAge1xuICAgICAgICAgIFwiY29kZU1ha2VyT3V0cHV0XCI6IFwiLmdlblwiLFxuICAgICAgICAgIFwib3V0cHV0XCI6IFwiY2RrdGYub3V0XCIsXG4gICAgICAgICAgXCJ0ZXJyYWZvcm1Qcm92aWRlcnNcIjogW1xuICAgICAgICAgICAgVGVycmFmb3JtUHJvdmlkZXJDb25zdHJhaW50IHtcbiAgICAgICAgICAgICAgXCJmcW5cIjogXCJoYXNoaWNvcnAvYXdzXCIsXG4gICAgICAgICAgICAgIFwibmFtZVwiOiBcImF3c1wiLFxuICAgICAgICAgICAgICBcIm5hbWVzcGFjZVwiOiBcImhhc2hpY29ycFwiLFxuICAgICAgICAgICAgICBcInNvdXJjZVwiOiBcImhhc2hpY29ycC9hd3NcIixcbiAgICAgICAgICAgICAgXCJ2ZXJzaW9uXCI6IFwifj4gMi4wXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH1cbiAgICAgIGApO1xuICAgIH0pO1xuXG4gICAgaXQoXCJwYXJzZXMgY29tcGxleCBwcm92aWRlciBjb25maWdcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgaW5wdXQgPSB7XG4gICAgICAgIHRlcnJhZm9ybVByb3ZpZGVyczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6IFwiYXdzXCIsXG4gICAgICAgICAgICB2ZXJzaW9uOiBcIn4+IDIuMFwiLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICB9O1xuXG4gICAgICBleHBlY3QocGFyc2VDb25maWcoSlNPTi5zdHJpbmdpZnkoaW5wdXQpKSkudG9NYXRjaElubGluZVNuYXBzaG90KGBcbiAgICAgICAge1xuICAgICAgICAgIFwiY29kZU1ha2VyT3V0cHV0XCI6IFwiLmdlblwiLFxuICAgICAgICAgIFwib3V0cHV0XCI6IFwiY2RrdGYub3V0XCIsXG4gICAgICAgICAgXCJ0ZXJyYWZvcm1Qcm92aWRlcnNcIjogW1xuICAgICAgICAgICAgVGVycmFmb3JtUHJvdmlkZXJDb25zdHJhaW50IHtcbiAgICAgICAgICAgICAgXCJmcW5cIjogXCJhd3NcIixcbiAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiYXdzXCIsXG4gICAgICAgICAgICAgIFwibmFtZXNwYWNlXCI6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgXCJzb3VyY2VcIjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICBcInZlcnNpb25cIjogXCJ+PiAyLjBcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfVxuICAgICAgYCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKFwibW9kdWxlc1wiLCAoKSA9PiB7XG4gICAgaXQoXCJwYXJzZXMgbW9kdWxlIHN0cmluZ1wiLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBpbnB1dCA9IHtcbiAgICAgICAgdGVycmFmb3JtTW9kdWxlczogW1widGVycmFmb3JtLWF3cy1tb2R1bGVzL3ZwYy9hd3NAMi4zOS4wXCJdLFxuICAgICAgfTtcblxuICAgICAgZXhwZWN0KHBhcnNlQ29uZmlnKEpTT04uc3RyaW5naWZ5KGlucHV0KSkpLnRvTWF0Y2hJbmxpbmVTbmFwc2hvdChgXG4gICAgICAgIHtcbiAgICAgICAgICBcImNvZGVNYWtlck91dHB1dFwiOiBcIi5nZW5cIixcbiAgICAgICAgICBcIm91dHB1dFwiOiBcImNka3RmLm91dFwiLFxuICAgICAgICAgIFwidGVycmFmb3JtTW9kdWxlc1wiOiBbXG4gICAgICAgICAgICBUZXJyYWZvcm1Nb2R1bGVDb25zdHJhaW50IHtcbiAgICAgICAgICAgICAgXCJmcW5cIjogXCJ0ZXJyYWZvcm0tYXdzLW1vZHVsZXMvdnBjL2F3c1wiLFxuICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2cGNcIixcbiAgICAgICAgICAgICAgXCJuYW1lc3BhY2VcIjogXCJ0ZXJyYWZvcm0tYXdzLW1vZHVsZXMvYXdzXCIsXG4gICAgICAgICAgICAgIFwic291cmNlXCI6IFwidGVycmFmb3JtLWF3cy1tb2R1bGVzL3ZwYy9hd3NcIixcbiAgICAgICAgICAgICAgXCJ2ZXJzaW9uXCI6IFwiMi4zOS4wXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH1cbiAgICAgIGApO1xuICAgIH0pO1xuXG4gICAgaXQoXCJwYXJzZXMgbW9kdWxlIGZvciBsb2NhbCBtb2R1bGUgZm9yIG1vZHVsZSBnZW5lcmF0b3JcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgaW5wdXQgPSB7XG4gICAgICAgIHRlcnJhZm9ybU1vZHVsZXM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiBcImxvY2FsLW1vZHVsZVwiLFxuICAgICAgICAgICAgc291cmNlOiBcIi4vZm9vXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIH07XG4gICAgICBjb25zdCBwYXJzZWQ6IGFueSA9IHBhcnNlQ29uZmlnKEpTT04uc3RyaW5naWZ5KGlucHV0KSk7XG4gICAgICBleHBlY3QocGFyc2VkLnRlcnJhZm9ybU1vZHVsZXNbMF0ubG9jYWxTb3VyY2VBYnNvbHV0ZVBhdGgpLnRvTWF0Y2goXG4gICAgICAgIFwiL3BhY2thZ2VzL0BjZGt0Zi9jb21tb25zL2Zvb1wiXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoXCJwYXJzZXMgc3ViIG1vZHVsZSByZWdpc3RyeSBzdHJpbmdcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgaW5wdXQgPSB7XG4gICAgICAgIHRlcnJhZm9ybU1vZHVsZXM6IFtcbiAgICAgICAgICBcInRlcnJhZm9ybS1hd3MtbW9kdWxlcy9pYW0vYXdzLy9tb2R1bGVzL2lhbS1hY2NvdW50QDMuMTIuMFwiLFxuICAgICAgICBdLFxuICAgICAgfTtcblxuICAgICAgZXhwZWN0KHBhcnNlQ29uZmlnKEpTT04uc3RyaW5naWZ5KGlucHV0KSkpLnRvTWF0Y2hJbmxpbmVTbmFwc2hvdChgXG4gICAgICAgIHtcbiAgICAgICAgICBcImNvZGVNYWtlck91dHB1dFwiOiBcIi5nZW5cIixcbiAgICAgICAgICBcIm91dHB1dFwiOiBcImNka3RmLm91dFwiLFxuICAgICAgICAgIFwidGVycmFmb3JtTW9kdWxlc1wiOiBbXG4gICAgICAgICAgICBUZXJyYWZvcm1Nb2R1bGVDb25zdHJhaW50IHtcbiAgICAgICAgICAgICAgXCJmcW5cIjogXCJ0ZXJyYWZvcm0tYXdzLW1vZHVsZXMvaWFtL2F3cy9tb2R1bGVzL2lhbS1hY2NvdW50XCIsXG4gICAgICAgICAgICAgIFwibmFtZVwiOiBcImlhbS1hY2NvdW50XCIsXG4gICAgICAgICAgICAgIFwibmFtZXNwYWNlXCI6IFwidGVycmFmb3JtLWF3cy1tb2R1bGVzL2F3cy9pYW0vbW9kdWxlc1wiLFxuICAgICAgICAgICAgICBcInNvdXJjZVwiOiBcInRlcnJhZm9ybS1hd3MtbW9kdWxlcy9pYW0vYXdzLy9tb2R1bGVzL2lhbS1hY2NvdW50XCIsXG4gICAgICAgICAgICAgIFwidmVyc2lvblwiOiBcIjMuMTIuMFwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9XG4gICAgICBgKTtcbiAgICB9KTtcblxuICAgIGl0KFwidGFrZXMgY29tcGxleCBjb25maWdcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgaW5wdXQgPSB7XG4gICAgICAgIHRlcnJhZm9ybU1vZHVsZXM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiBcImN1c3RvbUFXU1ZwY1wiLFxuICAgICAgICAgICAgc291cmNlOlxuICAgICAgICAgICAgICBcImh0dHBzOi8vZ2l0aHViLmNvbS90ZXJyYWZvcm0tYXdzLW1vZHVsZXMvdGVycmFmb3JtLWF3cy12cGNcIixcbiAgICAgICAgICAgIHZlcnNpb246IFwifj4gdjIuMFwiLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICB9O1xuXG4gICAgICBleHBlY3QocGFyc2VDb25maWcoSlNPTi5zdHJpbmdpZnkoaW5wdXQpKSkudG9NYXRjaElubGluZVNuYXBzaG90KGBcbiAgICAgICAge1xuICAgICAgICAgIFwiY29kZU1ha2VyT3V0cHV0XCI6IFwiLmdlblwiLFxuICAgICAgICAgIFwib3V0cHV0XCI6IFwiY2RrdGYub3V0XCIsXG4gICAgICAgICAgXCJ0ZXJyYWZvcm1Nb2R1bGVzXCI6IFtcbiAgICAgICAgICAgIFRlcnJhZm9ybU1vZHVsZUNvbnN0cmFpbnQge1xuICAgICAgICAgICAgICBcImZxblwiOiBcImN1c3RvbUFXU1ZwY1wiLFxuICAgICAgICAgICAgICBcIm5hbWVcIjogXCJjdXN0b21BV1NWcGNcIixcbiAgICAgICAgICAgICAgXCJuYW1lc3BhY2VcIjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICBcInNvdXJjZVwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS90ZXJyYWZvcm0tYXdzLW1vZHVsZXMvdGVycmFmb3JtLWF3cy12cGNcIixcbiAgICAgICAgICAgICAgXCJ2ZXJzaW9uXCI6IFwifj4gdjIuMFwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9XG4gICAgICBgKTtcbiAgICB9KTtcblxuICAgIGl0KFwidGFrZXMgY29tcGxleCBhbmQgc3RyaW5nIGNvbmZpZ1wiLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBpbnB1dCA9IHtcbiAgICAgICAgdGVycmFmb3JtTW9kdWxlczogW1xuICAgICAgICAgIFwidGVycmFmb3JtLWF3cy1tb2R1bGVzL3ZwYy9hd3NAMi4zOS4wXCIsXG4gICAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogXCJjdXN0b21BV1NWcGNcIixcbiAgICAgICAgICAgIHNvdXJjZTpcbiAgICAgICAgICAgICAgXCJodHRwczovL2dpdGh1Yi5jb20vdGVycmFmb3JtLWF3cy1tb2R1bGVzL3RlcnJhZm9ybS1hd3MtdnBjXCIsXG4gICAgICAgICAgICB2ZXJzaW9uOiBcIn4+IHYyLjBcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgfTtcblxuICAgICAgZXhwZWN0KHBhcnNlQ29uZmlnKEpTT04uc3RyaW5naWZ5KGlucHV0KSkpLnRvTWF0Y2hJbmxpbmVTbmFwc2hvdChgXG4gICAgICAgIHtcbiAgICAgICAgICBcImNvZGVNYWtlck91dHB1dFwiOiBcIi5nZW5cIixcbiAgICAgICAgICBcIm91dHB1dFwiOiBcImNka3RmLm91dFwiLFxuICAgICAgICAgIFwidGVycmFmb3JtTW9kdWxlc1wiOiBbXG4gICAgICAgICAgICBUZXJyYWZvcm1Nb2R1bGVDb25zdHJhaW50IHtcbiAgICAgICAgICAgICAgXCJmcW5cIjogXCJ0ZXJyYWZvcm0tYXdzLW1vZHVsZXMvdnBjL2F3c1wiLFxuICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2cGNcIixcbiAgICAgICAgICAgICAgXCJuYW1lc3BhY2VcIjogXCJ0ZXJyYWZvcm0tYXdzLW1vZHVsZXMvYXdzXCIsXG4gICAgICAgICAgICAgIFwic291cmNlXCI6IFwidGVycmFmb3JtLWF3cy1tb2R1bGVzL3ZwYy9hd3NcIixcbiAgICAgICAgICAgICAgXCJ2ZXJzaW9uXCI6IFwiMi4zOS4wXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgVGVycmFmb3JtTW9kdWxlQ29uc3RyYWludCB7XG4gICAgICAgICAgICAgIFwiZnFuXCI6IFwiY3VzdG9tQVdTVnBjXCIsXG4gICAgICAgICAgICAgIFwibmFtZVwiOiBcImN1c3RvbUFXU1ZwY1wiLFxuICAgICAgICAgICAgICBcIm5hbWVzcGFjZVwiOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIFwic291cmNlXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL3RlcnJhZm9ybS1hd3MtbW9kdWxlcy90ZXJyYWZvcm0tYXdzLXZwY1wiLFxuICAgICAgICAgICAgICBcInZlcnNpb25cIjogXCJ+PiB2Mi4wXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH1cbiAgICAgIGApO1xuICAgIH0pO1xuXG4gICAgaXQoXCJwYXJzZXMgbG9jYWwgcGF0aFwiLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBpbnB1dCA9IHtcbiAgICAgICAgdGVycmFmb3JtTW9kdWxlczogW1wiLi9jb25zdWxcIl0sXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBwYXJzZWQ6IGFueSA9IHBhcnNlQ29uZmlnKEpTT04uc3RyaW5naWZ5KGlucHV0KSk7XG4gICAgICBleHBlY3QocGFyc2VkLnRlcnJhZm9ybU1vZHVsZXNbMF0ubG9jYWxTb3VyY2VBYnNvbHV0ZVBhdGgpLnRvTWF0Y2goXG4gICAgICAgIFwiL3BhY2thZ2VzL0BjZGt0Zi9jb21tb25zL2NvbnN1bFwiXG4gICAgICApO1xuXG4gICAgICBleHBlY3QocGFyc2VkLnRlcnJhZm9ybU1vZHVsZXNbMF0ubmFtZSkudG9NYXRjaChcImNvbnN1bFwiKTtcbiAgICB9KTtcblxuICAgIGl0KFwicGFyc2VzIHJlZ2lzdHJ5XCIsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGlucHV0ID0ge1xuICAgICAgICB0ZXJyYWZvcm1Nb2R1bGVzOiBbXCJoYXNoaWNvcnAvY29uc3VsL2F3c0AwLjEuMFwiXSxcbiAgICAgIH07XG5cbiAgICAgIGV4cGVjdChwYXJzZUNvbmZpZyhKU09OLnN0cmluZ2lmeShpbnB1dCkpKS50b01hdGNoSW5saW5lU25hcHNob3QoYFxuICAgICAgICB7XG4gICAgICAgICAgXCJjb2RlTWFrZXJPdXRwdXRcIjogXCIuZ2VuXCIsXG4gICAgICAgICAgXCJvdXRwdXRcIjogXCJjZGt0Zi5vdXRcIixcbiAgICAgICAgICBcInRlcnJhZm9ybU1vZHVsZXNcIjogW1xuICAgICAgICAgICAgVGVycmFmb3JtTW9kdWxlQ29uc3RyYWludCB7XG4gICAgICAgICAgICAgIFwiZnFuXCI6IFwiaGFzaGljb3JwL2NvbnN1bC9hd3NcIixcbiAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiY29uc3VsXCIsXG4gICAgICAgICAgICAgIFwibmFtZXNwYWNlXCI6IFwiaGFzaGljb3JwL2F3c1wiLFxuICAgICAgICAgICAgICBcInNvdXJjZVwiOiBcImhhc2hpY29ycC9jb25zdWwvYXdzXCIsXG4gICAgICAgICAgICAgIFwidmVyc2lvblwiOiBcIjAuMS4wXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH1cbiAgICAgIGApO1xuICAgIH0pO1xuXG4gICAgaXQoXCJwYXJzZXMgcHJpdmF0ZSByZWdpc3RyeVwiLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBpbnB1dCA9IHtcbiAgICAgICAgdGVycmFmb3JtTW9kdWxlczogW1xuICAgICAgICAgIFwiYXBwLnRlcnJhZm9ybS5pby9leGFtcGxlLWNvcnAvazhzLWNsdXN0ZXIvYXp1cmVybUAxLjEuMFwiLFxuICAgICAgICBdLFxuICAgICAgfTtcblxuICAgICAgZXhwZWN0KHBhcnNlQ29uZmlnKEpTT04uc3RyaW5naWZ5KGlucHV0KSkpLnRvTWF0Y2hJbmxpbmVTbmFwc2hvdChgXG4gICAgICAgIHtcbiAgICAgICAgICBcImNvZGVNYWtlck91dHB1dFwiOiBcIi5nZW5cIixcbiAgICAgICAgICBcIm91dHB1dFwiOiBcImNka3RmLm91dFwiLFxuICAgICAgICAgIFwidGVycmFmb3JtTW9kdWxlc1wiOiBbXG4gICAgICAgICAgICBUZXJyYWZvcm1Nb2R1bGVDb25zdHJhaW50IHtcbiAgICAgICAgICAgICAgXCJmcW5cIjogXCJhcHAtdGVycmFmb3JtLWlvL2V4YW1wbGUtY29ycC9rOHMtY2x1c3Rlci9henVyZXJtXCIsXG4gICAgICAgICAgICAgIFwibmFtZVwiOiBcIms4cy1jbHVzdGVyXCIsXG4gICAgICAgICAgICAgIFwibmFtZXNwYWNlXCI6IFwiZXhhbXBsZS1jb3JwL2F6dXJlcm1cIixcbiAgICAgICAgICAgICAgXCJzb3VyY2VcIjogXCJhcHAudGVycmFmb3JtLmlvL2V4YW1wbGUtY29ycC9rOHMtY2x1c3Rlci9henVyZXJtXCIsXG4gICAgICAgICAgICAgIFwidmVyc2lvblwiOiBcIjEuMS4wXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH1cbiAgICAgIGApO1xuICAgIH0pO1xuXG4gICAgaXQoXCJwYXJzZXMgZ2l0aHViXCIsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGlucHV0ID0ge1xuICAgICAgICB0ZXJyYWZvcm1Nb2R1bGVzOiBbXCJnaXRodWIuY29tL2hhc2hpY29ycC9leGFtcGxlXCJdLFxuICAgICAgfTtcblxuICAgICAgZXhwZWN0KHBhcnNlQ29uZmlnKEpTT04uc3RyaW5naWZ5KGlucHV0KSkpLnRvTWF0Y2hJbmxpbmVTbmFwc2hvdChgXG4gICAgICAgIHtcbiAgICAgICAgICBcImNvZGVNYWtlck91dHB1dFwiOiBcIi5nZW5cIixcbiAgICAgICAgICBcIm91dHB1dFwiOiBcImNka3RmLm91dFwiLFxuICAgICAgICAgIFwidGVycmFmb3JtTW9kdWxlc1wiOiBbXG4gICAgICAgICAgICBUZXJyYWZvcm1Nb2R1bGVDb25zdHJhaW50IHtcbiAgICAgICAgICAgICAgXCJmcW5cIjogXCJoYXNoaWNvcnAvZXhhbXBsZVwiLFxuICAgICAgICAgICAgICBcIm5hbWVcIjogXCJleGFtcGxlXCIsXG4gICAgICAgICAgICAgIFwibmFtZXNwYWNlXCI6IFwiaGFzaGljb3JwXCIsXG4gICAgICAgICAgICAgIFwic291cmNlXCI6IFwiZ2l0aHViLmNvbS9oYXNoaWNvcnAvZXhhbXBsZVwiLFxuICAgICAgICAgICAgICBcInZlcnNpb25cIjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9XG4gICAgICBgKTtcbiAgICB9KTtcblxuICAgIGl0KFwicGFyc2VzIGdpdGh1YiBzc2hcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgaW5wdXQgPSB7XG4gICAgICAgIHRlcnJhZm9ybU1vZHVsZXM6IFtcImdpdEBnaXRodWIuY29tOmhhc2hpY29ycC9leGFtcGxlLmdpdFwiXSxcbiAgICAgIH07XG5cbiAgICAgIGV4cGVjdChwYXJzZUNvbmZpZyhKU09OLnN0cmluZ2lmeShpbnB1dCkpKS50b01hdGNoSW5saW5lU25hcHNob3QoYFxuICAgICAgICB7XG4gICAgICAgICAgXCJjb2RlTWFrZXJPdXRwdXRcIjogXCIuZ2VuXCIsXG4gICAgICAgICAgXCJvdXRwdXRcIjogXCJjZGt0Zi5vdXRcIixcbiAgICAgICAgICBcInRlcnJhZm9ybU1vZHVsZXNcIjogW1xuICAgICAgICAgICAgVGVycmFmb3JtTW9kdWxlQ29uc3RyYWludCB7XG4gICAgICAgICAgICAgIFwiZnFuXCI6IFwiaGFzaGljb3JwL2V4YW1wbGVcIixcbiAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiZXhhbXBsZVwiLFxuICAgICAgICAgICAgICBcIm5hbWVzcGFjZVwiOiBcImhhc2hpY29ycFwiLFxuICAgICAgICAgICAgICBcInNvdXJjZVwiOiBcImdpdEBnaXRodWIuY29tOmhhc2hpY29ycC9leGFtcGxlLmdpdFwiLFxuICAgICAgICAgICAgICBcInZlcnNpb25cIjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9XG4gICAgICBgKTtcbiAgICB9KTtcblxuICAgIGl0KFwicGFyc2VzIGJpdGJ1Y2tldFwiLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBpbnB1dCA9IHtcbiAgICAgICAgdGVycmFmb3JtTW9kdWxlczogW1wiYml0YnVja2V0Lm9yZy9oYXNoaWNvcnAvdGVycmFmb3JtLWNvbnN1bC1hd3NcIl0sXG4gICAgICB9O1xuXG4gICAgICBleHBlY3QocGFyc2VDb25maWcoSlNPTi5zdHJpbmdpZnkoaW5wdXQpKSkudG9NYXRjaElubGluZVNuYXBzaG90KGBcbiAgICAgICAge1xuICAgICAgICAgIFwiY29kZU1ha2VyT3V0cHV0XCI6IFwiLmdlblwiLFxuICAgICAgICAgIFwib3V0cHV0XCI6IFwiY2RrdGYub3V0XCIsXG4gICAgICAgICAgXCJ0ZXJyYWZvcm1Nb2R1bGVzXCI6IFtcbiAgICAgICAgICAgIFRlcnJhZm9ybU1vZHVsZUNvbnN0cmFpbnQge1xuICAgICAgICAgICAgICBcImZxblwiOiBcImhhc2hpY29ycC90ZXJyYWZvcm0tY29uc3VsLWF3c1wiLFxuICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ0ZXJyYWZvcm0tY29uc3VsLWF3c1wiLFxuICAgICAgICAgICAgICBcIm5hbWVzcGFjZVwiOiBcImhhc2hpY29ycFwiLFxuICAgICAgICAgICAgICBcInNvdXJjZVwiOiBcImJpdGJ1Y2tldC5vcmcvaGFzaGljb3JwL3RlcnJhZm9ybS1jb25zdWwtYXdzXCIsXG4gICAgICAgICAgICAgIFwidmVyc2lvblwiOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH1cbiAgICAgIGApO1xuICAgIH0pO1xuXG4gICAgaXQoXCJwYXJzZXMgZ2VuZXJpYyBnaXRcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgaW5wdXQgPSB7XG4gICAgICAgIHRlcnJhZm9ybU1vZHVsZXM6IFtcImdpdDo6aHR0cHM6Ly9leGFtcGxlLmNvbS92cGMuZ2l0XCJdLFxuICAgICAgfTtcblxuICAgICAgZXhwZWN0KHBhcnNlQ29uZmlnKEpTT04uc3RyaW5naWZ5KGlucHV0KSkpLnRvTWF0Y2hJbmxpbmVTbmFwc2hvdChgXG4gICAgICAgIHtcbiAgICAgICAgICBcImNvZGVNYWtlck91dHB1dFwiOiBcIi5nZW5cIixcbiAgICAgICAgICBcIm91dHB1dFwiOiBcImNka3RmLm91dFwiLFxuICAgICAgICAgIFwidGVycmFmb3JtTW9kdWxlc1wiOiBbXG4gICAgICAgICAgICBUZXJyYWZvcm1Nb2R1bGVDb25zdHJhaW50IHtcbiAgICAgICAgICAgICAgXCJmcW5cIjogXCJ2cGNcIixcbiAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidnBjXCIsXG4gICAgICAgICAgICAgIFwibmFtZXNwYWNlXCI6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgXCJzb3VyY2VcIjogXCJnaXQ6Omh0dHBzOi8vZXhhbXBsZS5jb20vdnBjLmdpdFwiLFxuICAgICAgICAgICAgICBcInZlcnNpb25cIjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9XG4gICAgICBgKTtcbiAgICB9KTtcblxuICAgIGl0KFwicGFyc2VzIGdpdCBzc2hcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgaW5wdXQgPSB7XG4gICAgICAgIHRlcnJhZm9ybU1vZHVsZXM6IFtcImdpdDo6c3NoOi8vdXNlcm5hbWVAZXhhbXBsZS5jb20vc3RvcmFnZS5naXRcIl0sXG4gICAgICB9O1xuXG4gICAgICBleHBlY3QocGFyc2VDb25maWcoSlNPTi5zdHJpbmdpZnkoaW5wdXQpKSkudG9NYXRjaElubGluZVNuYXBzaG90KGBcbiAgICAgICAge1xuICAgICAgICAgIFwiY29kZU1ha2VyT3V0cHV0XCI6IFwiLmdlblwiLFxuICAgICAgICAgIFwib3V0cHV0XCI6IFwiY2RrdGYub3V0XCIsXG4gICAgICAgICAgXCJ0ZXJyYWZvcm1Nb2R1bGVzXCI6IFtcbiAgICAgICAgICAgIFRlcnJhZm9ybU1vZHVsZUNvbnN0cmFpbnQge1xuICAgICAgICAgICAgICBcImZxblwiOiBcInN0b3JhZ2VcIixcbiAgICAgICAgICAgICAgXCJuYW1lXCI6IFwic3RvcmFnZVwiLFxuICAgICAgICAgICAgICBcIm5hbWVzcGFjZVwiOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIFwic291cmNlXCI6IFwiZ2l0Ojpzc2g6Ly91c2VybmFtZUBleGFtcGxlLmNvbS9zdG9yYWdlLmdpdFwiLFxuICAgICAgICAgICAgICBcInZlcnNpb25cIjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9XG4gICAgICBgKTtcbiAgICB9KTtcblxuICAgIGl0KFwicGFyc2VzIHJldmlzaW9uXCIsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGlucHV0ID0ge1xuICAgICAgICB0ZXJyYWZvcm1Nb2R1bGVzOiBbXG4gICAgICAgICAgXCJnaXQ6Omh0dHBzOi8vZXhhbXBsZS5jb20vaW5mcmEvbWFpbi12cGMuZ2l0P3JlZj12MS4yLjBcIixcbiAgICAgICAgXSxcbiAgICAgIH07XG5cbiAgICAgIGV4cGVjdChwYXJzZUNvbmZpZyhKU09OLnN0cmluZ2lmeShpbnB1dCkpKS50b01hdGNoSW5saW5lU25hcHNob3QoYFxuICAgICAgICB7XG4gICAgICAgICAgXCJjb2RlTWFrZXJPdXRwdXRcIjogXCIuZ2VuXCIsXG4gICAgICAgICAgXCJvdXRwdXRcIjogXCJjZGt0Zi5vdXRcIixcbiAgICAgICAgICBcInRlcnJhZm9ybU1vZHVsZXNcIjogW1xuICAgICAgICAgICAgVGVycmFmb3JtTW9kdWxlQ29uc3RyYWludCB7XG4gICAgICAgICAgICAgIFwiZnFuXCI6IFwiaW5mcmEvbWFpbi12cGNcIixcbiAgICAgICAgICAgICAgXCJuYW1lXCI6IFwibWFpbi12cGNcIixcbiAgICAgICAgICAgICAgXCJuYW1lc3BhY2VcIjogXCJpbmZyYVwiLFxuICAgICAgICAgICAgICBcInNvdXJjZVwiOiBcImdpdDo6aHR0cHM6Ly9leGFtcGxlLmNvbS9pbmZyYS9tYWluLXZwYy5naXQ/cmVmPXYxLjIuMFwiLFxuICAgICAgICAgICAgICBcInZlcnNpb25cIjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9XG4gICAgICBgKTtcbiAgICB9KTtcblxuICAgIGl0KFwicGFyc2VzIHNjcFwiLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBpbnB1dCA9IHtcbiAgICAgICAgdGVycmFmb3JtTW9kdWxlczogW1wiZ2l0Ojp1c2VybmFtZUBleGFtcGxlLmNvbTpzdG9yYWdlLmdpdFwiXSxcbiAgICAgIH07XG5cbiAgICAgIGV4cGVjdChwYXJzZUNvbmZpZyhKU09OLnN0cmluZ2lmeShpbnB1dCkpKS50b01hdGNoSW5saW5lU25hcHNob3QoYFxuICAgICAgICB7XG4gICAgICAgICAgXCJjb2RlTWFrZXJPdXRwdXRcIjogXCIuZ2VuXCIsXG4gICAgICAgICAgXCJvdXRwdXRcIjogXCJjZGt0Zi5vdXRcIixcbiAgICAgICAgICBcInRlcnJhZm9ybU1vZHVsZXNcIjogW1xuICAgICAgICAgICAgVGVycmFmb3JtTW9kdWxlQ29uc3RyYWludCB7XG4gICAgICAgICAgICAgIFwiZnFuXCI6IFwic3RvcmFnZVwiLFxuICAgICAgICAgICAgICBcIm5hbWVcIjogXCJzdG9yYWdlXCIsXG4gICAgICAgICAgICAgIFwibmFtZXNwYWNlXCI6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgXCJzb3VyY2VcIjogXCJnaXQ6OnVzZXJuYW1lQGV4YW1wbGUuY29tOnN0b3JhZ2UuZ2l0XCIsXG4gICAgICAgICAgICAgIFwidmVyc2lvblwiOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH1cbiAgICAgIGApO1xuICAgIH0pO1xuXG4gICAgaXQoXCJwYXJzZXMgbWVyY3VyaWFsXCIsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGlucHV0ID0ge1xuICAgICAgICB0ZXJyYWZvcm1Nb2R1bGVzOiBbXCJoZzo6aHR0cDovL2V4YW1wbGUuY29tL3ZwYy5oZ1wiXSxcbiAgICAgIH07XG5cbiAgICAgIGV4cGVjdChwYXJzZUNvbmZpZyhKU09OLnN0cmluZ2lmeShpbnB1dCkpKS50b01hdGNoSW5saW5lU25hcHNob3QoYFxuICAgICAgICB7XG4gICAgICAgICAgXCJjb2RlTWFrZXJPdXRwdXRcIjogXCIuZ2VuXCIsXG4gICAgICAgICAgXCJvdXRwdXRcIjogXCJjZGt0Zi5vdXRcIixcbiAgICAgICAgICBcInRlcnJhZm9ybU1vZHVsZXNcIjogW1xuICAgICAgICAgICAgVGVycmFmb3JtTW9kdWxlQ29uc3RyYWludCB7XG4gICAgICAgICAgICAgIFwiZnFuXCI6IFwidnBjXCIsXG4gICAgICAgICAgICAgIFwibmFtZVwiOiBcInZwY1wiLFxuICAgICAgICAgICAgICBcIm5hbWVzcGFjZVwiOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIFwic291cmNlXCI6IFwiaGc6Omh0dHA6Ly9leGFtcGxlLmNvbS92cGMuaGdcIixcbiAgICAgICAgICAgICAgXCJ2ZXJzaW9uXCI6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfVxuICAgICAgYCk7XG4gICAgfSk7XG5cbiAgICBpdChcInBhcnNlcyBoZyByZXZpc2lvblwiLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBpbnB1dCA9IHtcbiAgICAgICAgdGVycmFmb3JtTW9kdWxlczogW1wiaGc6Omh0dHA6Ly9leGFtcGxlLmNvbS92cGMuaGc/cmVmPXYxLjIuMFwiXSxcbiAgICAgIH07XG5cbiAgICAgIGV4cGVjdChwYXJzZUNvbmZpZyhKU09OLnN0cmluZ2lmeShpbnB1dCkpKS50b01hdGNoSW5saW5lU25hcHNob3QoYFxuICAgICAgICB7XG4gICAgICAgICAgXCJjb2RlTWFrZXJPdXRwdXRcIjogXCIuZ2VuXCIsXG4gICAgICAgICAgXCJvdXRwdXRcIjogXCJjZGt0Zi5vdXRcIixcbiAgICAgICAgICBcInRlcnJhZm9ybU1vZHVsZXNcIjogW1xuICAgICAgICAgICAgVGVycmFmb3JtTW9kdWxlQ29uc3RyYWludCB7XG4gICAgICAgICAgICAgIFwiZnFuXCI6IFwidnBjXCIsXG4gICAgICAgICAgICAgIFwibmFtZVwiOiBcInZwY1wiLFxuICAgICAgICAgICAgICBcIm5hbWVzcGFjZVwiOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIFwic291cmNlXCI6IFwiaGc6Omh0dHA6Ly9leGFtcGxlLmNvbS92cGMuaGc/cmVmPXYxLjIuMFwiLFxuICAgICAgICAgICAgICBcInZlcnNpb25cIjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9XG4gICAgICBgKTtcbiAgICB9KTtcblxuICAgIGl0KFwicGFyc2VzIGh0dHBcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgaW5wdXQgPSB7XG4gICAgICAgIHRlcnJhZm9ybU1vZHVsZXM6IFtcImh0dHBzOi8vZXhhbXBsZS5jb20vdnBjLW1vZHVsZS56aXBcIl0sXG4gICAgICB9O1xuXG4gICAgICBleHBlY3QocGFyc2VDb25maWcoSlNPTi5zdHJpbmdpZnkoaW5wdXQpKSkudG9NYXRjaElubGluZVNuYXBzaG90KGBcbiAgICAgICAge1xuICAgICAgICAgIFwiY29kZU1ha2VyT3V0cHV0XCI6IFwiLmdlblwiLFxuICAgICAgICAgIFwib3V0cHV0XCI6IFwiY2RrdGYub3V0XCIsXG4gICAgICAgICAgXCJ0ZXJyYWZvcm1Nb2R1bGVzXCI6IFtcbiAgICAgICAgICAgIFRlcnJhZm9ybU1vZHVsZUNvbnN0cmFpbnQge1xuICAgICAgICAgICAgICBcImZxblwiOiBcInZwYy1tb2R1bGVcIixcbiAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidnBjLW1vZHVsZVwiLFxuICAgICAgICAgICAgICBcIm5hbWVzcGFjZVwiOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIFwic291cmNlXCI6IFwiaHR0cHM6Ly9leGFtcGxlLmNvbS92cGMtbW9kdWxlLnppcFwiLFxuICAgICAgICAgICAgICBcInZlcnNpb25cIjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9XG4gICAgICBgKTtcbiAgICB9KTtcblxuICAgIGl0KFwicGFyc2VzIGFyY2hpdmUgdHlwZVwiLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBpbnB1dCA9IHtcbiAgICAgICAgdGVycmFmb3JtTW9kdWxlczogW1wiaHR0cHM6Ly9leGFtcGxlLmNvbS92cGMtbW9kdWxlP2FyY2hpdmU9emlwXCJdLFxuICAgICAgfTtcblxuICAgICAgZXhwZWN0KHBhcnNlQ29uZmlnKEpTT04uc3RyaW5naWZ5KGlucHV0KSkpLnRvTWF0Y2hJbmxpbmVTbmFwc2hvdChgXG4gICAgICAgIHtcbiAgICAgICAgICBcImNvZGVNYWtlck91dHB1dFwiOiBcIi5nZW5cIixcbiAgICAgICAgICBcIm91dHB1dFwiOiBcImNka3RmLm91dFwiLFxuICAgICAgICAgIFwidGVycmFmb3JtTW9kdWxlc1wiOiBbXG4gICAgICAgICAgICBUZXJyYWZvcm1Nb2R1bGVDb25zdHJhaW50IHtcbiAgICAgICAgICAgICAgXCJmcW5cIjogXCJ2cGMtbW9kdWxlXCIsXG4gICAgICAgICAgICAgIFwibmFtZVwiOiBcInZwYy1tb2R1bGVcIixcbiAgICAgICAgICAgICAgXCJuYW1lc3BhY2VcIjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICBcInNvdXJjZVwiOiBcImh0dHBzOi8vZXhhbXBsZS5jb20vdnBjLW1vZHVsZT9hcmNoaXZlPXppcFwiLFxuICAgICAgICAgICAgICBcInZlcnNpb25cIjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9XG4gICAgICBgKTtcbiAgICB9KTtcblxuICAgIGl0KFwicGFyc2VzIHMzXCIsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGlucHV0ID0ge1xuICAgICAgICB0ZXJyYWZvcm1Nb2R1bGVzOiBbXG4gICAgICAgICAgXCJzMzo6aHR0cHM6Ly9zMy1ldS13ZXN0LTEuYW1hem9uYXdzLmNvbS9leGFtcGxlY29ycC10ZXJyYWZvcm0tbW9kdWxlcy92cGMuemlwXCIsXG4gICAgICAgIF0sXG4gICAgICB9O1xuXG4gICAgICBleHBlY3QocGFyc2VDb25maWcoSlNPTi5zdHJpbmdpZnkoaW5wdXQpKSkudG9NYXRjaElubGluZVNuYXBzaG90KGBcbiAgICAgICAge1xuICAgICAgICAgIFwiY29kZU1ha2VyT3V0cHV0XCI6IFwiLmdlblwiLFxuICAgICAgICAgIFwib3V0cHV0XCI6IFwiY2RrdGYub3V0XCIsXG4gICAgICAgICAgXCJ0ZXJyYWZvcm1Nb2R1bGVzXCI6IFtcbiAgICAgICAgICAgIFRlcnJhZm9ybU1vZHVsZUNvbnN0cmFpbnQge1xuICAgICAgICAgICAgICBcImZxblwiOiBcImV4YW1wbGVjb3JwLXRlcnJhZm9ybS1tb2R1bGVzL3ZwY1wiLFxuICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2cGNcIixcbiAgICAgICAgICAgICAgXCJuYW1lc3BhY2VcIjogXCJleGFtcGxlY29ycC10ZXJyYWZvcm0tbW9kdWxlc1wiLFxuICAgICAgICAgICAgICBcInNvdXJjZVwiOiBcInMzOjpodHRwczovL3MzLWV1LXdlc3QtMS5hbWF6b25hd3MuY29tL2V4YW1wbGVjb3JwLXRlcnJhZm9ybS1tb2R1bGVzL3ZwYy56aXBcIixcbiAgICAgICAgICAgICAgXCJ2ZXJzaW9uXCI6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfVxuICAgICAgYCk7XG4gICAgfSk7XG5cbiAgICBpdChcInBhcnNlcyBnY3NcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgaW5wdXQgPSB7XG4gICAgICAgIHRlcnJhZm9ybU1vZHVsZXM6IFtcbiAgICAgICAgICBcImdjczo6aHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vc3RvcmFnZS92MS9tb2R1bGVzL2Zvb21vZHVsZS56aXBcIixcbiAgICAgICAgXSxcbiAgICAgIH07XG5cbiAgICAgIGV4cGVjdChwYXJzZUNvbmZpZyhKU09OLnN0cmluZ2lmeShpbnB1dCkpKS50b01hdGNoSW5saW5lU25hcHNob3QoYFxuICAgICAgICB7XG4gICAgICAgICAgXCJjb2RlTWFrZXJPdXRwdXRcIjogXCIuZ2VuXCIsXG4gICAgICAgICAgXCJvdXRwdXRcIjogXCJjZGt0Zi5vdXRcIixcbiAgICAgICAgICBcInRlcnJhZm9ybU1vZHVsZXNcIjogW1xuICAgICAgICAgICAgVGVycmFmb3JtTW9kdWxlQ29uc3RyYWludCB7XG4gICAgICAgICAgICAgIFwiZnFuXCI6IFwic3RvcmFnZS92MS9tb2R1bGVzL2Zvb21vZHVsZVwiLFxuICAgICAgICAgICAgICBcIm5hbWVcIjogXCJmb29tb2R1bGVcIixcbiAgICAgICAgICAgICAgXCJuYW1lc3BhY2VcIjogXCJtb2R1bGVzXCIsXG4gICAgICAgICAgICAgIFwic291cmNlXCI6IFwiZ2NzOjpodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9zdG9yYWdlL3YxL21vZHVsZXMvZm9vbW9kdWxlLnppcFwiLFxuICAgICAgICAgICAgICBcInZlcnNpb25cIjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9XG4gICAgICBgKTtcbiAgICB9KTtcblxuICAgIGl0KFwicGFyc2VzIHN1Ym1vZHVsZSByZWdpc3RyeVwiLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBpbnB1dCA9IHtcbiAgICAgICAgdGVycmFmb3JtTW9kdWxlczogW1wiaGFzaGljb3JwL2NvbnN1bC9hd3MvL21vZHVsZXMvY29uc3VsLWNsdXN0ZXJcIl0sXG4gICAgICB9O1xuXG4gICAgICBleHBlY3QocGFyc2VDb25maWcoSlNPTi5zdHJpbmdpZnkoaW5wdXQpKSkudG9NYXRjaElubGluZVNuYXBzaG90KGBcbiAgICAgICAge1xuICAgICAgICAgIFwiY29kZU1ha2VyT3V0cHV0XCI6IFwiLmdlblwiLFxuICAgICAgICAgIFwib3V0cHV0XCI6IFwiY2RrdGYub3V0XCIsXG4gICAgICAgICAgXCJ0ZXJyYWZvcm1Nb2R1bGVzXCI6IFtcbiAgICAgICAgICAgIFRlcnJhZm9ybU1vZHVsZUNvbnN0cmFpbnQge1xuICAgICAgICAgICAgICBcImZxblwiOiBcImhhc2hpY29ycC9jb25zdWwvYXdzL21vZHVsZXMvY29uc3VsLWNsdXN0ZXJcIixcbiAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiY29uc3VsLWNsdXN0ZXJcIixcbiAgICAgICAgICAgICAgXCJuYW1lc3BhY2VcIjogXCJoYXNoaWNvcnAvYXdzL2NvbnN1bC9tb2R1bGVzXCIsXG4gICAgICAgICAgICAgIFwic291cmNlXCI6IFwiaGFzaGljb3JwL2NvbnN1bC9hd3MvL21vZHVsZXMvY29uc3VsLWNsdXN0ZXJcIixcbiAgICAgICAgICAgICAgXCJ2ZXJzaW9uXCI6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfVxuICAgICAgYCk7XG4gICAgfSk7XG5cbiAgICBpdChcInBhcnNlcyBzdWJtb2R1bGUgZ2l0XCIsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGlucHV0ID0ge1xuICAgICAgICB0ZXJyYWZvcm1Nb2R1bGVzOiBbXCJnaXQ6Omh0dHBzOi8vZXhhbXBsZS5jb20vbmV0d29yay5naXQvL21vZHVsZXMvdnBjXCJdLFxuICAgICAgfTtcblxuICAgICAgZXhwZWN0KHBhcnNlQ29uZmlnKEpTT04uc3RyaW5naWZ5KGlucHV0KSkpLnRvTWF0Y2hJbmxpbmVTbmFwc2hvdChgXG4gICAgICAgIHtcbiAgICAgICAgICBcImNvZGVNYWtlck91dHB1dFwiOiBcIi5nZW5cIixcbiAgICAgICAgICBcIm91dHB1dFwiOiBcImNka3RmLm91dFwiLFxuICAgICAgICAgIFwidGVycmFmb3JtTW9kdWxlc1wiOiBbXG4gICAgICAgICAgICBUZXJyYWZvcm1Nb2R1bGVDb25zdHJhaW50IHtcbiAgICAgICAgICAgICAgXCJmcW5cIjogXCJuZXR3b3JrL21vZHVsZXMvdnBjXCIsXG4gICAgICAgICAgICAgIFwibmFtZVwiOiBcInZwY1wiLFxuICAgICAgICAgICAgICBcIm5hbWVzcGFjZVwiOiBcIm5ldHdvcmsvbW9kdWxlc1wiLFxuICAgICAgICAgICAgICBcInNvdXJjZVwiOiBcImdpdDo6aHR0cHM6Ly9leGFtcGxlLmNvbS9uZXR3b3JrLmdpdC8vbW9kdWxlcy92cGNcIixcbiAgICAgICAgICAgICAgXCJ2ZXJzaW9uXCI6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfVxuICAgICAgYCk7XG4gICAgfSk7XG5cbiAgICBpdChcInBhcnNlcyBzdWJtb2R1bGUgaHR0cFwiLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBpbnB1dCA9IHtcbiAgICAgICAgdGVycmFmb3JtTW9kdWxlczogW1xuICAgICAgICAgIFwiaHR0cHM6Ly9leGFtcGxlLmNvbS9uZXR3b3JrLW1vZHVsZS56aXAvL21vZHVsZXMvdnBjXCIsXG4gICAgICAgIF0sXG4gICAgICB9O1xuXG4gICAgICBleHBlY3QocGFyc2VDb25maWcoSlNPTi5zdHJpbmdpZnkoaW5wdXQpKSkudG9NYXRjaElubGluZVNuYXBzaG90KGBcbiAgICAgICAge1xuICAgICAgICAgIFwiY29kZU1ha2VyT3V0cHV0XCI6IFwiLmdlblwiLFxuICAgICAgICAgIFwib3V0cHV0XCI6IFwiY2RrdGYub3V0XCIsXG4gICAgICAgICAgXCJ0ZXJyYWZvcm1Nb2R1bGVzXCI6IFtcbiAgICAgICAgICAgIFRlcnJhZm9ybU1vZHVsZUNvbnN0cmFpbnQge1xuICAgICAgICAgICAgICBcImZxblwiOiBcIm5ldHdvcmstbW9kdWxlL21vZHVsZXMvdnBjXCIsXG4gICAgICAgICAgICAgIFwibmFtZVwiOiBcInZwY1wiLFxuICAgICAgICAgICAgICBcIm5hbWVzcGFjZVwiOiBcIm5ldHdvcmstbW9kdWxlL21vZHVsZXNcIixcbiAgICAgICAgICAgICAgXCJzb3VyY2VcIjogXCJodHRwczovL2V4YW1wbGUuY29tL25ldHdvcmstbW9kdWxlLnppcC8vbW9kdWxlcy92cGNcIixcbiAgICAgICAgICAgICAgXCJ2ZXJzaW9uXCI6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfVxuICAgICAgYCk7XG4gICAgfSk7XG5cbiAgICBpdChcInBhcnNlcyBzdWJtb2R1bGUgczNcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgaW5wdXQgPSB7XG4gICAgICAgIHRlcnJhZm9ybU1vZHVsZXM6IFtcbiAgICAgICAgICBcInMzOjpodHRwczovL3MzLWV1LXdlc3QtMS5hbWF6b25hd3MuY29tL2V4YW1wbGVjb3JwLXRlcnJhZm9ybS1tb2R1bGVzL25ldHdvcmsuemlwLy9tb2R1bGVzL3ZwY1wiLFxuICAgICAgICBdLFxuICAgICAgfTtcblxuICAgICAgZXhwZWN0KHBhcnNlQ29uZmlnKEpTT04uc3RyaW5naWZ5KGlucHV0KSkpLnRvTWF0Y2hJbmxpbmVTbmFwc2hvdChgXG4gICAgICAgIHtcbiAgICAgICAgICBcImNvZGVNYWtlck91dHB1dFwiOiBcIi5nZW5cIixcbiAgICAgICAgICBcIm91dHB1dFwiOiBcImNka3RmLm91dFwiLFxuICAgICAgICAgIFwidGVycmFmb3JtTW9kdWxlc1wiOiBbXG4gICAgICAgICAgICBUZXJyYWZvcm1Nb2R1bGVDb25zdHJhaW50IHtcbiAgICAgICAgICAgICAgXCJmcW5cIjogXCJleGFtcGxlY29ycC10ZXJyYWZvcm0tbW9kdWxlcy9uZXR3b3JrL21vZHVsZXMvdnBjXCIsXG4gICAgICAgICAgICAgIFwibmFtZVwiOiBcInZwY1wiLFxuICAgICAgICAgICAgICBcIm5hbWVzcGFjZVwiOiBcImV4YW1wbGVjb3JwLXRlcnJhZm9ybS1tb2R1bGVzL25ldHdvcmsvbW9kdWxlc1wiLFxuICAgICAgICAgICAgICBcInNvdXJjZVwiOiBcInMzOjpodHRwczovL3MzLWV1LXdlc3QtMS5hbWF6b25hd3MuY29tL2V4YW1wbGVjb3JwLXRlcnJhZm9ybS1tb2R1bGVzL25ldHdvcmsuemlwLy9tb2R1bGVzL3ZwY1wiLFxuICAgICAgICAgICAgICBcInZlcnNpb25cIjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9XG4gICAgICBgKTtcbiAgICB9KTtcblxuICAgIGl0KFwicGFyc2VzIHN1Ym1vZHVsZSByZWZcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgaW5wdXQgPSB7XG4gICAgICAgIHRlcnJhZm9ybU1vZHVsZXM6IFtcbiAgICAgICAgICBcImdpdDo6aHR0cHM6Ly9leGFtcGxlLmNvbS9uZXR3b3JrLmdpdC8vbW9kdWxlcy92cGM/cmVmPXYxLjIuMFwiLFxuICAgICAgICBdLFxuICAgICAgfTtcblxuICAgICAgZXhwZWN0KHBhcnNlQ29uZmlnKEpTT04uc3RyaW5naWZ5KGlucHV0KSkpLnRvTWF0Y2hJbmxpbmVTbmFwc2hvdChgXG4gICAgICAgIHtcbiAgICAgICAgICBcImNvZGVNYWtlck91dHB1dFwiOiBcIi5nZW5cIixcbiAgICAgICAgICBcIm91dHB1dFwiOiBcImNka3RmLm91dFwiLFxuICAgICAgICAgIFwidGVycmFmb3JtTW9kdWxlc1wiOiBbXG4gICAgICAgICAgICBUZXJyYWZvcm1Nb2R1bGVDb25zdHJhaW50IHtcbiAgICAgICAgICAgICAgXCJmcW5cIjogXCJuZXR3b3JrL21vZHVsZXMvdnBjXCIsXG4gICAgICAgICAgICAgIFwibmFtZVwiOiBcInZwY1wiLFxuICAgICAgICAgICAgICBcIm5hbWVzcGFjZVwiOiBcIm5ldHdvcmsvbW9kdWxlc1wiLFxuICAgICAgICAgICAgICBcInNvdXJjZVwiOiBcImdpdDo6aHR0cHM6Ly9leGFtcGxlLmNvbS9uZXR3b3JrLmdpdC8vbW9kdWxlcy92cGM/cmVmPXYxLjIuMFwiLFxuICAgICAgICAgICAgICBcInZlcnNpb25cIjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9XG4gICAgICBgKTtcbiAgICB9KTtcblxuICAgIGl0KFwicGFyc2VzIHJlZiB3aXRoIC9cIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgaW5wdXQgPSB7XG4gICAgICAgIHRlcnJhZm9ybU1vZHVsZXM6IFtcbiAgICAgICAgICBcImdpdDo6aHR0cHM6Ly9naXRodWIuY29tL2Nsb3VkcG9zc2UvdGVycmFmb3JtLW51bGwtbGFiZWwuZ2l0P3JlZj10YWdzLzAuMTQuMVwiLFxuICAgICAgICBdLFxuICAgICAgfTtcblxuICAgICAgZXhwZWN0KHBhcnNlQ29uZmlnKEpTT04uc3RyaW5naWZ5KGlucHV0KSkpLnRvTWF0Y2hJbmxpbmVTbmFwc2hvdChgXG4gICAgICAgIHtcbiAgICAgICAgICBcImNvZGVNYWtlck91dHB1dFwiOiBcIi5nZW5cIixcbiAgICAgICAgICBcIm91dHB1dFwiOiBcImNka3RmLm91dFwiLFxuICAgICAgICAgIFwidGVycmFmb3JtTW9kdWxlc1wiOiBbXG4gICAgICAgICAgICBUZXJyYWZvcm1Nb2R1bGVDb25zdHJhaW50IHtcbiAgICAgICAgICAgICAgXCJmcW5cIjogXCJjbG91ZHBvc3NlL3RlcnJhZm9ybS1udWxsLWxhYmVsXCIsXG4gICAgICAgICAgICAgIFwibmFtZVwiOiBcInRlcnJhZm9ybS1udWxsLWxhYmVsXCIsXG4gICAgICAgICAgICAgIFwibmFtZXNwYWNlXCI6IFwiY2xvdWRwb3NzZVwiLFxuICAgICAgICAgICAgICBcInNvdXJjZVwiOiBcImdpdDo6aHR0cHM6Ly9naXRodWIuY29tL2Nsb3VkcG9zc2UvdGVycmFmb3JtLW51bGwtbGFiZWwuZ2l0P3JlZj10YWdzLzAuMTQuMVwiLFxuICAgICAgICAgICAgICBcInZlcnNpb25cIjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9XG4gICAgICBgKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdfQ==