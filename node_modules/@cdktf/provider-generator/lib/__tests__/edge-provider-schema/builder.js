"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SchemaBuilder = exports.schema = void 0;
function schema({ name, provider, resources = {}, dataSources = {}, }) {
    return {
        format_version: "0.2",
        provider_schemas: {
            [`registry.terraform.io/cdktf/${name}`]: {
                provider: provider,
                resource_schemas: resources,
                data_source_schemas: dataSources,
            },
        },
    };
}
exports.schema = schema;
class SchemaBuilder {
    constructor() {
        this.schema = {
            version: 0,
            block: {
                attributes: {},
                block_types: {},
            },
        };
    }
    attribute({ name, type, required = false, computed = false, optional = !required, }) {
        this.schema.block.attributes[name] = {
            type,
            optional,
            computed,
            required,
        };
        return this;
    }
    listBlock({ name, block, minItems, maxItems, }) {
        this.schema.block.block_types[name] = {
            nesting_mode: "list",
            block,
            min_items: minItems,
            max_items: maxItems,
        };
        return this;
    }
    mapBlock({ name, block, }) {
        this.schema.block.block_types[name] = { nesting_mode: "map", block };
        return this;
    }
    setBlock({ name, block, }) {
        this.schema.block.block_types[name] = { nesting_mode: "set", block };
        return this;
    }
    singleBlock({ name, block, }) {
        this.schema.block.block_types[name] = { nesting_mode: "single", block };
        return this;
    }
    build() {
        return this.schema;
    }
    asBlock() {
        return this.schema.block;
    }
    addAllPrimitiveTypes({ required, computed, prefix = "", }) {
        this.attribute({ name: prefix + "str", type: "string", required, computed })
            .attribute({ name: prefix + "num", type: "number", required, computed })
            .attribute({ name: prefix + "bool", type: "bool", required, computed });
        return this;
    }
    addAllPrimitivePermutations() {
        this.addAllPrimitiveTypes({
            required: false,
            computed: false,
            prefix: "opt",
        })
            .addAllPrimitiveTypes({ required: true, computed: false, prefix: "req" })
            .addAllPrimitiveTypes({
            required: false,
            computed: true,
            prefix: "computed",
        });
        return this;
    }
    addAllPrimitiveListTypes({ required, computed, prefix = "", }) {
        this.attribute({
            name: prefix + "strList",
            type: ["list", "string"],
            required,
            computed,
        })
            .attribute({
            name: prefix + "numList",
            type: ["list", "number"],
            required,
            computed,
        })
            .attribute({
            name: prefix + "boolList",
            type: ["list", "bool"],
            required,
            computed,
        });
        return this;
    }
}
exports.SchemaBuilder = SchemaBuilder;
//# sourceMappingURL=data:application/json;base64,