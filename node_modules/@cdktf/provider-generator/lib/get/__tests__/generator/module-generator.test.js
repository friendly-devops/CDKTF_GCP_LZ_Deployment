"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) HashiCorp, Inc
// SPDX-License-Identifier: MPL-2.0
const fs = __importStar(require("fs"));
const os = __importStar(require("os"));
const path = __importStar(require("path"));
const commons_1 = require("@cdktf/commons");
const constructs_maker_1 = require("../../constructs-maker");
const util_1 = require("../util");
const child_process_1 = require("child_process");
const onTf1_6AndNewer = (name, fn, timeout) => {
    const terraformBinaryName = process.env.TERRAFORM_BINARY_NAME || "terraform";
    const output = (0, child_process_1.execSync)(`${terraformBinaryName} version -json`);
    if (!output) {
        throw new Error("Could not determine Terraform version");
    }
    const tfVersion = JSON.parse(output.toString()).terraform_version;
    const [major, minor] = tfVersion.toString().split(".");
    if (Number(major) < 1 || (Number(major) === 1 && Number(minor) < 6)) {
        test.skip(`${name} (requires Terraform >= 1.6.0; but is ${tfVersion})`, fn, timeout);
    }
    else {
        test(name, fn, timeout);
    }
};
test("generate some modules", async () => {
    const workdir = fs.mkdtempSync(path.join(os.tmpdir(), "module-generator.test"));
    const constraint = new commons_1.TerraformModuleConstraint("terraform-aws-modules/eks/aws@7.0.1");
    const maker = new constructs_maker_1.ConstructsMaker({
        codeMakerOutput: workdir,
        targetLanguage: commons_1.Language.TYPESCRIPT,
    }, process.env.CDKTF_EXPERIMENTAL_PROVIDER_SCHEMA_CACHE_PATH);
    await maker.generate([constraint]);
    const output = fs.readFileSync(path.join(workdir, "modules/terraform-aws-modules/aws/eks.ts"), "utf-8");
    expect(output).toMatchSnapshot();
}, 120000);
(0, util_1.expectModuleToMatchSnapshot)("no module outputs", "generator", [
    "module-no-outputs.test.fixture.tf",
]);
(0, util_1.expectModuleToMatchSnapshot)("typeless variables", "generator", [
    "module-no-variable-type.test.fixture.tf",
]);
(0, util_1.expectModuleToMatchSnapshot)("no newline", "generator", [
    "module-no-newline-1.test.fixture.tf",
    "module-no-newline-2.test.fixture.tf",
]);
test("generate multiple aws modules", async () => {
    jest.setTimeout(120000);
    const workdir = fs.mkdtempSync(path.join(os.tmpdir(), "module-generator-aws.test"));
    const constraints = [
        new commons_1.TerraformModuleConstraint("terraform-aws-modules/vpc/aws@2.78.0"),
        new commons_1.TerraformModuleConstraint("terraform-aws-modules/rds-aurora/aws@4.1.0"),
    ];
    const maker = new constructs_maker_1.ConstructsMaker({
        codeMakerOutput: workdir,
        targetLanguage: commons_1.Language.TYPESCRIPT,
    }, process.env.CDKTF_EXPERIMENTAL_PROVIDER_SCHEMA_CACHE_PATH);
    await maker.generate(constraints);
    const vpcOutput = fs.readFileSync(path.join(workdir, "modules/terraform-aws-modules/aws/vpc.ts"), "utf-8");
    expect(vpcOutput).toMatchSnapshot();
    const rdsOutput = fs.readFileSync(path.join(workdir, "modules/terraform-aws-modules/aws/rds-aurora.ts"), "utf-8");
    expect(rdsOutput).toMatchSnapshot();
}, 120000);
test("generate nested module", async () => {
    jest.setTimeout(120000);
    const workdir = fs.mkdtempSync(path.join(os.tmpdir(), "module-generator-nested.test"));
    const constraint = new commons_1.TerraformModuleConstraint("terraform-aws-modules/vpc/aws//modules/vpc-endpoints@3.19.0");
    const maker = new constructs_maker_1.ConstructsMaker({
        codeMakerOutput: workdir,
        targetLanguage: commons_1.Language.TYPESCRIPT,
    }, process.env.CDKTF_EXPERIMENTAL_PROVIDER_SCHEMA_CACHE_PATH);
    await maker.generate([constraint]);
    const output = fs.readFileSync(path.join(workdir, "modules/terraform-aws-modules/aws/vpc/modules/vpc-endpoints.ts"), "utf-8");
    expect(output).toMatchSnapshot();
});
(0, util_1.expectModuleToMatchSnapshot)("getX variables", "generator", [
    "module-get-x.test.fixture.tf",
]);
(0, util_1.expectModuleToMatchSnapshot)("handle */* in module variable default string", "generator", ["module-with-star-default.test.fixture.tf"]);
onTf1_6AndNewer("generate module that can't be initialized", async () => {
    jest.setTimeout(120000);
    const workdir = fs.mkdtempSync(path.join(os.tmpdir(), "module-generator.test-no-init"));
    const constraint = new commons_1.TerraformModuleConstraint("milliHQ/next-js/aws@1.0.0-canary.5");
    const maker = new constructs_maker_1.ConstructsMaker({
        codeMakerOutput: workdir,
        targetLanguage: commons_1.Language.TYPESCRIPT,
    }, process.env.CDKTF_EXPERIMENTAL_PROVIDER_SCHEMA_CACHE_PATH);
    await maker.generate([constraint]);
    const output = fs.readFileSync(path.join(workdir, "modules/milliHQ/aws/next-js.ts"), "utf-8");
    // yes, this is a lot of code, but this test is skipped for some Terraform versions
    // which then shows snapshots as obsolete which fails the test
    // this way, there's no such problem if the test is skipped
    expect(output).toMatchInlineSnapshot(`
      "// generated by cdktf get
      // milliHQ/next-js/aws
      import { TerraformModule, TerraformModuleUserConfig } from 'cdktf';
      import { Construct } from 'constructs';
      export interface NextJsConfig extends TerraformModuleUserConfig {
        /**
        * ACM certificate arn for custom_domain
        */
        readonly cloudfrontAcmCertificateArn?: string;
        /**
        * Aliases for custom_domain
        *
        */
        readonly cloudfrontAliases?: string[];
        /**
        * Header keys that should be used to calculate the cache key in CloudFront.
        * Authorization
        */
        readonly cloudfrontCacheKeyHeaders?: string[];
        /**
        * Controls whether the main CloudFront distribution should be created.
        * true
        */
        readonly cloudfrontCreateDistribution?: boolean;
        /**
        * When using an external CloudFront distribution provide its arn.
        */
        readonly cloudfrontExternalArn?: string;
        /**
        * When using an external CloudFront distribution provide its id.
        */
        readonly cloudfrontExternalId?: string;
        /**
        * The minimum version of the SSL protocol that you want CloudFront to use for HTTPS connections. One of SSLv3, TLSv1, TLSv1_2016, TLSv1.1_2016, TLSv1.2_2018 or TLSv1.2_2019.
        * TLSv1
        */
        readonly cloudfrontMinimumProtocolVersion?: string;
        /**
        * Id of a custom request policy that overrides the default policy (AllViewer). Can be custom or managed.
        */
        readonly cloudfrontOriginRequestPolicy?: string;
        /**
        * Price class for the CloudFront distributions (main & proxy config). One of PriceClass_All, PriceClass_200, PriceClass_100.
        * PriceClass_100
        */
        readonly cloudfrontPriceClass?: string;
        /**
        * Id of a response headers policy. Can be custom or managed. Default is empty.
        */
        readonly cloudfrontResponseHeadersPolicy?: string;
        /**
        * An optional webacl2 arn or webacl id to associate with the cloudfront distribution
        */
        readonly cloudfrontWebaclId?: string;
        /**
        * Controls whether resources for image optimization support should be created or not.
        * true
        */
        readonly createImageOptimization?: boolean;
        /**
        * Use locally built packages rather than download them from npm.
        */
        readonly debugUseLocalPackages?: boolean;
        /**
        * Identifier for the deployment group (only lowercase alphanumeric characters and hyphens are allowed).
        * tf-next
        */
        readonly deploymentName?: string;
        /**
        * Controls whether it should be possible to run multiple deployments in parallel (requires multiple_deployments_base_domain).
        */
        readonly enableMultipleDeployments?: boolean;
        /**
        * Amount of memory in MB the worker Lambda Function for image optimization can use. Valid value between 128 MB to 10,240 MB, in 1 MB increments.
        * 2,048
        */
        readonly imageOptimizationLambdaMemorySize?: number;
        /**
        * Whether to deploy additional lambda JSON policies. If false, lambda_policy_json will not be attached to the lambda function. (Necessary since policy strings are only known after apply when using Terraforms data.aws_iam_policy_document)
        */
        readonly lambdaAttachPolicyJson?: boolean;
        /**
        * Set to true if the Lambda functions should be attached to a VPC. Use this setting if VPC resources should be accessed by the Lambda functions. When setting this to true, use vpc_security_group_ids and vpc_subnet_ids to specify the VPC networking. Note that attaching to a VPC would introduce a delay on to cold starts
        */
        readonly lambdaAttachToVpc?: boolean;
        /**
        * Additional policy document as JSON to attach to the Lambda Function role
        */
        readonly lambdaPolicyJson?: string;
        /**
        * ARN of IAM policy that scopes aws_iam_role access for the lambda
        */
        readonly lambdaRolePermissionsBoundary?: string;
        /**
        * Default wildcard domain where new deployments should be available. Should be in the form of *.example.com.
        */
        readonly multipleDeploymentsBaseDomain?: string;
        /**
        * Tag metadata to label AWS resources that support tags.
        * The property type contains a map, they have special handling, please see {@link cdk.tf/module-map-inputs the docs}
        */
        readonly tags?: { [key: string]: string };
        /**
        * Tag metadata to label AWS S3 buckets. Overrides tags with the same name in input variable tags.
        * The property type contains a map, they have special handling, please see {@link cdk.tf/module-map-inputs the docs}
        */
        readonly tagsS3Bucket?: { [key: string]: string };
        /**
        * The list of Security Group IDs to be used by the Lambda functions. lambda_attach_to_vpc should be set to true for these to be applied.
        *
        */
        readonly vpcSecurityGroupIds?: string[];
        /**
        * The list of VPC subnet IDs to attach the Lambda functions. lambda_attach_to_vpc should be set to true for these to be applied.
        *
        */
        readonly vpcSubnetIds?: string[];
      }
      /**
      * Defines an NextJs based on a Terraform module
      *
      * Docs at Terraform Registry: {@link https://registry.terraform.io/modules/milliHQ/next-js/aws/1.0.0-canary.5 milliHQ/next-js/aws}
      */
      export class NextJs extends TerraformModule {
        private readonly inputs: { [name: string]: any } = { }
        public constructor(scope: Construct, id: string, config: NextJsConfig = {}) {
          super(scope, id, {
            ...config,
            source: 'milliHQ/next-js/aws',
            version: '1.0.0-canary.5',
          });
          this.cloudfrontAcmCertificateArn = config.cloudfrontAcmCertificateArn;
          this.cloudfrontAliases = config.cloudfrontAliases;
          this.cloudfrontCacheKeyHeaders = config.cloudfrontCacheKeyHeaders;
          this.cloudfrontCreateDistribution = config.cloudfrontCreateDistribution;
          this.cloudfrontExternalArn = config.cloudfrontExternalArn;
          this.cloudfrontExternalId = config.cloudfrontExternalId;
          this.cloudfrontMinimumProtocolVersion = config.cloudfrontMinimumProtocolVersion;
          this.cloudfrontOriginRequestPolicy = config.cloudfrontOriginRequestPolicy;
          this.cloudfrontPriceClass = config.cloudfrontPriceClass;
          this.cloudfrontResponseHeadersPolicy = config.cloudfrontResponseHeadersPolicy;
          this.cloudfrontWebaclId = config.cloudfrontWebaclId;
          this.createImageOptimization = config.createImageOptimization;
          this.debugUseLocalPackages = config.debugUseLocalPackages;
          this.deploymentName = config.deploymentName;
          this.enableMultipleDeployments = config.enableMultipleDeployments;
          this.imageOptimizationLambdaMemorySize = config.imageOptimizationLambdaMemorySize;
          this.lambdaAttachPolicyJson = config.lambdaAttachPolicyJson;
          this.lambdaAttachToVpc = config.lambdaAttachToVpc;
          this.lambdaPolicyJson = config.lambdaPolicyJson;
          this.lambdaRolePermissionsBoundary = config.lambdaRolePermissionsBoundary;
          this.multipleDeploymentsBaseDomain = config.multipleDeploymentsBaseDomain;
          this.tags = config.tags;
          this.tagsS3Bucket = config.tagsS3Bucket;
          this.vpcSecurityGroupIds = config.vpcSecurityGroupIds;
          this.vpcSubnetIds = config.vpcSubnetIds;
        }
        public get cloudfrontAcmCertificateArn(): string | undefined {
          return this.inputs['cloudfront_acm_certificate_arn'] as string | undefined;
        }
        public set cloudfrontAcmCertificateArn(value: string | undefined) {
          this.inputs['cloudfront_acm_certificate_arn'] = value;
        }
        public get cloudfrontAliases(): string[] | undefined {
          return this.inputs['cloudfront_aliases'] as string[] | undefined;
        }
        public set cloudfrontAliases(value: string[] | undefined) {
          this.inputs['cloudfront_aliases'] = value;
        }
        public get cloudfrontCacheKeyHeaders(): string[] | undefined {
          return this.inputs['cloudfront_cache_key_headers'] as string[] | undefined;
        }
        public set cloudfrontCacheKeyHeaders(value: string[] | undefined) {
          this.inputs['cloudfront_cache_key_headers'] = value;
        }
        public get cloudfrontCreateDistribution(): boolean | undefined {
          return this.inputs['cloudfront_create_distribution'] as boolean | undefined;
        }
        public set cloudfrontCreateDistribution(value: boolean | undefined) {
          this.inputs['cloudfront_create_distribution'] = value;
        }
        public get cloudfrontExternalArn(): string | undefined {
          return this.inputs['cloudfront_external_arn'] as string | undefined;
        }
        public set cloudfrontExternalArn(value: string | undefined) {
          this.inputs['cloudfront_external_arn'] = value;
        }
        public get cloudfrontExternalId(): string | undefined {
          return this.inputs['cloudfront_external_id'] as string | undefined;
        }
        public set cloudfrontExternalId(value: string | undefined) {
          this.inputs['cloudfront_external_id'] = value;
        }
        public get cloudfrontMinimumProtocolVersion(): string | undefined {
          return this.inputs['cloudfront_minimum_protocol_version'] as string | undefined;
        }
        public set cloudfrontMinimumProtocolVersion(value: string | undefined) {
          this.inputs['cloudfront_minimum_protocol_version'] = value;
        }
        public get cloudfrontOriginRequestPolicy(): string | undefined {
          return this.inputs['cloudfront_origin_request_policy'] as string | undefined;
        }
        public set cloudfrontOriginRequestPolicy(value: string | undefined) {
          this.inputs['cloudfront_origin_request_policy'] = value;
        }
        public get cloudfrontPriceClass(): string | undefined {
          return this.inputs['cloudfront_price_class'] as string | undefined;
        }
        public set cloudfrontPriceClass(value: string | undefined) {
          this.inputs['cloudfront_price_class'] = value;
        }
        public get cloudfrontResponseHeadersPolicy(): string | undefined {
          return this.inputs['cloudfront_response_headers_policy'] as string | undefined;
        }
        public set cloudfrontResponseHeadersPolicy(value: string | undefined) {
          this.inputs['cloudfront_response_headers_policy'] = value;
        }
        public get cloudfrontWebaclId(): string | undefined {
          return this.inputs['cloudfront_webacl_id'] as string | undefined;
        }
        public set cloudfrontWebaclId(value: string | undefined) {
          this.inputs['cloudfront_webacl_id'] = value;
        }
        public get createImageOptimization(): boolean | undefined {
          return this.inputs['create_image_optimization'] as boolean | undefined;
        }
        public set createImageOptimization(value: boolean | undefined) {
          this.inputs['create_image_optimization'] = value;
        }
        public get debugUseLocalPackages(): boolean | undefined {
          return this.inputs['debug_use_local_packages'] as boolean | undefined;
        }
        public set debugUseLocalPackages(value: boolean | undefined) {
          this.inputs['debug_use_local_packages'] = value;
        }
        public get deploymentName(): string | undefined {
          return this.inputs['deployment_name'] as string | undefined;
        }
        public set deploymentName(value: string | undefined) {
          this.inputs['deployment_name'] = value;
        }
        public get enableMultipleDeployments(): boolean | undefined {
          return this.inputs['enable_multiple_deployments'] as boolean | undefined;
        }
        public set enableMultipleDeployments(value: boolean | undefined) {
          this.inputs['enable_multiple_deployments'] = value;
        }
        public get imageOptimizationLambdaMemorySize(): number | undefined {
          return this.inputs['image_optimization_lambda_memory_size'] as number | undefined;
        }
        public set imageOptimizationLambdaMemorySize(value: number | undefined) {
          this.inputs['image_optimization_lambda_memory_size'] = value;
        }
        public get lambdaAttachPolicyJson(): boolean | undefined {
          return this.inputs['lambda_attach_policy_json'] as boolean | undefined;
        }
        public set lambdaAttachPolicyJson(value: boolean | undefined) {
          this.inputs['lambda_attach_policy_json'] = value;
        }
        public get lambdaAttachToVpc(): boolean | undefined {
          return this.inputs['lambda_attach_to_vpc'] as boolean | undefined;
        }
        public set lambdaAttachToVpc(value: boolean | undefined) {
          this.inputs['lambda_attach_to_vpc'] = value;
        }
        public get lambdaPolicyJson(): string | undefined {
          return this.inputs['lambda_policy_json'] as string | undefined;
        }
        public set lambdaPolicyJson(value: string | undefined) {
          this.inputs['lambda_policy_json'] = value;
        }
        public get lambdaRolePermissionsBoundary(): string | undefined {
          return this.inputs['lambda_role_permissions_boundary'] as string | undefined;
        }
        public set lambdaRolePermissionsBoundary(value: string | undefined) {
          this.inputs['lambda_role_permissions_boundary'] = value;
        }
        public get multipleDeploymentsBaseDomain(): string | undefined {
          return this.inputs['multiple_deployments_base_domain'] as string | undefined;
        }
        public set multipleDeploymentsBaseDomain(value: string | undefined) {
          this.inputs['multiple_deployments_base_domain'] = value;
        }
        public get tags(): { [key: string]: string } | undefined {
          return this.inputs['tags'] as { [key: string]: string } | undefined;
        }
        public set tags(value: { [key: string]: string } | undefined) {
          this.inputs['tags'] = value;
        }
        public get tagsS3Bucket(): { [key: string]: string } | undefined {
          return this.inputs['tags_s3_bucket'] as { [key: string]: string } | undefined;
        }
        public set tagsS3Bucket(value: { [key: string]: string } | undefined) {
          this.inputs['tags_s3_bucket'] = value;
        }
        public get vpcSecurityGroupIds(): string[] | undefined {
          return this.inputs['vpc_security_group_ids'] as string[] | undefined;
        }
        public set vpcSecurityGroupIds(value: string[] | undefined) {
          this.inputs['vpc_security_group_ids'] = value;
        }
        public get vpcSubnetIds(): string[] | undefined {
          return this.inputs['vpc_subnet_ids'] as string[] | undefined;
        }
        public set vpcSubnetIds(value: string[] | undefined) {
          this.inputs['vpc_subnet_ids'] = value;
        }
        public get apiEndpointOutput() {
          return this.getString('api_endpoint')
        }
        public get apiEndpointAccessPolicyArnOutput() {
          return this.getString('api_endpoint_access_policy_arn')
        }
        public get cloudfrontCustomErrorResponseOutput() {
          return this.getString('cloudfront_custom_error_response')
        }
        public get cloudfrontDefaultCacheBehaviorOutput() {
          return this.getString('cloudfront_default_cache_behavior')
        }
        public get cloudfrontDefaultRootObjectOutput() {
          return this.getString('cloudfront_default_root_object')
        }
        public get cloudfrontDomainNameOutput() {
          return this.getString('cloudfront_domain_name')
        }
        public get cloudfrontHostedZoneIdOutput() {
          return this.getString('cloudfront_hosted_zone_id')
        }
        public get cloudfrontOrderedCacheBehaviorsOutput() {
          return this.getString('cloudfront_ordered_cache_behaviors')
        }
        public get cloudfrontOriginsOutput() {
          return this.getString('cloudfront_origins')
        }
        public get uploadBucketIdOutput() {
          return this.getString('upload_bucket_id')
        }
        protected synthesizeAttributes() {
          return this.inputs;
        }
        protected synthesizeHclAttributes(): { [name: string]: any } {
          return Object.fromEntries(
            Object.entries(this.inputs)
              .filter(([, val]) => val !== undefined)
              .map(([key, val]) => {
                return [
                  key,
                  {
                    value: val,
                    type: "any",
                  },
                ];
              })
          );
        }
      }
      "
    `);
}, 120000);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlLWdlbmVyYXRvci50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibW9kdWxlLWdlbmVyYXRvci50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSwrQkFBK0I7QUFDL0IsbUNBQW1DO0FBQ25DLHVDQUF5QjtBQUN6Qix1Q0FBeUI7QUFDekIsMkNBQTZCO0FBQzdCLDRDQUFxRTtBQUNyRSw2REFBeUQ7QUFDekQsa0NBQXNEO0FBQ3RELGlEQUF5QztBQUV6QyxNQUFNLGVBQWUsR0FBRyxDQUN0QixJQUFZLEVBQ1osRUFBdUIsRUFDdkIsT0FBZ0IsRUFDaEIsRUFBRTtJQUNGLE1BQU0sbUJBQW1CLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsSUFBSSxXQUFXLENBQUM7SUFDN0UsTUFBTSxNQUFNLEdBQUcsSUFBQSx3QkFBUSxFQUFDLEdBQUcsbUJBQW1CLGdCQUFnQixDQUFDLENBQUM7SUFFaEUsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNYLE1BQU0sSUFBSSxLQUFLLENBQUMsdUNBQXVDLENBQUMsQ0FBQztLQUMxRDtJQUVELE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsaUJBQWlCLENBQUM7SUFFbEUsTUFBTSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsR0FBRyxTQUFTLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3ZELElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO1FBQ25FLElBQUksQ0FBQyxJQUFJLENBQ1AsR0FBRyxJQUFJLHlDQUF5QyxTQUFTLEdBQUcsRUFDNUQsRUFBRSxF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QUF5QixDQUM5QyxvQ0FBb0MsQ0FDckMsQ0FBQztJQUVGLE1BQU0sS0FBSyxHQUFHLElBQUksa0NBQWUsQ0FDL0I7UUFDRSxlQUFlLEVBQUUsT0FBTztRQUN4QixjQUFjLEVBQUUsa0JBQVEsQ0FBQyxVQUFVO0tBQ3BDLEVBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyw2Q0FBNkMsQ0FDMUQsQ0FBQztJQUNGLE1BQU0sS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFFbkMsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FDNUIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsZ0NBQWdDLENBQUMsRUFDcEQsT0FBTyxDQUNSLENBQUM7SUFFRixtRkFBbUY7SUFDbkYsOERBQThEO0lBQzlELDJEQUEyRDtJQUMzRCxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMscUJBQXFCLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0FzV3BDLENBQUMsQ0FBQztBQUNMLENBQUMsRUFDRCxNQUFNLENBQ1AsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgSGFzaGlDb3JwLCBJbmNcbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNUEwtMi4wXG5pbXBvcnQgKiBhcyBmcyBmcm9tIFwiZnNcIjtcbmltcG9ydCAqIGFzIG9zIGZyb20gXCJvc1wiO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tIFwicGF0aFwiO1xuaW1wb3J0IHsgTGFuZ3VhZ2UsIFRlcnJhZm9ybU1vZHVsZUNvbnN0cmFpbnQgfSBmcm9tIFwiQGNka3RmL2NvbW1vbnNcIjtcbmltcG9ydCB7IENvbnN0cnVjdHNNYWtlciB9IGZyb20gXCIuLi8uLi9jb25zdHJ1Y3RzLW1ha2VyXCI7XG5pbXBvcnQgeyBleHBlY3RNb2R1bGVUb01hdGNoU25hcHNob3QgfSBmcm9tIFwiLi4vdXRpbFwiO1xuaW1wb3J0IHsgZXhlY1N5bmMgfSBmcm9tIFwiY2hpbGRfcHJvY2Vzc1wiO1xuXG5jb25zdCBvblRmMV82QW5kTmV3ZXIgPSAoXG4gIG5hbWU6IHN0cmluZyxcbiAgZm46ICgpID0+IFByb21pc2U8dm9pZD4sXG4gIHRpbWVvdXQ/OiBudW1iZXJcbikgPT4ge1xuICBjb25zdCB0ZXJyYWZvcm1CaW5hcnlOYW1lID0gcHJvY2Vzcy5lbnYuVEVSUkFGT1JNX0JJTkFSWV9OQU1FIHx8IFwidGVycmFmb3JtXCI7XG4gIGNvbnN0IG91dHB1dCA9IGV4ZWNTeW5jKGAke3RlcnJhZm9ybUJpbmFyeU5hbWV9IHZlcnNpb24gLWpzb25gKTtcblxuICBpZiAoIW91dHB1dCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBkZXRlcm1pbmUgVGVycmFmb3JtIHZlcnNpb25cIik7XG4gIH1cblxuICBjb25zdCB0ZlZlcnNpb24gPSBKU09OLnBhcnNlKG91dHB1dC50b1N0cmluZygpKS50ZXJyYWZvcm1fdmVyc2lvbjtcblxuICBjb25zdCBbbWFqb3IsIG1pbm9yXSA9IHRmVmVyc2lvbi50b1N0cmluZygpLnNwbGl0KFwiLlwiKTtcbiAgaWYgKE51bWJlcihtYWpvcikgPCAxIHx8IChOdW1iZXIobWFqb3IpID09PSAxICYmIE51bWJlcihtaW5vcikgPCA2KSkge1xuICAgIHRlc3Quc2tpcChcbiAgICAgIGAke25hbWV9IChyZXF1aXJlcyBUZXJyYWZvcm0gPj0gMS42LjA7IGJ1dCBpcyAke3RmVmVyc2lvbn0pYCxcbiAgICAgIGZuLFxuICAgICAgdGltZW91dFxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgdGVzdChuYW1lLCBmbiwgdGltZW91dCk7XG4gIH1cbn07XG5cbnRlc3QoXCJnZW5lcmF0ZSBzb21lIG1vZHVsZXNcIiwgYXN5bmMgKCkgPT4ge1xuICBjb25zdCB3b3JrZGlyID0gZnMubWtkdGVtcFN5bmMoXG4gICAgcGF0aC5qb2luKG9zLnRtcGRpcigpLCBcIm1vZHVsZS1nZW5lcmF0b3IudGVzdFwiKVxuICApO1xuICBjb25zdCBjb25zdHJhaW50ID0gbmV3IFRlcnJhZm9ybU1vZHVsZUNvbnN0cmFpbnQoXG4gICAgXCJ0ZXJyYWZvcm0tYXdzLW1vZHVsZXMvZWtzL2F3c0A3LjAuMVwiXG4gICk7XG5cbiAgY29uc3QgbWFrZXIgPSBuZXcgQ29uc3RydWN0c01ha2VyKFxuICAgIHtcbiAgICAgIGNvZGVNYWtlck91dHB1dDogd29ya2RpcixcbiAgICAgIHRhcmdldExhbmd1YWdlOiBMYW5ndWFnZS5UWVBFU0NSSVBULFxuICAgIH0sXG4gICAgcHJvY2Vzcy5lbnYuQ0RLVEZfRVhQRVJJTUVOVEFMX1BST1ZJREVSX1NDSEVNQV9DQUNIRV9QQVRIXG4gICk7XG4gIGF3YWl0IG1ha2VyLmdlbmVyYXRlKFtjb25zdHJhaW50XSk7XG5cbiAgY29uc3Qgb3V0cHV0ID0gZnMucmVhZEZpbGVTeW5jKFxuICAgIHBhdGguam9pbih3b3JrZGlyLCBcIm1vZHVsZXMvdGVycmFmb3JtLWF3cy1tb2R1bGVzL2F3cy9la3MudHNcIiksXG4gICAgXCJ1dGYtOFwiXG4gICk7XG4gIGV4cGVjdChvdXRwdXQpLnRvTWF0Y2hTbmFwc2hvdCgpO1xufSwgMTIwMDAwKTtcblxuZXhwZWN0TW9kdWxlVG9NYXRjaFNuYXBzaG90KFwibm8gbW9kdWxlIG91dHB1dHNcIiwgXCJnZW5lcmF0b3JcIiwgW1xuICBcIm1vZHVsZS1uby1vdXRwdXRzLnRlc3QuZml4dHVyZS50ZlwiLFxuXSk7XG5cbmV4cGVjdE1vZHVsZVRvTWF0Y2hTbmFwc2hvdChcInR5cGVsZXNzIHZhcmlhYmxlc1wiLCBcImdlbmVyYXRvclwiLCBbXG4gIFwibW9kdWxlLW5vLXZhcmlhYmxlLXR5cGUudGVzdC5maXh0dXJlLnRmXCIsXG5dKTtcblxuZXhwZWN0TW9kdWxlVG9NYXRjaFNuYXBzaG90KFwibm8gbmV3bGluZVwiLCBcImdlbmVyYXRvclwiLCBbXG4gIFwibW9kdWxlLW5vLW5ld2xpbmUtMS50ZXN0LmZpeHR1cmUudGZcIixcbiAgXCJtb2R1bGUtbm8tbmV3bGluZS0yLnRlc3QuZml4dHVyZS50ZlwiLFxuXSk7XG5cbnRlc3QoXCJnZW5lcmF0ZSBtdWx0aXBsZSBhd3MgbW9kdWxlc1wiLCBhc3luYyAoKSA9PiB7XG4gIGplc3Quc2V0VGltZW91dCgxMjAwMDApO1xuXG4gIGNvbnN0IHdvcmtkaXIgPSBmcy5ta2R0ZW1wU3luYyhcbiAgICBwYXRoLmpvaW4ob3MudG1wZGlyKCksIFwibW9kdWxlLWdlbmVyYXRvci1hd3MudGVzdFwiKVxuICApO1xuICBjb25zdCBjb25zdHJhaW50cyA9IFtcbiAgICBuZXcgVGVycmFmb3JtTW9kdWxlQ29uc3RyYWludChcInRlcnJhZm9ybS1hd3MtbW9kdWxlcy92cGMvYXdzQDIuNzguMFwiKSxcbiAgICBuZXcgVGVycmFmb3JtTW9kdWxlQ29uc3RyYWludChcInRlcnJhZm9ybS1hd3MtbW9kdWxlcy9yZHMtYXVyb3JhL2F3c0A0LjEuMFwiKSxcbiAgXTtcblxuICBjb25zdCBtYWtlciA9IG5ldyBDb25zdHJ1Y3RzTWFrZXIoXG4gICAge1xuICAgICAgY29kZU1ha2VyT3V0cHV0OiB3b3JrZGlyLFxuICAgICAgdGFyZ2V0TGFuZ3VhZ2U6IExhbmd1YWdlLlRZUEVTQ1JJUFQsXG4gICAgfSxcbiAgICBwcm9jZXNzLmVudi5DREtURl9FWFBFUklNRU5UQUxfUFJPVklERVJfU0NIRU1BX0NBQ0hFX1BBVEhcbiAgKTtcbiAgYXdhaXQgbWFrZXIuZ2VuZXJhdGUoY29uc3RyYWludHMpO1xuXG4gIGNvbnN0IHZwY091dHB1dCA9IGZzLnJlYWRGaWxlU3luYyhcbiAgICBwYXRoLmpvaW4od29ya2RpciwgXCJtb2R1bGVzL3RlcnJhZm9ybS1hd3MtbW9kdWxlcy9hd3MvdnBjLnRzXCIpLFxuICAgIFwidXRmLThcIlxuICApO1xuICBleHBlY3QodnBjT3V0cHV0KS50b01hdGNoU25hcHNob3QoKTtcblxuICBjb25zdCByZHNPdXRwdXQgPSBmcy5yZWFkRmlsZVN5bmMoXG4gICAgcGF0aC5qb2luKHdvcmtkaXIsIFwibW9kdWxlcy90ZXJyYWZvcm0tYXdzLW1vZHVsZXMvYXdzL3Jkcy1hdXJvcmEudHNcIiksXG4gICAgXCJ1dGYtOFwiXG4gICk7XG4gIGV4cGVjdChyZHNPdXRwdXQpLnRvTWF0Y2hTbmFwc2hvdCgpO1xufSwgMTIwMDAwKTtcblxudGVzdChcImdlbmVyYXRlIG5lc3RlZCBtb2R1bGVcIiwgYXN5bmMgKCkgPT4ge1xuICBqZXN0LnNldFRpbWVvdXQoMTIwMDAwKTtcblxuICBjb25zdCB3b3JrZGlyID0gZnMubWtkdGVtcFN5bmMoXG4gICAgcGF0aC5qb2luKG9zLnRtcGRpcigpLCBcIm1vZHVsZS1nZW5lcmF0b3ItbmVzdGVkLnRlc3RcIilcbiAgKTtcbiAgY29uc3QgY29uc3RyYWludCA9IG5ldyBUZXJyYWZvcm1Nb2R1bGVDb25zdHJhaW50KFxuICAgIFwidGVycmFmb3JtLWF3cy1tb2R1bGVzL3ZwYy9hd3MvL21vZHVsZXMvdnBjLWVuZHBvaW50c0AzLjE5LjBcIlxuICApO1xuXG4gIGNvbnN0IG1ha2VyID0gbmV3IENvbnN0cnVjdHNNYWtlcihcbiAgICB7XG4gICAgICBjb2RlTWFrZXJPdXRwdXQ6IHdvcmtkaXIsXG4gICAgICB0YXJnZXRMYW5ndWFnZTogTGFuZ3VhZ2UuVFlQRVNDUklQVCxcbiAgICB9LFxuICAgIHByb2Nlc3MuZW52LkNES1RGX0VYUEVSSU1FTlRBTF9QUk9WSURFUl9TQ0hFTUFfQ0FDSEVfUEFUSFxuICApO1xuICBhd2FpdCBtYWtlci5nZW5lcmF0ZShbY29uc3RyYWludF0pO1xuXG4gIGNvbnN0IG91dHB1dCA9IGZzLnJlYWRGaWxlU3luYyhcbiAgICBwYXRoLmpvaW4oXG4gICAgICB3b3JrZGlyLFxuICAgICAgXCJtb2R1bGVzL3RlcnJhZm9ybS1hd3MtbW9kdWxlcy9hd3MvdnBjL21vZHVsZXMvdnBjLWVuZHBvaW50cy50c1wiXG4gICAgKSxcbiAgICBcInV0Zi04XCJcbiAgKTtcbiAgZXhwZWN0KG91dHB1dCkudG9NYXRjaFNuYXBzaG90KCk7XG59KTtcblxuZXhwZWN0TW9kdWxlVG9NYXRjaFNuYXBzaG90KFwiZ2V0WCB2YXJpYWJsZXNcIiwgXCJnZW5lcmF0b3JcIiwgW1xuICBcIm1vZHVsZS1nZXQteC50ZXN0LmZpeHR1cmUudGZcIixcbl0pO1xuXG5leHBlY3RNb2R1bGVUb01hdGNoU25hcHNob3QoXG4gIFwiaGFuZGxlICovKiBpbiBtb2R1bGUgdmFyaWFibGUgZGVmYXVsdCBzdHJpbmdcIixcbiAgXCJnZW5lcmF0b3JcIixcbiAgW1wibW9kdWxlLXdpdGgtc3Rhci1kZWZhdWx0LnRlc3QuZml4dHVyZS50ZlwiXVxuKTtcblxub25UZjFfNkFuZE5ld2VyKFxuICBcImdlbmVyYXRlIG1vZHVsZSB0aGF0IGNhbid0IGJlIGluaXRpYWxpemVkXCIsXG4gIGFzeW5jICgpID0+IHtcbiAgICBqZXN0LnNldFRpbWVvdXQoMTIwMDAwKTtcblxuICAgIGNvbnN0IHdvcmtkaXIgPSBmcy5ta2R0ZW1wU3luYyhcbiAgICAgIHBhdGguam9pbihvcy50bXBkaXIoKSwgXCJtb2R1bGUtZ2VuZXJhdG9yLnRlc3Qtbm8taW5pdFwiKVxuICAgICk7XG4gICAgY29uc3QgY29uc3RyYWludCA9IG5ldyBUZXJyYWZvcm1Nb2R1bGVDb25zdHJhaW50KFxuICAgICAgXCJtaWxsaUhRL25leHQtanMvYXdzQDEuMC4wLWNhbmFyeS41XCJcbiAgICApO1xuXG4gICAgY29uc3QgbWFrZXIgPSBuZXcgQ29uc3RydWN0c01ha2VyKFxuICAgICAge1xuICAgICAgICBjb2RlTWFrZXJPdXRwdXQ6IHdvcmtkaXIsXG4gICAgICAgIHRhcmdldExhbmd1YWdlOiBMYW5ndWFnZS5UWVBFU0NSSVBULFxuICAgICAgfSxcbiAgICAgIHByb2Nlc3MuZW52LkNES1RGX0VYUEVSSU1FTlRBTF9QUk9WSURFUl9TQ0hFTUFfQ0FDSEVfUEFUSFxuICAgICk7XG4gICAgYXdhaXQgbWFrZXIuZ2VuZXJhdGUoW2NvbnN0cmFpbnRdKTtcblxuICAgIGNvbnN0IG91dHB1dCA9IGZzLnJlYWRGaWxlU3luYyhcbiAgICAgIHBhdGguam9pbih3b3JrZGlyLCBcIm1vZHVsZXMvbWlsbGlIUS9hd3MvbmV4dC1qcy50c1wiKSxcbiAgICAgIFwidXRmLThcIlxuICAgICk7XG5cbiAgICAvLyB5ZXMsIHRoaXMgaXMgYSBsb3Qgb2YgY29kZSwgYnV0IHRoaXMgdGVzdCBpcyBza2lwcGVkIGZvciBzb21lIFRlcnJhZm9ybSB2ZXJzaW9uc1xuICAgIC8vIHdoaWNoIHRoZW4gc2hvd3Mgc25hcHNob3RzIGFzIG9ic29sZXRlIHdoaWNoIGZhaWxzIHRoZSB0ZXN0XG4gICAgLy8gdGhpcyB3YXksIHRoZXJlJ3Mgbm8gc3VjaCBwcm9ibGVtIGlmIHRoZSB0ZXN0IGlzIHNraXBwZWRcbiAgICBleHBlY3Qob3V0cHV0KS50b01hdGNoSW5saW5lU25hcHNob3QoYFxuICAgICAgXCIvLyBnZW5lcmF0ZWQgYnkgY2RrdGYgZ2V0XG4gICAgICAvLyBtaWxsaUhRL25leHQtanMvYXdzXG4gICAgICBpbXBvcnQgeyBUZXJyYWZvcm1Nb2R1bGUsIFRlcnJhZm9ybU1vZHVsZVVzZXJDb25maWcgfSBmcm9tICdjZGt0Zic7XG4gICAgICBpbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcbiAgICAgIGV4cG9ydCBpbnRlcmZhY2UgTmV4dEpzQ29uZmlnIGV4dGVuZHMgVGVycmFmb3JtTW9kdWxlVXNlckNvbmZpZyB7XG4gICAgICAgIC8qKlxuICAgICAgICAqIEFDTSBjZXJ0aWZpY2F0ZSBhcm4gZm9yIGN1c3RvbV9kb21haW5cbiAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgY2xvdWRmcm9udEFjbUNlcnRpZmljYXRlQXJuPzogc3RyaW5nO1xuICAgICAgICAvKipcbiAgICAgICAgKiBBbGlhc2VzIGZvciBjdXN0b21fZG9tYWluXG4gICAgICAgICpcbiAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgY2xvdWRmcm9udEFsaWFzZXM/OiBzdHJpbmdbXTtcbiAgICAgICAgLyoqXG4gICAgICAgICogSGVhZGVyIGtleXMgdGhhdCBzaG91bGQgYmUgdXNlZCB0byBjYWxjdWxhdGUgdGhlIGNhY2hlIGtleSBpbiBDbG91ZEZyb250LlxuICAgICAgICAqIEF1dGhvcml6YXRpb25cbiAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgY2xvdWRmcm9udENhY2hlS2V5SGVhZGVycz86IHN0cmluZ1tdO1xuICAgICAgICAvKipcbiAgICAgICAgKiBDb250cm9scyB3aGV0aGVyIHRoZSBtYWluIENsb3VkRnJvbnQgZGlzdHJpYnV0aW9uIHNob3VsZCBiZSBjcmVhdGVkLlxuICAgICAgICAqIHRydWVcbiAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgY2xvdWRmcm9udENyZWF0ZURpc3RyaWJ1dGlvbj86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAqIFdoZW4gdXNpbmcgYW4gZXh0ZXJuYWwgQ2xvdWRGcm9udCBkaXN0cmlidXRpb24gcHJvdmlkZSBpdHMgYXJuLlxuICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBjbG91ZGZyb250RXh0ZXJuYWxBcm4/OiBzdHJpbmc7XG4gICAgICAgIC8qKlxuICAgICAgICAqIFdoZW4gdXNpbmcgYW4gZXh0ZXJuYWwgQ2xvdWRGcm9udCBkaXN0cmlidXRpb24gcHJvdmlkZSBpdHMgaWQuXG4gICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGNsb3VkZnJvbnRFeHRlcm5hbElkPzogc3RyaW5nO1xuICAgICAgICAvKipcbiAgICAgICAgKiBUaGUgbWluaW11bSB2ZXJzaW9uIG9mIHRoZSBTU0wgcHJvdG9jb2wgdGhhdCB5b3Ugd2FudCBDbG91ZEZyb250IHRvIHVzZSBmb3IgSFRUUFMgY29ubmVjdGlvbnMuIE9uZSBvZiBTU0x2MywgVExTdjEsIFRMU3YxXzIwMTYsIFRMU3YxLjFfMjAxNiwgVExTdjEuMl8yMDE4IG9yIFRMU3YxLjJfMjAxOS5cbiAgICAgICAgKiBUTFN2MVxuICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBjbG91ZGZyb250TWluaW11bVByb3RvY29sVmVyc2lvbj86IHN0cmluZztcbiAgICAgICAgLyoqXG4gICAgICAgICogSWQgb2YgYSBjdXN0b20gcmVxdWVzdCBwb2xpY3kgdGhhdCBvdmVycmlkZXMgdGhlIGRlZmF1bHQgcG9saWN5IChBbGxWaWV3ZXIpLiBDYW4gYmUgY3VzdG9tIG9yIG1hbmFnZWQuXG4gICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGNsb3VkZnJvbnRPcmlnaW5SZXF1ZXN0UG9saWN5Pzogc3RyaW5nO1xuICAgICAgICAvKipcbiAgICAgICAgKiBQcmljZSBjbGFzcyBmb3IgdGhlIENsb3VkRnJvbnQgZGlzdHJpYnV0aW9ucyAobWFpbiAmIHByb3h5IGNvbmZpZykuIE9uZSBvZiBQcmljZUNsYXNzX0FsbCwgUHJpY2VDbGFzc18yMDAsIFByaWNlQ2xhc3NfMTAwLlxuICAgICAgICAqIFByaWNlQ2xhc3NfMTAwXG4gICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGNsb3VkZnJvbnRQcmljZUNsYXNzPzogc3RyaW5nO1xuICAgICAgICAvKipcbiAgICAgICAgKiBJZCBvZiBhIHJlc3BvbnNlIGhlYWRlcnMgcG9saWN5LiBDYW4gYmUgY3VzdG9tIG9yIG1hbmFnZWQuIERlZmF1bHQgaXMgZW1wdHkuXG4gICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGNsb3VkZnJvbnRSZXNwb25zZUhlYWRlcnNQb2xpY3k/OiBzdHJpbmc7XG4gICAgICAgIC8qKlxuICAgICAgICAqIEFuIG9wdGlvbmFsIHdlYmFjbDIgYXJuIG9yIHdlYmFjbCBpZCB0byBhc3NvY2lhdGUgd2l0aCB0aGUgY2xvdWRmcm9udCBkaXN0cmlidXRpb25cbiAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgY2xvdWRmcm9udFdlYmFjbElkPzogc3RyaW5nO1xuICAgICAgICAvKipcbiAgICAgICAgKiBDb250cm9scyB3aGV0aGVyIHJlc291cmNlcyBmb3IgaW1hZ2Ugb3B0aW1pemF0aW9uIHN1cHBvcnQgc2hvdWxkIGJlIGNyZWF0ZWQgb3Igbm90LlxuICAgICAgICAqIHRydWVcbiAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgY3JlYXRlSW1hZ2VPcHRpbWl6YXRpb24/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgKiBVc2UgbG9jYWxseSBidWlsdCBwYWNrYWdlcyByYXRoZXIgdGhhbiBkb3dubG9hZCB0aGVtIGZyb20gbnBtLlxuICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBkZWJ1Z1VzZUxvY2FsUGFja2FnZXM/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgKiBJZGVudGlmaWVyIGZvciB0aGUgZGVwbG95bWVudCBncm91cCAob25seSBsb3dlcmNhc2UgYWxwaGFudW1lcmljIGNoYXJhY3RlcnMgYW5kIGh5cGhlbnMgYXJlIGFsbG93ZWQpLlxuICAgICAgICAqIHRmLW5leHRcbiAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgZGVwbG95bWVudE5hbWU/OiBzdHJpbmc7XG4gICAgICAgIC8qKlxuICAgICAgICAqIENvbnRyb2xzIHdoZXRoZXIgaXQgc2hvdWxkIGJlIHBvc3NpYmxlIHRvIHJ1biBtdWx0aXBsZSBkZXBsb3ltZW50cyBpbiBwYXJhbGxlbCAocmVxdWlyZXMgbXVsdGlwbGVfZGVwbG95bWVudHNfYmFzZV9kb21haW4pLlxuICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBlbmFibGVNdWx0aXBsZURlcGxveW1lbnRzPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICogQW1vdW50IG9mIG1lbW9yeSBpbiBNQiB0aGUgd29ya2VyIExhbWJkYSBGdW5jdGlvbiBmb3IgaW1hZ2Ugb3B0aW1pemF0aW9uIGNhbiB1c2UuIFZhbGlkIHZhbHVlIGJldHdlZW4gMTI4IE1CIHRvIDEwLDI0MCBNQiwgaW4gMSBNQiBpbmNyZW1lbnRzLlxuICAgICAgICAqIDIsMDQ4XG4gICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IGltYWdlT3B0aW1pemF0aW9uTGFtYmRhTWVtb3J5U2l6ZT86IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICogV2hldGhlciB0byBkZXBsb3kgYWRkaXRpb25hbCBsYW1iZGEgSlNPTiBwb2xpY2llcy4gSWYgZmFsc2UsIGxhbWJkYV9wb2xpY3lfanNvbiB3aWxsIG5vdCBiZSBhdHRhY2hlZCB0byB0aGUgbGFtYmRhIGZ1bmN0aW9uLiAoTmVjZXNzYXJ5IHNpbmNlIHBvbGljeSBzdHJpbmdzIGFyZSBvbmx5IGtub3duIGFmdGVyIGFwcGx5IHdoZW4gdXNpbmcgVGVycmFmb3JtcyBkYXRhLmF3c19pYW1fcG9saWN5X2RvY3VtZW50KVxuICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBsYW1iZGFBdHRhY2hQb2xpY3lKc29uPzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICogU2V0IHRvIHRydWUgaWYgdGhlIExhbWJkYSBmdW5jdGlvbnMgc2hvdWxkIGJlIGF0dGFjaGVkIHRvIGEgVlBDLiBVc2UgdGhpcyBzZXR0aW5nIGlmIFZQQyByZXNvdXJjZXMgc2hvdWxkIGJlIGFjY2Vzc2VkIGJ5IHRoZSBMYW1iZGEgZnVuY3Rpb25zLiBXaGVuIHNldHRpbmcgdGhpcyB0byB0cnVlLCB1c2UgdnBjX3NlY3VyaXR5X2dyb3VwX2lkcyBhbmQgdnBjX3N1Ym5ldF9pZHMgdG8gc3BlY2lmeSB0aGUgVlBDIG5ldHdvcmtpbmcuIE5vdGUgdGhhdCBhdHRhY2hpbmcgdG8gYSBWUEMgd291bGQgaW50cm9kdWNlIGEgZGVsYXkgb24gdG8gY29sZCBzdGFydHNcbiAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgbGFtYmRhQXR0YWNoVG9WcGM/OiBib29sZWFuO1xuICAgICAgICAvKipcbiAgICAgICAgKiBBZGRpdGlvbmFsIHBvbGljeSBkb2N1bWVudCBhcyBKU09OIHRvIGF0dGFjaCB0byB0aGUgTGFtYmRhIEZ1bmN0aW9uIHJvbGVcbiAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgbGFtYmRhUG9saWN5SnNvbj86IHN0cmluZztcbiAgICAgICAgLyoqXG4gICAgICAgICogQVJOIG9mIElBTSBwb2xpY3kgdGhhdCBzY29wZXMgYXdzX2lhbV9yb2xlIGFjY2VzcyBmb3IgdGhlIGxhbWJkYVxuICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBsYW1iZGFSb2xlUGVybWlzc2lvbnNCb3VuZGFyeT86IHN0cmluZztcbiAgICAgICAgLyoqXG4gICAgICAgICogRGVmYXVsdCB3aWxkY2FyZCBkb21haW4gd2hlcmUgbmV3IGRlcGxveW1lbnRzIHNob3VsZCBiZSBhdmFpbGFibGUuIFNob3VsZCBiZSBpbiB0aGUgZm9ybSBvZiAqLmV4YW1wbGUuY29tLlxuICAgICAgICAqL1xuICAgICAgICByZWFkb25seSBtdWx0aXBsZURlcGxveW1lbnRzQmFzZURvbWFpbj86IHN0cmluZztcbiAgICAgICAgLyoqXG4gICAgICAgICogVGFnIG1ldGFkYXRhIHRvIGxhYmVsIEFXUyByZXNvdXJjZXMgdGhhdCBzdXBwb3J0IHRhZ3MuXG4gICAgICAgICogVGhlIHByb3BlcnR5IHR5cGUgY29udGFpbnMgYSBtYXAsIHRoZXkgaGF2ZSBzcGVjaWFsIGhhbmRsaW5nLCBwbGVhc2Ugc2VlIHtAbGluayBjZGsudGYvbW9kdWxlLW1hcC1pbnB1dHMgdGhlIGRvY3N9XG4gICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IHRhZ3M/OiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9O1xuICAgICAgICAvKipcbiAgICAgICAgKiBUYWcgbWV0YWRhdGEgdG8gbGFiZWwgQVdTIFMzIGJ1Y2tldHMuIE92ZXJyaWRlcyB0YWdzIHdpdGggdGhlIHNhbWUgbmFtZSBpbiBpbnB1dCB2YXJpYWJsZSB0YWdzLlxuICAgICAgICAqIFRoZSBwcm9wZXJ0eSB0eXBlIGNvbnRhaW5zIGEgbWFwLCB0aGV5IGhhdmUgc3BlY2lhbCBoYW5kbGluZywgcGxlYXNlIHNlZSB7QGxpbmsgY2RrLnRmL21vZHVsZS1tYXAtaW5wdXRzIHRoZSBkb2NzfVxuICAgICAgICAqL1xuICAgICAgICByZWFkb25seSB0YWdzUzNCdWNrZXQ/OiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9O1xuICAgICAgICAvKipcbiAgICAgICAgKiBUaGUgbGlzdCBvZiBTZWN1cml0eSBHcm91cCBJRHMgdG8gYmUgdXNlZCBieSB0aGUgTGFtYmRhIGZ1bmN0aW9ucy4gbGFtYmRhX2F0dGFjaF90b192cGMgc2hvdWxkIGJlIHNldCB0byB0cnVlIGZvciB0aGVzZSB0byBiZSBhcHBsaWVkLlxuICAgICAgICAqXG4gICAgICAgICovXG4gICAgICAgIHJlYWRvbmx5IHZwY1NlY3VyaXR5R3JvdXBJZHM/OiBzdHJpbmdbXTtcbiAgICAgICAgLyoqXG4gICAgICAgICogVGhlIGxpc3Qgb2YgVlBDIHN1Ym5ldCBJRHMgdG8gYXR0YWNoIHRoZSBMYW1iZGEgZnVuY3Rpb25zLiBsYW1iZGFfYXR0YWNoX3RvX3ZwYyBzaG91bGQgYmUgc2V0IHRvIHRydWUgZm9yIHRoZXNlIHRvIGJlIGFwcGxpZWQuXG4gICAgICAgICpcbiAgICAgICAgKi9cbiAgICAgICAgcmVhZG9ubHkgdnBjU3VibmV0SWRzPzogc3RyaW5nW107XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICogRGVmaW5lcyBhbiBOZXh0SnMgYmFzZWQgb24gYSBUZXJyYWZvcm0gbW9kdWxlXG4gICAgICAqXG4gICAgICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vbW9kdWxlcy9taWxsaUhRL25leHQtanMvYXdzLzEuMC4wLWNhbmFyeS41IG1pbGxpSFEvbmV4dC1qcy9hd3N9XG4gICAgICAqL1xuICAgICAgZXhwb3J0IGNsYXNzIE5leHRKcyBleHRlbmRzIFRlcnJhZm9ybU1vZHVsZSB7XG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgaW5wdXRzOiB7IFtuYW1lOiBzdHJpbmddOiBhbnkgfSA9IHsgfVxuICAgICAgICBwdWJsaWMgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgY29uZmlnOiBOZXh0SnNDb25maWcgPSB7fSkge1xuICAgICAgICAgIHN1cGVyKHNjb3BlLCBpZCwge1xuICAgICAgICAgICAgLi4uY29uZmlnLFxuICAgICAgICAgICAgc291cmNlOiAnbWlsbGlIUS9uZXh0LWpzL2F3cycsXG4gICAgICAgICAgICB2ZXJzaW9uOiAnMS4wLjAtY2FuYXJ5LjUnLFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMuY2xvdWRmcm9udEFjbUNlcnRpZmljYXRlQXJuID0gY29uZmlnLmNsb3VkZnJvbnRBY21DZXJ0aWZpY2F0ZUFybjtcbiAgICAgICAgICB0aGlzLmNsb3VkZnJvbnRBbGlhc2VzID0gY29uZmlnLmNsb3VkZnJvbnRBbGlhc2VzO1xuICAgICAgICAgIHRoaXMuY2xvdWRmcm9udENhY2hlS2V5SGVhZGVycyA9IGNvbmZpZy5jbG91ZGZyb250Q2FjaGVLZXlIZWFkZXJzO1xuICAgICAgICAgIHRoaXMuY2xvdWRmcm9udENyZWF0ZURpc3RyaWJ1dGlvbiA9IGNvbmZpZy5jbG91ZGZyb250Q3JlYXRlRGlzdHJpYnV0aW9uO1xuICAgICAgICAgIHRoaXMuY2xvdWRmcm9udEV4dGVybmFsQXJuID0gY29uZmlnLmNsb3VkZnJvbnRFeHRlcm5hbEFybjtcbiAgICAgICAgICB0aGlzLmNsb3VkZnJvbnRFeHRlcm5hbElkID0gY29uZmlnLmNsb3VkZnJvbnRFeHRlcm5hbElkO1xuICAgICAgICAgIHRoaXMuY2xvdWRmcm9udE1pbmltdW1Qcm90b2NvbFZlcnNpb24gPSBjb25maWcuY2xvdWRmcm9udE1pbmltdW1Qcm90b2NvbFZlcnNpb247XG4gICAgICAgICAgdGhpcy5jbG91ZGZyb250T3JpZ2luUmVxdWVzdFBvbGljeSA9IGNvbmZpZy5jbG91ZGZyb250T3JpZ2luUmVxdWVzdFBvbGljeTtcbiAgICAgICAgICB0aGlzLmNsb3VkZnJvbnRQcmljZUNsYXNzID0gY29uZmlnLmNsb3VkZnJvbnRQcmljZUNsYXNzO1xuICAgICAgICAgIHRoaXMuY2xvdWRmcm9udFJlc3BvbnNlSGVhZGVyc1BvbGljeSA9IGNvbmZpZy5jbG91ZGZyb250UmVzcG9uc2VIZWFkZXJzUG9saWN5O1xuICAgICAgICAgIHRoaXMuY2xvdWRmcm9udFdlYmFjbElkID0gY29uZmlnLmNsb3VkZnJvbnRXZWJhY2xJZDtcbiAgICAgICAgICB0aGlzLmNyZWF0ZUltYWdlT3B0aW1pemF0aW9uID0gY29uZmlnLmNyZWF0ZUltYWdlT3B0aW1pemF0aW9uO1xuICAgICAgICAgIHRoaXMuZGVidWdVc2VMb2NhbFBhY2thZ2VzID0gY29uZmlnLmRlYnVnVXNlTG9jYWxQYWNrYWdlcztcbiAgICAgICAgICB0aGlzLmRlcGxveW1lbnROYW1lID0gY29uZmlnLmRlcGxveW1lbnROYW1lO1xuICAgICAgICAgIHRoaXMuZW5hYmxlTXVsdGlwbGVEZXBsb3ltZW50cyA9IGNvbmZpZy5lbmFibGVNdWx0aXBsZURlcGxveW1lbnRzO1xuICAgICAgICAgIHRoaXMuaW1hZ2VPcHRpbWl6YXRpb25MYW1iZGFNZW1vcnlTaXplID0gY29uZmlnLmltYWdlT3B0aW1pemF0aW9uTGFtYmRhTWVtb3J5U2l6ZTtcbiAgICAgICAgICB0aGlzLmxhbWJkYUF0dGFjaFBvbGljeUpzb24gPSBjb25maWcubGFtYmRhQXR0YWNoUG9saWN5SnNvbjtcbiAgICAgICAgICB0aGlzLmxhbWJkYUF0dGFjaFRvVnBjID0gY29uZmlnLmxhbWJkYUF0dGFjaFRvVnBjO1xuICAgICAgICAgIHRoaXMubGFtYmRhUG9saWN5SnNvbiA9IGNvbmZpZy5sYW1iZGFQb2xpY3lKc29uO1xuICAgICAgICAgIHRoaXMubGFtYmRhUm9sZVBlcm1pc3Npb25zQm91bmRhcnkgPSBjb25maWcubGFtYmRhUm9sZVBlcm1pc3Npb25zQm91bmRhcnk7XG4gICAgICAgICAgdGhpcy5tdWx0aXBsZURlcGxveW1lbnRzQmFzZURvbWFpbiA9IGNvbmZpZy5tdWx0aXBsZURlcGxveW1lbnRzQmFzZURvbWFpbjtcbiAgICAgICAgICB0aGlzLnRhZ3MgPSBjb25maWcudGFncztcbiAgICAgICAgICB0aGlzLnRhZ3NTM0J1Y2tldCA9IGNvbmZpZy50YWdzUzNCdWNrZXQ7XG4gICAgICAgICAgdGhpcy52cGNTZWN1cml0eUdyb3VwSWRzID0gY29uZmlnLnZwY1NlY3VyaXR5R3JvdXBJZHM7XG4gICAgICAgICAgdGhpcy52cGNTdWJuZXRJZHMgPSBjb25maWcudnBjU3VibmV0SWRzO1xuICAgICAgICB9XG4gICAgICAgIHB1YmxpYyBnZXQgY2xvdWRmcm9udEFjbUNlcnRpZmljYXRlQXJuKCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXRzWydjbG91ZGZyb250X2FjbV9jZXJ0aWZpY2F0ZV9hcm4nXSBhcyBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIHNldCBjbG91ZGZyb250QWNtQ2VydGlmaWNhdGVBcm4odmFsdWU6IHN0cmluZyB8IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRoaXMuaW5wdXRzWydjbG91ZGZyb250X2FjbV9jZXJ0aWZpY2F0ZV9hcm4nXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHB1YmxpYyBnZXQgY2xvdWRmcm9udEFsaWFzZXMoKTogc3RyaW5nW10gfCB1bmRlZmluZWQge1xuICAgICAgICAgIHJldHVybiB0aGlzLmlucHV0c1snY2xvdWRmcm9udF9hbGlhc2VzJ10gYXMgc3RyaW5nW10gfCB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIHNldCBjbG91ZGZyb250QWxpYXNlcyh2YWx1ZTogc3RyaW5nW10gfCB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aGlzLmlucHV0c1snY2xvdWRmcm9udF9hbGlhc2VzJ10gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgZ2V0IGNsb3VkZnJvbnRDYWNoZUtleUhlYWRlcnMoKTogc3RyaW5nW10gfCB1bmRlZmluZWQge1xuICAgICAgICAgIHJldHVybiB0aGlzLmlucHV0c1snY2xvdWRmcm9udF9jYWNoZV9rZXlfaGVhZGVycyddIGFzIHN0cmluZ1tdIHwgdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHB1YmxpYyBzZXQgY2xvdWRmcm9udENhY2hlS2V5SGVhZGVycyh2YWx1ZTogc3RyaW5nW10gfCB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aGlzLmlucHV0c1snY2xvdWRmcm9udF9jYWNoZV9rZXlfaGVhZGVycyddID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIGdldCBjbG91ZGZyb250Q3JlYXRlRGlzdHJpYnV0aW9uKCk6IGJvb2xlYW4gfCB1bmRlZmluZWQge1xuICAgICAgICAgIHJldHVybiB0aGlzLmlucHV0c1snY2xvdWRmcm9udF9jcmVhdGVfZGlzdHJpYnV0aW9uJ10gYXMgYm9vbGVhbiB8IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgc2V0IGNsb3VkZnJvbnRDcmVhdGVEaXN0cmlidXRpb24odmFsdWU6IGJvb2xlYW4gfCB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aGlzLmlucHV0c1snY2xvdWRmcm9udF9jcmVhdGVfZGlzdHJpYnV0aW9uJ10gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgZ2V0IGNsb3VkZnJvbnRFeHRlcm5hbEFybigpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgICAgICAgIHJldHVybiB0aGlzLmlucHV0c1snY2xvdWRmcm9udF9leHRlcm5hbF9hcm4nXSBhcyBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIHNldCBjbG91ZGZyb250RXh0ZXJuYWxBcm4odmFsdWU6IHN0cmluZyB8IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRoaXMuaW5wdXRzWydjbG91ZGZyb250X2V4dGVybmFsX2FybiddID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIGdldCBjbG91ZGZyb250RXh0ZXJuYWxJZCgpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgICAgICAgIHJldHVybiB0aGlzLmlucHV0c1snY2xvdWRmcm9udF9leHRlcm5hbF9pZCddIGFzIHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgc2V0IGNsb3VkZnJvbnRFeHRlcm5hbElkKHZhbHVlOiBzdHJpbmcgfCB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aGlzLmlucHV0c1snY2xvdWRmcm9udF9leHRlcm5hbF9pZCddID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIGdldCBjbG91ZGZyb250TWluaW11bVByb3RvY29sVmVyc2lvbigpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgICAgICAgIHJldHVybiB0aGlzLmlucHV0c1snY2xvdWRmcm9udF9taW5pbXVtX3Byb3RvY29sX3ZlcnNpb24nXSBhcyBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIHNldCBjbG91ZGZyb250TWluaW11bVByb3RvY29sVmVyc2lvbih2YWx1ZTogc3RyaW5nIHwgdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhpcy5pbnB1dHNbJ2Nsb3VkZnJvbnRfbWluaW11bV9wcm90b2NvbF92ZXJzaW9uJ10gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgZ2V0IGNsb3VkZnJvbnRPcmlnaW5SZXF1ZXN0UG9saWN5KCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXRzWydjbG91ZGZyb250X29yaWdpbl9yZXF1ZXN0X3BvbGljeSddIGFzIHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgc2V0IGNsb3VkZnJvbnRPcmlnaW5SZXF1ZXN0UG9saWN5KHZhbHVlOiBzdHJpbmcgfCB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aGlzLmlucHV0c1snY2xvdWRmcm9udF9vcmlnaW5fcmVxdWVzdF9wb2xpY3knXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHB1YmxpYyBnZXQgY2xvdWRmcm9udFByaWNlQ2xhc3MoKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5pbnB1dHNbJ2Nsb3VkZnJvbnRfcHJpY2VfY2xhc3MnXSBhcyBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIHNldCBjbG91ZGZyb250UHJpY2VDbGFzcyh2YWx1ZTogc3RyaW5nIHwgdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhpcy5pbnB1dHNbJ2Nsb3VkZnJvbnRfcHJpY2VfY2xhc3MnXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHB1YmxpYyBnZXQgY2xvdWRmcm9udFJlc3BvbnNlSGVhZGVyc1BvbGljeSgpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgICAgICAgIHJldHVybiB0aGlzLmlucHV0c1snY2xvdWRmcm9udF9yZXNwb25zZV9oZWFkZXJzX3BvbGljeSddIGFzIHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgc2V0IGNsb3VkZnJvbnRSZXNwb25zZUhlYWRlcnNQb2xpY3kodmFsdWU6IHN0cmluZyB8IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRoaXMuaW5wdXRzWydjbG91ZGZyb250X3Jlc3BvbnNlX2hlYWRlcnNfcG9saWN5J10gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgZ2V0IGNsb3VkZnJvbnRXZWJhY2xJZCgpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgICAgICAgIHJldHVybiB0aGlzLmlucHV0c1snY2xvdWRmcm9udF93ZWJhY2xfaWQnXSBhcyBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIHNldCBjbG91ZGZyb250V2ViYWNsSWQodmFsdWU6IHN0cmluZyB8IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRoaXMuaW5wdXRzWydjbG91ZGZyb250X3dlYmFjbF9pZCddID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIGdldCBjcmVhdGVJbWFnZU9wdGltaXphdGlvbigpOiBib29sZWFuIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5pbnB1dHNbJ2NyZWF0ZV9pbWFnZV9vcHRpbWl6YXRpb24nXSBhcyBib29sZWFuIHwgdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHB1YmxpYyBzZXQgY3JlYXRlSW1hZ2VPcHRpbWl6YXRpb24odmFsdWU6IGJvb2xlYW4gfCB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aGlzLmlucHV0c1snY3JlYXRlX2ltYWdlX29wdGltaXphdGlvbiddID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIGdldCBkZWJ1Z1VzZUxvY2FsUGFja2FnZXMoKTogYm9vbGVhbiB8IHVuZGVmaW5lZCB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXRzWydkZWJ1Z191c2VfbG9jYWxfcGFja2FnZXMnXSBhcyBib29sZWFuIHwgdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHB1YmxpYyBzZXQgZGVidWdVc2VMb2NhbFBhY2thZ2VzKHZhbHVlOiBib29sZWFuIHwgdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhpcy5pbnB1dHNbJ2RlYnVnX3VzZV9sb2NhbF9wYWNrYWdlcyddID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIGdldCBkZXBsb3ltZW50TmFtZSgpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgICAgICAgIHJldHVybiB0aGlzLmlucHV0c1snZGVwbG95bWVudF9uYW1lJ10gYXMgc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHB1YmxpYyBzZXQgZGVwbG95bWVudE5hbWUodmFsdWU6IHN0cmluZyB8IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRoaXMuaW5wdXRzWydkZXBsb3ltZW50X25hbWUnXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHB1YmxpYyBnZXQgZW5hYmxlTXVsdGlwbGVEZXBsb3ltZW50cygpOiBib29sZWFuIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5pbnB1dHNbJ2VuYWJsZV9tdWx0aXBsZV9kZXBsb3ltZW50cyddIGFzIGJvb2xlYW4gfCB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIHNldCBlbmFibGVNdWx0aXBsZURlcGxveW1lbnRzKHZhbHVlOiBib29sZWFuIHwgdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhpcy5pbnB1dHNbJ2VuYWJsZV9tdWx0aXBsZV9kZXBsb3ltZW50cyddID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIGdldCBpbWFnZU9wdGltaXphdGlvbkxhbWJkYU1lbW9yeVNpemUoKTogbnVtYmVyIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5pbnB1dHNbJ2ltYWdlX29wdGltaXphdGlvbl9sYW1iZGFfbWVtb3J5X3NpemUnXSBhcyBudW1iZXIgfCB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIHNldCBpbWFnZU9wdGltaXphdGlvbkxhbWJkYU1lbW9yeVNpemUodmFsdWU6IG51bWJlciB8IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRoaXMuaW5wdXRzWydpbWFnZV9vcHRpbWl6YXRpb25fbGFtYmRhX21lbW9yeV9zaXplJ10gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgZ2V0IGxhbWJkYUF0dGFjaFBvbGljeUpzb24oKTogYm9vbGVhbiB8IHVuZGVmaW5lZCB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXRzWydsYW1iZGFfYXR0YWNoX3BvbGljeV9qc29uJ10gYXMgYm9vbGVhbiB8IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgc2V0IGxhbWJkYUF0dGFjaFBvbGljeUpzb24odmFsdWU6IGJvb2xlYW4gfCB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aGlzLmlucHV0c1snbGFtYmRhX2F0dGFjaF9wb2xpY3lfanNvbiddID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIGdldCBsYW1iZGFBdHRhY2hUb1ZwYygpOiBib29sZWFuIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5pbnB1dHNbJ2xhbWJkYV9hdHRhY2hfdG9fdnBjJ10gYXMgYm9vbGVhbiB8IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgc2V0IGxhbWJkYUF0dGFjaFRvVnBjKHZhbHVlOiBib29sZWFuIHwgdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhpcy5pbnB1dHNbJ2xhbWJkYV9hdHRhY2hfdG9fdnBjJ10gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgZ2V0IGxhbWJkYVBvbGljeUpzb24oKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5pbnB1dHNbJ2xhbWJkYV9wb2xpY3lfanNvbiddIGFzIHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgc2V0IGxhbWJkYVBvbGljeUpzb24odmFsdWU6IHN0cmluZyB8IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRoaXMuaW5wdXRzWydsYW1iZGFfcG9saWN5X2pzb24nXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHB1YmxpYyBnZXQgbGFtYmRhUm9sZVBlcm1pc3Npb25zQm91bmRhcnkoKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5pbnB1dHNbJ2xhbWJkYV9yb2xlX3Blcm1pc3Npb25zX2JvdW5kYXJ5J10gYXMgc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHB1YmxpYyBzZXQgbGFtYmRhUm9sZVBlcm1pc3Npb25zQm91bmRhcnkodmFsdWU6IHN0cmluZyB8IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRoaXMuaW5wdXRzWydsYW1iZGFfcm9sZV9wZXJtaXNzaW9uc19ib3VuZGFyeSddID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIGdldCBtdWx0aXBsZURlcGxveW1lbnRzQmFzZURvbWFpbigpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgICAgICAgIHJldHVybiB0aGlzLmlucHV0c1snbXVsdGlwbGVfZGVwbG95bWVudHNfYmFzZV9kb21haW4nXSBhcyBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIHNldCBtdWx0aXBsZURlcGxveW1lbnRzQmFzZURvbWFpbih2YWx1ZTogc3RyaW5nIHwgdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhpcy5pbnB1dHNbJ211bHRpcGxlX2RlcGxveW1lbnRzX2Jhc2VfZG9tYWluJ10gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgZ2V0IHRhZ3MoKTogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSB8IHVuZGVmaW5lZCB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXRzWyd0YWdzJ10gYXMgeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSB8IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgc2V0IHRhZ3ModmFsdWU6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0gfCB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aGlzLmlucHV0c1sndGFncyddID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIGdldCB0YWdzUzNCdWNrZXQoKTogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSB8IHVuZGVmaW5lZCB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXRzWyd0YWdzX3MzX2J1Y2tldCddIGFzIHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0gfCB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIHNldCB0YWdzUzNCdWNrZXQodmFsdWU6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0gfCB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aGlzLmlucHV0c1sndGFnc19zM19idWNrZXQnXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHB1YmxpYyBnZXQgdnBjU2VjdXJpdHlHcm91cElkcygpOiBzdHJpbmdbXSB8IHVuZGVmaW5lZCB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXRzWyd2cGNfc2VjdXJpdHlfZ3JvdXBfaWRzJ10gYXMgc3RyaW5nW10gfCB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIHNldCB2cGNTZWN1cml0eUdyb3VwSWRzKHZhbHVlOiBzdHJpbmdbXSB8IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRoaXMuaW5wdXRzWyd2cGNfc2VjdXJpdHlfZ3JvdXBfaWRzJ10gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgZ2V0IHZwY1N1Ym5ldElkcygpOiBzdHJpbmdbXSB8IHVuZGVmaW5lZCB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXRzWyd2cGNfc3VibmV0X2lkcyddIGFzIHN0cmluZ1tdIHwgdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHB1YmxpYyBzZXQgdnBjU3VibmV0SWRzKHZhbHVlOiBzdHJpbmdbXSB8IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRoaXMuaW5wdXRzWyd2cGNfc3VibmV0X2lkcyddID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIGdldCBhcGlFbmRwb2ludE91dHB1dCgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmcoJ2FwaV9lbmRwb2ludCcpXG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIGdldCBhcGlFbmRwb2ludEFjY2Vzc1BvbGljeUFybk91dHB1dCgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmcoJ2FwaV9lbmRwb2ludF9hY2Nlc3NfcG9saWN5X2FybicpXG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIGdldCBjbG91ZGZyb250Q3VzdG9tRXJyb3JSZXNwb25zZU91dHB1dCgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmcoJ2Nsb3VkZnJvbnRfY3VzdG9tX2Vycm9yX3Jlc3BvbnNlJylcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgZ2V0IGNsb3VkZnJvbnREZWZhdWx0Q2FjaGVCZWhhdmlvck91dHB1dCgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmcoJ2Nsb3VkZnJvbnRfZGVmYXVsdF9jYWNoZV9iZWhhdmlvcicpXG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIGdldCBjbG91ZGZyb250RGVmYXVsdFJvb3RPYmplY3RPdXRwdXQoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nKCdjbG91ZGZyb250X2RlZmF1bHRfcm9vdF9vYmplY3QnKVxuICAgICAgICB9XG4gICAgICAgIHB1YmxpYyBnZXQgY2xvdWRmcm9udERvbWFpbk5hbWVPdXRwdXQoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nKCdjbG91ZGZyb250X2RvbWFpbl9uYW1lJylcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgZ2V0IGNsb3VkZnJvbnRIb3N0ZWRab25lSWRPdXRwdXQoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nKCdjbG91ZGZyb250X2hvc3RlZF96b25lX2lkJylcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgZ2V0IGNsb3VkZnJvbnRPcmRlcmVkQ2FjaGVCZWhhdmlvcnNPdXRwdXQoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nKCdjbG91ZGZyb250X29yZGVyZWRfY2FjaGVfYmVoYXZpb3JzJylcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgZ2V0IGNsb3VkZnJvbnRPcmlnaW5zT3V0cHV0KCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmdldFN0cmluZygnY2xvdWRmcm9udF9vcmlnaW5zJylcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgZ2V0IHVwbG9hZEJ1Y2tldElkT3V0cHV0KCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmdldFN0cmluZygndXBsb2FkX2J1Y2tldF9pZCcpXG4gICAgICAgIH1cbiAgICAgICAgcHJvdGVjdGVkIHN5bnRoZXNpemVBdHRyaWJ1dGVzKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmlucHV0cztcbiAgICAgICAgfVxuICAgICAgICBwcm90ZWN0ZWQgc3ludGhlc2l6ZUhjbEF0dHJpYnV0ZXMoKTogeyBbbmFtZTogc3RyaW5nXTogYW55IH0ge1xuICAgICAgICAgIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoXG4gICAgICAgICAgICBPYmplY3QuZW50cmllcyh0aGlzLmlucHV0cylcbiAgICAgICAgICAgICAgLmZpbHRlcigoWywgdmFsXSkgPT4gdmFsICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgIC5tYXAoKFtrZXksIHZhbF0pID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFueVwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIFwiXG4gICAgYCk7XG4gIH0sXG4gIDEyMDAwMFxuKTtcbiJdfQ==