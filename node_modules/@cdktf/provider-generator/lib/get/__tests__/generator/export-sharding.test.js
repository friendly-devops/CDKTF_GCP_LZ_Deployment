"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) HashiCorp, Inc
// SPDX-License-Identifier: MPL-2.0
const fs = __importStar(require("fs"));
const os = __importStar(require("os"));
const path = __importStar(require("path"));
const provider_generator_1 = require("../../generator/provider-generator");
const codemaker_1 = require("codemaker");
// this is a workaround for a bug introduced in TS 3.9.x and seems to be unlikely to get fixed.
// Since jsii relies on TS < 4 at the moment we can't use newer TS versions which have this fixed (^4.1).
// see https://github.com/hashicorp/terraform-cdk/pull/1248 for more context
test("shard exports across multiple files to avoid generating files with more than a 1000 exports", async () => {
    const code = new codemaker_1.CodeMaker();
    const workdir = fs.mkdtempSync(path.join(os.tmpdir(), "export-sharding.test"));
    const spec = JSON.parse(fs.readFileSync(path.join(__dirname, "fixtures", "aws_wafv2_web_acl.test.fixture.json"), "utf-8"));
    new provider_generator_1.TerraformProviderGenerator(code, spec).generateAll();
    await code.save(workdir);
    const output = fs.readFileSync(path.join(workdir, "providers/test/wafv2-web-acl/index.ts"), "utf-8");
    expect(output).toMatchSnapshot(`wafv2-web-acl-resource`);
    const outputStructsIndex = fs.readFileSync(path.join(workdir, "providers/test/wafv2-web-acl/index-structs/index.ts"), "utf-8");
    expect(outputStructsIndex).toMatchSnapshot(`structs-index`);
    const outputStructs0 = fs.readFileSync(path.join(workdir, "providers/test/wafv2-web-acl/index-structs/structs0.ts"), "utf-8");
    expect(outputStructs0).toMatchSnapshot(`structs0`);
    const outputStructs400 = fs.readFileSync(path.join(workdir, "providers/test/wafv2-web-acl/index-structs/structs400.ts"), "utf-8");
    expect(outputStructs400).toMatchSnapshot(`structs400`);
    const outputStructs800 = fs.readFileSync(path.join(workdir, "providers/test/wafv2-web-acl/index-structs/structs800.ts"), "utf-8");
    expect(outputStructs800).toMatchSnapshot(`structs800`);
    const outputStructs1200 = fs.readFileSync(path.join(workdir, "providers/test/wafv2-web-acl/index-structs/structs1200.ts"), "utf-8");
    expect(outputStructs1200).toMatchSnapshot(`structs1200`);
    const outputStructs1600 = fs.readFileSync(path.join(workdir, "providers/test/wafv2-web-acl/index-structs/structs1600.ts"), "utf-8");
    expect(outputStructs1600).toMatchSnapshot(`structs1600`);
    const outputStructs2000 = fs.readFileSync(path.join(workdir, "providers/test/wafv2-web-acl/index-structs/structs2000.ts"), "utf-8");
    expect(outputStructs2000).toMatchSnapshot(`structs2000`);
    const outputStructs2400 = fs.readFileSync(path.join(workdir, "providers/test/wafv2-web-acl/index-structs/structs2400.ts"), "utf-8");
    expect(outputStructs2400).toMatchSnapshot(`structs2400`);
    const outputStructs2800 = fs.readFileSync(path.join(workdir, "providers/test/wafv2-web-acl/index-structs/structs2800.ts"), "utf-8");
    expect(outputStructs2800).toMatchSnapshot(`structs2800`);
    const outputStructs3200 = fs.readFileSync(path.join(workdir, "providers/test/wafv2-web-acl/index-structs/structs3200.ts"), "utf-8");
    expect(outputStructs3200).toMatchSnapshot(`structs3200`);
    const outputStructs3600 = fs.readFileSync(path.join(workdir, "providers/test/wafv2-web-acl/index-structs/structs3600.ts"), "utf-8");
    expect(outputStructs3600).toMatchSnapshot(`structs3600`);
});
test("shard exports across multiple files to avoid generating files with more than a 1000 exports in a provider without namespaces", async () => {
    const code = new codemaker_1.CodeMaker();
    const workdir = fs.mkdtempSync(path.join(os.tmpdir(), "export-sharding-no-namespace.test"));
    const spec = JSON.parse(fs.readFileSync(path.join(__dirname, "fixtures", "datadog_dashboard.test.fixture.json"), "utf-8"));
    new provider_generator_1.TerraformProviderGenerator(code, spec).generateAll();
    await code.save(workdir);
    const output = fs.readFileSync(path.join(workdir, "providers/datadog/dashboard/index.ts"), "utf-8");
    expect(output).toMatchSnapshot(`dashboard-resource`);
    const outputStructsIndex = fs.readFileSync(path.join(workdir, "providers/datadog/dashboard/index-structs/index.ts"), "utf-8");
    expect(outputStructsIndex).toMatchSnapshot(`structs-index`);
    const outputStructs0 = fs.readFileSync(path.join(workdir, "providers/datadog/dashboard/index-structs/structs0.ts"), "utf-8");
    expect(outputStructs0).toMatchSnapshot(`structs0`);
    const outputStructs400 = fs.readFileSync(path.join(workdir, "providers/datadog/dashboard/index-structs/structs400.ts"), "utf-8");
    expect(outputStructs400).toMatchSnapshot(`structs400`);
});
//# sourceMappingURL=data:application/json;base64,