"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) HashiCorp, Inc
// SPDX-License-Identifier: MPL-2.0
const fs = __importStar(require("fs-extra"));
const os = __importStar(require("os"));
const path = __importStar(require("path"));
const commons_1 = require("@cdktf/commons");
const constructs_maker_1 = require("../constructs-maker");
describe("constructsMaker", () => {
    describe("determineGoModuleName", () => {
        let tmpDir;
        let emptySubDir, validSubdir, invalidSubdir;
        beforeAll(async () => {
            tmpDir = await fs.mkdtemp(path.join(os.tmpdir(), "cdktf.test"));
            /* test directory layout
             * <tmpDir>
             * ├── go.mod
             * └── subdir
             *     ├── empty
             *     ├── valid
             *     │   └── go.mod
             *     └── invalid
             *         └── go.mod
             */
            emptySubDir = path.join(tmpDir, "subdir", "empty");
            validSubdir = path.join(tmpDir, "subdir", "valid");
            invalidSubdir = path.join(tmpDir, "subdir", "invalid");
            await fs.mkdirs(emptySubDir);
            await fs.mkdirs(validSubdir);
            await fs.mkdirs(invalidSubdir);
            const root = `module cdk.tf/test/go`;
            const valid = `module cdk.tf/test/go-valid-subdir`;
            const invalid = `malformed go mod`;
            await fs.writeFile(path.join(tmpDir, "go.mod"), root);
            await fs.writeFile(path.join(validSubdir, "go.mod"), valid);
            await fs.writeFile(path.join(invalidSubdir, "go.mod"), invalid);
        });
        afterAll(async () => {
            // await fs.remove(tmpDir);
        });
        it("works in root directory", async () => {
            const moduleName = await (0, constructs_maker_1.determineGoModuleName)(tmpDir);
            expect(moduleName).toBe("cdk.tf/test/go");
        });
        it("can walk upwards from empty directory", async () => {
            const moduleName = await (0, constructs_maker_1.determineGoModuleName)(emptySubDir);
            expect(moduleName).toBe("cdk.tf/test/go/subdir/empty");
        });
        it("works in subdirectory with go.mod", async () => {
            const moduleName = await (0, constructs_maker_1.determineGoModuleName)(validSubdir);
            expect(moduleName).toBe("cdk.tf/test/go-valid-subdir");
        });
        it("throws if go.mod is invalid", async () => {
            await expect((0, constructs_maker_1.determineGoModuleName)(invalidSubdir)).rejects.toThrow(`Could not determine the root Go module name. Found ${path.join(invalidSubdir, "go.mod")} but failed to regex match the module name directive`);
        });
        it("works from subdirectory that does not exist yet", async () => {
            const moduleName = await (0, constructs_maker_1.determineGoModuleName)(path.join(tmpDir, "subdir", "that", "does", "not", "exist", "yet"));
            expect(moduleName).toBe("cdk.tf/test/go/subdir/that/does/not/exist/yet");
        });
        it("throws if nothing could be found", async () => {
            const dir = "/cdktf-test/this/dir/does/not/exist"; //... and has no go.mod in any parent dir
            await expect((0, constructs_maker_1.determineGoModuleName)(dir)).rejects.toThrow(`Could not determine the root Go module name. No go.mod found in ${dir} and any parent directories`);
        });
    });
    describe("ConstructsMakerProviderTarget", () => {
        it("returns valid package name for Go", () => {
            const target = new commons_1.ConstructsMakerProviderTarget({
                name: "google-beta",
                fqn: "google-beta",
                source: "google-beta",
                version: "~> 4.0",
            }, commons_1.Language.GO);
            expect(target.srcMakName).toEqual("google_beta");
        });
    });
    describe("ConstructsMakerModuleTarget", () => {
        it("returns valid package name for Go", () => {
            const target = new commons_1.ConstructsMakerModuleTarget({
                name: "security-group",
                source: "terraform-aws-modules/security-group/aws",
                fqn: "terraform-aws-modules/security-group/aws",
                version: "4.9.0",
                namespace: "terraform-aws-modules/aws",
            }, commons_1.Language.GO);
            expect(target.srcMakName).toEqual("security_group");
        });
    });
});
//# sourceMappingURL=data:application/json;base64,