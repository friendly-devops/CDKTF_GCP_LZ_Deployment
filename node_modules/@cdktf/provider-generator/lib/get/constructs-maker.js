"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.determineGoModuleName = exports.ConstructsMaker = exports.generateJsiiLanguage = void 0;
// Copyright (c) HashiCorp, Inc
// SPDX-License-Identifier: MPL-2.0
const fs = __importStar(require("fs-extra"));
const path = __importStar(require("path"));
const codemaker_1 = require("codemaker");
const commons_1 = require("@cdktf/commons");
const commons_2 = require("@cdktf/commons");
const commons_3 = require("@cdktf/commons");
const provider_generator_1 = require("./generator/provider-generator");
const module_generator_1 = require("./generator/module-generator");
const glob_1 = require("glob");
const provider_schema_1 = require("@cdktf/provider-schema");
const pacmakModule = require.resolve("jsii-pacmak/bin/jsii-pacmak");
const jsiiModule = require.resolve("jsii/bin/jsii");
async function generateJsiiLanguage(code, opts, outputPath, disallowedFileGlobs = []) {
    await (0, commons_1.mkdtemp)(async (staging) => {
        // this is not typescript, so we generate in a staging directory and
        // use jsii-srcmak to compile and extract the language-specific source
        // into our project.
        await code.save(staging);
        // as the above generated the Typescript code for all providers and modules,
        // we need to filter out the ones we don't need so they don't end up in the JSII bundle over and over again.
        const filesToDelete = disallowedFileGlobs.flatMap((pattern) => glob_1.glob.sync(pattern, { cwd: staging }));
        await Promise.all(filesToDelete.map((file) => fs.remove(path.join(staging, file))));
        // Compile with JSII
        const jsiiArgs = ["--silence-warnings", "reserved-word"];
        const jsiiEntrypoint = opts.entrypoint;
        const basepath = path.join(path.dirname(jsiiEntrypoint), path.basename(jsiiEntrypoint, ".ts"));
        const moduleKey = opts.moduleKey.replace(/\./g, "").replace(/\//g, "");
        const moduleDirs = opts.deps;
        const targets = {};
        const deps = {};
        for (const dir of moduleDirs) {
            // read module metadata
            const metadata = await fs.readJson(path.join(dir, "package.json"));
            const moduleName = metadata.name;
            const moduleVersion = metadata.version;
            const targetdir = path.join(path.join(staging, "node_modules"), moduleName);
            await fs.mkdirp(path.dirname(targetdir));
            await fs.copy(dir, targetdir);
            // add to "deps" and "peer deps"
            if (!moduleName.startsWith("@types/")) {
                deps[moduleName] = moduleVersion;
            }
        }
        const pkg = {
            name: moduleKey,
            version: "0.0.0",
            author: "generated@generated.com",
            main: `${basepath}.js`,
            types: `${basepath}.d.ts`,
            license: "UNLICENSED",
            repository: { url: "http://generated", type: "git" },
            jsii: {
                outdir: "dist",
                targets: targets,
            },
            dependencies: deps,
            peerDependencies: deps,
        };
        if (opts.exports) {
            pkg.exports = opts.exports;
        }
        if (opts.python) {
            targets.python = {
                distName: "generated",
                module: opts.python.moduleName,
            };
        }
        if (opts.java) {
            targets.java = {
                package: opts.java.package,
                maven: {
                    groupId: "generated",
                    artifactId: "generated",
                },
            };
        }
        if (opts.csharp) {
            targets.dotnet = {
                namespace: opts.csharp.namespace,
                packageId: opts.csharp.namespace,
            };
        }
        if (opts.golang) {
            targets.go = {
                moduleName: opts.golang.moduleName,
                packageName: opts.golang.packageName,
            };
        }
        await fs.writeFile(path.join(staging, "package.json"), JSON.stringify(pkg, undefined, 2));
        const endJsiiTimer = (0, commons_2.logTimespan)("jsii");
        await (0, commons_1.exec)(jsiiModule, jsiiArgs, {
            cwd: staging,
        });
        endJsiiTimer();
        // extract .jsii if requested
        if (opts.jsii) {
            await fs.copy(path.join(staging, ".jsii"), opts.jsii.path);
        }
        // run pacmak to generate code
        const endJsiiPacmakTimer = (0, commons_2.logTimespan)("jsii-pacmak");
        await (0, commons_1.exec)(pacmakModule, ["--code-only"], { cwd: staging });
        endJsiiPacmakTimer();
        if (opts.python) {
            const reldir = opts.python.moduleName.replace(/\./g, "/"); // jsii replaces "." with "/"
            const source = path.resolve(path.join(staging, "dist/python/src", reldir));
            const target = path.join(opts.python.outdir, reldir);
            await fs.move(source, target, { overwrite: true });
        }
        if (opts.java) {
            const source = path.resolve(path.join(staging, "dist/java/src/"));
            const target = path.join(opts.java.outdir, "src/");
            await fs.mkdirp(target); // make sure target directory exists
            await fs.copy(source, target, { recursive: true, overwrite: false });
        }
        if (opts.csharp) {
            const reldir = opts.csharp.namespace;
            const source = path.resolve(path.join(staging, "dist/dotnet/", reldir));
            const target = path.join(opts.csharp.outdir, reldir);
            await fs.move(source, target, { overwrite: true });
        }
        if (opts.golang) {
            const reldir = opts.golang.packageName;
            const source = path.resolve(path.join(staging, "dist/go/", reldir));
            const target = path.join(opts.golang.outdir, reldir);
            await fs.move(source, target, { overwrite: true });
            // remove go.mod as this would make it a submodule
            await fs.remove(path.join(target, "go.mod"));
        }
        ["versions.json", "constraints.json"].forEach((file) => {
            try {
                fs.copySync(path.resolve(staging, file), path.resolve(outputPath, file));
            }
            catch (e) {
                commons_2.logger.debug(`Failed to copy ${file}: ${e}`);
            }
        });
    });
}
exports.generateJsiiLanguage = generateJsiiLanguage;
class ConstructsMaker {
    constructor(options, schemaCachePath, reportTelemetry = async () => { }) {
        this.options = options;
        this.schemaCachePath = schemaCachePath;
        this.reportTelemetry = reportTelemetry;
        this.codeMakerOutdir = path.resolve(this.options.codeMakerOutput);
        fs.mkdirpSync(this.codeMakerOutdir);
        this.code = new codemaker_1.CodeMaker();
        this.versions = {};
    }
    async generateTypescriptProvider(target, schema) {
        const endTSTimer = (0, commons_2.logTimespan)(`Generate Typescript for ${target.name}`);
        const generator = new provider_generator_1.TerraformProviderGenerator(this.code, schema);
        generator.generate(target);
        this.versions = { ...this.versions, ...generator.versions };
        endTSTimer();
    }
    async filterAlreadyGenerated(constraints) {
        let constraintsFile = "{}";
        try {
            constraintsFile = await fs.readFile(path.join(this.codeMakerOutdir, "constraints.json"), "utf8");
        }
        catch (e) {
            commons_2.logger.debug(`Could not find constraints.json file while filtering: ${e}. This means no providers were generated, so all constraints need to be generated.`);
            return constraints;
        }
        commons_2.logger.debug(`Found constraints.json file: ${constraintsFile}`);
        let previousConstraints = {};
        try {
            previousConstraints = JSON.parse(constraintsFile);
        }
        catch (e) {
            commons_2.logger.info(`Could not parse constraints.json file while filtering: ${e}. Generating all constraints.`);
            return constraints;
        }
        commons_2.logger.debug(`Found previous constraints: ${JSON.stringify(previousConstraints, null, 2)}`);
        if (!previousConstraints.providers ||
            typeof previousConstraints.providers !== "object") {
            commons_2.logger.info(`Could not find providers in constraints.json file, generating all constraints. The constraints file was ${JSON.stringify(previousConstraints, null, 2)}`);
            return constraints;
        }
        if (previousConstraints.cdktf !== commons_3.DISPLAY_VERSION) {
            commons_2.logger.info(`The CDKTF version has changed, generating all constraints. The previous version was ${previousConstraints.cdktf}, the current version is ${commons_3.DISPLAY_VERSION}`);
            return constraints;
        }
        const constraintsToGenerate = constraints.filter((constraint) => {
            const constraintMatches = previousConstraints.providers[constraint.fqn] === constraint.version;
            let providerFolderExists = false;
            switch (this.options.targetLanguage) {
                case commons_3.Language.TYPESCRIPT:
                    providerFolderExists = fs.existsSync(path.join(this.codeMakerOutdir, "providers", constraint.name));
                    break;
                case commons_3.Language.PYTHON:
                case commons_3.Language.JAVA:
                case commons_3.Language.CSHARP:
                    providerFolderExists = fs.existsSync(path.join(this.codeMakerOutdir, constraint.name));
                    break;
                case commons_3.Language.GO:
                    providerFolderExists = fs.existsSync(path.join(this.codeMakerOutdir, constraint.namespace || "hashicorp", constraint.name));
                    break;
            }
            const providerExists = constraintMatches && providerFolderExists;
            return !providerExists;
        });
        commons_2.logger.debug(`Constraints to generate: ${JSON.stringify(constraintsToGenerate, null, 2)}`);
        return constraintsToGenerate;
    }
    async generateTypescriptModule(target, schema) {
        const endTSTimer = (0, commons_2.logTimespan)(`Generate Typescript for ${target.name}`);
        target.spec = schema;
        new module_generator_1.ModuleGenerator(this.code, [target]);
        endTSTimer();
    }
    async generateTypescript(target, schemas) {
        var _a;
        if (target.isModule) {
            const schema = (_a = schemas.moduleSchema) === null || _a === void 0 ? void 0 : _a[target.moduleKey];
            if (!schema) {
                throw commons_2.Errors.Internal(`Could not generate schema for module ${target.moduleKey}`);
            }
            await this.generateTypescriptModule(target, schema);
        }
        else if (target.isProvider) {
            if (!schemas.providerSchema) {
                throw commons_2.Errors.Internal(`Could not generate schema for providers`);
            }
            await this.generateTypescriptProvider(target, schemas.providerSchema);
        }
        else {
            throw new Error(`Unknown target type used to generate bindings: ${target.name}`);
        }
    }
    // emits a versions.json file with a map of the used version for each provider fqpn
    updateVersionsFile(allowedConstraints) {
        commons_2.logger.debug(`Updating versions file with generated versions ${JSON.stringify(this.versions, null, 2)} with allowed constraints ${JSON.stringify(allowedConstraints, null, 2)}`);
        const filePath = "versions.json";
        let previousVersions = {};
        try {
            previousVersions = JSON.parse(fs.readFileSync(path.resolve(this.codeMakerOutdir, filePath), "utf8"));
            commons_2.logger.debug(`Read existing versions file: ${JSON.stringify(previousVersions, null, 2)}`);
        }
        catch (e) {
            // ignore
            commons_2.logger.debug(`Could not read versions file, this is expected if there are no pre-existing local providers: ${e}`);
        }
        const versions = allowedConstraints.reduce((acc, constraint) => {
            const provider = Object.entries(previousVersions).find(([name]) => 
            // This could be more refined, but it's good enough for now
            name.endsWith(constraint.fqn));
            if (provider) {
                const [name, version] = provider;
                return { ...acc, [name]: version };
            }
            return acc;
        }, {});
        commons_2.logger.debug(`Writing versions file (${filePath}): ${JSON.stringify(versions, null, 2)}`);
        this.code.openFile(filePath);
        this.code.line(JSON.stringify({ ...versions, ...this.versions }, null, 2));
        this.code.closeFile(filePath);
        return filePath;
    }
    async removeFoldersThatShouldNotExist(constraintsThatShouldExist) {
        commons_2.logger.debug(`Removing providers except for ${JSON.stringify(constraintsThatShouldExist, null, 2)}`);
        // All languages besides TS keep their providers in the same folders as modules
        // this makes it impossible for us to distinguish a no longer required provider
        // from a manually written construct or a module
        if (!this.isJavascriptTarget) {
            return;
        }
        let filesInProviders = [];
        const providersFolder = path.resolve(this.codeMakerOutdir, "providers");
        try {
            filesInProviders = await fs.readdir(providersFolder);
        }
        catch (e) {
            commons_2.logger.debug(`Error listing files in providers folder '${providersFolder}': ${e}`);
        }
        const folders = filesInProviders.filter((file) => fs
            .statSync(path.resolve(this.codeMakerOutdir, "providers", file))
            .isDirectory());
        return folders.forEach((folder) => {
            const shouldExist = constraintsThatShouldExist.some((constraint) => constraint.name === folder);
            if (!shouldExist) {
                commons_2.logger.debug(`Removing folder ${folder} from providers`);
                fs.removeSync(path.resolve(this.codeMakerOutdir, "providers", folder));
            }
        });
    }
    // emits a constraints.json file with a map of the used provider fqpns and version constraints
    // this is used for caching purposes
    emitConstraintsFile(allowedConstraints) {
        const filePath = "constraints.json";
        const content = {
            cdktf: commons_3.DISPLAY_VERSION,
            providers: allowedConstraints
                .sort((a, b) => a.fqn.localeCompare(b.fqn))
                .reduce((carry, item) => ({
                ...carry,
                [item.fqn]: item.version,
            }), {}),
        };
        this.code.openFile(filePath);
        this.code.line(JSON.stringify(content, null, 2));
        this.code.closeFile(filePath);
        return filePath;
    }
    async generateJsiiLanguage(target) {
        var _a;
        // these are the module dependencies we compile against
        const deps = ["@types/node", "constructs", "cdktf"];
        const opts = {
            entrypoint: target.fileName,
            deps: deps.map((dep) => path.dirname(require.resolve(`${dep}/package.json`))),
            moduleKey: target.moduleKey,
            exports: target.isProvider // Modules are small enough that we don't need this optimization
                ? {
                    ".": {
                        import: `./providers/${target.name}/index.js`,
                        require: `./providers/${target.name}/lazy-index.js`,
                    },
                }
                : undefined,
        };
        // used for testing.
        if (this.options.outputJsii) {
            opts.jsii = { path: this.options.outputJsii };
        }
        if (this.isPythonTarget) {
            opts.python = {
                outdir: this.codeMakerOutdir,
                moduleName: target.srcMakName,
            };
        }
        if (this.isJavaTarget) {
            if (this.options.codeMakerOutput.includes("/") ||
                this.options.codeMakerOutput.includes("\\")) {
                throw commons_2.Errors.Usage(`When using Java the "codeMakerOutput" option in the cdktf.json must be the organization identifier for your project (e.g. com.my-company), not a path. The generated Java code will be placed in a subdirectory of the given directory. If you are migrating from a < 0.19 version of cdktf you want to change the codemakerOutput to "imports".`);
            }
            opts.java = {
                outdir: ".",
                package: `${this.options.codeMakerOutput}.${target.srcMakName}`,
            };
        }
        if (this.isCsharpTarget) {
            opts.csharp = {
                outdir: this.codeMakerOutdir,
                namespace: target.srcMakName,
            };
        }
        if (this.isGoTarget) {
            // TODO: check if needed for modules somehow
            // const targetType = target.isProvider ? 'provider' : 'module';
            // jsii-srcmac will produce a folder inside this dir named after "packageName"
            // so this results in e.g. .gen/hashicorp/random
            const outdir = path.join(this.codeMakerOutdir, (_a = target.namespace) !== null && _a !== void 0 ? _a : "");
            opts.golang = {
                outdir,
                moduleName: await (0, exports.determineGoModuleName)(outdir),
                packageName: target.srcMakName, // package will be named e.g. random for hashicorp/random
            };
        }
        if (process.env.NODE_OPTIONS &&
            !process.env.NODE_OPTIONS.includes(`--max-old-space-size`)) {
            commons_2.logger.warn(`found NODE_OPTIONS environment variable without a setting for --max-old-space-size.
The provider generation needs a substantial amount of memory (~13GB) for some providers and languages.
So cdktf-cli sets it to NODE_OPTIONS="--max-old-space-size=16384" by default. As your environment already contains
a NODE_OPTIONS variable, we won't override it. Hence, the provider generation might fail with an out of memory error.`);
        }
        else {
            // increase memory to allow generating large providers (i.e. aws or azurerm for Go)
            // srcmak is going to spawn a childprocess (for jsii-pacmak) which is going to be affected by this env var
            process.env.NODE_OPTIONS = "--max-old-space-size=16384";
        }
        const jsiiTimer = (0, commons_2.logTimespan)("JSII");
        await generateJsiiLanguage(this.code, opts, this.codeMakerOutdir, [
            target.isModule ? "providers/**" : "modules/**",
        ]);
        jsiiTimer();
    }
    async getSchemas(targets) {
        return await (0, provider_schema_1.readSchema)(targets, this.schemaCachePath);
    }
    async generate(allConstraints, constraintsToGenerate = allConstraints) {
        const targets = constraintsToGenerate.map((constraint) => commons_2.ConstructsMakerTarget.from(constraint, this.options.targetLanguage));
        const endSchemaTimer = (0, commons_2.logTimespan)("Gathering schema");
        const schemas = await this.getSchemas(constraintsToGenerate);
        endSchemaTimer();
        const endGenerateTimer = (0, commons_2.logTimespan)("Generate TS");
        await Promise.all(targets.map((target) => this.generateTypescript(target, schemas)));
        endGenerateTimer();
        this.updateVersionsFile(allConstraints);
        this.emitConstraintsFile(allConstraints);
        if (this.isJavascriptTarget) {
            await this.save();
        }
        if (!this.isJavascriptTarget || this.options.outputJsii) {
            const numberOfWorkers = Math.max(1, this.options.jsiiParallelism === -1
                ? targets.length
                : this.options.jsiiParallelism || 1);
            const work = [...targets];
            const workers = new Array(numberOfWorkers).fill(async () => {
                let target;
                while ((target = work.pop())) {
                    const endJsiiTarget = (0, commons_2.logTimespan)(`Generating JSII bindings for ${target.name}`);
                    await this.generateJsiiLanguage(target);
                    endJsiiTarget();
                }
            });
            await Promise.all(workers.map((fn) => fn()));
        }
        for (const target of targets) {
            await this.reportTelemetry({
                trackingPayload: target.trackingPayload,
                targetLanguage: target.targetLanguage,
            });
        }
        if (this.isPythonTarget) {
            const endPythonTimer = (0, commons_2.logTimespan)("Python post-processing");
            // Remove from . import ... statements from root level __init__.py
            // This removes root-level imports of namespaces, but saves 25s synth time for the aws provider alone
            const allInitPyPaths = glob_1.glob
                .sync("**/__init__.py", {
                cwd: this.codeMakerOutdir,
            })
                // sort by depth, so we start with the shallowest files
                .sort((a, b) => a.split("/").length - b.split("/").length);
            const visitedDirectories = [];
            for (const initPyPath of allInitPyPaths) {
                const directoryPath = path.dirname(initPyPath);
                if (visitedDirectories.some((dir) => directoryPath.startsWith(dir))) {
                    // we already processed this directory
                    continue;
                }
                visitedDirectories.push(directoryPath);
                const absoluteInitPyPath = path.join(this.codeMakerOutdir, initPyPath);
                const initPy = await fs.readFile(absoluteInitPyPath, "utf8");
                const initPyWithoutImports = initPy.replace(/from \. import .*\n/g, "");
                await fs.writeFile(absoluteInitPyPath, initPyWithoutImports);
            }
            endPythonTimer();
        }
    }
    async save(outdir = this.codeMakerOutdir) {
        await this.code.save(outdir);
    }
    get isJavascriptTarget() {
        return this.options.targetLanguage === commons_3.Language.TYPESCRIPT;
    }
    get isPythonTarget() {
        return this.options.targetLanguage === commons_3.Language.PYTHON;
    }
    get isJavaTarget() {
        return this.options.targetLanguage === commons_3.Language.JAVA;
    }
    get isCsharpTarget() {
        return this.options.targetLanguage === commons_3.Language.CSHARP;
    }
    get isGoTarget() {
        return this.options.targetLanguage === commons_3.Language.GO;
    }
}
exports.ConstructsMaker = ConstructsMaker;
/**
 * searches for the closest `go.mod` file and returns the nested go module name for `dir`
 * e.g. (/dir/.gen/) => cdk.tf/stack/.gen if the parent dir of .gen has a go.mod for "module cdk.tf/stack"
 *
 * @param dir the directory to start the search from (searches upwards)
 * @returns the package name for `dir`
 * @throws an Error if no go.mod was found
 */
const determineGoModuleName = async (dir) => {
    let previousDir;
    let currentDir = path.resolve(dir);
    do {
        let files = [];
        try {
            files = await fs.readdir(currentDir);
        }
        catch (e) {
            // directory might not exist yet, but we still walk upwards from there, so ignore 'ENOENT'
            if (e.code !== "ENOENT") {
                throw e;
            }
        }
        if (files.includes("go.mod")) {
            const file = path.resolve(currentDir, "go.mod");
            const gomod = await fs.readFile(file);
            const match = /^module\s*(\S*)\s*$/m.exec(gomod.toString());
            if (match && match[1]) {
                const childdir = path.relative(currentDir, dir).replace(/\\/g, "/"); // replace '\' with '/' for windows paths
                return childdir.length > 0 ? `${match[1]}/${childdir}` : match[1];
            }
            throw new Error(`Could not determine the root Go module name. Found ${file} but failed to regex match the module name directive`);
        }
        // go up one directory. As dirname('/') will return '/' we cancel the loop
        // as soon as the dir does not change anymore.
        previousDir = currentDir;
        currentDir = path.dirname(currentDir);
    } while (currentDir !== previousDir);
    throw new Error(`Could not determine the root Go module name. No go.mod found in ${dir} and any parent directories`);
};
exports.determineGoModuleName = determineGoModuleName;
//# sourceMappingURL=data:application/json;base64,