"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StructEmitter = void 0;
const models_1 = require("../models");
const attributes_emitter_1 = require("./attributes-emitter");
const util_1 = require("../../../util");
const path = __importStar(require("path"));
const resource_model_1 = require("../models/resource-model");
const sanitized_comments_1 = require("../sanitized-comments");
class StructEmitter {
    constructor(code) {
        this.code = code;
        this.attributesEmitter = new attributes_emitter_1.AttributesEmitter(this.code);
    }
    emit(resource) {
        if (resource.structsRequireSharding) {
            this.emitNamespacedStructs(resource);
        }
        else {
            this.emitStructs(resource);
        }
    }
    // Due to https://github.com/hashicorp/terraform-plugin-sdk/commit/2387eb85e32c064b4a62718c9f5c80bf00dc7fb9 all
    // resources from providers using the old SDK have the id field by default
    // We have no way to distinguish them through the provider schema, so a word of warning for our users
    warnAboutIdField(att) {
        if (att.name === "id") {
            this.code.line(`*`);
            this.code.line(`* Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2.`);
            this.code.line(`* If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.`);
        }
    }
    emitInterface(resource, struct, name = struct.name) {
        if (resource.isProvider) {
            this.code.openBlock(`export interface ${name}`);
        }
        else {
            this.code.openBlock(`export interface ${name}${struct.extends}`);
        }
        for (const att of struct.assignableAttributes) {
            const comment = (0, sanitized_comments_1.sanitizedComment)(this.code);
            if (att.description) {
                comment.line(att.description);
                comment.line(``);
                comment.line(`Docs at Terraform Registry: {@link ${resource.linkToDocs}#${att.terraformName} ${resource.className}#${att.terraformName}}`);
                this.warnAboutIdField(att);
                comment.end();
            }
            else {
                comment.line(`Docs at Terraform Registry: {@link ${resource.linkToDocs}#${att.terraformName} ${resource.className}#${att.terraformName}}`);
                this.warnAboutIdField(att);
                comment.end();
            }
            this.code.line(`readonly ${att.typeDefinition};`);
        }
        this.code.closeBlock();
        if (!(struct instanceof models_1.ConfigStruct)) {
            this.emitToTerraformFunction(struct);
            this.emitToHclTerraformFunction(struct);
        }
    }
    emitStructs(resource) {
        resource.structs.forEach((struct) => {
            if (struct instanceof models_1.ConfigStruct) {
                this.emitInterface(resource, struct);
            }
            else {
                // We use the interface here for the configuration / inputs of a resource / nested block
                this.emitInterface(resource, struct);
                // And we use the class for the attributes / outputs of a resource / nested block
                if (!struct.isProvider) {
                    this.emitClass(struct);
                }
            }
        });
    }
    emitNamespacedStructs(resource) {
        // iterate over all structs in batches of 400 to avoid too many exports (> 1200)
        const structImports = {};
        // drop configStruct from resource.structs to avoid double import
        const structsWithoutConfigStruct = resource.structs.slice(1);
        const structSplits = [[]];
        const splitCounts = [0];
        structsWithoutConfigStruct.forEach((struct) => {
            if (splitCounts[splitCounts.length - 1] + struct.exportCount <=
                resource_model_1.STRUCT_SHARDING_THRESHOLD) {
                structSplits[structSplits.length - 1].push(struct);
                splitCounts[splitCounts.length - 1] += struct.exportCount;
            }
            else {
                structSplits.push([struct]);
                splitCounts.push(struct.exportCount);
            }
        });
        // fill the struct imports mapping before code generation so that imports can
        // point to not yet generated struct files
        for (let i = 0; i < structSplits.length; i++) {
            const structFilename = `structs${i * resource_model_1.STRUCT_SHARDING_THRESHOLD}.ts`;
            const structs = structSplits[i];
            // associate current structs batch with the file it will be written to
            // to find it in subsequent files for importing
            structs.forEach((struct) => (structImports[struct.name] = structFilename));
        }
        const structPaths = [];
        for (let i = 0; i < structSplits.length; i++) {
            const structsToImport = {};
            const structs = structSplits[i];
            const structFilename = `structs${i * resource_model_1.STRUCT_SHARDING_THRESHOLD}.ts`;
            structPaths.push(structFilename);
            // find all structs that need to be imported in this file
            structs.forEach((struct) => {
                struct.attributes.forEach((att) => {
                    var _a, _b;
                    const structTypeName = (_a = att.type.struct) === null || _a === void 0 ? void 0 : _a.name;
                    const fileToImport = structImports[structTypeName !== null && structTypeName !== void 0 ? structTypeName : ""];
                    if (fileToImport && fileToImport !== structFilename) {
                        const attTypeStruct = att.type.struct;
                        if (!attTypeStruct)
                            throw new Error(`${structTypeName} is not a struct`);
                        (_b = structsToImport[fileToImport]) !== null && _b !== void 0 ? _b : (structsToImport[fileToImport] = []);
                        const attReferences = att.getReferencedTypes(struct instanceof models_1.ConfigStruct);
                        if (attReferences) {
                            structsToImport[fileToImport].push(...attReferences);
                        }
                    }
                });
            });
            const namespacedFilePath = path.join(resource.structsFolderPath, structFilename);
            this.code.openFile(namespacedFilePath);
            // the structs only makes use of cdktf not constructs
            this.code.line(`import * as cdktf from 'cdktf';`);
            Object.entries(structsToImport).forEach(([fileToImport, structs]) => {
                this.code.line(`import { ${[...new Set(structs)].join(",\n")} } from './${path.basename(fileToImport, ".ts")}'`);
            });
            structs.forEach((struct) => {
                if (struct instanceof models_1.ConfigStruct) {
                    this.emitInterface(resource, struct);
                }
                else {
                    // We use the interface here for the configuration / inputs of a resource / nested block
                    this.emitInterface(resource, struct);
                    // And we use the class for the attributes / outputs of a resource / nested block
                    if (!struct.isProvider) {
                        this.emitClass(struct);
                    }
                }
            });
            this.code.closeFile(namespacedFilePath);
        }
        // emit the index file that exports all the struct files we've just generated
        const indexFilePath = path.join(resource.structsFolderPath, "index.ts");
        this.code.openFile(indexFilePath);
        structPaths.forEach((structPath) => {
            this.code.line(`export * from './${path.basename(structPath, ".ts")}'`);
        });
        this.code.closeFile(indexFilePath);
    }
    emitClass(struct) {
        this.code.openBlock(`export class ${struct.outputReferenceName} extends cdktf.ComplexObject`);
        this.code.line("private isEmptyObject = false;");
        if (!struct.isClass) {
            this.code.line("private resolvableValue?: cdktf.IResolvable;");
        }
        this.code.line();
        const comment = (0, sanitized_comments_1.sanitizedComment)(this.code);
        comment.line(`@param terraformResource The parent resource`);
        comment.line(`@param terraformAttribute The attribute on the parent resource this class is referencing`);
        if (struct.isSingleItem) {
            comment.end();
            this.code.openBlock(`public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string)`);
            this.code.line(`super(terraformResource, terraformAttribute, false, 0);`);
            this.code.closeBlock();
        }
        else if (struct.nestingMode === "single" ||
            struct.nestingMode === "object") {
            comment.end();
            this.code.openBlock(`public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string)`);
            this.code.line(`super(terraformResource, terraformAttribute, false);`);
            this.code.closeBlock();
        }
        else if (struct.nestingMode.startsWith("map")) {
            this.code.line(`* @param complexObjectKey the key of this item in the map`);
            comment.end();
            this.code.openBlock(`public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectKey: string)`);
            this.code.line(`super(terraformResource, terraformAttribute, false, complexObjectKey);`);
            this.code.closeBlock();
        }
        else {
            comment.line(`@param complexObjectIndex the index of this item in the list`);
            comment.line(`@param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)`);
            comment.end();
            this.code.openBlock(`public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean)`);
            this.code.line(`super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);`);
            this.code.closeBlock();
        }
        this.code.line();
        this.emitInternalValueGetter(struct);
        this.code.line();
        this.emitInternalValueSetter(struct);
        for (const att of struct.attributes) {
            this.attributesEmitter.emit(att, this.attributesEmitter.needsResetEscape(att, struct.attributes), this.attributesEmitter.needsInputEscape(att, struct.attributes));
        }
        this.code.closeBlock();
        if (!struct.isSingleItem &&
            (struct.nestingMode === "list" || struct.nestingMode === "set")) {
            this.emitComplexListClass(struct);
        }
        else if (struct.nestingMode === "map") {
            this.emitComplexMapClass(struct);
        }
        else if (struct.nestingMode === "maplist") {
            this.emitComplexMapListClasses(struct);
        }
        else if (struct.nestingMode === "mapset") {
            this.emitComplexMapListClasses(struct);
        }
        else if (struct.nestingMode === "listmap") {
            this.emitComplexListMapClasses(struct, false);
        }
        else if (struct.nestingMode === "setmap") {
            this.emitComplexListMapClasses(struct, true);
        }
        else if (struct.nestingMode === "listlist" ||
            struct.nestingMode === "listset" ||
            struct.nestingMode === "setlist" ||
            struct.nestingMode === "setset") {
            this.emitComplexListListClasses(struct);
        }
        // other types of nested collections aren't supported
    }
    emitComplexListClass(struct) {
        this.code.line();
        this.code.openBlock(`export class ${struct.listName} extends cdktf.ComplexList`);
        if (struct.assignable) {
            this.code.line(`public internalValue? : ${struct.name}[] | cdktf.IResolvable`);
        }
        this.code.line();
        const constructorComment = (0, sanitized_comments_1.sanitizedComment)(this.code);
        constructorComment.line(`@param terraformResource The parent resource`);
        constructorComment.line(`@param terraformAttribute The attribute on the parent resource this class is referencing`);
        constructorComment.line(`@param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)`);
        constructorComment.end();
        this.code.openBlock(`constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean)`);
        this.code.line(`super(terraformResource, terraformAttribute, wrapsSet)`);
        this.code.closeBlock();
        this.code.line();
        const getterComment = (0, sanitized_comments_1.sanitizedComment)(this.code);
        getterComment.line(`@param index the index of the item to return`);
        getterComment.end();
        this.code.openBlock(`public get(index: number): ${struct.outputReferenceName}`);
        this.code.line(`return new ${struct.outputReferenceName}(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);`);
        this.code.closeBlock();
        this.code.closeBlock();
    }
    emitComplexMapClass(struct) {
        this.code.line();
        this.code.openBlock(`export class ${struct.mapName} extends cdktf.ComplexMap`);
        if (struct.assignable) {
            this.code.line(`public internalValue? : { [key: string]: ${struct.name} } | cdktf.IResolvable`);
        }
        this.code.line();
        const constructorComment = (0, sanitized_comments_1.sanitizedComment)(this.code);
        constructorComment.line(`@param terraformResource The parent resource`);
        constructorComment.line(`@param terraformAttribute The attribute on the parent resource this class is referencing`);
        constructorComment.end();
        this.code.openBlock(`constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string)`);
        this.code.line(`super(terraformResource, terraformAttribute)`);
        this.code.closeBlock();
        this.code.line();
        const getterComment = (0, sanitized_comments_1.sanitizedComment)(this.code);
        getterComment.line(`@param key the key of the item to return`);
        getterComment.end();
        this.code.openBlock(`public get(key: string): ${struct.outputReferenceName}`);
        this.code.line(`return new ${struct.outputReferenceName}(this.terraformResource, this.terraformAttribute, key);`);
        this.code.closeBlock();
        this.code.closeBlock();
    }
    emitComplexMapListClasses(struct) {
        this.emitComplexMapListClass(struct);
        this.emitComplexMapClass(struct);
    }
    emitComplexMapListClass(struct) {
        this.code.line();
        this.code.openBlock(`export class ${struct.mapListName} extends cdktf.MapList`);
        if (struct.assignable) {
            this.code.line(`public internalValue? : ${struct.mapName}[] | cdktf.IResolvable`);
        }
        this.code.line();
        const constructorComment = (0, sanitized_comments_1.sanitizedComment)(this.code);
        constructorComment.line(`@param terraformResource The parent resource`);
        constructorComment.line(`@param terraformAttribute The attribute on the parent resource this class is referencing`);
        constructorComment.line(`@param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)`);
        constructorComment.end();
        this.code.openBlock(`constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean)`);
        this.code.line(`super(terraformResource, terraformAttribute, wrapsSet)`);
        this.code.closeBlock();
        this.code.line();
        const getterComment = (0, sanitized_comments_1.sanitizedComment)(this.code);
        getterComment.line(`@param index the index of the item to return`);
        getterComment.end();
        this.code.openBlock(`public get(index: number): ${struct.mapName}`);
        this.code.line(`return new ${struct.mapName}(this, \`[\${index}]\`);`);
        this.code.closeBlock();
        this.code.closeBlock();
    }
    emitComplexListMapClasses(struct, isSet) {
        this.emitComplexListMapClass(struct, isSet);
        this.emitComplexListClass(struct);
    }
    emitComplexListMapClass(struct, isSet) {
        this.code.line();
        this.code.openBlock(`export class ${struct.listMapName} extends cdktf.ComplexMap`);
        if (struct.assignable) {
            this.code.line(`public internalValue? : { [key: string]: ${struct.name}[] } | cdktf.IResolvable`);
        }
        this.code.line();
        const constructorComment = (0, sanitized_comments_1.sanitizedComment)(this.code);
        constructorComment.line(`@param terraformResource The parent resource`);
        constructorComment.line(`@param terraformAttribute The attribute on the parent resource this class is referencing`);
        constructorComment.end();
        this.code.openBlock(`constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string)`);
        this.code.line(`super(terraformResource, terraformAttribute)`);
        this.code.closeBlock();
        this.code.line();
        const getterComment = (0, sanitized_comments_1.sanitizedComment)(this.code);
        getterComment.line(`@param key the key of the item to return`);
        getterComment.end();
        this.code.openBlock(`public get(key: string): ${struct.listName}`);
        this.code.line(`return new ${struct.listName}(this, \`[\${key}]\`, ${isSet});`);
        this.code.closeBlock();
        this.code.closeBlock();
    }
    emitComplexListListClasses(struct) {
        this.emitComplexListListClass(struct);
        this.emitComplexListClass(struct);
    }
    emitComplexListListClass(struct) {
        this.code.line();
        this.code.openBlock(`export class ${struct.listListName} extends cdktf.MapList` // despite name, need the same behavior
        );
        if (struct.assignable) {
            this.code.line(`public internalValue? : ${struct.name}[][] | cdktf.IResolvable`);
        }
        this.code.line();
        const constructorComment = (0, sanitized_comments_1.sanitizedComment)(this.code);
        constructorComment.line(`@param terraformResource The parent resource`);
        constructorComment.line(`@param terraformAttribute The attribute on the parent resource this class is referencing`);
        constructorComment.line(`@param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)`);
        constructorComment.end();
        this.code.openBlock(`constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean)`);
        this.code.line(`super(terraformResource, terraformAttribute, wrapsSet)`);
        this.code.closeBlock();
        this.code.line();
        const getterComment = (0, sanitized_comments_1.sanitizedComment)(this.code);
        getterComment.line(`@param index the index of the item to return`);
        getterComment.end();
        this.code.openBlock(`public get(index: number): ${struct.listName}`);
        this.code.line(`return new ${struct.listName}(this, \`[\${index}]\`, ${struct.nestingMode === "setlist" || struct.nestingMode === "setset"});`);
        this.code.closeBlock();
        this.code.closeBlock();
    }
    emitInternalValueGetter(struct) {
        this.code.openBlock(`public get internalValue(): ${struct.name}${!struct.isClass ? " | cdktf.IResolvable" : ""} | undefined`);
        if (!struct.isClass) {
            this.code.openBlock("if (this.resolvableValue)");
            this.code.line("return this.resolvableValue;");
            this.code.closeBlock();
        }
        this.code.line("let hasAnyValues = this.isEmptyObject;");
        this.code.line("const internalValueResult: any = {};");
        for (const att of struct.attributes) {
            if (att.isStored) {
                if (att.getterType._type === "stored_class") {
                    this.code.openBlock(`if (this.${att.storageName}?.internalValue !== undefined)`);
                }
                else {
                    this.code.openBlock(`if (this.${att.storageName} !== undefined)`);
                }
                this.code.line("hasAnyValues = true;");
                if (att.getterType._type === "stored_class") {
                    this.code.line(`internalValueResult.${att.name} = this.${att.storageName}?.internalValue;`);
                }
                else {
                    this.code.line(`internalValueResult.${att.name} = this.${att.storageName};`);
                }
                this.code.closeBlock();
            }
        }
        this.code.line("return hasAnyValues ? internalValueResult : undefined;");
        this.code.closeBlock();
    }
    emitInternalValueSetter(struct) {
        this.code.openBlock(`public set internalValue(value: ${struct.name}${!struct.isClass ? " | cdktf.IResolvable" : ""} | undefined)`);
        this.code.openBlock("if (value === undefined)");
        this.code.line("this.isEmptyObject = false;");
        if (!struct.isClass) {
            this.code.line("this.resolvableValue = undefined;");
        }
        for (const att of struct.attributes) {
            if (att.isStored) {
                if (att.setterType._type === "stored_class") {
                    this.code.line(`this.${att.storageName}.internalValue = undefined;`);
                }
                else if (att.setterType._type !== "none") {
                    this.code.line(`this.${att.storageName} = undefined;`);
                }
            }
        }
        this.code.closeBlock();
        if (!struct.isClass) {
            this.code.openBlock("else if (cdktf.Tokenization.isResolvable(value))");
            this.code.line("this.isEmptyObject = false;");
            this.code.line("this.resolvableValue = value;");
            this.code.closeBlock();
        }
        this.code.openBlock("else");
        this.code.line("this.isEmptyObject = Object.keys(value).length === 0;");
        if (!struct.isClass) {
            this.code.line("this.resolvableValue = undefined;");
        }
        for (const att of struct.attributes) {
            if (att.isStored) {
                if (att.setterType._type === "stored_class") {
                    this.code.line(`this.${att.storageName}.internalValue = value.${att.name};`);
                }
                else if (att.setterType._type !== "none") {
                    this.code.line(`this.${att.storageName} = value.${att.name};`);
                }
            }
        }
        this.code.closeBlock();
        this.code.closeBlock();
    }
    emitToHclTerraformFunction(struct) {
        this.code.line();
        this.code.openBlock(`export function ${(0, util_1.downcaseFirst)(struct.name)}ToHclTerraform(struct?: ${struct.isSingleItem && !struct.isProvider
            ? `${struct.name}OutputReference | `
            : ""}${struct.name}${!struct.isClass ? " | cdktf.IResolvable" : ""}): any`);
        this.code.line(`if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }`);
        this.code.openBlock(`if (cdktf.isComplexElement(struct))`);
        this.code.line(`throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");`);
        this.code.closeBlock();
        this.code.open(`const attrs = {`);
        for (const att of struct.assignableAttributes) {
            this.attributesEmitter.emitToHclTerraform(att, true);
        }
        this.code.close(`};`);
        if (struct.assignableAttributes.length > 0) {
            this.code.line();
            this.code.line(`// remove undefined attributes`);
            this.code.line(`return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));`);
        }
        else {
            this.code.line(`return attrs;`);
        }
        this.code.closeBlock();
        this.code.line();
    }
    emitToTerraformFunction(struct) {
        this.code.line();
        this.code.openBlock(`export function ${(0, util_1.downcaseFirst)(struct.name)}ToTerraform(struct?: ${struct.isSingleItem && !struct.isProvider
            ? `${struct.name}OutputReference | `
            : ""}${struct.name}${!struct.isClass ? " | cdktf.IResolvable" : ""}): any`);
        this.code.line(`if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }`);
        this.code.openBlock(`if (cdktf.isComplexElement(struct))`);
        this.code.line(`throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");`);
        this.code.closeBlock();
        this.code.openBlock("return");
        for (const att of struct.assignableAttributes) {
            this.attributesEmitter.emitToTerraform(att, true);
        }
        this.code.closeBlock(";");
        this.code.closeBlock();
        this.code.line();
    }
}
exports.StructEmitter = StructEmitter;
//# sourceMappingURL=data:application/json;base64,