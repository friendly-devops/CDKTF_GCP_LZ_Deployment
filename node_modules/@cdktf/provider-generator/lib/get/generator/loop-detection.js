"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.detectAttributeLoops = void 0;
const equalAttributeIdentifiers = (x, y) => x[0] === y[0] &&
    x[1].size === y[1].size &&
    [...x[1]].every((x) => y[1].has(x));
function typeStructure(model) {
    var _a;
    if (!model.type.isComplex) {
        return model.type.storedClassType;
    }
    return `<complex:{${(_a = model.type.struct) === null || _a === void 0 ? void 0 : _a.attributes.map((att) => att.name).sort()}}${model.type.typeModelType}>`;
}
function getAttributeIdentifier(model) {
    return [
        model.terraformName,
        new Set(model.type.struct.attributes.map((a) => `${a.name}:${typeStructure(a)}`)),
    ];
}
/**
 * Detects recursive attribute schemas and returns an Object
 * describing what property should be linking to which class
 */
function detectAttributeLoops(attributes) {
    // We aproximate a class as a set of attributes names
    // This is not a perfect approximation, but it's good enough for our purposes
    const redirects = {};
    function depthFirstSearch(attribute, path = [], knownStructs = {}) {
        const name = attribute.terraformName;
        const struct = attribute.type.struct;
        if (!struct) {
            return;
        }
        const structIdentifier = getAttributeIdentifier(attribute);
        // Detect if we visited this already
        const visited = Object.entries(knownStructs).find(([, attrIdentifier]) => equalAttributeIdentifiers(structIdentifier, attrIdentifier));
        if (visited) {
            // We have a loop, we don't need to search deeper
            const toBeReplacedWith = visited[0];
            const toReplace = [...path, name].join(".");
            redirects[toReplace] = toBeReplacedWith;
        }
        else {
            // Search deeper
            struct.attributes.forEach((a) => depthFirstSearch(a, [...path, name], {
                ...knownStructs,
                // We haven't visited this yet, add it to the list of known structs
                [[...path, name].join(".")]: structIdentifier,
            }));
        }
    }
    attributes.forEach((attr) => depthFirstSearch(attr));
    return redirects;
}
exports.detectAttributeLoops = detectAttributeLoops;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9vcC1kZXRlY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJsb29wLWRldGVjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFLQSxNQUFNLHlCQUF5QixHQUFHLENBQ2hDLENBQXNCLEVBQ3RCLENBQXNCLEVBQ3RCLEVBQUUsQ0FDRixDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNiLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUk7SUFDdkIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRXRDLFNBQVMsYUFBYSxDQUFDLEtBQXFCOztJQUMxQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7UUFDekIsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQztLQUNuQztJQUVELE9BQU8sYUFBYSxNQUFBLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSwwQ0FBRSxVQUFVLENBQzlDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksRUFDckIsSUFBSSxFQUFFLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxhQUFhLEdBQUcsQ0FBQztBQUMzQyxDQUFDO0FBRUQsU0FBUyxzQkFBc0IsQ0FBQyxLQUFxQjtJQUNuRCxPQUFPO1FBQ0wsS0FBSyxDQUFDLGFBQWE7UUFDbkIsSUFBSSxHQUFHLENBQ0wsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFPLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLGFBQWEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQzFFO0tBQ0YsQ0FBQztBQUNKLENBQUM7QUFFRDs7O0dBR0c7QUFDSCxTQUFnQixvQkFBb0IsQ0FBQyxVQUE0QjtJQUcvRCxxREFBcUQ7SUFDckQsNkVBQTZFO0lBQzdFLE1BQU0sU0FBUyxHQUEyQixFQUFFLENBQUM7SUFFN0MsU0FBUyxnQkFBZ0IsQ0FDdkIsU0FBeUIsRUFDekIsT0FBaUIsRUFBRSxFQUNuQixlQUFpRSxFQUFFO1FBRW5FLE1BQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQyxhQUFhLENBQUM7UUFDckMsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDckMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNYLE9BQU87U0FDUjtRQUVELE1BQU0sZ0JBQWdCLEdBQUcsc0JBQXNCLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDM0Qsb0NBQW9DO1FBQ3BDLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLGNBQWMsQ0FBQyxFQUFFLEVBQUUsQ0FDdkUseUJBQXlCLENBQUMsZ0JBQWdCLEVBQUUsY0FBYyxDQUFDLENBQzVELENBQUM7UUFFRixJQUFJLE9BQU8sRUFBRTtZQUNYLGlEQUFpRDtZQUNqRCxNQUFNLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNwQyxNQUFNLFNBQVMsR0FBRyxDQUFDLEdBQUcsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUM1QyxTQUFTLENBQUMsU0FBUyxDQUFDLEdBQUcsZ0JBQWdCLENBQUM7U0FDekM7YUFBTTtZQUNMLGdCQUFnQjtZQUNoQixNQUFNLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQzlCLGdCQUFnQixDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFO2dCQUNuQyxHQUFHLFlBQVk7Z0JBQ2YsbUVBQW1FO2dCQUNuRSxDQUFDLENBQUMsR0FBRyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsZ0JBQWdCO2FBQzlDLENBQUMsQ0FDSCxDQUFDO1NBQ0g7SUFDSCxDQUFDO0lBRUQsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUVyRCxPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDO0FBNUNELG9EQTRDQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgSGFzaGlDb3JwLCBJbmNcbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNUEwtMi4wXG5pbXBvcnQgeyBBdHRyaWJ1dGVNb2RlbCB9IGZyb20gXCIuL21vZGVscy9hdHRyaWJ1dGUtbW9kZWxcIjtcblxudHlwZSBBdHRyaWJ1dGVJZGVudGlmaWVyID0gW3N0cmluZywgU2V0PHN0cmluZz5dO1xuY29uc3QgZXF1YWxBdHRyaWJ1dGVJZGVudGlmaWVycyA9IChcbiAgeDogQXR0cmlidXRlSWRlbnRpZmllcixcbiAgeTogQXR0cmlidXRlSWRlbnRpZmllclxuKSA9PlxuICB4WzBdID09PSB5WzBdICYmXG4gIHhbMV0uc2l6ZSA9PT0geVsxXS5zaXplICYmXG4gIFsuLi54WzFdXS5ldmVyeSgoeCkgPT4geVsxXS5oYXMoeCkpO1xuXG5mdW5jdGlvbiB0eXBlU3RydWN0dXJlKG1vZGVsOiBBdHRyaWJ1dGVNb2RlbCkge1xuICBpZiAoIW1vZGVsLnR5cGUuaXNDb21wbGV4KSB7XG4gICAgcmV0dXJuIG1vZGVsLnR5cGUuc3RvcmVkQ2xhc3NUeXBlO1xuICB9XG5cbiAgcmV0dXJuIGA8Y29tcGxleDp7JHttb2RlbC50eXBlLnN0cnVjdD8uYXR0cmlidXRlc1xuICAgIC5tYXAoKGF0dCkgPT4gYXR0Lm5hbWUpXG4gICAgLnNvcnQoKX19JHttb2RlbC50eXBlLnR5cGVNb2RlbFR5cGV9PmA7XG59XG5cbmZ1bmN0aW9uIGdldEF0dHJpYnV0ZUlkZW50aWZpZXIobW9kZWw6IEF0dHJpYnV0ZU1vZGVsKTogQXR0cmlidXRlSWRlbnRpZmllciB7XG4gIHJldHVybiBbXG4gICAgbW9kZWwudGVycmFmb3JtTmFtZSxcbiAgICBuZXcgU2V0KFxuICAgICAgbW9kZWwudHlwZS5zdHJ1Y3QhLmF0dHJpYnV0ZXMubWFwKChhKSA9PiBgJHthLm5hbWV9OiR7dHlwZVN0cnVjdHVyZShhKX1gKVxuICAgICksXG4gIF07XG59XG5cbi8qKlxuICogRGV0ZWN0cyByZWN1cnNpdmUgYXR0cmlidXRlIHNjaGVtYXMgYW5kIHJldHVybnMgYW4gT2JqZWN0XG4gKiBkZXNjcmliaW5nIHdoYXQgcHJvcGVydHkgc2hvdWxkIGJlIGxpbmtpbmcgdG8gd2hpY2ggY2xhc3NcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRldGVjdEF0dHJpYnV0ZUxvb3BzKGF0dHJpYnV0ZXM6IEF0dHJpYnV0ZU1vZGVsW10pOiB7XG4gIFtsb29wRW50cnlwb2ludDogc3RyaW5nXTogc3RyaW5nOyAvLyBhdHRyaWJ1dGUgcGF0aCB0byBiZSByZXBsYWNlZCAtPiBhdHRyaWJ1dGUgcGF0aCBvZiB0aGUgdHlwZSB0byByZXBsYWNlIHdpdGhcbn0ge1xuICAvLyBXZSBhcHJveGltYXRlIGEgY2xhc3MgYXMgYSBzZXQgb2YgYXR0cmlidXRlcyBuYW1lc1xuICAvLyBUaGlzIGlzIG5vdCBhIHBlcmZlY3QgYXBwcm94aW1hdGlvbiwgYnV0IGl0J3MgZ29vZCBlbm91Z2ggZm9yIG91ciBwdXJwb3Nlc1xuICBjb25zdCByZWRpcmVjdHM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7fTtcblxuICBmdW5jdGlvbiBkZXB0aEZpcnN0U2VhcmNoKFxuICAgIGF0dHJpYnV0ZTogQXR0cmlidXRlTW9kZWwsXG4gICAgcGF0aDogc3RyaW5nW10gPSBbXSxcbiAgICBrbm93blN0cnVjdHM6IHsgW2F0dHJpYnV0ZVBhdGg6IHN0cmluZ106IEF0dHJpYnV0ZUlkZW50aWZpZXIgfSA9IHt9XG4gICkge1xuICAgIGNvbnN0IG5hbWUgPSBhdHRyaWJ1dGUudGVycmFmb3JtTmFtZTtcbiAgICBjb25zdCBzdHJ1Y3QgPSBhdHRyaWJ1dGUudHlwZS5zdHJ1Y3Q7XG4gICAgaWYgKCFzdHJ1Y3QpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBzdHJ1Y3RJZGVudGlmaWVyID0gZ2V0QXR0cmlidXRlSWRlbnRpZmllcihhdHRyaWJ1dGUpO1xuICAgIC8vIERldGVjdCBpZiB3ZSB2aXNpdGVkIHRoaXMgYWxyZWFkeVxuICAgIGNvbnN0IHZpc2l0ZWQgPSBPYmplY3QuZW50cmllcyhrbm93blN0cnVjdHMpLmZpbmQoKFssIGF0dHJJZGVudGlmaWVyXSkgPT5cbiAgICAgIGVxdWFsQXR0cmlidXRlSWRlbnRpZmllcnMoc3RydWN0SWRlbnRpZmllciwgYXR0cklkZW50aWZpZXIpXG4gICAgKTtcblxuICAgIGlmICh2aXNpdGVkKSB7XG4gICAgICAvLyBXZSBoYXZlIGEgbG9vcCwgd2UgZG9uJ3QgbmVlZCB0byBzZWFyY2ggZGVlcGVyXG4gICAgICBjb25zdCB0b0JlUmVwbGFjZWRXaXRoID0gdmlzaXRlZFswXTtcbiAgICAgIGNvbnN0IHRvUmVwbGFjZSA9IFsuLi5wYXRoLCBuYW1lXS5qb2luKFwiLlwiKTtcbiAgICAgIHJlZGlyZWN0c1t0b1JlcGxhY2VdID0gdG9CZVJlcGxhY2VkV2l0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU2VhcmNoIGRlZXBlclxuICAgICAgc3RydWN0LmF0dHJpYnV0ZXMuZm9yRWFjaCgoYSkgPT5cbiAgICAgICAgZGVwdGhGaXJzdFNlYXJjaChhLCBbLi4ucGF0aCwgbmFtZV0sIHtcbiAgICAgICAgICAuLi5rbm93blN0cnVjdHMsXG4gICAgICAgICAgLy8gV2UgaGF2ZW4ndCB2aXNpdGVkIHRoaXMgeWV0LCBhZGQgaXQgdG8gdGhlIGxpc3Qgb2Yga25vd24gc3RydWN0c1xuICAgICAgICAgIFtbLi4ucGF0aCwgbmFtZV0uam9pbihcIi5cIildOiBzdHJ1Y3RJZGVudGlmaWVyLFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBhdHRyaWJ1dGVzLmZvckVhY2goKGF0dHIpID0+IGRlcHRoRmlyc3RTZWFyY2goYXR0cikpO1xuXG4gIHJldHVybiByZWRpcmVjdHM7XG59XG4iXX0=