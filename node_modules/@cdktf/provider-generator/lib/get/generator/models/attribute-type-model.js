"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MapAttributeTypeModel = exports.SetAttributeTypeModel = exports.ListAttributeTypeModel = exports.StructAttributeTypeModel = exports.SimpleAttributeTypeModel = exports.SkippedAttributeTypeModel = void 0;
const util_1 = require("../../../util");
class SkippedAttributeTypeModel {
    constructor() { }
    get typeModelType() {
        return "simple";
    }
    get struct() {
        return undefined;
    }
    get isComplex() {
        return false;
    }
    getStoredClassInitializer(_name) {
        // not used
        return "";
    }
    get storedClassType() {
        return "any";
    }
    get inputTypeDefinition() {
        return "any";
    }
    getAttributeAccessFunction(name) {
        return `this.interpolationForAttribute('${name}')`;
    }
    get toTerraformFunction() {
        return `cdktf.anyToTerraform`;
    }
    get toHclTerraformFunction() {
        return `cdktf.anyToHclTerraform`;
    }
    get hasReferenceClass() {
        return false;
    }
    get isTokenizable() {
        return false;
    }
}
exports.SkippedAttributeTypeModel = SkippedAttributeTypeModel;
class SimpleAttributeTypeModel {
    constructor(type) {
        this.type = type;
    }
    get typeModelType() {
        return "simple";
    }
    get struct() {
        return undefined;
    }
    get isComplex() {
        return false;
    }
    getStoredClassInitializer(_name) {
        // not used
        return "";
    }
    get storedClassType() {
        return this.type;
    }
    get inputTypeDefinition() {
        if (this.type === "boolean") {
            return "boolean | cdktf.IResolvable";
        }
        else {
            return this.type;
        }
    }
    getAttributeAccessFunction(name) {
        return `this.get${(0, util_1.uppercaseFirst)(this.type)}Attribute('${name}')`;
    }
    get toTerraformFunction() {
        return `cdktf.${this.type}ToTerraform`;
    }
    get toHclTerraformFunction() {
        return `cdktf.${this.type}ToHclTerraform`;
    }
    get hasReferenceClass() {
        return false;
    }
    get isTokenizable() {
        return true;
    }
}
exports.SimpleAttributeTypeModel = SimpleAttributeTypeModel;
class StructAttributeTypeModel {
    constructor(struct) {
        this.struct = struct;
    }
    get typeModelType() {
        return "struct";
    }
    get isComplex() {
        return true;
    }
    getStoredClassInitializer(name) {
        return `new ${this.struct.outputReferenceName}(this, "${name}")`;
    }
    get storedClassType() {
        return this.struct.name;
    }
    get inputTypeDefinition() {
        return this.struct.name;
    }
    getAttributeAccessFunction(name) {
        // This shouln't actually be called
        return `this.interpolationForAttribute('${name}')`;
    }
    get toTerraformFunction() {
        return `${(0, util_1.downcaseFirst)(this.struct.name)}ToTerraform`;
    }
    get toHclTerraformFunction() {
        return `${(0, util_1.downcaseFirst)(this.struct.name)}ToHclTerraform`;
    }
    get hasReferenceClass() {
        return true;
    }
    get isTokenizable() {
        return false;
    }
}
exports.StructAttributeTypeModel = StructAttributeTypeModel;
class ListAttributeTypeModel {
    constructor(elementType, isSingleItem, isBlock) {
        this.elementType = elementType;
        this.isSingleItem = isSingleItem;
        this.isBlock = isBlock;
        if (this.struct) {
            this.struct.isSingleItem = this.isSingleItem || false;
        }
    }
    get typeModelType() {
        return "list";
    }
    get struct() {
        return this.elementType.struct;
    }
    get isComplex() {
        return this.elementType.isComplex;
    }
    getStoredClassInitializer(name) {
        if (this.isSingleItem) {
            return `new ${this.elementType.storedClassType}OutputReference(this, "${name}")`;
        }
        else {
            if (this.isComplex) {
                return `new ${this.storedClassType}(this, "${name}", false)`;
            }
            else {
                return `new cdktf.${(0, util_1.uppercaseFirst)(this.storedClassType)}(this, "${name}", false)`;
            }
        }
    }
    get storedClassType() {
        return `${this.elementType.storedClassType}List`;
    }
    get inputTypeDefinition() {
        if (this.isSingleItem) {
            return this.elementType.inputTypeDefinition;
        }
        else if (this.elementType.storedClassType === "boolean") {
            return "Array<boolean | cdktf.IResolvable> | cdktf.IResolvable";
        }
        else if (this.isComplex) {
            return `${this.elementType.storedClassType}[] | cdktf.IResolvable`;
        }
        else if (this.elementType.typeModelType !== "simple") {
            return `${this.elementType.inputTypeDefinition}[] | cdktf.IResolvable`;
        }
        else {
            return `${this.elementType.inputTypeDefinition}[]`;
        }
    }
    getAttributeAccessFunction(name) {
        switch (this.elementType.storedClassType) {
            case "string":
                return `this.getListAttribute('${name}')`;
            case "number":
                return `this.getNumberListAttribute('${name}')`;
        }
        return `this.interpolationForAttribute('${name}')`;
    }
    get toTerraformFunction() {
        if (this.isSingleItem) {
            return this.elementType.toTerraformFunction;
        }
        return `cdktf.listMapper(${this.elementType.toTerraformFunction}, ${this.isBlock})`;
    }
    get toHclTerraformFunction() {
        if (this.isSingleItem) {
            return this.elementType.toHclTerraformFunction;
        }
        return `cdktf.listMapperHcl(${this.elementType.toHclTerraformFunction}, ${this.isBlock})`;
    }
    get hasReferenceClass() {
        return this.isSingleItem || this.isComplex;
    }
    get isTokenizable() {
        switch (this.elementType.storedClassType) {
            case "string":
                return true;
            case "number":
                return true;
            default:
                return false;
        }
    }
}
exports.ListAttributeTypeModel = ListAttributeTypeModel;
class SetAttributeTypeModel {
    constructor(elementType, isSingleItem, isBlock) {
        this.elementType = elementType;
        this.isSingleItem = isSingleItem;
        this.isBlock = isBlock;
        if (this.struct) {
            this.struct.isSingleItem = this.isSingleItem || false;
        }
    }
    get typeModelType() {
        return "set";
    }
    get struct() {
        return this.elementType.struct;
    }
    get isComplex() {
        return this.elementType.isComplex;
    }
    getStoredClassInitializer(name) {
        if (this.isSingleItem) {
            return `new ${this.elementType.storedClassType}OutputReference(this, "${name}")`;
        }
        else {
            if (this.isComplex) {
                return `new ${this.storedClassType}(this, "${name}", true)`;
            }
            else {
                return `new cdktf.${(0, util_1.uppercaseFirst)(this.storedClassType)}(this, "${name}", true)`;
            }
        }
    }
    get storedClassType() {
        return `${this.elementType.storedClassType}List`;
    }
    get inputTypeDefinition() {
        if (this.isSingleItem) {
            return this.elementType.inputTypeDefinition;
        }
        else if (this.elementType.storedClassType === "boolean") {
            return "Array<boolean | cdktf.IResolvable> | cdktf.IResolvable";
        }
        else if (this.isComplex) {
            return `${this.elementType.storedClassType}[] | cdktf.IResolvable`;
        }
        else if (this.elementType.typeModelType !== "simple") {
            return `${this.elementType.inputTypeDefinition}[] | cdktf.IResolvable`;
        }
        else {
            return `${this.elementType.inputTypeDefinition}[]`;
        }
    }
    getAttributeAccessFunction(name) {
        switch (this.elementType.storedClassType) {
            case "string":
                return `cdktf.Fn.tolist(this.getListAttribute('${name}'))`;
            case "number":
                return `cdktf.Token.asNumberList(cdktf.Fn.tolist(this.getNumberListAttribute('${name}')))`;
        }
        // Token.asAny is required because tolist returns an Array encoded token which the listMapper
        // would try to map over when this is passed to another resource. With Token.asAny() it is left
        // as is by the listMapper and is later properly resolved to a reference
        // (this only works in TypeScript currently, same as for referencing lists
        // [see "interpolationForAttribute(...)" further below])
        return `cdktf.Token.asAny(cdktf.Fn.tolist(this.interpolationForAttribute('${name}')))`;
    }
    get toTerraformFunction() {
        if (this.isSingleItem) {
            return this.elementType.toTerraformFunction;
        }
        else {
            return `cdktf.listMapper(${this.elementType.toTerraformFunction}, ${this.isBlock})`;
        }
    }
    get toHclTerraformFunction() {
        if (this.isSingleItem) {
            return this.elementType.toHclTerraformFunction;
        }
        return `cdktf.listMapperHcl(${this.elementType.toHclTerraformFunction}, ${this.isBlock})`;
    }
    get hasReferenceClass() {
        return this.isSingleItem || this.isComplex;
    }
    get isTokenizable() {
        switch (this.elementType.storedClassType) {
            case "string":
                return true;
            case "number":
                return true;
            default:
                return false;
        }
    }
}
exports.SetAttributeTypeModel = SetAttributeTypeModel;
class MapAttributeTypeModel {
    constructor(elementType) {
        this.elementType = elementType;
    }
    get typeModelType() {
        return "map";
    }
    get struct() {
        return this.elementType.struct;
    }
    get isComplex() {
        return this.elementType.isComplex;
    }
    getStoredClassInitializer(name) {
        if (this.isComplex) {
            return `new ${this.storedClassType}(this, "${name}")`;
        }
        else {
            return `new cdktf.${(0, util_1.uppercaseFirst)(this.storedClassType)}(this, "${name}")`;
        }
    }
    get storedClassType() {
        return `${this.elementType.storedClassType}Map`;
    }
    get inputTypeDefinition() {
        // map of booleans has token support, but booleans don't
        if (this.elementType.storedClassType === "boolean") {
            return `{ [key: string]: (${this.elementType.storedClassType} | cdktf.IResolvable) }`;
        }
        else if (this.isComplex) {
            return `{ [key: string]: ${this.elementType.storedClassType} } | cdktf.IResolvable`;
        }
        else if (this.elementType.typeModelType !== "simple") {
            return `{ [key: string]: ${this.elementType.inputTypeDefinition} } | cdktf.IResolvable`;
        }
        else {
            return `{ [key: string]: ${this.elementType.storedClassType} }`;
        }
    }
    getAttributeAccessFunction(name) {
        if (!this.isComplex && this.elementType.typeModelType !== "simple") {
            return `this.interpolationForAttribute('${name}')`;
        }
        return `this.get${(0, util_1.uppercaseFirst)(this.storedClassType)}Attribute('${name}')`;
    }
    get toTerraformFunction() {
        return `cdktf.hashMapper(${this.elementType.toTerraformFunction})`;
    }
    get toHclTerraformFunction() {
        return `cdktf.hashMapperHcl(${this.elementType.toHclTerraformFunction})`;
    }
    get hasReferenceClass() {
        return this.isComplex;
    }
    get isTokenizable() {
        switch (this.elementType.storedClassType) {
            case "string":
                return true;
            case "number":
                return true;
            case "boolean":
                return true;
            case "any":
                return true;
            default:
                return false;
        }
    }
}
exports.MapAttributeTypeModel = MapAttributeTypeModel;
//# sourceMappingURL=data:application/json;base64,