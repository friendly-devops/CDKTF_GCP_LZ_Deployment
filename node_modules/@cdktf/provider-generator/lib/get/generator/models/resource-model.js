"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResourceModel = exports.STRUCT_SHARDING_THRESHOLD = void 0;
// Copyright (c) HashiCorp, Inc
// SPDX-License-Identifier: MPL-2.0
const codemaker_1 = require("codemaker");
const path_1 = __importDefault(require("path"));
const provider_schema_1 = require("@cdktf/provider-schema");
const struct_1 = require("./struct");
// Limit is 1200 to prevent stack size error.
// Could increase now that calculation is more accurate;
// however, probably better to have smaller
exports.STRUCT_SHARDING_THRESHOLD = 400;
class ResourceModel {
    constructor(options) {
        this.recursiveAttributePaths = {};
        this.className = options.className;
        this.filePath = options.filePath;
        this.terraformType = options.terraformType;
        this.baseName = options.baseName;
        this.attributes = options.attributes;
        this.schema = options.schema;
        this.fqpn = options.fqpn;
        this.provider = (0, provider_schema_1.parseFQPN)(options.fqpn).name;
        this.terraformProviderName = this.provider;
        this.fileName = options.fileName;
        this._structs = options.structs;
        this.terraformSchemaType = options.terraformSchemaType;
        this.configStructName = options.configStructName;
        this.dependencies = [
            `import { Construct } from 'constructs';`,
            `import * as cdktf from 'cdktf';`,
        ];
        this.structsRequireSharding =
            this._structs.reduce((partialSum, s) => partialSum + s.exportCount, 0) >
                exports.STRUCT_SHARDING_THRESHOLD;
    }
    get structs() {
        return [this.configStruct, ...this._structs];
    }
    get configStruct() {
        return new struct_1.ConfigStruct(this.configStructName, this.attributes);
    }
    get synthesizableAttributes() {
        return this.configStruct.assignableAttributes;
    }
    get importStatements() {
        return this.dependencies;
    }
    get schemaAsJson() {
        return this.escapeSchema(JSON.stringify(this.schema, undefined, 2));
    }
    get linkToDocs() {
        const { hostname, namespace, name } = (0, provider_schema_1.parseFQPN)(this.fqpn);
        const version = this.providerVersion || "latest";
        const base = `https://${hostname}/providers/${namespace}/${name}/${version}/docs`;
        if (this.isProvider)
            return base;
        if (this.isDataSource)
            return `${base}/data-sources/${this.terraformDocName}`;
        return `${base}/resources/${this.terraformDocName}`;
    }
    get isProvider() {
        return this.terraformSchemaType === "provider";
    }
    get isDataSource() {
        return this.terraformSchemaType === "data_source";
    }
    get parentClassName() {
        return this.isProvider
            ? "TerraformProvider"
            : this.isDataSource
                ? "TerraformDataSource"
                : "TerraformResource";
    }
    get terraformResourceType() {
        return this.isProvider
            ? this.terraformProviderName
            : this.isDataSource
                ? this.terraformType.replace(/^data_/, "")
                : this.terraformType;
    }
    get terraformDocName() {
        return (0, codemaker_1.toSnakeCase)(this.terraformResourceType.replace(new RegExp(`^${this.provider}_`, "i"), ""));
    }
    get referencedTypes() {
        return this.configStruct.referencedTypes;
    }
    get structsFolderName() {
        return `${path_1.default.basename(this.fileName, ".ts")}-structs`;
    }
    get structsFolderPath() {
        return path_1.default.join(this.namespaceFolderPath, this.structsFolderName);
    }
    get namespaceFolderPath() {
        return this.filePath.split("/").slice(0, -1).join("/");
    }
    escapeSchema(schema) {
        return schema.replace(/(\*\/)/gi, `*\\/`);
    }
}
exports.ResourceModel = ResourceModel;
//# sourceMappingURL=data:application/json;base64,