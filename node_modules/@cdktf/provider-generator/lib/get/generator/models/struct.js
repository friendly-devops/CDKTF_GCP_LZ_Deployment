"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigStruct = exports.Struct = void 0;
const util_1 = require("../../../util");
class Struct {
    constructor(name, attributes, isClass = false, isAnonymous = false, isSingleItem = false, nestingMode = "") {
        this.name = name;
        this.attributes = attributes;
        this.isClass = isClass;
        this.isAnonymous = isAnonymous;
        this.isSingleItem = isSingleItem;
        this.nestingMode = nestingMode;
    }
    get assignableAttributes() {
        return this.attributes.filter((attribute) => attribute.isAssignable);
    }
    get optionalAttributes() {
        return this.attributes.filter((attribute) => attribute.optional);
    }
    get allOptional() {
        return (this.attributes.filter((attribute) => !attribute.optional && !attribute.computed).length == 0);
    }
    get attributeType() {
        return `${this.name}${this.allOptional ? " = {}" : ""}`;
    }
    get assignable() {
        return !this.isClass || this.assignableAttributes.length > 0;
    }
    get extends() {
        return "";
    }
    get mapperName() {
        return `${(0, util_1.downcaseFirst)(this.name)}ToTerraform`;
    }
    get hclMapperName() {
        return `${(0, util_1.downcaseFirst)(this.name)}ToHclTerraform`;
    }
    get outputReferenceName() {
        return `${this.name}OutputReference`;
    }
    get listName() {
        return `${this.name}List`;
    }
    get mapName() {
        return `${this.name}Map`;
    }
    get mapListName() {
        return `${this.name}MapList`;
    }
    get listMapName() {
        return `${this.name}ListMap`;
    }
    get listListName() {
        return `${this.name}ListList`;
    }
    get isProvider() {
        return this.attributes.some((att) => att.isProvider);
    }
    get referencedTypes() {
        const types = [];
        this.attributes.forEach((att) => {
            const attReferences = att.getReferencedTypes(false); // This may be a config struct, but still need the references in this context
            if (attReferences) {
                types.push(...attReferences);
            }
        });
        return types;
    }
    get exportCount() {
        let count = 1; // self
        count += 1; // toTerraform function
        if (this.nestingMode === "list" ||
            this.nestingMode === "set" ||
            this.nestingMode === "map") {
            count += 1; // output reference
            if (!this.isSingleItem) {
                count += 1; // complex collection
            }
        }
        return count;
    }
}
exports.Struct = Struct;
class ConfigStruct extends Struct {
    get extends() {
        return ` extends cdktf.TerraformMetaArguments`;
    }
}
exports.ConfigStruct = ConfigStruct;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RydWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3RydWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUdBLHdDQUE4QztBQUM5QyxNQUFhLE1BQU07SUFDakIsWUFDa0IsSUFBWSxFQUNaLFVBQTRCLEVBQzVCLFVBQVUsS0FBSyxFQUNmLGNBQWMsS0FBSyxFQUM1QixlQUFlLEtBQUssRUFDWCxjQUFzQixFQUFFO1FBTHhCLFNBQUksR0FBSixJQUFJLENBQVE7UUFDWixlQUFVLEdBQVYsVUFBVSxDQUFrQjtRQUM1QixZQUFPLEdBQVAsT0FBTyxDQUFRO1FBQ2YsZ0JBQVcsR0FBWCxXQUFXLENBQVE7UUFDNUIsaUJBQVksR0FBWixZQUFZLENBQVE7UUFDWCxnQkFBVyxHQUFYLFdBQVcsQ0FBYTtJQUN2QyxDQUFDO0lBRUosSUFBVyxvQkFBb0I7UUFDN0IsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7SUFFRCxJQUFXLGtCQUFrQjtRQUMzQixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbkUsQ0FBQztJQUVELElBQVcsV0FBVztRQUNwQixPQUFPLENBQ0wsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQ3BCLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxRQUFRLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUMxRCxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQ2QsQ0FBQztJQUNKLENBQUM7SUFFRCxJQUFXLGFBQWE7UUFDdEIsT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQztJQUMxRCxDQUFDO0lBRUQsSUFBVyxVQUFVO1FBQ25CLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFFRCxJQUFXLE9BQU87UUFDaEIsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDO0lBRUQsSUFBVyxVQUFVO1FBQ25CLE9BQU8sR0FBRyxJQUFBLG9CQUFhLEVBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUM7SUFDbEQsQ0FBQztJQUVELElBQVcsYUFBYTtRQUN0QixPQUFPLEdBQUcsSUFBQSxvQkFBYSxFQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7SUFDckQsQ0FBQztJQUVELElBQVcsbUJBQW1CO1FBQzVCLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxpQkFBaUIsQ0FBQztJQUN2QyxDQUFDO0lBRUQsSUFBVyxRQUFRO1FBQ2pCLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxNQUFNLENBQUM7SUFDNUIsQ0FBQztJQUVELElBQVcsT0FBTztRQUNoQixPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDO0lBQzNCLENBQUM7SUFFRCxJQUFXLFdBQVc7UUFDcEIsT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQztJQUMvQixDQUFDO0lBRUQsSUFBVyxXQUFXO1FBQ3BCLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUM7SUFDL0IsQ0FBQztJQUVELElBQVcsWUFBWTtRQUNyQixPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksVUFBVSxDQUFDO0lBQ2hDLENBQUM7SUFFRCxJQUFXLFVBQVU7UUFDbkIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFRCxJQUFXLGVBQWU7UUFDeEIsTUFBTSxLQUFLLEdBQWEsRUFBRSxDQUFDO1FBRTNCLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDOUIsTUFBTSxhQUFhLEdBQUcsR0FBRyxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsNkVBQTZFO1lBQ2xJLElBQUksYUFBYSxFQUFFO2dCQUNqQixLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsYUFBYSxDQUFDLENBQUM7YUFDOUI7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVELElBQVcsV0FBVztRQUNwQixJQUFJLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPO1FBQ3RCLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyx1QkFBdUI7UUFFbkMsSUFDRSxJQUFJLENBQUMsV0FBVyxLQUFLLE1BQU07WUFDM0IsSUFBSSxDQUFDLFdBQVcsS0FBSyxLQUFLO1lBQzFCLElBQUksQ0FBQyxXQUFXLEtBQUssS0FBSyxFQUMxQjtZQUNBLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxtQkFBbUI7WUFFL0IsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUU7Z0JBQ3RCLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxxQkFBcUI7YUFDbEM7U0FDRjtRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztDQUNGO0FBekdELHdCQXlHQztBQUVELE1BQWEsWUFBYSxTQUFRLE1BQU07SUFDdEMsSUFBVyxPQUFPO1FBQ2hCLE9BQU8sdUNBQXVDLENBQUM7SUFDakQsQ0FBQztDQUNGO0FBSkQsb0NBSUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIEhhc2hpQ29ycCwgSW5jXG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTVBMLTIuMFxuaW1wb3J0IHsgQXR0cmlidXRlTW9kZWwgfSBmcm9tIFwiLi9hdHRyaWJ1dGUtbW9kZWxcIjtcbmltcG9ydCB7IGRvd25jYXNlRmlyc3QgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbFwiO1xuZXhwb3J0IGNsYXNzIFN0cnVjdCB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyByZWFkb25seSBuYW1lOiBzdHJpbmcsXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJpYnV0ZXM6IEF0dHJpYnV0ZU1vZGVsW10sXG4gICAgcHVibGljIHJlYWRvbmx5IGlzQ2xhc3MgPSBmYWxzZSxcbiAgICBwdWJsaWMgcmVhZG9ubHkgaXNBbm9ueW1vdXMgPSBmYWxzZSxcbiAgICBwdWJsaWMgaXNTaW5nbGVJdGVtID0gZmFsc2UsXG4gICAgcHVibGljIHJlYWRvbmx5IG5lc3RpbmdNb2RlOiBzdHJpbmcgPSBcIlwiXG4gICkge31cblxuICBwdWJsaWMgZ2V0IGFzc2lnbmFibGVBdHRyaWJ1dGVzKCk6IEF0dHJpYnV0ZU1vZGVsW10ge1xuICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZXMuZmlsdGVyKChhdHRyaWJ1dGUpID0+IGF0dHJpYnV0ZS5pc0Fzc2lnbmFibGUpO1xuICB9XG5cbiAgcHVibGljIGdldCBvcHRpb25hbEF0dHJpYnV0ZXMoKTogQXR0cmlidXRlTW9kZWxbXSB7XG4gICAgcmV0dXJuIHRoaXMuYXR0cmlidXRlcy5maWx0ZXIoKGF0dHJpYnV0ZSkgPT4gYXR0cmlidXRlLm9wdGlvbmFsKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgYWxsT3B0aW9uYWwoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMuYXR0cmlidXRlcy5maWx0ZXIoXG4gICAgICAgIChhdHRyaWJ1dGUpID0+ICFhdHRyaWJ1dGUub3B0aW9uYWwgJiYgIWF0dHJpYnV0ZS5jb21wdXRlZFxuICAgICAgKS5sZW5ndGggPT0gMFxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGF0dHJpYnV0ZVR5cGUoKSB7XG4gICAgcmV0dXJuIGAke3RoaXMubmFtZX0ke3RoaXMuYWxsT3B0aW9uYWwgPyBcIiA9IHt9XCIgOiBcIlwifWA7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGFzc2lnbmFibGUoKSB7XG4gICAgcmV0dXJuICF0aGlzLmlzQ2xhc3MgfHwgdGhpcy5hc3NpZ25hYmxlQXR0cmlidXRlcy5sZW5ndGggPiAwO1xuICB9XG5cbiAgcHVibGljIGdldCBleHRlbmRzKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cblxuICBwdWJsaWMgZ2V0IG1hcHBlck5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYCR7ZG93bmNhc2VGaXJzdCh0aGlzLm5hbWUpfVRvVGVycmFmb3JtYDtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgaGNsTWFwcGVyTmFtZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiBgJHtkb3duY2FzZUZpcnN0KHRoaXMubmFtZSl9VG9IY2xUZXJyYWZvcm1gO1xuICB9XG5cbiAgcHVibGljIGdldCBvdXRwdXRSZWZlcmVuY2VOYW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGAke3RoaXMubmFtZX1PdXRwdXRSZWZlcmVuY2VgO1xuICB9XG5cbiAgcHVibGljIGdldCBsaXN0TmFtZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiBgJHt0aGlzLm5hbWV9TGlzdGA7XG4gIH1cblxuICBwdWJsaWMgZ2V0IG1hcE5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYCR7dGhpcy5uYW1lfU1hcGA7XG4gIH1cblxuICBwdWJsaWMgZ2V0IG1hcExpc3ROYW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGAke3RoaXMubmFtZX1NYXBMaXN0YDtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgbGlzdE1hcE5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYCR7dGhpcy5uYW1lfUxpc3RNYXBgO1xuICB9XG5cbiAgcHVibGljIGdldCBsaXN0TGlzdE5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYCR7dGhpcy5uYW1lfUxpc3RMaXN0YDtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgaXNQcm92aWRlcigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVzLnNvbWUoKGF0dCkgPT4gYXR0LmlzUHJvdmlkZXIpO1xuICB9XG5cbiAgcHVibGljIGdldCByZWZlcmVuY2VkVHlwZXMoKTogc3RyaW5nW10ge1xuICAgIGNvbnN0IHR5cGVzOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgdGhpcy5hdHRyaWJ1dGVzLmZvckVhY2goKGF0dCkgPT4ge1xuICAgICAgY29uc3QgYXR0UmVmZXJlbmNlcyA9IGF0dC5nZXRSZWZlcmVuY2VkVHlwZXMoZmFsc2UpOyAvLyBUaGlzIG1heSBiZSBhIGNvbmZpZyBzdHJ1Y3QsIGJ1dCBzdGlsbCBuZWVkIHRoZSByZWZlcmVuY2VzIGluIHRoaXMgY29udGV4dFxuICAgICAgaWYgKGF0dFJlZmVyZW5jZXMpIHtcbiAgICAgICAgdHlwZXMucHVzaCguLi5hdHRSZWZlcmVuY2VzKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB0eXBlcztcbiAgfVxuXG4gIHB1YmxpYyBnZXQgZXhwb3J0Q291bnQoKTogbnVtYmVyIHtcbiAgICBsZXQgY291bnQgPSAxOyAvLyBzZWxmXG4gICAgY291bnQgKz0gMTsgLy8gdG9UZXJyYWZvcm0gZnVuY3Rpb25cblxuICAgIGlmIChcbiAgICAgIHRoaXMubmVzdGluZ01vZGUgPT09IFwibGlzdFwiIHx8XG4gICAgICB0aGlzLm5lc3RpbmdNb2RlID09PSBcInNldFwiIHx8XG4gICAgICB0aGlzLm5lc3RpbmdNb2RlID09PSBcIm1hcFwiXG4gICAgKSB7XG4gICAgICBjb3VudCArPSAxOyAvLyBvdXRwdXQgcmVmZXJlbmNlXG5cbiAgICAgIGlmICghdGhpcy5pc1NpbmdsZUl0ZW0pIHtcbiAgICAgICAgY291bnQgKz0gMTsgLy8gY29tcGxleCBjb2xsZWN0aW9uXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvdW50O1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDb25maWdTdHJ1Y3QgZXh0ZW5kcyBTdHJ1Y3Qge1xuICBwdWJsaWMgZ2V0IGV4dGVuZHMoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYCBleHRlbmRzIGNka3RmLlRlcnJhZm9ybU1ldGFBcmd1bWVudHNgO1xuICB9XG59XG4iXX0=