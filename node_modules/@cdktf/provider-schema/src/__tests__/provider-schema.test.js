"use strict";
// Copyright (c) HashiCorp, Inc
// SPDX-License-Identifier: MPL-2.0
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
const json_stable_stringify_1 = __importDefault(require("json-stable-stringify"));
const commons_1 = require("@cdktf/commons");
const provider_schema_1 = require("../provider-schema");
function sanitizeJson(value) {
    value["format_version"] = "STUBBED VERSION";
    return (0, json_stable_stringify_1.default)(value, {
        space: 2,
    });
}
describe("readSchema", () => {
    it("generates a single provider schema", async () => {
        const provider = new commons_1.TerraformProviderConstraint("hashicorp/null@3.1.0");
        const target = new commons_1.ConstructsMakerProviderTarget(provider, commons_1.Language.TYPESCRIPT);
        const result = await (0, provider_schema_1.readProviderSchema)(target);
        expect(sanitizeJson(result)).toMatchSnapshot();
    }, 120000);
    it("generates a single module schema", async () => {
        const module = new commons_1.TerraformModuleConstraint("terraform-aws-modules/iam/aws//modules/iam-account@3.12.0");
        const target = new commons_1.ConstructsMakerModuleTarget(module, commons_1.Language.TYPESCRIPT);
        const result = await (0, provider_schema_1.readModuleSchema)(target);
        expect(sanitizeJson(result)).toMatchSnapshot();
    }, 120000);
    it("generates a more complex schema", async () => {
        const module = new commons_1.TerraformModuleConstraint("terraform-aws-modules/eks/aws@7.0.1");
        const target = new commons_1.ConstructsMakerModuleTarget(module, commons_1.Language.TYPESCRIPT);
        const result = await (0, provider_schema_1.readModuleSchema)(target);
        expect(sanitizeJson(result)).toMatchSnapshot();
    }, 120000);
    it("generates a local module", async () => {
        const module = new commons_1.TerraformModuleConstraint({
            name: "local_module",
            fqn: "local_module",
            source: path.resolve(__dirname, "fixtures", "local-module"),
        });
        const target = new commons_1.ConstructsMakerModuleTarget(module, commons_1.Language.TYPESCRIPT);
        const result = await (0, provider_schema_1.readModuleSchema)(target);
        expect(sanitizeJson(result)).toMatchSnapshot();
    }, 120000);
    it("generates a local json module", async () => {
        const module = new commons_1.TerraformModuleConstraint({
            name: "local_module",
            fqn: "local_module",
            source: path.resolve(__dirname, "fixtures", "local-json-module"),
        });
        const target = new commons_1.ConstructsMakerModuleTarget(module, commons_1.Language.TYPESCRIPT);
        const result = await (0, provider_schema_1.readModuleSchema)(target);
        expect(sanitizeJson(result)).toMatchSnapshot();
    }, 120000);
});
describe("sanitizeProviderSchema", () => {
    it("sanitizes a provider schema", () => {
        const schema = {
            format_version: "0.1",
            provider_versions: {
                "registry.terraform.io/hashicorp/null": "3.1.0",
            },
            provider_schemas: {
                "registry.terraform.io/hashicorp/null": {
                    provider: {
                        version: 0,
                        block: {
                            attributes: {
                                version: {
                                    type: "string",
                                    required: true,
                                },
                                correct: {
                                    type: ["list", "string"],
                                },
                                incorrect: {
                                    type: ["list", "string", "list", "string"],
                                },
                            },
                            block_types: {
                                triggers: {
                                    nesting_mode: "single",
                                    block: {
                                        attributes: {
                                            correct: {
                                                type: ["list", "string"],
                                            },
                                            incorrect: {
                                                type: ["list", "string", "list", "string"],
                                            },
                                        },
                                        block_types: {},
                                    },
                                },
                            },
                        },
                    },
                    resource_schemas: {
                        null_resource: {
                            version: 0,
                            block: {
                                attributes: {
                                    id: {
                                        type: "string",
                                        computed: true,
                                    },
                                    correct: {
                                        type: ["list", "string"],
                                    },
                                    incorrect: {
                                        type: ["list", "string", "list", "string"],
                                    },
                                },
                                block_types: {
                                    triggers: {
                                        nesting_mode: "single",
                                        block: {
                                            attributes: {
                                                triggers: {
                                                    type: "string",
                                                    optional: true,
                                                },
                                                correct: {
                                                    type: ["list", "string"],
                                                },
                                                incorrect: {
                                                    type: ["list", "string", "list", "string"],
                                                },
                                            },
                                            block_types: {},
                                        },
                                    },
                                },
                            },
                        },
                    },
                    data_source_schemas: {},
                },
            },
        };
        const result = (0, provider_schema_1.sanitizeProviderSchema)(schema);
        expect(result).toMatchSnapshot();
    });
});
//# sourceMappingURL=data:application/json;base64,