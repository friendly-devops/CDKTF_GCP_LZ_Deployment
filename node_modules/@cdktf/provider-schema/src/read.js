"use strict";
/**
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: MPL-2.0
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readSchema = exports.isLocalModule = exports.TerraformProviderConstraint = exports.TerraformModuleConstraint = exports.isRegistryModule = void 0;
var commons_1 = require("@cdktf/commons");
Object.defineProperty(exports, "isRegistryModule", { enumerable: true, get: function () { return commons_1.isRegistryModule; } });
Object.defineProperty(exports, "TerraformModuleConstraint", { enumerable: true, get: function () { return commons_1.TerraformModuleConstraint; } });
Object.defineProperty(exports, "TerraformProviderConstraint", { enumerable: true, get: function () { return commons_1.TerraformProviderConstraint; } });
Object.defineProperty(exports, "isLocalModule", { enumerable: true, get: function () { return commons_1.isLocalModule; } });
const commons_2 = require("@cdktf/commons");
const deepmerge_1 = __importDefault(require("deepmerge"));
const provider_schema_1 = require("./provider-schema");
const cache_1 = require("./cache");
async function readSchema(constraints, cacheDir) {
    const cachedReadProviderSchema = (0, cache_1.cachedAccess)(provider_schema_1.readProviderSchema, cacheDir);
    const targets = constraints.map((constraint) => commons_2.ConstructsMakerProviderTarget.from(constraint, commons_2.LANGUAGES[0]));
    throwIfTargetsConflict(targets);
    const schemas = await Promise.all(targets.map((t) => t.isModule
        ? (0, provider_schema_1.readModuleSchema)(t).then((s) => ({ moduleSchema: s }))
        : cachedReadProviderSchema(t).then((s) => ({ providerSchema: s }))));
    // ensure we have a schema for each target type
    schemas.unshift({
        providerSchema: {
            format_version: "0.1",
        },
        moduleSchema: {},
    });
    return deepmerge_1.default.all(schemas);
}
exports.readSchema = readSchema;
function throwIfTargetsConflict(targets) {
    const modules = targets.filter((t) => t.isModule);
    modules.forEach((moduleA) => {
        modules.forEach((moduleB) => {
            if (moduleA !== moduleB && moduleA.name === moduleB.name) {
                throw commons_2.Errors.Usage(`Found two modules with the same name "${moduleA.name}" which is not supported. Please rename one of the modules in your cdktf.json config. For more information on how to set the name refer to https://cdk.tf/adding-modules`);
            }
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInJlYWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRzs7Ozs7O0FBRUgsMENBS3dCO0FBSnRCLDJHQUFBLGdCQUFnQixPQUFBO0FBQ2hCLG9IQUFBLHlCQUF5QixPQUFBO0FBQ3pCLHNIQUFBLDJCQUEyQixPQUFBO0FBQzNCLHdHQUFBLGFBQWEsT0FBQTtBQUVmLDRDQU13QjtBQUN4QiwwREFBa0M7QUFDbEMsdURBQXlFO0FBQ3pFLG1DQUF1QztBQU9oQyxLQUFLLFVBQVUsVUFBVSxDQUM5QixXQUE0QyxFQUM1QyxRQUFpQjtJQUVqQixNQUFNLHdCQUF3QixHQUFHLElBQUEsb0JBQVksRUFBQyxvQ0FBa0IsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUM1RSxNQUFNLE9BQU8sR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FDN0MsdUNBQTZCLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxtQkFBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQzdELENBQUM7SUFFRixzQkFBc0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUVoQyxNQUFNLE9BQU8sR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQy9CLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUNoQixDQUFDLENBQUMsUUFBUTtRQUNSLENBQUMsQ0FBQyxJQUFBLGtDQUFnQixFQUFDLENBQVEsQ0FBQyxDQUFDLElBQUksQ0FDN0IsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxZQUFZLEVBQUUsQ0FBQyxFQUFhLENBQUEsQ0FDdkM7UUFDSCxDQUFDLENBQUMsd0JBQXdCLENBQUMsQ0FBUSxDQUFDLENBQUMsSUFBSSxDQUNyQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLGNBQWMsRUFBRSxDQUFDLEVBQWEsQ0FBQSxDQUN6QyxDQUNOLENBQ0YsQ0FBQztJQUVGLCtDQUErQztJQUMvQyxPQUFPLENBQUMsT0FBTyxDQUFDO1FBQ2QsY0FBYyxFQUFFO1lBQ2QsY0FBYyxFQUFFLEtBQUs7U0FDdEI7UUFDRCxZQUFZLEVBQUUsRUFBRTtLQUNqQixDQUFDLENBQUM7SUFFSCxPQUFPLG1CQUFTLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ2hDLENBQUM7QUFoQ0QsZ0NBZ0NDO0FBRUQsU0FBUyxzQkFBc0IsQ0FDN0IsT0FBd0U7SUFFeEUsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FDNUIsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQ2UsQ0FBQztJQUVuQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7UUFDMUIsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQzFCLElBQUksT0FBTyxLQUFLLE9BQU8sSUFBSSxPQUFPLENBQUMsSUFBSSxLQUFLLE9BQU8sQ0FBQyxJQUFJLEVBQUU7Z0JBQ3hELE1BQU0sZ0JBQU0sQ0FBQyxLQUFLLENBQ2hCLHlDQUF5QyxPQUFPLENBQUMsSUFBSSwwS0FBMEssQ0FDaE8sQ0FBQzthQUNIO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgSGFzaGlDb3JwLCBJbmMuXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTVBMLTIuMFxuICovXG5cbmV4cG9ydCB7XG4gIGlzUmVnaXN0cnlNb2R1bGUsXG4gIFRlcnJhZm9ybU1vZHVsZUNvbnN0cmFpbnQsXG4gIFRlcnJhZm9ybVByb3ZpZGVyQ29uc3RyYWludCxcbiAgaXNMb2NhbE1vZHVsZSxcbn0gZnJvbSBcIkBjZGt0Zi9jb21tb25zXCI7XG5pbXBvcnQge1xuICBUZXJyYWZvcm1EZXBlbmRlbmN5Q29uc3RyYWludCxcbiAgTEFOR1VBR0VTLFxuICBDb25zdHJ1Y3RzTWFrZXJQcm92aWRlclRhcmdldCxcbiAgQ29uc3RydWN0c01ha2VyTW9kdWxlVGFyZ2V0LFxuICBFcnJvcnMsXG59IGZyb20gXCJAY2RrdGYvY29tbW9uc1wiO1xuaW1wb3J0IGRlZXBtZXJnZSBmcm9tIFwiZGVlcG1lcmdlXCI7XG5pbXBvcnQgeyByZWFkTW9kdWxlU2NoZW1hLCByZWFkUHJvdmlkZXJTY2hlbWEgfSBmcm9tIFwiLi9wcm92aWRlci1zY2hlbWFcIjtcbmltcG9ydCB7IGNhY2hlZEFjY2VzcyB9IGZyb20gXCIuL2NhY2hlXCI7XG5cbmV4cG9ydCB0eXBlIFNjaGVtYSA9IHtcbiAgcHJvdmlkZXJTY2hlbWE/OiBBd2FpdGVkPFJldHVyblR5cGU8dHlwZW9mIHJlYWRQcm92aWRlclNjaGVtYT4+O1xuICBtb2R1bGVTY2hlbWE/OiBBd2FpdGVkPFJldHVyblR5cGU8dHlwZW9mIHJlYWRNb2R1bGVTY2hlbWE+Pjtcbn07XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZWFkU2NoZW1hKFxuICBjb25zdHJhaW50czogVGVycmFmb3JtRGVwZW5kZW5jeUNvbnN0cmFpbnRbXSxcbiAgY2FjaGVEaXI/OiBzdHJpbmdcbik6IFByb21pc2U8U2NoZW1hPiB7XG4gIGNvbnN0IGNhY2hlZFJlYWRQcm92aWRlclNjaGVtYSA9IGNhY2hlZEFjY2VzcyhyZWFkUHJvdmlkZXJTY2hlbWEsIGNhY2hlRGlyKTtcbiAgY29uc3QgdGFyZ2V0cyA9IGNvbnN0cmFpbnRzLm1hcCgoY29uc3RyYWludCkgPT5cbiAgICBDb25zdHJ1Y3RzTWFrZXJQcm92aWRlclRhcmdldC5mcm9tKGNvbnN0cmFpbnQsIExBTkdVQUdFU1swXSlcbiAgKTtcblxuICB0aHJvd0lmVGFyZ2V0c0NvbmZsaWN0KHRhcmdldHMpO1xuXG4gIGNvbnN0IHNjaGVtYXMgPSBhd2FpdCBQcm9taXNlLmFsbChcbiAgICB0YXJnZXRzLm1hcCgodCkgPT5cbiAgICAgIHQuaXNNb2R1bGVcbiAgICAgICAgPyByZWFkTW9kdWxlU2NoZW1hKHQgYXMgYW55KS50aGVuKFxuICAgICAgICAgICAgKHMpID0+ICh7IG1vZHVsZVNjaGVtYTogcyB9IGFzIFNjaGVtYSlcbiAgICAgICAgICApXG4gICAgICAgIDogY2FjaGVkUmVhZFByb3ZpZGVyU2NoZW1hKHQgYXMgYW55KS50aGVuKFxuICAgICAgICAgICAgKHMpID0+ICh7IHByb3ZpZGVyU2NoZW1hOiBzIH0gYXMgU2NoZW1hKVxuICAgICAgICAgIClcbiAgICApXG4gICk7XG5cbiAgLy8gZW5zdXJlIHdlIGhhdmUgYSBzY2hlbWEgZm9yIGVhY2ggdGFyZ2V0IHR5cGVcbiAgc2NoZW1hcy51bnNoaWZ0KHtcbiAgICBwcm92aWRlclNjaGVtYToge1xuICAgICAgZm9ybWF0X3ZlcnNpb246IFwiMC4xXCIsXG4gICAgfSxcbiAgICBtb2R1bGVTY2hlbWE6IHt9LFxuICB9KTtcblxuICByZXR1cm4gZGVlcG1lcmdlLmFsbChzY2hlbWFzKTtcbn1cblxuZnVuY3Rpb24gdGhyb3dJZlRhcmdldHNDb25mbGljdChcbiAgdGFyZ2V0czogKENvbnN0cnVjdHNNYWtlclByb3ZpZGVyVGFyZ2V0IHwgQ29uc3RydWN0c01ha2VyTW9kdWxlVGFyZ2V0KVtdXG4pIHtcbiAgY29uc3QgbW9kdWxlcyA9IHRhcmdldHMuZmlsdGVyKFxuICAgICh0KSA9PiB0LmlzTW9kdWxlXG4gICkgYXMgQ29uc3RydWN0c01ha2VyTW9kdWxlVGFyZ2V0W107XG5cbiAgbW9kdWxlcy5mb3JFYWNoKChtb2R1bGVBKSA9PiB7XG4gICAgbW9kdWxlcy5mb3JFYWNoKChtb2R1bGVCKSA9PiB7XG4gICAgICBpZiAobW9kdWxlQSAhPT0gbW9kdWxlQiAmJiBtb2R1bGVBLm5hbWUgPT09IG1vZHVsZUIubmFtZSkge1xuICAgICAgICB0aHJvdyBFcnJvcnMuVXNhZ2UoXG4gICAgICAgICAgYEZvdW5kIHR3byBtb2R1bGVzIHdpdGggdGhlIHNhbWUgbmFtZSBcIiR7bW9kdWxlQS5uYW1lfVwiIHdoaWNoIGlzIG5vdCBzdXBwb3J0ZWQuIFBsZWFzZSByZW5hbWUgb25lIG9mIHRoZSBtb2R1bGVzIGluIHlvdXIgY2RrdGYuanNvbiBjb25maWcuIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIGhvdyB0byBzZXQgdGhlIG5hbWUgcmVmZXIgdG8gaHR0cHM6Ly9jZGsudGYvYWRkaW5nLW1vZHVsZXNgXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufVxuIl19