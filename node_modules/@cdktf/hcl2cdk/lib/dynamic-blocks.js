"use strict";
/**
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: MPL-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractDynamicBlocks = exports.isNestedDynamicBlock = void 0;
function isNestedDynamicBlock(dynBlocks, block) {
    return dynBlocks.some((dyn) => dyn.path !== block.path && block.path.startsWith(dyn.path));
}
exports.isNestedDynamicBlock = isNestedDynamicBlock;
const extractDynamicBlocks = (config, path = "") => {
    if (typeof config !== "object") {
        return [];
    }
    if (!config) {
        return [];
    }
    if (Array.isArray(config)) {
        return config.reduce((carry, item, index) => [
            ...carry,
            ...(0, exports.extractDynamicBlocks)(item, `${path}.${index}`),
        ], []);
    }
    if ("dynamic" in config) {
        const dynamic = config.dynamic;
        const scopedVar = Object.keys(dynamic)[0];
        const { for_each, content } = dynamic[scopedVar][0];
        return [
            {
                path: `${path}.dynamic.${scopedVar}`,
                for_each,
                content,
                scopedVar,
            },
            ...(0, exports.extractDynamicBlocks)(content, `${path}.dynamic.${scopedVar}.0.content`),
        ];
    }
    return Object.entries(config).reduce((carry, [key, value]) => {
        return [...carry, ...(0, exports.extractDynamicBlocks)(value, `${path}.${key}`)];
    }, []);
};
exports.extractDynamicBlocks = extractDynamicBlocks;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1ibG9ja3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkeW5hbWljLWJsb2Nrcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7QUFJSCxTQUFnQixvQkFBb0IsQ0FDbEMsU0FBeUIsRUFDekIsS0FBbUI7SUFFbkIsT0FBTyxTQUFTLENBQUMsSUFBSSxDQUNuQixDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksS0FBSyxLQUFLLENBQUMsSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FDcEUsQ0FBQztBQUNKLENBQUM7QUFQRCxvREFPQztBQUVNLE1BQU0sb0JBQW9CLEdBQUcsQ0FDbEMsTUFBOEIsRUFDOUIsSUFBSSxHQUFHLEVBQUUsRUFDTyxFQUFFO0lBQ2xCLElBQUksT0FBTyxNQUFNLEtBQUssUUFBUSxFQUFFO1FBQzlCLE9BQU8sRUFBRSxDQUFDO0tBQ1g7SUFFRCxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ1gsT0FBTyxFQUFFLENBQUM7S0FDWDtJQUVELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUN6QixPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQ2xCLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDO1lBQ3RCLEdBQUcsS0FBSztZQUNSLEdBQUcsSUFBQSw0QkFBb0IsRUFBQyxJQUFJLEVBQUUsR0FBRyxJQUFJLElBQUksS0FBSyxFQUFFLENBQUM7U0FDbEQsRUFDRCxFQUFFLENBQ0gsQ0FBQztLQUNIO0lBRUQsSUFBSSxTQUFTLElBQUksTUFBTSxFQUFFO1FBQ3ZCLE1BQU0sT0FBTyxHQUFJLE1BQWMsQ0FBQyxPQUFPLENBQUM7UUFDeEMsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQyxNQUFNLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVwRCxPQUFPO1lBQ0w7Z0JBQ0UsSUFBSSxFQUFFLEdBQUcsSUFBSSxZQUFZLFNBQVMsRUFBRTtnQkFDcEMsUUFBUTtnQkFDUixPQUFPO2dCQUNQLFNBQVM7YUFDVjtZQUNELEdBQUcsSUFBQSw0QkFBb0IsRUFDckIsT0FBTyxFQUNQLEdBQUcsSUFBSSxZQUFZLFNBQVMsWUFBWSxDQUN6QztTQUNGLENBQUM7S0FDSDtJQUVELE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRTtRQUMzRCxPQUFPLENBQUMsR0FBRyxLQUFLLEVBQUUsR0FBRyxJQUFBLDRCQUFvQixFQUFDLEtBQVksRUFBRSxHQUFHLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDN0UsQ0FBQyxFQUFFLEVBQW9CLENBQUMsQ0FBQztBQUMzQixDQUFDLENBQUM7QUE1Q1csUUFBQSxvQkFBb0Isd0JBNEMvQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBIYXNoaUNvcnAsIEluYy5cbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNUEwtMi4wXG4gKi9cblxuaW1wb3J0IHsgRHluYW1pY0Jsb2NrLCBUZXJyYWZvcm1SZXNvdXJjZUJsb2NrIH0gZnJvbSBcIi4vdHlwZXNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGlzTmVzdGVkRHluYW1pY0Jsb2NrKFxuICBkeW5CbG9ja3M6IER5bmFtaWNCbG9ja1tdLFxuICBibG9jazogRHluYW1pY0Jsb2NrXG4pOiBib29sZWFuIHtcbiAgcmV0dXJuIGR5bkJsb2Nrcy5zb21lKFxuICAgIChkeW4pID0+IGR5bi5wYXRoICE9PSBibG9jay5wYXRoICYmIGJsb2NrLnBhdGguc3RhcnRzV2l0aChkeW4ucGF0aClcbiAgKTtcbn1cblxuZXhwb3J0IGNvbnN0IGV4dHJhY3REeW5hbWljQmxvY2tzID0gKFxuICBjb25maWc6IFRlcnJhZm9ybVJlc291cmNlQmxvY2ssXG4gIHBhdGggPSBcIlwiXG4pOiBEeW5hbWljQmxvY2tbXSA9PiB7XG4gIGlmICh0eXBlb2YgY29uZmlnICE9PSBcIm9iamVjdFwiKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgaWYgKCFjb25maWcpIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheShjb25maWcpKSB7XG4gICAgcmV0dXJuIGNvbmZpZy5yZWR1Y2UoXG4gICAgICAoY2FycnksIGl0ZW0sIGluZGV4KSA9PiBbXG4gICAgICAgIC4uLmNhcnJ5LFxuICAgICAgICAuLi5leHRyYWN0RHluYW1pY0Jsb2NrcyhpdGVtLCBgJHtwYXRofS4ke2luZGV4fWApLFxuICAgICAgXSxcbiAgICAgIFtdXG4gICAgKTtcbiAgfVxuXG4gIGlmIChcImR5bmFtaWNcIiBpbiBjb25maWcpIHtcbiAgICBjb25zdCBkeW5hbWljID0gKGNvbmZpZyBhcyBhbnkpLmR5bmFtaWM7XG4gICAgY29uc3Qgc2NvcGVkVmFyID0gT2JqZWN0LmtleXMoZHluYW1pYylbMF07XG4gICAgY29uc3QgeyBmb3JfZWFjaCwgY29udGVudCB9ID0gZHluYW1pY1tzY29wZWRWYXJdWzBdO1xuXG4gICAgcmV0dXJuIFtcbiAgICAgIHtcbiAgICAgICAgcGF0aDogYCR7cGF0aH0uZHluYW1pYy4ke3Njb3BlZFZhcn1gLFxuICAgICAgICBmb3JfZWFjaCxcbiAgICAgICAgY29udGVudCxcbiAgICAgICAgc2NvcGVkVmFyLFxuICAgICAgfSxcbiAgICAgIC4uLmV4dHJhY3REeW5hbWljQmxvY2tzKFxuICAgICAgICBjb250ZW50LFxuICAgICAgICBgJHtwYXRofS5keW5hbWljLiR7c2NvcGVkVmFyfS4wLmNvbnRlbnRgXG4gICAgICApLFxuICAgIF07XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmVudHJpZXMoY29uZmlnKS5yZWR1Y2UoKGNhcnJ5LCBba2V5LCB2YWx1ZV0pID0+IHtcbiAgICByZXR1cm4gWy4uLmNhcnJ5LCAuLi5leHRyYWN0RHluYW1pY0Jsb2Nrcyh2YWx1ZSBhcyBhbnksIGAke3BhdGh9LiR7a2V5fWApXTtcbiAgfSwgW10gYXMgRHluYW1pY0Jsb2NrW10pO1xufTtcbiJdfQ==