"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dynamicVariableToAst = exports.extractIteratorVariablesFromExpression = exports.convertTerraformExpressionToTs = exports.expressionAst = void 0;
// Copyright (c) HashiCorp, Inc
// SPDX-License-Identifier: MPL-2.0
const t = __importStar(require("@babel/types"));
const template_1 = __importDefault(require("@babel/template"));
const utils_1 = require("./utils");
const hcl2json_1 = require("@cdktf/hcl2json");
const hcl2json_2 = require("@cdktf/hcl2json");
const functions_1 = require("./function-bindings/functions");
const coerceType_1 = require("./coerceType");
const terraformSchema_1 = require("./terraformSchema");
const references_1 = require("./references");
const variables_1 = require("./variables");
const syntax_tree_1 = require("@cdktf/hcl2json/lib/syntax-tree");
const tfBinaryOperatorsToCdktf = {
    logicalOr: "or",
    logicalAnd: "and",
    greaterThan: "gt",
    greaterThanOrEqual: "gte",
    lessThan: "lt",
    lessThanOrEqual: "lte",
    equal: "eq",
    notEqual: "neq",
    add: "add",
    subtract: "sub",
    multiply: "mul",
    divide: "div",
    modulo: "mod",
};
const tfUnaryOperatorsToCdktf = {
    logicalNot: "not",
    negate: "negate",
};
function traversalPartsToString(traversals, asSuffix = false) {
    let seed = "";
    if (asSuffix && hcl2json_2.TFExpressionSyntaxTree.isNameTraversalPart(traversals[0])) {
        seed = ".";
    }
    return traversals.reduce((acc, part) => {
        if (part.type === "nameTraversal") {
            if (acc === seed) {
                return `${acc}${part.segment}`;
            }
            return `${acc}.${part.segment}`;
        }
        return `${acc}[${part.segment}]`;
    }, seed);
}
function canUseFqn(expression) {
    if (!hcl2json_2.TFExpressionSyntaxTree.isScopeTraversalExpression(expression)) {
        return false;
    }
    const rootSegment = expression.meta.traversal[0].segment;
    return !["var", "local"].includes(rootSegment);
}
function traversalToVariableName(scope, node) {
    if (!hcl2json_2.TFExpressionSyntaxTree.isScopeTraversalExpression(node)) {
        utils_1.logger.error(`Unexpected expression type ${node.type} with value ${node.meta.value} passed to convert to a variable. 
        ${utils_1.leaveCommentText}`);
        return "";
    }
    const segments = node.meta.traversal;
    if (segments.length === 1) {
        return node.meta.fullAccessor;
    }
    const rootSegment = segments[0].segment;
    const resource = rootSegment === "data"
        ? `${segments[0].segment}.${segments[1].segment}`
        : rootSegment;
    const name = rootSegment === "data" ? segments[2].segment : segments[1].segment;
    return (0, variables_1.variableName)(scope, resource, name);
}
function expressionForSerialStringConcatenation(scope, nodes) {
    const reducedNodes = nodes.reduce((acc, node) => {
        const prev = acc[acc.length - 1];
        if (!prev)
            return [node];
        if (t.isStringLiteral(prev) && t.isStringLiteral(node)) {
            acc.pop();
            acc.push(t.stringLiteral(prev.value + node.value));
            return acc;
        }
        acc.push(node);
        return acc;
    }, []);
    return reducedNodes.reduce((acc, node) => {
        if (!acc) {
            return node;
        }
        // wrap access to dynamic blocks in Token.asString() as they return a Lazy
        // for .key and .value which can't be concatenated in languages like Python
        // because JSII currently has no support for the toString() method in
        // languages other than TypeScript: https://github.com/aws/jsii/issues/380
        // example: dynamic_iterator0.key / dynamic_iterator0.value
        if (t.isMemberExpression(node) &&
            t.isIdentifier(node.object) &&
            Object.values(scope.scopedVariables || {}).includes(node.object.name) &&
            t.isIdentifier(node.property) &&
            ["key", "value"].includes(node.property.name)) {
            node = (0, coerceType_1.coerceType)(scope, node, "dynamic", "string");
        }
        return t.binaryExpression("+", acc, node);
    });
}
function getTfResourcePathFromNode(node) {
    const segments = node.meta.traversal;
    let resource = segments[0].segment;
    let result = [];
    let attributes = [];
    if (segments[0].segment === "data") {
        result.push(segments[0].segment);
        resource = segments[1].segment;
        attributes = segments.slice(3); // we want to skip the variable name
    }
    else {
        attributes = segments.slice(2); // we want to skip the variable name
    }
    const [provider, ...resourceNameFragments] = resource.split("_");
    // Hack: This happens in the case of `external` provider
    // where the data source does not have a provider name prefix
    if (resourceNameFragments.length === 0) {
        resourceNameFragments.push(provider);
    }
    result.push(provider);
    result.push(resourceNameFragments.join("_"));
    result = [
        ...result,
        ...attributes.map((seg) => {
            if (hcl2json_2.TFExpressionSyntaxTree.isIndexTraversalPart(seg)) {
                return `[${seg.segment}]`;
            }
            return seg.segment;
        }),
    ];
    return result.join(".");
}
function convertLiteralValueExpressionToTs(_scope, node) {
    const literalType = node.meta.type;
    if (literalType === "number") {
        return t.numericLiteral(Number(node.meta.value));
    }
    if (literalType === "bool") {
        return t.booleanLiteral(node.meta.value === "true" ? true : false);
    }
    return t.stringLiteral(node.meta.value);
}
function convertScopeTraversalExpressionToTs(scope, node) {
    var _a;
    const hasReference = (0, references_1.containsReference)(node);
    const segments = node.meta.traversal;
    if (segments[0].segment === "each" && scope.forEachIteratorName) {
        return dynamicVariableToAst(scope, node, scope.forEachIteratorName);
    }
    if (segments[0].segment === "count" && scope.countIteratorName) {
        return dynamicVariableToAst(scope, node, scope.countIteratorName, "count");
    }
    if (segments[0].segment === "self") {
        scope.importables.push({
            constructName: "TerraformSelf",
            provider: "cdktf",
        });
        return t.callExpression(t.memberExpression(t.identifier("TerraformSelf"), t.identifier("getAny")), [t.stringLiteral(traversalPartsToString(segments.slice(1)))]);
    }
    // setting.value, setting.value[1].id
    const dynamicBlock = (_a = scope.scopedVariables) === null || _a === void 0 ? void 0 : _a[segments[0].segment];
    if (dynamicBlock) {
        if (dynamicBlock === "dynamic-block") {
            return dynamicVariableToAst(scope, node, dynamicBlock, traversalPartsToString(segments));
        }
        return dynamicVariableToAst(scope, node, dynamicBlock, segments[0].segment);
    }
    // This may be a variable reference that we don't understand yet, so we wrap it in a template string
    // for Terraform to handle
    let varIdentifier = t.stringLiteral(`\${${node.meta.fullAccessor}}`);
    if (hasReference) {
        varIdentifier = t.identifier((0, utils_1.camelCase)(traversalToVariableName(scope, node)));
    }
    if (["var", "local"].includes(segments[0].segment)) {
        const variableAccessor = segments[0].segment === "var"
            ? t.memberExpression(varIdentifier, t.identifier("value"))
            : varIdentifier;
        if (segments.length > 2) {
            scope.importables.push({
                constructName: "Fn",
                provider: "cdktf",
            });
            const callee = t.memberExpression(t.identifier("Fn"), t.identifier("lookupNested"));
            return t.callExpression(callee, [
                variableAccessor,
                t.arrayExpression(segments.slice(2).map((s) => t.stringLiteral(s.segment))),
            ]);
        }
        return variableAccessor;
    }
    if (!hasReference || scope.withinOverrideExpression) {
        return varIdentifier;
    }
    const rootSegment = segments[0].segment;
    const attributeIndex = rootSegment === "data" ? 3 : 2;
    const attributeSegments = segments.slice(attributeIndex);
    const numericAccessorIndex = attributeSegments.findIndex((seg) => hcl2json_2.TFExpressionSyntaxTree.isIndexTraversalPart(seg));
    let minAccessorIndex = numericAccessorIndex;
    let mapAccessorIndex = -1;
    if (numericAccessorIndex === -1) {
        // only do this if we have to, if we already have a
        // numeric accessor, we don't have to do this additional work
        const resourcePath = getTfResourcePathFromNode(node);
        let usingSubPathType = false;
        let parts = resourcePath.split(".").filter((p) => p !== "");
        const minParts = attributeIndex; // we need to stop before data.aws.resource_name or aws.resource_name
        const originalParts = parts.length;
        let hasMapAccessor = false;
        while (parts.length >= minParts) {
            const type = (0, terraformSchema_1.getTypeAtPath)(scope.providerSchema, parts.join("."));
            if (type !== null) {
                if (Array.isArray(type) && type[0] === "map" && usingSubPathType) {
                    hasMapAccessor = true;
                    break;
                }
            }
            parts.pop();
            usingSubPathType = true;
        }
        if (hasMapAccessor) {
            mapAccessorIndex = originalParts - parts.length - 1;
            minAccessorIndex = mapAccessorIndex;
        }
    }
    const needsPropertyAccess = minAccessorIndex >= 0;
    const refSegments = needsPropertyAccess
        ? attributeSegments.slice(0, minAccessorIndex)
        : attributeSegments;
    const nonRefSegments = needsPropertyAccess
        ? attributeSegments.slice(minAccessorIndex)
        : [];
    const ref = refSegments.reduce((acc, seg, index) => t.memberExpression(acc, t.identifier(index === 0 && rootSegment === "module"
        ? (0, utils_1.camelCase)(seg.segment + "Output")
        : (0, utils_1.camelCase)(seg.segment))), varIdentifier);
    if (nonRefSegments.length === 0) {
        return ref;
    }
    scope.importables.push({
        constructName: "Fn",
        provider: "cdktf",
    });
    const callee = t.memberExpression(t.identifier("Fn"), t.identifier("lookupNested"));
    return t.callExpression(callee, [
        ref,
        t.arrayExpression(nonRefSegments.map((s) => t.stringLiteral(s.segment))),
    ]);
}
function convertUnaryOpExpressionToTs(scope, node) {
    const operand = convertTFExpressionAstToTs(scope, hcl2json_2.TFExpressionSyntaxTree.getChildWithValue(node, node.meta.valueExpression));
    let fnName = node.meta.operator;
    if (tfUnaryOperatorsToCdktf[fnName]) {
        fnName = tfUnaryOperatorsToCdktf[fnName];
    }
    else {
        throw new Error(`Cannot convert unknown operator ${node.meta.operator}`);
    }
    scope.importables.push({
        constructName: "Op",
        provider: "cdktf",
    });
    const fn = t.memberExpression(t.identifier("Op"), t.identifier(fnName));
    return t.callExpression(fn, [operand]);
}
function convertBinaryOpExpressionToTs(scope, node) {
    const left = convertTFExpressionAstToTs(scope, hcl2json_2.TFExpressionSyntaxTree.getChildWithValue(node, node.meta.lhsExpression));
    const right = convertTFExpressionAstToTs(scope, hcl2json_2.TFExpressionSyntaxTree.getChildWithValue(node, node.meta.rhsExpression));
    let fnName = node.meta.operator;
    if (tfBinaryOperatorsToCdktf[fnName]) {
        fnName = tfBinaryOperatorsToCdktf[fnName];
    }
    else {
        throw new Error(`Cannot convert unknown operator ${node.meta.operator}`);
    }
    scope.importables.push({
        constructName: "Op",
        provider: "cdktf",
    });
    const fn = t.memberExpression(t.identifier("Op"), t.identifier(fnName));
    return t.callExpression(fn, [left, right]);
}
function convertTemplateExpressionToTs(scope, node) {
    const parts = node.children.map((child) => ({
        node: child,
        expr: convertTFExpressionAstToTs(scope, child),
    }));
    const lastPart = parts[parts.length - 1];
    if (t.isStringLiteral(lastPart.expr) && lastPart.expr.value === "\n") {
        // This is a bit of a hack, but the trailing newline we add due to
        // heredocs looks ugly and unnecessary in the generated code, so we
        // try to remove it
        parts.pop();
    }
    if (parts.length === 0) {
        return t.stringLiteral(node.meta.value);
    }
    if (parts.length === 1) {
        return parts[0].expr;
    }
    let isScopedTraversal = false;
    let expressions = [];
    for (const { node, expr } of parts) {
        if (hcl2json_2.TFExpressionSyntaxTree.isScopeTraversalExpression(node) &&
            !t.isStringLiteral(expr) &&
            !t.isCallExpression(expr)) {
            expressions.push(t.stringLiteral("${"));
            isScopedTraversal = true;
        }
        else if (
        // we should ideally be doing type coercion more
        // carefully here, because it may not always be needed
        t.isCallExpression(expr)) {
            scope.importables.push({
                constructName: "Token",
                provider: "cdktf",
            });
            expressions.push(template_1.default.expression(`Token.asString(%%expr%%)`)({
                expr,
            }));
            continue;
        }
        else {
            if (isScopedTraversal) {
                expressions.push(t.stringLiteral("}"));
                isScopedTraversal = false;
            }
        }
        expressions.push(expr);
    }
    if (isScopedTraversal) {
        expressions.push(t.stringLiteral("}"));
    }
    return expressionForSerialStringConcatenation(scope, expressions);
}
function convertObjectExpressionToTs(scope, node) {
    return t.objectExpression(Object.entries(node.meta.items)
        .map(([key, value]) => {
        const valueChild = (0, syntax_tree_1.getChildWithValue)(node, value);
        if (!valueChild) {
            utils_1.logger.error(`Unable to value for object key '${key}': ${value}`);
            return null;
        }
        return t.objectProperty(t.identifier(key), convertTFExpressionAstToTs(scope, valueChild));
    })
        .filter((s) => s !== null));
}
function convertFunctionCallExpressionToTs(scope, node) {
    const functionName = node.meta.name;
    const mapping = functions_1.functionsMap[functionName];
    if (!mapping) {
        utils_1.logger.error(`Unknown function ${functionName} encountered. ${utils_1.leaveCommentText}`);
        const argumentExpressions = node.children.map((child) => convertTFExpressionAstToTs(scope, child));
        return t.callExpression(t.identifier(functionName), argumentExpressions);
    }
    let transformedNode = mapping.transformer
        ? mapping.transformer(node)
        : node;
    const argumentExpressions = transformedNode.children.map((child) => convertTFExpressionAstToTs(scope, child));
    scope.importables.push({
        constructName: "Fn",
        provider: "cdktf",
    });
    const callee = t.memberExpression(t.identifier("Fn"), t.identifier(mapping.name));
    if (mapping.parameters.length > 0 &&
        mapping.parameters[mapping.parameters.length - 1].variadic) {
        const lastParameterType = mapping.parameters[mapping.parameters.length - 1].type;
        const nonVariadicArguments = argumentExpressions.slice(0, mapping.parameters.length - 1);
        const fnCallArguments = [
            ...nonVariadicArguments.map((argExpr, index) => (0, coerceType_1.coerceType)(scope, argExpr, (0, coerceType_1.findExpressionType)(scope, argExpr), mapping.parameters[index].type)),
            t.arrayExpression(argumentExpressions
                .slice(mapping.parameters.length - 1)
                .map((argExpr) => (0, coerceType_1.coerceType)(scope, argExpr, (0, coerceType_1.findExpressionType)(scope, argExpr), lastParameterType))),
        ];
        return t.callExpression(callee, fnCallArguments);
    }
    return t.callExpression(callee, argumentExpressions.map((argExpr, index) => (0, coerceType_1.coerceType)(scope, argExpr, (0, coerceType_1.findExpressionType)(scope, argExpr), mapping.parameters[index].type)));
}
function convertIndexExpressionToTs(scope, node) {
    const collectionExpressionChild = hcl2json_2.TFExpressionSyntaxTree.getChildWithValue(node, node.meta.collectionExpression);
    const keyExpressionChild = hcl2json_2.TFExpressionSyntaxTree.getChildWithValue(node, node.meta.keyExpression);
    const collectionExpression = convertTFExpressionAstToTs(scope, collectionExpressionChild);
    const keyExpression = convertTFExpressionAstToTs(scope, keyExpressionChild);
    scope.importables.push({
        constructName: "Fn",
        provider: "cdktf",
    });
    const callee = t.memberExpression(t.identifier("Fn"), t.identifier("lookupNested"));
    return t.callExpression(callee, [
        collectionExpression,
        t.arrayExpression([keyExpression]),
    ]);
}
function convertSplatExpressionToTs(scope, node) {
    const sourceExpressionChild = hcl2json_2.TFExpressionSyntaxTree.getChildWithValue(node, node.meta.sourceExpression);
    let sourceExpression = convertTFExpressionAstToTs(scope, sourceExpressionChild);
    // We don't convert the relative expression because everything after the splat is going to be
    // a string
    let relativeExpression = node.meta.eachExpression.startsWith(node.meta.anonSymbolExpression)
        ? node.meta.eachExpression.slice(node.meta.anonSymbolExpression.length)
        : node.meta.eachExpression;
    const segments = relativeExpression.split(/\.|\[|\]/).filter((s) => s);
    scope.importables.push({
        constructName: "Fn",
        provider: "cdktf",
    });
    const callee = t.memberExpression(t.identifier("Fn"), t.identifier("lookupNested"));
    return t.callExpression(callee, [
        sourceExpression,
        t.arrayExpression([
            // we don't need to use the anonSymbolExpression here because
            // it only changes between .* and [*] which we don't care about
            t.stringLiteral("*"),
            ...segments.map(t.stringLiteral),
        ]),
    ]);
}
function convertConditionalExpressionToTs(scope, node) {
    const conditionChild = hcl2json_2.TFExpressionSyntaxTree.getChildWithValue(node, node.meta.conditionExpression);
    let condition = convertTFExpressionAstToTs(scope, conditionChild);
    if (t.isIdentifier(condition) && canUseFqn(conditionChild)) {
        // We have a resource or data source here, which we would need to
        // reference using fqn
        condition = t.memberExpression(condition, t.identifier("fqn"));
    }
    const trueExpression = convertTFExpressionAstToTs(scope, hcl2json_2.TFExpressionSyntaxTree.getChildWithValue(node, node.meta.trueExpression));
    const falseExpression = convertTFExpressionAstToTs(scope, hcl2json_2.TFExpressionSyntaxTree.getChildWithValue(node, node.meta.falseExpression));
    scope.importables.push({
        constructName: "conditional",
        provider: "cdktf",
    });
    return t.callExpression(t.identifier("conditional"), [
        condition,
        trueExpression,
        falseExpression,
    ]);
}
function convertTupleExpressionToTs(scope, node) {
    const expressions = node.children.map((child) => convertTFExpressionAstToTs(scope, child));
    return t.arrayExpression(expressions);
}
function convertRelativeTraversalExpressionToTs(scope, node) {
    const segments = node.meta.traversal;
    // The left hand side / source of a relative traversal is not a proper
    // object / resource / data thing that is being referenced
    const source = convertTFExpressionAstToTs(scope, hcl2json_2.TFExpressionSyntaxTree.getChildWithValue(node, node.meta.sourceExpression));
    scope.importables.push({
        constructName: "Fn",
        provider: "cdktf",
    });
    const callee = t.memberExpression(t.identifier("Fn"), t.identifier("lookupNested"));
    return t.callExpression(callee, [
        source,
        t.arrayExpression(segments.map((s) => t.stringLiteral(s.segment))),
    ]);
}
function convertForExpressionToTs(scope, node) {
    const collectionChild = hcl2json_2.TFExpressionSyntaxTree.getChildWithValue(node, node.meta.collectionExpression);
    let collectionExpression = convertTFExpressionAstToTs(scope, collectionChild);
    if (t.isIdentifier(collectionExpression) && canUseFqn(collectionChild)) {
        // We have a resource or data source here, which we would need to
        // reference using fqn
        collectionExpression = t.memberExpression(collectionExpression, t.identifier("fqn"));
    }
    const collectionRequiresWrapping = !t.isStringLiteral(collectionExpression);
    const expressions = [];
    const conditionBody = node.meta.keyVar
        ? `${node.meta.keyVar}, ${node.meta.valVar}`
        : node.meta.valVar;
    const openBrace = node.meta.openRangeValue;
    const closeBrace = node.meta.closeRangeValue;
    const grouped = node.meta.groupedValue ? "..." : "";
    const valueExpression = `${node.meta.valueExpression}${grouped}`;
    const prefix = `\${${openBrace} for ${conditionBody} in `;
    const keyValue = node.meta.keyExpression
        ? ` : ${node.meta.keyExpression} => ${valueExpression}`
        : ` : ${valueExpression}`;
    const conditional = node.meta.conditionalExpression;
    const suffix = `${keyValue}${conditional ? ` if ${conditional}` : ""}${closeBrace}}`;
    expressions.push(t.stringLiteral(prefix));
    if (collectionRequiresWrapping) {
        expressions.push(t.stringLiteral("${"));
    }
    expressions.push(collectionExpression);
    if (collectionRequiresWrapping) {
        expressions.push(t.stringLiteral("}"));
    }
    expressions.push(t.stringLiteral(suffix));
    return expressionForSerialStringConcatenation(scope, expressions);
}
function convertTFExpressionAstToTs(scope, node) {
    if (hcl2json_2.TFExpressionSyntaxTree.isLiteralValueExpression(node)) {
        return convertLiteralValueExpressionToTs(scope, node);
    }
    if (hcl2json_2.TFExpressionSyntaxTree.isScopeTraversalExpression(node)) {
        return convertScopeTraversalExpressionToTs(scope, node);
    }
    if (hcl2json_2.TFExpressionSyntaxTree.isUnaryOpExpression(node)) {
        return convertUnaryOpExpressionToTs(scope, node);
    }
    if (hcl2json_2.TFExpressionSyntaxTree.isBinaryOpExpression(node)) {
        return convertBinaryOpExpressionToTs(scope, node);
    }
    if (hcl2json_2.TFExpressionSyntaxTree.isTemplateExpression(node) || hcl2json_2.TFExpressionSyntaxTree.isTemplateWrapExpression(node)) {
        return convertTemplateExpressionToTs(scope, node);
    }
    if (hcl2json_2.TFExpressionSyntaxTree.isObjectExpression(node)) {
        return convertObjectExpressionToTs(scope, node);
    }
    if (hcl2json_2.TFExpressionSyntaxTree.isFunctionCallExpression(node)) {
        return convertFunctionCallExpressionToTs(scope, node);
    }
    if (hcl2json_2.TFExpressionSyntaxTree.isIndexExpression(node)) {
        return convertIndexExpressionToTs(scope, node);
    }
    if (hcl2json_2.TFExpressionSyntaxTree.isSplatExpression(node)) {
        return convertSplatExpressionToTs(scope, node);
    }
    if (hcl2json_2.TFExpressionSyntaxTree.isConditionalExpression(node)) {
        return convertConditionalExpressionToTs(scope, node);
    }
    if (hcl2json_2.TFExpressionSyntaxTree.isTupleExpression(node)) {
        return convertTupleExpressionToTs(scope, node);
    }
    if (hcl2json_2.TFExpressionSyntaxTree.isRelativeTraversalExpression(node)) {
        return convertRelativeTraversalExpressionToTs(scope, node);
    }
    if (hcl2json_2.TFExpressionSyntaxTree.isForExpression(node)) {
        return convertForExpressionToTs(scope, node);
    }
    return t.stringLiteral("");
}
async function expressionAst(input) {
    const { wrap, wrapOffset } = (0, hcl2json_2.wrapTerraformExpression)(input);
    const ast = await (0, hcl2json_1.getExpressionAst)("main.tf", wrap);
    if (!ast) {
        throw new Error(`Unable to parse terraform expression: ${input}`);
    }
    if (wrapOffset != 0 && hcl2json_2.TFExpressionSyntaxTree.isTemplateWrapExpression(ast)) {
        return ast.children[0];
    }
    return ast;
}
exports.expressionAst = expressionAst;
async function convertTerraformExpressionToTs(scope, input, targetType) {
    utils_1.logger.debug(`convertTerraformExpressionToTs(${input})`);
    const tsExpression = convertTFExpressionAstToTs(scope, await expressionAst(input));
    return (0, coerceType_1.coerceType)(scope, tsExpression, (0, coerceType_1.findExpressionType)(scope, tsExpression), targetType());
}
exports.convertTerraformExpressionToTs = convertTerraformExpressionToTs;
async function extractIteratorVariablesFromExpression(input) {
    const possibleVariableSpots = await (0, hcl2json_1.getReferencesInExpression)("main.tf", input);
    return possibleVariableSpots
        .filter((spot) => spot.value.startsWith("each."))
        .map((spot) => ({
        start: spot.startPosition,
        end: spot.endPosition,
        value: spot.value,
    }));
}
exports.extractIteratorVariablesFromExpression = extractIteratorVariablesFromExpression;
function dynamicVariableToAst(scope, node, iteratorName, block = "each") {
    if (iteratorName === "dynamic-block") {
        return expressionForSerialStringConcatenation(scope, [
            t.stringLiteral("${"),
            t.stringLiteral(block),
            t.stringLiteral("}"),
        ]);
    }
    if (node.meta.value === `${block}.key`) {
        return t.memberExpression(t.identifier(iteratorName), t.identifier("key"));
    }
    if (node.meta.value === `${block}.value`) {
        return t.memberExpression(t.identifier(iteratorName), t.identifier("value"));
    }
    if (block === "count" && node.meta.value === `${block}.index`) {
        return t.memberExpression(t.identifier(iteratorName), t.identifier("index"));
    }
    const segments = node.meta.traversal;
    if (segments.length > 2 &&
        segments[0].segment === block &&
        segments[1].segment === "value") {
        const segmentsAfterEachValue = segments.slice(2);
        scope.importables.push({
            constructName: "Fn",
            provider: "cdktf",
        });
        const callee = t.memberExpression(t.identifier("Fn"), t.identifier("lookupNested"));
        return t.callExpression(callee, [
            t.memberExpression(t.identifier(iteratorName), t.identifier("value")),
            t.arrayExpression(segmentsAfterEachValue.map((part) => {
                if (part.type === "nameTraversal") {
                    return t.stringLiteral(part.segment);
                }
                else {
                    return t.stringLiteral(`[${part.segment}]`);
                }
            })),
        ]);
    }
    throw new Error(`Can not create AST for iterator variable of '${node.meta.value}'`);
}
exports.dynamicVariableToAst = dynamicVariableToAst;
//# sourceMappingURL=data:application/json;base64,