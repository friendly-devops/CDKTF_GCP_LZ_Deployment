"use strict";
/**
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: MPL-2.0
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRequiredAttributes = exports.fillWithConfigAccessors = void 0;
const terraformSchema_1 = require("./terraformSchema");
const t = __importStar(require("@babel/types"));
const utils_1 = require("./utils");
function getConfigFieldName(topLevelConfig, name) {
    const sanitizedName = (0, utils_1.camelCase)(name);
    return deduplicateName(Object.keys(topLevelConfig), sanitizedName);
}
function deduplicateName(existingNames, name) {
    let newName = name;
    let i = 1;
    while (existingNames.includes(newName)) {
        newName = `${name}${i}`;
        i++;
    }
    return newName;
}
function fillWithConfigAccessors(scope, config, path) {
    if (Array.isArray(config)) {
        return config.map((c) => fillWithConfigAccessors(scope, c, `${path}.[]`));
    }
    if (typeof config === "object" && config !== null) {
        const mutated = Object.entries(config).reduce((acc, [key, value]) => ({
            ...acc,
            [key]: fillWithConfigAccessors(scope, value, `${path}.${key}`),
        }), {});
        // Get type of this part of the config
        const attributeType = (0, terraformSchema_1.getTypeAtPath)(scope.providerSchema, path);
        const requiredAttributes = getRequiredAttributes(attributeType);
        // Add accessors for all required attributes that are missing
        requiredAttributes.forEach((key) => {
            const value = mutated[key];
            const isNotDirectlyAccessible = value === undefined;
            const isReplacedByAst = (t.isNode(mutated) && t.isExpression(mutated)) ||
                t.isExpression(value);
            const isEmptyArray = Array.isArray(value) && value.length === 0;
            // If this was already replaced by an AST node, we don't need to do anything
            // We assume all fields are filled in by the AST
            if (isReplacedByAst) {
                return;
            }
            if (isNotDirectlyAccessible || isEmptyArray) {
                const fieldName = getConfigFieldName(scope.topLevelConfig, key);
                mutated[key] = t.memberExpression(t.identifier("config"), t.identifier(fieldName));
                scope.topLevelConfig[fieldName] = `${path}.${key}`;
            }
        });
        return mutated;
    }
    else {
        return config;
    }
}
exports.fillWithConfigAccessors = fillWithConfigAccessors;
function getRequiredAttributes(attributeType) {
    if (!attributeType) {
        return [];
    }
    if (typeof attributeType !== "object" ||
        Array.isArray(attributeType) ||
        attributeType === null ||
        attributeType === undefined ||
        !("block" in attributeType)) {
        return [];
    }
    const requiredAttributes = Object.entries(attributeType.block.attributes || {}).reduce((acc, [key, value]) => (value.required ? [...acc, key] : acc), []);
    // Logic taken from (and should be shared with) provider generator resource parser: attributeForBlockType
    const requiredBlockTypes = Object.entries(attributeType.block.block_types || {}).reduce((acc, [key, value]) => {
        if (value.nesting_mode === "single" &&
            !Object.values(value.block.attributes || {}).some((x) => !x.required)) {
            return [...acc, key];
        }
        if (value.nesting_mode === "map") {
            return acc;
        }
        if ((value.nesting_mode === "list" || value.nesting_mode === "set") &&
            value.min_items === undefined
            ? false
            : value.min_items > 0) {
            return [...acc, key];
        }
        return acc;
    }, []);
    return [...requiredAttributes, ...requiredBlockTypes].sort();
}
exports.getRequiredAttributes = getRequiredAttributes;
//# sourceMappingURL=data:application/json;base64,