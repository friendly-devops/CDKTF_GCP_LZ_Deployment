export declare const functionsMapGenerated: {
    abs: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    abspath: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    alltrue: {
        name: string;
        returnType: string;
        parameters: {
            type: string[];
        }[];
    };
    anytrue: {
        name: string;
        returnType: string;
        parameters: {
            type: string[];
        }[];
    };
    base64decode: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    base64encode: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    base64gzip: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    base64sha256: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    base64sha512: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    basename: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    can: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    ceil: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    chomp: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    chunklist: {
        name: string;
        returnType: (string | string[])[];
        parameters: ({
            type: string[];
        } | {
            type: string;
        })[];
    };
    cidrhost: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    cidrnetmask: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    cidrsubnet: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    cidrsubnets: {
        name: string;
        returnType: string[];
        parameters: ({
            type: string;
            variadic?: undefined;
        } | {
            type: string;
            variadic: boolean;
        })[];
    };
    coalesce: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
            variadic: boolean;
        }[];
    };
    coalescelist: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
            variadic: boolean;
        }[];
    };
    compact: {
        name: string;
        returnType: string[];
        parameters: {
            type: string[];
        }[];
    };
    concat: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
            variadic: boolean;
        }[];
    };
    contains: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    csvdecode: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    dirname: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    distinct: {
        name: string;
        returnType: string[];
        parameters: {
            type: string[];
        }[];
    };
    element: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    endswith: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    file: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    filebase64: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    filebase64sha256: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    filebase64sha512: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    fileexists: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    filemd5: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    fileset: {
        name: string;
        returnType: string[];
        parameters: {
            type: string;
        }[];
    };
    filesha1: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    filesha256: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    filesha512: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    flatten: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    floor: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    format: {
        name: string;
        returnType: string;
        parameters: ({
            type: string;
            variadic?: undefined;
        } | {
            type: string;
            variadic: boolean;
        })[];
    };
    formatdate: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    formatlist: {
        name: string;
        returnType: string;
        parameters: ({
            type: string;
            variadic?: undefined;
        } | {
            type: string;
            variadic: boolean;
        })[];
    };
    indent: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    index: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    jsondecode: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    jsonencode: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    keys: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    length: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    log: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    lower: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    matchkeys: {
        name: string;
        returnType: string[];
        parameters: {
            type: string[];
        }[];
    };
    max: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
            variadic: boolean;
        }[];
    };
    md5: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    merge: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
            variadic: boolean;
        }[];
    };
    min: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
            variadic: boolean;
        }[];
    };
    nonsensitive: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    one: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    parseint: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    pathexpand: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    plantimestamp: {
        name: string;
        returnType: string;
        parameters: never[];
    };
    pow: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    regex: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    regexall: {
        name: string;
        returnType: string[];
        parameters: {
            type: string;
        }[];
    };
    replace: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    reverse: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    rsadecrypt: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    sensitive: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    setintersection: {
        name: string;
        returnType: string[];
        parameters: ({
            type: string[];
            variadic?: undefined;
        } | {
            type: string[];
            variadic: boolean;
        })[];
    };
    setproduct: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
            variadic: boolean;
        }[];
    };
    setsubtract: {
        name: string;
        returnType: string[];
        parameters: {
            type: string[];
        }[];
    };
    setunion: {
        name: string;
        returnType: string[];
        parameters: ({
            type: string[];
            variadic?: undefined;
        } | {
            type: string[];
            variadic: boolean;
        })[];
    };
    sha1: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    sha256: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    sha512: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    signum: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    slice: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    sort: {
        name: string;
        returnType: string[];
        parameters: {
            type: string[];
        }[];
    };
    split: {
        name: string;
        returnType: string[];
        parameters: {
            type: string;
        }[];
    };
    startswith: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    strcontains: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    strrev: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    substr: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    sum: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    templatefile: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    textdecodebase64: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    textencodebase64: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    timeadd: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    timecmp: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    timestamp: {
        name: string;
        returnType: string;
        parameters: never[];
    };
    title: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    tobool: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    tolist: {
        name: string;
        returnType: string[];
        parameters: {
            type: string;
        }[];
    };
    tomap: {
        name: string;
        returnType: string[];
        parameters: {
            type: string;
        }[];
    };
    tonumber: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    toset: {
        name: string;
        returnType: string[];
        parameters: {
            type: string;
        }[];
    };
    tostring: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    transpose: {
        name: string;
        returnType: (string | string[])[];
        parameters: {
            type: (string | string[])[];
        }[];
    };
    trim: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    trimprefix: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    trimspace: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    trimsuffix: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    try: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
            variadic: boolean;
        }[];
    };
    upper: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    urlencode: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    uuid: {
        name: string;
        returnType: string;
        parameters: never[];
    };
    uuidv5: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    values: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    yamldecode: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    yamlencode: {
        name: string;
        returnType: string;
        parameters: {
            type: string;
        }[];
    };
    zipmap: {
        name: string;
        returnType: string;
        parameters: ({
            type: string[];
        } | {
            type: string;
        })[];
    };
};
//# sourceMappingURL=functions.generated.d.ts.map