"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resourceStats = exports.forEachNamespaced = exports.forEachProvider = exports.forEachImport = exports.forEachGlobal = void 0;
const telemetryAllowList_json_1 = require("./telemetryAllowList.json");
// locals, variables, and outputs are global key value maps
function forEachGlobal(scope, prefix, record, iterator) {
    return Object.entries(record || {}).reduce((carry, [key, item]) => {
        const id = `${prefix}.${key}`;
        return {
            ...carry,
            [id]: {
                code: async (graph) => await iterator(scope, key, id, item, graph),
                value: item,
            },
        };
    }, {});
}
exports.forEachGlobal = forEachGlobal;
function forEachImport(scope, prefix, record, iterator) {
    return (record || []).reduce((carry, item) => {
        const target = item.to.startsWith("${") && item.to.endsWith("}")
            ? item.to.substring(2, item.to.length - 1)
            : item.to;
        const id = `${prefix}.${target}`;
        return {
            ...carry,
            [id]: {
                code: async (graph) => await iterator(scope, id, item, graph),
                value: item,
            },
        };
    }, {});
}
exports.forEachImport = forEachImport;
function forEachProvider(scope, record, iterator) {
    return Object.entries(record || {}).reduce((carry, [key, items]) => {
        return {
            ...carry,
            ...items.reduce((innerCarry, item) => {
                const id = item.alias ? `${key}.${item.alias}` : `${key}`;
                return {
                    ...innerCarry,
                    [id]: {
                        code: async (graph) => await iterator(scope, key, id, item, graph),
                        value: item,
                    },
                };
            }, {}),
        };
    }, {});
}
exports.forEachProvider = forEachProvider;
// data and resource are namespaced key value maps
function forEachNamespaced(scope, record, iterator, prefix) {
    return Object.entries(record || {}).reduce((outerCarry, [type, items]) => ({
        ...outerCarry,
        ...Object.entries(items).reduce((innerCarry, [key, item]) => {
            const prefixedType = prefix ? `${prefix}.${type}` : type;
            const id = prefix ? `${prefix}.${type}.${key}` : `${type}.${key}`;
            return {
                ...innerCarry,
                [id]: {
                    code: async (graph) => await iterator(scope, prefixedType, key, id, item, graph),
                    value: item,
                },
            };
        }, {}),
    }), {});
}
exports.forEachNamespaced = forEachNamespaced;
function resourceStats(obj) {
    return Object.entries(obj).reduce((carry, [key, value]) => {
        const [provider, ...resourceParts] = key.split("_");
        const shouldBeTracked = telemetryAllowList_json_1.providers.includes(provider);
        const providerKey = shouldBeTracked ? provider : "other";
        const resourceName = shouldBeTracked ? resourceParts.join("_") : "other";
        return {
            ...carry,
            [providerKey]: {
                ...(carry[providerKey] || {}),
                [resourceName]: Object.keys(value).length,
            },
        };
    }, {});
}
exports.resourceStats = resourceStats;
//# sourceMappingURL=data:application/json;base64,