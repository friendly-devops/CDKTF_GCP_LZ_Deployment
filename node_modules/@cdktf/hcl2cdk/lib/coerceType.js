"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findExpressionType = exports.coerceType = exports.typeForCallExpression = void 0;
// Copyright (c) HashiCorp, Inc
// SPDX-License-Identifier: MPL-2.0
const template_1 = __importDefault(require("@babel/template"));
const t = __importStar(require("@babel/types"));
const commons_1 = require("@cdktf/commons");
const deep_equal_1 = __importDefault(require("deep-equal"));
const functions_1 = require("./function-bindings/functions");
const terraformSchema_1 = require("./terraformSchema");
const codemaker_1 = require("codemaker");
function changeValueAccessor(ast, newAccessor) {
    const propertyIdentifier = {
        ...ast.property,
        name: newAccessor,
    };
    return {
        ...ast,
        property: propertyIdentifier,
    };
}
function typeForCallExpression(ast) {
    // Find all cdktf.Fn.* calls
    if (t.isMemberExpression(ast.callee) &&
        t.isMemberExpression(ast.callee.object) &&
        t.isIdentifier(ast.callee.object.object) &&
        ast.callee.object.object.name === "cdktf" &&
        t.isIdentifier(ast.callee.object.property) &&
        ast.callee.object.property.name === "Fn" &&
        t.isIdentifier(ast.callee.property)) {
        const meta = functions_1.tsFunctionsMap[ast.callee.property.name];
        if (meta) {
            return meta.returnType;
        }
        else {
            return "dynamic";
        }
    }
    // cdktf.conditional, cdktf.propertyAccess, cdktf.Op.* are all dynamic
    // By default we assume dynamic
    return "dynamic";
}
exports.typeForCallExpression = typeForCallExpression;
const coerceType = (scope, ast, from, to) => {
    if (to === undefined) {
        return ast;
    }
    if ((0, deep_equal_1.default)(to, from)) {
        return ast;
    }
    const isTerraformVariableOrLocal = ast.type === "MemberExpression" &&
        ast.property.type === "Identifier" &&
        ast.property.name === "value" &&
        ast.object.type === "Identifier" &&
        Object.values(scope.variables).some((knownVars) => knownVars.variableName === ast.object.name &&
            ["var", "local"].includes(knownVars.resource));
    const addTokenToImports = () => scope.importables.push({
        constructName: "Token",
        provider: "cdktf",
    });
    if (Array.isArray(to)) {
        if (to[0] === "list" || to[0] === "set") {
            switch (to[1]) {
                case "string":
                    if (isTerraformVariableOrLocal) {
                        return changeValueAccessor(ast, "listValue");
                    }
                    addTokenToImports();
                    return template_1.default.expression(`Token.asList(%%ast%%)`)({
                        ast: ast,
                    });
                case "number":
                    addTokenToImports();
                    return template_1.default.expression(`Token.asNumberList(%%ast%%)`)({
                        ast: ast,
                    });
                case "bool":
                    addTokenToImports();
                    return template_1.default.expression(`Token.asAny(%%ast%%)`)({
                        ast: ast,
                    });
                default:
                    addTokenToImports();
                    return template_1.default.expression(`Token.asAny(%%ast%%)`)({
                        ast: ast,
                    });
            }
        }
        if (to[0] === "map") {
            switch (to[1]) {
                case "string":
                    addTokenToImports();
                    return template_1.default.expression(`Token.asStringMap(%%ast%%)`)({
                        ast: ast,
                    });
                case "number":
                    addTokenToImports();
                    return template_1.default.expression(`Token.asNumberMap(%%ast%%)`)({
                        ast: ast,
                    });
                case "bool":
                    addTokenToImports();
                    return template_1.default.expression(`Token.asBooleanMap(%%ast%%)`)({
                        ast: ast,
                    });
                default:
                    addTokenToImports();
                    return template_1.default.expression(`Token.asAnyMap(%%ast%%)`)({
                        ast: ast,
                    });
            }
        }
    }
    switch (to) {
        case "number":
            if (isTerraformVariableOrLocal) {
                return changeValueAccessor(ast, "numberValue");
            }
            addTokenToImports();
            return template_1.default.expression(`Token.asNumber(%%ast%%)`)({
                ast: ast,
            });
        case "string":
            if (isTerraformVariableOrLocal) {
                return changeValueAccessor(ast, "stringValue");
            }
            addTokenToImports();
            return template_1.default.expression(`Token.asString(%%ast%%)`)({
                ast: ast,
            });
        case "bool":
            if (isTerraformVariableOrLocal) {
                return changeValueAccessor(ast, "booleanValue");
            }
            addTokenToImports();
            return template_1.default.expression(`Token.asBoolean(%%ast%%)`)({
                ast: ast,
            });
    }
    commons_1.logger.debug(`Could not coerce from ${from} to ${to} for ${ast}`);
    return ast;
};
exports.coerceType = coerceType;
function findExpressionType(scope, ast) {
    const isReferenceWithoutTemplateString = ast.type === "MemberExpression" && ast.object.type === "Identifier";
    // If we have a property to cdktf.propertyAccess call it's dynamic
    if (ast.type === "CallExpression") {
        return typeForCallExpression(ast);
    }
    if (ast.type === "StringLiteral") {
        return "string";
    }
    if (ast.type === "NumericLiteral") {
        return "number";
    }
    if (ast.type === "BooleanLiteral") {
        return "bool";
    }
    // If we only have one reference this is a
    if (isReferenceWithoutTemplateString) {
        const destructuredAst = destructureAst(ast);
        if (!destructuredAst) {
            commons_1.logger.debug(`Could not destructure ast: ${JSON.stringify(ast, null, 2)}`);
            return "dynamic";
        }
        const [astVariableName, ...attributes] = destructuredAst;
        const variable = Object.values(scope.variables).find((x) => x.variableName === astVariableName);
        if (!variable) {
            commons_1.logger.debug(`Could not find variable ${astVariableName} given scope: ${JSON.stringify(scope.variables, null, 2)}`);
            // We don't know, this should not happen, but if it does we assume the worst case and make it dynamic
            return "dynamic";
        }
        if (variable.resource === "var") {
            return "dynamic";
        }
        const { resource: resourceType } = variable;
        const [provider, ...resourceNameFragments] = resourceType.split("_");
        const tfResourcePath = `${provider}.${resourceNameFragments.join("_")}.${attributes.map((x) => (0, codemaker_1.toSnakeCase)(x)).join(".")}`;
        const type = (0, terraformSchema_1.getTypeAtPath)(scope.providerSchema, tfResourcePath);
        // If this is an attribute type we can return it
        if (typeof type === "string" || Array.isArray(type)) {
            return type;
        }
        // Either nothing is found or it's a block type
        return "dynamic";
    }
    return "string";
}
exports.findExpressionType = findExpressionType;
/*
 * Transforms a babel AST into a list of string accessors
 * e.g. foo.bar.baz -> ["foo", "bar", "baz"]
 */
function destructureAst(ast) {
    switch (ast.type) {
        case "Identifier":
            return [ast.name];
        case "MemberExpression":
            const object = destructureAst(ast.object);
            const property = destructureAst(ast.property);
            if (object && property) {
                return [...object, ...property];
            }
            else {
                return undefined;
            }
        default:
            return undefined;
    }
}
//# sourceMappingURL=data:application/json;base64,