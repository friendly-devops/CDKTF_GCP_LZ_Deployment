"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.attributeNameToCdktfName = exports.isRegistryModule = exports.convertProject = exports.getTerraformConfigFromDir = exports.convert = exports.convertToTypescript = exports.parseProviderRequirements = exports.getParsedHcl = exports.CODE_MARKER = void 0;
// Copyright (c) HashiCorp, Inc
// SPDX-License-Identifier: MPL-2.0
const hcl2json_1 = require("@cdktf/hcl2json");
const provider_generator_1 = require("@cdktf/provider-generator");
Object.defineProperty(exports, "isRegistryModule", { enumerable: true, get: function () { return provider_generator_1.isRegistryModule; } });
const t = __importStar(require("@babel/types"));
const prettier_1 = __importDefault(require("prettier"));
const path = __importStar(require("path"));
const glob = __importStar(require("glob"));
const fs = __importStar(require("fs"));
const graphology_1 = require("graphology");
const rosetta = __importStar(require("jsii-rosetta"));
const schema_1 = require("./schema");
const references_1 = require("./references");
const generation_1 = require("./generation");
const iteration_1 = require("./iteration");
const provider_1 = require("./provider");
const utils_1 = require("./utils");
const generation_2 = require("./generation");
Object.defineProperty(exports, "attributeNameToCdktfName", { enumerable: true, get: function () { return generation_2.attributeNameToCdktfName; } });
const jsii_rosetta_workarounds_1 = require("./jsii-rosetta-workarounds");
const iteration_2 = require("./iteration");
exports.CODE_MARKER = "// define resources here";
async function getParsedHcl(hcl) {
    utils_1.logger.debug(`Parsing HCL: ${hcl}`);
    // Get the JSON representation of the HCL
    let json;
    try {
        json = await (0, hcl2json_1.parse)("terraform.tf", hcl);
    }
    catch (err) {
        utils_1.logger.error(`Failed to parse HCL: ${err}`);
        throw new Error(`Error: Could not parse HCL, this means either that the HCL passed is invalid or that you found a bug. If the HCL seems valid, please file a bug under https://cdk.tf/bugs/new/convert`);
    }
    // Ensure the JSON representation matches the expected structure
    let plan;
    try {
        plan = schema_1.schema.parse(json);
    }
    catch (err) {
        throw new Error(`Error: HCL-JSON does not conform to schema. This is not expected, please file a bug under https://cdk.tf/bugs/new/convert
Please include this information:
${JSON.stringify(err.errors)}`);
    }
    return plan;
}
exports.getParsedHcl = getParsedHcl;
async function parseProviderRequirements(hcl) {
    utils_1.logger.debug("Parsing provider requirements");
    const plan = await getParsedHcl(hcl);
    return (0, provider_1.getProviderRequirements)(plan);
}
exports.parseProviderRequirements = parseProviderRequirements;
async function convertToTypescript(hcl, providerSchema, codeContainer) {
    var _a;
    utils_1.logger.debug("Converting to typescript");
    const plan = await getParsedHcl(hcl);
    // Each key in the scope needs to be unique, therefore we save them in a set
    // Each variable needs to be unique as well, we save them in a record so we can identify if two variables are the same
    const scope = {
        providerSchema,
        providerGenerator: Object.keys(providerSchema.provider_schemas || {}).reduce((carry, fqpn) => {
            const providerGenerator = new provider_generator_1.TerraformProviderGenerator(new provider_generator_1.CodeMaker(), providerSchema);
            providerGenerator.buildResourceModels(fqpn); // can't use that type on the keys yet, since we are not on TS >=4.4 yet :sadcat:
            return { ...carry, [fqpn]: providerGenerator };
        }, {}),
        constructs: new Set(),
        variables: {},
        hasTokenBasedTypeCoercion: false,
        nodeIds: [],
        importables: [],
        topLevelConfig: {},
    };
    const graph = new graphology_1.DirectedGraph();
    // Get all items in the JSON as a map of id to function that generates the AST
    // We will use this to construct the nodes for a dependency graph
    // We need to use a function here because the same node has different representation based on if it's referenced by another one
    const nodeMap = {
        ...(0, iteration_1.forEachProvider)(scope, plan.provider, generation_1.provider),
        ...(0, iteration_1.forEachGlobal)(scope, "var", plan.variable, generation_1.variable),
        // locals are a special case
        ...(0, iteration_1.forEachGlobal)(scope, "local", Array.isArray(plan.locals)
            ? plan.locals.reduce((carry, locals) => ({ ...carry, ...locals }), {})
            : {}, generation_1.local),
        ...(0, iteration_1.forEachGlobal)(scope, "out", plan.output, generation_1.output),
        ...(0, iteration_1.forEachGlobal)(scope, "module", plan.module, generation_1.modules),
        ...(0, iteration_2.forEachImport)(scope, "import", plan.import, generation_1.imports),
        ...(0, iteration_1.forEachNamespaced)(scope, plan.resource, generation_1.resource),
        ...(0, iteration_1.forEachNamespaced)(scope, plan.data, generation_1.resource, "data"),
    };
    // Add all nodes to the dependency graph so we can detect if an edge is added for an unknown link
    Object.entries(nodeMap).forEach(([key, value]) => {
        utils_1.logger.debug(`Adding node '${key}' to graph`);
        graph.addNode(key, value);
    });
    // Finding references becomes easier of the to be referenced ids are already known
    const nodeIds = Object.keys(nodeMap);
    scope.nodeIds = nodeIds;
    async function addEdges(id, value) {
        (await (0, references_1.findUsedReferences)(nodeIds, value)).forEach((ref) => {
            if (!graph.hasDirectedEdge(ref.referencee.id, id) &&
                graph.hasNode(ref.referencee.id) // in case the referencee is a dynamic variable
            ) {
                if (!graph.hasNode(id)) {
                    throw new Error(`The dependency graph is expected to link from ${ref.referencee.id} to ${id} but ${id} does not exist. 
            These nodes exist: ${graph.nodes().join("\n")}`);
                }
                // The graph should have no self-references
                if (id === ref.referencee.id) {
                    utils_1.logger.debug(`Skipping self-reference for ${id}`);
                    return;
                }
                utils_1.logger.debug(`Adding edge from ${ref.referencee.id} to ${id}`);
                graph.addDirectedEdge(ref.referencee.id, id, { ref });
            }
        });
    }
    // We recursively inspect each resource value to find references to other values
    // We add these to a dependency graph so that the programming code has the right order
    async function addGlobalEdges(_scope, _key, id, value) {
        await addEdges(id, value);
    }
    async function addProviderEdges(_scope, _key, id, value) {
        await addEdges(id, value);
    }
    async function addNamespacedEdges(_scope, _type, _key, id, value) {
        await addEdges(id, value);
    }
    await Promise.all(Object.values({
        ...(0, iteration_1.forEachProvider)(scope, plan.provider, addProviderEdges),
        ...(0, iteration_1.forEachGlobal)(scope, "var", plan.variable, addGlobalEdges),
        // locals are a special case
        ...(0, iteration_1.forEachGlobal)(scope, "local", Array.isArray(plan.locals)
            ? plan.locals.reduce((carry, locals) => ({ ...carry, ...locals }), {})
            : {}, addGlobalEdges),
        ...(0, iteration_1.forEachGlobal)(scope, "out", plan.output, addGlobalEdges),
        ...(0, iteration_1.forEachGlobal)(scope, "module", plan.module, addGlobalEdges),
        ...(0, iteration_1.forEachNamespaced)(scope, plan.resource, addNamespacedEdges),
        ...(0, iteration_1.forEachNamespaced)(scope, plan.data, addNamespacedEdges, "data"),
    }).map(({ code: addEdgesToGraph }) => addEdgesToGraph(graph)));
    utils_1.logger.debug(`Graph: ${JSON.stringify(graph, null, 2)}`);
    utils_1.logger.debug(`Starting to assemble the typescript code`);
    // We traverse the dependency graph to get the unordered JSON nodes into an ordered array
    // where no node is referenced before it's defined
    // As we check that the nodes on both ends of an edge exist we can be sure
    // that no infinite loop exists, there can be no stray dependency on a node
    const expressions = [];
    let nodesToVisit = [...nodeIds];
    // This ensures we detect cycles and don't end up in an endless loop
    let nodesVisitedThisIteration = 0;
    do {
        nodesVisitedThisIteration = 0;
        // Find next nodes to visit
        const nodeExpressionGenerators = graph.mapNodes((nodeId, { code }) => {
            if (!nodesToVisit.includes(nodeId)) {
                return undefined;
            }
            const unresolvedDependencies = graph
                .inNeighbors(nodeId)
                .filter((item) => nodesToVisit.includes(item));
            if (unresolvedDependencies.length === 0) {
                nodesToVisit = nodesToVisit.filter((id) => nodeId !== id);
                nodesVisitedThisIteration = nodesVisitedThisIteration + 1;
                utils_1.logger.debug(`Visiting node ${nodeId}`);
                return code;
            }
            return undefined;
        });
        // Generate the code for the nodes
        for (const code of nodeExpressionGenerators) {
            if (code) {
                expressions.push(...(await code(graph)));
            }
        }
        utils_1.logger.debug(`${nodesToVisit.length} unvisited nodes: ${nodesToVisit.join(", ")}`);
    } while (nodesToVisit.length > 0 && nodesVisitedThisIteration != 0);
    if (nodesToVisit.length > 0) {
        throw new Error(`There are ${nodesToVisit.length} terraform elements that could not be visited. 
      This is likely due to a cycle in the dependency graph. 
      These nodes are: ${nodesToVisit.join(", ")}`);
    }
    utils_1.logger.debug(`${nodesToVisit.length} unvisited nodes: ${nodesToVisit.join(", ")}`);
    const backendExpressions = (await Promise.all(((_a = plan.terraform) === null || _a === void 0 ? void 0 : _a.map((terraform) => (0, generation_1.backendToExpression)(scope, terraform.backend))) || [Promise.resolve([])])).reduce((carry, item) => [...carry, ...item], []);
    utils_1.logger.debug(`Using these backend expressions: ${JSON.stringify(backendExpressions, null, 2)}`);
    // We collect all module sources
    const moduleRequirements = [
        ...new Set(Object.values(plan.module || {}).reduce((carry, moduleBlock) => [
            ...carry,
            ...moduleBlock.reduce((arr, { source, version }) => [
                ...arr,
                version ? `${source}@${version}` : source,
            ], []),
        ], []) || []),
    ];
    utils_1.logger.debug(`Found these modules: ${JSON.stringify(moduleRequirements, null, 2)}`);
    if (Object.keys(plan.variable || {}).length > 0 && expressions.length > 0) {
        expressions[0] = t.addComment(expressions[0], "leading", `Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
You can read more about this at https://cdk.tf/variables`);
    }
    const providerRequirements = (0, provider_1.getProviderRequirements)(plan);
    utils_1.logger.debug(`Found these provider requirements: ${JSON.stringify(providerRequirements, null, 2)}`);
    // We add a comment if there are providers with missing schema information
    const providersLackingSchema = Object.keys(providerRequirements).filter((providerName) => providerName !== "terraform" &&
        !Object.keys(providerSchema.provider_schemas || {}).some((schemaName) => schemaName.endsWith(providerName)));
    utils_1.logger.debug(`${providersLackingSchema.length} providers lack schema information: ${providersLackingSchema.join(", ")}`);
    if (providersLackingSchema.length > 0) {
        expressions[0] = t.addComment(expressions[0], "leading", `The following providers are missing schema information and might need manual adjustments to synthesize correctly: ${providersLackingSchema.join(", ")}.
For a more precise conversion please use the --provider flag in convert.`);
    }
    // Always add constructs
    scope.importables.push({
        constructName: "Construct",
        provider: "constructs",
    });
    if (scope.hasTokenBasedTypeCoercion) {
        scope.importables.push({
            constructName: "Token",
            provider: "cdktf",
        });
    }
    // Add specific import for codeContainer
    (0, generation_1.addImportForCodeContainer)(scope, codeContainer);
    const constructImports = (0, generation_1.buildImports)(scope.importables);
    const code = [...(backendExpressions || []), ...expressions];
    const configTypeName = Object.keys(scope.topLevelConfig).length > 0 ? "MyConfig" : undefined;
    const classConfig = configTypeName
        ? [(0, generation_1.generateConfigType)(configTypeName, scope.topLevelConfig)]
        : [];
    // We split up the generated code so that users can have more control over what to insert where
    return {
        // TODO: Remove imports and code because rosetta won't be able to translate them
        all: await (0, generation_1.gen)([
            ...constructImports,
            ...(0, generation_1.moduleImports)(plan.module),
            ...classConfig,
            (0, generation_1.wrapCodeInConstructor)(codeContainer, code, "MyConvertedCode", configTypeName),
        ]),
        imports: await (0, generation_1.gen)([...constructImports, ...(0, generation_1.moduleImports)(plan.module)]),
        code: await (0, generation_1.gen)(code),
        providers: Object.entries(providerRequirements).map(([source, version]) => version === "*" ? source : `${source}@${version}`),
        modules: moduleRequirements,
        // We track some usage data to make it easier to understand what is used
        stats: {
            numberOfModules: moduleRequirements.length,
            numberOfProviders: Object.keys(providerRequirements).length,
            resources: (0, iteration_1.resourceStats)(plan.resource || {}),
            data: (0, iteration_1.resourceStats)(plan.data || {}),
            convertedLines: hcl.split("\n").length,
        },
    };
}
exports.convertToTypescript = convertToTypescript;
const translators = {
    python: {
        visitor: () => new rosetta.PythonVisitor(),
        postTranslationMutation: jsii_rosetta_workarounds_1.replacePythonImports,
    },
    java: {
        visitor: () => new rosetta.JavaVisitor(),
        postTranslationMutation: jsii_rosetta_workarounds_1.replaceJavaImports,
    },
    csharp: {
        visitor: () => new rosetta.CSharpVisitor(),
        postTranslationMutation: jsii_rosetta_workarounds_1.replaceCsharpImports,
    },
    go: {
        visitor: () => new rosetta.GoVisitor(),
        postTranslationMutation: jsii_rosetta_workarounds_1.replaceGoImports,
    },
};
function translatorForLanguage(language) {
    return (file, throwOnTranslationError) => {
        const { visitor, postTranslationMutation } = translators[language];
        const { translation, diagnostics } = rosetta.translateTypeScript(file, visitor(), throwOnTranslationError ? { includeCompilerDiagnostics: true } : {});
        if (throwOnTranslationError &&
            diagnostics.filter((diag) => diag.isError).length > 0) {
            utils_1.logger.debug(`Could not translate TS to ${language}:\n${file.contents}`);
            throw new Error(`Could not translate TS to ${language}: ${diagnostics
                .map((diag) => diag.formattedMessage)
                .join("\n")}`);
        }
        return postTranslationMutation(translation);
    };
}
async function convert(hcl, { language, providerSchema, throwOnTranslationError = false, codeContainer = "cdktf.TerraformStack", }) {
    const fileName = "terraform.tf";
    const translater = language === "typescript"
        ? (file, _throwOnTranslationError) => file.contents
        : translatorForLanguage(language);
    if (!translater) {
        throw new Error("Unsupported language used: " + language);
    }
    const tsCode = await convertToTypescript(hcl, providerSchema, codeContainer);
    return {
        ...tsCode,
        all: translater({ fileName, contents: tsCode.all }, throwOnTranslationError),
        imports: translater({ fileName, contents: tsCode.imports }, false),
        code: translater({ fileName, contents: tsCode.code }, false),
        stats: { ...tsCode.stats, language },
    };
}
exports.convert = convert;
function getTerraformConfigFromDir(importPath) {
    const absPath = path.resolve(importPath);
    const fileContents = glob
        .sync("./*.tf", { cwd: absPath })
        .map((p) => fs.readFileSync(path.resolve(absPath, p), "utf8"));
    return fileContents.join("\n");
}
exports.getTerraformConfigFromDir = getTerraformConfigFromDir;
async function convertProject(combinedHcl, { language, providerSchema }) {
    if (language !== "typescript") {
        throw new Error("Unsupported language used: " + language);
    }
    const { imports, code, providers, modules: tfModules, stats, } = await convert(combinedHcl, {
        language,
        providerSchema,
    });
    return {
        code: (inputMainFile) => {
            const importMainFile = [imports, inputMainFile].join("\n");
            const outputMainFile = importMainFile.replace(exports.CODE_MARKER, code);
            return prettier_1.default.format(outputMainFile, { parser: "babel" });
        },
        cdktfJson: (inputCdktfJson) => {
            const cdktfJson = { ...inputCdktfJson };
            cdktfJson.terraformProviders = providers;
            cdktfJson.terraformModules = tfModules;
            return cdktfJson;
        },
        stats,
    };
}
exports.convertProject = convertProject;
//# sourceMappingURL=data:application/json;base64,