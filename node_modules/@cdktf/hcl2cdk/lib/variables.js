"use strict";
/**
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: MPL-2.0
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.variableName = exports.constructAst = exports.referenceToVariableName = void 0;
const t = __importStar(require("@babel/types"));
const utils_1 = require("./utils");
const provider_generator_1 = require("@cdktf/provider-generator");
const provider_1 = require("./provider");
const reserved_words_1 = __importDefault(require("reserved-words"));
function referenceToVariableName(scope, ref) {
    const parts = ref.referencee.id.split(".");
    const resource = parts[0] === "data" ? `${parts[0]}.${parts[1]}` : parts[0];
    const name = parts[0] === "data" ? parts[2] : parts[1];
    return variableName(scope, resource, name);
}
exports.referenceToVariableName = referenceToVariableName;
function validVarName(name) {
    if (reserved_words_1.default.check(name)) {
        return `${name}Var`;
    }
    if (!Number.isNaN(parseInt(name[0], 10))) {
        return `d${name}`;
    }
    return name;
}
function getUniqueName(scope, provider, type) {
    var _a;
    // early abort on cdktf
    if (provider === "cdktf") {
        return (0, utils_1.pascalCase)(type.replace("cdktf_", ""));
    }
    if (provider === "NullProvider") {
        return (0, utils_1.pascalCase)(type.replace("NullProvider_", ""));
    }
    // Special handling for provider blocks, e.g. aws_AwsProvider
    if (type === `${(0, utils_1.pascalCase)(provider)}Provider`) {
        return (0, provider_generator_1.sanitizeClassOrNamespaceName)(type, true);
    }
    const fullProviderName = (0, provider_1.getFullProviderName)(scope.providerSchema, provider);
    if (fullProviderName && scope.providerGenerator[fullProviderName]) {
        return (_a = scope.providerGenerator[fullProviderName]) === null || _a === void 0 ? void 0 : _a.getClassNameForResource(type);
    }
    else {
        // If we can not find the class name for a resource the caller needs to find a sensible default
        return null;
    }
}
function getResourceNamespace(scope, provider, resource, isDataSource, type) {
    var _a;
    // happens e.g. for references to cdktf.TerraformStack (and similar) in generated code
    if (provider === "cdktf") {
        return undefined;
    }
    // e.g. awsProvider -> provider
    if (resource === (0, utils_1.pascalCase)(`${provider}_provider`) ||
        (provider === "NullProvider" && resource === "NullProvider")) {
        return "provider";
    }
    const fullProviderName = (0, provider_1.getFullProviderName)(scope.providerSchema, provider);
    if (fullProviderName && scope.providerGenerator[fullProviderName]) {
        return (0, utils_1.camelCase)((_a = scope.providerGenerator[fullProviderName]) === null || _a === void 0 ? void 0 : _a.getNamespaceNameForResource(type.replace(/\./g, "_")));
    }
    if (isDataSource) {
        return (0, utils_1.camelCase)((0, provider_generator_1.sanitizeClassOrNamespaceName)(`data_${provider}_${resource}`));
    }
    return (0, utils_1.camelCase)((0, provider_generator_1.sanitizeClassOrNamespaceName)(resource));
}
function constructAst(scope, type, isModuleImport) {
    if (isModuleImport) {
        return t.memberExpression(t.identifier(type), t.identifier(type));
    }
    if (type.startsWith("var.")) {
        scope.importables.push({
            provider: "cdktf",
            constructName: "TerraformVariable",
        });
        return t.identifier("TerraformVariable");
    }
    if (type === "terraform.data") {
        scope.importables.push({
            constructName: "DataResource",
            provider: "cdktf",
        });
        return t.identifier("DataResource");
    }
    // resources or data sources
    if (!type.includes("./") && type.includes(".")) {
        const parts = type.split(".");
        if (parts[0] === "data") {
            const [, provider, resource] = parts;
            const namespace = getResourceNamespace(scope, provider, resource, true, type);
            const resourceName = getUniqueName(scope, provider, parts.join("_")) ||
                (0, utils_1.pascalCase)((0, provider_generator_1.sanitizeClassOrNamespaceName)(`data_${provider}_${resource}`));
            scope.importables.push({
                provider: provider,
                constructName: resourceName,
                namespace,
            });
            if (namespace) {
                return t.identifier(resourceName); // e.g. DataAwsInstance
            }
            return t.identifier(resourceName); // e.g. DataAwsNatGateway
        }
        const [provider, resource] = parts;
        const namespace = getResourceNamespace(scope, provider, resource, false, type);
        const resourceName = getUniqueName(scope, provider, parts.join("_")) ||
            (0, utils_1.pascalCase)((0, provider_generator_1.sanitizeClassOrNamespaceName)(resource));
        scope.importables.push({
            provider: provider,
            constructName: resourceName,
            namespace,
        });
        if (namespace) {
            return t.identifier(resourceName); // e.g. Instance
        }
        return t.identifier(resourceName); // e.g. BigQueryTable
    }
    return t.identifier((0, utils_1.pascalCase)(type));
}
exports.constructAst = constructAst;
function variableName(scope, resource, name) {
    const consistentResourceName = resource.replace(/\./g, "_");
    // name collision, we need to prefix the name
    if (scope.variables[name]) {
        if (consistentResourceName === scope.variables[name].resource) {
            return scope.variables[name].variableName;
        }
        // we only cache one per name
        return validVarName((0, utils_1.camelCase)([resource, name].join("_")));
    }
    const variableName = validVarName((0, utils_1.camelCase)(name));
    scope.variables[name] = {
        variableName,
        resource: consistentResourceName,
    };
    return variableName;
}
exports.variableName = variableName;
//# sourceMappingURL=data:application/json;base64,