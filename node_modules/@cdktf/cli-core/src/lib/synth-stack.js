"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SynthStack = exports.StackDependencies = void 0;
// Copyright (c) HashiCorp, Inc
// SPDX-License-Identifier: MPL-2.0
const fs = __importStar(require("fs-extra"));
const path = __importStar(require("path"));
const chalk = __importStar(require("chalk"));
const indent_string_1 = __importDefault(require("indent-string"));
const cdktf_1 = require("cdktf");
const perf_hooks_1 = require("perf_hooks");
const commons_1 = require("@cdktf/commons");
const cdktf_config_1 = require("./cdktf-config");
const hcl_tools_1 = require("@cdktf/hcl-tools");
const chalkColour = new chalk.Instance();
class StackDependencies {
    constructor(stacks) {
        this.stacks = stacks;
        this.pendingStacks = [];
        this.inflightStacks = [];
        this.deployedStacks = [];
        this.pendingStacks = [...this.stacks];
    }
    startRun(stack) {
        this.pendingStacks = this.pendingStacks.filter((item) => item.name !== stack.name);
        this.inflightStacks.push(stack);
    }
    finishRun(stack) {
        this.inflightStacks = this.inflightStacks.filter((item) => item.name !== stack.name);
        this.deployedStacks.push(stack);
    }
    get pendingDeployableStacks() {
        return this.pendingStacks.filter((pendingStack) => {
            const unmetDependencies = pendingStack.dependencies.filter((dependency) => {
                return !this.deployedStacks.some((deployedStack) => {
                    return deployedStack.name === dependency;
                });
            });
            return unmetDependencies.length === 0;
        });
    }
}
exports.StackDependencies = StackDependencies;
class SynthStack {
    static async synth(abortSignal, command, outdir, workingDirectory = process.cwd(), graceful = false, // will not exit the process but rethrow the error instead
    noColor = false, synthOrigin, hcl = false) {
        // start performance timer
        const startTime = perf_hooks_1.performance.now();
        const isDirectory = (source) => fs.lstatSync(source).isDirectory();
        const getDirectories = (source) => {
            if (!fs.existsSync(source))
                return [];
            return fs
                .readdirSync(source)
                .map((name) => path.join(source, name))
                .filter(isDirectory);
        };
        const existingDirectories = getDirectories(path.join(outdir, cdktf_1.Manifest.stacksFolder));
        const env = Object.fromEntries(Object.entries(process.env).filter(
        // We don't want to pass Terraform variables to the synth command since they should only be used at execution time
        ([key]) => !key.startsWith("TF_VAR_")));
        // Increases the default memory available to Node.js when synthesizing a TypeScript CDK project.
        const nodeOptsSwitch = "--max-old-space-size";
        const nodeOptsSetting = `${nodeOptsSwitch}=4096`;
        if (env.NODE_OPTIONS && !env.NODE_OPTIONS.includes(nodeOptsSwitch)) {
            commons_1.logger.warn(`WARNING: Found NODE_OPTIONS environment variable without a setting for ${nodeOptsSwitch}
The synthesizing step for TypeScript may need an increased amount of memory if multiple large providers
are used with locally generated bindings. You can ignore this if you don't use CDKTF with TypeScript.
If not present, the cdktf-cli sets it to NODE_OPTIONS="${nodeOptsSetting}" by default. But as
your environment already contains a NODE_OPTIONS variable, we won't override it. Hence, the app command
might fail while synthesizing with an out of memory error.`);
        }
        else if (!env.NODE_OPTIONS) {
            // increase memory to allow ts-node (when using TypeScript) to handle large amounts of generated code in memory
            env.NODE_OPTIONS = `${env.NODE_OPTIONS || ""} ${nodeOptsSetting}`.trim();
        }
        const currentContext = process.env[cdktf_1.CONTEXT_ENV]
            ? JSON.parse(process.env.CDKTF_CONTEXT_JSON)
            : {};
        const relativeModules = getRelativeTerraformModules();
        try {
            await (0, commons_1.shell)(command, [], {
                shell: true,
                env: {
                    ...env,
                    CDKTF_OUTDIR: outdir,
                    CDKTF_CONTINUE_SYNTH_ON_ERROR_ANNOTATIONS: "true",
                    [cdktf_1.CONTEXT_ENV]: JSON.stringify({
                        ...currentContext,
                        cdktfRelativeModules: relativeModules,
                    }),
                    SYNTH_HCL_OUTPUT: hcl.toString(),
                },
                cwd: workingDirectory,
                signal: abortSignal,
                noColor: noColor,
            });
        }
        catch (e) {
            const errorOutput = chalkColour `{redBright cdktf encountered an error while synthesizing}

Synth command: {blue ${command}}
Error:         {redBright ${e.message}}
${e.stderr
                ? chalkColour `
Command output on stderr:

{dim ${(0, indent_string_1.default)(e.stderr, 4)}}
`
                : ""}
${e.stdout
                ? chalkColour `
Command output on stdout:

{dim ${(0, indent_string_1.default)(e.stdout, 4)}}
`
                : ""}`;
            await this.synthErrorTelemetry(synthOrigin);
            if (graceful) {
                e.errorOutput = errorOutput;
                throw e;
            }
            console.error(`ERROR: ${errorOutput}`);
            process.exit(1);
        }
        // Apply formatting to HCL files if hcl output was selected
        if (hcl) {
            await SynthStack.formatHclFiles(outdir);
        }
        // end performance timer
        const endTime = perf_hooks_1.performance.now();
        let stacks = [];
        try {
            stacks = await SynthStack.readSynthesizedStacks(outdir);
        }
        catch (e) {
            const errorMessage = `ERROR: synthesis failed, because app was expected to call 'synth()', but didn't. Thus "${outdir}/${cdktf_1.Manifest.fileName}"  was not created: ${e}`;
            if (graceful) {
                throw new Error(errorMessage);
            }
            commons_1.logger.error(errorMessage);
            process.exit(1);
        }
        await this.synthTelemetry(endTime - startTime, stacks, synthOrigin);
        if (stacks.length === 0) {
            commons_1.logger.error("ERROR: No Terraform code synthesized.");
        }
        const stackNames = stacks.map((s) => s.name);
        const orphanedDirectories = existingDirectories.filter((e) => !stackNames.includes(path.basename(e)));
        for (const orphanedDirectory of orphanedDirectories) {
            fs.rmSync(orphanedDirectory, { recursive: true });
        }
        return stacks;
    }
    static async formatHclFiles(outDir) {
        const manifestPath = path.join(outDir, cdktf_1.Manifest.fileName);
        if (!(await fs.pathExists(manifestPath))) {
            throw new Error(`Could not find manifest file at ${manifestPath}. In case --skip-synth was passed, please try again without the flag.`);
        }
        const manifest = JSON.parse(fs.readFileSync(manifestPath).toString());
        for (const stackName in manifest.stacks) {
            const stack = manifest.stacks[stackName];
            const filePath = path.join(outDir, stack.synthesizedStackPath);
            const hclContent = fs.readFileSync(filePath).toString();
            const formattedHcl = await (0, hcl_tools_1.format)(hclContent);
            fs.writeFileSync(filePath, formattedHcl);
        }
    }
    static async readSynthesizedStacks(outdir) {
        const manifestPath = path.join(outdir, cdktf_1.Manifest.fileName);
        if (!(await fs.pathExists(manifestPath))) {
            throw new Error(`Could not find manifest file at ${manifestPath}. In case --skip-synth was passed, please try again without the flag.`);
        }
        const stacks = [];
        const manifest = JSON.parse(fs.readFileSync(manifestPath).toString());
        for (const stackName in manifest.stacks) {
            const stack = manifest.stacks[stackName];
            const filePath = path.join(outdir, stack.synthesizedStackPath);
            let jsonContent = {};
            if (filePath.endsWith(".tf.json")) {
                jsonContent = JSON.parse(fs.readFileSync(filePath).toString());
            }
            else {
                const metadataPath = path.join(outdir, stack.stackMetadataPath);
                jsonContent = JSON.parse(fs.readFileSync(metadataPath).toString());
            }
            stacks.push({
                ...stack,
                workingDirectory: path.join(outdir, stack.workingDirectory),
                content: JSON.stringify(jsonContent, null, 2),
            });
        }
        return stacks;
    }
    static async synthTelemetry(totalTime, stacks, synthOrigin) {
        const config = (0, commons_1.readConfigSync)();
        await (0, commons_1.sendTelemetry)("synth", {
            totalTime: totalTime,
            language: config.language,
            synthOrigin,
            stackMetadata: stacks.map((stack) => JSON.parse(stack.content)["//"].metadata),
            requiredProviders: stacks.map((stack) => JSON.parse(stack.content)["terraform"].required_providers),
        });
    }
    static async synthErrorTelemetry(synthOrigin) {
        await (0, commons_1.sendTelemetry)("synth", { error: true, synthOrigin });
    }
}
exports.SynthStack = SynthStack;
function getRelativeTerraformModules() {
    let cfg;
    try {
        cfg = cdktf_config_1.CdktfConfig.read();
    }
    catch (e) {
        commons_1.logger.trace("Could not read cdktf.json: " + e);
        return [];
    }
    return cfg.terraformModules.filter((mod) => {
        return typeof mod === "string"
            ? mod.startsWith("./") || mod.startsWith("../")
            : mod.source.startsWith("./") || mod.source.startsWith("../");
    });
}
//# sourceMappingURL=data:application/json;base64,