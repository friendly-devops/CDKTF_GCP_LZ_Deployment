"use strict";
// Copyright (c) HashiCorp, Inc
// SPDX-License-Identifier: MPL-2.0
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPrebuiltProviderVersionInformation = exports.getPrebuiltProviderVersions = exports.getAllPrebuiltProviderVersions = exports.getPrebuiltProviderRepositoryName = exports.getNpmPackageName = exports.getAllPrebuiltProviders = exports.resetFetchCache = void 0;
const https_proxy_agent_1 = require("https-proxy-agent");
const node_fetch_1 = __importDefault(require("node-fetch"));
const semver = __importStar(require("semver"));
const commons_1 = require("@cdktf/commons");
const dependency_manager_1 = require("./dependency-manager");
const version_constraints_1 = require("./version-constraints");
const proxy = process.env.http_proxy || process.env.HTTP_PROXY;
let agent;
if (proxy) {
    agent = new https_proxy_agent_1.HttpsProxyAgent(proxy);
}
// uses https://github.com/hashicorp/cdktf-repository-manager/blob/main/provider.json
const providersMapUrl = `https://www.cdk.tf/.well-known/prebuilt-providers.json`;
const fetchCache = new Map();
async function cachedFetch(url) {
    if (fetchCache.has(url)) {
        return fetchCache.get(url);
    }
    const responseBody = await fetchWrapped(url);
    fetchCache.set(url, responseBody);
    return responseBody;
}
// For testing purposes only
async function resetFetchCache() {
    fetchCache.clear();
}
exports.resetFetchCache = resetFetchCache;
async function fetchWrapped(url) {
    let response;
    try {
        response = await (0, node_fetch_1.default)(url, {
            agent,
            headers: { "User-Agent": "HashiCorp/cdktf-cli" },
        });
    }
    catch (e) {
        // Fetch only fails here because of connectivity issues
        commons_1.logger.error("Unable to request pre-built provider information: Network error, please check if you're connected to the internet and try again");
        throw new Error("Connection error");
    }
    if (!response.ok) {
        if (response.status >= 500) {
            throw new Error("Unexpected error while finding pre-built provider. Please try again.");
        }
        if (response.status === 404) {
            throw new Error(`Pre-built provider information not found`);
        }
        if (response.status >= 400) {
            const responseText = await response.text();
            // This means that we're sending a bad request. We should record this in sentry too.
            commons_1.logger.error(`Received ${response.status} response from ${url}: ${responseText}`);
            throw new Error("Unexpected error while finding pre-built provider. Please try again.");
        }
    }
    return response.json();
}
async function getAllPrebuiltProviders() {
    return cachedFetch(providersMapUrl);
}
exports.getAllPrebuiltProviders = getAllPrebuiltProviders;
async function getNpmPackageName(constraint) {
    const providers = await getAllPrebuiltProviders();
    const entry = Object.entries(providers).find(([, p]) => dependency_manager_1.ProviderConstraint.fromConfigEntry(p).source.toLowerCase() ===
        constraint.source.toLowerCase());
    if (!entry) {
        return undefined; // no pre-built provider found for this constraint
    }
    const name = entry[0];
    return `@cdktf/provider-${name}`;
}
exports.getNpmPackageName = getNpmPackageName;
async function getPrebuiltProviderRepositoryName(packageName) {
    var _a;
    const url = `https://registry.npmjs.org/${packageName}`;
    const result = await cachedFetch(url);
    const repositoryUrl = (_a = result === null || result === void 0 ? void 0 : result.repository) === null || _a === void 0 ? void 0 : _a.url;
    if (!repositoryUrl)
        return "";
    const repositoryRegex = /^git\+https:\/\/(github.com\/.*)\.git$/;
    const match = repositoryRegex.exec(repositoryUrl);
    if (!match)
        return "";
    return match[1];
}
exports.getPrebuiltProviderRepositoryName = getPrebuiltProviderRepositoryName;
async function getAllPrebuiltProviderVersions(packageName) {
    const url = `https://registry.npmjs.org/${packageName}`;
    const result = await cachedFetch(url);
    const versions = Object.entries(result.versions)
        .map(([version, packageJson]) => {
        var _a, _b;
        const provider = (_a = packageJson.cdktf) === null || _a === void 0 ? void 0 : _a.provider;
        if (!provider || !((_b = packageJson.peerDependencies) === null || _b === void 0 ? void 0 : _b.cdktf)) {
            commons_1.logger.trace(`skipping version ${version} of ${packageName} as it does not have a cdktf.provider or peerDependencies.cdktf in package.json`);
            return undefined;
        }
        return {
            packageVersion: version,
            providerVersion: provider.version,
            cdktfPeerDependencyConstraint: packageJson.peerDependencies.cdktf,
        };
    })
        .filter((v) => v !== undefined);
    // latest version first, sorted by packageVersion as that
    // one always increases while the providerVersion may not
    versions.sort((a, b) => {
        if (semver.gt(a.packageVersion, b.packageVersion)) {
            return -1;
        }
        if (semver.lt(a.packageVersion, b.packageVersion)) {
            return 1;
        }
        return 0;
    });
    return versions;
}
exports.getAllPrebuiltProviderVersions = getAllPrebuiltProviderVersions;
function cdktfVersionMatches(cdktfVersion, cdktfPeerDependencyConstraint) {
    return semver.satisfies(cdktfVersion, cdktfPeerDependencyConstraint);
}
async function getPrebuiltProviderVersions(constraint, cdktfVersion) {
    const providerName = await getNpmPackageName(constraint); // TODO: add lots of debug logs to this call
    // no pre-built provider exists
    if (!providerName) {
        return null;
    }
    const versions = await getAllPrebuiltProviderVersions(providerName);
    commons_1.logger.debug(`Found versions for ${providerName}: ${JSON.stringify(versions, null, 2)}`);
    // find first the version that matches the requested provider version and cdktf version
    const matchingVersions = versions.filter((v) => {
        if (!cdktfVersionMatches(cdktfVersion, v.cdktfPeerDependencyConstraint)) {
            return false; // skip if cdktf version does not match
        }
        if (constraint.version) {
            return (0, version_constraints_1.versionMatchesConstraint)(v.providerVersion, constraint.version);
        }
        return true; // if no version constraint is passed, return true on the first match
    });
    if (!matchingVersions.length) {
        return null;
    }
    const npmPackageVersions = matchingVersions
        .map((matchingVersion) => matchingVersion.packageVersion)
        .sort(semver.compare)
        .reverse();
    return npmPackageVersions;
}
exports.getPrebuiltProviderVersions = getPrebuiltProviderVersions;
async function getPrebuiltProviderVersionInformation(packageName, packageVersion) {
    // Go packages include an extra `vX.Y.Z`
    if (packageVersion.startsWith("v")) {
        packageVersion = packageVersion.slice(1);
    }
    const url = `https://registry.npmjs.org/${packageName}/${packageVersion}`;
    const result = await cachedFetch(url);
    let providerName = result.cdktf.provider.name;
    if (providerName) {
        providerName = providerName.replace("registry.terraform.io/", "");
        providerName = providerName.replace("hashicorp/", "");
    }
    return {
        packageName: result.name,
        packageVersion: result.version,
        providerName,
        providerVersion: result.cdktf.provider.version,
        cdktfVersion: result.peerDependencies["cdktf"],
    };
}
exports.getPrebuiltProviderVersionInformation = getPrebuiltProviderVersionInformation;
//# sourceMappingURL=data:application/json;base64,