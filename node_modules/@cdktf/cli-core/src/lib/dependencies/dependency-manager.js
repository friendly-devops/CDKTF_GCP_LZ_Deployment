"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DependencyManager = exports.ProviderConstraint = exports.DEFAULT_NAMESPACE = exports.DEFAULT_HOSTNAME = void 0;
// Copyright (c) HashiCorp, Inc
// SPDX-License-Identifier: MPL-2.0
const commons_1 = require("@cdktf/commons");
const codemaker_1 = require("codemaker");
const cdktf_config_1 = require("../cdktf-config");
const cdktf_config_manager_1 = require("./cdktf-config-manager");
const package_manager_1 = require("./package-manager");
const prebuilt_providers_1 = require("./prebuilt-providers");
const registry_api_1 = require("./registry-api");
const version_constraints_1 = require("./version-constraints");
const semver = __importStar(require("semver"));
const local_provider_versions_1 = require("../local-provider-versions");
const local_provider_constraints_1 = require("../local-provider-constraints");
// ref: https://www.terraform.io/language/providers/requirements#source-addresses
exports.DEFAULT_HOSTNAME = "registry.terraform.io";
exports.DEFAULT_NAMESPACE = "hashicorp";
function normalizeProviderSource(source) {
    // returns <HOSTNAME>/<NAMESPACE>/<TYPE>
    const slashes = source.split("/").length - 1;
    switch (slashes) {
        case 0:
            return `${exports.DEFAULT_HOSTNAME}/${exports.DEFAULT_NAMESPACE}/${source}`;
        case 1:
            return `${exports.DEFAULT_HOSTNAME}/${source}`;
        default:
            return source;
    }
}
class ProviderConstraint {
    // TODO: add examples to cli command description (i.e. =,~>.> etc.)
    // if no version constraint is specified, we assume the latest version
    // if specific version is specified without e.g. =, we allow patch level increments (e.g. ~>2.12 for "2.12")
    constructor(source, version) {
        this.version = version;
        this.source = normalizeProviderSource(source);
    }
    static fromConfigEntry(provider) {
        if (typeof provider === "string") {
            const [src, version] = provider.split("@");
            return new ProviderConstraint(src.trim(), version ? version.trim() : undefined);
        }
        const src = (provider.namespace ? `${provider.namespace}/` : "") +
            (provider.source || provider.name);
        return new ProviderConstraint(src, provider.version);
    }
    isFromTerraformRegistry() {
        return this.hostname === exports.DEFAULT_HOSTNAME;
    }
    /**
     * the namespace of the provider
     * e.g. "hashicorp" or "kreuzwerker"
     */
    get namespace() {
        return this.source.split("/")[1];
    }
    /**
     * the name of the provider
     * e.g. "aws"
     */
    get name() {
        return this.source.split("/")[2];
    }
    /**
     * the hostname of the provider
     * e.g. "registry.terraform.io"
     */
    get hostname() {
        return this.source.split("/")[0];
    }
    /**
     * returns a simplified provider name, dropping namespace and hostname
     * if they match the defaults
     */
    get simplifiedName() {
        return this.source
            .split("/")
            .filter((part) => part !== exports.DEFAULT_HOSTNAME && part !== exports.DEFAULT_NAMESPACE)
            .join("/");
    }
    /**
     * checks if the version constraint matches the given version
     * @param version an actual version (e.g. "4.12.1")
     * @returns true if the version is compatible with the constraint
     */
    matchesVersion(version) {
        if (this.version) {
            return (0, version_constraints_1.versionMatchesConstraint)(version, this.version);
        }
        return true;
    }
    toString() {
        return `${this.source}${this.version ? `@${this.version}` : ""}`;
    }
}
exports.ProviderConstraint = ProviderConstraint;
/**
 * manages dependencies of a CDKTF project (e.g. terraform providers)
 */
class DependencyManager {
    constructor(targetLanguage, cdktfVersion, projectDirectory) {
        this.targetLanguage = targetLanguage;
        this.cdktfVersion = cdktfVersion;
        this.projectDirectory = projectDirectory;
        this.packageManager = package_manager_1.PackageManager.forLanguage(targetLanguage, this.projectDirectory);
    }
    async addProvider(constraint) {
        if (await this.hasPrebuiltProvider(constraint)) {
            await this.addPrebuiltProvider(constraint);
            return { addedLocalProvider: false };
        }
        else {
            await this.addLocalProvider(constraint);
            return { addedLocalProvider: true };
        }
    }
    async upgradeProvider(constraint) {
        console.log(`Upgrading ${constraint.simplifiedName}...`);
        const cdktfJson = new cdktf_config_manager_1.CdktfConfigManager();
        const prebuiltVersion = await this.getCurrentlyInstalledVersion(constraint);
        if (prebuiltVersion) {
            await this.upgradePrebuiltProvider(constraint, prebuiltVersion);
            return { addedLocalProvider: false };
        }
        if (await cdktfJson.hasProvider(constraint)) {
            await cdktfJson.updateProvider(constraint);
            return { addedLocalProvider: true };
        }
        throw commons_1.Errors.Usage(`Trying to upgrade ${constraint.simplifiedName} but it is not installed, please use "cdktf provider add ${constraint.simplifiedName}" to add it.`);
    }
    async getCurrentlyInstalledVersion(constraint) {
        var _a;
        commons_1.logger.info(`Checking if ${constraint.simplifiedName} is installed...`);
        const packageName = await this.tryGetPackageName(constraint);
        if (!packageName)
            return; // not available as pre-built provider, so can't be installed as such
        commons_1.logger.debug(`Expecting package ${packageName} to be installed if provider is installed as pre-built one`);
        let installedPackages;
        try {
            installedPackages = await this.packageManager.listProviderPackages();
        }
        catch (e) {
            throw new Error(`Failed to list packages: ${e}`);
        }
        commons_1.logger.debug(`Installed packages found: ${JSON.stringify(installedPackages, null, 2)}`);
        return (_a = installedPackages.find((pkg) => pkg.name === packageName)) === null || _a === void 0 ? void 0 : _a.version;
    }
    async upgradePrebuiltProvider(constraint, currentVersion) {
        commons_1.logger.debug(`Searching for latest matching version of ${constraint.simplifiedName}`);
        const packageName = await this.getPackageName(constraint);
        const packageVersion = await this.getMatchingProviderVersion(constraint);
        commons_1.logger.debug(`Found package ${packageName}@${packageVersion}`);
        if (packageVersion !== currentVersion) {
            await this.packageManager.addPackage(packageName, packageVersion);
        }
        else {
            console.log(`The latest version of ${packageName} is already installed: ${packageVersion}`);
        }
    }
    async hasPrebuiltProvider(constraint) {
        commons_1.logger.debug(`determining whether pre-built provider exists for ${constraint.source} with version constraint ${constraint.version} and cdktf version ${this.cdktfVersion}`);
        commons_1.logger.info(`Checking whether pre-built provider exists for the following constraints:
  provider: ${constraint.simplifiedName}
  version : ${constraint.version || "latest"}
  language: ${this.targetLanguage}
  cdktf   : ${this.cdktfVersion}
`);
        if (this.targetLanguage === commons_1.Language.GO &&
            semver.lt(this.cdktfVersion, "0.12.0")) {
            commons_1.logger.info(`Before CDKTF 0.12.0 there were no pre-built providers published for Go.`);
            return false;
        }
        const v = await (0, prebuilt_providers_1.getPrebuiltProviderVersions)(constraint, this.cdktfVersion);
        const exists = v !== null;
        if (exists) {
            commons_1.logger.info(`Found pre-built provider.`);
        }
        else {
            commons_1.logger.info(`Pre-built provider does not exist for the given constraints.`);
        }
        return exists;
    }
    async tryGetPackageName(constraint) {
        const npmPackageName = await (0, prebuilt_providers_1.getNpmPackageName)(constraint);
        if (!npmPackageName)
            return;
        const prebuiltProviderRepository = await (0, prebuilt_providers_1.getPrebuiltProviderRepositoryName)(npmPackageName);
        return this.convertPackageName(npmPackageName, prebuiltProviderRepository);
    }
    async getPackageName(constraint) {
        const packageName = await this.tryGetPackageName(constraint);
        if (!packageName) {
            throw commons_1.Errors.Usage(`Could not find pre-built provider for ${constraint.source}`);
        }
        return packageName;
    }
    async getMatchingProviderVersion(constraint) {
        const packageName = await this.getPackageName(constraint);
        const prebuiltProviderNpmVersions = await (0, prebuilt_providers_1.getPrebuiltProviderVersions)(constraint, this.cdktfVersion);
        if (!prebuiltProviderNpmVersions) {
            throw commons_1.Errors.Usage(`No pre-built provider found for ${constraint.source} with version constraint ${constraint.version} and cdktf version ${this.cdktfVersion}`);
        }
        const packageVersion = await this.getLanguageSpecificPackageVersion(packageName, prebuiltProviderNpmVersions);
        if (!packageVersion) {
            throw commons_1.Errors.Usage(`No pre-built provider found for ${constraint.source} with version constraint ${constraint.version} and cdktf version ${this.cdktfVersion} for language ${this.targetLanguage}.`);
        }
        return packageVersion;
    }
    async addPrebuiltProvider(constraint, silent = false) {
        commons_1.logger.debug(`adding pre-built provider ${constraint.source} with version constraint ${constraint.version} for cdktf version ${this.cdktfVersion}`);
        const packageName = await this.getPackageName(constraint);
        const packageVersion = await this.getMatchingProviderVersion(constraint);
        await this.packageManager.addPackage(packageName, packageVersion, silent);
        // TODO: more debug logs
    }
    // The version we use for npm might differ from other registries
    // This happens mostly in cases where a provider update failed to publish to one of the registries
    // In that case we use the latest version that was published successfully and works with the current cdktf release
    async getLanguageSpecificPackageVersion(packageName, prebuiltProviderNpmVersions) {
        commons_1.logger.debug("Found possibly matching versions (released on npm): ", prebuiltProviderNpmVersions);
        commons_1.logger.debug("Searching through package manager to find latest available version for given language");
        for (const version of prebuiltProviderNpmVersions) {
            try {
                const isAvailable = await this.packageManager.isNpmVersionAvailable(packageName, version);
                if (isAvailable) {
                    return version;
                }
            }
            catch (err) {
                commons_1.logger.info(`Could not find version ${version} for package ${packageName}: '${err}'. Skipping...`);
            }
        }
        return null;
    }
    async addLocalProvider(constraint) {
        commons_1.logger.info(`Adding local provider ${constraint.source} with version constraint ${constraint.version} to cdktf.json`);
        if (!constraint.version && constraint.isFromTerraformRegistry()) {
            const v = await (0, registry_api_1.getLatestVersion)(constraint);
            if (v) {
                constraint = new ProviderConstraint(constraint.source, 
                // "1.3.2" -> "~> 1.3"
                `~> ${v.split(".").slice(0, 2).join(".")}`);
            }
            else {
                throw commons_1.Errors.Usage(`Could not find a version for the provider '${constraint}' in the public registry. This could be due to a typo, please take a look at https://cdk.tf/registry-providers to find all supported providers.`);
            }
        }
        await new cdktf_config_manager_1.CdktfConfigManager().addProvider(constraint);
    }
    /**
     * Converts an NPM package name of a pre-built provider package to the name in the target language
     */
    convertPackageName(name, repository) {
        const providerName = name.replace("@cdktf/provider-", "");
        switch (this.targetLanguage) {
            case commons_1.Language.GO: // e.g. github.com/cdktf/cdktf-provider-opentelekomcloud-go/opentelekomcloud
                if (repository) {
                    return `${repository}-go/${providerName}`;
                }
                return `github.com/cdktf/cdktf-provider-${providerName}-go/${providerName}`;
            case commons_1.Language.TYPESCRIPT: // e.g. @cdktf/provider-random
                return name; // already the correct name
            case commons_1.Language.CSHARP: // e.g. HashiCorp.Cdktf.Providers.Opentelekomcloud
                return `HashiCorp.Cdktf.Providers.` + (0, codemaker_1.toPascalCase)(providerName);
            case commons_1.Language.JAVA: // e.g. com.hashicorp.opentelekomcloud
                return `com.hashicorp.cdktf-provider-${providerName}`;
            case commons_1.Language.PYTHON: // e.g. cdktf-cdktf-provider-opentelekomcloud
                return `cdktf-cdktf-provider-${providerName}`;
            default:
                throw new Error(`converting package name for language ${this.targetLanguage} not implemented yet`);
        }
    }
    /**
     * Converts an package name of a pre-built provider package in target language to the name in npm
     * Inverse of: `convertPackageName`
     */
    convertFromPackageNameToNpm(name) {
        const npmPackagePrefix = "@cdktf/provider-";
        const regexes = {
            [commons_1.Language.GO]: /github.com\/(?:cdktf|hashicorp)\/cdktf-provider-(.+)-go\//i,
            [commons_1.Language.TYPESCRIPT]: /(.+)/i,
            [commons_1.Language.CSHARP]: /HashiCorp\.Cdktf\.Providers\.(.+)/i,
            [commons_1.Language.JAVA]: /com\.hashicorp\.cdktf-provider-(.+)/i,
            [commons_1.Language.PYTHON]: /cdktf-cdktf-provider-(.+)/i,
        };
        const regex = regexes[this.targetLanguage];
        if (!regex) {
            throw commons_1.Errors.Usage("Language not supported for pre-built providers");
        }
        const match = regex.exec(name);
        if (!match) {
            throw new Error(`Package name is not in expected format: ${name}`);
        }
        switch (this.targetLanguage) {
            case commons_1.Language.GO: // e.g. github.com/cdktf/cdktf-provider-opentelekomcloud-go/opentelekomcloud
                return npmPackagePrefix + match[1];
            case commons_1.Language.TYPESCRIPT: // e.g. @cdktf/provider-random
                return match[1]; // already the correct name
            case commons_1.Language.CSHARP: // e.g. HashiCorp.Cdktf.Providers.Opentelekomcloud
                return npmPackagePrefix + (0, codemaker_1.toSnakeCase)(match[1]);
            case commons_1.Language.JAVA: // e.g. com.hashicorp.opentelekomcloud
                return npmPackagePrefix + match[1];
            case commons_1.Language.PYTHON: // e.g. cdktf-cdktf-provider-opentelekomcloud
                return npmPackagePrefix + match[1];
            default:
                throw new Error(`converting package name for language ${this.targetLanguage} not implemented yet`);
        }
    }
    async allProviders() {
        const cdktfJson = cdktf_config_1.CdktfConfig.read();
        const localVersions = new local_provider_versions_1.LocalProviderVersions();
        const localProviderConfigs = cdktfJson.terraformProviders;
        const prebuiltProviderConfigs = await this.packageManager.listProviderPackages();
        const prebuiltProvidersInfo = await Promise.all(prebuiltProviderConfigs.map(async (prebuiltProviderConfig) => {
            const packageName = this.convertFromPackageNameToNpm(prebuiltProviderConfig.name);
            const providerInformation = await (0, prebuilt_providers_1.getPrebuiltProviderVersionInformation)(packageName, prebuiltProviderConfig.version);
            return {
                ...providerInformation,
                packageName: prebuiltProviderConfig.name,
            };
        }));
        const constraints = new local_provider_constraints_1.LocalProviderConstraints();
        const localProvidersInfo = await Promise.all(localProviderConfigs.map(async (localProviderConfig) => {
            const constraint = ProviderConstraint.fromConfigEntry(localProviderConfig);
            const version = await localVersions.versionForProvider(constraint.simplifiedName);
            const constraintValue = await constraints.constraintForProvider(constraint.simplifiedName);
            return {
                providerName: constraint.simplifiedName,
                providerConstraint: constraintValue || constraint.version,
                providerVersion: version,
            };
        }));
        return {
            local: localProvidersInfo,
            prebuilt: prebuiltProvidersInfo,
        };
    }
}
exports.DependencyManager = DependencyManager;
//# sourceMappingURL=data:application/json;base64,