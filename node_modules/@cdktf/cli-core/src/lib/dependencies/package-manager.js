"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageManager = void 0;
// Copyright (c) HashiCorp, Inc
// SPDX-License-Identifier: MPL-2.0
const commons_1 = require("@cdktf/commons");
const fs_extra_1 = require("fs-extra");
const path_1 = __importDefault(require("path"));
const xml_js_1 = require("xml-js");
const fs = __importStar(require("fs-extra"));
const semver = __importStar(require("semver"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const z = __importStar(require("zod"));
// Can't use CDKTF_ as prefix because yargs .env("CDKTF") in strict mode does not allow us to
// Refer to: https://github.com/yargs/yargs/issues/873
const { GITHUB_API_TOKEN_CDKTF } = process.env;
// {
//   "version": "1.0.0",
//   "name": "testUSHasF",
//   "problems": [
//     "extraneous: archiver-utils@2.1.0 /private/var/folders/z_/v03l33d55fb57nrr3b1q03ch0000gq/T/testUSHasF/node_modules/archiver-utils",
//   ],
//   "dependencies": {
//     "@cdktf/provider-random": {
//       "version": "3.0.11",
//       "resolved": "https://registry.npmjs.org/@cdktf/provider-random/-/provider-random-3.0.11.tgz"
//     },
const npmListSchema = z
    .object({
    dependencies: z.record(z
        .object({
        version: z.string(),
    })
        .nonstrict()),
})
    .deepPartial()
    .nonstrict();
// {
//   "type": "tree",
//   "data": {
//     "type": "list",
//     "trees": [
//       {
//         "name": "@cdktf/provider-random@3.0.11",
//         "children": [],
//         "hint": null,
//         "color": "bold",
//         "depth": 0
//       }
//     ]
//   }
// }
const yarnListSchema = z
    .object({
    data: z
        .object({
        trees: z.array(z
            .object({
            name: z.string(),
        })
            .nonstrict()),
    })
        .nonstrict(),
})
    .deepPartial()
    .nonstrict();
// [
//   {
//     "name": "appdirs",
//     "version": "1.4.4"
//   },
//   {
const pipPackageSchema = z.array(z.object({ name: z.string(), version: z.string() }).nonstrict());
/**
 * manages installing, updating, and removing dependencies
 * in the package system used by the target language of a CDKTF
 * project
 */
class PackageManager {
    constructor(workingDirectory) {
        this.workingDirectory = workingDirectory;
    }
    static forLanguage(language, workingDirectory) {
        switch (language) {
            case commons_1.Language.GO:
                return new GoPackageManager(workingDirectory);
            case commons_1.Language.TYPESCRIPT:
                return new NodePackageManager(workingDirectory);
            case commons_1.Language.PYTHON:
                return new PythonPackageManager(workingDirectory);
            case commons_1.Language.CSHARP:
                return new NugetPackageManager(workingDirectory);
            case commons_1.Language.JAVA:
                if (GradlePackageManager.isGradleProject(workingDirectory)) {
                    return new GradlePackageManager(workingDirectory);
                }
                return new MavenPackageManager(workingDirectory);
            default:
                throw new Error(`Unknown language: ${language}`);
        }
    }
}
exports.PackageManager = PackageManager;
class NodePackageManager extends PackageManager {
    hasYarnLockfile() {
        return (0, fs_extra_1.existsSync)(path_1.default.join(this.workingDirectory, "yarn.lock"));
    }
    async addPackage(packageName, packageVersion, silent) {
        console.log(`Adding package ${packageName} @ ${packageVersion}`);
        // probe for package-lock.json or yarn.lock
        let command = "npm";
        let args = ["install"];
        if (this.hasYarnLockfile()) {
            command = "yarn";
            args = ["add"];
        }
        args.push(packageVersion ? packageName + "@" + packageVersion : packageName);
        if (silent) {
            args.push("--silent");
            args.push("--no-progress");
        }
        // Install exact version
        // Yarn: https://classic.yarnpkg.com/lang/en/docs/cli/add/#toc-yarn-add-exact-e
        // Npm: https://docs.npmjs.com/cli/v8/commands/npm-install#save-exact
        args.push("-E");
        commons_1.logger.info(`Installing package ${packageName} @ ${packageVersion} using ${command}.`);
        await (0, commons_1.exec)(command, args, { cwd: this.workingDirectory });
        commons_1.logger.info("Package installed.");
    }
    async isNpmVersionAvailable(_packageName, _packageVersion) {
        // We get the list of available versions from npm, no need to check here
        return true;
    }
    async listYarnPackages() {
        var _a;
        try {
            const stdout = await (0, commons_1.exec)("yarn", ["list", "--json"], {
                cwd: this.workingDirectory,
            });
            commons_1.logger.debug(`Listing yarn packages using "yarn list --json": ${stdout}`);
            const json = yarnListSchema.parse(JSON.parse(stdout));
            return (((_a = json === null || json === void 0 ? void 0 : json.data) === null || _a === void 0 ? void 0 : _a.trees) || [])
                .filter((dep) => dep.name.startsWith("@cdktf/provider-"))
                .map((dep) => ({
                name: `@${dep.name.split("@")[1]}`,
                version: dep.name.split("@")[2],
            }));
        }
        catch (e) {
            throw new Error(`Could not determine installed packages using 'yarn list --json': ${e.message}`);
        }
    }
    async listNpmPackages() {
        try {
            const stdout = await (0, commons_1.exec)("npm", ["list", "--json"], {
                cwd: this.workingDirectory,
            });
            commons_1.logger.debug(`Listing npm packages using "npm list --json": ${stdout}`);
            const json = npmListSchema.parse(JSON.parse(stdout));
            return Object.entries((json === null || json === void 0 ? void 0 : json.dependencies) || {})
                .filter(([depName]) => depName.startsWith("@cdktf/provider-"))
                .map(([name, dep]) => ({ name, version: dep.version }));
        }
        catch (e) {
            throw new Error(`Could not determine installed packages using 'npm list --json': ${e.message}`);
        }
    }
    async listProviderPackages() {
        return this.hasYarnLockfile()
            ? this.listYarnPackages()
            : this.listNpmPackages();
    }
}
class PythonPackageManager extends PackageManager {
    get appCommand() {
        try {
            return JSON.parse(fs.readFileSync(path_1.default.resolve(this.workingDirectory, "cdktf.json"), "utf8"))["app"];
        }
        catch (e) {
            throw commons_1.Errors.Usage(`Could not find find and parse cdktf.json in ${this.workingDirectory}`, e);
        }
    }
    async addPackage(packageName, packageVersion) {
        const usePipenv = this.appCommand.includes("pipenv");
        if (usePipenv) {
            console.log(`Installing package ${packageName} @ ${packageVersion} using pipenv.`);
            await (0, commons_1.exec)("pipenv", ["install", `${packageName}~=${packageVersion}`], {
                cwd: this.workingDirectory,
                env: {
                    ...process.env,
                    PIPENV_QUIET: "1",
                },
                stdio: ["inherit", 1, 1],
            });
            console.log("Package installed.");
        }
        else {
            console.log(`Installing package ${packageName} @ ${packageVersion} using pip.`);
            const requirementsFilePath = path_1.default.join(this.workingDirectory, "requirements.txt");
            if (!fs.existsSync(requirementsFilePath)) {
                throw commons_1.Errors.Usage(`Could not find requirements.txt in ${this.workingDirectory}`);
            }
            const requirements = await fs.readFile(requirementsFilePath, "utf8");
            const requirementLine = requirements
                .split("\n")
                .find((line) => line.includes(packageName));
            commons_1.logger.debug(`Read requirements.txt file and found line including ${packageName}: ${requirementLine}`);
            if (requirementLine) {
                if (packageVersion ? requirementLine.includes(packageVersion) : true) {
                    commons_1.logger.info(`Package ${packageName} already installed. Skipping installation.`);
                    return;
                }
                else {
                    commons_1.logger.debug(`Found the package but with a different version, continuing`);
                }
            }
            const newRequirements = requirements
                .split("\n")
                .filter((line) => !line.startsWith(packageName))
                .join("\n") +
                `\n${packageName}${packageVersion ? `~=${packageVersion}` : ""}`;
            await fs.writeFile(requirementsFilePath, newRequirements, "utf8");
            await (0, commons_1.exec)("pip", ["install", "-r", "requirements.txt"], {
                cwd: this.workingDirectory,
                stdio: ["inherit", 1, 1],
            });
            console.log("Package installed.");
        }
    }
    async isNpmVersionAvailable(packageName, packageVersion) {
        commons_1.logger.debug(`Checking if ${packageName}@${packageVersion} is available for Python`);
        const url = `https://pypi.org/pypi/${packageName}/${packageVersion}/json`;
        commons_1.logger.debug(`Fetching package information for ${packageName} from ${url}`);
        const response = await (0, node_fetch_1.default)(url);
        const json = (await response.json());
        commons_1.logger.debug(`Got response from PyPI for ${packageName}@${packageVersion}: ${JSON.stringify(json)}`);
        if (json.info) {
            // We found the version, so it exists
            return true;
        }
        else {
            commons_1.logger.debug(`Could not get PyPI package info, got: ${JSON.stringify(json)}`);
            return false;
        }
    }
    async listPipenvPackages() {
        try {
            const stdout = await (0, commons_1.exec)("pipenv", ["run", "pip", "list", "--format=json"], {
                cwd: this.workingDirectory,
            });
            commons_1.logger.debug(`Listing pipenv packages using "pipenv run pip list --format=json": ${stdout}`);
            const list = pipPackageSchema.parse(JSON.parse(stdout));
            return list.filter((item) => item.name.startsWith("cdktf-cdktf-provider"));
        }
        catch (e) {
            throw new Error(`Could not determine installed packages using 'pipenv run pip list --format=json': ${e.message}`);
        }
    }
    async listPipPackages() {
        try {
            const stdout = await (0, commons_1.exec)("pip", ["list", "--format=json"], {
                cwd: this.workingDirectory,
            });
            commons_1.logger.debug(`Listing pipenv packages using "pip list --format=json": ${stdout}`);
            const list = pipPackageSchema.parse(JSON.parse(stdout));
            return list.filter((item) => item.name.startsWith("cdktf-cdktf-provider"));
        }
        catch (e) {
            throw new Error(`Could not determine installed packages using 'pip list --format=json': ${e.message}`);
        }
    }
    async listProviderPackages() {
        return this.appCommand.includes("pipenv")
            ? this.listPipenvPackages()
            : this.listPipPackages();
    }
}
class NugetPackageManager extends PackageManager {
    async addPackage(packageName, packageVersion) {
        const command = "dotnet";
        const args = ["add", "package", packageName];
        if (packageVersion) {
            args.push("--version", packageVersion);
        }
        console.log(`Installing package ${packageName} @ ${packageVersion} using "${command} ${args.join(" ")}".`);
        await (0, commons_1.exec)(command, args, { cwd: this.workingDirectory });
        console.log("Package installed.");
    }
    async isNpmVersionAvailable(packageName, packageVersion) {
        var _a, _b, _c;
        commons_1.logger.debug(`Checking if ${packageName}@${packageVersion} is available`);
        const [owner, ...rest] = packageName.split(".");
        const id = rest[rest.length - 1];
        const url = `https://azuresearch-usnc.nuget.org/query?q=owner:${owner}%20id:${id}&prerelease=false&semVerLevel=2.0.0`;
        commons_1.logger.debug(`Fetching package metadata from Nuget: '${url}'`);
        const response = await (0, node_fetch_1.default)(url);
        const json = (await response.json());
        commons_1.logger.debug(`Got response from NuGet for ${packageName} : ${JSON.stringify(json)}`);
        if (!((_a = json === null || json === void 0 ? void 0 : json.data) === null || _a === void 0 ? void 0 : _a.length)) {
            return false; // No package found
        }
        const packageVersions = (_c = (_b = json.data.find((p) => p.id === packageName)) === null || _b === void 0 ? void 0 : _b.versions) !== null && _c !== void 0 ? _c : [];
        if (!packageVersions.length) {
            return false; // No package release matching the id found
        }
        return packageVersions.some((v) => v.version === packageVersion);
    }
    async listProviderPackages() {
        try {
            const stdout = await (0, commons_1.exec)("dotnet", ["list", "package"], {
                cwd: this.workingDirectory,
            });
            commons_1.logger.debug(`Listing pipenv packages using "dotnet list package": ${stdout}`);
            const regex = /^\s*>\s(HashiCorp\.Cdktf\.Providers\.[\w.]+)\s+((?:\d+\.){2}\d+(?:-\S+)?)\s+((?:\d+\.){2}\d+(?:-\S+)?)\s*$/;
            return stdout
                .split("\n")
                .map((line) => {
                // Example output:
                // Project 'MyTerraformStack' has the following package references
                //  [net6.0]:
                //  Top-level Package      Requested   Resolved
                //  > HashiCorp.Cdktf      0.0.0       0.0.0
                // match[0] = full match
                // match[1] = package name
                // match[2] = requested version
                // match[3] = resolved version
                return regex.exec(line);
            })
                .filter((match) => !!match)
                .map((match) => ({ name: match[1], version: match[3] }));
        }
        catch (e) {
            throw new Error(`Could not determine installed packages using 'dotnet list package': ${e.message}`);
        }
    }
}
class JavaPackageManager extends PackageManager {
    async isNpmVersionAvailable(packageName, packageVersion) {
        var _a, _b;
        commons_1.logger.debug(`Checking if ${packageName}@${packageVersion} is available`);
        const parts = packageName.split(".");
        if (parts.length !== 3) {
            throw commons_1.Errors.Internal(`Expected package name to be in format "group.artifact", e.g. "com.hashicorp.cdktf-provider-google", got: ${packageName}`);
        }
        const packageIdentifier = parts.pop();
        const groupId = parts.join(".");
        const url = `https://search.maven.org/solrsearch/select?q=g:${groupId}+AND+a:${packageIdentifier}+AND+v:${packageVersion}&rows=5&wt=json`;
        commons_1.logger.debug(`Trying to find package version by querying Maven Central under '${url}'`);
        const response = await (0, node_fetch_1.default)(url);
        const json = (await response.json());
        commons_1.logger.debug(`Got response from the Maven package search for ${packageName}: ${JSON.stringify(json)}`);
        return ((_b = (_a = json === null || json === void 0 ? void 0 : json.response) === null || _a === void 0 ? void 0 : _a.numFound) !== null && _b !== void 0 ? _b : 0) > 0;
    }
}
class MavenPackageManager extends JavaPackageManager {
    async addPackage(packageName, packageVersion = "LATEST" // the latest option is deprecated in maven 3.5
    ) {
        var _a, _b, _c, _d;
        console.log(`Adding ${packageName} @ ${packageVersion} to pom.xml`);
        // Assert pom.xml exists
        const pomPath = path_1.default.join(this.workingDirectory, "pom.xml");
        if (!(0, fs_extra_1.existsSync)(pomPath)) {
            throw commons_1.Errors.Usage("No pom.xml found in current working directory. Please run the command from the root of your project.");
        }
        const pom = await fs.readFile(pomPath, "utf8");
        const pomXml = (await (0, xml_js_1.xml2js)(pom, {}));
        // Mutate dependencies
        const nameParts = packageName.split(".");
        const groupId = nameParts.slice(0, nameParts.length - 1).join(".");
        const artifactId = nameParts[nameParts.length - 1];
        const newDependency = (await (0, xml_js_1.xml2js)(`<dependency>
    <groupId>${groupId}</groupId>
    <artifactId>${artifactId}</artifactId>
    <version>${packageVersion}</version>
</dependency>`));
        const dependencies = (_c = (_b = (_a = pomXml.elements) === null || _a === void 0 ? void 0 : _a.find((el) => el.name === "project")) === null || _b === void 0 ? void 0 : _b.elements) === null || _c === void 0 ? void 0 : _c.find((el) => el.name === "dependencies");
        if (!dependencies) {
            throw commons_1.Errors.Usage(`Could not find dependencies section in the pom.xml`);
        }
        dependencies.elements = ((dependencies === null || dependencies === void 0 ? void 0 : dependencies.elements) || []).filter((el) => {
            var _a, _b;
            return ((_a = el.elements) === null || _a === void 0 ? void 0 : _a.some((group) => { var _a; return group.name === "groupId" && ((_a = group.elements) === null || _a === void 0 ? void 0 : _a[0].text) !== groupId; })) ||
                ((_b = el.elements) === null || _b === void 0 ? void 0 : _b.some((artifact) => {
                    var _a;
                    return artifact.name === "artifactId" &&
                        ((_a = artifact.elements) === null || _a === void 0 ? void 0 : _a[0].text) !== artifactId;
                }));
        });
        (_d = dependencies === null || dependencies === void 0 ? void 0 : dependencies.elements) === null || _d === void 0 ? void 0 : _d.push(newDependency.elements[0]);
        // Write new pom.xml
        await fs.writeFile(pomPath, (0, xml_js_1.js2xml)(pomXml, { spaces: 2 }));
        // Install
        await (0, commons_1.exec)("mvn", ["install"], { cwd: this.workingDirectory });
        console.log("Package installed.");
    }
    async listProviderPackages() {
        var _a, _b, _c, _d, _e;
        try {
            const pomPath = path_1.default.join(this.workingDirectory, "pom.xml");
            if (!(0, fs_extra_1.existsSync)(pomPath)) {
                throw commons_1.Errors.Usage("No pom.xml found in current working directory. Please run the command from the root of your project.");
            }
            const pom = await fs.readFile(pomPath, "utf8");
            const pomXml = (await (0, xml_js_1.xml2js)(pom, {}));
            const dependencies = (_e = (_d = (_c = (_b = (_a = pomXml.elements) === null || _a === void 0 ? void 0 : _a.find((el) => el.name === "project")) === null || _b === void 0 ? void 0 : _b.elements) === null || _c === void 0 ? void 0 : _c.find((el) => el.name === "dependencies")) === null || _d === void 0 ? void 0 : _d.elements) !== null && _e !== void 0 ? _e : [];
            return dependencies
                .map((dep) => {
                var _a, _b, _c, _d, _e, _f, _g, _h, _j;
                return ({
                    name: `${(_c = (_b = (_a = dep.elements) === null || _a === void 0 ? void 0 : _a.find((el) => el.name === "groupId")) === null || _b === void 0 ? void 0 : _b.elements) === null || _c === void 0 ? void 0 : _c[0].text}.${(_f = (_e = (_d = dep.elements) === null || _d === void 0 ? void 0 : _d.find((el) => el.name === "artifactId")) === null || _e === void 0 ? void 0 : _e.elements) === null || _f === void 0 ? void 0 : _f[0].text}`,
                    version: (_j = (_h = (_g = dep.elements) === null || _g === void 0 ? void 0 : _g.find((el) => el.name === "version")) === null || _h === void 0 ? void 0 : _h.elements) === null || _j === void 0 ? void 0 : _j[0].text,
                });
            })
                .filter((dep) => dep.name.startsWith("com.hashicorp.cdktf-provider-"));
        }
        catch (e) {
            throw new Error(`Could not determine installed packages reading the pom.xml: ${e.message}`);
        }
    }
}
class GradlePackageManager extends JavaPackageManager {
    static isGradleProject(workingDirectory) {
        return (0, commons_1.isGradleProject)(workingDirectory);
    }
    async addPackage(packageFQN, packageVersion = "latest.release") {
        const buildGradlePath = path_1.default.join(this.workingDirectory, "build.gradle");
        const buildGradle = await fs.readFile(buildGradlePath, "utf8");
        const buildGradleLines = buildGradle.split(/\r?\n/);
        const dependenciesRegex = /dependencies\s+\{/i;
        const dependencyBlockStart = buildGradleLines.findIndex((line) => dependenciesRegex.test(line));
        if (dependencyBlockStart === -1) {
            throw commons_1.Errors.Usage("Could not find dependencies section in the build.gradle");
        }
        const packageSegments = packageFQN.split(".");
        const packageName = packageSegments.pop();
        const groupName = packageSegments.join(".");
        const dependencySpecifier = `${groupName}:${packageName}`;
        const dependencyAndVersionSpecifier = `${dependencySpecifier}:${packageVersion}`;
        const existingDependency = buildGradleLines.findIndex((line) => line.includes(dependencySpecifier));
        if (existingDependency !== -1) {
            buildGradleLines.splice(existingDependency, 1);
        }
        const newPackageDependency = `\timplementation '${dependencyAndVersionSpecifier}'`;
        buildGradleLines.splice(dependencyBlockStart + 1, 0, newPackageDependency);
        await fs.writeFile(buildGradlePath, buildGradleLines.join("\n"));
    }
    async listProviderPackages() {
        const dependencies = await (0, commons_1.getGradleDependencies)();
        if (!dependencies) {
            throw commons_1.Errors.Usage("Could not find any dependencies");
        }
        const dependencyList = dependencies
            .map((line) => (0, commons_1.getDependencyInformationFromLine)(line))
            .filter((dep) => {
            if (!dep) {
                return false;
            }
            return dep.name.includes("cdktf-provider-");
        })
            .map((dep) => ({
            name: `com.hashicorp.${dep.name}`,
            version: dep.version,
        }));
        return dependencyList;
    }
}
class GoPackageManager extends PackageManager {
    async addPackage(packageName, packageVersion) {
        console.log(`Adding package ${packageName} @ ${packageVersion}`);
        const majorVersion = packageVersion
            ? semver.major(packageVersion)
            : undefined;
        let versionPackageSuffix = "";
        if (typeof majorVersion === "number" && majorVersion > 1) {
            versionPackageSuffix = `/v${majorVersion}`;
        }
        commons_1.logger.debug(`Running 'go get ${packageName}${versionPackageSuffix}@v${packageVersion}'`);
        // Install
        await (0, commons_1.exec)("go", ["get", `${packageName}${versionPackageSuffix}@v${packageVersion}`], {
            cwd: this.workingDirectory,
        });
        console.log("Package installed.");
    }
    async isNpmVersionAvailable(packageName, packageVersion) {
        commons_1.logger.debug(`Checking if ${packageName}@${packageVersion} is available`);
        // e.g. github.com/cdktf/cdktf-provider-google-go/google
        const parts = packageName.split("/");
        if (parts.length !== 4) {
            throw commons_1.Errors.Internal(`Expecting Go package name to be in the format of github.com/<org>/<repo>/<package>, got ${packageName}`);
        }
        const org = parts[1];
        const repo = parts[2];
        const packagePath = parts[3];
        const url = `https://api.github.com/repos/${org}/${repo}/git/ref/tags/${packagePath}/v${packageVersion}`;
        commons_1.logger.debug(`Fetching tags for ${org}/${repo} from '${url}'`);
        const response = await (0, node_fetch_1.default)(url, {
            headers: {
                Accept: "application/vnd.github+json",
                "User-Agent": "HashiCorp/cdktf-cli",
                ...(GITHUB_API_TOKEN_CDKTF
                    ? { Authorization: `Bearer ${GITHUB_API_TOKEN_CDKTF}` }
                    : {}),
            },
        });
        const json = (await response.json());
        commons_1.logger.debug(`Got response from GitHubs repository tag endpoint for ${packageName}: ${JSON.stringify(json)}`);
        if (json && json.ref) {
            return true;
        }
        commons_1.logger.info(`Could not find the tag ${packagePath}/v${packageVersion} in the repository ${org}/${repo}: ${JSON.stringify(json)}}`);
        return false;
    }
    async listProviderPackages() {
        try {
            const goSumPath = path_1.default.join(this.workingDirectory, "go.sum");
            if (!(0, fs_extra_1.existsSync)(goSumPath)) {
                throw commons_1.Errors.Usage("No go.sum found in current working directory. Please run the command from the root of your project.");
            }
            const goSum = await fs.readFile(goSumPath, "utf8");
            const dedupedProviderNames = new Set();
            return goSum
                .split("\n")
                .filter((line) => line.startsWith("github.com/hashicorp/cdktf-provider") ||
                line.startsWith("github.com/cdktf/cdktf-provider"))
                .map((line) => {
                const parts = line.split(" ");
                if (parts.length !== 3) {
                    throw commons_1.Errors.Internal(`Expected line in go.sum to be in the format of '<package> <version> <checksum>', got: ${line}`);
                }
                // part[0] could be github.com/aws/constructs-go/constructs/v10
                const name = parts[0].split("/").slice(0, 4).join("/");
                const version = parts[1].split("/")[0];
                if (dedupedProviderNames.has(name)) {
                    return { name: "", version: "" };
                }
                dedupedProviderNames.add(name);
                return {
                    name,
                    version,
                };
            })
                .filter((providerInfo) => !!providerInfo.name && !!providerInfo.version);
        }
        catch (e) {
            throw new Error(`Could not determine installed packages reading the go.sum: ${e.message}`);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,