"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.watch = void 0;
// Copyright (c) HashiCorp, Inc
// SPDX-License-Identifier: MPL-2.0
const path_1 = __importDefault(require("path"));
const cdktf_project_1 = require("./cdktf-project");
const fs = __importStar(require("fs"));
const chokidar = __importStar(require("chokidar"));
const commons_1 = require("@cdktf/commons");
// In this very first iteration we will find out which files to watch by asking the user to provide the files
// We default to something reasonable per language and write it into the cdkt.json file
// Mid-Term we might want to add a WatchFile / WatchDir construct that we can use (e.g. in assets) and that a user can use to specify their watch behaviour
// See https://github.com/hashicorp/terraform-cdk/issues/1668
function getOrWriteDefaultWatchConfig(projectPath = process.cwd()) {
    const cdktfJsonPath = path_1.default.resolve(projectPath, "cdktf.json");
    commons_1.logger.debug(`Getting files to watch from cdktf.json at ${cdktfJsonPath}`);
    let cdktfJson;
    try {
        cdktfJson = require(cdktfJsonPath);
    }
    catch (err) {
        throw commons_1.Errors.Internal(`Could not find cdktf.json file in ${projectPath}`, err);
    }
    if (cdktfJson.watchPattern) {
        commons_1.logger.debug(`Found watchPattern in cdktf.json: ${cdktfJson.watchPattern}`);
        return cdktfJson.watchPattern;
    }
    const language = cdktfJson.language;
    if (!language) {
        throw commons_1.Errors.Usage(`No language specified in cdktf.json, please either specify a language or watchPattern to use the watch command`);
    }
    const defaultWatchPattern = {
        typescript: ["./**/*.ts"],
        python: ["./**/*.py"],
        java: ["src/**/*.java"],
        csharp: ["./**/*.cs"],
        go: ["./**/*.go"],
    }[language];
    fs.writeFileSync(cdktfJsonPath, JSON.stringify({ ...cdktfJson, watchPattern: defaultWatchPattern }, null, 2));
    commons_1.logger.debug(`Write default watchPattern for ${language} in cdktf.json.`);
    return defaultWatchPattern;
}
const projectStatus = (project) => {
    if (!(project === null || project === void 0 ? void 0 : project.stacksToRun.length)) {
        return {
            inProgress: [],
            finished: [],
            pending: [],
        };
    }
    const inProgress = project.stacksToRun.filter((s) => s.isRunning);
    const finished = project.stacksToRun.filter((s) => s.isDone);
    const pending = project.stacksToRun.filter((s) => s.isPending);
    return { inProgress, finished, pending };
};
async function watch(projectOptions, mutationOptions, abortSignal, onStateChange) {
    const patterns = getOrWriteDefaultWatchConfig();
    const watcher = chokidar.watch(patterns, {
        ignoreInitial: true,
    });
    let state = { type: "waiting" };
    const changeState = (newState) => {
        state = newState;
        onStateChange(state);
    };
    async function run() {
        commons_1.logger.debug("Running cdktf deploy");
        const project = new cdktf_project_1.CdktfProject({
            synthOrigin: "watch",
            ...projectOptions,
            onLog: (log) => {
                if (projectOptions.onLog) {
                    projectOptions.onLog(log);
                }
                if (state.type === "running") {
                    changeState({ ...state, ...projectStatus(project) });
                }
            },
        });
        const abort = () => project.hardAbort();
        abortSignal.addEventListener("abort", abort);
        await project.deploy(mutationOptions);
        abortSignal.removeEventListener("abort", abort);
        commons_1.logger.debug("cdktf deploy finished");
        if (state.type !== "running") {
            throw commons_1.Errors.Internal("Watch was in a state where the state was not running in the run phase");
        }
        if (state.nextRunQueued) {
            commons_1.logger.debug("Next run was queued, starting it now");
            changeState({
                ...state,
                nextRunQueued: false,
                currentRun: run(),
                ...projectStatus(project),
            });
        }
        else {
            commons_1.logger.debug("Nothing queued, waiting for changes");
            changeState({ type: "waiting" });
        }
    }
    abortSignal.addEventListener("abort", () => {
        commons_1.logger.debug("Abort signal received, stopping watch");
        watcher.close();
        changeState({ type: "stopped" });
    });
    const onFileChange = () => {
        if (state.type === "stopped") {
            return;
        }
        if (state.type === "running") {
            changeState({ ...state, nextRunQueued: true });
            return;
        }
        changeState({
            type: "running",
            nextRunQueued: false,
            currentRun: run(),
            ...projectStatus(),
        });
    };
    watcher.on("all", onFileChange);
    // initially run once
    onFileChange();
    await (0, commons_1.sendTelemetry)("watch", { event: "start" });
}
exports.watch = watch;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2F0Y2guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3YXRjaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLCtCQUErQjtBQUMvQixtQ0FBbUM7QUFDbkMsZ0RBQXdCO0FBQ3hCLG1EQUl5QjtBQUN6Qix1Q0FBeUI7QUFDekIsbURBQXFDO0FBQ3JDLDRDQUErRDtBQUcvRCw2R0FBNkc7QUFDN0csdUZBQXVGO0FBQ3ZGLDJKQUEySjtBQUMzSiw2REFBNkQ7QUFDN0QsU0FBUyw0QkFBNEIsQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDLEdBQUcsRUFBRTtJQUMvRCxNQUFNLGFBQWEsR0FBRyxjQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxZQUFZLENBQUMsQ0FBQztJQUM5RCxnQkFBTSxDQUFDLEtBQUssQ0FBQyw2Q0FBNkMsYUFBYSxFQUFFLENBQUMsQ0FBQztJQUUzRSxJQUFJLFNBQVMsQ0FBQztJQUNkLElBQUk7UUFDRixTQUFTLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0tBQ3BDO0lBQUMsT0FBTyxHQUFRLEVBQUU7UUFDakIsTUFBTSxnQkFBTSxDQUFDLFFBQVEsQ0FDbkIscUNBQXFDLFdBQVcsRUFBRSxFQUNsRCxHQUFHLENBQ0osQ0FBQztLQUNIO0lBRUQsSUFBSSxTQUFTLENBQUMsWUFBWSxFQUFFO1FBQzFCLGdCQUFNLENBQUMsS0FBSyxDQUFDLHFDQUFxQyxTQUFTLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQztRQUM1RSxPQUFPLFNBQVMsQ0FBQyxZQUFZLENBQUM7S0FDL0I7SUFDRCxNQUFNLFFBQVEsR0FNRSxTQUFTLENBQUMsUUFBUSxDQUFDO0lBRW5DLElBQUksQ0FBQyxRQUFRLEVBQUU7UUFDYixNQUFNLGdCQUFNLENBQUMsS0FBSyxDQUNoQixnSEFBZ0gsQ0FDakgsQ0FBQztLQUNIO0lBRUQsTUFBTSxtQkFBbUIsR0FBRztRQUMxQixVQUFVLEVBQUUs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QUFJLEtBQUssU0FBUyxFQUFFO1lBQzVCLFdBQVcsQ0FBQyxFQUFFLEdBQUcsS0FBSyxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1lBQy9DLE9BQU87U0FDUjtRQUVELFdBQVcsQ0FBQztZQUNWLElBQUksRUFBRSxTQUFTO1lBQ2YsYUFBYSxFQUFFLEtBQUs7WUFDcEIsVUFBVSxFQUFFLEdBQUcsRUFBRTtZQUNqQixHQUFHLGFBQWEsRUFBRTtTQUNuQixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7SUFFRixPQUFPLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxZQUFZLENBQUMsQ0FBQztJQUNoQyxxQkFBcUI7SUFDckIsWUFBWSxFQUFFLENBQUM7SUFFZixNQUFNLElBQUEsdUJBQWEsRUFBQyxPQUFPLEVBQUUsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNuRCxDQUFDO0FBckZELHNCQXFGQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgSGFzaGlDb3JwLCBJbmNcbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNUEwtMi4wXG5pbXBvcnQgcGF0aCBmcm9tIFwicGF0aFwiO1xuaW1wb3J0IHtcbiAgQ2RrdGZQcm9qZWN0LFxuICBDZGt0ZlByb2plY3RPcHRpb25zLFxuICBNdXRhdGlvbk9wdGlvbnMsXG59IGZyb20gXCIuL2Nka3RmLXByb2plY3RcIjtcbmltcG9ydCAqIGFzIGZzIGZyb20gXCJmc1wiO1xuaW1wb3J0ICogYXMgY2hva2lkYXIgZnJvbSBcImNob2tpZGFyXCI7XG5pbXBvcnQgeyBsb2dnZXIsIEVycm9ycywgc2VuZFRlbGVtZXRyeSB9IGZyb20gXCJAY2RrdGYvY29tbW9uc1wiO1xuaW1wb3J0IHsgQ2RrdGZTdGFjayB9IGZyb20gXCIuL2Nka3RmLXN0YWNrXCI7XG5cbi8vIEluIHRoaXMgdmVyeSBmaXJzdCBpdGVyYXRpb24gd2Ugd2lsbCBmaW5kIG91dCB3aGljaCBmaWxlcyB0byB3YXRjaCBieSBhc2tpbmcgdGhlIHVzZXIgdG8gcHJvdmlkZSB0aGUgZmlsZXNcbi8vIFdlIGRlZmF1bHQgdG8gc29tZXRoaW5nIHJlYXNvbmFibGUgcGVyIGxhbmd1YWdlIGFuZCB3cml0ZSBpdCBpbnRvIHRoZSBjZGt0Lmpzb24gZmlsZVxuLy8gTWlkLVRlcm0gd2UgbWlnaHQgd2FudCB0byBhZGQgYSBXYXRjaEZpbGUgLyBXYXRjaERpciBjb25zdHJ1Y3QgdGhhdCB3ZSBjYW4gdXNlIChlLmcuIGluIGFzc2V0cykgYW5kIHRoYXQgYSB1c2VyIGNhbiB1c2UgdG8gc3BlY2lmeSB0aGVpciB3YXRjaCBiZWhhdmlvdXJcbi8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vaGFzaGljb3JwL3RlcnJhZm9ybS1jZGsvaXNzdWVzLzE2NjhcbmZ1bmN0aW9uIGdldE9yV3JpdGVEZWZhdWx0V2F0Y2hDb25maWcocHJvamVjdFBhdGggPSBwcm9jZXNzLmN3ZCgpKSB7XG4gIGNvbnN0IGNka3RmSnNvblBhdGggPSBwYXRoLnJlc29sdmUocHJvamVjdFBhdGgsIFwiY2RrdGYuanNvblwiKTtcbiAgbG9nZ2VyLmRlYnVnKGBHZXR0aW5nIGZpbGVzIHRvIHdhdGNoIGZyb20gY2RrdGYuanNvbiBhdCAke2Nka3RmSnNvblBhdGh9YCk7XG5cbiAgbGV0IGNka3RmSnNvbjtcbiAgdHJ5IHtcbiAgICBjZGt0Zkpzb24gPSByZXF1aXJlKGNka3RmSnNvblBhdGgpO1xuICB9IGNhdGNoIChlcnI6IGFueSkge1xuICAgIHRocm93IEVycm9ycy5JbnRlcm5hbChcbiAgICAgIGBDb3VsZCBub3QgZmluZCBjZGt0Zi5qc29uIGZpbGUgaW4gJHtwcm9qZWN0UGF0aH1gLFxuICAgICAgZXJyXG4gICAgKTtcbiAgfVxuXG4gIGlmIChjZGt0Zkpzb24ud2F0Y2hQYXR0ZXJuKSB7XG4gICAgbG9nZ2VyLmRlYnVnKGBGb3VuZCB3YXRjaFBhdHRlcm4gaW4gY2RrdGYuanNvbjogJHtjZGt0Zkpzb24ud2F0Y2hQYXR0ZXJufWApO1xuICAgIHJldHVybiBjZGt0Zkpzb24ud2F0Y2hQYXR0ZXJuO1xuICB9XG4gIGNvbnN0IGxhbmd1YWdlOlxuICAgIHwgXCJ0eXBlc2NyaXB0XCJcbiAgICB8IFwicHl0aG9uXCJcbiAgICB8IFwiamF2YVwiXG4gICAgfCBcImNzaGFycFwiXG4gICAgfCBcImdvXCJcbiAgICB8IHVuZGVmaW5lZCA9IGNka3RmSnNvbi5sYW5ndWFnZTtcblxuICBpZiAoIWxhbmd1YWdlKSB7XG4gICAgdGhyb3cgRXJyb3JzLlVzYWdlKFxuICAgICAgYE5vIGxhbmd1YWdlIHNwZWNpZmllZCBpbiBjZGt0Zi5qc29uLCBwbGVhc2UgZWl0aGVyIHNwZWNpZnkgYSBsYW5ndWFnZSBvciB3YXRjaFBhdHRlcm4gdG8gdXNlIHRoZSB3YXRjaCBjb21tYW5kYFxuICAgICk7XG4gIH1cblxuICBjb25zdCBkZWZhdWx0V2F0Y2hQYXR0ZXJuID0ge1xuICAgIHR5cGVzY3JpcHQ6IFtcIi4vKiovKi50c1wiXSxcbiAgICBweXRob246IFtcIi4vKiovKi5weVwiXSxcbiAgICBqYXZhOiBbXCJzcmMvKiovKi5qYXZhXCJdLFxuICAgIGNzaGFycDogW1wiLi8qKi8qLmNzXCJdLFxuICAgIGdvOiBbXCIuLyoqLyouZ29cIl0sXG4gIH1bbGFuZ3VhZ2VdO1xuXG4gIGZzLndyaXRlRmlsZVN5bmMoXG4gICAgY2RrdGZKc29uUGF0aCxcbiAgICBKU09OLnN0cmluZ2lmeSh7IC4uLmNka3RmSnNvbiwgd2F0Y2hQYXR0ZXJuOiBkZWZhdWx0V2F0Y2hQYXR0ZXJuIH0sIG51bGwsIDIpXG4gICk7XG4gIGxvZ2dlci5kZWJ1ZyhgV3JpdGUgZGVmYXVsdCB3YXRjaFBhdHRlcm4gZm9yICR7bGFuZ3VhZ2V9IGluIGNka3RmLmpzb24uYCk7XG5cbiAgcmV0dXJuIGRlZmF1bHRXYXRjaFBhdHRlcm47XG59XG5cbmNvbnN0IHByb2plY3RTdGF0dXMgPSAocHJvamVjdD86IENka3RmUHJvamVjdCkgPT4ge1xuICBpZiAoIXByb2plY3Q/LnN0YWNrc1RvUnVuLmxlbmd0aCkge1xuICAgIHJldHVybiB7XG4gICAgICBpblByb2dyZXNzOiBbXSxcbiAgICAgIGZpbmlzaGVkOiBbXSxcbiAgICAgIHBlbmRpbmc6IFtdLFxuICAgIH07XG4gIH1cblxuICBjb25zdCBpblByb2dyZXNzID0gcHJvamVjdC5zdGFja3NUb1J1bi5maWx0ZXIoKHMpID0+IHMuaXNSdW5uaW5nKTtcbiAgY29uc3QgZmluaXNoZWQgPSBwcm9qZWN0LnN0YWNrc1RvUnVuLmZpbHRlcigocykgPT4gcy5pc0RvbmUpO1xuICBjb25zdCBwZW5kaW5nID0gcHJvamVjdC5zdGFja3NUb1J1bi5maWx0ZXIoKHMpID0+IHMuaXNQZW5kaW5nKTtcbiAgcmV0dXJuIHsgaW5Qcm9ncmVzcywgZmluaXNoZWQsIHBlbmRpbmcgfTtcbn07XG5cbmV4cG9ydCB0eXBlIFN0YXRlID1cbiAgfCB7XG4gICAgICB0eXBlOiBcIndhaXRpbmdcIjtcbiAgICB9XG4gIHwge1xuICAgICAgdHlwZTogXCJydW5uaW5nXCI7XG4gICAgICBuZXh0UnVuUXVldWVkOiBib29sZWFuO1xuICAgICAgY3VycmVudFJ1bjogUHJvbWlzZTx2b2lkPjtcbiAgICAgIGluUHJvZ3Jlc3M6IENka3RmU3RhY2tbXTtcbiAgICAgIGZpbmlzaGVkOiBDZGt0ZlN0YWNrW107XG4gICAgICBwZW5kaW5nOiBDZGt0ZlN0YWNrW107XG4gICAgfVxuICB8IHsgdHlwZTogXCJzdG9wcGVkXCIgfTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHdhdGNoKFxuICBwcm9qZWN0T3B0aW9uczogQ2RrdGZQcm9qZWN0T3B0aW9ucyxcbiAgbXV0YXRpb25PcHRpb25zOiBNdXRhdGlvbk9wdGlvbnMsXG4gIGFib3J0U2lnbmFsOiBBYm9ydFNpZ25hbCxcbiAgb25TdGF0ZUNoYW5nZTogKG5ld1N0YXRlOiBTdGF0ZSkgPT4gdm9pZFxuKSB7XG4gIGNvbnN0IHBhdHRlcm5zID0gZ2V0T3JXcml0ZURlZmF1bHRXYXRjaENvbmZpZygpO1xuICBjb25zdCB3YXRjaGVyID0gY2hva2lkYXIud2F0Y2gocGF0dGVybnMsIHtcbiAgICBpZ25vcmVJbml0aWFsOiB0cnVlLFxuICB9KTtcbiAgbGV0IHN0YXRlOiBTdGF0ZSA9IHsgdHlwZTogXCJ3YWl0aW5nXCIgfTtcbiAgY29uc3QgY2hhbmdlU3RhdGUgPSAobmV3U3RhdGU6IFN0YXRlKSA9PiB7XG4gICAgc3RhdGUgPSBuZXdTdGF0ZTtcbiAgICBvblN0YXRlQ2hhbmdlKHN0YXRlKTtcbiAgfTtcblxuICBhc3luYyBmdW5jdGlvbiBydW4oKSB7XG4gICAgbG9nZ2VyLmRlYnVnKFwiUnVubmluZyBjZGt0ZiBkZXBsb3lcIik7XG4gICAgY29uc3QgcHJvamVjdCA9IG5ldyBDZGt0ZlByb2plY3Qoe1xuICAgICAgc3ludGhPcmlnaW46IFwid2F0Y2hcIixcbiAgICAgIC4uLnByb2plY3RPcHRpb25zLFxuICAgICAgb25Mb2c6IChsb2cpID0+IHtcbiAgICAgICAgaWYgKHByb2plY3RPcHRpb25zLm9uTG9nKSB7XG4gICAgICAgICAgcHJvamVjdE9wdGlvbnMub25Mb2cobG9nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhdGUudHlwZSA9PT0gXCJydW5uaW5nXCIpIHtcbiAgICAgICAgICBjaGFuZ2VTdGF0ZSh7IC4uLnN0YXRlLCAuLi5wcm9qZWN0U3RhdHVzKHByb2plY3QpIH0pO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0pO1xuICAgIGNvbnN0IGFib3J0ID0gKCkgPT4gcHJvamVjdC5oYXJkQWJvcnQoKTtcbiAgICBhYm9ydFNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgYWJvcnQpO1xuICAgIGF3YWl0IHByb2plY3QuZGVwbG95KG11dGF0aW9uT3B0aW9ucyk7XG4gICAgYWJvcnRTaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIGFib3J0KTtcbiAgICBsb2dnZXIuZGVidWcoXCJjZGt0ZiBkZXBsb3kgZmluaXNoZWRcIik7XG5cbiAgICBpZiAoc3RhdGUudHlwZSAhPT0gXCJydW5uaW5nXCIpIHtcbiAgICAgIHRocm93IEVycm9ycy5JbnRlcm5hbChcbiAgICAgICAgXCJXYXRjaCB3YXMgaW4gYSBzdGF0ZSB3aGVyZSB0aGUgc3RhdGUgd2FzIG5vdCBydW5uaW5nIGluIHRoZSBydW4gcGhhc2VcIlxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUubmV4dFJ1blF1ZXVlZCkge1xuICAgICAgbG9nZ2VyLmRlYnVnKFwiTmV4dCBydW4gd2FzIHF1ZXVlZCwgc3RhcnRpbmcgaXQgbm93XCIpO1xuICAgICAgY2hhbmdlU3RhdGUoe1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgbmV4dFJ1blF1ZXVlZDogZmFsc2UsXG4gICAgICAgIGN1cnJlbnRSdW46IHJ1bigpLFxuICAgICAgICAuLi5wcm9qZWN0U3RhdHVzKHByb2plY3QpLFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZ2dlci5kZWJ1ZyhcIk5vdGhpbmcgcXVldWVkLCB3YWl0aW5nIGZvciBjaGFuZ2VzXCIpO1xuICAgICAgY2hhbmdlU3RhdGUoeyB0eXBlOiBcIndhaXRpbmdcIiB9KTtcbiAgICB9XG4gIH1cblxuICBhYm9ydFNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgKCkgPT4ge1xuICAgIGxvZ2dlci5kZWJ1ZyhcIkFib3J0IHNpZ25hbCByZWNlaXZlZCwgc3RvcHBpbmcgd2F0Y2hcIik7XG4gICAgd2F0Y2hlci5jbG9zZSgpO1xuICAgIGNoYW5nZVN0YXRlKHsgdHlwZTogXCJzdG9wcGVkXCIgfSk7XG4gIH0pO1xuXG4gIGNvbnN0IG9uRmlsZUNoYW5nZSA9ICgpID0+IHtcbiAgICBpZiAoc3RhdGUudHlwZSA9PT0gXCJzdG9wcGVkXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUudHlwZSA9PT0gXCJydW5uaW5nXCIpIHtcbiAgICAgIGNoYW5nZVN0YXRlKHsgLi4uc3RhdGUsIG5leHRSdW5RdWV1ZWQ6IHRydWUgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY2hhbmdlU3RhdGUoe1xuICAgICAgdHlwZTogXCJydW5uaW5nXCIsXG4gICAgICBuZXh0UnVuUXVldWVkOiBmYWxzZSxcbiAgICAgIGN1cnJlbnRSdW46IHJ1bigpLFxuICAgICAgLi4ucHJvamVjdFN0YXR1cygpLFxuICAgIH0pO1xuICB9O1xuXG4gIHdhdGNoZXIub24oXCJhbGxcIiwgb25GaWxlQ2hhbmdlKTtcbiAgLy8gaW5pdGlhbGx5IHJ1biBvbmNlXG4gIG9uRmlsZUNoYW5nZSgpO1xuXG4gIGF3YWl0IHNlbmRUZWxlbWV0cnkoXCJ3YXRjaFwiLCB7IGV2ZW50OiBcInN0YXJ0XCIgfSk7XG59XG4iXX0=