"use strict";
/**
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: MPL-2.0
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.spawnPty = void 0;
const os = __importStar(require("os"));
const path = __importStar(require("path"));
const fs = __importStar(require("fs"));
const pty = __importStar(require("@cdktf/node-pty-prebuilt-multiarch"));
const commons_1 = require("@cdktf/commons");
/**
 * A wrapper around node-pty that handles the platform specific differences
 * and provide an intuitive API for bidirectional communication with the
 * spawned process.
 */
function spawnPty(config, onData) {
    const { args, options } = config;
    const file = os.platform() === "win32"
        ? findExecutable(config.file, options.cwd, options)
        : config.file;
    commons_1.logger.trace(`Spawning pty with file=${file}, args=${Array.isArray(args) ? `[${args.join(", ")}]` : `"${args}"`}, options=${JSON.stringify(options)}`);
    const p = pty.spawn(file, args, options);
    const actions = {
        write: (response) => {
            commons_1.logger.trace(`Sending response to pty (file=${file}, args=${Array.isArray(args) ? `[${args.join(", ")}]` : `"${args}"`}): ${response}`);
            p.write(response);
        },
        writeLine: (response) => {
            commons_1.logger.trace(`Sending response (with newline) to pty (file=${file}, args=${Array.isArray(args) ? `[${args.join(", ")}]` : `"${args}"`}): ${response}`);
            p.write(`${response}${os.EOL}`);
        },
        stop: () => {
            commons_1.logger.trace(`Aborting pty (file=${file}, args=${Array.isArray(args) ? `[${args.join(", ")}]` : `"${args}"`})`);
            p.write("\x03"); // CTRL + C, pty.kill() does not work on windows
        },
    };
    p.onData((data) => onData(data));
    const exitCode = new Promise((resolve) => {
        p.onExit(({ exitCode }) => {
            if (exitCode !== 0) {
                commons_1.logger.debug(`Pty (file=${file}, args=${Array.isArray(args) ? `[${args.join(", ")}]` : `"${args}"`}) exited with code ${exitCode}`);
            }
            resolve(exitCode);
        });
    });
    return { exitCode, actions };
}
exports.spawnPty = spawnPty;
// src: https://github.com/Microsoft/vscode/blob/c0c9ea27d6e8d660d8716d7acee82cf3c00fa3e5/src/vs/workbench/parts/tasks/electron-browser/terminalTaskSystem.ts#L691
// TODO: properly annotate source of this function
function findExecutable(command, cwd, options) {
    // If we have an absolute path then we take it.
    if (path.isAbsolute(command)) {
        return command;
    }
    const dir = path.dirname(command);
    if (dir !== ".") {
        // We have a directory and the directory is relative (see above). Make the path absolute
        // to the current working directory.
        return path.join(cwd, command);
    }
    let paths = undefined;
    // The options can override the PATH. So consider that PATH if present.
    if (options && options.env) {
        // Path can be named in many different ways and for the execution it doesn't matter
        for (const key of Object.keys(options.env)) {
            if (key.toLowerCase() === "path") {
                if (typeof options.env[key] === "string") {
                    paths = options.env[key].split(path.delimiter);
                }
                break;
            }
        }
    }
    if (paths === void 0 && typeof process.env.PATH === "string") {
        paths = process.env.PATH.split(path.delimiter);
    }
    // No PATH environment. Make path absolute to the cwd.
    if (paths === void 0 || paths.length === 0) {
        return path.join(cwd, command);
    }
    // We have a simple file name. We get the path variable from the env
    // and try to find the executable on the path.
    for (const pathEntry of paths) {
        // The path entry is absolute.
        let fullPath;
        if (path.isAbsolute(pathEntry)) {
            fullPath = path.join(pathEntry, command);
        }
        else {
            fullPath = path.join(cwd, pathEntry, command);
        }
        if (fs.existsSync(fullPath)) {
            return fullPath;
        }
        let withExtension = fullPath + ".com";
        if (fs.existsSync(withExtension)) {
            return withExtension;
        }
        withExtension = fullPath + ".exe";
        if (fs.existsSync(withExtension)) {
            return withExtension;
        }
    }
    return path.join(cwd, command);
}
//# sourceMappingURL=data:application/json;base64,