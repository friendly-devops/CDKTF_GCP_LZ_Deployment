"use strict";
/**
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: MPL-2.0
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAndStartDestroyService = exports.createAndStartDeployService = exports.terraformPtyService = exports.deployMachine = exports.handleLineReceived = exports.bufferUnterminatedLines = exports.extractVariableNameFromPrompt = exports.isDeployEvent = void 0;
const xstate_1 = require("xstate");
const commons_1 = require("@cdktf/commons");
const errors_1 = require("../errors");
const strip_ansi_1 = __importDefault(require("strip-ansi"));
const os_1 = require("os");
const pty_process_1 = require("./pty-process");
function isDeployEvent(event, type) {
    return event.type === type;
}
exports.isDeployEvent = isDeployEvent;
function extractVariableNameFromPrompt(line) {
    const noColorLine = (0, strip_ansi_1.default)(line);
    const lines = noColorLine.split("\n");
    const lineWithVar = lines.find((line) => line.includes("var."));
    if (!lineWithVar) {
        throw commons_1.Errors.Internal(`Could not find variable name in prompt: ${line}. This is most likely a bug in cdktf. Please report it at https://cdk.tf/bug`);
    }
    return lineWithVar.split("var.")[1].trim();
}
exports.extractVariableNameFromPrompt = extractVariableNameFromPrompt;
// used to only send completed lines (= with a newline at the end of them) to our logic (#2827)
function bufferUnterminatedLines(handler) {
    let buffer = "";
    function bufferedReceiverFunction(output) {
        buffer += output;
        const lines = buffer.split(os_1.EOL);
        // if the string ends with \n this will be an empty string
        // else it will contain an "unfinished" line
        // the fallback to an empty string is to make TS happy and should never happen
        buffer = lines.pop() || "";
        if (lines.length > 0)
            handler(lines.join(os_1.EOL) + "\n");
    }
    bufferedReceiverFunction.getBuffer = () => buffer;
    return bufferedReceiverFunction;
}
exports.bufferUnterminatedLines = bufferUnterminatedLines;
function handleLineReceived(send) {
    return (output) => {
        let hideOutput = false;
        const noColorLine = (0, strip_ansi_1.default)(output);
        // possible events based on line
        if (noColorLine.includes("approved using the UI or API")) {
            send({ type: "APPROVED_EXTERNALLY" });
        }
        else if (noColorLine.includes("discarded using the UI or API")) {
            send({ type: "REJECTED_EXTERNALLY" });
        }
        else if (noColorLine.includes("Do you want to perform these actions") ||
            noColorLine.includes("Do you really want to destroy all resources?") ||
            noColorLine.includes("Do you really want to destroy all resources in workspace")) {
            hideOutput = true;
            send({ type: "OUTPUT_RECEIVED", output });
            send({ type: "REQUEST_APPROVAL" });
        }
        else if (noColorLine.includes("var.") &&
            noColorLine.includes("Enter a value:")) {
            hideOutput = true;
            const variableName = extractVariableNameFromPrompt(output);
            send({
                type: "OUTPUT_RECEIVED",
                output: (0, errors_1.missingVariable)(variableName),
            });
            send({ type: "VARIABLE_MISSING", variableName });
        }
        else if (noColorLine.includes("Do you want to override the soft failed policy check?")) {
            hideOutput = true;
            send({ type: "OUTPUT_RECEIVED", output });
            send({ type: "REQUEST_SENTINEL_OVERRIDE" });
        }
        else if (noColorLine.includes("overridden using the UI or API")) {
            send({ type: "OVERRIDDEN_EXTERNALLY" });
        }
        if (!hideOutput) {
            send({
                type: "OUTPUT_RECEIVED",
                output,
            });
        }
    };
}
exports.handleLineReceived = handleLineReceived;
exports.deployMachine = (0, xstate_1.createMachine)({
    predictableActionArguments: true,
    context: {},
    initial: "idle",
    id: "root",
    states: {
        idle: {
            on: {
                START: { target: "running" },
            },
        },
        running: {
            invoke: {
                id: "pty",
                src: "runTerraformInPty",
            },
            on: {
                EXITED: "exited",
                STOP: "stopped",
            },
            initial: "processing",
            states: {
                // TODO: what else might TF CLI be asking? Can we detect any question from the TF CLI to show a good error?
                processing: {
                    on: {
                        REQUEST_APPROVAL: "awaiting_approval",
                        REQUEST_SENTINEL_OVERRIDE: "awaiting_sentinel_override",
                        VARIABLE_MISSING: {
                            actions: (0, xstate_1.send)({ type: "EXITED", exitCode: 1 }),
                        },
                    },
                },
                awaiting_approval: {
                    on: {
                        APPROVED_EXTERNALLY: "processing",
                        REJECTED_EXTERNALLY: {
                            target: "#root.exited",
                            actions: (0, xstate_1.assign)({ cancelled: true }),
                        },
                        APPROVE: {
                            target: "processing",
                            actions: (0, xstate_1.send)({ type: "SEND_LINE", input: "yes" }, { to: "pty" }),
                        },
                        REJECT: {
                            target: "processing",
                            actions: [
                                (0, xstate_1.send)({ type: "SEND_LINE", input: "no" }, { to: "pty" }),
                                (0, xstate_1.assign)({
                                    cancelled: true,
                                }),
                            ],
                        },
                    },
                },
                awaiting_sentinel_override: {
                    on: {
                        OVERRIDDEN_EXTERNALLY: "processing",
                        OVERRIDE_REJECTED_EXTERNALLY: {
                            target: "#root.exited",
                            actions: (0, xstate_1.assign)({ cancelled: true }),
                        },
                        // This is a bit of a hack, because the external discard message
                        // posted by Terraform UI is the same as during apply. So, we capture that
                        // and emit our own event to make it more specific.
                        REJECTED_EXTERNALLY: {
                            actions: (0, xstate_1.send)({ type: "OVERRIDE_REJECTED_EXTERNALLY" }),
                        },
                        OVERRIDE: {
                            target: "processing",
                            actions: (0, xstate_1.send)({ type: "SEND_LINE", input: "override" }, { to: "pty" }),
                        },
                        REJECT_OVERRIDE: {
                            target: "processing",
                            actions: [
                                (0, xstate_1.send)({ type: "SEND_LINE", input: "no" }, { to: "pty" }),
                                (0, xstate_1.assign)({
                                    cancelled: true,
                                }),
                            ],
                        },
                    },
                },
            },
        },
        exited: { type: "final" },
        stopped: { type: "final" },
    },
}, {
    services: {
        runTerraformInPty: (context, event) => terraformPtyService(context, event, pty_process_1.spawnPty),
    },
});
function terraformPtyService(_context, event, spawn = pty_process_1.spawnPty) {
    return (send, onReceive) => {
        if (event.type !== "START") {
            throw commons_1.Errors.Internal(`Terraform CLI invocation state machine: Unexpected event caused transition to the running state: ${event.type}`);
        }
        // Communication from the pty to the caller
        const receiver = bufferUnterminatedLines(handleLineReceived(send));
        const { exitCode, actions } = spawn(event.pty, (data) => {
            receiver(data);
        });
        // Communication from the caller to the pty
        onReceive((event) => {
            if (event.type === "SEND_LINE") {
                actions.writeLine(event.input);
            }
        });
        exitCode.then((exitCode) => {
            const lastBuffer = receiver.getBuffer();
            if (lastBuffer.length > 0) {
                commons_1.logger.debug(`Terraform CLI exited but the last outputted line was not terminated with a newline and hence is still in the buffer and wasn't printed: "${lastBuffer}"`);
            }
            send({ type: "EXITED", exitCode });
        });
        return () => {
            commons_1.logger.trace("Terraform CLI state machine: cleaning up pty");
            actions.stop();
        };
    };
}
exports.terraformPtyService = terraformPtyService;
function createAndStartDeployService(options) {
    var _a, _b;
    const service = (0, xstate_1.interpret)(exports.deployMachine);
    const args = [
        "apply",
        ...(options.autoApprove ? ["-auto-approve"] : []),
        // "-input=false", we can't use this anymore but TODO: we need to detect TF CLI asking for missing inputs and either allow passing them or stop there and fail
        ...options.extraOptions,
        ...(options.refreshOnly ? ["-refresh-only"] : []),
        ...(options.noColor ? ["-no-color"] : []),
        ...(options.parallelism > -1
            ? [`-parallelism=${options.parallelism}`]
            : []),
    ];
    (_a = options.vars) === null || _a === void 0 ? void 0 : _a.forEach((v) => {
        args.push(`-var=${v}`);
    });
    (_b = options.varFiles) === null || _b === void 0 ? void 0 : _b.forEach((v) => {
        args.push(`-var-file=${v}`);
    });
    commons_1.logger.debug(`Executing ${options.terraformBinaryName} ${args.join(" ")} in ${options.workdir}`);
    const config = {
        file: options.terraformBinaryName,
        args,
        options: {
            cwd: options.workdir,
            env: process.env, // TODO: make this explicit and move to caller or whatever
        },
    };
    service.send({ type: "START", pty: config });
    return service;
}
exports.createAndStartDeployService = createAndStartDeployService;
function createAndStartDestroyService(options) {
    var _a, _b;
    const service = (0, xstate_1.interpret)(exports.deployMachine);
    const args = [
        "destroy",
        ...(options.autoApprove ? ["-auto-approve"] : []),
        // "-input=false", we can't use this anymore but TODO: we need to detect TF CLI asking for missing inputs and either allow passing them or stop there and fail
        ...options.extraOptions,
        ...(options.noColor ? ["-no-color"] : []),
        ...(options.parallelism > -1
            ? [`-parallelism=${options.parallelism}`]
            : []),
    ];
    (_a = options.vars) === null || _a === void 0 ? void 0 : _a.forEach((v) => {
        args.push(`-var=${v}`);
    });
    (_b = options.varFiles) === null || _b === void 0 ? void 0 : _b.forEach((v) => {
        args.push(`-var-file=${v}`);
    });
    commons_1.logger.debug(`Executing ${options.terraformBinaryName} ${args.join(" ")} in ${options.workdir}`);
    const config = {
        file: options.terraformBinaryName,
        args,
        options: {
            cwd: options.workdir,
            env: process.env, // TODO: make this explicit and move to caller or whatever
        },
    };
    service.send({ type: "START", pty: config });
    return service;
}
exports.createAndStartDestroyService = createAndStartDestroyService;
//# sourceMappingURL=data:application/json;base64,