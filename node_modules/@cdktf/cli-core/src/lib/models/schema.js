"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.schema = void 0;
// Copyright (c) HashiCorp, Inc
// SPDX-License-Identifier: MPL-2.0
const z = __importStar(require("zod"));
// Schemas from https://www.terraform.io/docs/internals/machine-readable-ui.html#change_summary
const resource = z.object({
    addr: z.string(),
    module: z.string(),
    resource: z.string(),
    implied_provider: z.string(),
    resource_type: z.string(),
    resource_name: z.string(),
    resource_key: z.string().optional().nullable(),
});
const baseMessage = z
    .object({
    "@level": z.enum(["info", "error", "warn"]),
    "@message": z.string(),
    "@module": z.string(),
    "@timestamp": z.string(),
})
    .nonstrict();
const action = z.enum(["noop", "create", "read", "update", "delete"]);
const change = z.object({
    resource,
    action,
});
const replaceChange = change.extend({
    action: z.literal("replace"),
    reason: z.enum(["tainted", "requested", "cannot_update"]),
});
const plannedChange = baseMessage.extend({
    type: z.literal("planned_change"),
    change: z.union([replaceChange, change]),
});
const version = baseMessage.extend({
    type: z.literal("version"),
});
const changeSummary = baseMessage.extend({
    type: z.literal("change_summary"),
    changes: z.object({
        add: z.number(),
        change: z.number(),
        remove: z.number(),
        operation: z.enum(["plan", "apply", "deploy"]),
    }),
});
const outputs = baseMessage.extend({
    type: z.literal("outputs"),
    outputs: z.record(z.object({
        sensitive: z.boolean(),
        type: z.string(),
        value: z.string(),
    })),
});
const applyStart = baseMessage.extend({
    type: z.literal("apply_start"),
    hook: z.object({
        resource,
        action,
        id_key: z.string().optional(),
        id_value: z.string().optional(),
    }),
});
const applyProgress = baseMessage.extend({
    type: z.literal("apply_progress"),
    hook: z.object({
        resource,
        action,
        elapsed_seconds: z.number(),
    }),
});
const applyComplete = baseMessage.extend({
    type: z.literal("apply_complete"),
    hook: z.object({
        resource,
        action,
        id_key: z.string().optional(),
        id_value: z.string().optional(),
        elapsed_seconds: z.number(),
    }),
});
const applyError = baseMessage.extend({
    type: z.literal("apply_errored"),
    hook: z.object({
        resource,
        action,
        elapsed_seconds: z.number(),
    }),
});
const provisionStart = baseMessage.extend({
    type: z.literal("provision_start"),
    hook: z.object({
        resource,
        provisioner: z.string(),
    }),
});
const provisionProgress = baseMessage.extend({
    type: z.literal("provision_progress"),
    hook: z.object({
        resource,
        provisioner: z.string(),
        output: z.string(),
    }),
});
const provisionComplete = baseMessage.extend({
    type: z.literal("provision_complete"),
    hook: z.object({
        resource,
        provisioner: z.string(),
    }),
});
const provisionErrored = baseMessage.extend({
    type: z.literal("provision_errored"),
    hook: z.object({
        resource,
        provisioner: z.string(),
    }),
});
const refreshStart = baseMessage.extend({
    type: z.literal("refresh_start"),
    hook: z.object({
        resource,
        id_key: z.string().optional(),
        id_value: z.string().optional(),
    }),
});
const refreshComplete = baseMessage.extend({
    type: z.literal("refresh_complete"),
    hook: z.object({
        resource,
        id_key: z.string().optional(),
        id_value: z.string().optional(),
    }),
});
const logMessage = baseMessage.extend({
    type: z.literal("log"),
});
exports.schema = z.union([
    version,
    plannedChange,
    changeSummary,
    outputs,
    applyStart,
    applyProgress,
    applyComplete,
    applyError,
    provisionStart,
    provisionProgress,
    provisionComplete,
    provisionErrored,
    refreshStart,
    refreshComplete,
    logMessage,
]);
//# sourceMappingURL=data:application/json;base64,