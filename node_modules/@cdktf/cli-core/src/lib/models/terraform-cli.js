"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tryRemoveGeneratedConfigurationFile = exports.tryReadGeneratedConfigurationFile = exports.TerraformCli = exports.TerraformCliPlan = void 0;
// Copyright (c) HashiCorp, Inc
// SPDX-License-Identifier: MPL-2.0
const strip_ansi_1 = __importDefault(require("strip-ansi"));
const commons_1 = require("@cdktf/commons");
const terraform_1 = require("./terraform");
const deploy_machine_1 = require("./deploy-machine");
const waitFor_1 = require("xstate/lib/waitFor");
const errors_1 = require("../errors");
const terraform_json_1 = require("../terraform-json");
const pty_process_1 = require("./pty-process");
const path_1 = __importDefault(require("path"));
const fs = __importStar(require("fs-extra"));
const GENERATE_CONFIG_OUT_FILE = "generated_resources.tf";
class TerraformCliPlan extends terraform_1.AbstractTerraformPlan {
    constructor(planFile, plan) {
        super(planFile, plan === null || plan === void 0 ? void 0 : plan.resource_changes, plan === null || plan === void 0 ? void 0 : plan.output_changes);
        this.planFile = planFile;
        this.plan = plan;
    }
}
exports.TerraformCliPlan = TerraformCliPlan;
class AbstractOutputFilter {
}
// The plan might error if there is a variable missing, but the error message hints the user
// in a wrong direction. We therefore catch the error and rethrow it with a more helpful message
class VariableRequiredFilter extends AbstractOutputFilter {
    // Example for "No value for required variable" error
    // ╷
    // │ Error: No value for required variable
    // │
    // │   on cdk.tf.json line 31, in variable:
    // │   31:     "with-dashes": {
    // │
    // │ The root module input variable "with-dashes" is not set, and has no default
    // │ value. Use a -var or -var-file command line argument to provide a value for
    // │ this variable
    static condition(input) {
        const line = (0, strip_ansi_1.default)(input);
        return (line.includes("Error: No value for required variable") &&
            line.includes("The root module input variable"));
    }
    static transform(line) {
        const startMarker = 'The root module input variable "';
        const variableName = line.substring(line.indexOf(startMarker) + startMarker.length, line.indexOf('" is not set'));
        return (0, errors_1.missingVariable)(variableName);
    }
}
class TerraformCli {
    constructor(abortSignal, stack, createTerraformLogHandler = (_phase, _filter) => (_stdout, _isErr = false) => { } // eslint-disable-line @typescript-eslint/no-empty-function
    ) {
        this.abortSignal = abortSignal;
        this.stack = stack;
        this.workdir = stack.workingDirectory;
        this.onStdout =
            (phase, filter) => (stdout) => createTerraformLogHandler(phase, filter)(Buffer.isBuffer(stdout) ? stdout.toString() : stdout);
        this.onStderr =
            (phase, filter) => (stderr) => createTerraformLogHandler(phase, filter)(stderr.toString(), true);
    }
    async init(opts) {
        await this.setUserAgent();
        const args = ["init"];
        if (opts.needsUpgrade) {
            args.push("-upgrade");
        }
        if (opts.noColor) {
            args.push("-no-color");
        }
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        let initCanNotContinue = (_err) => { };
        const rejectsIfInitCanNotContinue = new Promise((_resolve, reject) => {
            initCanNotContinue = reject;
        });
        const stdout = this.onStdout("init");
        const { actions, exitCode } = (0, pty_process_1.spawnPty)({
            file: commons_1.terraformBinaryName,
            args,
            options: {
                cwd: this.workdir,
                env: process.env,
            },
        }, (data) => {
            stdout(data);
            if (data.includes("Should Terraform migrate your existing state?")) {
                if (opts.migrateState) {
                    actions.writeLine("yes");
                }
                else {
                    actions.stop();
                    initCanNotContinue("Please pass the --migrate-state flag to migrate your state");
                }
            }
        });
        this.abortSignal.addEventListener("abort", () => {
            actions.stop();
        });
        const progress = exitCode.then((code) => {
            if (code !== 0) {
                throw new Error(`terraform init failed with exit code ${code}`);
            }
        });
        await Promise.race([progress, rejectsIfInitCanNotContinue]);
        // TODO: this might have performance implications because we don't know if we're
        // running a remote plan or a local one (so we run it always for all platforms)
        // while we'd only need it for remote plans
        if (opts.needsLockfileUpdate) {
            await (0, commons_1.exec)(commons_1.terraformBinaryName, [
                "providers",
                "lock",
                "-platform=linux_amd64",
                ...(opts.noColor ? ["-no-color"] : []),
            ], {
                cwd: this.workdir,
                env: process.env,
                signal: this.abortSignal,
                noColor: opts.noColor,
            }, this.onStdout("init"), this.onStderr("init"));
        }
    }
    get isCloudStack() {
        var _a, _b, _c;
        const parsedStack = terraform_json_1.terraformJsonSchema.parse(JSON.parse(this.stack.content));
        return Boolean(((_b = (_a = parsedStack.terraform) === null || _a === void 0 ? void 0 : _a.backend) === null || _b === void 0 ? void 0 : _b.remote) || ((_c = parsedStack.terraform) === null || _c === void 0 ? void 0 : _c.cloud));
    }
    get hasImports() {
        const parsedStack = terraform_json_1.terraformJsonSchema.parse(JSON.parse(this.stack.content));
        return Boolean(parsedStack.import);
    }
    async plan(opts) {
        const { destroy = false, refreshOnly = false, parallelism = -1, vars = [], varFiles = [], noColor = false, } = opts;
        const options = ["plan", "-input=false"];
        const generatedConfigFile = path_1.default.join(this.workdir, GENERATE_CONFIG_OUT_FILE);
        if (fs.existsSync(generatedConfigFile)) {
            fs.remove(generatedConfigFile);
        }
        if (this.hasImports) {
            options.push(`-generate-config-out=${GENERATE_CONFIG_OUT_FILE}`);
        }
        if (!this.isCloudStack) {
            const planFile = "plan";
            options.push("-out", planFile);
        }
        if (destroy) {
            options.push("-destroy");
        }
        if (refreshOnly) {
            options.push("-refresh-only");
        }
        if (parallelism > -1) {
            options.push(`-parallelism=${parallelism}`);
        }
        if (noColor) {
            options.push("-no-color");
        }
        vars.forEach((v) => options.push(`-var=${v}`));
        varFiles.forEach((v) => options.push(`-var-file=${v}`));
        commons_1.logger.debug(`Executing ${commons_1.terraformBinaryName} ${options.join(" ")} in ${this.workdir}`);
        await this.setUserAgent();
        await (0, commons_1.exec)(commons_1.terraformBinaryName, options, {
            cwd: this.workdir,
            env: process.env,
            signal: this.abortSignal,
            noColor,
        }, this.onStdout("plan", [VariableRequiredFilter]), this.onStderr("plan", [VariableRequiredFilter]));
    }
    async deploy({ autoApprove = false, refreshOnly = false, noColor = false, parallelism = -1, extraOptions = [], vars = [], varFiles = [], }, callback) {
        await this.setUserAgent();
        const service = (0, deploy_machine_1.createAndStartDeployService)({
            terraformBinaryName: commons_1.terraformBinaryName,
            workdir: this.workdir,
            refreshOnly,
            noColor,
            autoApprove,
            parallelism,
            extraOptions,
            vars,
            varFiles,
        });
        return this.handleService("deploy", service, callback);
    }
    async destroy({ autoApprove = false, parallelism = -1, noColor = false, extraOptions = [], vars = [], varFiles = [], }, callback) {
        await this.setUserAgent();
        const service = (0, deploy_machine_1.createAndStartDestroyService)({
            terraformBinaryName: commons_1.terraformBinaryName,
            workdir: this.workdir,
            autoApprove,
            parallelism,
            noColor,
            extraOptions,
            vars,
            varFiles,
        });
        return this.handleService("destroy", service, callback);
    }
    async handleService(type, service, callback) {
        // stop terraform apply if signaled as such from the outside (e.g. via ctrl+c)
        this.abortSignal.addEventListener("abort", () => {
            service.send("STOP");
        }, { once: true });
        // relay logs to stdout
        service.onEvent((event) => {
            commons_1.logger.trace(`Terraform CLI state machine event: ${JSON.stringify(event)}`);
            if ((0, deploy_machine_1.isDeployEvent)(event, "OUTPUT_RECEIVED"))
                this.onStdout(type)(event.output);
            else if ((0, deploy_machine_1.isDeployEvent)(event, "APPROVED_EXTERNALLY"))
                callback({ type: "external approval reply", approved: true });
            else if ((0, deploy_machine_1.isDeployEvent)(event, "REJECTED_EXTERNALLY"))
                callback({ type: "external approval reply", approved: false });
            else if ((0, deploy_machine_1.isDeployEvent)(event, "OVERRIDDEN_EXTERNALLY"))
                callback({
                    type: "external sentinel override reply",
                    overridden: true,
                });
            else if ((0, deploy_machine_1.isDeployEvent)(event, "OVERRIDE_REJECTED_EXTERNALLY"))
                callback({
                    type: "external sentinel override reply",
                    overridden: false,
                });
        });
        let previousState = "idle";
        service.onTransition((state) => {
            // only send updates on actual state change
            // onTransition is called even if the state didn't change but only an event happened
            if (state.matches(previousState))
                return;
            commons_1.logger.trace(`Terraform CLI state machine state transition: ${JSON.stringify(previousState)} => ${JSON.stringify(state.value)}`);
            if (state.matches({ running: "awaiting_approval" })) {
                callback({
                    type: "waiting for approval",
                    approve: () => service.send("APPROVE"),
                    reject: () => service.send("REJECT"),
                });
            }
            else if (state.matches({ running: "awaiting_sentinel_override" })) {
                callback({
                    type: "waiting for sentinel override",
                    override: () => service.send("OVERRIDE"),
                    reject: () => service.send("REJECT_OVERRIDE"),
                });
            }
            else if (state.matches({ running: "processing" })) {
                callback({
                    type: "running",
                    cancelled: Boolean(state.context.cancelled),
                });
            }
            previousState = state.value;
        });
        service.start();
        const state = await (0, waitFor_1.waitFor)(service, (state) => !!state.done, {
            timeout: Infinity,
        });
        commons_1.logger.trace(`Invoking Terraform CLI for ${type} done (state machine reached final state). Last event: ${JSON.stringify(state.event)}. Context: ${JSON.stringify(state.context)}`);
        // example events: { type: 'EXITED', exitCode: 0 }, { type: 'EXTERNAL_REJECT' }
        if (state.event.type === "EXITED" &&
            state.event.exitCode !== 0 &&
            !state.context.cancelled // don't fail if we cancelled the run
        ) {
            throw `Invoking Terraform CLI failed with exit code ${state.event.exitCode}`;
        }
        return { cancelled: Boolean(state.context.cancelled) };
    }
    async version() {
        try {
            return await (0, commons_1.exec)(commons_1.terraformBinaryName, ["-v"], {
                cwd: this.workdir,
                env: process.env,
                signal: this.abortSignal,
                noColor: true,
            }, this.onStdout("version"), this.onStderr("version"));
        }
        catch (_a) {
            throw new Error("Terraform CLI not present - Please install a current version https://learn.hashicorp.com/terraform/getting-started/install.html");
        }
    }
    async output() {
        const output = await (0, commons_1.exec)(commons_1.terraformBinaryName, ["output", "-json"], {
            cwd: this.workdir,
            env: process.env,
            signal: this.abortSignal,
            noColor: true,
        }, 
        // We don't need to log the output here since we use it later on
        () => { }, // eslint-disable-line @typescript-eslint/no-empty-function
        this.onStderr("output"));
        try {
            return JSON.parse(output);
        }
        catch (e) {
            throw commons_1.Errors.External(`Failed to parse terraform output: ${e}. The output was '${output}'`);
        }
    }
    async setUserAgent() {
        // Read the cdktf version from the 'cdk.tf.json' file
        // and set the user agent.
        const version = await (0, commons_1.readCDKTFVersion)(this.workdir);
        if (version != "") {
            process.env.TF_APPEND_USER_AGENT =
                "cdktf/" + version + " (+https://github.com/hashicorp/terraform-cdk)";
        }
    }
    // We don't need to clean anything up for a running execution in the CLI since there is no left-over state in contrast to an open Terraform Cloud run
    async abort() {
        return;
    }
}
exports.TerraformCli = TerraformCli;
async function tryReadGeneratedConfigurationFile(workingDir) {
    const generatedConfigPath = path_1.default.join(workingDir, GENERATE_CONFIG_OUT_FILE);
    if (!fs.existsSync(generatedConfigPath)) {
        return null;
    }
    return fs.readFileSync(generatedConfigPath, "utf-8");
}
exports.tryReadGeneratedConfigurationFile = tryReadGeneratedConfigurationFile;
async function tryRemoveGeneratedConfigurationFile(workingDir) {
    const generatedConfigPath = path_1.default.join(workingDir, GENERATE_CONFIG_OUT_FILE);
    if (fs.existsSync(generatedConfigPath)) {
        fs.unlinkSync(generatedConfigPath);
    }
}
exports.tryRemoveGeneratedConfigurationFile = tryRemoveGeneratedConfigurationFile;
//# sourceMappingURL=data:application/json;base64,