"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CdktfStack = void 0;
const output_1 = require("./output");
const commons_1 = require("@cdktf/commons");
const terraform_logs_1 = require("./server/terraform-logs");
const terraform_cli_1 = require("./models/terraform-cli");
const dependency_manager_1 = require("./dependencies/dependency-manager");
const terraform_json_1 = require("./terraform-json");
const terraform_provider_lock_1 = require("./terraform-provider-lock");
const convert_1 = require("./convert");
async function getTerraformClient(abortSignal, stack, createTerraformLogHandler) {
    return new terraform_cli_1.TerraformCli(abortSignal, stack, createTerraformLogHandler);
}
class CdktfStack {
    constructor(options) {
        this.options = options;
        this.stopped = false;
        this.currentState = "idle";
        this.stack = options.stack;
        this.parsedContent = terraform_json_1.terraformJsonSchema.parse(JSON.parse(this.stack.content));
    }
    get isPending() {
        return this.currentState === "idle" && !this.stopped;
    }
    get isDone() {
        return (this.currentState === "done" ||
            this.currentState === "errored" ||
            this.stopped);
    }
    get isRunning() {
        return !this.isPending && !this.isDone;
    }
    updateState(update) {
        commons_1.logger.debug(`[${this.stack.name}]: ${update.type}`);
        this.currentState = update.type;
        switch (update.type) {
            case "idle":
            case "done":
                break;
            case "errored":
                this.error = update.error;
                this.options.onUpdate(update);
                break;
            case "outputs fetched":
            case "deployed":
                commons_1.logger.debug(`Outputs: ${JSON.stringify(update.outputs)}`);
                commons_1.logger.debug(`OutputsByConstructId: ${JSON.stringify(update.outputsByConstructId)}`);
                this.outputs = update.outputs;
                this.outputsByConstructId = update.outputsByConstructId;
                this.options.onUpdate(update);
                break;
            default:
                this.options.onUpdate(update);
                break;
        }
    }
    createTerraformLogHandler(phase, filters) {
        commons_1.logger.debug("Creating terraform log handler", phase);
        const onLog = this.options.onLog;
        return (msg, isError = false) => {
            const message = (0, terraform_logs_1.extractJsonLogIfPresent)(msg);
            commons_1.logger.debug(`[${this.options.stack.name}](${phase}): ${msg}`);
            const filterToApply = filters === null || filters === void 0 ? void 0 : filters.find((filter) => filter.condition(message));
            const filteredMessage = filterToApply
                ? filterToApply.transform(message)
                : message;
            if (filteredMessage) {
                commons_1.logger.debug(`Filter ${filterToApply} applied on line '${message}' with result '${filteredMessage}'`);
            }
            if (onLog) {
                onLog({ message: filteredMessage, isError });
            }
        };
    }
    async terraformClient() {
        return await getTerraformClient(this.options.abortSignal, this.options.stack, this.createTerraformLogHandler.bind(this));
    }
    async initalizeTerraform(noColor) {
        var _a;
        const terraform = await this.terraformClient();
        const needsLockfileUpdate = await this.checkNeedsLockfileUpdate();
        const needsUpgrade = await this.checkNeedsUpgrade();
        await terraform.init({
            needsUpgrade,
            noColor: noColor !== null && noColor !== void 0 ? noColor : false,
            needsLockfileUpdate,
            migrateState: (_a = this.options.migrateState) !== null && _a !== void 0 ? _a : false,
        });
        return terraform;
    }
    requiredProviders() {
        var _a;
        // Read required providers from the stack output
        const requiredProviders = (_a = this.parsedContent.terraform) === null || _a === void 0 ? void 0 : _a.required_providers;
        return Object.values(requiredProviders || {}).reduce((acc, obj) => {
            const constraint = new dependency_manager_1.ProviderConstraint(obj.source, obj.version);
            acc[constraint.source] = constraint;
            return acc;
        }, {});
    }
    async checkNeedsLockfileUpdate() {
        if (this.options.migrateState) {
            // If we're migrating state, we need to init
            return true;
        }
        const lock = new terraform_provider_lock_1.TerraformProviderLock(this.stack.workingDirectory);
        const lockFileExists = await lock.hasProviderLockFile();
        if (!lockFileExists) {
            // If we don't have a lock file, this is probably the first init
            return true;
        }
        const requiredProviders = this.requiredProviders();
        for (const provider of Object.values(requiredProviders)) {
            const hasProvider = await lock.hasMatchingProvider(provider);
            if (!hasProvider) {
                // If we don't have a provider or version doesn't match, we need to init
                return true;
            }
        }
        return false;
    }
    async checkNeedsUpgrade() {
        const lock = new terraform_provider_lock_1.TerraformProviderLock(this.stack.workingDirectory);
        const allProviders = this.requiredProviders();
        const lockedProviders = Object.values(await lock.providers());
        // Check if any provider contained in `providers` violates constraints in `lockedProviders`
        // Upgrade if some provider constraint not met
        // If a provider wasn't preset in lockedProviders, that's fine; it will just get added
        return lockedProviders.some((lockedProvider) => {
            var _a;
            const lockedConstraint = lockedProvider.constraints;
            if (!lockedConstraint) {
                // Provider lock doesn't have a constraint specified, so we can't check.
                // This shouldn't happen
                commons_1.logger.debug(`Provider lock doesn't have a constraint for ${lockedProvider.name}`);
                return false;
            }
            const provider = allProviders[lockedConstraint.source];
            if (!provider) {
                // else no longer using this provider, so won't cause problems
                return;
            }
            return !lockedConstraint.matchesVersion((_a = provider.version) !== null && _a !== void 0 ? _a : ">0");
        });
    }
    async run(cb) {
        if (this.stopped) {
            return;
        }
        try {
            this.currentWorkPromise = cb();
            await this.currentWorkPromise;
            this.updateState({ type: "done" });
        }
        catch (e) {
            commons_1.logger.trace("Error in currentWorkPromise", e);
            this.currentWorkPromise = undefined;
            this.updateState({
                type: "errored",
                stackName: this.stack.name,
                error: String(e),
            });
            throw e;
        }
        finally {
            this.currentWorkPromise = undefined;
        }
    }
    async diff({ refreshOnly, terraformParallelism, vars, varFiles, noColor, }) {
        await this.run(async () => {
            this.updateState({ type: "planning", stackName: this.stack.name });
            const terraform = await this.terraformClient();
            await terraform.plan({
                destroy: false,
                refreshOnly,
                parallelism: terraformParallelism,
                vars,
                varFiles,
                noColor,
            });
            this.updateState({ type: "planned", stackName: this.stack.name });
            // Find generated file
            const configFile = await (0, terraform_cli_1.tryReadGeneratedConfigurationFile)(this.stack.workingDirectory);
            if (configFile) {
                this.updateState({
                    type: "import with configuration detected",
                    stackName: this.stack.name,
                    configuration: configFile,
                });
                const convertedCode = await (0, convert_1.convertConfigurationFile)(configFile, this.stack.workingDirectory);
                this.updateState({
                    type: "import with configuration converted",
                    stackName: this.stack.name,
                    configuration: convertedCode,
                });
                const onLog = this.options.onLog;
                if (onLog) {
                    onLog({
                        message: `Import without configuration detected. Terraform has created configuration for it:
${configFile}

CDKTF has translated the code to the following:

${convertedCode}

Please review the code and make any necessary changes before adding it to your codebase.
Make sure to only copy the code within the construct's constructor.

NOTE: Your resource has not yet become managed by CDKTF. 
To finish the import remove the call "generateConfigForImport", add the above code within the construct's constructor, and then append the call importFrom(<resource_id_to_import_from>) to the generated code: 

new SomeResource(...).importFrom("some_id")
`,
                        isError: false,
                    });
                }
                await (0, terraform_cli_1.tryRemoveGeneratedConfigurationFile)(this.stack.workingDirectory);
            }
        });
    }
    async deploy(opts) {
        const { refreshOnly, terraformParallelism, noColor, vars, varFiles } = opts;
        await this.run(async () => {
            this.updateState({ type: "planning", stackName: this.stack.name });
            const terraform = await this.terraformClient();
            const { cancelled } = await terraform.deploy({
                autoApprove: this.options.autoApprove,
                refreshOnly,
                parallelism: terraformParallelism,
                vars,
                varFiles,
                noColor,
            }, (state) => {
                // state updates while apply runs that affect the UI
                if (state.type === "running" && !state.cancelled) {
                    this.updateState({
                        type: "deploying",
                        stackName: this.stack.name,
                    });
                }
                else if (state.type === "waiting for approval") {
                    this.updateState({
                        type: "waiting for stack approval",
                        stackName: this.stack.name,
                        approve: state.approve,
                        reject: () => {
                            state.reject();
                            this.updateState({
                                type: "dismissed",
                                stackName: this.stack.name,
                            });
                        },
                    });
                }
                else if (state.type === "waiting for sentinel override") {
                    this.updateState({
                        type: "waiting for stack sentinel override",
                        stackName: this.stack.name,
                        override: state.override,
                        reject: () => {
                            state.reject();
                            this.updateState({
                                type: "dismissed",
                                stackName: this.stack.name,
                            });
                        },
                    });
                }
                else if (state.type === "external approval reply") {
                    this.updateState({
                        type: "external stack approval reply",
                        stackName: this.stack.name,
                        approved: state.approved,
                    });
                }
                else if (state.type === "external sentinel override reply") {
                    this.updateState({
                        type: "external stack sentinel override reply",
                        stackName: this.stack.name,
                        overridden: state.overridden,
                    });
                }
            });
            if (!cancelled) {
                const outputs = await terraform.output();
                const outputsByConstructId = (0, output_1.getConstructIdsForOutputs)(JSON.parse(this.stack.content), outputs);
                this.updateState({
                    type: "deployed",
                    stackName: this.stack.name,
                    outputs,
                    outputsByConstructId,
                });
            }
        });
    }
    async destroy(opts) {
        const { terraformParallelism, noColor, vars, varFiles } = opts;
        await this.run(async () => {
            this.updateState({ type: "planning", stackName: this.stack.name });
            const terraform = await this.terraformClient();
            const { cancelled } = await terraform.destroy({
                autoApprove: this.options.autoApprove,
                parallelism: terraformParallelism,
                vars,
                varFiles,
                noColor,
            }, (state) => {
                // state updates while apply runs that affect the UI
                if (state.type === "running" && !state.cancelled) {
                    this.updateState({
                        type: "destroying",
                        stackName: this.stack.name,
                    });
                }
                else if (state.type === "waiting for approval") {
                    this.updateState({
                        type: "waiting for stack approval",
                        stackName: this.stack.name,
                        approve: state.approve,
                        reject: () => {
                            state.reject();
                            this.updateState({
                                type: "dismissed",
                                stackName: this.stack.name,
                            });
                        },
                    });
                }
                else if (state.type === "waiting for sentinel override") {
                    this.updateState({
                        type: "waiting for stack sentinel override",
                        stackName: this.stack.name,
                        override: state.override,
                        reject: () => {
                            state.reject();
                            this.updateState({
                                type: "dismissed",
                                stackName: this.stack.name,
                            });
                        },
                    });
                }
                else if (state.type === "external approval reply") {
                    this.updateState({
                        type: "external stack approval reply",
                        stackName: this.stack.name,
                        approved: state.approved,
                    });
                }
                else if (state.type === "external sentinel override reply") {
                    this.updateState({
                        type: "external stack sentinel override reply",
                        stackName: this.stack.name,
                        overridden: state.overridden,
                    });
                }
            });
            if (!cancelled)
                this.updateState({
                    type: "destroyed",
                    stackName: this.stack.name,
                });
        });
    }
    async fetchOutputs() {
        await this.run(async () => {
            const terraform = await this.terraformClient();
            const outputs = await terraform.output();
            const outputsByConstructId = (0, output_1.getConstructIdsForOutputs)(JSON.parse(this.stack.content), outputs);
            this.updateState({
                type: "outputs fetched",
                stackName: this.stack.name,
                outputs,
                outputsByConstructId,
            });
        });
        return this.outputs;
    }
    async stop() {
        this.stopped = true;
    }
}
exports.CdktfStack = CdktfStack;
//# sourceMappingURL=data:application/json;base64,