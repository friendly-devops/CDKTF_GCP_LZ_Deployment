"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CdktfProject = exports.isWaitingForUserInputUpdate = void 0;
// Copyright (c) HashiCorp, Inc
// SPDX-License-Identifier: MPL-2.0
const commons_1 = require("@cdktf/commons");
const synth_stack_1 = require("./synth-stack");
const synth_1 = require("./synth");
const cdktf_stack_1 = require("./cdktf-stack");
const execution_logs_1 = require("./execution-logs");
const stack_helpers_1 = require("./helpers/stack-helpers");
const cdktf_project_io_handler_1 = require("./cdktf-project-io-handler");
function isWaitingForUserInputUpdate(update) {
    return ["waiting for approval", "waiting for sentinel override"].includes(update.type);
}
exports.isWaitingForUserInputUpdate = isWaitingForUserInputUpdate;
class CdktfProject {
    constructor({ synthCommand, outDir, onUpdate, onLog, workingDirectory = process.cwd(), synthOrigin, hcl = false, }) {
        // Set during deploy / destroy
        this.stacksToRun = [];
        // This means sth different in deploy / destroy
        this.stopAllStacksThatCanNotRunWithout = () => { }; // eslint-disable-line @typescript-eslint/no-empty-function
        this.synthCommand = synthCommand;
        this.outDir = outDir;
        this.workingDirectory = workingDirectory;
        this.onUpdate = onUpdate;
        this.onLog = onLog;
        const ac = new AbortController();
        this.abortSignal = ac.signal;
        this.synthOrigin = synthOrigin;
        this.hcl =
            process.env.SYNTH_HCL_OUTPUT === "true" ||
                process.env.SYNTH_HCL_OUTPUT === "1" ||
                hcl;
        this.hardAbort = ac.abort.bind(ac);
        this.ioHandler = new cdktf_project_io_handler_1.CdktfProjectIOHandler();
    }
    stopAllStacks() {
        this.stacksToRun.forEach((stack) => stack.stop());
        this.ioHandler.filterUserInputEventsFromBuffer();
    }
    handleUserUpdate(update, operations, originalCallback, eventType) {
        const callbacks = (update) => Object.fromEntries(Object.entries(operations).map(([key, value]) => {
            return [
                key,
                // This is passed in to make typescript happy only
                // eslint-disable-next-line @typescript-eslint/no-unused-vars
                (_) => {
                    value(update);
                    // We need to defer these calls for the case that approve() is instantly invoked
                    // in the listener that receives these callbacks as it otherwise would already
                    // remove the "waiting for stack approval" event from the buffer before we even
                    // set waitingForApproval to true (at the end of this if statement) which results
                    // in buffered updates which will never unblock
                    setTimeout(() => this.ioHandler.resumeAfterUserInput(update.stackName), 0);
                },
            ];
        }));
        // always send to buffer, as resumeAfterUserInput() always expects a matching event
        this.ioHandler.pushEvent({
            cb: originalCallback,
            value: {
                type: eventType,
                stackName: update.stackName,
                ...callbacks(update),
            },
            type: "projectUpdate",
        });
        // if we aren't already waiting, this needs to go to cb() too to arrive at the UI
        if (!this.ioHandler.isWaitingForUserInput()) {
            originalCallback({
                type: eventType,
                stackName: update.stackName,
                ...callbacks(update),
            });
        }
    }
    handleUserInputProcess(cb) {
        return (update) => {
            if (update.type === "external stack approval reply") {
                if (!update.approved) {
                    this.stopAllStacksThatCanNotRunWithout(update.stackName);
                }
                this.ioHandler.resumeAfterUserInput(update.stackName);
                return; // aka don't send this event to any buffer
            }
            if (update.type === "external stack sentinel override reply") {
                if (!update.overridden) {
                    this.stopAllStacksThatCanNotRunWithout(update.stackName);
                }
                this.ioHandler.resumeAfterUserInput(update.stackName);
                return; // aka don't send this event to any buffer
            }
            if (update.type === "waiting for stack approval" ||
                update.type === "waiting for stack sentinel override") {
                if (update.type === "waiting for stack approval") {
                    this.handleUserUpdate(update, {
                        approve: (update) => update.approve(),
                        dismiss: (update) => {
                            update.reject();
                            this.stopAllStacksThatCanNotRunWithout(update.stackName);
                        },
                        stop: (update) => {
                            update.reject();
                            this.stopAllStacks();
                        },
                    }, cb, "waiting for approval");
                }
                else if (update.type === "waiting for stack sentinel override") {
                    this.handleUserUpdate(update, {
                        override: (update) => {
                            update.override();
                        },
                        reject: (update) => {
                            update.reject();
                            this.stopAllStacksThatCanNotRunWithout(update.stackName);
                        },
                    }, cb, "waiting for sentinel override");
                }
                this.ioHandler.awaitUserInput();
            }
            else {
                if (this.ioHandler.isWaitingForUserInput()) {
                    this.ioHandler.pushEvent({
                        cb,
                        value: update,
                        type: "projectUpdate",
                    });
                }
                else {
                    cb(update);
                }
            }
        };
    }
    getStackExecutor(stack, opts = {}) {
        const enhanceLogMessage = (0, execution_logs_1.createEnhanceLogMessage)(stack);
        const onLog = this.ioHandler.bufferWhileAwaitingUserInput(this.onLog);
        return new cdktf_stack_1.CdktfStack({
            ...opts,
            stack,
            onUpdate: this.handleUserInputProcess(this.onUpdate),
            onLog: onLog
                ? ({ message }) => onLog({
                    stackName: stack.name,
                    message,
                    messageWithConstructPath: enhanceLogMessage(message),
                })
                : undefined,
            abortSignal: this.abortSignal,
        });
    }
    get outputsByConstructId() {
        return this.stacksToRun.reduce((acc, stack) => ({
            ...acc,
            ...stack.outputsByConstructId,
        }), {});
    }
    async synth(noColor) {
        this.onUpdate({
            type: "synthesizing",
        });
        const stacks = await synth_stack_1.SynthStack.synth(this.abortSignal, this.synthCommand, this.outDir, this.workingDirectory, false, noColor, this.synthOrigin, this.hcl);
        (0, synth_1.printAnnotations)(stacks);
        this.onUpdate({
            type: "synthesized",
            stacks,
        });
        return stacks;
    }
    async readSynthesizedStacks() {
        const stacks = await synth_stack_1.SynthStack.readSynthesizedStacks(this.outDir);
        (0, synth_1.printAnnotations)(stacks);
        this.onUpdate({
            type: "synthesized",
            stacks,
        });
        return stacks;
    }
    async diff(opts = {}) {
        const stacks = opts.skipSynth
            ? await this.readSynthesizedStacks()
            : await this.synth(opts.noColor);
        const stack = this.getStackExecutor((0, stack_helpers_1.getSingleStack)(stacks, opts === null || opts === void 0 ? void 0 : opts.stackName, "diff"));
        await stack.initalizeTerraform(opts.noColor);
        try {
            await stack.diff(opts);
        }
        catch (e) {
            throw commons_1.Errors.External(`Stack failed to plan: ${stack.stack.name}. Please check the logs for more information.`, e);
        }
        if (stack.error) {
            throw commons_1.Errors.External(`Stack failed to plan: ${stack.stack.name}. Please check the logs for more information.`, new Error(stack.error));
        }
        try {
            await this.projectTelemetry("diff", {
                stackMetadata: stacks.map((stack) => JSON.parse(stack.content)["//"]
                    ? JSON.parse(stack.content)["//"].metadata
                    : {}),
                errors: stack.error,
                requiredProviders: stacks.map((stack) => JSON.parse(stack.content)["terraform"]
                    ? JSON.parse(stack.content)["terraform"].required_providers
                    : {}),
            });
        }
        catch (e) {
            commons_1.logger.debug("Failed to send telemetry", e);
        }
    }
    async execute(method, next, opts) {
        // We only support refresh only on deploy, a bit of a leaky abstraction here
        if (opts.refreshOnly && method !== "deploy") {
            throw commons_1.Errors.Internal(`Refresh only is only supported on deploy`);
        }
        const maxParallelRuns = !opts.parallelism || opts.parallelism < 0 ? Infinity : opts.parallelism;
        const allExecutions = [];
        await this.initializeStacksToRunInSerial(opts.noColor);
        while (this.stacksToRun.filter((stack) => stack.isPending).length > 0) {
            const runningStacks = this.stacksToRun.filter((stack) => stack.isRunning);
            if (runningStacks.length >= maxParallelRuns) {
                await Promise.race(runningStacks.map((s) => s.currentWorkPromise));
                continue;
            }
            try {
                const nextRunningExecutor = await next();
                if (!nextRunningExecutor) {
                    // In this case we have no pending stacks, but we also can not find a new executor
                    break;
                }
                const promise = method === "deploy"
                    ? nextRunningExecutor.deploy(opts)
                    : nextRunningExecutor.destroy(opts);
                allExecutions.push(promise);
            }
            catch (e) {
                // await next() threw an error because a stack failed to apply/destroy
                // wait for all other currently running stacks to complete before propagating that error
                commons_1.logger.debug("Encountered an error while awaiting stack to finish", e);
                const openStacks = this.stacksToRun.filter((ex) => ex.currentWorkPromise);
                commons_1.logger.debug("Waiting for still running stacks to finish:", openStacks);
                await Promise.allSettled(openStacks.map((ex) => ex.currentWorkPromise));
                commons_1.logger.debug("Done waiting for still running stacks. All pending work finished");
                throw e;
            }
        }
        // We end the loop when all stacks are started, now we need to wait for them to be done
        // We wait for all work to finish even if one of the promises threw an error.
        await (0, commons_1.ensureAllSettledBeforeThrowing)(Promise.all(allExecutions), allExecutions);
    }
    async deploy(opts = {}) {
        const stacks = opts.skipSynth
            ? await this.readSynthesizedStacks()
            : await this.synth(opts.noColor);
        const stacksToRun = (0, stack_helpers_1.getMultipleStacks)(stacks, opts.stackNames, "deploy");
        if (!opts.ignoreMissingStackDependencies) {
            (0, stack_helpers_1.checkIfAllDependenciesAreIncluded)(stacksToRun);
        }
        this.stopAllStacksThatCanNotRunWithout = (stackName) => {
            (0, stack_helpers_1.findAllNestedDependantStacks)(this.stacksToRun, stackName).forEach((stack) => stack.stop());
        };
        this.stacksToRun = stacksToRun.map((stack) => this.getStackExecutor(stack, opts));
        const next = opts.ignoreMissingStackDependencies
            ? () => Promise.resolve(this.stacksToRun.filter((stack) => stack.isPending)[0])
            : () => (0, stack_helpers_1.getStackWithNoUnmetDependencies)(this.stacksToRun);
        await this.execute("deploy", next, opts);
        const unprocessedStacks = this.stacksToRun.filter((executor) => executor.isPending);
        if (unprocessedStacks.length > 0) {
            throw commons_1.Errors.External(`Some stacks failed to deploy: ${unprocessedStacks
                .map((s) => s.stack.name)
                .join(", ")}. Please check the logs for more information.`);
        }
        try {
            await this.projectTelemetry("deploy", {
                stackMetadata: stacksToRun.map((stack) => JSON.parse(stack.content)["//"]
                    ? JSON.parse(stack.content)["//"].metadata
                    : {}),
                failedStacks: unprocessedStacks.map((stack) => stack.error),
                requiredProviders: stacksToRun.map((stack) => JSON.parse(stack.content)["terraform"]
                    ? JSON.parse(stack.content)["terraform"].required_providers
                    : {}),
            });
        }
        catch (e) {
            commons_1.logger.debug("Failed to send telemetry", e);
        }
    }
    async destroy(opts = {}) {
        const stacks = opts.skipSynth
            ? await this.readSynthesizedStacks()
            : await this.synth(opts.noColor);
        const stacksToRun = (0, stack_helpers_1.getMultipleStacks)(stacks, opts.stackNames, "destroy");
        if (!opts.ignoreMissingStackDependencies) {
            (0, stack_helpers_1.checkIfAllDependantsAreIncluded)(stacksToRun, stacks);
        }
        this.stopAllStacksThatCanNotRunWithout = (stackName) => {
            const stackExecutor = this.stacksToRun.find((s) => s.stack.name === stackName);
            if (!stackExecutor) {
                throw commons_1.Errors.Internal(`Could not find stack "${stackName}" that was stopped`);
            }
            stackExecutor.stack.dependencies.forEach((dependant) => {
                this.stopAllStacksThatCanNotRunWithout(dependant);
                const dependantStack = this.stacksToRun.find((s) => s.stack.name === dependant);
                if (!dependantStack) {
                    throw commons_1.Errors.Internal(`Could not find stack "${dependant}" that was stopped`);
                }
                dependantStack.stop();
            });
        };
        this.stacksToRun = stacksToRun.map((stack) => this.getStackExecutor(stack, opts));
        const next = opts.ignoreMissingStackDependencies
            ? () => Promise.resolve(this.stacksToRun.filter((stack) => stack.currentState !== "done")[0])
            : () => (0, stack_helpers_1.getStackWithNoUnmetDependants)(this.stacksToRun);
        await this.execute("destroy", next, opts);
        const unprocessedStacks = this.stacksToRun.filter((executor) => executor.isPending);
        if (unprocessedStacks.length > 0) {
            throw commons_1.Errors.External(`Some stacks failed to destroy: ${unprocessedStacks
                .map((s) => s.stack.name)
                .join(", ")}. Please check the logs for more information.`);
        }
        try {
            await this.projectTelemetry("destroy", {
                stackMetadata: stacksToRun.map((stack) => JSON.parse(stack.content)["//"]
                    ? JSON.parse(stack.content)["//"].metadata
                    : {}),
                failedStacks: unprocessedStacks.map((stack) => stack.error),
                requiredProviders: stacksToRun.map((stack) => JSON.parse(stack.content)["terraform"]
                    ? JSON.parse(stack.content)["terraform"].required_providers
                    : {}),
            });
        }
        catch (e) {
            commons_1.logger.debug("Failed to send telemetry", e);
        }
    }
    async projectTelemetry(command, payload) {
        const config = (0, commons_1.readConfigSync)();
        await (0, commons_1.sendTelemetry)(command, {
            ...payload,
            language: config.language,
        });
    }
    async fetchOutputs(opts) {
        const stacks = opts.skipSynth
            ? await this.readSynthesizedStacks()
            : await this.synth();
        const stacksToRun = (0, stack_helpers_1.getMultipleStacks)(stacks, opts.stackNames || [], "deploy");
        if (stacksToRun.length === 0) {
            throw new Error("No stacks to fetch outputs for specified");
        }
        this.stacksToRun = stacksToRun.map((stack) => 
        // Options are empty, because MultipleStackOptions doesn't have any relevant
        // options for `getStackExecutor`, hence defaults are fine
        this.getStackExecutor(stack, {}));
        await this.initializeStacksToRunInSerial();
        const outputs = await Promise.all(this.stacksToRun.map(async (s) => {
            const output = await s.fetchOutputs();
            return {
                [s.stack.name]: output,
            };
        }));
        return outputs.reduce((acc, curr) => ({ ...acc, ...curr }), {});
    }
    // Serially run terraform init to prohibit text file busy errors for the cache files
    async initializeStacksToRunInSerial(noColor) {
        for (const stack of this.stacksToRun) {
            await stack.initalizeTerraform(noColor);
        }
    }
}
exports.CdktfProject = CdktfProject;
//# sourceMappingURL=data:application/json;base64,