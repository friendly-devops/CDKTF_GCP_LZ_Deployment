"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.determineDeps = exports.init = exports.templates = exports.templatesDir = void 0;
// Copyright (c) HashiCorp, Inc
// SPDX-License-Identifier: MPL-2.0
const path = __importStar(require("path"));
const fs = __importStar(require("fs-extra"));
const pkgUp = __importStar(require("pkg-up"));
const commons_1 = require("@cdktf/commons");
const sscaff_1 = require("sscaff");
const features_1 = require("cdktf/lib/features");
const cdktf_config_1 = require("./cdktf-config");
const provider_add_1 = require("./provider-add");
const readPackageJson = () => {
    const pkgPath = pkgUp.sync({ cwd: __dirname });
    if (!pkgPath) {
        throw new Error("unable to find package.json");
    }
    return JSON.parse(fs.readFileSync(pkgPath, "utf-8"));
};
const pkg = readPackageJson();
const constructsVersion = pkg.dependencies.constructs;
exports.templatesDir = path.join(__dirname, "..", "..", "templates");
const availableTemplates = fs
    .readdirSync(exports.templatesDir)
    .filter((x) => !x.startsWith("."));
exports.templates = [];
for (const template of availableTemplates) {
    exports.templates.push(template);
}
async function init({ cdktfVersion, destination, dist, projectId, projectInfo, templatePath, sendCrashReports, providers, providersForceLocal, silent, }) {
    const deps = await determineDeps(cdktfVersion, dist);
    const futureFlags = Object.entries(features_1.FUTURE_FLAGS)
        .map(([key, value]) => `    "${key}": "${value}"`)
        .join(`,\n`);
    await (0, sscaff_1.sscaff)(templatePath, destination, {
        ...deps,
        ...projectInfo,
        futureFlags,
        projectId,
        sendCrashReports,
        silent,
    });
    const cdktfConfig = cdktf_config_1.CdktfConfig.read(destination);
    let needsGet = false;
    if (providers && providers.length) {
        needsGet = await (0, provider_add_1.providerAdd)({
            providers: providers,
            language: cdktfConfig.language,
            projectDirectory: destination,
            forceLocal: providersForceLocal,
            dist,
        });
    }
    return needsGet;
}
exports.init = init;
async function determineDeps(version = pkg.version, dist) {
    // TS: cdktf-0.10.1-dev.2160938258
    // Py: cdktf-0.10.1.dev1658821493.whl
    const pythonVersion = version
        .replace(/-pre\./g, ".dev")
        .replace(/-dev\./g, ".dev");
    if (dist) {
        const ret = {
            npm_cdktf: path.resolve(dist, "js", `cdktf@${version}.jsii.tgz`),
            npm_cdktf_cli: path.resolve(dist, "js", `cdktf-cli-${version}.tgz`),
            pypi_cdktf: path.resolve(dist, "python", `cdktf-${pythonVersion}-py3-none-any.whl`),
            mvn_cdktf: path.resolve(dist, "java", `com/hashicorp/cdktf/${version}/cdktf-${version}.jar`),
            nuget_cdktf: path.resolve(dist, "dotnet", `HashiCorp.Cdktf.${version}.nupkg`),
            go_cdktf: path.resolve(dist, "go", `cdktf`),
        };
        for (const file of Object.values(ret)) {
            if (!(await fs.pathExists(file))) {
                throw commons_1.Errors.Internal(`unable to find ${file} under the "dist" directory (${dist})`, new Error(), { version });
            }
        }
        const versions = {
            cdktf_version: version,
            constructs_version: constructsVersion,
        };
        return {
            ...ret,
            ...versions,
        };
    }
    if (version === "0.0.0") {
        throw commons_1.Errors.Usage(`cannot use version 0.0.0, use --cdktf-version, --dist or CDKTF_DIST to install from a "dist" directory`);
    }
    // determine if we want a specific pinned version or a version range we take
    // a pinned version if version includes a hyphen which means it is a
    // pre-release (e.g. "0.12.0-pre.e6834d3"). otherwise, we require a caret
    // version.
    const ver = version.includes("-") ? version : `^${version}`;
    return {
        cdktf_version: version,
        constructs_version: constructsVersion,
        npm_cdktf: `cdktf@${ver}`,
        npm_cdktf_cli: `cdktf-cli@${ver}`,
        pypi_cdktf: `cdktf~=${pythonVersion}`,
        mvn_cdktf: version,
        nuget_cdktf: version,
        go_cdktf: `v${version}`,
    };
}
exports.determineDeps = determineDeps;
//# sourceMappingURL=data:application/json;base64,