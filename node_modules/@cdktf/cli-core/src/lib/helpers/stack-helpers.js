"use strict";
// Copyright (c) HashiCorp, Inc
// SPDX-License-Identifier: MPL-2.0
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkIfAllDependenciesAreIncluded = exports.checkIfAllDependantsAreIncluded = exports.getStackWithNoUnmetDependants = exports.findAllNestedDependantStacks = exports.getStackWithNoUnmetDependencies = exports.getMultipleStacks = exports.getSingleStack = void 0;
const commons_1 = require("@cdktf/commons");
const minimatch_1 = __importDefault(require("minimatch"));
function getSingleStack(stacks, stackName, targetAction) {
    if (!stacks) {
        throw commons_1.Errors.Internal("Trying to access a stack before it has been synthesized");
    }
    if (stackName) {
        const stack = stacks.find((s) => s.name === stackName);
        if (!stack) {
            throw commons_1.Errors.Usage("Could not find stack: " + stackName);
        }
        return stack;
    }
    if (stacks.length === 1) {
        return stacks[0];
    }
    throw commons_1.Errors.Usage(`Found more than one stack, please specify a target stack. Run cdktf ${targetAction || "<verb>"} <stack> with one of these stacks: ${stacks
        .map((s) => s.name)
        .join(", ")} `);
}
exports.getSingleStack = getSingleStack;
function getMultipleStacks(stacks, patterns, targetAction) {
    if (!patterns || !patterns.length) {
        if (stacks.length === 1) {
            return [stacks[0]];
        }
        throw commons_1.Errors.Usage(`Found more than one stack, please specify a target stack. Run cdktf ${targetAction || "<verb>"} <stack> with one of these stacks: ${stacks
            .map((s) => s.name)
            .join(", ")} `);
    }
    return patterns.flatMap((pattern) => {
        const matchingStacks = stacks.filter((stack) => (0, minimatch_1.default)(stack.name, pattern));
        if (matchingStacks.length === 0) {
            throw commons_1.Errors.Usage(`Could not find stack for pattern '${pattern}'`);
        }
        return matchingStacks;
    });
}
exports.getMultipleStacks = getMultipleStacks;
// Returns the first stack that has no unmet dependencies
// An unmet dependency is a dependency that has not been deployed yet
// If there is no unfinished stack, returns undefined
// If there is no stack ready to be worked on, it returns a promise that will resolve as soon as there is a follow-up stack available
async function getStackWithNoUnmetDependencies(stackExecutors) {
    commons_1.logger.debug("Checking for stacks with unmet dependencies");
    commons_1.logger.debug("stack executors:", stackExecutors);
    const pendingStacks = stackExecutors.filter((executor) => executor.isPending);
    commons_1.logger.debug("pending stacks:", stackExecutors);
    if (pendingStacks.length === 0) {
        return undefined;
    }
    const currentlyReadyStack = pendingStacks.find((executor) => executor.stack.dependencies.every((dependency) => {
        var _a;
        return ((_a = stackExecutors.find((executor) => executor.stack.name === dependency)) === null || _a === void 0 ? void 0 : _a.currentState) === "done";
    }));
    if (currentlyReadyStack) {
        commons_1.logger.debug("Found a stack with no unmet dependencies");
        return currentlyReadyStack;
    }
    const stackExecutionPromises = stackExecutors
        .filter((ex) => ex.currentWorkPromise)
        .map((ex) => ex.currentWorkPromise);
    commons_1.logger.debug(`${stackExecutionPromises.length} stacks are currently busy, waiting for one to finish`);
    if (!stackExecutionPromises.length) {
        return undefined;
    }
    await (0, commons_1.ensureAllSettledBeforeThrowing)(Promise.race(stackExecutionPromises), stackExecutionPromises);
    return await getStackWithNoUnmetDependencies(stackExecutors);
}
exports.getStackWithNoUnmetDependencies = getStackWithNoUnmetDependencies;
function findAllDependantStacks(stackExecutors, stackName) {
    return stackExecutors.filter((innerExecutor) => innerExecutor.stack.dependencies.includes(stackName));
}
function findAllNestedDependantStacks(stackExecutors, stackName, knownDependantStackNames = new Set()) {
    const dependantStacks = findAllDependantStacks(stackExecutors, stackName);
    dependantStacks.forEach((stack) => {
        if (knownDependantStackNames.has(stack.stack.name)) {
            return;
        }
        knownDependantStackNames.add(stack.stack.name);
        findAllNestedDependantStacks(stackExecutors, stack.stack.name, knownDependantStackNames);
    });
    return stackExecutors.filter((executor) => knownDependantStackNames.has(executor.stack.name));
}
exports.findAllNestedDependantStacks = findAllNestedDependantStacks;
// Returns the first stack that has no dependents that need to be destroyed first
async function getStackWithNoUnmetDependants(stackExecutors) {
    commons_1.logger.debug("Checking for stacks with unmet dependants");
    commons_1.logger.debug("stack executors:", stackExecutors);
    const pendingStacks = stackExecutors.filter((executor) => executor.isPending);
    commons_1.logger.debug("pending stacks:", stackExecutors);
    if (pendingStacks.length === 0) {
        return undefined;
    }
    const currentlyReadyStack = pendingStacks.find((executor) => {
        const dependantStacks = findAllDependantStacks(stackExecutors, executor.stack.name);
        return dependantStacks.every((stack) => stack.currentState === "done");
    });
    if (currentlyReadyStack) {
        commons_1.logger.debug("Found a stack with no unmet dependants");
        return currentlyReadyStack;
    }
    const stackExecutionPromises = stackExecutors
        .filter((ex) => ex.currentWorkPromise)
        .map((ex) => ex.currentWorkPromise);
    commons_1.logger.debug(`${stackExecutionPromises.length} stacks are currently busy, waiting for one to finish`);
    if (!stackExecutionPromises.length) {
        return undefined;
    }
    await Promise.race(stackExecutionPromises);
    return await getStackWithNoUnmetDependants(stackExecutors);
}
exports.getStackWithNoUnmetDependants = getStackWithNoUnmetDependants;
// Throws an error if there is a dependant stack that is not included
function checkIfAllDependantsAreIncluded(stacksToRun, allStacks) {
    const allDependants = new Set();
    stacksToRun
        .map((stack) => allStacks.filter((s) => s.dependencies.includes(stack.name)))
        .flat()
        .forEach((dependant) => allDependants.add(dependant.name));
    const stackNames = stacksToRun.map((stack) => stack.name);
    const missingDependants = [...allDependants].filter((dependant) => !stackNames.includes(dependant));
    if (missingDependants.length > 0) {
        throw commons_1.Errors.Usage(`The following dependant stacks are not included in the stacks to run: ${missingDependants.join(", ")}. Either add them or add the --ignore-missing-stack-dependencies flag.`);
    }
}
exports.checkIfAllDependantsAreIncluded = checkIfAllDependantsAreIncluded;
/**
  Throws an error if there is a dependency that is not included
  Cycles are detected on dependency creation at synthesis time
  Running this prevents us from being in a situation where we
  have to wait for a stack to be deployed that is not included to be run
*/
function checkIfAllDependenciesAreIncluded(stacksToRun) {
    const allDependencies = new Set();
    stacksToRun
        .map((stack) => stack.dependencies)
        .flat()
        .forEach((dependency) => allDependencies.add(dependency));
    const stackNames = stacksToRun.map((stack) => stack.name);
    const missingDependencies = [...allDependencies].filter((dependency) => !stackNames.includes(dependency));
    if (missingDependencies.length > 0) {
        throw commons_1.Errors.Usage(`The following dependencies are not included in the stacks to run: ${missingDependencies.join(", ")}. Either add them or add the --ignore-missing-stack-dependencies flag.`);
    }
}
exports.checkIfAllDependenciesAreIncluded = checkIfAllDependenciesAreIncluded;
//# sourceMappingURL=data:application/json;base64,