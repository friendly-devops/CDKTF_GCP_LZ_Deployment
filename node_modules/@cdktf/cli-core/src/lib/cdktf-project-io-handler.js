"use strict";
/**
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: MPL-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CdktfProjectIOHandler = void 0;
const cdktf_project_1 = require("./cdktf-project");
/**
 * This class is used to buffer events while the user is being asked for input. It is solely consumed by the CdktfProject class,
 * and is mostly created as a separation of concerns to keep the CdktfProject class as clean as possible.
 */
class CdktfProjectIOHandler {
    constructor() {
        // Pauses all progress / status events from being forwarded to the user
        // If set from true to false, the events will be sent through the channels they came in
        // (until a waiting for approval event is sent)
        this.waitingForUserInput = false;
        this.eventBuffer = [];
    }
    awaitUserInput() {
        this.waitingForUserInput = true;
    }
    filterUserInputEventsFromBuffer() {
        this.eventBuffer = this.eventBuffer.filter((event) => event.type === "projectUpdate"
            ? !(0, cdktf_project_1.isWaitingForUserInputUpdate)(event.value) // we want to filter out the waiting for approval events
            : true // we want all other types
        );
    }
    resumeAfterUserInput(stackName) {
        // remove waiting for approval event that should be resumed
        this.eventBuffer = this.eventBuffer.filter((event) => !(event.type === "projectUpdate" &&
            (0, cdktf_project_1.isWaitingForUserInputUpdate)(event.value) &&
            event.value.stackName === stackName));
        if (this.eventBuffer.length &&
            this.eventBuffer[0].type === "projectUpdate" &&
            (0, cdktf_project_1.isWaitingForUserInputUpdate)(this.eventBuffer[0].value)) {
            // we are still waiting on approval for the current stack
            // we removed a future "waiting for approval" event for some other stack
            return;
        }
        // We first need to flush all events, we can not resume if there is a new waiting for approval update
        let event = this.eventBuffer.shift();
        while (event) {
            if (event.type === "projectUpdate") {
                event.cb(event.value);
                if ((0, cdktf_project_1.isWaitingForUserInputUpdate)(event.value)) {
                    // We have to wait for user input again, therefore we can not resume
                    return;
                }
            }
            if (event.type === "logMessage") {
                event.cb(event.value);
            }
            event = this.eventBuffer.shift();
        }
        // If we reach this point there was no waiting for user input event, so we can safely resume
        this.waitingForUserInput = false;
    }
    isWaitingForUserInput() {
        return this.waitingForUserInput;
    }
    pushEvent(event) {
        this.eventBuffer.push(event);
    }
    bufferWhileAwaitingUserInput(cb) {
        if (!cb) {
            return undefined;
        }
        return (msg) => {
            if (this.waitingForUserInput) {
                this.eventBuffer.push({
                    cb,
                    value: msg,
                    type: "logMessage",
                });
            }
            else {
                cb(msg);
            }
        };
    }
}
exports.CdktfProjectIOHandler = CdktfProjectIOHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RrdGYtcHJvamVjdC1pby1oYW5kbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2RrdGYtcHJvamVjdC1pby1oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0c7OztBQUVILG1EQUt5QjtBQUV6Qjs7O0dBR0c7QUFDSCxNQUFhLHFCQUFxQjtJQUFsQztRQUNFLHVFQUF1RTtRQUN2RSx1RkFBdUY7UUFDdkYsK0NBQStDO1FBQ3ZDLHdCQUFtQixHQUFHLEtBQUssQ0FBQztRQUM1QixnQkFBVyxHQUF3QixFQUFFLENBQUM7SUFrRmhELENBQUM7SUFoRlEsY0FBYztRQUNuQixJQUFJLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxDQUFDO0lBQ2xDLENBQUM7SUFFTSwrQkFBK0I7UUFDcEMsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FDeEMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUNSLEtBQUssQ0FBQyxJQUFJLEtBQUssZUFBZTtZQUM1QixDQUFDLENBQUMsQ0FBQyxJQUFBLDJDQUEyQixFQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyx3REFBd0Q7WUFDcEcsQ0FBQyxDQUFDLElBQUksQ0FBQywwQkFBMEI7U0FDdEMsQ0FBQztJQUNKLENBQUM7SUFFTSxvQkFBb0IsQ0FBQyxTQUFpQjtRQUMzQywyREFBMkQ7UUFDM0QsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FDeEMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUNSLENBQUMsQ0FDQyxLQUFLLENBQUMsSUFBSSxLQUFLLGVBQWU7WUFDOUIsSUFBQSwyQ0FBMkIsRUFBQyxLQUFLLENBQUMsS0FBSyxDQUFDO1lBQ3ZDLEtBQUssQ0FBQyxLQUEwQixDQUFDLFNBQVMsS0FBSyxTQUFTLENBQzFELENBQ0osQ0FBQztRQUVGLElBQ0UsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNO1lBQ3ZCLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLGVBQWU7WUFDNUMsSUFBQSwyQ0FBMkIsRUFBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUN0RDtZQUNBLHlEQUF5RDtZQUN6RCx3RUFBd0U7WUFDeEUsT0FBTztTQUNSO1FBRUQscUdBQXFHO1FBQ3JHLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDckMsT0FBTyxLQUFLLEVBQUU7WUFDWixJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssZUFBZSxFQUFFO2dCQUNsQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDdEIsSUFBSSxJQUFBLDJDQUEyQixFQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRTtvQkFDNUMsb0VBQW9FO29CQUNwRSxPQUFPO2lCQUNSO2FBQ0Y7WUFDRCxJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssWUFBWSxFQUFFO2dCQUMvQixLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUN2QjtZQUVELEtBQUssR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ2xDO1FBRUQsNEZBQTRGO1FBQzVGLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxLQUFLLENBQUM7SUFDbkMsQ0FBQztJQUVNLHFCQUFxQjtRQUMxQixPQUFPLElBQUksQ0FBQyxtQkFBbUIsQ0FBQztJQUNsQyxDQUFDO0lBRU0sU0FBUyxDQUFDLEtBQW1CO1FBQ2xDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFTSw0QkFBNEIsQ0FBQyxFQUE4QjtRQUNoRSxJQUFJLENBQUMsRUFBRSxFQUFFO1lBQ1AsT0FBTyxTQUFTLENBQUM7U0FDbEI7UUFFRCxPQUFPLENBQUMsR0FBZSxFQUFFLEVBQUU7WUFDekIsSUFBSSxJQUFJLENBQUMsbUJBQW1CLEVBQUU7Z0JBQzVCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDO29CQUNwQixFQUFFO29CQUNGLEtBQUssRUFBRSxHQUFHO29CQUNWLElBQUksRUFBRSxZQUFZO2lCQUNuQixDQUFDLENBQUM7YUFDSjtpQkFBTTtnQkFDTCxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDVDtRQUNILENBQUMsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQXZGRCxzREF1RkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgSGFzaGlDb3JwLCBJbmMuXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTVBMLTIuMFxuICovXG5cbmltcG9ydCB7XG4gIFByb2plY3RFdmVudCxcbiAgaXNXYWl0aW5nRm9yVXNlcklucHV0VXBkYXRlLFxuICBNdWx0aVN0YWNrVXBkYXRlLFxuICBMb2dNZXNzYWdlLFxufSBmcm9tIFwiLi9jZGt0Zi1wcm9qZWN0XCI7XG5cbi8qKlxuICogVGhpcyBjbGFzcyBpcyB1c2VkIHRvIGJ1ZmZlciBldmVudHMgd2hpbGUgdGhlIHVzZXIgaXMgYmVpbmcgYXNrZWQgZm9yIGlucHV0LiBJdCBpcyBzb2xlbHkgY29uc3VtZWQgYnkgdGhlIENka3RmUHJvamVjdCBjbGFzcyxcbiAqIGFuZCBpcyBtb3N0bHkgY3JlYXRlZCBhcyBhIHNlcGFyYXRpb24gb2YgY29uY2VybnMgdG8ga2VlcCB0aGUgQ2RrdGZQcm9qZWN0IGNsYXNzIGFzIGNsZWFuIGFzIHBvc3NpYmxlLlxuICovXG5leHBvcnQgY2xhc3MgQ2RrdGZQcm9qZWN0SU9IYW5kbGVyIHtcbiAgLy8gUGF1c2VzIGFsbCBwcm9ncmVzcyAvIHN0YXR1cyBldmVudHMgZnJvbSBiZWluZyBmb3J3YXJkZWQgdG8gdGhlIHVzZXJcbiAgLy8gSWYgc2V0IGZyb20gdHJ1ZSB0byBmYWxzZSwgdGhlIGV2ZW50cyB3aWxsIGJlIHNlbnQgdGhyb3VnaCB0aGUgY2hhbm5lbHMgdGhleSBjYW1lIGluXG4gIC8vICh1bnRpbCBhIHdhaXRpbmcgZm9yIGFwcHJvdmFsIGV2ZW50IGlzIHNlbnQpXG4gIHByaXZhdGUgd2FpdGluZ0ZvclVzZXJJbnB1dCA9IGZhbHNlO1xuICBwcml2YXRlIGV2ZW50QnVmZmVyOiBBcnJheTxQcm9qZWN0RXZlbnQ+ID0gW107XG5cbiAgcHVibGljIGF3YWl0VXNlcklucHV0KCkge1xuICAgIHRoaXMud2FpdGluZ0ZvclVzZXJJbnB1dCA9IHRydWU7XG4gIH1cblxuICBwdWJsaWMgZmlsdGVyVXNlcklucHV0RXZlbnRzRnJvbUJ1ZmZlcigpIHtcbiAgICB0aGlzLmV2ZW50QnVmZmVyID0gdGhpcy5ldmVudEJ1ZmZlci5maWx0ZXIoXG4gICAgICAoZXZlbnQpID0+XG4gICAgICAgIGV2ZW50LnR5cGUgPT09IFwicHJvamVjdFVwZGF0ZVwiXG4gICAgICAgICAgPyAhaXNXYWl0aW5nRm9yVXNlcklucHV0VXBkYXRlKGV2ZW50LnZhbHVlKSAvLyB3ZSB3YW50IHRvIGZpbHRlciBvdXQgdGhlIHdhaXRpbmcgZm9yIGFwcHJvdmFsIGV2ZW50c1xuICAgICAgICAgIDogdHJ1ZSAvLyB3ZSB3YW50IGFsbCBvdGhlciB0eXBlc1xuICAgICk7XG4gIH1cblxuICBwdWJsaWMgcmVzdW1lQWZ0ZXJVc2VySW5wdXQoc3RhY2tOYW1lOiBzdHJpbmcpIHtcbiAgICAvLyByZW1vdmUgd2FpdGluZyBmb3IgYXBwcm92YWwgZXZlbnQgdGhhdCBzaG91bGQgYmUgcmVzdW1lZFxuICAgIHRoaXMuZXZlbnRCdWZmZXIgPSB0aGlzLmV2ZW50QnVmZmVyLmZpbHRlcihcbiAgICAgIChldmVudCkgPT5cbiAgICAgICAgIShcbiAgICAgICAgICBldmVudC50eXBlID09PSBcInByb2plY3RVcGRhdGVcIiAmJlxuICAgICAgICAgIGlzV2FpdGluZ0ZvclVzZXJJbnB1dFVwZGF0ZShldmVudC52YWx1ZSkgJiZcbiAgICAgICAgICAoZXZlbnQudmFsdWUgYXMgTXVsdGlTdGFja1VwZGF0ZSkuc3RhY2tOYW1lID09PSBzdGFja05hbWVcbiAgICAgICAgKVxuICAgICk7XG5cbiAgICBpZiAoXG4gICAgICB0aGlzLmV2ZW50QnVmZmVyLmxlbmd0aCAmJlxuICAgICAgdGhpcy5ldmVudEJ1ZmZlclswXS50eXBlID09PSBcInByb2plY3RVcGRhdGVcIiAmJlxuICAgICAgaXNXYWl0aW5nRm9yVXNlcklucHV0VXBkYXRlKHRoaXMuZXZlbnRCdWZmZXJbMF0udmFsdWUpXG4gICAgKSB7XG4gICAgICAvLyB3ZSBhcmUgc3RpbGwgd2FpdGluZyBvbiBhcHByb3ZhbCBmb3IgdGhlIGN1cnJlbnQgc3RhY2tcbiAgICAgIC8vIHdlIHJlbW92ZWQgYSBmdXR1cmUgXCJ3YWl0aW5nIGZvciBhcHByb3ZhbFwiIGV2ZW50IGZvciBzb21lIG90aGVyIHN0YWNrXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gV2UgZmlyc3QgbmVlZCB0byBmbHVzaCBhbGwgZXZlbnRzLCB3ZSBjYW4gbm90IHJlc3VtZSBpZiB0aGVyZSBpcyBhIG5ldyB3YWl0aW5nIGZvciBhcHByb3ZhbCB1cGRhdGVcbiAgICBsZXQgZXZlbnQgPSB0aGlzLmV2ZW50QnVmZmVyLnNoaWZ0KCk7XG4gICAgd2hpbGUgKGV2ZW50KSB7XG4gICAgICBpZiAoZXZlbnQudHlwZSA9PT0gXCJwcm9qZWN0VXBkYXRlXCIpIHtcbiAgICAgICAgZXZlbnQuY2IoZXZlbnQudmFsdWUpO1xuICAgICAgICBpZiAoaXNXYWl0aW5nRm9yVXNlcklucHV0VXBkYXRlKGV2ZW50LnZhbHVlKSkge1xuICAgICAgICAgIC8vIFdlIGhhdmUgdG8gd2FpdCBmb3IgdXNlciBpbnB1dCBhZ2FpbiwgdGhlcmVmb3JlIHdlIGNhbiBub3QgcmVzdW1lXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZXZlbnQudHlwZSA9PT0gXCJsb2dNZXNzYWdlXCIpIHtcbiAgICAgICAgZXZlbnQuY2IoZXZlbnQudmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBldmVudCA9IHRoaXMuZXZlbnRCdWZmZXIuc2hpZnQoKTtcbiAgICB9XG5cbiAgICAvLyBJZiB3ZSByZWFjaCB0aGlzIHBvaW50IHRoZXJlIHdhcyBubyB3YWl0aW5nIGZvciB1c2VyIGlucHV0IGV2ZW50LCBzbyB3ZSBjYW4gc2FmZWx5IHJlc3VtZVxuICAgIHRoaXMud2FpdGluZ0ZvclVzZXJJbnB1dCA9IGZhbHNlO1xuICB9XG5cbiAgcHVibGljIGlzV2FpdGluZ0ZvclVzZXJJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy53YWl0aW5nRm9yVXNlcklucHV0O1xuICB9XG5cbiAgcHVibGljIHB1c2hFdmVudChldmVudDogUHJvamVjdEV2ZW50KSB7XG4gICAgdGhpcy5ldmVudEJ1ZmZlci5wdXNoKGV2ZW50KTtcbiAgfVxuXG4gIHB1YmxpYyBidWZmZXJXaGlsZUF3YWl0aW5nVXNlcklucHV0KGNiPzogKG1zZzogTG9nTWVzc2FnZSkgPT4gdm9pZCkge1xuICAgIGlmICghY2IpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIChtc2c6IExvZ01lc3NhZ2UpID0+IHtcbiAgICAgIGlmICh0aGlzLndhaXRpbmdGb3JVc2VySW5wdXQpIHtcbiAgICAgICAgdGhpcy5ldmVudEJ1ZmZlci5wdXNoKHtcbiAgICAgICAgICBjYixcbiAgICAgICAgICB2YWx1ZTogbXNnLFxuICAgICAgICAgIHR5cGU6IFwibG9nTWVzc2FnZVwiLFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNiKG1zZyk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufVxuIl19