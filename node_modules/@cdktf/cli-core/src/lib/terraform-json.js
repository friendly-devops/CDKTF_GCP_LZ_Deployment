"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.terraformJsonSchema = void 0;
// Copyright (c) HashiCorp, Inc
// SPDX-License-Identifier: MPL-2.0
const z = __importStar(require("zod"));
const remote = z
    .object({
    organization: z.string(),
    hostname: z.string().optional(),
    token: z.string().optional(),
    workspaces: z.object({
        name: z.string().optional(),
        prefix: z.string().optional(),
    }),
})
    .deepPartial();
exports.terraformJsonSchema = z
    .object({
    "//": z
        .object({
        metadata: z
            .object({
            version: z.string(),
            stackName: z.string(),
            backend: z.string(),
        })
            .nonstrict(),
        outputs: z.record(z.any()),
    })
        .nonstrict(),
    terraform: z.object({
        backend: z
            .object({
            // All other backends are here as well, but we don't read them right now
            remote,
        })
            .nonstrict(),
        cloud: z
            .object({
            organization: z.string(),
            hostname: z.string().optional(),
            token: z.string().optional(),
            workspaces: z.union([
                z.object({ name: z.string() }),
                z.object({ tags: z.array(z.string()) }),
            ]),
        })
            .nonstrict(),
        required_providers: z.record(z.object({ source: z.string(), version: z.string() }).nonstrict()),
        required_version: z.string(),
    }),
    data: z.record(z.any()),
    provider: z.record(z.any()),
    resource: z.record(z.any()),
})
    .deepPartial()
    .nonstrict();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVycmFmb3JtLWpzb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0ZXJyYWZvcm0tanNvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLCtCQUErQjtBQUMvQixtQ0FBbUM7QUFDbkMsdUNBQXlCO0FBRXpCLE1BQU0sTUFBTSxHQUFHLENBQUM7S0FDYixNQUFNLENBQUM7SUFDTixZQUFZLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRTtJQUN4QixRQUFRLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRTtJQUMvQixLQUFLLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRTtJQUM1QixVQUFVLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUNuQixJQUFJLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRTtRQUMzQixNQUFNLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRTtLQUM5QixDQUFDO0NBQ0gsQ0FBQztLQUNELFdBQVcsRUFBRSxDQUFDO0FBRUosUUFBQSxtQkFBbUIsR0FBRyxDQUFDO0tBQ2pDLE1BQU0sQ0FBQztJQUNOLElBQUksRUFBRSxDQUFDO1NBQ0osTUFBTSxDQUFDO1FBQ04sUUFBUSxFQUFFLENBQUM7YUFDUixNQUFNLENBQUM7WUFDTixPQUFPLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRTtZQUNuQixTQUFTLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRTtZQUNyQixPQUFPLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRTtTQUNwQixDQUFDO2FBQ0QsU0FBUyxFQUFFO1FBQ2QsT0FBTyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO0tBQzNCLENBQUM7U0FDRCxTQUFTLEVBQUU7SUFDZCxTQUFTLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUNsQixPQUFPLEVBQUUsQ0FBQzthQUNQLE1BQU0sQ0FBQztZQUNOLHdFQUF3RTtZQUN4RSxNQUFNO1NBQ1AsQ0FBQzthQUNELFNBQVMsRUFBRTtRQUNkLEtBQUssRUFBRSxDQUFDO2FBQ0wsTUFBTSxDQUFDO1lBQ04sWUFBWSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUU7WUFDeEIsUUFBUSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUU7WUFDL0IsS0FBSyxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUU7WUFDNUIsVUFBVSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUM7Z0JBQ2xCLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUM7Z0JBQzlCLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDO2FBQ3hDLENBQUM7U0FDSCxDQUFDO2FBQ0QsU0FBUyxFQUFFO1FBQ2Qsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FDMUIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUMsU0FBUyxFQUFFLENBQ2xFO1FBQ0QsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRTtLQUM3QixDQUFDO0lBQ0YsSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLFFBQVEsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUMzQixRQUFRLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7Q0FDNUIsQ0FBQztLQUNELFdBQVcsRUFBRTtLQUNiLFNBQVMsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBIYXNoaUNvcnAsIEluY1xuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1QTC0yLjBcbmltcG9ydCAqIGFzIHogZnJvbSBcInpvZFwiO1xuXG5jb25zdCByZW1vdGUgPSB6XG4gIC5vYmplY3Qoe1xuICAgIG9yZ2FuaXphdGlvbjogei5zdHJpbmcoKSxcbiAgICBob3N0bmFtZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgIHRva2VuOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgd29ya3NwYWNlczogei5vYmplY3Qoe1xuICAgICAgbmFtZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgICAgcHJlZml4OiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgfSksXG4gIH0pXG4gIC5kZWVwUGFydGlhbCgpO1xuXG5leHBvcnQgY29uc3QgdGVycmFmb3JtSnNvblNjaGVtYSA9IHpcbiAgLm9iamVjdCh7XG4gICAgXCIvL1wiOiB6XG4gICAgICAub2JqZWN0KHtcbiAgICAgICAgbWV0YWRhdGE6IHpcbiAgICAgICAgICAub2JqZWN0KHtcbiAgICAgICAgICAgIHZlcnNpb246IHouc3RyaW5nKCksXG4gICAgICAgICAgICBzdGFja05hbWU6IHouc3RyaW5nKCksXG4gICAgICAgICAgICBiYWNrZW5kOiB6LnN0cmluZygpLFxuICAgICAgICAgIH0pXG4gICAgICAgICAgLm5vbnN0cmljdCgpLFxuICAgICAgICBvdXRwdXRzOiB6LnJlY29yZCh6LmFueSgpKSxcbiAgICAgIH0pXG4gICAgICAubm9uc3RyaWN0KCksXG4gICAgdGVycmFmb3JtOiB6Lm9iamVjdCh7XG4gICAgICBiYWNrZW5kOiB6XG4gICAgICAgIC5vYmplY3Qoe1xuICAgICAgICAgIC8vIEFsbCBvdGhlciBiYWNrZW5kcyBhcmUgaGVyZSBhcyB3ZWxsLCBidXQgd2UgZG9uJ3QgcmVhZCB0aGVtIHJpZ2h0IG5vd1xuICAgICAgICAgIHJlbW90ZSxcbiAgICAgICAgfSlcbiAgICAgICAgLm5vbnN0cmljdCgpLFxuICAgICAgY2xvdWQ6IHpcbiAgICAgICAgLm9iamVjdCh7XG4gICAgICAgICAgb3JnYW5pemF0aW9uOiB6LnN0cmluZygpLFxuICAgICAgICAgIGhvc3RuYW1lOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgICAgICAgdG9rZW46IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICAgICAgICB3b3Jrc3BhY2VzOiB6LnVuaW9uKFtcbiAgICAgICAgICAgIHoub2JqZWN0KHsgbmFtZTogei5zdHJpbmcoKSB9KSxcbiAgICAgICAgICAgIHoub2JqZWN0KHsgdGFnczogei5hcnJheSh6LnN0cmluZygpKSB9KSxcbiAgICAgICAgICBdKSxcbiAgICAgICAgfSlcbiAgICAgICAgLm5vbnN0cmljdCgpLFxuICAgICAgcmVxdWlyZWRfcHJvdmlkZXJzOiB6LnJlY29yZChcbiAgICAgICAgei5vYmplY3QoeyBzb3VyY2U6IHouc3RyaW5nKCksIHZlcnNpb246IHouc3RyaW5nKCkgfSkubm9uc3RyaWN0KClcbiAgICAgICksXG4gICAgICByZXF1aXJlZF92ZXJzaW9uOiB6LnN0cmluZygpLFxuICAgIH0pLFxuICAgIGRhdGE6IHoucmVjb3JkKHouYW55KCkpLFxuICAgIHByb3ZpZGVyOiB6LnJlY29yZCh6LmFueSgpKSxcbiAgICByZXNvdXJjZTogei5yZWNvcmQoei5hbnkoKSksXG4gIH0pXG4gIC5kZWVwUGFydGlhbCgpXG4gIC5ub25zdHJpY3QoKTtcblxuZXhwb3J0IHR5cGUgVGVycmFmb3JtU3RhY2sgPSB6LmluZmVyPHR5cGVvZiB0ZXJyYWZvcm1Kc29uU2NoZW1hPjtcbmV4cG9ydCB0eXBlIFRlcnJhZm9ybUpzb25Db25maWdCYWNrZW5kUmVtb3RlID0gei5pbmZlcjx0eXBlb2YgcmVtb3RlPjtcbiJdfQ==