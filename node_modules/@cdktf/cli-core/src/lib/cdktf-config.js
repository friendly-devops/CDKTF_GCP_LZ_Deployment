"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CdktfConfig = void 0;
// Copyright (c) HashiCorp, Inc
// SPDX-License-Identifier: MPL-2.0
const fs = __importStar(require("fs"));
const commons_1 = require("@cdktf/commons");
const path_1 = __importDefault(require("path"));
const commons_2 = require("@cdktf/commons");
function findFileAboveCwd(file, rootPath = process.cwd()) {
    const fullPath = path_1.default.resolve(rootPath, file);
    if (fs.existsSync(fullPath)) {
        return fullPath;
    }
    const parentDir = path_1.default.resolve(rootPath, "..");
    if (fs.existsSync(parentDir) && parentDir !== rootPath) {
        return findFileAboveCwd(file, parentDir);
    }
    return null;
}
// TODO: move this to @cdktf/commons
// tracked here https://github.com/hashicorp/terraform-cdk/issues/1814
class CdktfConfig {
    constructor(cdktfConfigPath) {
        this.cdktfConfigPath = cdktfConfigPath;
    }
    readCdktfConfig() {
        const cdktfConfig = require(this.cdktfConfigPath);
        if (typeof cdktfConfig !== "object" || cdktfConfig === null) {
            throw commons_1.Errors.External("cdktf.json is malformed. The root must be a JSON object."); // TODO: define a schema and validate against it
        }
        return cdktfConfig;
    }
    writeCdktfConfig(cdktfConfig) {
        const cdktfConfigString = JSON.stringify(cdktfConfig, null, 2);
        fs.writeFileSync(this.cdktfConfigPath, cdktfConfigString);
    }
    getProperty(property) {
        const cdktfConfig = this.readCdktfConfig();
        return cdktfConfig[property] || commons_1.CONFIG_DEFAULTS[property];
    }
    get language() {
        const rawLanguage = this.getProperty("language");
        const language = Object.values(commons_1.Language).find((value) => value === rawLanguage);
        if (!language)
            throw commons_1.Errors.Usage(`${rawLanguage} is not a valid language. It must be one of ${Object.values(commons_1.Language)}`);
        return language;
    }
    get codeMakerOutput() {
        return this.getProperty("codeMakerOutput");
    }
    get terraformProviders() {
        const providers = this.getProperty("terraformProviders");
        if (!Array.isArray(providers))
            return [];
        return providers;
    }
    get terraformModules() {
        const modules = this.getProperty("terraformModules");
        if (!Array.isArray(modules))
            return [];
        return modules;
    }
    writeTerraformProviders(providers) {
        const cdktfConfig = this.readCdktfConfig();
        cdktfConfig.terraformProviders = providers;
        this.writeCdktfConfig(cdktfConfig);
    }
    get projectDirectory() {
        return path_1.default.dirname(this.cdktfConfigPath);
    }
    static read(path = process.cwd()) {
        const cdktfConfigPath = findFileAboveCwd("cdktf.json", path);
        if (!cdktfConfigPath) {
            throw commons_1.Errors.External("Could not find cdktf.json. Make sure there is a cdktf.json file in the current directory or one of its parents.");
        }
        commons_2.logger.trace(`cdktf.json found at ${cdktfConfigPath}`);
        return new CdktfConfig(cdktfConfigPath);
    }
}
exports.CdktfConfig = CdktfConfig;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RrdGYtY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2RrdGYtY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsK0JBQStCO0FBQy9CLG1DQUFtQztBQUNuQyx1Q0FBeUI7QUFDekIsNENBS3dCO0FBQ3hCLGdEQUF3QjtBQUN4Qiw0Q0FBd0M7QUFFeEMsU0FBUyxnQkFBZ0IsQ0FDdkIsSUFBWSxFQUNaLFFBQVEsR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFO0lBRXhCLE1BQU0sUUFBUSxHQUFHLGNBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzlDLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUMzQixPQUFPLFFBQVEsQ0FBQztLQUNqQjtJQUVELE1BQU0sU0FBUyxHQUFHLGNBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsSUFBSSxTQUFTLEtBQUssUUFBUSxFQUFFO1FBQ3RELE9BQU8sZ0JBQWdCLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0tBQzFDO0lBRUQsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBRUQsb0NBQW9DO0FBQ3BDLHNFQUFzRTtBQUN0RSxNQUFhLFdBQVc7SUFDdEIsWUFBb0IsZUFBdUI7UUFBdkIsb0JBQWUsR0FBZixlQUFlLENBQVE7SUFBRyxDQUFDO0lBRXZDLGVBQWU7UUFDckIsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUNsRCxJQUFJLE9BQU8sV0FBVyxLQUFLLFFBQVEsSUFBSSxXQUFXLEtBQUssSUFBSSxFQUFFO1lBQzNELE1BQU0sZ0JBQU0sQ0FBQyxRQUFRLENBQ25CLDBEQUEwRCxDQUMzRCxDQUFDLENBQUMsZ0RBQWdEO1NBQ3BEO1FBQ0QsT0FBTyxXQUFXLENBQUM7SUFDckIsQ0FBQztJQUVPLGdCQUFnQixDQUFDLFdBQW9DO1FBQzNELE1BQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQy9ELEVBQUUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFTyxXQUFXLENBQUMsUUFBZ0I7UUFDbEMsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQzNDLE9BQU8sV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFLLHlCQUF1QixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7SUFFRCxJQUFXLFFBQVE7UUFDakIsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNqRCxNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLGtCQUFRLENBQUMsQ0FBQyxJQUFJLENBQzNDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLEtBQUssV0FBVyxDQUNqQyxDQUFDO1FBQ0YsSUFBSSxDQUFDLFFBQVE7WUFDWCxNQUFNLGdCQUFNLENBQUMsS0FBSyxDQUNoQixHQUFHLFdBQVcsK0NBQStDLE1BQU0sQ0FBQyxNQUFNLENBQ3hFLGtCQUFRLENBQ1QsRUFBRSxDQUNKLENBQUM7UUFFSixPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDO0lBRUQsSUFBVyxlQUFlO1FBQ3hCLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBVyxDQUFDO0lBQ3ZELENBQUM7SUFFRCxJQUFXLGtCQUFrQjtRQUMzQixNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDekQsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO1lBQUUsT0FBTyxFQUFFLENBQUM7UUFDekMsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztJQUVELElBQVcsZ0JBQWdCO1FBQ3pCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUM7WUFBRSxPQUFPLEVBQUUsQ0FBQztRQUN2QyxPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDO0lBRU0sdUJBQXVCLENBQzVCLFNBQXFEO1FBRXJELE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUMzQyxXQUFXLENBQUMsa0JBQWtCLEdBQUcsU0FBUyxDQUFDO1FBQzNDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQsSUFBVyxnQkFBZ0I7UUFDekIsT0FBTyxjQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRU0sTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFlLE9BQU8sQ0FBQyxHQUFHLEVBQUU7UUFDN0MsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzdELElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDcEIsTUFBTSxnQkFBTSxDQUFDLFFBQVEsQ0FDbkIsaUhBQWlILENBQ2xILENBQUM7U0FDSDtRQUNELGdCQUFNLENBQUMsS0FBSyxDQUFDLHVCQUF1QixlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBRXZELE9BQU8sSUFBSSxXQUFXLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDMUMsQ0FBQztDQUNGO0FBN0VELGtDQTZFQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgSGFzaGlDb3JwLCBJbmNcbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNUEwtMi4wXG5pbXBvcnQgKiBhcyBmcyBmcm9tIFwiZnNcIjtcbmltcG9ydCB7XG4gIExhbmd1YWdlLFxuICBFcnJvcnMsXG4gIENPTkZJR19ERUZBVUxUUyxcbiAgVGVycmFmb3JtRGVwZW5kZW5jeUNvbnN0cmFpbnQsXG59IGZyb20gXCJAY2RrdGYvY29tbW9uc1wiO1xuaW1wb3J0IHBhdGggZnJvbSBcInBhdGhcIjtcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gXCJAY2RrdGYvY29tbW9uc1wiO1xuXG5mdW5jdGlvbiBmaW5kRmlsZUFib3ZlQ3dkKFxuICBmaWxlOiBzdHJpbmcsXG4gIHJvb3RQYXRoID0gcHJvY2Vzcy5jd2QoKVxuKTogc3RyaW5nIHwgbnVsbCB7XG4gIGNvbnN0IGZ1bGxQYXRoID0gcGF0aC5yZXNvbHZlKHJvb3RQYXRoLCBmaWxlKTtcbiAgaWYgKGZzLmV4aXN0c1N5bmMoZnVsbFBhdGgpKSB7XG4gICAgcmV0dXJuIGZ1bGxQYXRoO1xuICB9XG5cbiAgY29uc3QgcGFyZW50RGlyID0gcGF0aC5yZXNvbHZlKHJvb3RQYXRoLCBcIi4uXCIpO1xuICBpZiAoZnMuZXhpc3RzU3luYyhwYXJlbnREaXIpICYmIHBhcmVudERpciAhPT0gcm9vdFBhdGgpIHtcbiAgICByZXR1cm4gZmluZEZpbGVBYm92ZUN3ZChmaWxlLCBwYXJlbnREaXIpO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8vIFRPRE86IG1vdmUgdGhpcyB0byBAY2RrdGYvY29tbW9uc1xuLy8gdHJhY2tlZCBoZXJlIGh0dHBzOi8vZ2l0aHViLmNvbS9oYXNoaWNvcnAvdGVycmFmb3JtLWNkay9pc3N1ZXMvMTgxNFxuZXhwb3J0IGNsYXNzIENka3RmQ29uZmlnIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjZGt0ZkNvbmZpZ1BhdGg6IHN0cmluZykge31cblxuICBwcml2YXRlIHJlYWRDZGt0ZkNvbmZpZygpOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiB7XG4gICAgY29uc3QgY2RrdGZDb25maWcgPSByZXF1aXJlKHRoaXMuY2RrdGZDb25maWdQYXRoKTtcbiAgICBpZiAodHlwZW9mIGNka3RmQ29uZmlnICE9PSBcIm9iamVjdFwiIHx8IGNka3RmQ29uZmlnID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBFcnJvcnMuRXh0ZXJuYWwoXG4gICAgICAgIFwiY2RrdGYuanNvbiBpcyBtYWxmb3JtZWQuIFRoZSByb290IG11c3QgYmUgYSBKU09OIG9iamVjdC5cIlxuICAgICAgKTsgLy8gVE9ETzogZGVmaW5lIGEgc2NoZW1hIGFuZCB2YWxpZGF0ZSBhZ2FpbnN0IGl0XG4gICAgfVxuICAgIHJldHVybiBjZGt0ZkNvbmZpZztcbiAgfVxuXG4gIHByaXZhdGUgd3JpdGVDZGt0ZkNvbmZpZyhjZGt0ZkNvbmZpZzogUmVjb3JkPHN0cmluZywgdW5rbm93bj4pIHtcbiAgICBjb25zdCBjZGt0ZkNvbmZpZ1N0cmluZyA9IEpTT04uc3RyaW5naWZ5KGNka3RmQ29uZmlnLCBudWxsLCAyKTtcbiAgICBmcy53cml0ZUZpbGVTeW5jKHRoaXMuY2RrdGZDb25maWdQYXRoLCBjZGt0ZkNvbmZpZ1N0cmluZyk7XG4gIH1cblxuICBwcml2YXRlIGdldFByb3BlcnR5KHByb3BlcnR5OiBzdHJpbmcpOiB1bmtub3duIHtcbiAgICBjb25zdCBjZGt0ZkNvbmZpZyA9IHRoaXMucmVhZENka3RmQ29uZmlnKCk7XG4gICAgcmV0dXJuIGNka3RmQ29uZmlnW3Byb3BlcnR5XSB8fCAoQ09ORklHX0RFRkFVTFRTIGFzIGFueSlbcHJvcGVydHldO1xuICB9XG5cbiAgcHVibGljIGdldCBsYW5ndWFnZSgpOiBMYW5ndWFnZSB7XG4gICAgY29uc3QgcmF3TGFuZ3VhZ2UgPSB0aGlzLmdldFByb3BlcnR5KFwibGFuZ3VhZ2VcIik7XG4gICAgY29uc3QgbGFuZ3VhZ2UgPSBPYmplY3QudmFsdWVzKExhbmd1YWdlKS5maW5kKFxuICAgICAgKHZhbHVlKSA9PiB2YWx1ZSA9PT0gcmF3TGFuZ3VhZ2VcbiAgICApO1xuICAgIGlmICghbGFuZ3VhZ2UpXG4gICAgICB0aHJvdyBFcnJvcnMuVXNhZ2UoXG4gICAgICAgIGAke3Jhd0xhbmd1YWdlfSBpcyBub3QgYSB2YWxpZCBsYW5ndWFnZS4gSXQgbXVzdCBiZSBvbmUgb2YgJHtPYmplY3QudmFsdWVzKFxuICAgICAgICAgIExhbmd1YWdlXG4gICAgICAgICl9YFxuICAgICAgKTtcblxuICAgIHJldHVybiBsYW5ndWFnZTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgY29kZU1ha2VyT3V0cHV0KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0UHJvcGVydHkoXCJjb2RlTWFrZXJPdXRwdXRcIikgYXMgc3RyaW5nO1xuICB9XG5cbiAgcHVibGljIGdldCB0ZXJyYWZvcm1Qcm92aWRlcnMoKTogKFRlcnJhZm9ybURlcGVuZGVuY3lDb25zdHJhaW50IHwgc3RyaW5nKVtdIHtcbiAgICBjb25zdCBwcm92aWRlcnMgPSB0aGlzLmdldFByb3BlcnR5KFwidGVycmFmb3JtUHJvdmlkZXJzXCIpO1xuICAgIGlmICghQXJyYXkuaXNBcnJheShwcm92aWRlcnMpKSByZXR1cm4gW107XG4gICAgcmV0dXJuIHByb3ZpZGVycztcbiAgfVxuXG4gIHB1YmxpYyBnZXQgdGVycmFmb3JtTW9kdWxlcygpOiAoVGVycmFmb3JtRGVwZW5kZW5jeUNvbnN0cmFpbnQgfCBzdHJpbmcpW10ge1xuICAgIGNvbnN0IG1vZHVsZXMgPSB0aGlzLmdldFByb3BlcnR5KFwidGVycmFmb3JtTW9kdWxlc1wiKTtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkobW9kdWxlcykpIHJldHVybiBbXTtcbiAgICByZXR1cm4gbW9kdWxlcztcbiAgfVxuXG4gIHB1YmxpYyB3cml0ZVRlcnJhZm9ybVByb3ZpZGVycyhcbiAgICBwcm92aWRlcnM6IChUZXJyYWZvcm1EZXBlbmRlbmN5Q29uc3RyYWludCB8IHN0cmluZylbXVxuICApIHtcbiAgICBjb25zdCBjZGt0ZkNvbmZpZyA9IHRoaXMucmVhZENka3RmQ29uZmlnKCk7XG4gICAgY2RrdGZDb25maWcudGVycmFmb3JtUHJvdmlkZXJzID0gcHJvdmlkZXJzO1xuICAgIHRoaXMud3JpdGVDZGt0ZkNvbmZpZyhjZGt0ZkNvbmZpZyk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IHByb2plY3REaXJlY3RvcnkoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gcGF0aC5kaXJuYW1lKHRoaXMuY2RrdGZDb25maWdQYXRoKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgcmVhZChwYXRoOiBzdHJpbmcgPSBwcm9jZXNzLmN3ZCgpKTogQ2RrdGZDb25maWcge1xuICAgIGNvbnN0IGNka3RmQ29uZmlnUGF0aCA9IGZpbmRGaWxlQWJvdmVDd2QoXCJjZGt0Zi5qc29uXCIsIHBhdGgpO1xuICAgIGlmICghY2RrdGZDb25maWdQYXRoKSB7XG4gICAgICB0aHJvdyBFcnJvcnMuRXh0ZXJuYWwoXG4gICAgICAgIFwiQ291bGQgbm90IGZpbmQgY2RrdGYuanNvbi4gTWFrZSBzdXJlIHRoZXJlIGlzIGEgY2RrdGYuanNvbiBmaWxlIGluIHRoZSBjdXJyZW50IGRpcmVjdG9yeSBvciBvbmUgb2YgaXRzIHBhcmVudHMuXCJcbiAgICAgICk7XG4gICAgfVxuICAgIGxvZ2dlci50cmFjZShgY2RrdGYuanNvbiBmb3VuZCBhdCAke2Nka3RmQ29uZmlnUGF0aH1gKTtcblxuICAgIHJldHVybiBuZXcgQ2RrdGZDb25maWcoY2RrdGZDb25maWdQYXRoKTtcbiAgfVxufVxuIl19