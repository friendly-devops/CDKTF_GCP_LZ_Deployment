"use strict";
var _a, _b, _c, _d, _e, _f, _g;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SqlUser = exports.SqlUserTimeoutsOutputReference = exports.sqlUserTimeoutsToHclTerraform = exports.sqlUserTimeoutsToTerraform = exports.SqlUserPasswordPolicyOutputReference = exports.sqlUserPasswordPolicyToHclTerraform = exports.sqlUserPasswordPolicyToTerraform = exports.SqlUserPasswordPolicyStatusList = exports.SqlUserPasswordPolicyStatusOutputReference = exports.sqlUserPasswordPolicyStatusToHclTerraform = exports.sqlUserPasswordPolicyStatusToTerraform = exports.SqlUserSqlServerUserDetailsList = exports.SqlUserSqlServerUserDetailsOutputReference = exports.sqlUserSqlServerUserDetailsToHclTerraform = exports.sqlUserSqlServerUserDetailsToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function sqlUserSqlServerUserDetailsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.sqlUserSqlServerUserDetailsToTerraform = sqlUserSqlServerUserDetailsToTerraform;
function sqlUserSqlServerUserDetailsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.sqlUserSqlServerUserDetailsToHclTerraform = sqlUserSqlServerUserDetailsToHclTerraform;
class SqlUserSqlServerUserDetailsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // disabled - computed: true, optional: false, required: false
    get disabled() {
        return this.getBooleanAttribute('disabled');
    }
    // server_roles - computed: true, optional: false, required: false
    get serverRoles() {
        return this.getListAttribute('server_roles');
    }
}
exports.SqlUserSqlServerUserDetailsOutputReference = SqlUserSqlServerUserDetailsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
SqlUserSqlServerUserDetailsOutputReference[_a] = { fqn: "@cdktf/provider-google.sqlUser.SqlUserSqlServerUserDetailsOutputReference", version: "14.13.1" };
class SqlUserSqlServerUserDetailsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new SqlUserSqlServerUserDetailsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.SqlUserSqlServerUserDetailsList = SqlUserSqlServerUserDetailsList;
_b = JSII_RTTI_SYMBOL_1;
SqlUserSqlServerUserDetailsList[_b] = { fqn: "@cdktf/provider-google.sqlUser.SqlUserSqlServerUserDetailsList", version: "14.13.1" };
function sqlUserPasswordPolicyStatusToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.sqlUserPasswordPolicyStatusToTerraform = sqlUserPasswordPolicyStatusToTerraform;
function sqlUserPasswordPolicyStatusToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.sqlUserPasswordPolicyStatusToHclTerraform = sqlUserPasswordPolicyStatusToHclTerraform;
class SqlUserPasswordPolicyStatusOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // locked - computed: true, optional: false, required: false
    get locked() {
        return this.getBooleanAttribute('locked');
    }
    // password_expiration_time - computed: true, optional: false, required: false
    get passwordExpirationTime() {
        return this.getStringAttribute('password_expiration_time');
    }
}
exports.SqlUserPasswordPolicyStatusOutputReference = SqlUserPasswordPolicyStatusOutputReference;
_c = JSII_RTTI_SYMBOL_1;
SqlUserPasswordPolicyStatusOutputReference[_c] = { fqn: "@cdktf/provider-google.sqlUser.SqlUserPasswordPolicyStatusOutputReference", version: "14.13.1" };
class SqlUserPasswordPolicyStatusList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new SqlUserPasswordPolicyStatusOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.SqlUserPasswordPolicyStatusList = SqlUserPasswordPolicyStatusList;
_d = JSII_RTTI_SYMBOL_1;
SqlUserPasswordPolicyStatusList[_d] = { fqn: "@cdktf/provider-google.sqlUser.SqlUserPasswordPolicyStatusList", version: "14.13.1" };
function sqlUserPasswordPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allowed_failed_attempts: cdktf.numberToTerraform(struct.allowedFailedAttempts),
        enable_failed_attempts_check: cdktf.booleanToTerraform(struct.enableFailedAttemptsCheck),
        enable_password_verification: cdktf.booleanToTerraform(struct.enablePasswordVerification),
        password_expiration_duration: cdktf.stringToTerraform(struct.passwordExpirationDuration),
    };
}
exports.sqlUserPasswordPolicyToTerraform = sqlUserPasswordPolicyToTerraform;
function sqlUserPasswordPolicyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        allowed_failed_attempts: {
            value: cdktf.numberToHclTerraform(struct.allowedFailedAttempts),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        enable_failed_attempts_check: {
            value: cdktf.booleanToHclTerraform(struct.enableFailedAttemptsCheck),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        enable_password_verification: {
            value: cdktf.booleanToHclTerraform(struct.enablePasswordVerification),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        password_expiration_duration: {
            value: cdktf.stringToHclTerraform(struct.passwordExpirationDuration),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sqlUserPasswordPolicyToHclTerraform = sqlUserPasswordPolicyToHclTerraform;
class SqlUserPasswordPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // status - computed: true, optional: false, required: false
        this._status = new SqlUserPasswordPolicyStatusList(this, "status", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowedFailedAttempts !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowedFailedAttempts = this._allowedFailedAttempts;
        }
        if (this._enableFailedAttemptsCheck !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableFailedAttemptsCheck = this._enableFailedAttemptsCheck;
        }
        if (this._enablePasswordVerification !== undefined) {
            hasAnyValues = true;
            internalValueResult.enablePasswordVerification = this._enablePasswordVerification;
        }
        if (this._passwordExpirationDuration !== undefined) {
            hasAnyValues = true;
            internalValueResult.passwordExpirationDuration = this._passwordExpirationDuration;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowedFailedAttempts = undefined;
            this._enableFailedAttemptsCheck = undefined;
            this._enablePasswordVerification = undefined;
            this._passwordExpirationDuration = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowedFailedAttempts = value.allowedFailedAttempts;
            this._enableFailedAttemptsCheck = value.enableFailedAttemptsCheck;
            this._enablePasswordVerification = value.enablePasswordVerification;
            this._passwordExpirationDuration = value.passwordExpirationDuration;
        }
    }
    get allowedFailedAttempts() {
        return this.getNumberAttribute('allowed_failed_attempts');
    }
    set allowedFailedAttempts(value) {
        this._allowedFailedAttempts = value;
    }
    resetAllowedFailedAttempts() {
        this._allowedFailedAttempts = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowedFailedAttemptsInput() {
        return this._allowedFailedAttempts;
    }
    get enableFailedAttemptsCheck() {
        return this.getBooleanAttribute('enable_failed_attempts_check');
    }
    set enableFailedAttemptsCheck(value) {
        this._enableFailedAttemptsCheck = value;
    }
    resetEnableFailedAttemptsCheck() {
        this._enableFailedAttemptsCheck = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableFailedAttemptsCheckInput() {
        return this._enableFailedAttemptsCheck;
    }
    get enablePasswordVerification() {
        return this.getBooleanAttribute('enable_password_verification');
    }
    set enablePasswordVerification(value) {
        this._enablePasswordVerification = value;
    }
    resetEnablePasswordVerification() {
        this._enablePasswordVerification = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enablePasswordVerificationInput() {
        return this._enablePasswordVerification;
    }
    get passwordExpirationDuration() {
        return this.getStringAttribute('password_expiration_duration');
    }
    set passwordExpirationDuration(value) {
        this._passwordExpirationDuration = value;
    }
    resetPasswordExpirationDuration() {
        this._passwordExpirationDuration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get passwordExpirationDurationInput() {
        return this._passwordExpirationDuration;
    }
    get status() {
        return this._status;
    }
}
exports.SqlUserPasswordPolicyOutputReference = SqlUserPasswordPolicyOutputReference;
_e = JSII_RTTI_SYMBOL_1;
SqlUserPasswordPolicyOutputReference[_e] = { fqn: "@cdktf/provider-google.sqlUser.SqlUserPasswordPolicyOutputReference", version: "14.13.1" };
function sqlUserTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.sqlUserTimeoutsToTerraform = sqlUserTimeoutsToTerraform;
function sqlUserTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.sqlUserTimeoutsToHclTerraform = sqlUserTimeoutsToHclTerraform;
class SqlUserTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.SqlUserTimeoutsOutputReference = SqlUserTimeoutsOutputReference;
_f = JSII_RTTI_SYMBOL_1;
SqlUserTimeoutsOutputReference[_f] = { fqn: "@cdktf/provider-google.sqlUser.SqlUserTimeoutsOutputReference", version: "14.13.1" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/sql_user google_sql_user}
*/
class SqlUser extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a SqlUser resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the SqlUser to import
    * @param importFromId The id of the existing SqlUser that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/sql_user#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the SqlUser to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_sql_user", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/sql_user google_sql_user} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options SqlUserConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_sql_user',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // sql_server_user_details - computed: true, optional: false, required: false
        this._sqlServerUserDetails = new SqlUserSqlServerUserDetailsList(this, "sql_server_user_details", false);
        // password_policy - computed: false, optional: true, required: false
        this._passwordPolicy = new SqlUserPasswordPolicyOutputReference(this, "password_policy");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new SqlUserTimeoutsOutputReference(this, "timeouts");
        this._deletionPolicy = config.deletionPolicy;
        this._host = config.host;
        this._id = config.id;
        this._instance = config.instance;
        this._name = config.name;
        this._password = config.password;
        this._project = config.project;
        this._type = config.type;
        this._passwordPolicy.internalValue = config.passwordPolicy;
        this._timeouts.internalValue = config.timeouts;
    }
    get deletionPolicy() {
        return this.getStringAttribute('deletion_policy');
    }
    set deletionPolicy(value) {
        this._deletionPolicy = value;
    }
    resetDeletionPolicy() {
        this._deletionPolicy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deletionPolicyInput() {
        return this._deletionPolicy;
    }
    get host() {
        return this.getStringAttribute('host');
    }
    set host(value) {
        this._host = value;
    }
    resetHost() {
        this._host = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostInput() {
        return this._host;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get instance() {
        return this.getStringAttribute('instance');
    }
    set instance(value) {
        this._instance = value;
    }
    // Temporarily expose input value. Use with caution.
    get instanceInput() {
        return this._instance;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get password() {
        return this.getStringAttribute('password');
    }
    set password(value) {
        this._password = value;
    }
    resetPassword() {
        this._password = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get passwordInput() {
        return this._password;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get sqlServerUserDetails() {
        return this._sqlServerUserDetails;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    resetType() {
        this._type = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    get passwordPolicy() {
        return this._passwordPolicy;
    }
    putPasswordPolicy(value) {
        this._passwordPolicy.internalValue = value;
    }
    resetPasswordPolicy() {
        this._passwordPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get passwordPolicyInput() {
        return this._passwordPolicy.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            deletion_policy: cdktf.stringToTerraform(this._deletionPolicy),
            host: cdktf.stringToTerraform(this._host),
            id: cdktf.stringToTerraform(this._id),
            instance: cdktf.stringToTerraform(this._instance),
            name: cdktf.stringToTerraform(this._name),
            password: cdktf.stringToTerraform(this._password),
            project: cdktf.stringToTerraform(this._project),
            type: cdktf.stringToTerraform(this._type),
            password_policy: sqlUserPasswordPolicyToTerraform(this._passwordPolicy.internalValue),
            timeouts: sqlUserTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            deletion_policy: {
                value: cdktf.stringToHclTerraform(this._deletionPolicy),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            host: {
                value: cdktf.stringToHclTerraform(this._host),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            instance: {
                value: cdktf.stringToHclTerraform(this._instance),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            name: {
                value: cdktf.stringToHclTerraform(this._name),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            password: {
                value: cdktf.stringToHclTerraform(this._password),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            project: {
                value: cdktf.stringToHclTerraform(this._project),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            type: {
                value: cdktf.stringToHclTerraform(this._type),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            password_policy: {
                value: sqlUserPasswordPolicyToHclTerraform(this._passwordPolicy.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "SqlUserPasswordPolicyList",
            },
            timeouts: {
                value: sqlUserTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "SqlUserTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.SqlUser = SqlUser;
_g = JSII_RTTI_SYMBOL_1;
SqlUser[_g] = { fqn: "@cdktf/provider-google.sqlUser.SqlUser", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
SqlUser.tfResourceType = "google_sql_user";
//# sourceMappingURL=data:application/json;base64,