"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyKmsWrappedOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyKmsWrappedToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyKmsWrappedToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigContextOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigContextToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigContextToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCharacterMaskConfigOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCharacterMaskConfigToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCharacterMaskConfigToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCharacterMaskConfigCharactersToIgnoreList = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCharacterMaskConfigCharactersToIgnoreOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCharacterMaskConfigCharactersToIgnoreToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCharacterMaskConfigCharactersToIgnoreToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsList = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueTimeValueOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueTimeValueToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueTimeValueToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueDateValueOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueDateValueToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueDateValueToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinTimeValueOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinTimeValueToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinTimeValueToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinDateValueOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinDateValueToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinDateValueToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxTimeValueOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxTimeValueToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxTimeValueToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxDateValueOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxDateValueToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxDateValueToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsToTerraform = void 0;
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoTypeSensitivityScoreToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoTypeSensitivityScoreToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyUnwrappedOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyUnwrappedToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyUnwrappedToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyTransientOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyTransientToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyTransientToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyKmsWrappedOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyKmsWrappedToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyKmsWrappedToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigContextOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigContextToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigContextToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyUnwrappedOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyUnwrappedToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyUnwrappedToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyTransientOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyTransientToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyTransientToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyKmsWrappedOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyKmsWrappedToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyKmsWrappedToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigSurrogateInfoTypeOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigSurrogateInfoTypeToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigSurrogateInfoTypeToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigSurrogateInfoTypeSensitivityScoreOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigSurrogateInfoTypeSensitivityScoreToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigSurrogateInfoTypeSensitivityScoreToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyUnwrappedOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyUnwrappedToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyUnwrappedToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyTransientOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyTransientToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyTransientToTerraform = void 0;
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueDateValueToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationRedactConfigOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationRedactConfigToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationRedactConfigToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundTimeValueOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundTimeValueToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundTimeValueToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundDateValueOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundDateValueToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundDateValueToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundTimeValueOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundTimeValueToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundTimeValueToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundDateValueOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundDateValueToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundDateValueToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyUnwrappedOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyUnwrappedToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyUnwrappedToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyTransientOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyTransientToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyTransientToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyKmsWrappedOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyKmsWrappedToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyKmsWrappedToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigContextOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigContextToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigContextToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoTypeOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoTypeToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoTypeToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoTypeSensitivityScoreOutputReference = void 0;
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsList = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueTimeValueOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueTimeValueToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueTimeValueToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueDateValueOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueDateValueToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueDateValueToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsFieldOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsFieldToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsFieldToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsList = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationTimePartConfigOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationTimePartConfigToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationTimePartConfigToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceDictionaryConfigOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceDictionaryConfigToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceDictionaryConfigToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceDictionaryConfigWordListStructOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceDictionaryConfigWordListStructToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceDictionaryConfigWordListStructToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueTimeValueOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueTimeValueToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueTimeValueToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueDateValueOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueDateValueToHclTerraform = void 0;
exports.DataLossPreventionDeidentifyTemplateTimeoutsOutputReference = exports.dataLossPreventionDeidentifyTemplateTimeoutsToHclTerraform = exports.dataLossPreventionDeidentifyTemplateTimeoutsToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsList = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsToHclTerraform = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsToTerraform = exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionOutputReference = exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionToHclTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: MPL-2.0
 */
const cdktf = require("cdktf");
const structs0_1 = require("./structs0");
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        transformations: cdktf.listMapper(structs0_1.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsToTerraform, true)(struct.transformations),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        transformations: {
            value: cdktf.listMapperHcl(structs0_1.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsToHclTerraform, true)(struct.transformations),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // transformations - computed: false, optional: false, required: true
        this._transformations = new structs0_1.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsList(this, "transformations", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._transformations?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.transformations = this._transformations?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._transformations.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._transformations.internalValue = value.transformations;
        }
    }
    get transformations() {
        return this._transformations;
    }
    putTransformations(value) {
        this._transformations.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get transformationsInput() {
        return this._transformations.internalValue;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsOutputReference[_a] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxDateValueToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        day: cdktf.numberToTerraform(struct.day),
        month: cdktf.numberToTerraform(struct.month),
        year: cdktf.numberToTerraform(struct.year),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxDateValueToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxDateValueToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxDateValueToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        day: {
            value: cdktf.numberToHclTerraform(struct.day),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        month: {
            value: cdktf.numberToHclTerraform(struct.month),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        year: {
            value: cdktf.numberToHclTerraform(struct.year),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxDateValueToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxDateValueToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxDateValueOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._day !== undefined) {
            hasAnyValues = true;
            internalValueResult.day = this._day;
        }
        if (this._month !== undefined) {
            hasAnyValues = true;
            internalValueResult.month = this._month;
        }
        if (this._year !== undefined) {
            hasAnyValues = true;
            internalValueResult.year = this._year;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._day = undefined;
            this._month = undefined;
            this._year = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._day = value.day;
            this._month = value.month;
            this._year = value.year;
        }
    }
    get day() {
        return this.getNumberAttribute('day');
    }
    set day(value) {
        this._day = value;
    }
    resetDay() {
        this._day = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dayInput() {
        return this._day;
    }
    get month() {
        return this.getNumberAttribute('month');
    }
    set month(value) {
        this._month = value;
    }
    resetMonth() {
        this._month = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get monthInput() {
        return this._month;
    }
    get year() {
        return this.getNumberAttribute('year');
    }
    set year(value) {
        this._year = value;
    }
    resetYear() {
        this._year = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get yearInput() {
        return this._year;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxDateValueOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxDateValueOutputReference;
_b = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxDateValueOutputReference[_b] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxDateValueOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxTimeValueToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        hours: cdktf.numberToTerraform(struct.hours),
        minutes: cdktf.numberToTerraform(struct.minutes),
        nanos: cdktf.numberToTerraform(struct.nanos),
        seconds: cdktf.numberToTerraform(struct.seconds),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxTimeValueToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxTimeValueToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxTimeValueToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        hours: {
            value: cdktf.numberToHclTerraform(struct.hours),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        minutes: {
            value: cdktf.numberToHclTerraform(struct.minutes),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        nanos: {
            value: cdktf.numberToHclTerraform(struct.nanos),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        seconds: {
            value: cdktf.numberToHclTerraform(struct.seconds),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxTimeValueToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxTimeValueToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxTimeValueOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hours !== undefined) {
            hasAnyValues = true;
            internalValueResult.hours = this._hours;
        }
        if (this._minutes !== undefined) {
            hasAnyValues = true;
            internalValueResult.minutes = this._minutes;
        }
        if (this._nanos !== undefined) {
            hasAnyValues = true;
            internalValueResult.nanos = this._nanos;
        }
        if (this._seconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.seconds = this._seconds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hours = undefined;
            this._minutes = undefined;
            this._nanos = undefined;
            this._seconds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hours = value.hours;
            this._minutes = value.minutes;
            this._nanos = value.nanos;
            this._seconds = value.seconds;
        }
    }
    get hours() {
        return this.getNumberAttribute('hours');
    }
    set hours(value) {
        this._hours = value;
    }
    resetHours() {
        this._hours = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hoursInput() {
        return this._hours;
    }
    get minutes() {
        return this.getNumberAttribute('minutes');
    }
    set minutes(value) {
        this._minutes = value;
    }
    resetMinutes() {
        this._minutes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minutesInput() {
        return this._minutes;
    }
    get nanos() {
        return this.getNumberAttribute('nanos');
    }
    set nanos(value) {
        this._nanos = value;
    }
    resetNanos() {
        this._nanos = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nanosInput() {
        return this._nanos;
    }
    get seconds() {
        return this.getNumberAttribute('seconds');
    }
    set seconds(value) {
        this._seconds = value;
    }
    resetSeconds() {
        this._seconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secondsInput() {
        return this._seconds;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxTimeValueOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxTimeValueOutputReference;
_c = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxTimeValueOutputReference[_c] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxTimeValueOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        boolean_value: cdktf.booleanToTerraform(struct.booleanValue),
        day_of_week_value: cdktf.stringToTerraform(struct.dayOfWeekValue),
        float_value: cdktf.numberToTerraform(struct.floatValue),
        integer_value: cdktf.stringToTerraform(struct.integerValue),
        string_value: cdktf.stringToTerraform(struct.stringValue),
        timestamp_value: cdktf.stringToTerraform(struct.timestampValue),
        date_value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxDateValueToTerraform(struct.dateValue),
        time_value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxTimeValueToTerraform(struct.timeValue),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        boolean_value: {
            value: cdktf.booleanToHclTerraform(struct.booleanValue),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        day_of_week_value: {
            value: cdktf.stringToHclTerraform(struct.dayOfWeekValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        float_value: {
            value: cdktf.numberToHclTerraform(struct.floatValue),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        integer_value: {
            value: cdktf.stringToHclTerraform(struct.integerValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        string_value: {
            value: cdktf.stringToHclTerraform(struct.stringValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        timestamp_value: {
            value: cdktf.stringToHclTerraform(struct.timestampValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        date_value: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxDateValueToHclTerraform(struct.dateValue),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxDateValueList",
        },
        time_value: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxTimeValueToHclTerraform(struct.timeValue),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxTimeValueList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // date_value - computed: false, optional: true, required: false
        this._dateValue = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxDateValueOutputReference(this, "date_value");
        // time_value - computed: false, optional: true, required: false
        this._timeValue = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxTimeValueOutputReference(this, "time_value");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._booleanValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.booleanValue = this._booleanValue;
        }
        if (this._dayOfWeekValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dayOfWeekValue = this._dayOfWeekValue;
        }
        if (this._floatValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.floatValue = this._floatValue;
        }
        if (this._integerValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.integerValue = this._integerValue;
        }
        if (this._stringValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.stringValue = this._stringValue;
        }
        if (this._timestampValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.timestampValue = this._timestampValue;
        }
        if (this._dateValue?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dateValue = this._dateValue?.internalValue;
        }
        if (this._timeValue?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.timeValue = this._timeValue?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._booleanValue = undefined;
            this._dayOfWeekValue = undefined;
            this._floatValue = undefined;
            this._integerValue = undefined;
            this._stringValue = undefined;
            this._timestampValue = undefined;
            this._dateValue.internalValue = undefined;
            this._timeValue.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._booleanValue = value.booleanValue;
            this._dayOfWeekValue = value.dayOfWeekValue;
            this._floatValue = value.floatValue;
            this._integerValue = value.integerValue;
            this._stringValue = value.stringValue;
            this._timestampValue = value.timestampValue;
            this._dateValue.internalValue = value.dateValue;
            this._timeValue.internalValue = value.timeValue;
        }
    }
    get booleanValue() {
        return this.getBooleanAttribute('boolean_value');
    }
    set booleanValue(value) {
        this._booleanValue = value;
    }
    resetBooleanValue() {
        this._booleanValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get booleanValueInput() {
        return this._booleanValue;
    }
    get dayOfWeekValue() {
        return this.getStringAttribute('day_of_week_value');
    }
    set dayOfWeekValue(value) {
        this._dayOfWeekValue = value;
    }
    resetDayOfWeekValue() {
        this._dayOfWeekValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dayOfWeekValueInput() {
        return this._dayOfWeekValue;
    }
    get floatValue() {
        return this.getNumberAttribute('float_value');
    }
    set floatValue(value) {
        this._floatValue = value;
    }
    resetFloatValue() {
        this._floatValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get floatValueInput() {
        return this._floatValue;
    }
    get integerValue() {
        return this.getStringAttribute('integer_value');
    }
    set integerValue(value) {
        this._integerValue = value;
    }
    resetIntegerValue() {
        this._integerValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get integerValueInput() {
        return this._integerValue;
    }
    get stringValue() {
        return this.getStringAttribute('string_value');
    }
    set stringValue(value) {
        this._stringValue = value;
    }
    resetStringValue() {
        this._stringValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stringValueInput() {
        return this._stringValue;
    }
    get timestampValue() {
        return this.getStringAttribute('timestamp_value');
    }
    set timestampValue(value) {
        this._timestampValue = value;
    }
    resetTimestampValue() {
        this._timestampValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timestampValueInput() {
        return this._timestampValue;
    }
    get dateValue() {
        return this._dateValue;
    }
    putDateValue(value) {
        this._dateValue.internalValue = value;
    }
    resetDateValue() {
        this._dateValue.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dateValueInput() {
        return this._dateValue.internalValue;
    }
    get timeValue() {
        return this._timeValue;
    }
    putTimeValue(value) {
        this._timeValue.internalValue = value;
    }
    resetTimeValue() {
        this._timeValue.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeValueInput() {
        return this._timeValue.internalValue;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxOutputReference;
_d = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxOutputReference[_d] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinDateValueToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        day: cdktf.numberToTerraform(struct.day),
        month: cdktf.numberToTerraform(struct.month),
        year: cdktf.numberToTerraform(struct.year),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinDateValueToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinDateValueToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinDateValueToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        day: {
            value: cdktf.numberToHclTerraform(struct.day),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        month: {
            value: cdktf.numberToHclTerraform(struct.month),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        year: {
            value: cdktf.numberToHclTerraform(struct.year),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinDateValueToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinDateValueToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinDateValueOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._day !== undefined) {
            hasAnyValues = true;
            internalValueResult.day = this._day;
        }
        if (this._month !== undefined) {
            hasAnyValues = true;
            internalValueResult.month = this._month;
        }
        if (this._year !== undefined) {
            hasAnyValues = true;
            internalValueResult.year = this._year;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._day = undefined;
            this._month = undefined;
            this._year = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._day = value.day;
            this._month = value.month;
            this._year = value.year;
        }
    }
    get day() {
        return this.getNumberAttribute('day');
    }
    set day(value) {
        this._day = value;
    }
    resetDay() {
        this._day = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dayInput() {
        return this._day;
    }
    get month() {
        return this.getNumberAttribute('month');
    }
    set month(value) {
        this._month = value;
    }
    resetMonth() {
        this._month = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get monthInput() {
        return this._month;
    }
    get year() {
        return this.getNumberAttribute('year');
    }
    set year(value) {
        this._year = value;
    }
    resetYear() {
        this._year = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get yearInput() {
        return this._year;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinDateValueOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinDateValueOutputReference;
_e = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinDateValueOutputReference[_e] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinDateValueOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinTimeValueToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        hours: cdktf.numberToTerraform(struct.hours),
        minutes: cdktf.numberToTerraform(struct.minutes),
        nanos: cdktf.numberToTerraform(struct.nanos),
        seconds: cdktf.numberToTerraform(struct.seconds),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinTimeValueToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinTimeValueToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinTimeValueToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        hours: {
            value: cdktf.numberToHclTerraform(struct.hours),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        minutes: {
            value: cdktf.numberToHclTerraform(struct.minutes),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        nanos: {
            value: cdktf.numberToHclTerraform(struct.nanos),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        seconds: {
            value: cdktf.numberToHclTerraform(struct.seconds),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinTimeValueToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinTimeValueToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinTimeValueOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hours !== undefined) {
            hasAnyValues = true;
            internalValueResult.hours = this._hours;
        }
        if (this._minutes !== undefined) {
            hasAnyValues = true;
            internalValueResult.minutes = this._minutes;
        }
        if (this._nanos !== undefined) {
            hasAnyValues = true;
            internalValueResult.nanos = this._nanos;
        }
        if (this._seconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.seconds = this._seconds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hours = undefined;
            this._minutes = undefined;
            this._nanos = undefined;
            this._seconds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hours = value.hours;
            this._minutes = value.minutes;
            this._nanos = value.nanos;
            this._seconds = value.seconds;
        }
    }
    get hours() {
        return this.getNumberAttribute('hours');
    }
    set hours(value) {
        this._hours = value;
    }
    resetHours() {
        this._hours = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hoursInput() {
        return this._hours;
    }
    get minutes() {
        return this.getNumberAttribute('minutes');
    }
    set minutes(value) {
        this._minutes = value;
    }
    resetMinutes() {
        this._minutes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minutesInput() {
        return this._minutes;
    }
    get nanos() {
        return this.getNumberAttribute('nanos');
    }
    set nanos(value) {
        this._nanos = value;
    }
    resetNanos() {
        this._nanos = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nanosInput() {
        return this._nanos;
    }
    get seconds() {
        return this.getNumberAttribute('seconds');
    }
    set seconds(value) {
        this._seconds = value;
    }
    resetSeconds() {
        this._seconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secondsInput() {
        return this._seconds;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinTimeValueOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinTimeValueOutputReference;
_f = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinTimeValueOutputReference[_f] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinTimeValueOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        boolean_value: cdktf.booleanToTerraform(struct.booleanValue),
        day_of_week_value: cdktf.stringToTerraform(struct.dayOfWeekValue),
        float_value: cdktf.numberToTerraform(struct.floatValue),
        integer_value: cdktf.stringToTerraform(struct.integerValue),
        string_value: cdktf.stringToTerraform(struct.stringValue),
        timestamp_value: cdktf.stringToTerraform(struct.timestampValue),
        date_value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinDateValueToTerraform(struct.dateValue),
        time_value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinTimeValueToTerraform(struct.timeValue),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        boolean_value: {
            value: cdktf.booleanToHclTerraform(struct.booleanValue),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        day_of_week_value: {
            value: cdktf.stringToHclTerraform(struct.dayOfWeekValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        float_value: {
            value: cdktf.numberToHclTerraform(struct.floatValue),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        integer_value: {
            value: cdktf.stringToHclTerraform(struct.integerValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        string_value: {
            value: cdktf.stringToHclTerraform(struct.stringValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        timestamp_value: {
            value: cdktf.stringToHclTerraform(struct.timestampValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        date_value: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinDateValueToHclTerraform(struct.dateValue),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinDateValueList",
        },
        time_value: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinTimeValueToHclTerraform(struct.timeValue),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinTimeValueList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // date_value - computed: false, optional: true, required: false
        this._dateValue = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinDateValueOutputReference(this, "date_value");
        // time_value - computed: false, optional: true, required: false
        this._timeValue = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinTimeValueOutputReference(this, "time_value");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._booleanValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.booleanValue = this._booleanValue;
        }
        if (this._dayOfWeekValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dayOfWeekValue = this._dayOfWeekValue;
        }
        if (this._floatValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.floatValue = this._floatValue;
        }
        if (this._integerValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.integerValue = this._integerValue;
        }
        if (this._stringValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.stringValue = this._stringValue;
        }
        if (this._timestampValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.timestampValue = this._timestampValue;
        }
        if (this._dateValue?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dateValue = this._dateValue?.internalValue;
        }
        if (this._timeValue?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.timeValue = this._timeValue?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._booleanValue = undefined;
            this._dayOfWeekValue = undefined;
            this._floatValue = undefined;
            this._integerValue = undefined;
            this._stringValue = undefined;
            this._timestampValue = undefined;
            this._dateValue.internalValue = undefined;
            this._timeValue.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._booleanValue = value.booleanValue;
            this._dayOfWeekValue = value.dayOfWeekValue;
            this._floatValue = value.floatValue;
            this._integerValue = value.integerValue;
            this._stringValue = value.stringValue;
            this._timestampValue = value.timestampValue;
            this._dateValue.internalValue = value.dateValue;
            this._timeValue.internalValue = value.timeValue;
        }
    }
    get booleanValue() {
        return this.getBooleanAttribute('boolean_value');
    }
    set booleanValue(value) {
        this._booleanValue = value;
    }
    resetBooleanValue() {
        this._booleanValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get booleanValueInput() {
        return this._booleanValue;
    }
    get dayOfWeekValue() {
        return this.getStringAttribute('day_of_week_value');
    }
    set dayOfWeekValue(value) {
        this._dayOfWeekValue = value;
    }
    resetDayOfWeekValue() {
        this._dayOfWeekValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dayOfWeekValueInput() {
        return this._dayOfWeekValue;
    }
    get floatValue() {
        return this.getNumberAttribute('float_value');
    }
    set floatValue(value) {
        this._floatValue = value;
    }
    resetFloatValue() {
        this._floatValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get floatValueInput() {
        return this._floatValue;
    }
    get integerValue() {
        return this.getStringAttribute('integer_value');
    }
    set integerValue(value) {
        this._integerValue = value;
    }
    resetIntegerValue() {
        this._integerValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get integerValueInput() {
        return this._integerValue;
    }
    get stringValue() {
        return this.getStringAttribute('string_value');
    }
    set stringValue(value) {
        this._stringValue = value;
    }
    resetStringValue() {
        this._stringValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stringValueInput() {
        return this._stringValue;
    }
    get timestampValue() {
        return this.getStringAttribute('timestamp_value');
    }
    set timestampValue(value) {
        this._timestampValue = value;
    }
    resetTimestampValue() {
        this._timestampValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timestampValueInput() {
        return this._timestampValue;
    }
    get dateValue() {
        return this._dateValue;
    }
    putDateValue(value) {
        this._dateValue.internalValue = value;
    }
    resetDateValue() {
        this._dateValue.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dateValueInput() {
        return this._dateValue.internalValue;
    }
    get timeValue() {
        return this._timeValue;
    }
    putTimeValue(value) {
        this._timeValue.internalValue = value;
    }
    resetTimeValue() {
        this._timeValue.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeValueInput() {
        return this._timeValue.internalValue;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinOutputReference;
_g = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinOutputReference[_g] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueDateValueToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        day: cdktf.numberToTerraform(struct.day),
        month: cdktf.numberToTerraform(struct.month),
        year: cdktf.numberToTerraform(struct.year),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueDateValueToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueDateValueToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueDateValueToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        day: {
            value: cdktf.numberToHclTerraform(struct.day),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        month: {
            value: cdktf.numberToHclTerraform(struct.month),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        year: {
            value: cdktf.numberToHclTerraform(struct.year),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueDateValueToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueDateValueToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueDateValueOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._day !== undefined) {
            hasAnyValues = true;
            internalValueResult.day = this._day;
        }
        if (this._month !== undefined) {
            hasAnyValues = true;
            internalValueResult.month = this._month;
        }
        if (this._year !== undefined) {
            hasAnyValues = true;
            internalValueResult.year = this._year;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._day = undefined;
            this._month = undefined;
            this._year = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._day = value.day;
            this._month = value.month;
            this._year = value.year;
        }
    }
    get day() {
        return this.getNumberAttribute('day');
    }
    set day(value) {
        this._day = value;
    }
    resetDay() {
        this._day = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dayInput() {
        return this._day;
    }
    get month() {
        return this.getNumberAttribute('month');
    }
    set month(value) {
        this._month = value;
    }
    resetMonth() {
        this._month = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get monthInput() {
        return this._month;
    }
    get year() {
        return this.getNumberAttribute('year');
    }
    set year(value) {
        this._year = value;
    }
    resetYear() {
        this._year = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get yearInput() {
        return this._year;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueDateValueOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueDateValueOutputReference;
_h = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueDateValueOutputReference[_h] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueDateValueOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueTimeValueToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        hours: cdktf.numberToTerraform(struct.hours),
        minutes: cdktf.numberToTerraform(struct.minutes),
        nanos: cdktf.numberToTerraform(struct.nanos),
        seconds: cdktf.numberToTerraform(struct.seconds),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueTimeValueToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueTimeValueToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueTimeValueToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        hours: {
            value: cdktf.numberToHclTerraform(struct.hours),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        minutes: {
            value: cdktf.numberToHclTerraform(struct.minutes),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        nanos: {
            value: cdktf.numberToHclTerraform(struct.nanos),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        seconds: {
            value: cdktf.numberToHclTerraform(struct.seconds),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueTimeValueToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueTimeValueToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueTimeValueOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hours !== undefined) {
            hasAnyValues = true;
            internalValueResult.hours = this._hours;
        }
        if (this._minutes !== undefined) {
            hasAnyValues = true;
            internalValueResult.minutes = this._minutes;
        }
        if (this._nanos !== undefined) {
            hasAnyValues = true;
            internalValueResult.nanos = this._nanos;
        }
        if (this._seconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.seconds = this._seconds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hours = undefined;
            this._minutes = undefined;
            this._nanos = undefined;
            this._seconds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hours = value.hours;
            this._minutes = value.minutes;
            this._nanos = value.nanos;
            this._seconds = value.seconds;
        }
    }
    get hours() {
        return this.getNumberAttribute('hours');
    }
    set hours(value) {
        this._hours = value;
    }
    resetHours() {
        this._hours = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hoursInput() {
        return this._hours;
    }
    get minutes() {
        return this.getNumberAttribute('minutes');
    }
    set minutes(value) {
        this._minutes = value;
    }
    resetMinutes() {
        this._minutes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minutesInput() {
        return this._minutes;
    }
    get nanos() {
        return this.getNumberAttribute('nanos');
    }
    set nanos(value) {
        this._nanos = value;
    }
    resetNanos() {
        this._nanos = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nanosInput() {
        return this._nanos;
    }
    get seconds() {
        return this.getNumberAttribute('seconds');
    }
    set seconds(value) {
        this._seconds = value;
    }
    resetSeconds() {
        this._seconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secondsInput() {
        return this._seconds;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueTimeValueOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueTimeValueOutputReference;
_j = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueTimeValueOutputReference[_j] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueTimeValueOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        boolean_value: cdktf.booleanToTerraform(struct.booleanValue),
        day_of_week_value: cdktf.stringToTerraform(struct.dayOfWeekValue),
        float_value: cdktf.numberToTerraform(struct.floatValue),
        integer_value: cdktf.stringToTerraform(struct.integerValue),
        string_value: cdktf.stringToTerraform(struct.stringValue),
        timestamp_value: cdktf.stringToTerraform(struct.timestampValue),
        date_value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueDateValueToTerraform(struct.dateValue),
        time_value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueTimeValueToTerraform(struct.timeValue),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        boolean_value: {
            value: cdktf.booleanToHclTerraform(struct.booleanValue),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        day_of_week_value: {
            value: cdktf.stringToHclTerraform(struct.dayOfWeekValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        float_value: {
            value: cdktf.numberToHclTerraform(struct.floatValue),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        integer_value: {
            value: cdktf.stringToHclTerraform(struct.integerValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        string_value: {
            value: cdktf.stringToHclTerraform(struct.stringValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        timestamp_value: {
            value: cdktf.stringToHclTerraform(struct.timestampValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        date_value: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueDateValueToHclTerraform(struct.dateValue),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueDateValueList",
        },
        time_value: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueTimeValueToHclTerraform(struct.timeValue),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueTimeValueList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // date_value - computed: false, optional: true, required: false
        this._dateValue = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueDateValueOutputReference(this, "date_value");
        // time_value - computed: false, optional: true, required: false
        this._timeValue = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueTimeValueOutputReference(this, "time_value");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._booleanValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.booleanValue = this._booleanValue;
        }
        if (this._dayOfWeekValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dayOfWeekValue = this._dayOfWeekValue;
        }
        if (this._floatValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.floatValue = this._floatValue;
        }
        if (this._integerValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.integerValue = this._integerValue;
        }
        if (this._stringValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.stringValue = this._stringValue;
        }
        if (this._timestampValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.timestampValue = this._timestampValue;
        }
        if (this._dateValue?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dateValue = this._dateValue?.internalValue;
        }
        if (this._timeValue?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.timeValue = this._timeValue?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._booleanValue = undefined;
            this._dayOfWeekValue = undefined;
            this._floatValue = undefined;
            this._integerValue = undefined;
            this._stringValue = undefined;
            this._timestampValue = undefined;
            this._dateValue.internalValue = undefined;
            this._timeValue.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._booleanValue = value.booleanValue;
            this._dayOfWeekValue = value.dayOfWeekValue;
            this._floatValue = value.floatValue;
            this._integerValue = value.integerValue;
            this._stringValue = value.stringValue;
            this._timestampValue = value.timestampValue;
            this._dateValue.internalValue = value.dateValue;
            this._timeValue.internalValue = value.timeValue;
        }
    }
    get booleanValue() {
        return this.getBooleanAttribute('boolean_value');
    }
    set booleanValue(value) {
        this._booleanValue = value;
    }
    resetBooleanValue() {
        this._booleanValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get booleanValueInput() {
        return this._booleanValue;
    }
    get dayOfWeekValue() {
        return this.getStringAttribute('day_of_week_value');
    }
    set dayOfWeekValue(value) {
        this._dayOfWeekValue = value;
    }
    resetDayOfWeekValue() {
        this._dayOfWeekValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dayOfWeekValueInput() {
        return this._dayOfWeekValue;
    }
    get floatValue() {
        return this.getNumberAttribute('float_value');
    }
    set floatValue(value) {
        this._floatValue = value;
    }
    resetFloatValue() {
        this._floatValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get floatValueInput() {
        return this._floatValue;
    }
    get integerValue() {
        return this.getStringAttribute('integer_value');
    }
    set integerValue(value) {
        this._integerValue = value;
    }
    resetIntegerValue() {
        this._integerValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get integerValueInput() {
        return this._integerValue;
    }
    get stringValue() {
        return this.getStringAttribute('string_value');
    }
    set stringValue(value) {
        this._stringValue = value;
    }
    resetStringValue() {
        this._stringValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stringValueInput() {
        return this._stringValue;
    }
    get timestampValue() {
        return this.getStringAttribute('timestamp_value');
    }
    set timestampValue(value) {
        this._timestampValue = value;
    }
    resetTimestampValue() {
        this._timestampValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timestampValueInput() {
        return this._timestampValue;
    }
    get dateValue() {
        return this._dateValue;
    }
    putDateValue(value) {
        this._dateValue.internalValue = value;
    }
    resetDateValue() {
        this._dateValue.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dateValueInput() {
        return this._dateValue.internalValue;
    }
    get timeValue() {
        return this._timeValue;
    }
    putTimeValue(value) {
        this._timeValue.internalValue = value;
    }
    resetTimeValue() {
        this._timeValue.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeValueInput() {
        return this._timeValue.internalValue;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueOutputReference;
_k = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueOutputReference[_k] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxToTerraform(struct.max),
        min: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinToTerraform(struct.min),
        replacement_value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueToTerraform(struct.replacementValue),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        max: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxToHclTerraform(struct.max),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxList",
        },
        min: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinToHclTerraform(struct.min),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinList",
        },
        replacement_value: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueToHclTerraform(struct.replacementValue),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // max - computed: false, optional: true, required: false
        this._max = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxOutputReference(this, "max");
        // min - computed: false, optional: true, required: false
        this._min = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinOutputReference(this, "min");
        // replacement_value - computed: false, optional: false, required: true
        this._replacementValue = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueOutputReference(this, "replacement_value");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._max?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.max = this._max?.internalValue;
        }
        if (this._min?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.min = this._min?.internalValue;
        }
        if (this._replacementValue?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.replacementValue = this._replacementValue?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._max.internalValue = undefined;
            this._min.internalValue = undefined;
            this._replacementValue.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._max.internalValue = value.max;
            this._min.internalValue = value.min;
            this._replacementValue.internalValue = value.replacementValue;
        }
    }
    get max() {
        return this._max;
    }
    putMax(value) {
        this._max.internalValue = value;
    }
    resetMax() {
        this._max.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxInput() {
        return this._max.internalValue;
    }
    get min() {
        return this._min;
    }
    putMin(value) {
        this._min.internalValue = value;
    }
    resetMin() {
        this._min.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minInput() {
        return this._min.internalValue;
    }
    get replacementValue() {
        return this._replacementValue;
    }
    putReplacementValue(value) {
        this._replacementValue.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get replacementValueInput() {
        return this._replacementValue.internalValue;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsOutputReference;
_l = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsOutputReference[_l] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsOutputReference", version: "14.13.1" };
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsList = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsList;
_m = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsList[_m] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsList", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        buckets: cdktf.listMapper(dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsToTerraform, true)(struct.buckets),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        buckets: {
            value: cdktf.listMapperHcl(dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsToHclTerraform, true)(struct.buckets),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // buckets - computed: false, optional: true, required: false
        this._buckets = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsList(this, "buckets", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._buckets?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.buckets = this._buckets?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._buckets.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._buckets.internalValue = value.buckets;
        }
    }
    get buckets() {
        return this._buckets;
    }
    putBuckets(value) {
        this._buckets.internalValue = value;
    }
    resetBuckets() {
        this._buckets.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bucketsInput() {
        return this._buckets.internalValue;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigOutputReference;
_o = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigOutputReference[_o] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCharacterMaskConfigCharactersToIgnoreToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        characters_to_skip: cdktf.stringToTerraform(struct.charactersToSkip),
        common_characters_to_ignore: cdktf.stringToTerraform(struct.commonCharactersToIgnore),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCharacterMaskConfigCharactersToIgnoreToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCharacterMaskConfigCharactersToIgnoreToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCharacterMaskConfigCharactersToIgnoreToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        characters_to_skip: {
            value: cdktf.stringToHclTerraform(struct.charactersToSkip),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        common_characters_to_ignore: {
            value: cdktf.stringToHclTerraform(struct.commonCharactersToIgnore),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCharacterMaskConfigCharactersToIgnoreToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCharacterMaskConfigCharactersToIgnoreToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCharacterMaskConfigCharactersToIgnoreOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._charactersToSkip !== undefined) {
            hasAnyValues = true;
            internalValueResult.charactersToSkip = this._charactersToSkip;
        }
        if (this._commonCharactersToIgnore !== undefined) {
            hasAnyValues = true;
            internalValueResult.commonCharactersToIgnore = this._commonCharactersToIgnore;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._charactersToSkip = undefined;
            this._commonCharactersToIgnore = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._charactersToSkip = value.charactersToSkip;
            this._commonCharactersToIgnore = value.commonCharactersToIgnore;
        }
    }
    get charactersToSkip() {
        return this.getStringAttribute('characters_to_skip');
    }
    set charactersToSkip(value) {
        this._charactersToSkip = value;
    }
    resetCharactersToSkip() {
        this._charactersToSkip = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get charactersToSkipInput() {
        return this._charactersToSkip;
    }
    get commonCharactersToIgnore() {
        return this.getStringAttribute('common_characters_to_ignore');
    }
    set commonCharactersToIgnore(value) {
        this._commonCharactersToIgnore = value;
    }
    resetCommonCharactersToIgnore() {
        this._commonCharactersToIgnore = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get commonCharactersToIgnoreInput() {
        return this._commonCharactersToIgnore;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCharacterMaskConfigCharactersToIgnoreOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCharacterMaskConfigCharactersToIgnoreOutputReference;
_p = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCharacterMaskConfigCharactersToIgnoreOutputReference[_p] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCharacterMaskConfigCharactersToIgnoreOutputReference", version: "14.13.1" };
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCharacterMaskConfigCharactersToIgnoreList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCharacterMaskConfigCharactersToIgnoreOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCharacterMaskConfigCharactersToIgnoreList = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCharacterMaskConfigCharactersToIgnoreList;
_q = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCharacterMaskConfigCharactersToIgnoreList[_q] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCharacterMaskConfigCharactersToIgnoreList", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCharacterMaskConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        masking_character: cdktf.stringToTerraform(struct.maskingCharacter),
        number_to_mask: cdktf.numberToTerraform(struct.numberToMask),
        reverse_order: cdktf.booleanToTerraform(struct.reverseOrder),
        characters_to_ignore: cdktf.listMapper(dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCharacterMaskConfigCharactersToIgnoreToTerraform, true)(struct.charactersToIgnore),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCharacterMaskConfigToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCharacterMaskConfigToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCharacterMaskConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        masking_character: {
            value: cdktf.stringToHclTerraform(struct.maskingCharacter),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        number_to_mask: {
            value: cdktf.numberToHclTerraform(struct.numberToMask),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        reverse_order: {
            value: cdktf.booleanToHclTerraform(struct.reverseOrder),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        characters_to_ignore: {
            value: cdktf.listMapperHcl(dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCharacterMaskConfigCharactersToIgnoreToHclTerraform, true)(struct.charactersToIgnore),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCharacterMaskConfigCharactersToIgnoreList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCharacterMaskConfigToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCharacterMaskConfigToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCharacterMaskConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // characters_to_ignore - computed: false, optional: true, required: false
        this._charactersToIgnore = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCharacterMaskConfigCharactersToIgnoreList(this, "characters_to_ignore", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._maskingCharacter !== undefined) {
            hasAnyValues = true;
            internalValueResult.maskingCharacter = this._maskingCharacter;
        }
        if (this._numberToMask !== undefined) {
            hasAnyValues = true;
            internalValueResult.numberToMask = this._numberToMask;
        }
        if (this._reverseOrder !== undefined) {
            hasAnyValues = true;
            internalValueResult.reverseOrder = this._reverseOrder;
        }
        if (this._charactersToIgnore?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.charactersToIgnore = this._charactersToIgnore?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._maskingCharacter = undefined;
            this._numberToMask = undefined;
            this._reverseOrder = undefined;
            this._charactersToIgnore.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._maskingCharacter = value.maskingCharacter;
            this._numberToMask = value.numberToMask;
            this._reverseOrder = value.reverseOrder;
            this._charactersToIgnore.internalValue = value.charactersToIgnore;
        }
    }
    get maskingCharacter() {
        return this.getStringAttribute('masking_character');
    }
    set maskingCharacter(value) {
        this._maskingCharacter = value;
    }
    resetMaskingCharacter() {
        this._maskingCharacter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maskingCharacterInput() {
        return this._maskingCharacter;
    }
    get numberToMask() {
        return this.getNumberAttribute('number_to_mask');
    }
    set numberToMask(value) {
        this._numberToMask = value;
    }
    resetNumberToMask() {
        this._numberToMask = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numberToMaskInput() {
        return this._numberToMask;
    }
    get reverseOrder() {
        return this.getBooleanAttribute('reverse_order');
    }
    set reverseOrder(value) {
        this._reverseOrder = value;
    }
    resetReverseOrder() {
        this._reverseOrder = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get reverseOrderInput() {
        return this._reverseOrder;
    }
    get charactersToIgnore() {
        return this._charactersToIgnore;
    }
    putCharactersToIgnore(value) {
        this._charactersToIgnore.internalValue = value;
    }
    resetCharactersToIgnore() {
        this._charactersToIgnore.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get charactersToIgnoreInput() {
        return this._charactersToIgnore.internalValue;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCharacterMaskConfigOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCharacterMaskConfigOutputReference;
_r = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCharacterMaskConfigOutputReference[_r] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCharacterMaskConfigOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigContextToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigContextToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigContextToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigContextToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigContextToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigContextToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigContextOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._name = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._name = value.name;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigContextOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigContextOutputReference;
_s = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigContextOutputReference[_s] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigContextOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyKmsWrappedToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        crypto_key_name: cdktf.stringToTerraform(struct.cryptoKeyName),
        wrapped_key: cdktf.stringToTerraform(struct.wrappedKey),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyKmsWrappedToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyKmsWrappedToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyKmsWrappedToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        crypto_key_name: {
            value: cdktf.stringToHclTerraform(struct.cryptoKeyName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        wrapped_key: {
            value: cdktf.stringToHclTerraform(struct.wrappedKey),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyKmsWrappedToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyKmsWrappedToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyKmsWrappedOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cryptoKeyName !== undefined) {
            hasAnyValues = true;
            internalValueResult.cryptoKeyName = this._cryptoKeyName;
        }
        if (this._wrappedKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.wrappedKey = this._wrappedKey;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cryptoKeyName = undefined;
            this._wrappedKey = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cryptoKeyName = value.cryptoKeyName;
            this._wrappedKey = value.wrappedKey;
        }
    }
    get cryptoKeyName() {
        return this.getStringAttribute('crypto_key_name');
    }
    set cryptoKeyName(value) {
        this._cryptoKeyName = value;
    }
    // Temporarily expose input value. Use with caution.
    get cryptoKeyNameInput() {
        return this._cryptoKeyName;
    }
    get wrappedKey() {
        return this.getStringAttribute('wrapped_key');
    }
    set wrappedKey(value) {
        this._wrappedKey = value;
    }
    // Temporarily expose input value. Use with caution.
    get wrappedKeyInput() {
        return this._wrappedKey;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyKmsWrappedOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyKmsWrappedOutputReference;
_t = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyKmsWrappedOutputReference[_t] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyKmsWrappedOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyTransientToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyTransientToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyTransientToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyTransientToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyTransientToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyTransientToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyTransientOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._name = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._name = value.name;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyTransientOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyTransientOutputReference;
_u = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyTransientOutputReference[_u] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyTransientOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyUnwrappedToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyUnwrappedToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyUnwrappedToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyUnwrappedToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        key: {
            value: cdktf.stringToHclTerraform(struct.key),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyUnwrappedToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyUnwrappedToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyUnwrappedOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._key = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._key = value.key;
        }
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyUnwrappedOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyUnwrappedOutputReference;
_v = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyUnwrappedOutputReference[_v] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyUnwrappedOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        kms_wrapped: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyKmsWrappedToTerraform(struct.kmsWrapped),
        transient: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyTransientToTerraform(struct.transient),
        unwrapped: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyUnwrappedToTerraform(struct.unwrapped),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        kms_wrapped: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyKmsWrappedToHclTerraform(struct.kmsWrapped),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyKmsWrappedList",
        },
        transient: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyTransientToHclTerraform(struct.transient),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyTransientList",
        },
        unwrapped: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyUnwrappedToHclTerraform(struct.unwrapped),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyUnwrappedList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // kms_wrapped - computed: false, optional: true, required: false
        this._kmsWrapped = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyKmsWrappedOutputReference(this, "kms_wrapped");
        // transient - computed: false, optional: true, required: false
        this._transient = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyTransientOutputReference(this, "transient");
        // unwrapped - computed: false, optional: true, required: false
        this._unwrapped = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyUnwrappedOutputReference(this, "unwrapped");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._kmsWrapped?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsWrapped = this._kmsWrapped?.internalValue;
        }
        if (this._transient?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.transient = this._transient?.internalValue;
        }
        if (this._unwrapped?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.unwrapped = this._unwrapped?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._kmsWrapped.internalValue = undefined;
            this._transient.internalValue = undefined;
            this._unwrapped.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._kmsWrapped.internalValue = value.kmsWrapped;
            this._transient.internalValue = value.transient;
            this._unwrapped.internalValue = value.unwrapped;
        }
    }
    get kmsWrapped() {
        return this._kmsWrapped;
    }
    putKmsWrapped(value) {
        this._kmsWrapped.internalValue = value;
    }
    resetKmsWrapped() {
        this._kmsWrapped.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsWrappedInput() {
        return this._kmsWrapped.internalValue;
    }
    get transient() {
        return this._transient;
    }
    putTransient(value) {
        this._transient.internalValue = value;
    }
    resetTransient() {
        this._transient.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get transientInput() {
        return this._transient.internalValue;
    }
    get unwrapped() {
        return this._unwrapped;
    }
    putUnwrapped(value) {
        this._unwrapped.internalValue = value;
    }
    resetUnwrapped() {
        this._unwrapped.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get unwrappedInput() {
        return this._unwrapped.internalValue;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyOutputReference;
_w = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyOutputReference[_w] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigSurrogateInfoTypeSensitivityScoreToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        score: cdktf.stringToTerraform(struct.score),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigSurrogateInfoTypeSensitivityScoreToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigSurrogateInfoTypeSensitivityScoreToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigSurrogateInfoTypeSensitivityScoreToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        score: {
            value: cdktf.stringToHclTerraform(struct.score),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigSurrogateInfoTypeSensitivityScoreToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigSurrogateInfoTypeSensitivityScoreToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigSurrogateInfoTypeSensitivityScoreOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._score !== undefined) {
            hasAnyValues = true;
            internalValueResult.score = this._score;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._score = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._score = value.score;
        }
    }
    get score() {
        return this.getStringAttribute('score');
    }
    set score(value) {
        this._score = value;
    }
    // Temporarily expose input value. Use with caution.
    get scoreInput() {
        return this._score;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigSurrogateInfoTypeSensitivityScoreOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigSurrogateInfoTypeSensitivityScoreOutputReference;
_x = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigSurrogateInfoTypeSensitivityScoreOutputReference[_x] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigSurrogateInfoTypeSensitivityScoreOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigSurrogateInfoTypeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        version: cdktf.stringToTerraform(struct.version),
        sensitivity_score: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigSurrogateInfoTypeSensitivityScoreToTerraform(struct.sensitivityScore),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigSurrogateInfoTypeToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigSurrogateInfoTypeToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigSurrogateInfoTypeToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        version: {
            value: cdktf.stringToHclTerraform(struct.version),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sensitivity_score: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigSurrogateInfoTypeSensitivityScoreToHclTerraform(struct.sensitivityScore),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigSurrogateInfoTypeSensitivityScoreList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigSurrogateInfoTypeToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigSurrogateInfoTypeToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigSurrogateInfoTypeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // sensitivity_score - computed: false, optional: true, required: false
        this._sensitivityScore = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigSurrogateInfoTypeSensitivityScoreOutputReference(this, "sensitivity_score");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._version !== undefined) {
            hasAnyValues = true;
            internalValueResult.version = this._version;
        }
        if (this._sensitivityScore?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sensitivityScore = this._sensitivityScore?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._name = undefined;
            this._version = undefined;
            this._sensitivityScore.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._name = value.name;
            this._version = value.version;
            this._sensitivityScore.internalValue = value.sensitivityScore;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get version() {
        return this.getStringAttribute('version');
    }
    set version(value) {
        this._version = value;
    }
    resetVersion() {
        this._version = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get versionInput() {
        return this._version;
    }
    get sensitivityScore() {
        return this._sensitivityScore;
    }
    putSensitivityScore(value) {
        this._sensitivityScore.internalValue = value;
    }
    resetSensitivityScore() {
        this._sensitivityScore.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sensitivityScoreInput() {
        return this._sensitivityScore.internalValue;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigSurrogateInfoTypeOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigSurrogateInfoTypeOutputReference;
_y = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigSurrogateInfoTypeOutputReference[_y] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigSurrogateInfoTypeOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        context: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigContextToTerraform(struct.context),
        crypto_key: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyToTerraform(struct.cryptoKey),
        surrogate_info_type: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigSurrogateInfoTypeToTerraform(struct.surrogateInfoType),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        context: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigContextToHclTerraform(struct.context),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigContextList",
        },
        crypto_key: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyToHclTerraform(struct.cryptoKey),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyList",
        },
        surrogate_info_type: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigSurrogateInfoTypeToHclTerraform(struct.surrogateInfoType),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigSurrogateInfoTypeList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // context - computed: false, optional: true, required: false
        this._context = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigContextOutputReference(this, "context");
        // crypto_key - computed: false, optional: true, required: false
        this._cryptoKey = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyOutputReference(this, "crypto_key");
        // surrogate_info_type - computed: false, optional: true, required: false
        this._surrogateInfoType = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigSurrogateInfoTypeOutputReference(this, "surrogate_info_type");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._context?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.context = this._context?.internalValue;
        }
        if (this._cryptoKey?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cryptoKey = this._cryptoKey?.internalValue;
        }
        if (this._surrogateInfoType?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.surrogateInfoType = this._surrogateInfoType?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._context.internalValue = undefined;
            this._cryptoKey.internalValue = undefined;
            this._surrogateInfoType.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._context.internalValue = value.context;
            this._cryptoKey.internalValue = value.cryptoKey;
            this._surrogateInfoType.internalValue = value.surrogateInfoType;
        }
    }
    get context() {
        return this._context;
    }
    putContext(value) {
        this._context.internalValue = value;
    }
    resetContext() {
        this._context.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get contextInput() {
        return this._context.internalValue;
    }
    get cryptoKey() {
        return this._cryptoKey;
    }
    putCryptoKey(value) {
        this._cryptoKey.internalValue = value;
    }
    resetCryptoKey() {
        this._cryptoKey.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cryptoKeyInput() {
        return this._cryptoKey.internalValue;
    }
    get surrogateInfoType() {
        return this._surrogateInfoType;
    }
    putSurrogateInfoType(value) {
        this._surrogateInfoType.internalValue = value;
    }
    resetSurrogateInfoType() {
        this._surrogateInfoType.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get surrogateInfoTypeInput() {
        return this._surrogateInfoType.internalValue;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigOutputReference;
_z = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigOutputReference[_z] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyKmsWrappedToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        crypto_key_name: cdktf.stringToTerraform(struct.cryptoKeyName),
        wrapped_key: cdktf.stringToTerraform(struct.wrappedKey),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyKmsWrappedToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyKmsWrappedToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyKmsWrappedToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        crypto_key_name: {
            value: cdktf.stringToHclTerraform(struct.cryptoKeyName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        wrapped_key: {
            value: cdktf.stringToHclTerraform(struct.wrappedKey),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyKmsWrappedToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyKmsWrappedToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyKmsWrappedOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cryptoKeyName !== undefined) {
            hasAnyValues = true;
            internalValueResult.cryptoKeyName = this._cryptoKeyName;
        }
        if (this._wrappedKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.wrappedKey = this._wrappedKey;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cryptoKeyName = undefined;
            this._wrappedKey = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cryptoKeyName = value.cryptoKeyName;
            this._wrappedKey = value.wrappedKey;
        }
    }
    get cryptoKeyName() {
        return this.getStringAttribute('crypto_key_name');
    }
    set cryptoKeyName(value) {
        this._cryptoKeyName = value;
    }
    // Temporarily expose input value. Use with caution.
    get cryptoKeyNameInput() {
        return this._cryptoKeyName;
    }
    get wrappedKey() {
        return this.getStringAttribute('wrapped_key');
    }
    set wrappedKey(value) {
        this._wrappedKey = value;
    }
    // Temporarily expose input value. Use with caution.
    get wrappedKeyInput() {
        return this._wrappedKey;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyKmsWrappedOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyKmsWrappedOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyKmsWrappedOutputReference[_0] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyKmsWrappedOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyTransientToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyTransientToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyTransientToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyTransientToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyTransientToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyTransientToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyTransientOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._name = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._name = value.name;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyTransientOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyTransientOutputReference;
_1 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyTransientOutputReference[_1] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyTransientOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyUnwrappedToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyUnwrappedToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyUnwrappedToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyUnwrappedToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        key: {
            value: cdktf.stringToHclTerraform(struct.key),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyUnwrappedToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyUnwrappedToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyUnwrappedOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._key = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._key = value.key;
        }
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyUnwrappedOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyUnwrappedOutputReference;
_2 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyUnwrappedOutputReference[_2] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyUnwrappedOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        kms_wrapped: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyKmsWrappedToTerraform(struct.kmsWrapped),
        transient: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyTransientToTerraform(struct.transient),
        unwrapped: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyUnwrappedToTerraform(struct.unwrapped),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        kms_wrapped: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyKmsWrappedToHclTerraform(struct.kmsWrapped),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyKmsWrappedList",
        },
        transient: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyTransientToHclTerraform(struct.transient),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyTransientList",
        },
        unwrapped: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyUnwrappedToHclTerraform(struct.unwrapped),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyUnwrappedList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // kms_wrapped - computed: false, optional: true, required: false
        this._kmsWrapped = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyKmsWrappedOutputReference(this, "kms_wrapped");
        // transient - computed: false, optional: true, required: false
        this._transient = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyTransientOutputReference(this, "transient");
        // unwrapped - computed: false, optional: true, required: false
        this._unwrapped = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyUnwrappedOutputReference(this, "unwrapped");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._kmsWrapped?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsWrapped = this._kmsWrapped?.internalValue;
        }
        if (this._transient?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.transient = this._transient?.internalValue;
        }
        if (this._unwrapped?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.unwrapped = this._unwrapped?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._kmsWrapped.internalValue = undefined;
            this._transient.internalValue = undefined;
            this._unwrapped.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._kmsWrapped.internalValue = value.kmsWrapped;
            this._transient.internalValue = value.transient;
            this._unwrapped.internalValue = value.unwrapped;
        }
    }
    get kmsWrapped() {
        return this._kmsWrapped;
    }
    putKmsWrapped(value) {
        this._kmsWrapped.internalValue = value;
    }
    resetKmsWrapped() {
        this._kmsWrapped.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsWrappedInput() {
        return this._kmsWrapped.internalValue;
    }
    get transient() {
        return this._transient;
    }
    putTransient(value) {
        this._transient.internalValue = value;
    }
    resetTransient() {
        this._transient.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get transientInput() {
        return this._transient.internalValue;
    }
    get unwrapped() {
        return this._unwrapped;
    }
    putUnwrapped(value) {
        this._unwrapped.internalValue = value;
    }
    resetUnwrapped() {
        this._unwrapped.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get unwrappedInput() {
        return this._unwrapped.internalValue;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyOutputReference;
_3 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyOutputReference[_3] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        crypto_key: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyToTerraform(struct.cryptoKey),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        crypto_key: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyToHclTerraform(struct.cryptoKey),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // crypto_key - computed: false, optional: true, required: false
        this._cryptoKey = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyOutputReference(this, "crypto_key");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cryptoKey?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cryptoKey = this._cryptoKey?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cryptoKey.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cryptoKey.internalValue = value.cryptoKey;
        }
    }
    get cryptoKey() {
        return this._cryptoKey;
    }
    putCryptoKey(value) {
        this._cryptoKey.internalValue = value;
    }
    resetCryptoKey() {
        this._cryptoKey.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cryptoKeyInput() {
        return this._cryptoKey.internalValue;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigOutputReference;
_4 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigOutputReference[_4] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigContextToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigContextToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigContextToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigContextToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigContextToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigContextToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigContextOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._name = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._name = value.name;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigContextOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigContextOutputReference;
_5 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigContextOutputReference[_5] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigContextOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyKmsWrappedToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        crypto_key_name: cdktf.stringToTerraform(struct.cryptoKeyName),
        wrapped_key: cdktf.stringToTerraform(struct.wrappedKey),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyKmsWrappedToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyKmsWrappedToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyKmsWrappedToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        crypto_key_name: {
            value: cdktf.stringToHclTerraform(struct.cryptoKeyName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        wrapped_key: {
            value: cdktf.stringToHclTerraform(struct.wrappedKey),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyKmsWrappedToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyKmsWrappedToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyKmsWrappedOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cryptoKeyName !== undefined) {
            hasAnyValues = true;
            internalValueResult.cryptoKeyName = this._cryptoKeyName;
        }
        if (this._wrappedKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.wrappedKey = this._wrappedKey;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cryptoKeyName = undefined;
            this._wrappedKey = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cryptoKeyName = value.cryptoKeyName;
            this._wrappedKey = value.wrappedKey;
        }
    }
    get cryptoKeyName() {
        return this.getStringAttribute('crypto_key_name');
    }
    set cryptoKeyName(value) {
        this._cryptoKeyName = value;
    }
    // Temporarily expose input value. Use with caution.
    get cryptoKeyNameInput() {
        return this._cryptoKeyName;
    }
    get wrappedKey() {
        return this.getStringAttribute('wrapped_key');
    }
    set wrappedKey(value) {
        this._wrappedKey = value;
    }
    // Temporarily expose input value. Use with caution.
    get wrappedKeyInput() {
        return this._wrappedKey;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyKmsWrappedOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyKmsWrappedOutputReference;
_6 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyKmsWrappedOutputReference[_6] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyKmsWrappedOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyTransientToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyTransientToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyTransientToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyTransientToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyTransientToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyTransientToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyTransientOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._name = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._name = value.name;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyTransientOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyTransientOutputReference;
_7 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyTransientOutputReference[_7] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyTransientOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyUnwrappedToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyUnwrappedToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyUnwrappedToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyUnwrappedToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        key: {
            value: cdktf.stringToHclTerraform(struct.key),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyUnwrappedToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyUnwrappedToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyUnwrappedOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._key = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._key = value.key;
        }
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyUnwrappedOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyUnwrappedOutputReference;
_8 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyUnwrappedOutputReference[_8] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyUnwrappedOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        kms_wrapped: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyKmsWrappedToTerraform(struct.kmsWrapped),
        transient: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyTransientToTerraform(struct.transient),
        unwrapped: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyUnwrappedToTerraform(struct.unwrapped),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        kms_wrapped: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyKmsWrappedToHclTerraform(struct.kmsWrapped),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyKmsWrappedList",
        },
        transient: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyTransientToHclTerraform(struct.transient),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyTransientList",
        },
        unwrapped: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyUnwrappedToHclTerraform(struct.unwrapped),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyUnwrappedList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // kms_wrapped - computed: false, optional: true, required: false
        this._kmsWrapped = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyKmsWrappedOutputReference(this, "kms_wrapped");
        // transient - computed: false, optional: true, required: false
        this._transient = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyTransientOutputReference(this, "transient");
        // unwrapped - computed: false, optional: true, required: false
        this._unwrapped = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyUnwrappedOutputReference(this, "unwrapped");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._kmsWrapped?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsWrapped = this._kmsWrapped?.internalValue;
        }
        if (this._transient?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.transient = this._transient?.internalValue;
        }
        if (this._unwrapped?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.unwrapped = this._unwrapped?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._kmsWrapped.internalValue = undefined;
            this._transient.internalValue = undefined;
            this._unwrapped.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._kmsWrapped.internalValue = value.kmsWrapped;
            this._transient.internalValue = value.transient;
            this._unwrapped.internalValue = value.unwrapped;
        }
    }
    get kmsWrapped() {
        return this._kmsWrapped;
    }
    putKmsWrapped(value) {
        this._kmsWrapped.internalValue = value;
    }
    resetKmsWrapped() {
        this._kmsWrapped.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsWrappedInput() {
        return this._kmsWrapped.internalValue;
    }
    get transient() {
        return this._transient;
    }
    putTransient(value) {
        this._transient.internalValue = value;
    }
    resetTransient() {
        this._transient.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get transientInput() {
        return this._transient.internalValue;
    }
    get unwrapped() {
        return this._unwrapped;
    }
    putUnwrapped(value) {
        this._unwrapped.internalValue = value;
    }
    resetUnwrapped() {
        this._unwrapped.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get unwrappedInput() {
        return this._unwrapped.internalValue;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyOutputReference;
_9 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyOutputReference[_9] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoTypeSensitivityScoreToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        score: cdktf.stringToTerraform(struct.score),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoTypeSensitivityScoreToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoTypeSensitivityScoreToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoTypeSensitivityScoreToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        score: {
            value: cdktf.stringToHclTerraform(struct.score),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoTypeSensitivityScoreToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoTypeSensitivityScoreToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoTypeSensitivityScoreOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._score !== undefined) {
            hasAnyValues = true;
            internalValueResult.score = this._score;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._score = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._score = value.score;
        }
    }
    get score() {
        return this.getStringAttribute('score');
    }
    set score(value) {
        this._score = value;
    }
    // Temporarily expose input value. Use with caution.
    get scoreInput() {
        return this._score;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoTypeSensitivityScoreOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoTypeSensitivityScoreOutputReference;
_10 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoTypeSensitivityScoreOutputReference[_10] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoTypeSensitivityScoreOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoTypeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        version: cdktf.stringToTerraform(struct.version),
        sensitivity_score: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoTypeSensitivityScoreToTerraform(struct.sensitivityScore),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoTypeToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoTypeToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoTypeToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        version: {
            value: cdktf.stringToHclTerraform(struct.version),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sensitivity_score: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoTypeSensitivityScoreToHclTerraform(struct.sensitivityScore),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoTypeSensitivityScoreList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoTypeToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoTypeToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoTypeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // sensitivity_score - computed: false, optional: true, required: false
        this._sensitivityScore = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoTypeSensitivityScoreOutputReference(this, "sensitivity_score");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._version !== undefined) {
            hasAnyValues = true;
            internalValueResult.version = this._version;
        }
        if (this._sensitivityScore?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sensitivityScore = this._sensitivityScore?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._name = undefined;
            this._version = undefined;
            this._sensitivityScore.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._name = value.name;
            this._version = value.version;
            this._sensitivityScore.internalValue = value.sensitivityScore;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get version() {
        return this.getStringAttribute('version');
    }
    set version(value) {
        this._version = value;
    }
    resetVersion() {
        this._version = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get versionInput() {
        return this._version;
    }
    get sensitivityScore() {
        return this._sensitivityScore;
    }
    putSensitivityScore(value) {
        this._sensitivityScore.internalValue = value;
    }
    resetSensitivityScore() {
        this._sensitivityScore.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sensitivityScoreInput() {
        return this._sensitivityScore.internalValue;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoTypeOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoTypeOutputReference;
_11 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoTypeOutputReference[_11] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoTypeOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        common_alphabet: cdktf.stringToTerraform(struct.commonAlphabet),
        custom_alphabet: cdktf.stringToTerraform(struct.customAlphabet),
        radix: cdktf.numberToTerraform(struct.radix),
        context: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigContextToTerraform(struct.context),
        crypto_key: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyToTerraform(struct.cryptoKey),
        surrogate_info_type: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoTypeToTerraform(struct.surrogateInfoType),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        common_alphabet: {
            value: cdktf.stringToHclTerraform(struct.commonAlphabet),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        custom_alphabet: {
            value: cdktf.stringToHclTerraform(struct.customAlphabet),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        radix: {
            value: cdktf.numberToHclTerraform(struct.radix),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        context: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigContextToHclTerraform(struct.context),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigContextList",
        },
        crypto_key: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyToHclTerraform(struct.cryptoKey),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyList",
        },
        surrogate_info_type: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoTypeToHclTerraform(struct.surrogateInfoType),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoTypeList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // context - computed: false, optional: true, required: false
        this._context = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigContextOutputReference(this, "context");
        // crypto_key - computed: false, optional: true, required: false
        this._cryptoKey = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyOutputReference(this, "crypto_key");
        // surrogate_info_type - computed: false, optional: true, required: false
        this._surrogateInfoType = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoTypeOutputReference(this, "surrogate_info_type");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._commonAlphabet !== undefined) {
            hasAnyValues = true;
            internalValueResult.commonAlphabet = this._commonAlphabet;
        }
        if (this._customAlphabet !== undefined) {
            hasAnyValues = true;
            internalValueResult.customAlphabet = this._customAlphabet;
        }
        if (this._radix !== undefined) {
            hasAnyValues = true;
            internalValueResult.radix = this._radix;
        }
        if (this._context?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.context = this._context?.internalValue;
        }
        if (this._cryptoKey?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cryptoKey = this._cryptoKey?.internalValue;
        }
        if (this._surrogateInfoType?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.surrogateInfoType = this._surrogateInfoType?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._commonAlphabet = undefined;
            this._customAlphabet = undefined;
            this._radix = undefined;
            this._context.internalValue = undefined;
            this._cryptoKey.internalValue = undefined;
            this._surrogateInfoType.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._commonAlphabet = value.commonAlphabet;
            this._customAlphabet = value.customAlphabet;
            this._radix = value.radix;
            this._context.internalValue = value.context;
            this._cryptoKey.internalValue = value.cryptoKey;
            this._surrogateInfoType.internalValue = value.surrogateInfoType;
        }
    }
    get commonAlphabet() {
        return this.getStringAttribute('common_alphabet');
    }
    set commonAlphabet(value) {
        this._commonAlphabet = value;
    }
    resetCommonAlphabet() {
        this._commonAlphabet = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get commonAlphabetInput() {
        return this._commonAlphabet;
    }
    get customAlphabet() {
        return this.getStringAttribute('custom_alphabet');
    }
    set customAlphabet(value) {
        this._customAlphabet = value;
    }
    resetCustomAlphabet() {
        this._customAlphabet = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customAlphabetInput() {
        return this._customAlphabet;
    }
    get radix() {
        return this.getNumberAttribute('radix');
    }
    set radix(value) {
        this._radix = value;
    }
    resetRadix() {
        this._radix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get radixInput() {
        return this._radix;
    }
    get context() {
        return this._context;
    }
    putContext(value) {
        this._context.internalValue = value;
    }
    resetContext() {
        this._context.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get contextInput() {
        return this._context.internalValue;
    }
    get cryptoKey() {
        return this._cryptoKey;
    }
    putCryptoKey(value) {
        this._cryptoKey.internalValue = value;
    }
    resetCryptoKey() {
        this._cryptoKey.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cryptoKeyInput() {
        return this._cryptoKey.internalValue;
    }
    get surrogateInfoType() {
        return this._surrogateInfoType;
    }
    putSurrogateInfoType(value) {
        this._surrogateInfoType.internalValue = value;
    }
    resetSurrogateInfoType() {
        this._surrogateInfoType.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get surrogateInfoTypeInput() {
        return this._surrogateInfoType.internalValue;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigOutputReference;
_12 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigOutputReference[_12] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigContextToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigContextToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigContextToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigContextToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigContextToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigContextToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigContextOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._name = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._name = value.name;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigContextOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigContextOutputReference;
_13 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigContextOutputReference[_13] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigContextOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyKmsWrappedToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        crypto_key_name: cdktf.stringToTerraform(struct.cryptoKeyName),
        wrapped_key: cdktf.stringToTerraform(struct.wrappedKey),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyKmsWrappedToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyKmsWrappedToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyKmsWrappedToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        crypto_key_name: {
            value: cdktf.stringToHclTerraform(struct.cryptoKeyName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        wrapped_key: {
            value: cdktf.stringToHclTerraform(struct.wrappedKey),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyKmsWrappedToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyKmsWrappedToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyKmsWrappedOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cryptoKeyName !== undefined) {
            hasAnyValues = true;
            internalValueResult.cryptoKeyName = this._cryptoKeyName;
        }
        if (this._wrappedKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.wrappedKey = this._wrappedKey;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cryptoKeyName = undefined;
            this._wrappedKey = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cryptoKeyName = value.cryptoKeyName;
            this._wrappedKey = value.wrappedKey;
        }
    }
    get cryptoKeyName() {
        return this.getStringAttribute('crypto_key_name');
    }
    set cryptoKeyName(value) {
        this._cryptoKeyName = value;
    }
    // Temporarily expose input value. Use with caution.
    get cryptoKeyNameInput() {
        return this._cryptoKeyName;
    }
    get wrappedKey() {
        return this.getStringAttribute('wrapped_key');
    }
    set wrappedKey(value) {
        this._wrappedKey = value;
    }
    // Temporarily expose input value. Use with caution.
    get wrappedKeyInput() {
        return this._wrappedKey;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyKmsWrappedOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyKmsWrappedOutputReference;
_14 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyKmsWrappedOutputReference[_14] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyKmsWrappedOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyTransientToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyTransientToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyTransientToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyTransientToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyTransientToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyTransientToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyTransientOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._name = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._name = value.name;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyTransientOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyTransientOutputReference;
_15 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyTransientOutputReference[_15] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyTransientOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyUnwrappedToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyUnwrappedToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyUnwrappedToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyUnwrappedToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        key: {
            value: cdktf.stringToHclTerraform(struct.key),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyUnwrappedToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyUnwrappedToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyUnwrappedOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._key = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._key = value.key;
        }
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyUnwrappedOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyUnwrappedOutputReference;
_16 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyUnwrappedOutputReference[_16] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyUnwrappedOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        kms_wrapped: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyKmsWrappedToTerraform(struct.kmsWrapped),
        transient: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyTransientToTerraform(struct.transient),
        unwrapped: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyUnwrappedToTerraform(struct.unwrapped),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        kms_wrapped: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyKmsWrappedToHclTerraform(struct.kmsWrapped),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyKmsWrappedList",
        },
        transient: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyTransientToHclTerraform(struct.transient),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyTransientList",
        },
        unwrapped: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyUnwrappedToHclTerraform(struct.unwrapped),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyUnwrappedList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // kms_wrapped - computed: false, optional: true, required: false
        this._kmsWrapped = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyKmsWrappedOutputReference(this, "kms_wrapped");
        // transient - computed: false, optional: true, required: false
        this._transient = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyTransientOutputReference(this, "transient");
        // unwrapped - computed: false, optional: true, required: false
        this._unwrapped = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyUnwrappedOutputReference(this, "unwrapped");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._kmsWrapped?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsWrapped = this._kmsWrapped?.internalValue;
        }
        if (this._transient?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.transient = this._transient?.internalValue;
        }
        if (this._unwrapped?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.unwrapped = this._unwrapped?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._kmsWrapped.internalValue = undefined;
            this._transient.internalValue = undefined;
            this._unwrapped.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._kmsWrapped.internalValue = value.kmsWrapped;
            this._transient.internalValue = value.transient;
            this._unwrapped.internalValue = value.unwrapped;
        }
    }
    get kmsWrapped() {
        return this._kmsWrapped;
    }
    putKmsWrapped(value) {
        this._kmsWrapped.internalValue = value;
    }
    resetKmsWrapped() {
        this._kmsWrapped.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsWrappedInput() {
        return this._kmsWrapped.internalValue;
    }
    get transient() {
        return this._transient;
    }
    putTransient(value) {
        this._transient.internalValue = value;
    }
    resetTransient() {
        this._transient.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get transientInput() {
        return this._transient.internalValue;
    }
    get unwrapped() {
        return this._unwrapped;
    }
    putUnwrapped(value) {
        this._unwrapped.internalValue = value;
    }
    resetUnwrapped() {
        this._unwrapped.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get unwrappedInput() {
        return this._unwrapped.internalValue;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyOutputReference;
_17 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyOutputReference[_17] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        lower_bound_days: cdktf.numberToTerraform(struct.lowerBoundDays),
        upper_bound_days: cdktf.numberToTerraform(struct.upperBoundDays),
        context: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigContextToTerraform(struct.context),
        crypto_key: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyToTerraform(struct.cryptoKey),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        lower_bound_days: {
            value: cdktf.numberToHclTerraform(struct.lowerBoundDays),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        upper_bound_days: {
            value: cdktf.numberToHclTerraform(struct.upperBoundDays),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        context: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigContextToHclTerraform(struct.context),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigContextList",
        },
        crypto_key: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyToHclTerraform(struct.cryptoKey),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // context - computed: false, optional: true, required: false
        this._context = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigContextOutputReference(this, "context");
        // crypto_key - computed: false, optional: true, required: false
        this._cryptoKey = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyOutputReference(this, "crypto_key");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._lowerBoundDays !== undefined) {
            hasAnyValues = true;
            internalValueResult.lowerBoundDays = this._lowerBoundDays;
        }
        if (this._upperBoundDays !== undefined) {
            hasAnyValues = true;
            internalValueResult.upperBoundDays = this._upperBoundDays;
        }
        if (this._context?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.context = this._context?.internalValue;
        }
        if (this._cryptoKey?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cryptoKey = this._cryptoKey?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._lowerBoundDays = undefined;
            this._upperBoundDays = undefined;
            this._context.internalValue = undefined;
            this._cryptoKey.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._lowerBoundDays = value.lowerBoundDays;
            this._upperBoundDays = value.upperBoundDays;
            this._context.internalValue = value.context;
            this._cryptoKey.internalValue = value.cryptoKey;
        }
    }
    get lowerBoundDays() {
        return this.getNumberAttribute('lower_bound_days');
    }
    set lowerBoundDays(value) {
        this._lowerBoundDays = value;
    }
    // Temporarily expose input value. Use with caution.
    get lowerBoundDaysInput() {
        return this._lowerBoundDays;
    }
    get upperBoundDays() {
        return this.getNumberAttribute('upper_bound_days');
    }
    set upperBoundDays(value) {
        this._upperBoundDays = value;
    }
    // Temporarily expose input value. Use with caution.
    get upperBoundDaysInput() {
        return this._upperBoundDays;
    }
    get context() {
        return this._context;
    }
    putContext(value) {
        this._context.internalValue = value;
    }
    resetContext() {
        this._context.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get contextInput() {
        return this._context.internalValue;
    }
    get cryptoKey() {
        return this._cryptoKey;
    }
    putCryptoKey(value) {
        this._cryptoKey.internalValue = value;
    }
    resetCryptoKey() {
        this._cryptoKey.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cryptoKeyInput() {
        return this._cryptoKey.internalValue;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigOutputReference;
_18 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigOutputReference[_18] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundDateValueToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        day: cdktf.numberToTerraform(struct.day),
        month: cdktf.numberToTerraform(struct.month),
        year: cdktf.numberToTerraform(struct.year),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundDateValueToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundDateValueToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundDateValueToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        day: {
            value: cdktf.numberToHclTerraform(struct.day),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        month: {
            value: cdktf.numberToHclTerraform(struct.month),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        year: {
            value: cdktf.numberToHclTerraform(struct.year),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundDateValueToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundDateValueToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundDateValueOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._day !== undefined) {
            hasAnyValues = true;
            internalValueResult.day = this._day;
        }
        if (this._month !== undefined) {
            hasAnyValues = true;
            internalValueResult.month = this._month;
        }
        if (this._year !== undefined) {
            hasAnyValues = true;
            internalValueResult.year = this._year;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._day = undefined;
            this._month = undefined;
            this._year = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._day = value.day;
            this._month = value.month;
            this._year = value.year;
        }
    }
    get day() {
        return this.getNumberAttribute('day');
    }
    set day(value) {
        this._day = value;
    }
    resetDay() {
        this._day = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dayInput() {
        return this._day;
    }
    get month() {
        return this.getNumberAttribute('month');
    }
    set month(value) {
        this._month = value;
    }
    resetMonth() {
        this._month = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get monthInput() {
        return this._month;
    }
    get year() {
        return this.getNumberAttribute('year');
    }
    set year(value) {
        this._year = value;
    }
    resetYear() {
        this._year = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get yearInput() {
        return this._year;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundDateValueOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundDateValueOutputReference;
_19 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundDateValueOutputReference[_19] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundDateValueOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundTimeValueToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        hours: cdktf.numberToTerraform(struct.hours),
        minutes: cdktf.numberToTerraform(struct.minutes),
        nanos: cdktf.numberToTerraform(struct.nanos),
        seconds: cdktf.numberToTerraform(struct.seconds),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundTimeValueToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundTimeValueToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundTimeValueToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        hours: {
            value: cdktf.numberToHclTerraform(struct.hours),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        minutes: {
            value: cdktf.numberToHclTerraform(struct.minutes),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        nanos: {
            value: cdktf.numberToHclTerraform(struct.nanos),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        seconds: {
            value: cdktf.numberToHclTerraform(struct.seconds),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundTimeValueToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundTimeValueToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundTimeValueOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hours !== undefined) {
            hasAnyValues = true;
            internalValueResult.hours = this._hours;
        }
        if (this._minutes !== undefined) {
            hasAnyValues = true;
            internalValueResult.minutes = this._minutes;
        }
        if (this._nanos !== undefined) {
            hasAnyValues = true;
            internalValueResult.nanos = this._nanos;
        }
        if (this._seconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.seconds = this._seconds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hours = undefined;
            this._minutes = undefined;
            this._nanos = undefined;
            this._seconds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hours = value.hours;
            this._minutes = value.minutes;
            this._nanos = value.nanos;
            this._seconds = value.seconds;
        }
    }
    get hours() {
        return this.getNumberAttribute('hours');
    }
    set hours(value) {
        this._hours = value;
    }
    resetHours() {
        this._hours = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hoursInput() {
        return this._hours;
    }
    get minutes() {
        return this.getNumberAttribute('minutes');
    }
    set minutes(value) {
        this._minutes = value;
    }
    resetMinutes() {
        this._minutes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minutesInput() {
        return this._minutes;
    }
    get nanos() {
        return this.getNumberAttribute('nanos');
    }
    set nanos(value) {
        this._nanos = value;
    }
    resetNanos() {
        this._nanos = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nanosInput() {
        return this._nanos;
    }
    get seconds() {
        return this.getNumberAttribute('seconds');
    }
    set seconds(value) {
        this._seconds = value;
    }
    resetSeconds() {
        this._seconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secondsInput() {
        return this._seconds;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundTimeValueOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundTimeValueOutputReference;
_20 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundTimeValueOutputReference[_20] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundTimeValueOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        boolean_value: cdktf.booleanToTerraform(struct.booleanValue),
        day_of_week_value: cdktf.stringToTerraform(struct.dayOfWeekValue),
        float_value: cdktf.numberToTerraform(struct.floatValue),
        integer_value: cdktf.stringToTerraform(struct.integerValue),
        string_value: cdktf.stringToTerraform(struct.stringValue),
        timestamp_value: cdktf.stringToTerraform(struct.timestampValue),
        date_value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundDateValueToTerraform(struct.dateValue),
        time_value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundTimeValueToTerraform(struct.timeValue),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        boolean_value: {
            value: cdktf.booleanToHclTerraform(struct.booleanValue),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        day_of_week_value: {
            value: cdktf.stringToHclTerraform(struct.dayOfWeekValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        float_value: {
            value: cdktf.numberToHclTerraform(struct.floatValue),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        integer_value: {
            value: cdktf.stringToHclTerraform(struct.integerValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        string_value: {
            value: cdktf.stringToHclTerraform(struct.stringValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        timestamp_value: {
            value: cdktf.stringToHclTerraform(struct.timestampValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        date_value: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundDateValueToHclTerraform(struct.dateValue),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundDateValueList",
        },
        time_value: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundTimeValueToHclTerraform(struct.timeValue),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundTimeValueList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // date_value - computed: false, optional: true, required: false
        this._dateValue = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundDateValueOutputReference(this, "date_value");
        // time_value - computed: false, optional: true, required: false
        this._timeValue = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundTimeValueOutputReference(this, "time_value");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._booleanValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.booleanValue = this._booleanValue;
        }
        if (this._dayOfWeekValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dayOfWeekValue = this._dayOfWeekValue;
        }
        if (this._floatValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.floatValue = this._floatValue;
        }
        if (this._integerValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.integerValue = this._integerValue;
        }
        if (this._stringValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.stringValue = this._stringValue;
        }
        if (this._timestampValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.timestampValue = this._timestampValue;
        }
        if (this._dateValue?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dateValue = this._dateValue?.internalValue;
        }
        if (this._timeValue?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.timeValue = this._timeValue?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._booleanValue = undefined;
            this._dayOfWeekValue = undefined;
            this._floatValue = undefined;
            this._integerValue = undefined;
            this._stringValue = undefined;
            this._timestampValue = undefined;
            this._dateValue.internalValue = undefined;
            this._timeValue.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._booleanValue = value.booleanValue;
            this._dayOfWeekValue = value.dayOfWeekValue;
            this._floatValue = value.floatValue;
            this._integerValue = value.integerValue;
            this._stringValue = value.stringValue;
            this._timestampValue = value.timestampValue;
            this._dateValue.internalValue = value.dateValue;
            this._timeValue.internalValue = value.timeValue;
        }
    }
    get booleanValue() {
        return this.getBooleanAttribute('boolean_value');
    }
    set booleanValue(value) {
        this._booleanValue = value;
    }
    resetBooleanValue() {
        this._booleanValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get booleanValueInput() {
        return this._booleanValue;
    }
    get dayOfWeekValue() {
        return this.getStringAttribute('day_of_week_value');
    }
    set dayOfWeekValue(value) {
        this._dayOfWeekValue = value;
    }
    resetDayOfWeekValue() {
        this._dayOfWeekValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dayOfWeekValueInput() {
        return this._dayOfWeekValue;
    }
    get floatValue() {
        return this.getNumberAttribute('float_value');
    }
    set floatValue(value) {
        this._floatValue = value;
    }
    resetFloatValue() {
        this._floatValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get floatValueInput() {
        return this._floatValue;
    }
    get integerValue() {
        return this.getStringAttribute('integer_value');
    }
    set integerValue(value) {
        this._integerValue = value;
    }
    resetIntegerValue() {
        this._integerValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get integerValueInput() {
        return this._integerValue;
    }
    get stringValue() {
        return this.getStringAttribute('string_value');
    }
    set stringValue(value) {
        this._stringValue = value;
    }
    resetStringValue() {
        this._stringValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stringValueInput() {
        return this._stringValue;
    }
    get timestampValue() {
        return this.getStringAttribute('timestamp_value');
    }
    set timestampValue(value) {
        this._timestampValue = value;
    }
    resetTimestampValue() {
        this._timestampValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timestampValueInput() {
        return this._timestampValue;
    }
    get dateValue() {
        return this._dateValue;
    }
    putDateValue(value) {
        this._dateValue.internalValue = value;
    }
    resetDateValue() {
        this._dateValue.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dateValueInput() {
        return this._dateValue.internalValue;
    }
    get timeValue() {
        return this._timeValue;
    }
    putTimeValue(value) {
        this._timeValue.internalValue = value;
    }
    resetTimeValue() {
        this._timeValue.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeValueInput() {
        return this._timeValue.internalValue;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundOutputReference;
_21 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundOutputReference[_21] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundDateValueToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        day: cdktf.numberToTerraform(struct.day),
        month: cdktf.numberToTerraform(struct.month),
        year: cdktf.numberToTerraform(struct.year),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundDateValueToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundDateValueToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundDateValueToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        day: {
            value: cdktf.numberToHclTerraform(struct.day),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        month: {
            value: cdktf.numberToHclTerraform(struct.month),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        year: {
            value: cdktf.numberToHclTerraform(struct.year),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundDateValueToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundDateValueToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundDateValueOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._day !== undefined) {
            hasAnyValues = true;
            internalValueResult.day = this._day;
        }
        if (this._month !== undefined) {
            hasAnyValues = true;
            internalValueResult.month = this._month;
        }
        if (this._year !== undefined) {
            hasAnyValues = true;
            internalValueResult.year = this._year;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._day = undefined;
            this._month = undefined;
            this._year = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._day = value.day;
            this._month = value.month;
            this._year = value.year;
        }
    }
    get day() {
        return this.getNumberAttribute('day');
    }
    set day(value) {
        this._day = value;
    }
    resetDay() {
        this._day = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dayInput() {
        return this._day;
    }
    get month() {
        return this.getNumberAttribute('month');
    }
    set month(value) {
        this._month = value;
    }
    resetMonth() {
        this._month = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get monthInput() {
        return this._month;
    }
    get year() {
        return this.getNumberAttribute('year');
    }
    set year(value) {
        this._year = value;
    }
    resetYear() {
        this._year = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get yearInput() {
        return this._year;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundDateValueOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundDateValueOutputReference;
_22 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundDateValueOutputReference[_22] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundDateValueOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundTimeValueToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        hours: cdktf.numberToTerraform(struct.hours),
        minutes: cdktf.numberToTerraform(struct.minutes),
        nanos: cdktf.numberToTerraform(struct.nanos),
        seconds: cdktf.numberToTerraform(struct.seconds),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundTimeValueToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundTimeValueToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundTimeValueToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        hours: {
            value: cdktf.numberToHclTerraform(struct.hours),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        minutes: {
            value: cdktf.numberToHclTerraform(struct.minutes),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        nanos: {
            value: cdktf.numberToHclTerraform(struct.nanos),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        seconds: {
            value: cdktf.numberToHclTerraform(struct.seconds),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundTimeValueToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundTimeValueToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundTimeValueOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hours !== undefined) {
            hasAnyValues = true;
            internalValueResult.hours = this._hours;
        }
        if (this._minutes !== undefined) {
            hasAnyValues = true;
            internalValueResult.minutes = this._minutes;
        }
        if (this._nanos !== undefined) {
            hasAnyValues = true;
            internalValueResult.nanos = this._nanos;
        }
        if (this._seconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.seconds = this._seconds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hours = undefined;
            this._minutes = undefined;
            this._nanos = undefined;
            this._seconds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hours = value.hours;
            this._minutes = value.minutes;
            this._nanos = value.nanos;
            this._seconds = value.seconds;
        }
    }
    get hours() {
        return this.getNumberAttribute('hours');
    }
    set hours(value) {
        this._hours = value;
    }
    resetHours() {
        this._hours = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hoursInput() {
        return this._hours;
    }
    get minutes() {
        return this.getNumberAttribute('minutes');
    }
    set minutes(value) {
        this._minutes = value;
    }
    resetMinutes() {
        this._minutes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minutesInput() {
        return this._minutes;
    }
    get nanos() {
        return this.getNumberAttribute('nanos');
    }
    set nanos(value) {
        this._nanos = value;
    }
    resetNanos() {
        this._nanos = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nanosInput() {
        return this._nanos;
    }
    get seconds() {
        return this.getNumberAttribute('seconds');
    }
    set seconds(value) {
        this._seconds = value;
    }
    resetSeconds() {
        this._seconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secondsInput() {
        return this._seconds;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundTimeValueOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundTimeValueOutputReference;
_23 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundTimeValueOutputReference[_23] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundTimeValueOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        boolean_value: cdktf.booleanToTerraform(struct.booleanValue),
        day_of_week_value: cdktf.stringToTerraform(struct.dayOfWeekValue),
        float_value: cdktf.numberToTerraform(struct.floatValue),
        integer_value: cdktf.stringToTerraform(struct.integerValue),
        string_value: cdktf.stringToTerraform(struct.stringValue),
        timestamp_value: cdktf.stringToTerraform(struct.timestampValue),
        date_value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundDateValueToTerraform(struct.dateValue),
        time_value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundTimeValueToTerraform(struct.timeValue),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        boolean_value: {
            value: cdktf.booleanToHclTerraform(struct.booleanValue),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        day_of_week_value: {
            value: cdktf.stringToHclTerraform(struct.dayOfWeekValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        float_value: {
            value: cdktf.numberToHclTerraform(struct.floatValue),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        integer_value: {
            value: cdktf.stringToHclTerraform(struct.integerValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        string_value: {
            value: cdktf.stringToHclTerraform(struct.stringValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        timestamp_value: {
            value: cdktf.stringToHclTerraform(struct.timestampValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        date_value: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundDateValueToHclTerraform(struct.dateValue),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundDateValueList",
        },
        time_value: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundTimeValueToHclTerraform(struct.timeValue),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundTimeValueList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // date_value - computed: false, optional: true, required: false
        this._dateValue = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundDateValueOutputReference(this, "date_value");
        // time_value - computed: false, optional: true, required: false
        this._timeValue = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundTimeValueOutputReference(this, "time_value");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._booleanValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.booleanValue = this._booleanValue;
        }
        if (this._dayOfWeekValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dayOfWeekValue = this._dayOfWeekValue;
        }
        if (this._floatValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.floatValue = this._floatValue;
        }
        if (this._integerValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.integerValue = this._integerValue;
        }
        if (this._stringValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.stringValue = this._stringValue;
        }
        if (this._timestampValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.timestampValue = this._timestampValue;
        }
        if (this._dateValue?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dateValue = this._dateValue?.internalValue;
        }
        if (this._timeValue?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.timeValue = this._timeValue?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._booleanValue = undefined;
            this._dayOfWeekValue = undefined;
            this._floatValue = undefined;
            this._integerValue = undefined;
            this._stringValue = undefined;
            this._timestampValue = undefined;
            this._dateValue.internalValue = undefined;
            this._timeValue.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._booleanValue = value.booleanValue;
            this._dayOfWeekValue = value.dayOfWeekValue;
            this._floatValue = value.floatValue;
            this._integerValue = value.integerValue;
            this._stringValue = value.stringValue;
            this._timestampValue = value.timestampValue;
            this._dateValue.internalValue = value.dateValue;
            this._timeValue.internalValue = value.timeValue;
        }
    }
    get booleanValue() {
        return this.getBooleanAttribute('boolean_value');
    }
    set booleanValue(value) {
        this._booleanValue = value;
    }
    resetBooleanValue() {
        this._booleanValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get booleanValueInput() {
        return this._booleanValue;
    }
    get dayOfWeekValue() {
        return this.getStringAttribute('day_of_week_value');
    }
    set dayOfWeekValue(value) {
        this._dayOfWeekValue = value;
    }
    resetDayOfWeekValue() {
        this._dayOfWeekValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dayOfWeekValueInput() {
        return this._dayOfWeekValue;
    }
    get floatValue() {
        return this.getNumberAttribute('float_value');
    }
    set floatValue(value) {
        this._floatValue = value;
    }
    resetFloatValue() {
        this._floatValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get floatValueInput() {
        return this._floatValue;
    }
    get integerValue() {
        return this.getStringAttribute('integer_value');
    }
    set integerValue(value) {
        this._integerValue = value;
    }
    resetIntegerValue() {
        this._integerValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get integerValueInput() {
        return this._integerValue;
    }
    get stringValue() {
        return this.getStringAttribute('string_value');
    }
    set stringValue(value) {
        this._stringValue = value;
    }
    resetStringValue() {
        this._stringValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stringValueInput() {
        return this._stringValue;
    }
    get timestampValue() {
        return this.getStringAttribute('timestamp_value');
    }
    set timestampValue(value) {
        this._timestampValue = value;
    }
    resetTimestampValue() {
        this._timestampValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timestampValueInput() {
        return this._timestampValue;
    }
    get dateValue() {
        return this._dateValue;
    }
    putDateValue(value) {
        this._dateValue.internalValue = value;
    }
    resetDateValue() {
        this._dateValue.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dateValueInput() {
        return this._dateValue.internalValue;
    }
    get timeValue() {
        return this._timeValue;
    }
    putTimeValue(value) {
        this._timeValue.internalValue = value;
    }
    resetTimeValue() {
        this._timeValue.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeValueInput() {
        return this._timeValue.internalValue;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundOutputReference;
_24 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundOutputReference[_24] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket_size: cdktf.numberToTerraform(struct.bucketSize),
        lower_bound: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundToTerraform(struct.lowerBound),
        upper_bound: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundToTerraform(struct.upperBound),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        bucket_size: {
            value: cdktf.numberToHclTerraform(struct.bucketSize),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        lower_bound: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundToHclTerraform(struct.lowerBound),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundList",
        },
        upper_bound: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundToHclTerraform(struct.upperBound),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // lower_bound - computed: false, optional: false, required: true
        this._lowerBound = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundOutputReference(this, "lower_bound");
        // upper_bound - computed: false, optional: false, required: true
        this._upperBound = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundOutputReference(this, "upper_bound");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucketSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketSize = this._bucketSize;
        }
        if (this._lowerBound?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.lowerBound = this._lowerBound?.internalValue;
        }
        if (this._upperBound?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.upperBound = this._upperBound?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucketSize = undefined;
            this._lowerBound.internalValue = undefined;
            this._upperBound.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucketSize = value.bucketSize;
            this._lowerBound.internalValue = value.lowerBound;
            this._upperBound.internalValue = value.upperBound;
        }
    }
    get bucketSize() {
        return this.getNumberAttribute('bucket_size');
    }
    set bucketSize(value) {
        this._bucketSize = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketSizeInput() {
        return this._bucketSize;
    }
    get lowerBound() {
        return this._lowerBound;
    }
    putLowerBound(value) {
        this._lowerBound.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get lowerBoundInput() {
        return this._lowerBound.internalValue;
    }
    get upperBound() {
        return this._upperBound;
    }
    putUpperBound(value) {
        this._upperBound.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get upperBoundInput() {
        return this._upperBound.internalValue;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigOutputReference;
_25 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigOutputReference[_25] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationRedactConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationRedactConfigToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationRedactConfigToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationRedactConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationRedactConfigToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationRedactConfigToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationRedactConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationRedactConfigOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationRedactConfigOutputReference;
_26 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationRedactConfigOutputReference[_26] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationRedactConfigOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueDateValueToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        day: cdktf.numberToTerraform(struct.day),
        month: cdktf.numberToTerraform(struct.month),
        year: cdktf.numberToTerraform(struct.year),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueDateValueToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueDateValueToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueDateValueToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        day: {
            value: cdktf.numberToHclTerraform(struct.day),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        month: {
            value: cdktf.numberToHclTerraform(struct.month),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        year: {
            value: cdktf.numberToHclTerraform(struct.year),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueDateValueToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueDateValueToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueDateValueOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._day !== undefined) {
            hasAnyValues = true;
            internalValueResult.day = this._day;
        }
        if (this._month !== undefined) {
            hasAnyValues = true;
            internalValueResult.month = this._month;
        }
        if (this._year !== undefined) {
            hasAnyValues = true;
            internalValueResult.year = this._year;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._day = undefined;
            this._month = undefined;
            this._year = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._day = value.day;
            this._month = value.month;
            this._year = value.year;
        }
    }
    get day() {
        return this.getNumberAttribute('day');
    }
    set day(value) {
        this._day = value;
    }
    resetDay() {
        this._day = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dayInput() {
        return this._day;
    }
    get month() {
        return this.getNumberAttribute('month');
    }
    set month(value) {
        this._month = value;
    }
    resetMonth() {
        this._month = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get monthInput() {
        return this._month;
    }
    get year() {
        return this.getNumberAttribute('year');
    }
    set year(value) {
        this._year = value;
    }
    resetYear() {
        this._year = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get yearInput() {
        return this._year;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueDateValueOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueDateValueOutputReference;
_27 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueDateValueOutputReference[_27] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueDateValueOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueTimeValueToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        hours: cdktf.numberToTerraform(struct.hours),
        minutes: cdktf.numberToTerraform(struct.minutes),
        nanos: cdktf.numberToTerraform(struct.nanos),
        seconds: cdktf.numberToTerraform(struct.seconds),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueTimeValueToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueTimeValueToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueTimeValueToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        hours: {
            value: cdktf.numberToHclTerraform(struct.hours),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        minutes: {
            value: cdktf.numberToHclTerraform(struct.minutes),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        nanos: {
            value: cdktf.numberToHclTerraform(struct.nanos),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        seconds: {
            value: cdktf.numberToHclTerraform(struct.seconds),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueTimeValueToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueTimeValueToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueTimeValueOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hours !== undefined) {
            hasAnyValues = true;
            internalValueResult.hours = this._hours;
        }
        if (this._minutes !== undefined) {
            hasAnyValues = true;
            internalValueResult.minutes = this._minutes;
        }
        if (this._nanos !== undefined) {
            hasAnyValues = true;
            internalValueResult.nanos = this._nanos;
        }
        if (this._seconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.seconds = this._seconds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hours = undefined;
            this._minutes = undefined;
            this._nanos = undefined;
            this._seconds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hours = value.hours;
            this._minutes = value.minutes;
            this._nanos = value.nanos;
            this._seconds = value.seconds;
        }
    }
    get hours() {
        return this.getNumberAttribute('hours');
    }
    set hours(value) {
        this._hours = value;
    }
    resetHours() {
        this._hours = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hoursInput() {
        return this._hours;
    }
    get minutes() {
        return this.getNumberAttribute('minutes');
    }
    set minutes(value) {
        this._minutes = value;
    }
    resetMinutes() {
        this._minutes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minutesInput() {
        return this._minutes;
    }
    get nanos() {
        return this.getNumberAttribute('nanos');
    }
    set nanos(value) {
        this._nanos = value;
    }
    resetNanos() {
        this._nanos = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nanosInput() {
        return this._nanos;
    }
    get seconds() {
        return this.getNumberAttribute('seconds');
    }
    set seconds(value) {
        this._seconds = value;
    }
    resetSeconds() {
        this._seconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secondsInput() {
        return this._seconds;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueTimeValueOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueTimeValueOutputReference;
_28 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueTimeValueOutputReference[_28] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueTimeValueOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        boolean_value: cdktf.booleanToTerraform(struct.booleanValue),
        day_of_week_value: cdktf.stringToTerraform(struct.dayOfWeekValue),
        float_value: cdktf.numberToTerraform(struct.floatValue),
        integer_value: cdktf.stringToTerraform(struct.integerValue),
        string_value: cdktf.stringToTerraform(struct.stringValue),
        timestamp_value: cdktf.stringToTerraform(struct.timestampValue),
        date_value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueDateValueToTerraform(struct.dateValue),
        time_value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueTimeValueToTerraform(struct.timeValue),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        boolean_value: {
            value: cdktf.booleanToHclTerraform(struct.booleanValue),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        day_of_week_value: {
            value: cdktf.stringToHclTerraform(struct.dayOfWeekValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        float_value: {
            value: cdktf.numberToHclTerraform(struct.floatValue),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        integer_value: {
            value: cdktf.stringToHclTerraform(struct.integerValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        string_value: {
            value: cdktf.stringToHclTerraform(struct.stringValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        timestamp_value: {
            value: cdktf.stringToHclTerraform(struct.timestampValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        date_value: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueDateValueToHclTerraform(struct.dateValue),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueDateValueList",
        },
        time_value: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueTimeValueToHclTerraform(struct.timeValue),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueTimeValueList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // date_value - computed: false, optional: true, required: false
        this._dateValue = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueDateValueOutputReference(this, "date_value");
        // time_value - computed: false, optional: true, required: false
        this._timeValue = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueTimeValueOutputReference(this, "time_value");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._booleanValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.booleanValue = this._booleanValue;
        }
        if (this._dayOfWeekValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dayOfWeekValue = this._dayOfWeekValue;
        }
        if (this._floatValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.floatValue = this._floatValue;
        }
        if (this._integerValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.integerValue = this._integerValue;
        }
        if (this._stringValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.stringValue = this._stringValue;
        }
        if (this._timestampValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.timestampValue = this._timestampValue;
        }
        if (this._dateValue?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dateValue = this._dateValue?.internalValue;
        }
        if (this._timeValue?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.timeValue = this._timeValue?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._booleanValue = undefined;
            this._dayOfWeekValue = undefined;
            this._floatValue = undefined;
            this._integerValue = undefined;
            this._stringValue = undefined;
            this._timestampValue = undefined;
            this._dateValue.internalValue = undefined;
            this._timeValue.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._booleanValue = value.booleanValue;
            this._dayOfWeekValue = value.dayOfWeekValue;
            this._floatValue = value.floatValue;
            this._integerValue = value.integerValue;
            this._stringValue = value.stringValue;
            this._timestampValue = value.timestampValue;
            this._dateValue.internalValue = value.dateValue;
            this._timeValue.internalValue = value.timeValue;
        }
    }
    get booleanValue() {
        return this.getBooleanAttribute('boolean_value');
    }
    set booleanValue(value) {
        this._booleanValue = value;
    }
    resetBooleanValue() {
        this._booleanValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get booleanValueInput() {
        return this._booleanValue;
    }
    get dayOfWeekValue() {
        return this.getStringAttribute('day_of_week_value');
    }
    set dayOfWeekValue(value) {
        this._dayOfWeekValue = value;
    }
    resetDayOfWeekValue() {
        this._dayOfWeekValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dayOfWeekValueInput() {
        return this._dayOfWeekValue;
    }
    get floatValue() {
        return this.getNumberAttribute('float_value');
    }
    set floatValue(value) {
        this._floatValue = value;
    }
    resetFloatValue() {
        this._floatValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get floatValueInput() {
        return this._floatValue;
    }
    get integerValue() {
        return this.getStringAttribute('integer_value');
    }
    set integerValue(value) {
        this._integerValue = value;
    }
    resetIntegerValue() {
        this._integerValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get integerValueInput() {
        return this._integerValue;
    }
    get stringValue() {
        return this.getStringAttribute('string_value');
    }
    set stringValue(value) {
        this._stringValue = value;
    }
    resetStringValue() {
        this._stringValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stringValueInput() {
        return this._stringValue;
    }
    get timestampValue() {
        return this.getStringAttribute('timestamp_value');
    }
    set timestampValue(value) {
        this._timestampValue = value;
    }
    resetTimestampValue() {
        this._timestampValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timestampValueInput() {
        return this._timestampValue;
    }
    get dateValue() {
        return this._dateValue;
    }
    putDateValue(value) {
        this._dateValue.internalValue = value;
    }
    resetDateValue() {
        this._dateValue.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dateValueInput() {
        return this._dateValue.internalValue;
    }
    get timeValue() {
        return this._timeValue;
    }
    putTimeValue(value) {
        this._timeValue.internalValue = value;
    }
    resetTimeValue() {
        this._timeValue.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeValueInput() {
        return this._timeValue.internalValue;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueOutputReference;
_29 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueOutputReference[_29] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        new_value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueToTerraform(struct.newValue),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        new_value: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueToHclTerraform(struct.newValue),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // new_value - computed: false, optional: false, required: true
        this._newValue = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueOutputReference(this, "new_value");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._newValue?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.newValue = this._newValue?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._newValue.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._newValue.internalValue = value.newValue;
        }
    }
    get newValue() {
        return this._newValue;
    }
    putNewValue(value) {
        this._newValue.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get newValueInput() {
        return this._newValue.internalValue;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigOutputReference;
_30 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigOutputReference[_30] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceDictionaryConfigWordListStructToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        words: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.words),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceDictionaryConfigWordListStructToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceDictionaryConfigWordListStructToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceDictionaryConfigWordListStructToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        words: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.words),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceDictionaryConfigWordListStructToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceDictionaryConfigWordListStructToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceDictionaryConfigWordListStructOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._words !== undefined) {
            hasAnyValues = true;
            internalValueResult.words = this._words;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._words = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._words = value.words;
        }
    }
    get words() {
        return this.getListAttribute('words');
    }
    set words(value) {
        this._words = value;
    }
    // Temporarily expose input value. Use with caution.
    get wordsInput() {
        return this._words;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceDictionaryConfigWordListStructOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceDictionaryConfigWordListStructOutputReference;
_31 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceDictionaryConfigWordListStructOutputReference[_31] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceDictionaryConfigWordListStructOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceDictionaryConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        word_list: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceDictionaryConfigWordListStructToTerraform(struct.wordList),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceDictionaryConfigToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceDictionaryConfigToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceDictionaryConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        word_list: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceDictionaryConfigWordListStructToHclTerraform(struct.wordList),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceDictionaryConfigWordListStructList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceDictionaryConfigToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceDictionaryConfigToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceDictionaryConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // word_list - computed: false, optional: true, required: false
        this._wordList = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceDictionaryConfigWordListStructOutputReference(this, "word_list");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._wordList?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.wordList = this._wordList?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._wordList.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._wordList.internalValue = value.wordList;
        }
    }
    get wordList() {
        return this._wordList;
    }
    putWordList(value) {
        this._wordList.internalValue = value;
    }
    resetWordList() {
        this._wordList.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get wordListInput() {
        return this._wordList.internalValue;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceDictionaryConfigOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceDictionaryConfigOutputReference;
_32 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceDictionaryConfigOutputReference[_32] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceDictionaryConfigOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationTimePartConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        part_to_extract: cdktf.stringToTerraform(struct.partToExtract),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationTimePartConfigToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationTimePartConfigToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationTimePartConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        part_to_extract: {
            value: cdktf.stringToHclTerraform(struct.partToExtract),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationTimePartConfigToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationTimePartConfigToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationTimePartConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._partToExtract !== undefined) {
            hasAnyValues = true;
            internalValueResult.partToExtract = this._partToExtract;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._partToExtract = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._partToExtract = value.partToExtract;
        }
    }
    get partToExtract() {
        return this.getStringAttribute('part_to_extract');
    }
    set partToExtract(value) {
        this._partToExtract = value;
    }
    resetPartToExtract() {
        this._partToExtract = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get partToExtractInput() {
        return this._partToExtract;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationTimePartConfigOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationTimePartConfigOutputReference;
_33 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationTimePartConfigOutputReference[_33] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationTimePartConfigOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucketing_config: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigToTerraform(struct.bucketingConfig),
        character_mask_config: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCharacterMaskConfigToTerraform(struct.characterMaskConfig),
        crypto_deterministic_config: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigToTerraform(struct.cryptoDeterministicConfig),
        crypto_hash_config: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigToTerraform(struct.cryptoHashConfig),
        crypto_replace_ffx_fpe_config: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigToTerraform(struct.cryptoReplaceFfxFpeConfig),
        date_shift_config: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigToTerraform(struct.dateShiftConfig),
        fixed_size_bucketing_config: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigToTerraform(struct.fixedSizeBucketingConfig),
        redact_config: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationRedactConfigToTerraform(struct.redactConfig),
        replace_config: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigToTerraform(struct.replaceConfig),
        replace_dictionary_config: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceDictionaryConfigToTerraform(struct.replaceDictionaryConfig),
        time_part_config: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationTimePartConfigToTerraform(struct.timePartConfig),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        bucketing_config: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigToHclTerraform(struct.bucketingConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigList",
        },
        character_mask_config: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCharacterMaskConfigToHclTerraform(struct.characterMaskConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCharacterMaskConfigList",
        },
        crypto_deterministic_config: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigToHclTerraform(struct.cryptoDeterministicConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigList",
        },
        crypto_hash_config: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigToHclTerraform(struct.cryptoHashConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigList",
        },
        crypto_replace_ffx_fpe_config: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigToHclTerraform(struct.cryptoReplaceFfxFpeConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigList",
        },
        date_shift_config: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigToHclTerraform(struct.dateShiftConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigList",
        },
        fixed_size_bucketing_config: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigToHclTerraform(struct.fixedSizeBucketingConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigList",
        },
        redact_config: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationRedactConfigToHclTerraform(struct.redactConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationRedactConfigList",
        },
        replace_config: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigToHclTerraform(struct.replaceConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigList",
        },
        replace_dictionary_config: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceDictionaryConfigToHclTerraform(struct.replaceDictionaryConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceDictionaryConfigList",
        },
        time_part_config: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationTimePartConfigToHclTerraform(struct.timePartConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationTimePartConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // bucketing_config - computed: false, optional: true, required: false
        this._bucketingConfig = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigOutputReference(this, "bucketing_config");
        // character_mask_config - computed: false, optional: true, required: false
        this._characterMaskConfig = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCharacterMaskConfigOutputReference(this, "character_mask_config");
        // crypto_deterministic_config - computed: false, optional: true, required: false
        this._cryptoDeterministicConfig = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigOutputReference(this, "crypto_deterministic_config");
        // crypto_hash_config - computed: false, optional: true, required: false
        this._cryptoHashConfig = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigOutputReference(this, "crypto_hash_config");
        // crypto_replace_ffx_fpe_config - computed: false, optional: true, required: false
        this._cryptoReplaceFfxFpeConfig = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigOutputReference(this, "crypto_replace_ffx_fpe_config");
        // date_shift_config - computed: false, optional: true, required: false
        this._dateShiftConfig = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigOutputReference(this, "date_shift_config");
        // fixed_size_bucketing_config - computed: false, optional: true, required: false
        this._fixedSizeBucketingConfig = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigOutputReference(this, "fixed_size_bucketing_config");
        // redact_config - computed: false, optional: true, required: false
        this._redactConfig = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationRedactConfigOutputReference(this, "redact_config");
        // replace_config - computed: false, optional: true, required: false
        this._replaceConfig = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigOutputReference(this, "replace_config");
        // replace_dictionary_config - computed: false, optional: true, required: false
        this._replaceDictionaryConfig = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceDictionaryConfigOutputReference(this, "replace_dictionary_config");
        // time_part_config - computed: false, optional: true, required: false
        this._timePartConfig = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationTimePartConfigOutputReference(this, "time_part_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucketingConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketingConfig = this._bucketingConfig?.internalValue;
        }
        if (this._characterMaskConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.characterMaskConfig = this._characterMaskConfig?.internalValue;
        }
        if (this._cryptoDeterministicConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cryptoDeterministicConfig = this._cryptoDeterministicConfig?.internalValue;
        }
        if (this._cryptoHashConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cryptoHashConfig = this._cryptoHashConfig?.internalValue;
        }
        if (this._cryptoReplaceFfxFpeConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cryptoReplaceFfxFpeConfig = this._cryptoReplaceFfxFpeConfig?.internalValue;
        }
        if (this._dateShiftConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dateShiftConfig = this._dateShiftConfig?.internalValue;
        }
        if (this._fixedSizeBucketingConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.fixedSizeBucketingConfig = this._fixedSizeBucketingConfig?.internalValue;
        }
        if (this._redactConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.redactConfig = this._redactConfig?.internalValue;
        }
        if (this._replaceConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.replaceConfig = this._replaceConfig?.internalValue;
        }
        if (this._replaceDictionaryConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.replaceDictionaryConfig = this._replaceDictionaryConfig?.internalValue;
        }
        if (this._timePartConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.timePartConfig = this._timePartConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucketingConfig.internalValue = undefined;
            this._characterMaskConfig.internalValue = undefined;
            this._cryptoDeterministicConfig.internalValue = undefined;
            this._cryptoHashConfig.internalValue = undefined;
            this._cryptoReplaceFfxFpeConfig.internalValue = undefined;
            this._dateShiftConfig.internalValue = undefined;
            this._fixedSizeBucketingConfig.internalValue = undefined;
            this._redactConfig.internalValue = undefined;
            this._replaceConfig.internalValue = undefined;
            this._replaceDictionaryConfig.internalValue = undefined;
            this._timePartConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucketingConfig.internalValue = value.bucketingConfig;
            this._characterMaskConfig.internalValue = value.characterMaskConfig;
            this._cryptoDeterministicConfig.internalValue = value.cryptoDeterministicConfig;
            this._cryptoHashConfig.internalValue = value.cryptoHashConfig;
            this._cryptoReplaceFfxFpeConfig.internalValue = value.cryptoReplaceFfxFpeConfig;
            this._dateShiftConfig.internalValue = value.dateShiftConfig;
            this._fixedSizeBucketingConfig.internalValue = value.fixedSizeBucketingConfig;
            this._redactConfig.internalValue = value.redactConfig;
            this._replaceConfig.internalValue = value.replaceConfig;
            this._replaceDictionaryConfig.internalValue = value.replaceDictionaryConfig;
            this._timePartConfig.internalValue = value.timePartConfig;
        }
    }
    get bucketingConfig() {
        return this._bucketingConfig;
    }
    putBucketingConfig(value) {
        this._bucketingConfig.internalValue = value;
    }
    resetBucketingConfig() {
        this._bucketingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bucketingConfigInput() {
        return this._bucketingConfig.internalValue;
    }
    get characterMaskConfig() {
        return this._characterMaskConfig;
    }
    putCharacterMaskConfig(value) {
        this._characterMaskConfig.internalValue = value;
    }
    resetCharacterMaskConfig() {
        this._characterMaskConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get characterMaskConfigInput() {
        return this._characterMaskConfig.internalValue;
    }
    get cryptoDeterministicConfig() {
        return this._cryptoDeterministicConfig;
    }
    putCryptoDeterministicConfig(value) {
        this._cryptoDeterministicConfig.internalValue = value;
    }
    resetCryptoDeterministicConfig() {
        this._cryptoDeterministicConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cryptoDeterministicConfigInput() {
        return this._cryptoDeterministicConfig.internalValue;
    }
    get cryptoHashConfig() {
        return this._cryptoHashConfig;
    }
    putCryptoHashConfig(value) {
        this._cryptoHashConfig.internalValue = value;
    }
    resetCryptoHashConfig() {
        this._cryptoHashConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cryptoHashConfigInput() {
        return this._cryptoHashConfig.internalValue;
    }
    get cryptoReplaceFfxFpeConfig() {
        return this._cryptoReplaceFfxFpeConfig;
    }
    putCryptoReplaceFfxFpeConfig(value) {
        this._cryptoReplaceFfxFpeConfig.internalValue = value;
    }
    resetCryptoReplaceFfxFpeConfig() {
        this._cryptoReplaceFfxFpeConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cryptoReplaceFfxFpeConfigInput() {
        return this._cryptoReplaceFfxFpeConfig.internalValue;
    }
    get dateShiftConfig() {
        return this._dateShiftConfig;
    }
    putDateShiftConfig(value) {
        this._dateShiftConfig.internalValue = value;
    }
    resetDateShiftConfig() {
        this._dateShiftConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dateShiftConfigInput() {
        return this._dateShiftConfig.internalValue;
    }
    get fixedSizeBucketingConfig() {
        return this._fixedSizeBucketingConfig;
    }
    putFixedSizeBucketingConfig(value) {
        this._fixedSizeBucketingConfig.internalValue = value;
    }
    resetFixedSizeBucketingConfig() {
        this._fixedSizeBucketingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fixedSizeBucketingConfigInput() {
        return this._fixedSizeBucketingConfig.internalValue;
    }
    get redactConfig() {
        return this._redactConfig;
    }
    putRedactConfig(value) {
        this._redactConfig.internalValue = value;
    }
    resetRedactConfig() {
        this._redactConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get redactConfigInput() {
        return this._redactConfig.internalValue;
    }
    get replaceConfig() {
        return this._replaceConfig;
    }
    putReplaceConfig(value) {
        this._replaceConfig.internalValue = value;
    }
    resetReplaceConfig() {
        this._replaceConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get replaceConfigInput() {
        return this._replaceConfig.internalValue;
    }
    get replaceDictionaryConfig() {
        return this._replaceDictionaryConfig;
    }
    putReplaceDictionaryConfig(value) {
        this._replaceDictionaryConfig.internalValue = value;
    }
    resetReplaceDictionaryConfig() {
        this._replaceDictionaryConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get replaceDictionaryConfigInput() {
        return this._replaceDictionaryConfig.internalValue;
    }
    get timePartConfig() {
        return this._timePartConfig;
    }
    putTimePartConfig(value) {
        this._timePartConfig.internalValue = value;
    }
    resetTimePartConfig() {
        this._timePartConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timePartConfigInput() {
        return this._timePartConfig.internalValue;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationOutputReference;
_34 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationOutputReference[_34] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        condition: (0, structs0_1.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsConditionToTerraform)(struct.condition),
        fields: cdktf.listMapper(structs0_1.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsFieldsToTerraform, true)(struct.fields),
        info_type_transformations: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsToTerraform(struct.infoTypeTransformations),
        primitive_transformation: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationToTerraform(struct.primitiveTransformation),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        condition: {
            value: (0, structs0_1.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsConditionToHclTerraform)(struct.condition),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsConditionList",
        },
        fields: {
            value: cdktf.listMapperHcl(structs0_1.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsFieldsToHclTerraform, true)(struct.fields),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsFieldsList",
        },
        info_type_transformations: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsToHclTerraform(struct.infoTypeTransformations),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsList",
        },
        primitive_transformation: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationToHclTerraform(struct.primitiveTransformation),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // condition - computed: false, optional: true, required: false
        this._condition = new structs0_1.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsConditionOutputReference(this, "condition");
        // fields - computed: false, optional: false, required: true
        this._fields = new structs0_1.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsFieldsList(this, "fields", false);
        // info_type_transformations - computed: false, optional: true, required: false
        this._infoTypeTransformations = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsOutputReference(this, "info_type_transformations");
        // primitive_transformation - computed: false, optional: true, required: false
        this._primitiveTransformation = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationOutputReference(this, "primitive_transformation");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._condition?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.condition = this._condition?.internalValue;
        }
        if (this._fields?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.fields = this._fields?.internalValue;
        }
        if (this._infoTypeTransformations?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.infoTypeTransformations = this._infoTypeTransformations?.internalValue;
        }
        if (this._primitiveTransformation?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.primitiveTransformation = this._primitiveTransformation?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._condition.internalValue = undefined;
            this._fields.internalValue = undefined;
            this._infoTypeTransformations.internalValue = undefined;
            this._primitiveTransformation.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._condition.internalValue = value.condition;
            this._fields.internalValue = value.fields;
            this._infoTypeTransformations.internalValue = value.infoTypeTransformations;
            this._primitiveTransformation.internalValue = value.primitiveTransformation;
        }
    }
    get condition() {
        return this._condition;
    }
    putCondition(value) {
        this._condition.internalValue = value;
    }
    resetCondition() {
        this._condition.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get conditionInput() {
        return this._condition.internalValue;
    }
    get fields() {
        return this._fields;
    }
    putFields(value) {
        this._fields.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get fieldsInput() {
        return this._fields.internalValue;
    }
    get infoTypeTransformations() {
        return this._infoTypeTransformations;
    }
    putInfoTypeTransformations(value) {
        this._infoTypeTransformations.internalValue = value;
    }
    resetInfoTypeTransformations() {
        this._infoTypeTransformations.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get infoTypeTransformationsInput() {
        return this._infoTypeTransformations.internalValue;
    }
    get primitiveTransformation() {
        return this._primitiveTransformation;
    }
    putPrimitiveTransformation(value) {
        this._primitiveTransformation.internalValue = value;
    }
    resetPrimitiveTransformation() {
        this._primitiveTransformation.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get primitiveTransformationInput() {
        return this._primitiveTransformation.internalValue;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsOutputReference;
_35 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsOutputReference[_35] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsOutputReference", version: "14.13.1" };
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsList = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsList;
_36 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsList[_36] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsList", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsFieldToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsFieldToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsFieldToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsFieldToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsFieldToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsFieldToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsFieldOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._name = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._name = value.name;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsFieldOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsFieldOutputReference;
_37 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsFieldOutputReference[_37] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsFieldOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueDateValueToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        day: cdktf.numberToTerraform(struct.day),
        month: cdktf.numberToTerraform(struct.month),
        year: cdktf.numberToTerraform(struct.year),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueDateValueToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueDateValueToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueDateValueToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        day: {
            value: cdktf.numberToHclTerraform(struct.day),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        month: {
            value: cdktf.numberToHclTerraform(struct.month),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        year: {
            value: cdktf.numberToHclTerraform(struct.year),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueDateValueToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueDateValueToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueDateValueOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._day !== undefined) {
            hasAnyValues = true;
            internalValueResult.day = this._day;
        }
        if (this._month !== undefined) {
            hasAnyValues = true;
            internalValueResult.month = this._month;
        }
        if (this._year !== undefined) {
            hasAnyValues = true;
            internalValueResult.year = this._year;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._day = undefined;
            this._month = undefined;
            this._year = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._day = value.day;
            this._month = value.month;
            this._year = value.year;
        }
    }
    get day() {
        return this.getNumberAttribute('day');
    }
    set day(value) {
        this._day = value;
    }
    resetDay() {
        this._day = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dayInput() {
        return this._day;
    }
    get month() {
        return this.getNumberAttribute('month');
    }
    set month(value) {
        this._month = value;
    }
    resetMonth() {
        this._month = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get monthInput() {
        return this._month;
    }
    get year() {
        return this.getNumberAttribute('year');
    }
    set year(value) {
        this._year = value;
    }
    resetYear() {
        this._year = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get yearInput() {
        return this._year;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueDateValueOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueDateValueOutputReference;
_38 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueDateValueOutputReference[_38] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueDateValueOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueTimeValueToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        hours: cdktf.numberToTerraform(struct.hours),
        minutes: cdktf.numberToTerraform(struct.minutes),
        nanos: cdktf.numberToTerraform(struct.nanos),
        seconds: cdktf.numberToTerraform(struct.seconds),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueTimeValueToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueTimeValueToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueTimeValueToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        hours: {
            value: cdktf.numberToHclTerraform(struct.hours),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        minutes: {
            value: cdktf.numberToHclTerraform(struct.minutes),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        nanos: {
            value: cdktf.numberToHclTerraform(struct.nanos),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        seconds: {
            value: cdktf.numberToHclTerraform(struct.seconds),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueTimeValueToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueTimeValueToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueTimeValueOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hours !== undefined) {
            hasAnyValues = true;
            internalValueResult.hours = this._hours;
        }
        if (this._minutes !== undefined) {
            hasAnyValues = true;
            internalValueResult.minutes = this._minutes;
        }
        if (this._nanos !== undefined) {
            hasAnyValues = true;
            internalValueResult.nanos = this._nanos;
        }
        if (this._seconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.seconds = this._seconds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hours = undefined;
            this._minutes = undefined;
            this._nanos = undefined;
            this._seconds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hours = value.hours;
            this._minutes = value.minutes;
            this._nanos = value.nanos;
            this._seconds = value.seconds;
        }
    }
    get hours() {
        return this.getNumberAttribute('hours');
    }
    set hours(value) {
        this._hours = value;
    }
    resetHours() {
        this._hours = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hoursInput() {
        return this._hours;
    }
    get minutes() {
        return this.getNumberAttribute('minutes');
    }
    set minutes(value) {
        this._minutes = value;
    }
    resetMinutes() {
        this._minutes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minutesInput() {
        return this._minutes;
    }
    get nanos() {
        return this.getNumberAttribute('nanos');
    }
    set nanos(value) {
        this._nanos = value;
    }
    resetNanos() {
        this._nanos = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nanosInput() {
        return this._nanos;
    }
    get seconds() {
        return this.getNumberAttribute('seconds');
    }
    set seconds(value) {
        this._seconds = value;
    }
    resetSeconds() {
        this._seconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secondsInput() {
        return this._seconds;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueTimeValueOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueTimeValueOutputReference;
_39 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueTimeValueOutputReference[_39] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueTimeValueOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        boolean_value: cdktf.booleanToTerraform(struct.booleanValue),
        day_of_week_value: cdktf.stringToTerraform(struct.dayOfWeekValue),
        float_value: cdktf.numberToTerraform(struct.floatValue),
        integer_value: cdktf.stringToTerraform(struct.integerValue),
        string_value: cdktf.stringToTerraform(struct.stringValue),
        timestamp_value: cdktf.stringToTerraform(struct.timestampValue),
        date_value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueDateValueToTerraform(struct.dateValue),
        time_value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueTimeValueToTerraform(struct.timeValue),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        boolean_value: {
            value: cdktf.booleanToHclTerraform(struct.booleanValue),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        day_of_week_value: {
            value: cdktf.stringToHclTerraform(struct.dayOfWeekValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        float_value: {
            value: cdktf.numberToHclTerraform(struct.floatValue),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        integer_value: {
            value: cdktf.stringToHclTerraform(struct.integerValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        string_value: {
            value: cdktf.stringToHclTerraform(struct.stringValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        timestamp_value: {
            value: cdktf.stringToHclTerraform(struct.timestampValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        date_value: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueDateValueToHclTerraform(struct.dateValue),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueDateValueList",
        },
        time_value: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueTimeValueToHclTerraform(struct.timeValue),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueTimeValueList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // date_value - computed: false, optional: true, required: false
        this._dateValue = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueDateValueOutputReference(this, "date_value");
        // time_value - computed: false, optional: true, required: false
        this._timeValue = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueTimeValueOutputReference(this, "time_value");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._booleanValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.booleanValue = this._booleanValue;
        }
        if (this._dayOfWeekValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dayOfWeekValue = this._dayOfWeekValue;
        }
        if (this._floatValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.floatValue = this._floatValue;
        }
        if (this._integerValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.integerValue = this._integerValue;
        }
        if (this._stringValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.stringValue = this._stringValue;
        }
        if (this._timestampValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.timestampValue = this._timestampValue;
        }
        if (this._dateValue?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dateValue = this._dateValue?.internalValue;
        }
        if (this._timeValue?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.timeValue = this._timeValue?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._booleanValue = undefined;
            this._dayOfWeekValue = undefined;
            this._floatValue = undefined;
            this._integerValue = undefined;
            this._stringValue = undefined;
            this._timestampValue = undefined;
            this._dateValue.internalValue = undefined;
            this._timeValue.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._booleanValue = value.booleanValue;
            this._dayOfWeekValue = value.dayOfWeekValue;
            this._floatValue = value.floatValue;
            this._integerValue = value.integerValue;
            this._stringValue = value.stringValue;
            this._timestampValue = value.timestampValue;
            this._dateValue.internalValue = value.dateValue;
            this._timeValue.internalValue = value.timeValue;
        }
    }
    get booleanValue() {
        return this.getBooleanAttribute('boolean_value');
    }
    set booleanValue(value) {
        this._booleanValue = value;
    }
    resetBooleanValue() {
        this._booleanValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get booleanValueInput() {
        return this._booleanValue;
    }
    get dayOfWeekValue() {
        return this.getStringAttribute('day_of_week_value');
    }
    set dayOfWeekValue(value) {
        this._dayOfWeekValue = value;
    }
    resetDayOfWeekValue() {
        this._dayOfWeekValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dayOfWeekValueInput() {
        return this._dayOfWeekValue;
    }
    get floatValue() {
        return this.getNumberAttribute('float_value');
    }
    set floatValue(value) {
        this._floatValue = value;
    }
    resetFloatValue() {
        this._floatValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get floatValueInput() {
        return this._floatValue;
    }
    get integerValue() {
        return this.getStringAttribute('integer_value');
    }
    set integerValue(value) {
        this._integerValue = value;
    }
    resetIntegerValue() {
        this._integerValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get integerValueInput() {
        return this._integerValue;
    }
    get stringValue() {
        return this.getStringAttribute('string_value');
    }
    set stringValue(value) {
        this._stringValue = value;
    }
    resetStringValue() {
        this._stringValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stringValueInput() {
        return this._stringValue;
    }
    get timestampValue() {
        return this.getStringAttribute('timestamp_value');
    }
    set timestampValue(value) {
        this._timestampValue = value;
    }
    resetTimestampValue() {
        this._timestampValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timestampValueInput() {
        return this._timestampValue;
    }
    get dateValue() {
        return this._dateValue;
    }
    putDateValue(value) {
        this._dateValue.internalValue = value;
    }
    resetDateValue() {
        this._dateValue.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dateValueInput() {
        return this._dateValue.internalValue;
    }
    get timeValue() {
        return this._timeValue;
    }
    putTimeValue(value) {
        this._timeValue.internalValue = value;
    }
    resetTimeValue() {
        this._timeValue.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeValueInput() {
        return this._timeValue.internalValue;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueOutputReference;
_40 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueOutputReference[_40] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        operator: cdktf.stringToTerraform(struct.operator),
        field: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsFieldToTerraform(struct.field),
        value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueToTerraform(struct.value),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        operator: {
            value: cdktf.stringToHclTerraform(struct.operator),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        field: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsFieldToHclTerraform(struct.field),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsFieldList",
        },
        value: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueToHclTerraform(struct.value),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // field - computed: false, optional: false, required: true
        this._field = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsFieldOutputReference(this, "field");
        // value - computed: false, optional: true, required: false
        this._value = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueOutputReference(this, "value");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._operator !== undefined) {
            hasAnyValues = true;
            internalValueResult.operator = this._operator;
        }
        if (this._field?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.field = this._field?.internalValue;
        }
        if (this._value?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._operator = undefined;
            this._field.internalValue = undefined;
            this._value.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._operator = value.operator;
            this._field.internalValue = value.field;
            this._value.internalValue = value.value;
        }
    }
    get operator() {
        return this.getStringAttribute('operator');
    }
    set operator(value) {
        this._operator = value;
    }
    // Temporarily expose input value. Use with caution.
    get operatorInput() {
        return this._operator;
    }
    get field() {
        return this._field;
    }
    putField(value) {
        this._field.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get fieldInput() {
        return this._field.internalValue;
    }
    get value() {
        return this._value;
    }
    putValue(value) {
        this._value.internalValue = value;
    }
    resetValue() {
        this._value.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value.internalValue;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsOutputReference;
_41 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsOutputReference[_41] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsOutputReference", version: "14.13.1" };
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsList = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsList;
_42 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsList[_42] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsList", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        conditions: cdktf.listMapper(dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsToTerraform, true)(struct.conditions),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        conditions: {
            value: cdktf.listMapperHcl(dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsToHclTerraform, true)(struct.conditions),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // conditions - computed: false, optional: true, required: false
        this._conditions = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsList(this, "conditions", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._conditions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.conditions = this._conditions?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._conditions.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._conditions.internalValue = value.conditions;
        }
    }
    get conditions() {
        return this._conditions;
    }
    putConditions(value) {
        this._conditions.internalValue = value;
    }
    resetConditions() {
        this._conditions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get conditionsInput() {
        return this._conditions.internalValue;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsOutputReference;
_43 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsOutputReference[_43] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        logical_operator: cdktf.stringToTerraform(struct.logicalOperator),
        conditions: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsToTerraform(struct.conditions),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        logical_operator: {
            value: cdktf.stringToHclTerraform(struct.logicalOperator),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        conditions: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsToHclTerraform(struct.conditions),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // conditions - computed: false, optional: true, required: false
        this._conditions = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsOutputReference(this, "conditions");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._logicalOperator !== undefined) {
            hasAnyValues = true;
            internalValueResult.logicalOperator = this._logicalOperator;
        }
        if (this._conditions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.conditions = this._conditions?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._logicalOperator = undefined;
            this._conditions.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._logicalOperator = value.logicalOperator;
            this._conditions.internalValue = value.conditions;
        }
    }
    get logicalOperator() {
        return this.getStringAttribute('logical_operator');
    }
    set logicalOperator(value) {
        this._logicalOperator = value;
    }
    resetLogicalOperator() {
        this._logicalOperator = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logicalOperatorInput() {
        return this._logicalOperator;
    }
    get conditions() {
        return this._conditions;
    }
    putConditions(value) {
        this._conditions.internalValue = value;
    }
    resetConditions() {
        this._conditions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get conditionsInput() {
        return this._conditions.internalValue;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsOutputReference;
_44 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsOutputReference[_44] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        expressions: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsToTerraform(struct.expressions),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        expressions: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsToHclTerraform(struct.expressions),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // expressions - computed: false, optional: true, required: false
        this._expressions = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsOutputReference(this, "expressions");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._expressions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.expressions = this._expressions?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._expressions.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._expressions.internalValue = value.expressions;
        }
    }
    get expressions() {
        return this._expressions;
    }
    putExpressions(value) {
        this._expressions.internalValue = value;
    }
    resetExpressions() {
        this._expressions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get expressionsInput() {
        return this._expressions.internalValue;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionOutputReference;
_45 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionOutputReference[_45] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        condition: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionToTerraform(struct.condition),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        condition: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionToHclTerraform(struct.condition),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // condition - computed: false, optional: true, required: false
        this._condition = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionOutputReference(this, "condition");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._condition?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.condition = this._condition?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._condition.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._condition.internalValue = value.condition;
        }
    }
    get condition() {
        return this._condition;
    }
    putCondition(value) {
        this._condition.internalValue = value;
    }
    resetCondition() {
        this._condition.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get conditionInput() {
        return this._condition.internalValue;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsOutputReference;
_46 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsOutputReference[_46] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsOutputReference", version: "14.13.1" };
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsList = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsList;
_47 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsList[_47] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsList", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        field_transformations: cdktf.listMapper(dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsToTerraform, true)(struct.fieldTransformations),
        record_suppressions: cdktf.listMapper(dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsToTerraform, true)(struct.recordSuppressions),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        field_transformations: {
            value: cdktf.listMapperHcl(dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsToHclTerraform, true)(struct.fieldTransformations),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsList",
        },
        record_suppressions: {
            value: cdktf.listMapperHcl(dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsToHclTerraform, true)(struct.recordSuppressions),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // field_transformations - computed: false, optional: true, required: false
        this._fieldTransformations = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsList(this, "field_transformations", false);
        // record_suppressions - computed: false, optional: true, required: false
        this._recordSuppressions = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsList(this, "record_suppressions", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._fieldTransformations?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.fieldTransformations = this._fieldTransformations?.internalValue;
        }
        if (this._recordSuppressions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.recordSuppressions = this._recordSuppressions?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._fieldTransformations.internalValue = undefined;
            this._recordSuppressions.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._fieldTransformations.internalValue = value.fieldTransformations;
            this._recordSuppressions.internalValue = value.recordSuppressions;
        }
    }
    get fieldTransformations() {
        return this._fieldTransformations;
    }
    putFieldTransformations(value) {
        this._fieldTransformations.internalValue = value;
    }
    resetFieldTransformations() {
        this._fieldTransformations.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fieldTransformationsInput() {
        return this._fieldTransformations.internalValue;
    }
    get recordSuppressions() {
        return this._recordSuppressions;
    }
    putRecordSuppressions(value) {
        this._recordSuppressions.internalValue = value;
    }
    resetRecordSuppressions() {
        this._recordSuppressions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get recordSuppressionsInput() {
        return this._recordSuppressions.internalValue;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsOutputReference;
_48 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsOutputReference[_48] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateDeidentifyConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        image_transformations: (0, structs0_1.dataLossPreventionDeidentifyTemplateDeidentifyConfigImageTransformationsToTerraform)(struct.imageTransformations),
        info_type_transformations: (0, structs0_1.dataLossPreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsToTerraform)(struct.infoTypeTransformations),
        record_transformations: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsToTerraform(struct.recordTransformations),
    };
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigToTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigToTerraform;
function dataLossPreventionDeidentifyTemplateDeidentifyConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        image_transformations: {
            value: (0, structs0_1.dataLossPreventionDeidentifyTemplateDeidentifyConfigImageTransformationsToHclTerraform)(struct.imageTransformations),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigImageTransformationsList",
        },
        info_type_transformations: {
            value: (0, structs0_1.dataLossPreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsToHclTerraform)(struct.infoTypeTransformations),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsList",
        },
        record_transformations: {
            value: dataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsToHclTerraform(struct.recordTransformations),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateDeidentifyConfigToHclTerraform = dataLossPreventionDeidentifyTemplateDeidentifyConfigToHclTerraform;
class DataLossPreventionDeidentifyTemplateDeidentifyConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // image_transformations - computed: false, optional: true, required: false
        this._imageTransformations = new structs0_1.DataLossPreventionDeidentifyTemplateDeidentifyConfigImageTransformationsOutputReference(this, "image_transformations");
        // info_type_transformations - computed: false, optional: true, required: false
        this._infoTypeTransformations = new structs0_1.DataLossPreventionDeidentifyTemplateDeidentifyConfigInfoTypeTransformationsOutputReference(this, "info_type_transformations");
        // record_transformations - computed: false, optional: true, required: false
        this._recordTransformations = new DataLossPreventionDeidentifyTemplateDeidentifyConfigRecordTransformationsOutputReference(this, "record_transformations");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._imageTransformations?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageTransformations = this._imageTransformations?.internalValue;
        }
        if (this._infoTypeTransformations?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.infoTypeTransformations = this._infoTypeTransformations?.internalValue;
        }
        if (this._recordTransformations?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.recordTransformations = this._recordTransformations?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._imageTransformations.internalValue = undefined;
            this._infoTypeTransformations.internalValue = undefined;
            this._recordTransformations.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._imageTransformations.internalValue = value.imageTransformations;
            this._infoTypeTransformations.internalValue = value.infoTypeTransformations;
            this._recordTransformations.internalValue = value.recordTransformations;
        }
    }
    get imageTransformations() {
        return this._imageTransformations;
    }
    putImageTransformations(value) {
        this._imageTransformations.internalValue = value;
    }
    resetImageTransformations() {
        this._imageTransformations.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageTransformationsInput() {
        return this._imageTransformations.internalValue;
    }
    get infoTypeTransformations() {
        return this._infoTypeTransformations;
    }
    putInfoTypeTransformations(value) {
        this._infoTypeTransformations.internalValue = value;
    }
    resetInfoTypeTransformations() {
        this._infoTypeTransformations.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get infoTypeTransformationsInput() {
        return this._infoTypeTransformations.internalValue;
    }
    get recordTransformations() {
        return this._recordTransformations;
    }
    putRecordTransformations(value) {
        this._recordTransformations.internalValue = value;
    }
    resetRecordTransformations() {
        this._recordTransformations.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get recordTransformationsInput() {
        return this._recordTransformations.internalValue;
    }
}
exports.DataLossPreventionDeidentifyTemplateDeidentifyConfigOutputReference = DataLossPreventionDeidentifyTemplateDeidentifyConfigOutputReference;
_49 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateDeidentifyConfigOutputReference[_49] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateDeidentifyConfigOutputReference", version: "14.13.1" };
function dataLossPreventionDeidentifyTemplateTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.dataLossPreventionDeidentifyTemplateTimeoutsToTerraform = dataLossPreventionDeidentifyTemplateTimeoutsToTerraform;
function dataLossPreventionDeidentifyTemplateTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDeidentifyTemplateTimeoutsToHclTerraform = dataLossPreventionDeidentifyTemplateTimeoutsToHclTerraform;
class DataLossPreventionDeidentifyTemplateTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.DataLossPreventionDeidentifyTemplateTimeoutsOutputReference = DataLossPreventionDeidentifyTemplateTimeoutsOutputReference;
_50 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDeidentifyTemplateTimeoutsOutputReference[_50] = { fqn: "@cdktf/provider-google.dataLossPreventionDeidentifyTemplate.DataLossPreventionDeidentifyTemplateTimeoutsOutputReference", version: "14.13.1" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RydWN0czQwMC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kYXRhLWxvc3MtcHJldmVudGlvbi1kZWlkZW50aWZ5LXRlbXBsYXRlL2luZGV4LXN0cnVjdHMvc3RydWN0czQwMC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7O0dBR0c7QUFFSCwrQkFBK0I7QUFDL0IseUNBbUI4RztBQVU5RyxTQUFnQiwrSEFBK0gsQ0FBQyxNQUFtUTtJQUNqWixJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO1FBQUMsT0FBTyxNQUFNLENBQUM7SUFBQyxDQUFDO0lBQzVGLElBQUksS0FBSyxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7UUFDbkMsTUFBTSxJQUFJLEtBQUssQ0FBQyxvSEFBb0gsQ0FBQyxDQUFDO0lBQ3hJLENBQUM7SUFDRCxPQUFPO1FBQ0wsZUFBZSxFQUFFLEtBQUssQ0FBQyxVQUFVLENBQUMseUpBQThJLEVBQUUsSUFBSSxDQUFDLENBQUMsTUFBTyxDQUFDLGVBQWUsQ0FBQztLQUNqTixDQUFBO0FBQ0gsQ0FBQztBQVJELDBRQVFDO0FBR0QsU0FBZ0Isa0lBQWtJLENBQUMsTUFBbVE7SUFDcFosSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztRQUFDLE9BQU8sTUFBTSxDQUFDO0lBQUMsQ0FBQztJQUM1RixJQUFJLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO1FBQ25DLE1BQU0sSUFBSSxLQUFLLENBQUMsb0hBQW9ILENBQUMsQ0FBQztJQUN4SSxDQUFDO0lBQ0QsTUFBTSxLQUFLLEdBQUc7UUFD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SUFDRCxJQUFXLE1BQU0sQ0FBQyxLQUFhO1FBQzdCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO0lBQ3ZCLENBQUM7SUFDTSxXQUFXO1FBQ2hCLElBQUksQ0FBQyxPQUFPLEdBQUcsU0FBUyxDQUFDO0lBQzNCLENBQUM7SUFDRCxvREFBb0Q7SUFDcEQsSUFBVyxXQUFXO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDOztBQXBHSCxrSUFxR0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgSGFzaGlDb3JwLCBJbmMuXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTVBMLTIuMFxuICovXG5cbmltcG9ydCAqIGFzIGNka3RmIGZyb20gJ2Nka3RmJztcbmltcG9ydCB7IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc0luZm9UeXBlVHJhbnNmb3JtYXRpb25zVHJhbnNmb3JtYXRpb25zLFxuZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zSW5mb1R5cGVUcmFuc2Zvcm1hdGlvbnNUcmFuc2Zvcm1hdGlvbnNUb1RlcnJhZm9ybSxcbmRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc0luZm9UeXBlVHJhbnNmb3JtYXRpb25zVHJhbnNmb3JtYXRpb25zVG9IY2xUZXJyYWZvcm0sXG5EYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNJbmZvVHlwZVRyYW5zZm9ybWF0aW9uc1RyYW5zZm9ybWF0aW9uc0xpc3QsXG5EYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNDb25kaXRpb24sXG5kYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNDb25kaXRpb25Ub1RlcnJhZm9ybSxcbmRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc0NvbmRpdGlvblRvSGNsVGVycmFmb3JtLFxuRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zQ29uZGl0aW9uT3V0cHV0UmVmZXJlbmNlLFxuRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zRmllbGRzLFxuZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zRmllbGRzVG9UZXJyYWZvcm0sXG5kYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNGaWVsZHNUb0hjbFRlcnJhZm9ybSxcbkRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc0ZpZWxkc0xpc3QsXG5EYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnSW1hZ2VUcmFuc2Zvcm1hdGlvbnMsXG5kYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnSW1hZ2VUcmFuc2Zvcm1hdGlvbnNUb1RlcnJhZm9ybSxcbmRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdJbWFnZVRyYW5zZm9ybWF0aW9uc1RvSGNsVGVycmFmb3JtLFxuRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ0ltYWdlVHJhbnNmb3JtYXRpb25zT3V0cHV0UmVmZXJlbmNlLFxuRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ0luZm9UeXBlVHJhbnNmb3JtYXRpb25zLFxuZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ0luZm9UeXBlVHJhbnNmb3JtYXRpb25zVG9UZXJyYWZvcm0sXG5kYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnSW5mb1R5cGVUcmFuc2Zvcm1hdGlvbnNUb0hjbFRlcnJhZm9ybSxcbkRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdJbmZvVHlwZVRyYW5zZm9ybWF0aW9uc091dHB1dFJlZmVyZW5jZSB9IGZyb20gJy4vc3RydWN0czAnXG5leHBvcnQgaW50ZXJmYWNlIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc0luZm9UeXBlVHJhbnNmb3JtYXRpb25zIHtcbiAgLyoqXG4gICogdHJhbnNmb3JtYXRpb25zIGJsb2NrXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI3RyYW5zZm9ybWF0aW9ucyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjdHJhbnNmb3JtYXRpb25zfVxuICAqL1xuICByZWFkb25seSB0cmFuc2Zvcm1hdGlvbnM6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc0luZm9UeXBlVHJhbnNmb3JtYXRpb25zVHJhbnNmb3JtYXRpb25zW10gfCBjZGt0Zi5JUmVzb2x2YWJsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc0luZm9UeXBlVHJhbnNmb3JtYXRpb25zVG9UZXJyYWZvcm0oc3RydWN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zSW5mb1R5cGVUcmFuc2Zvcm1hdGlvbnNPdXRwdXRSZWZlcmVuY2UgfCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNJbmZvVHlwZVRyYW5zZm9ybWF0aW9ucyk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpIHx8IGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIGlmIChjZGt0Zi5pc0NvbXBsZXhFbGVtZW50KHN0cnVjdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGNvbXBsZXggZWxlbWVudCB3YXMgdXNlZCBhcyBjb25maWd1cmF0aW9uLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQ6IGh0dHBzOi8vY2RrLnRmL2NvbXBsZXgtb2JqZWN0LWFzLWNvbmZpZ3VyYXRpb25cIik7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB0cmFuc2Zvcm1hdGlvbnM6IGNka3RmLmxpc3RNYXBwZXIoZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zSW5mb1R5cGVUcmFuc2Zvcm1hdGlvbnNUcmFuc2Zvcm1hdGlvbnNUb1RlcnJhZm9ybSwgdHJ1ZSkoc3RydWN0IS50cmFuc2Zvcm1hdGlvbnMpLFxuICB9XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc0luZm9UeXBlVHJhbnNmb3JtYXRpb25zVG9IY2xUZXJyYWZvcm0oc3RydWN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zSW5mb1R5cGVUcmFuc2Zvcm1hdGlvbnNPdXRwdXRSZWZlcmVuY2UgfCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNJbmZvVHlwZVRyYW5zZm9ybWF0aW9ucyk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpIHx8IGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIGlmIChjZGt0Zi5pc0NvbXBsZXhFbGVtZW50KHN0cnVjdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGNvbXBsZXggZWxlbWVudCB3YXMgdXNlZCBhcyBjb25maWd1cmF0aW9uLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQ6IGh0dHBzOi8vY2RrLnRmL2NvbXBsZXgtb2JqZWN0LWFzLWNvbmZpZ3VyYXRpb25cIik7XG4gIH1cbiAgY29uc3QgYXR0cnMgPSB7XG4gICAgdHJhbnNmb3JtYXRpb25zOiB7XG4gICAgICB2YWx1ZTogY2RrdGYubGlzdE1hcHBlckhjbChkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNJbmZvVHlwZVRyYW5zZm9ybWF0aW9uc1RyYW5zZm9ybWF0aW9uc1RvSGNsVGVycmFmb3JtLCB0cnVlKShzdHJ1Y3QhLnRyYW5zZm9ybWF0aW9ucyksXG4gICAgICBpc0Jsb2NrOiB0cnVlLFxuICAgICAgdHlwZTogXCJsaXN0XCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcIkRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc0luZm9UeXBlVHJhbnNmb3JtYXRpb25zVHJhbnNmb3JtYXRpb25zTGlzdFwiLFxuICAgIH0sXG4gIH07XG5cbiAgLy8gcmVtb3ZlIHVuZGVmaW5lZCBhdHRyaWJ1dGVzXG4gIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMoYXR0cnMpLmZpbHRlcigoW18sIHZhbHVlXSkgPT4gdmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZS52YWx1ZSAhPT0gdW5kZWZpbmVkKSk7XG59XG5cbmV4cG9ydCBjbGFzcyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNJbmZvVHlwZVRyYW5zZm9ybWF0aW9uc091dHB1dFJlZmVyZW5jZSBleHRlbmRzIGNka3RmLkNvbXBsZXhPYmplY3Qge1xuICBwcml2YXRlIGlzRW1wdHlPYmplY3QgPSBmYWxzZTtcblxuICAvKipcbiAgKiBAcGFyYW0gdGVycmFmb3JtUmVzb3VyY2UgVGhlIHBhcmVudCByZXNvdXJjZVxuICAqIEBwYXJhbSB0ZXJyYWZvcm1BdHRyaWJ1dGUgVGhlIGF0dHJpYnV0ZSBvbiB0aGUgcGFyZW50IHJlc291cmNlIHRoaXMgY2xhc3MgaXMgcmVmZXJlbmNpbmdcbiAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHRlcnJhZm9ybVJlc291cmNlOiBjZGt0Zi5JSW50ZXJwb2xhdGluZ1BhcmVudCwgdGVycmFmb3JtQXR0cmlidXRlOiBzdHJpbmcpIHtcbiAgICBzdXBlcih0ZXJyYWZvcm1SZXNvdXJjZSwgdGVycmFmb3JtQXR0cmlidXRlLCBmYWxzZSwgMCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGludGVybmFsVmFsdWUoKTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zSW5mb1R5cGVUcmFuc2Zvcm1hdGlvbnMgfCB1bmRlZmluZWQge1xuICAgIGxldCBoYXNBbnlWYWx1ZXMgPSB0aGlzLmlzRW1wdHlPYmplY3Q7XG4gICAgY29uc3QgaW50ZXJuYWxWYWx1ZVJlc3VsdDogYW55ID0ge307XG4gICAgaWYgKHRoaXMuX3RyYW5zZm9ybWF0aW9ucz8uaW50ZXJuYWxWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC50cmFuc2Zvcm1hdGlvbnMgPSB0aGlzLl90cmFuc2Zvcm1hdGlvbnM/LmludGVybmFsVmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBoYXNBbnlWYWx1ZXMgPyBpbnRlcm5hbFZhbHVlUmVzdWx0IDogdW5kZWZpbmVkO1xuICB9XG5cbiAgcHVibGljIHNldCBpbnRlcm5hbFZhbHVlKHZhbHVlOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNJbmZvVHlwZVRyYW5zZm9ybWF0aW9ucyB8IHVuZGVmaW5lZCkge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmlzRW1wdHlPYmplY3QgPSBmYWxzZTtcbiAgICAgIHRoaXMuX3RyYW5zZm9ybWF0aW9ucy5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggPT09IDA7XG4gICAgICB0aGlzLl90cmFuc2Zvcm1hdGlvbnMuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlLnRyYW5zZm9ybWF0aW9ucztcbiAgICB9XG4gIH1cblxuICAvLyB0cmFuc2Zvcm1hdGlvbnMgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiBmYWxzZSwgcmVxdWlyZWQ6IHRydWVcbiAgcHJpdmF0ZSBfdHJhbnNmb3JtYXRpb25zID0gbmV3IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc0luZm9UeXBlVHJhbnNmb3JtYXRpb25zVHJhbnNmb3JtYXRpb25zTGlzdCh0aGlzLCBcInRyYW5zZm9ybWF0aW9uc1wiLCBmYWxzZSk7XG4gIHB1YmxpYyBnZXQgdHJhbnNmb3JtYXRpb25zKCkge1xuICAgIHJldHVybiB0aGlzLl90cmFuc2Zvcm1hdGlvbnM7XG4gIH1cbiAgcHVibGljIHB1dFRyYW5zZm9ybWF0aW9ucyh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zSW5mb1R5cGVUcmFuc2Zvcm1hdGlvbnNUcmFuc2Zvcm1hdGlvbnNbXSB8IGNka3RmLklSZXNvbHZhYmxlKSB7XG4gICAgdGhpcy5fdHJhbnNmb3JtYXRpb25zLmludGVybmFsVmFsdWUgPSB2YWx1ZTtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgdHJhbnNmb3JtYXRpb25zSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RyYW5zZm9ybWF0aW9ucy5pbnRlcm5hbFZhbHVlO1xuICB9XG59XG5leHBvcnQgaW50ZXJmYWNlIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c01heERhdGVWYWx1ZSB7XG4gIC8qKlxuICAqIERheSBvZiBhIG1vbnRoLiBNdXN0IGJlIGZyb20gMSB0byAzMSBhbmQgdmFsaWQgZm9yIHRoZSB5ZWFyIGFuZCBtb250aCwgb3IgMCB0byBzcGVjaWZ5IGEgeWVhciBieSBpdHNlbGYgb3IgYSB5ZWFyIGFuZCBtb250aCB3aGVyZSB0aGUgZGF5IGlzbid0IHNpZ25pZmljYW50LlxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNkYXkgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI2RheX1cbiAgKi9cbiAgcmVhZG9ubHkgZGF5PzogbnVtYmVyO1xuICAvKipcbiAgKiBNb250aCBvZiBhIHllYXIuIE11c3QgYmUgZnJvbSAxIHRvIDEyLCBvciAwIHRvIHNwZWNpZnkgYSB5ZWFyIHdpdGhvdXQgYSBtb250aCBhbmQgZGF5LlxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNtb250aCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjbW9udGh9XG4gICovXG4gIHJlYWRvbmx5IG1vbnRoPzogbnVtYmVyO1xuICAvKipcbiAgKiBZZWFyIG9mIHRoZSBkYXRlLiBNdXN0IGJlIGZyb20gMSB0byA5OTk5LCBvciAwIHRvIHNwZWNpZnkgYSBkYXRlIHdpdGhvdXQgYSB5ZWFyLlxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSN5ZWFyIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSN5ZWFyfVxuICAqL1xuICByZWFkb25seSB5ZWFyPzogbnVtYmVyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzTWF4RGF0ZVZhbHVlVG9UZXJyYWZvcm0oc3RydWN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzTWF4RGF0ZVZhbHVlT3V0cHV0UmVmZXJlbmNlIHwgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzTWF4RGF0ZVZhbHVlKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkgfHwgY2RrdGYuVG9rZW5pemF0aW9uLmlzUmVzb2x2YWJsZShzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgaWYgKGNka3RmLmlzQ29tcGxleEVsZW1lbnQoc3RydWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkEgY29tcGxleCBlbGVtZW50IHdhcyB1c2VkIGFzIGNvbmZpZ3VyYXRpb24sIHRoaXMgaXMgbm90IHN1cHBvcnRlZDogaHR0cHM6Ly9jZGsudGYvY29tcGxleC1vYmplY3QtYXMtY29uZmlndXJhdGlvblwiKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGRheTogY2RrdGYubnVtYmVyVG9UZXJyYWZvcm0oc3RydWN0IS5kYXkpLFxuICAgIG1vbnRoOiBjZGt0Zi5udW1iZXJUb1RlcnJhZm9ybShzdHJ1Y3QhLm1vbnRoKSxcbiAgICB5ZWFyOiBjZGt0Zi5udW1iZXJUb1RlcnJhZm9ybShzdHJ1Y3QhLnllYXIpLFxuICB9XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c01heERhdGVWYWx1ZVRvSGNsVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c01heERhdGVWYWx1ZU91dHB1dFJlZmVyZW5jZSB8IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c01heERhdGVWYWx1ZSk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpIHx8IGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIGlmIChjZGt0Zi5pc0NvbXBsZXhFbGVtZW50KHN0cnVjdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGNvbXBsZXggZWxlbWVudCB3YXMgdXNlZCBhcyBjb25maWd1cmF0aW9uLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQ6IGh0dHBzOi8vY2RrLnRmL2NvbXBsZXgtb2JqZWN0LWFzLWNvbmZpZ3VyYXRpb25cIik7XG4gIH1cbiAgY29uc3QgYXR0cnMgPSB7XG4gICAgZGF5OiB7XG4gICAgICB2YWx1ZTogY2RrdGYubnVtYmVyVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5kYXkpLFxuICAgICAgaXNCbG9jazogZmFsc2UsXG4gICAgICB0eXBlOiBcInNpbXBsZVwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJudW1iZXJcIixcbiAgICB9LFxuICAgIG1vbnRoOiB7XG4gICAgICB2YWx1ZTogY2RrdGYubnVtYmVyVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5tb250aCksXG4gICAgICBpc0Jsb2NrOiBmYWxzZSxcbiAgICAgIHR5cGU6IFwic2ltcGxlXCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcIm51bWJlclwiLFxuICAgIH0sXG4gICAgeWVhcjoge1xuICAgICAgdmFsdWU6IGNka3RmLm51bWJlclRvSGNsVGVycmFmb3JtKHN0cnVjdCEueWVhciksXG4gICAgICBpc0Jsb2NrOiBmYWxzZSxcbiAgICAgIHR5cGU6IFwic2ltcGxlXCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcIm51bWJlclwiLFxuICAgIH0sXG4gIH07XG5cbiAgLy8gcmVtb3ZlIHVuZGVmaW5lZCBhdHRyaWJ1dGVzXG4gIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMoYXR0cnMpLmZpbHRlcigoW18sIHZhbHVlXSkgPT4gdmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZS52YWx1ZSAhPT0gdW5kZWZpbmVkKSk7XG59XG5cbmV4cG9ydCBjbGFzcyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkJ1Y2tldGluZ0NvbmZpZ0J1Y2tldHNNYXhEYXRlVmFsdWVPdXRwdXRSZWZlcmVuY2UgZXh0ZW5kcyBjZGt0Zi5Db21wbGV4T2JqZWN0IHtcbiAgcHJpdmF0ZSBpc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG5cbiAgLyoqXG4gICogQHBhcmFtIHRlcnJhZm9ybVJlc291cmNlIFRoZSBwYXJlbnQgcmVzb3VyY2VcbiAgKiBAcGFyYW0gdGVycmFmb3JtQXR0cmlidXRlIFRoZSBhdHRyaWJ1dGUgb24gdGhlIHBhcmVudCByZXNvdXJjZSB0aGlzIGNsYXNzIGlzIHJlZmVyZW5jaW5nXG4gICovXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcih0ZXJyYWZvcm1SZXNvdXJjZTogY2RrdGYuSUludGVycG9sYXRpbmdQYXJlbnQsIHRlcnJhZm9ybUF0dHJpYnV0ZTogc3RyaW5nKSB7XG4gICAgc3VwZXIodGVycmFmb3JtUmVzb3VyY2UsIHRlcnJhZm9ybUF0dHJpYnV0ZSwgZmFsc2UsIDApO1xuICB9XG5cbiAgcHVibGljIGdldCBpbnRlcm5hbFZhbHVlKCk6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c01heERhdGVWYWx1ZSB8IHVuZGVmaW5lZCB7XG4gICAgbGV0IGhhc0FueVZhbHVlcyA9IHRoaXMuaXNFbXB0eU9iamVjdDtcbiAgICBjb25zdCBpbnRlcm5hbFZhbHVlUmVzdWx0OiBhbnkgPSB7fTtcbiAgICBpZiAodGhpcy5fZGF5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LmRheSA9IHRoaXMuX2RheTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX21vbnRoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0Lm1vbnRoID0gdGhpcy5fbW9udGg7XG4gICAgfVxuICAgIGlmICh0aGlzLl95ZWFyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LnllYXIgPSB0aGlzLl95ZWFyO1xuICAgIH1cbiAgICByZXR1cm4gaGFzQW55VmFsdWVzID8gaW50ZXJuYWxWYWx1ZVJlc3VsdCA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgaW50ZXJuYWxWYWx1ZSh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzTWF4RGF0ZVZhbHVlIHwgdW5kZWZpbmVkKSB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IGZhbHNlO1xuICAgICAgdGhpcy5fZGF5ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fbW9udGggPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl95ZWFyID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggPT09IDA7XG4gICAgICB0aGlzLl9kYXkgPSB2YWx1ZS5kYXk7XG4gICAgICB0aGlzLl9tb250aCA9IHZhbHVlLm1vbnRoO1xuICAgICAgdGhpcy5feWVhciA9IHZhbHVlLnllYXI7XG4gICAgfVxuICB9XG5cbiAgLy8gZGF5IC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX2RheT86IG51bWJlcjsgXG4gIHB1YmxpYyBnZXQgZGF5KCkge1xuICAgIHJldHVybiB0aGlzLmdldE51bWJlckF0dHJpYnV0ZSgnZGF5Jyk7XG4gIH1cbiAgcHVibGljIHNldCBkYXkodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX2RheSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldERheSgpIHtcbiAgICB0aGlzLl9kYXkgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IGRheUlucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9kYXk7XG4gIH1cblxuICAvLyBtb250aCAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9tb250aD86IG51bWJlcjsgXG4gIHB1YmxpYyBnZXQgbW9udGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TnVtYmVyQXR0cmlidXRlKCdtb250aCcpO1xuICB9XG4gIHB1YmxpYyBzZXQgbW9udGgodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX21vbnRoID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0TW9udGgoKSB7XG4gICAgdGhpcy5fbW9udGggPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IG1vbnRoSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX21vbnRoO1xuICB9XG5cbiAgLy8geWVhciAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF95ZWFyPzogbnVtYmVyOyBcbiAgcHVibGljIGdldCB5ZWFyKCkge1xuICAgIHJldHVybiB0aGlzLmdldE51bWJlckF0dHJpYnV0ZSgneWVhcicpO1xuICB9XG4gIHB1YmxpYyBzZXQgeWVhcih2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5feWVhciA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldFllYXIoKSB7XG4gICAgdGhpcy5feWVhciA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgeWVhcklucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl95ZWFyO1xuICB9XG59XG5leHBvcnQgaW50ZXJmYWNlIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c01heFRpbWVWYWx1ZSB7XG4gIC8qKlxuICAqIEhvdXJzIG9mIGRheSBpbiAyNCBob3VyIGZvcm1hdC4gU2hvdWxkIGJlIGZyb20gMCB0byAyMy4gQW4gQVBJIG1heSBjaG9vc2UgdG8gYWxsb3cgdGhlIHZhbHVlIFwiMjQ6MDA6MDBcIiBmb3Igc2NlbmFyaW9zIGxpa2UgYnVzaW5lc3MgY2xvc2luZyB0aW1lLlxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNob3VycyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjaG91cnN9XG4gICovXG4gIHJlYWRvbmx5IGhvdXJzPzogbnVtYmVyO1xuICAvKipcbiAgKiBNaW51dGVzIG9mIGhvdXIgb2YgZGF5LiBNdXN0IGJlIGZyb20gMCB0byA1OS5cbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjbWludXRlcyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjbWludXRlc31cbiAgKi9cbiAgcmVhZG9ubHkgbWludXRlcz86IG51bWJlcjtcbiAgLyoqXG4gICogRnJhY3Rpb25zIG9mIHNlY29uZHMgaW4gbmFub3NlY29uZHMuIE11c3QgYmUgZnJvbSAwIHRvIDk5OSw5OTksOTk5LlxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNuYW5vcyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjbmFub3N9XG4gICovXG4gIHJlYWRvbmx5IG5hbm9zPzogbnVtYmVyO1xuICAvKipcbiAgKiBTZWNvbmRzIG9mIG1pbnV0ZXMgb2YgdGhlIHRpbWUuIE11c3Qgbm9ybWFsbHkgYmUgZnJvbSAwIHRvIDU5LiBBbiBBUEkgbWF5IGFsbG93IHRoZSB2YWx1ZSA2MCBpZiBpdCBhbGxvd3MgbGVhcC1zZWNvbmRzLlxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNzZWNvbmRzIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSNzZWNvbmRzfVxuICAqL1xuICByZWFkb25seSBzZWNvbmRzPzogbnVtYmVyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzTWF4VGltZVZhbHVlVG9UZXJyYWZvcm0oc3RydWN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzTWF4VGltZVZhbHVlT3V0cHV0UmVmZXJlbmNlIHwgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzTWF4VGltZVZhbHVlKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkgfHwgY2RrdGYuVG9rZW5pemF0aW9uLmlzUmVzb2x2YWJsZShzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgaWYgKGNka3RmLmlzQ29tcGxleEVsZW1lbnQoc3RydWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkEgY29tcGxleCBlbGVtZW50IHdhcyB1c2VkIGFzIGNvbmZpZ3VyYXRpb24sIHRoaXMgaXMgbm90IHN1cHBvcnRlZDogaHR0cHM6Ly9jZGsudGYvY29tcGxleC1vYmplY3QtYXMtY29uZmlndXJhdGlvblwiKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGhvdXJzOiBjZGt0Zi5udW1iZXJUb1RlcnJhZm9ybShzdHJ1Y3QhLmhvdXJzKSxcbiAgICBtaW51dGVzOiBjZGt0Zi5udW1iZXJUb1RlcnJhZm9ybShzdHJ1Y3QhLm1pbnV0ZXMpLFxuICAgIG5hbm9zOiBjZGt0Zi5udW1iZXJUb1RlcnJhZm9ybShzdHJ1Y3QhLm5hbm9zKSxcbiAgICBzZWNvbmRzOiBjZGt0Zi5udW1iZXJUb1RlcnJhZm9ybShzdHJ1Y3QhLnNlY29uZHMpLFxuICB9XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c01heFRpbWVWYWx1ZVRvSGNsVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c01heFRpbWVWYWx1ZU91dHB1dFJlZmVyZW5jZSB8IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c01heFRpbWVWYWx1ZSk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpIHx8IGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIGlmIChjZGt0Zi5pc0NvbXBsZXhFbGVtZW50KHN0cnVjdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGNvbXBsZXggZWxlbWVudCB3YXMgdXNlZCBhcyBjb25maWd1cmF0aW9uLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQ6IGh0dHBzOi8vY2RrLnRmL2NvbXBsZXgtb2JqZWN0LWFzLWNvbmZpZ3VyYXRpb25cIik7XG4gIH1cbiAgY29uc3QgYXR0cnMgPSB7XG4gICAgaG91cnM6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5udW1iZXJUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLmhvdXJzKSxcbiAgICAgIGlzQmxvY2s6IGZhbHNlLFxuICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwibnVtYmVyXCIsXG4gICAgfSxcbiAgICBtaW51dGVzOiB7XG4gICAgICB2YWx1ZTogY2RrdGYubnVtYmVyVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5taW51dGVzKSxcbiAgICAgIGlzQmxvY2s6IGZhbHNlLFxuICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwibnVtYmVyXCIsXG4gICAgfSxcbiAgICBuYW5vczoge1xuICAgICAgdmFsdWU6IGNka3RmLm51bWJlclRvSGNsVGVycmFmb3JtKHN0cnVjdCEubmFub3MpLFxuICAgICAgaXNCbG9jazogZmFsc2UsXG4gICAgICB0eXBlOiBcInNpbXBsZVwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJudW1iZXJcIixcbiAgICB9LFxuICAgIHNlY29uZHM6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5udW1iZXJUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLnNlY29uZHMpLFxuICAgICAgaXNCbG9jazogZmFsc2UsXG4gICAgICB0eXBlOiBcInNpbXBsZVwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJudW1iZXJcIixcbiAgICB9LFxuICB9O1xuXG4gIC8vIHJlbW92ZSB1bmRlZmluZWQgYXR0cmlidXRlc1xuICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5lbnRyaWVzKGF0dHJzKS5maWx0ZXIoKFtfLCB2YWx1ZV0pID0+IHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUudmFsdWUgIT09IHVuZGVmaW5lZCkpO1xufVxuXG5leHBvcnQgY2xhc3MgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzTWF4VGltZVZhbHVlT3V0cHV0UmVmZXJlbmNlIGV4dGVuZHMgY2RrdGYuQ29tcGxleE9iamVjdCB7XG4gIHByaXZhdGUgaXNFbXB0eU9iamVjdCA9IGZhbHNlO1xuXG4gIC8qKlxuICAqIEBwYXJhbSB0ZXJyYWZvcm1SZXNvdXJjZSBUaGUgcGFyZW50IHJlc291cmNlXG4gICogQHBhcmFtIHRlcnJhZm9ybUF0dHJpYnV0ZSBUaGUgYXR0cmlidXRlIG9uIHRoZSBwYXJlbnQgcmVzb3VyY2UgdGhpcyBjbGFzcyBpcyByZWZlcmVuY2luZ1xuICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IodGVycmFmb3JtUmVzb3VyY2U6IGNka3RmLklJbnRlcnBvbGF0aW5nUGFyZW50LCB0ZXJyYWZvcm1BdHRyaWJ1dGU6IHN0cmluZykge1xuICAgIHN1cGVyKHRlcnJhZm9ybVJlc291cmNlLCB0ZXJyYWZvcm1BdHRyaWJ1dGUsIGZhbHNlLCAwKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgaW50ZXJuYWxWYWx1ZSgpOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkJ1Y2tldGluZ0NvbmZpZ0J1Y2tldHNNYXhUaW1lVmFsdWUgfCB1bmRlZmluZWQge1xuICAgIGxldCBoYXNBbnlWYWx1ZXMgPSB0aGlzLmlzRW1wdHlPYmplY3Q7XG4gICAgY29uc3QgaW50ZXJuYWxWYWx1ZVJlc3VsdDogYW55ID0ge307XG4gICAgaWYgKHRoaXMuX2hvdXJzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LmhvdXJzID0gdGhpcy5faG91cnM7XG4gICAgfVxuICAgIGlmICh0aGlzLl9taW51dGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0Lm1pbnV0ZXMgPSB0aGlzLl9taW51dGVzO1xuICAgIH1cbiAgICBpZiAodGhpcy5fbmFub3MgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQubmFub3MgPSB0aGlzLl9uYW5vcztcbiAgICB9XG4gICAgaWYgKHRoaXMuX3NlY29uZHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQuc2Vjb25kcyA9IHRoaXMuX3NlY29uZHM7XG4gICAgfVxuICAgIHJldHVybiBoYXNBbnlWYWx1ZXMgPyBpbnRlcm5hbFZhbHVlUmVzdWx0IDogdW5kZWZpbmVkO1xuICB9XG5cbiAgcHVibGljIHNldCBpbnRlcm5hbFZhbHVlKHZhbHVlOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkJ1Y2tldGluZ0NvbmZpZ0J1Y2tldHNNYXhUaW1lVmFsdWUgfCB1bmRlZmluZWQpIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5pc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG4gICAgICB0aGlzLl9ob3VycyA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX21pbnV0ZXMgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9uYW5vcyA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX3NlY29uZHMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5pc0VtcHR5T2JqZWN0ID0gT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aCA9PT0gMDtcbiAgICAgIHRoaXMuX2hvdXJzID0gdmFsdWUuaG91cnM7XG4gICAgICB0aGlzLl9taW51dGVzID0gdmFsdWUubWludXRlcztcbiAgICAgIHRoaXMuX25hbm9zID0gdmFsdWUubmFub3M7XG4gICAgICB0aGlzLl9zZWNvbmRzID0gdmFsdWUuc2Vjb25kcztcbiAgICB9XG4gIH1cblxuICAvLyBob3VycyAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9ob3Vycz86IG51bWJlcjsgXG4gIHB1YmxpYyBnZXQgaG91cnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TnVtYmVyQXR0cmlidXRlKCdob3VycycpO1xuICB9XG4gIHB1YmxpYyBzZXQgaG91cnModmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX2hvdXJzID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0SG91cnMoKSB7XG4gICAgdGhpcy5faG91cnMgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IGhvdXJzSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2hvdXJzO1xuICB9XG5cbiAgLy8gbWludXRlcyAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9taW51dGVzPzogbnVtYmVyOyBcbiAgcHVibGljIGdldCBtaW51dGVzKCkge1xuICAgIHJldHVybiB0aGlzLmdldE51bWJlckF0dHJpYnV0ZSgnbWludXRlcycpO1xuICB9XG4gIHB1YmxpYyBzZXQgbWludXRlcyh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5fbWludXRlcyA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldE1pbnV0ZXMoKSB7XG4gICAgdGhpcy5fbWludXRlcyA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgbWludXRlc0lucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9taW51dGVzO1xuICB9XG5cbiAgLy8gbmFub3MgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfbmFub3M/OiBudW1iZXI7IFxuICBwdWJsaWMgZ2V0IG5hbm9zKCkge1xuICAgIHJldHVybiB0aGlzLmdldE51bWJlckF0dHJpYnV0ZSgnbmFub3MnKTtcbiAgfVxuICBwdWJsaWMgc2V0IG5hbm9zKHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl9uYW5vcyA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldE5hbm9zKCkge1xuICAgIHRoaXMuX25hbm9zID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBuYW5vc0lucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9uYW5vcztcbiAgfVxuXG4gIC8vIHNlY29uZHMgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfc2Vjb25kcz86IG51bWJlcjsgXG4gIHB1YmxpYyBnZXQgc2Vjb25kcygpIHtcbiAgICByZXR1cm4gdGhpcy5nZXROdW1iZXJBdHRyaWJ1dGUoJ3NlY29uZHMnKTtcbiAgfVxuICBwdWJsaWMgc2V0IHNlY29uZHModmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX3NlY29uZHMgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRTZWNvbmRzKCkge1xuICAgIHRoaXMuX3NlY29uZHMgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IHNlY29uZHNJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2Vjb25kcztcbiAgfVxufVxuZXhwb3J0IGludGVyZmFjZSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkJ1Y2tldGluZ0NvbmZpZ0J1Y2tldHNNYXgge1xuICAvKipcbiAgKiBBIGJvb2xlYW4gdmFsdWUuXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI2Jvb2xlYW5fdmFsdWUgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI2Jvb2xlYW5fdmFsdWV9XG4gICovXG4gIHJlYWRvbmx5IGJvb2xlYW5WYWx1ZT86IGJvb2xlYW4gfCBjZGt0Zi5JUmVzb2x2YWJsZTtcbiAgLyoqXG4gICogUmVwcmVzZW50cyBhIGRheSBvZiB0aGUgd2Vlay4gUG9zc2libGUgdmFsdWVzOiBbXCJNT05EQVlcIiwgXCJUVUVTREFZXCIsIFwiV0VETkVTREFZXCIsIFwiVEhVUlNEQVlcIiwgXCJGUklEQVlcIiwgXCJTQVRVUkRBWVwiLCBcIlNVTkRBWVwiXVxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNkYXlfb2Zfd2Vla192YWx1ZSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjZGF5X29mX3dlZWtfdmFsdWV9XG4gICovXG4gIHJlYWRvbmx5IGRheU9mV2Vla1ZhbHVlPzogc3RyaW5nO1xuICAvKipcbiAgKiBBIGZsb2F0IHZhbHVlLlxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNmbG9hdF92YWx1ZSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjZmxvYXRfdmFsdWV9XG4gICovXG4gIHJlYWRvbmx5IGZsb2F0VmFsdWU/OiBudW1iZXI7XG4gIC8qKlxuICAqIEFuIGludGVnZXIgdmFsdWUgKGludDY0IGZvcm1hdClcbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjaW50ZWdlcl92YWx1ZSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjaW50ZWdlcl92YWx1ZX1cbiAgKi9cbiAgcmVhZG9ubHkgaW50ZWdlclZhbHVlPzogc3RyaW5nO1xuICAvKipcbiAgKiBBIHN0cmluZyB2YWx1ZS5cbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjc3RyaW5nX3ZhbHVlIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSNzdHJpbmdfdmFsdWV9XG4gICovXG4gIHJlYWRvbmx5IHN0cmluZ1ZhbHVlPzogc3RyaW5nO1xuICAvKipcbiAgKiBBIHRpbWVzdGFtcCBpbiBSRkMzMzM5IFVUQyBcIlp1bHVcIiBmb3JtYXQsIHdpdGggbmFub3NlY29uZCByZXNvbHV0aW9uIGFuZCB1cCB0byBuaW5lIGZyYWN0aW9uYWwgZGlnaXRzLiBFeGFtcGxlczogXCIyMDE0LTEwLTAyVDE1OjAxOjIzWlwiIGFuZCBcIjIwMTQtMTAtMDJUMTU6MDE6MjMuMDQ1MTIzNDU2WlwiLlxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSN0aW1lc3RhbXBfdmFsdWUgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI3RpbWVzdGFtcF92YWx1ZX1cbiAgKi9cbiAgcmVhZG9ubHkgdGltZXN0YW1wVmFsdWU/OiBzdHJpbmc7XG4gIC8qKlxuICAqIGRhdGVfdmFsdWUgYmxvY2tcbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjZGF0ZV92YWx1ZSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjZGF0ZV92YWx1ZX1cbiAgKi9cbiAgcmVhZG9ubHkgZGF0ZVZhbHVlPzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzTWF4RGF0ZVZhbHVlO1xuICAvKipcbiAgKiB0aW1lX3ZhbHVlIGJsb2NrXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI3RpbWVfdmFsdWUgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI3RpbWVfdmFsdWV9XG4gICovXG4gIHJlYWRvbmx5IHRpbWVWYWx1ZT86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c01heFRpbWVWYWx1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c01heFRvVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c01heE91dHB1dFJlZmVyZW5jZSB8IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c01heCk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpIHx8IGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIGlmIChjZGt0Zi5pc0NvbXBsZXhFbGVtZW50KHN0cnVjdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGNvbXBsZXggZWxlbWVudCB3YXMgdXNlZCBhcyBjb25maWd1cmF0aW9uLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQ6IGh0dHBzOi8vY2RrLnRmL2NvbXBsZXgtb2JqZWN0LWFzLWNvbmZpZ3VyYXRpb25cIik7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBib29sZWFuX3ZhbHVlOiBjZGt0Zi5ib29sZWFuVG9UZXJyYWZvcm0oc3RydWN0IS5ib29sZWFuVmFsdWUpLFxuICAgIGRheV9vZl93ZWVrX3ZhbHVlOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLmRheU9mV2Vla1ZhbHVlKSxcbiAgICBmbG9hdF92YWx1ZTogY2RrdGYubnVtYmVyVG9UZXJyYWZvcm0oc3RydWN0IS5mbG9hdFZhbHVlKSxcbiAgICBpbnRlZ2VyX3ZhbHVlOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLmludGVnZXJWYWx1ZSksXG4gICAgc3RyaW5nX3ZhbHVlOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLnN0cmluZ1ZhbHVlKSxcbiAgICB0aW1lc3RhbXBfdmFsdWU6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEudGltZXN0YW1wVmFsdWUpLFxuICAgIGRhdGVfdmFsdWU6IGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c01heERhdGVWYWx1ZVRvVGVycmFmb3JtKHN0cnVjdCEuZGF0ZVZhbHVlKSxcbiAgICB0aW1lX3ZhbHVlOiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkJ1Y2tldGluZ0NvbmZpZ0J1Y2tldHNNYXhUaW1lVmFsdWVUb1RlcnJhZm9ybShzdHJ1Y3QhLnRpbWVWYWx1ZSksXG4gIH1cbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzTWF4VG9IY2xUZXJyYWZvcm0oc3RydWN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzTWF4T3V0cHV0UmVmZXJlbmNlIHwgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzTWF4KTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkgfHwgY2RrdGYuVG9rZW5pemF0aW9uLmlzUmVzb2x2YWJsZShzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgaWYgKGNka3RmLmlzQ29tcGxleEVsZW1lbnQoc3RydWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkEgY29tcGxleCBlbGVtZW50IHdhcyB1c2VkIGFzIGNvbmZpZ3VyYXRpb24sIHRoaXMgaXMgbm90IHN1cHBvcnRlZDogaHR0cHM6Ly9jZGsudGYvY29tcGxleC1vYmplY3QtYXMtY29uZmlndXJhdGlvblwiKTtcbiAgfVxuICBjb25zdCBhdHRycyA9IHtcbiAgICBib29sZWFuX3ZhbHVlOiB7XG4gICAgICB2YWx1ZTogY2RrdGYuYm9vbGVhblRvSGNsVGVycmFmb3JtKHN0cnVjdCEuYm9vbGVhblZhbHVlKSxcbiAgICAgIGlzQmxvY2s6IGZhbHNlLFxuICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwiYm9vbGVhblwiLFxuICAgIH0sXG4gICAgZGF5X29mX3dlZWtfdmFsdWU6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5zdHJpbmdUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLmRheU9mV2Vla1ZhbHVlKSxcbiAgICAgIGlzQmxvY2s6IGZhbHNlLFxuICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwic3RyaW5nXCIsXG4gICAgfSxcbiAgICBmbG9hdF92YWx1ZToge1xuICAgICAgdmFsdWU6IGNka3RmLm51bWJlclRvSGNsVGVycmFmb3JtKHN0cnVjdCEuZmxvYXRWYWx1ZSksXG4gICAgICBpc0Jsb2NrOiBmYWxzZSxcbiAgICAgIHR5cGU6IFwic2ltcGxlXCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcIm51bWJlclwiLFxuICAgIH0sXG4gICAgaW50ZWdlcl92YWx1ZToge1xuICAgICAgdmFsdWU6IGNka3RmLnN0cmluZ1RvSGNsVGVycmFmb3JtKHN0cnVjdCEuaW50ZWdlclZhbHVlKSxcbiAgICAgIGlzQmxvY2s6IGZhbHNlLFxuICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwic3RyaW5nXCIsXG4gICAgfSxcbiAgICBzdHJpbmdfdmFsdWU6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5zdHJpbmdUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLnN0cmluZ1ZhbHVlKSxcbiAgICAgIGlzQmxvY2s6IGZhbHNlLFxuICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwic3RyaW5nXCIsXG4gICAgfSxcbiAgICB0aW1lc3RhbXBfdmFsdWU6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5zdHJpbmdUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLnRpbWVzdGFtcFZhbHVlKSxcbiAgICAgIGlzQmxvY2s6IGZhbHNlLFxuICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwic3RyaW5nXCIsXG4gICAgfSxcbiAgICBkYXRlX3ZhbHVlOiB7XG4gICAgICB2YWx1ZTogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzTWF4RGF0ZVZhbHVlVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5kYXRlVmFsdWUpLFxuICAgICAgaXNCbG9jazogdHJ1ZSxcbiAgICAgIHR5cGU6IFwibGlzdFwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkJ1Y2tldGluZ0NvbmZpZ0J1Y2tldHNNYXhEYXRlVmFsdWVMaXN0XCIsXG4gICAgfSxcbiAgICB0aW1lX3ZhbHVlOiB7XG4gICAgICB2YWx1ZTogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzTWF4VGltZVZhbHVlVG9IY2xUZXJyYWZvcm0oc3RydWN0IS50aW1lVmFsdWUpLFxuICAgICAgaXNCbG9jazogdHJ1ZSxcbiAgICAgIHR5cGU6IFwibGlzdFwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkJ1Y2tldGluZ0NvbmZpZ0J1Y2tldHNNYXhUaW1lVmFsdWVMaXN0XCIsXG4gICAgfSxcbiAgfTtcblxuICAvLyByZW1vdmUgdW5kZWZpbmVkIGF0dHJpYnV0ZXNcbiAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhhdHRycykuZmlsdGVyKChbXywgdmFsdWVdKSA9PiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlLnZhbHVlICE9PSB1bmRlZmluZWQpKTtcbn1cblxuZXhwb3J0IGNsYXNzIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c01heE91dHB1dFJlZmVyZW5jZSBleHRlbmRzIGNka3RmLkNvbXBsZXhPYmplY3Qge1xuICBwcml2YXRlIGlzRW1wdHlPYmplY3QgPSBmYWxzZTtcblxuICAvKipcbiAgKiBAcGFyYW0gdGVycmFmb3JtUmVzb3VyY2UgVGhlIHBhcmVudCByZXNvdXJjZVxuICAqIEBwYXJhbSB0ZXJyYWZvcm1BdHRyaWJ1dGUgVGhlIGF0dHJpYnV0ZSBvbiB0aGUgcGFyZW50IHJlc291cmNlIHRoaXMgY2xhc3MgaXMgcmVmZXJlbmNpbmdcbiAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHRlcnJhZm9ybVJlc291cmNlOiBjZGt0Zi5JSW50ZXJwb2xhdGluZ1BhcmVudCwgdGVycmFmb3JtQXR0cmlidXRlOiBzdHJpbmcpIHtcbiAgICBzdXBlcih0ZXJyYWZvcm1SZXNvdXJjZSwgdGVycmFmb3JtQXR0cmlidXRlLCBmYWxzZSwgMCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGludGVybmFsVmFsdWUoKTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzTWF4IHwgdW5kZWZpbmVkIHtcbiAgICBsZXQgaGFzQW55VmFsdWVzID0gdGhpcy5pc0VtcHR5T2JqZWN0O1xuICAgIGNvbnN0IGludGVybmFsVmFsdWVSZXN1bHQ6IGFueSA9IHt9O1xuICAgIGlmICh0aGlzLl9ib29sZWFuVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQuYm9vbGVhblZhbHVlID0gdGhpcy5fYm9vbGVhblZhbHVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5fZGF5T2ZXZWVrVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQuZGF5T2ZXZWVrVmFsdWUgPSB0aGlzLl9kYXlPZldlZWtWYWx1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2Zsb2F0VmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQuZmxvYXRWYWx1ZSA9IHRoaXMuX2Zsb2F0VmFsdWU7XG4gICAgfVxuICAgIGlmICh0aGlzLl9pbnRlZ2VyVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQuaW50ZWdlclZhbHVlID0gdGhpcy5faW50ZWdlclZhbHVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5fc3RyaW5nVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQuc3RyaW5nVmFsdWUgPSB0aGlzLl9zdHJpbmdWYWx1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3RpbWVzdGFtcFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LnRpbWVzdGFtcFZhbHVlID0gdGhpcy5fdGltZXN0YW1wVmFsdWU7XG4gICAgfVxuICAgIGlmICh0aGlzLl9kYXRlVmFsdWU/LmludGVybmFsVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQuZGF0ZVZhbHVlID0gdGhpcy5fZGF0ZVZhbHVlPy5pbnRlcm5hbFZhbHVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5fdGltZVZhbHVlPy5pbnRlcm5hbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LnRpbWVWYWx1ZSA9IHRoaXMuX3RpbWVWYWx1ZT8uaW50ZXJuYWxWYWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGhhc0FueVZhbHVlcyA/IGludGVybmFsVmFsdWVSZXN1bHQgOiB1bmRlZmluZWQ7XG4gIH1cblxuICBwdWJsaWMgc2V0IGludGVybmFsVmFsdWUodmFsdWU6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c01heCB8IHVuZGVmaW5lZCkge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmlzRW1wdHlPYmplY3QgPSBmYWxzZTtcbiAgICAgIHRoaXMuX2Jvb2xlYW5WYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2RheU9mV2Vla1ZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fZmxvYXRWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2ludGVnZXJWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX3N0cmluZ1ZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fdGltZXN0YW1wVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9kYXRlVmFsdWUuaW50ZXJuYWxWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX3RpbWVWYWx1ZS5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggPT09IDA7XG4gICAgICB0aGlzLl9ib29sZWFuVmFsdWUgPSB2YWx1ZS5ib29sZWFuVmFsdWU7XG4gICAgICB0aGlzLl9kYXlPZldlZWtWYWx1ZSA9IHZhbHVlLmRheU9mV2Vla1ZhbHVlO1xuICAgICAgdGhpcy5fZmxvYXRWYWx1ZSA9IHZhbHVlLmZsb2F0VmFsdWU7XG4gICAgICB0aGlzLl9pbnRlZ2VyVmFsdWUgPSB2YWx1ZS5pbnRlZ2VyVmFsdWU7XG4gICAgICB0aGlzLl9zdHJpbmdWYWx1ZSA9IHZhbHVlLnN0cmluZ1ZhbHVlO1xuICAgICAgdGhpcy5fdGltZXN0YW1wVmFsdWUgPSB2YWx1ZS50aW1lc3RhbXBWYWx1ZTtcbiAgICAgIHRoaXMuX2RhdGVWYWx1ZS5pbnRlcm5hbFZhbHVlID0gdmFsdWUuZGF0ZVZhbHVlO1xuICAgICAgdGhpcy5fdGltZVZhbHVlLmludGVybmFsVmFsdWUgPSB2YWx1ZS50aW1lVmFsdWU7XG4gICAgfVxuICB9XG5cbiAgLy8gYm9vbGVhbl92YWx1ZSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9ib29sZWFuVmFsdWU/OiBib29sZWFuIHwgY2RrdGYuSVJlc29sdmFibGU7IFxuICBwdWJsaWMgZ2V0IGJvb2xlYW5WYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRCb29sZWFuQXR0cmlidXRlKCdib29sZWFuX3ZhbHVlJyk7XG4gIH1cbiAgcHVibGljIHNldCBib29sZWFuVmFsdWUodmFsdWU6IGJvb2xlYW4gfCBjZGt0Zi5JUmVzb2x2YWJsZSkge1xuICAgIHRoaXMuX2Jvb2xlYW5WYWx1ZSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldEJvb2xlYW5WYWx1ZSgpIHtcbiAgICB0aGlzLl9ib29sZWFuVmFsdWUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IGJvb2xlYW5WYWx1ZUlucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9ib29sZWFuVmFsdWU7XG4gIH1cblxuICAvLyBkYXlfb2Zfd2Vla192YWx1ZSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9kYXlPZldlZWtWYWx1ZT86IHN0cmluZzsgXG4gIHB1YmxpYyBnZXQgZGF5T2ZXZWVrVmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCdkYXlfb2Zfd2Vla192YWx1ZScpO1xuICB9XG4gIHB1YmxpYyBzZXQgZGF5T2ZXZWVrVmFsdWUodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX2RheU9mV2Vla1ZhbHVlID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0RGF5T2ZXZWVrVmFsdWUoKSB7XG4gICAgdGhpcy5fZGF5T2ZXZWVrVmFsdWUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IGRheU9mV2Vla1ZhbHVlSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RheU9mV2Vla1ZhbHVlO1xuICB9XG5cbiAgLy8gZmxvYXRfdmFsdWUgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfZmxvYXRWYWx1ZT86IG51bWJlcjsgXG4gIHB1YmxpYyBnZXQgZmxvYXRWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXROdW1iZXJBdHRyaWJ1dGUoJ2Zsb2F0X3ZhbHVlJyk7XG4gIH1cbiAgcHVibGljIHNldCBmbG9hdFZhbHVlKHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl9mbG9hdFZhbHVlID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0RmxvYXRWYWx1ZSgpIHtcbiAgICB0aGlzLl9mbG9hdFZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBmbG9hdFZhbHVlSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Zsb2F0VmFsdWU7XG4gIH1cblxuICAvLyBpbnRlZ2VyX3ZhbHVlIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX2ludGVnZXJWYWx1ZT86IHN0cmluZzsgXG4gIHB1YmxpYyBnZXQgaW50ZWdlclZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgnaW50ZWdlcl92YWx1ZScpO1xuICB9XG4gIHB1YmxpYyBzZXQgaW50ZWdlclZhbHVlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9pbnRlZ2VyVmFsdWUgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRJbnRlZ2VyVmFsdWUoKSB7XG4gICAgdGhpcy5faW50ZWdlclZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBpbnRlZ2VyVmFsdWVJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5faW50ZWdlclZhbHVlO1xuICB9XG5cbiAgLy8gc3RyaW5nX3ZhbHVlIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX3N0cmluZ1ZhbHVlPzogc3RyaW5nOyBcbiAgcHVibGljIGdldCBzdHJpbmdWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ3N0cmluZ192YWx1ZScpO1xuICB9XG4gIHB1YmxpYyBzZXQgc3RyaW5nVmFsdWUodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX3N0cmluZ1ZhbHVlID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0U3RyaW5nVmFsdWUoKSB7XG4gICAgdGhpcy5fc3RyaW5nVmFsdWUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IHN0cmluZ1ZhbHVlSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N0cmluZ1ZhbHVlO1xuICB9XG5cbiAgLy8gdGltZXN0YW1wX3ZhbHVlIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX3RpbWVzdGFtcFZhbHVlPzogc3RyaW5nOyBcbiAgcHVibGljIGdldCB0aW1lc3RhbXBWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ3RpbWVzdGFtcF92YWx1ZScpO1xuICB9XG4gIHB1YmxpYyBzZXQgdGltZXN0YW1wVmFsdWUodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX3RpbWVzdGFtcFZhbHVlID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0VGltZXN0YW1wVmFsdWUoKSB7XG4gICAgdGhpcy5fdGltZXN0YW1wVmFsdWUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IHRpbWVzdGFtcFZhbHVlSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RpbWVzdGFtcFZhbHVlO1xuICB9XG5cbiAgLy8gZGF0ZV92YWx1ZSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9kYXRlVmFsdWUgPSBuZXcgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzTWF4RGF0ZVZhbHVlT3V0cHV0UmVmZXJlbmNlKHRoaXMsIFwiZGF0ZV92YWx1ZVwiKTtcbiAgcHVibGljIGdldCBkYXRlVmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGVWYWx1ZTtcbiAgfVxuICBwdWJsaWMgcHV0RGF0ZVZhbHVlKHZhbHVlOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkJ1Y2tldGluZ0NvbmZpZ0J1Y2tldHNNYXhEYXRlVmFsdWUpIHtcbiAgICB0aGlzLl9kYXRlVmFsdWUuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldERhdGVWYWx1ZSgpIHtcbiAgICB0aGlzLl9kYXRlVmFsdWUuaW50ZXJuYWxWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgZGF0ZVZhbHVlSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGVWYWx1ZS5pbnRlcm5hbFZhbHVlO1xuICB9XG5cbiAgLy8gdGltZV92YWx1ZSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF90aW1lVmFsdWUgPSBuZXcgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzTWF4VGltZVZhbHVlT3V0cHV0UmVmZXJlbmNlKHRoaXMsIFwidGltZV92YWx1ZVwiKTtcbiAgcHVibGljIGdldCB0aW1lVmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RpbWVWYWx1ZTtcbiAgfVxuICBwdWJsaWMgcHV0VGltZVZhbHVlKHZhbHVlOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkJ1Y2tldGluZ0NvbmZpZ0J1Y2tldHNNYXhUaW1lVmFsdWUpIHtcbiAgICB0aGlzLl90aW1lVmFsdWUuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldFRpbWVWYWx1ZSgpIHtcbiAgICB0aGlzLl90aW1lVmFsdWUuaW50ZXJuYWxWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgdGltZVZhbHVlSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RpbWVWYWx1ZS5pbnRlcm5hbFZhbHVlO1xuICB9XG59XG5leHBvcnQgaW50ZXJmYWNlIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c01pbkRhdGVWYWx1ZSB7XG4gIC8qKlxuICAqIERheSBvZiBhIG1vbnRoLiBNdXN0IGJlIGZyb20gMSB0byAzMSBhbmQgdmFsaWQgZm9yIHRoZSB5ZWFyIGFuZCBtb250aCwgb3IgMCB0byBzcGVjaWZ5IGEgeWVhciBieSBpdHNlbGYgb3IgYSB5ZWFyIGFuZCBtb250aCB3aGVyZSB0aGUgZGF5IGlzbid0IHNpZ25pZmljYW50LlxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNkYXkgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI2RheX1cbiAgKi9cbiAgcmVhZG9ubHkgZGF5PzogbnVtYmVyO1xuICAvKipcbiAgKiBNb250aCBvZiBhIHllYXIuIE11c3QgYmUgZnJvbSAxIHRvIDEyLCBvciAwIHRvIHNwZWNpZnkgYSB5ZWFyIHdpdGhvdXQgYSBtb250aCBhbmQgZGF5LlxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNtb250aCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjbW9udGh9XG4gICovXG4gIHJlYWRvbmx5IG1vbnRoPzogbnVtYmVyO1xuICAvKipcbiAgKiBZZWFyIG9mIHRoZSBkYXRlLiBNdXN0IGJlIGZyb20gMSB0byA5OTk5LCBvciAwIHRvIHNwZWNpZnkgYSBkYXRlIHdpdGhvdXQgYSB5ZWFyLlxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSN5ZWFyIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSN5ZWFyfVxuICAqL1xuICByZWFkb25seSB5ZWFyPzogbnVtYmVyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzTWluRGF0ZVZhbHVlVG9UZXJyYWZvcm0oc3RydWN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzTWluRGF0ZVZhbHVlT3V0cHV0UmVmZXJlbmNlIHwgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzTWluRGF0ZVZhbHVlKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkgfHwgY2RrdGYuVG9rZW5pemF0aW9uLmlzUmVzb2x2YWJsZShzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgaWYgKGNka3RmLmlzQ29tcGxleEVsZW1lbnQoc3RydWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkEgY29tcGxleCBlbGVtZW50IHdhcyB1c2VkIGFzIGNvbmZpZ3VyYXRpb24sIHRoaXMgaXMgbm90IHN1cHBvcnRlZDogaHR0cHM6Ly9jZGsudGYvY29tcGxleC1vYmplY3QtYXMtY29uZmlndXJhdGlvblwiKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGRheTogY2RrdGYubnVtYmVyVG9UZXJyYWZvcm0oc3RydWN0IS5kYXkpLFxuICAgIG1vbnRoOiBjZGt0Zi5udW1iZXJUb1RlcnJhZm9ybShzdHJ1Y3QhLm1vbnRoKSxcbiAgICB5ZWFyOiBjZGt0Zi5udW1iZXJUb1RlcnJhZm9ybShzdHJ1Y3QhLnllYXIpLFxuICB9XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c01pbkRhdGVWYWx1ZVRvSGNsVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c01pbkRhdGVWYWx1ZU91dHB1dFJlZmVyZW5jZSB8IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c01pbkRhdGVWYWx1ZSk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpIHx8IGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIGlmIChjZGt0Zi5pc0NvbXBsZXhFbGVtZW50KHN0cnVjdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGNvbXBsZXggZWxlbWVudCB3YXMgdXNlZCBhcyBjb25maWd1cmF0aW9uLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQ6IGh0dHBzOi8vY2RrLnRmL2NvbXBsZXgtb2JqZWN0LWFzLWNvbmZpZ3VyYXRpb25cIik7XG4gIH1cbiAgY29uc3QgYXR0cnMgPSB7XG4gICAgZGF5OiB7XG4gICAgICB2YWx1ZTogY2RrdGYubnVtYmVyVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5kYXkpLFxuICAgICAgaXNCbG9jazogZmFsc2UsXG4gICAgICB0eXBlOiBcInNpbXBsZVwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJudW1iZXJcIixcbiAgICB9LFxuICAgIG1vbnRoOiB7XG4gICAgICB2YWx1ZTogY2RrdGYubnVtYmVyVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5tb250aCksXG4gICAgICBpc0Jsb2NrOiBmYWxzZSxcbiAgICAgIHR5cGU6IFwic2ltcGxlXCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcIm51bWJlclwiLFxuICAgIH0sXG4gICAgeWVhcjoge1xuICAgICAgdmFsdWU6IGNka3RmLm51bWJlclRvSGNsVGVycmFmb3JtKHN0cnVjdCEueWVhciksXG4gICAgICBpc0Jsb2NrOiBmYWxzZSxcbiAgICAgIHR5cGU6IFwic2ltcGxlXCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcIm51bWJlclwiLFxuICAgIH0sXG4gIH07XG5cbiAgLy8gcmVtb3ZlIHVuZGVmaW5lZCBhdHRyaWJ1dGVzXG4gIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMoYXR0cnMpLmZpbHRlcigoW18sIHZhbHVlXSkgPT4gdmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZS52YWx1ZSAhPT0gdW5kZWZpbmVkKSk7XG59XG5cbmV4cG9ydCBjbGFzcyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkJ1Y2tldGluZ0NvbmZpZ0J1Y2tldHNNaW5EYXRlVmFsdWVPdXRwdXRSZWZlcmVuY2UgZXh0ZW5kcyBjZGt0Zi5Db21wbGV4T2JqZWN0IHtcbiAgcHJpdmF0ZSBpc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG5cbiAgLyoqXG4gICogQHBhcmFtIHRlcnJhZm9ybVJlc291cmNlIFRoZSBwYXJlbnQgcmVzb3VyY2VcbiAgKiBAcGFyYW0gdGVycmFmb3JtQXR0cmlidXRlIFRoZSBhdHRyaWJ1dGUgb24gdGhlIHBhcmVudCByZXNvdXJjZSB0aGlzIGNsYXNzIGlzIHJlZmVyZW5jaW5nXG4gICovXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcih0ZXJyYWZvcm1SZXNvdXJjZTogY2RrdGYuSUludGVycG9sYXRpbmdQYXJlbnQsIHRlcnJhZm9ybUF0dHJpYnV0ZTogc3RyaW5nKSB7XG4gICAgc3VwZXIodGVycmFmb3JtUmVzb3VyY2UsIHRlcnJhZm9ybUF0dHJpYnV0ZSwgZmFsc2UsIDApO1xuICB9XG5cbiAgcHVibGljIGdldCBpbnRlcm5hbFZhbHVlKCk6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c01pbkRhdGVWYWx1ZSB8IHVuZGVmaW5lZCB7XG4gICAgbGV0IGhhc0FueVZhbHVlcyA9IHRoaXMuaXNFbXB0eU9iamVjdDtcbiAgICBjb25zdCBpbnRlcm5hbFZhbHVlUmVzdWx0OiBhbnkgPSB7fTtcbiAgICBpZiAodGhpcy5fZGF5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LmRheSA9IHRoaXMuX2RheTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX21vbnRoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0Lm1vbnRoID0gdGhpcy5fbW9udGg7XG4gICAgfVxuICAgIGlmICh0aGlzLl95ZWFyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LnllYXIgPSB0aGlzLl95ZWFyO1xuICAgIH1cbiAgICByZXR1cm4gaGFzQW55VmFsdWVzID8gaW50ZXJuYWxWYWx1ZVJlc3VsdCA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgaW50ZXJuYWxWYWx1ZSh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzTWluRGF0ZVZhbHVlIHwgdW5kZWZpbmVkKSB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IGZhbHNlO1xuICAgICAgdGhpcy5fZGF5ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fbW9udGggPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl95ZWFyID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggPT09IDA7XG4gICAgICB0aGlzLl9kYXkgPSB2YWx1ZS5kYXk7XG4gICAgICB0aGlzLl9tb250aCA9IHZhbHVlLm1vbnRoO1xuICAgICAgdGhpcy5feWVhciA9IHZhbHVlLnllYXI7XG4gICAgfVxuICB9XG5cbiAgLy8gZGF5IC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX2RheT86IG51bWJlcjsgXG4gIHB1YmxpYyBnZXQgZGF5KCkge1xuICAgIHJldHVybiB0aGlzLmdldE51bWJlckF0dHJpYnV0ZSgnZGF5Jyk7XG4gIH1cbiAgcHVibGljIHNldCBkYXkodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX2RheSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldERheSgpIHtcbiAgICB0aGlzLl9kYXkgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IGRheUlucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9kYXk7XG4gIH1cblxuICAvLyBtb250aCAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9tb250aD86IG51bWJlcjsgXG4gIHB1YmxpYyBnZXQgbW9udGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TnVtYmVyQXR0cmlidXRlKCdtb250aCcpO1xuICB9XG4gIHB1YmxpYyBzZXQgbW9udGgodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX21vbnRoID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0TW9udGgoKSB7XG4gICAgdGhpcy5fbW9udGggPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IG1vbnRoSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX21vbnRoO1xuICB9XG5cbiAgLy8geWVhciAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF95ZWFyPzogbnVtYmVyOyBcbiAgcHVibGljIGdldCB5ZWFyKCkge1xuICAgIHJldHVybiB0aGlzLmdldE51bWJlckF0dHJpYnV0ZSgneWVhcicpO1xuICB9XG4gIHB1YmxpYyBzZXQgeWVhcih2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5feWVhciA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldFllYXIoKSB7XG4gICAgdGhpcy5feWVhciA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgeWVhcklucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl95ZWFyO1xuICB9XG59XG5leHBvcnQgaW50ZXJmYWNlIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c01pblRpbWVWYWx1ZSB7XG4gIC8qKlxuICAqIEhvdXJzIG9mIGRheSBpbiAyNCBob3VyIGZvcm1hdC4gU2hvdWxkIGJlIGZyb20gMCB0byAyMy4gQW4gQVBJIG1heSBjaG9vc2UgdG8gYWxsb3cgdGhlIHZhbHVlIFwiMjQ6MDA6MDBcIiBmb3Igc2NlbmFyaW9zIGxpa2UgYnVzaW5lc3MgY2xvc2luZyB0aW1lLlxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNob3VycyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjaG91cnN9XG4gICovXG4gIHJlYWRvbmx5IGhvdXJzPzogbnVtYmVyO1xuICAvKipcbiAgKiBNaW51dGVzIG9mIGhvdXIgb2YgZGF5LiBNdXN0IGJlIGZyb20gMCB0byA1OS5cbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjbWludXRlcyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjbWludXRlc31cbiAgKi9cbiAgcmVhZG9ubHkgbWludXRlcz86IG51bWJlcjtcbiAgLyoqXG4gICogRnJhY3Rpb25zIG9mIHNlY29uZHMgaW4gbmFub3NlY29uZHMuIE11c3QgYmUgZnJvbSAwIHRvIDk5OSw5OTksOTk5LlxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNuYW5vcyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjbmFub3N9XG4gICovXG4gIHJlYWRvbmx5IG5hbm9zPzogbnVtYmVyO1xuICAvKipcbiAgKiBTZWNvbmRzIG9mIG1pbnV0ZXMgb2YgdGhlIHRpbWUuIE11c3Qgbm9ybWFsbHkgYmUgZnJvbSAwIHRvIDU5LiBBbiBBUEkgbWF5IGFsbG93IHRoZSB2YWx1ZSA2MCBpZiBpdCBhbGxvd3MgbGVhcC1zZWNvbmRzLlxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNzZWNvbmRzIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSNzZWNvbmRzfVxuICAqL1xuICByZWFkb25seSBzZWNvbmRzPzogbnVtYmVyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzTWluVGltZVZhbHVlVG9UZXJyYWZvcm0oc3RydWN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzTWluVGltZVZhbHVlT3V0cHV0UmVmZXJlbmNlIHwgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzTWluVGltZVZhbHVlKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkgfHwgY2RrdGYuVG9rZW5pemF0aW9uLmlzUmVzb2x2YWJsZShzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgaWYgKGNka3RmLmlzQ29tcGxleEVsZW1lbnQoc3RydWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkEgY29tcGxleCBlbGVtZW50IHdhcyB1c2VkIGFzIGNvbmZpZ3VyYXRpb24sIHRoaXMgaXMgbm90IHN1cHBvcnRlZDogaHR0cHM6Ly9jZGsudGYvY29tcGxleC1vYmplY3QtYXMtY29uZmlndXJhdGlvblwiKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGhvdXJzOiBjZGt0Zi5udW1iZXJUb1RlcnJhZm9ybShzdHJ1Y3QhLmhvdXJzKSxcbiAgICBtaW51dGVzOiBjZGt0Zi5udW1iZXJUb1RlcnJhZm9ybShzdHJ1Y3QhLm1pbnV0ZXMpLFxuICAgIG5hbm9zOiBjZGt0Zi5udW1iZXJUb1RlcnJhZm9ybShzdHJ1Y3QhLm5hbm9zKSxcbiAgICBzZWNvbmRzOiBjZGt0Zi5udW1iZXJUb1RlcnJhZm9ybShzdHJ1Y3QhLnNlY29uZHMpLFxuICB9XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c01pblRpbWVWYWx1ZVRvSGNsVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c01pblRpbWVWYWx1ZU91dHB1dFJlZmVyZW5jZSB8IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c01pblRpbWVWYWx1ZSk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpIHx8IGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIGlmIChjZGt0Zi5pc0NvbXBsZXhFbGVtZW50KHN0cnVjdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGNvbXBsZXggZWxlbWVudCB3YXMgdXNlZCBhcyBjb25maWd1cmF0aW9uLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQ6IGh0dHBzOi8vY2RrLnRmL2NvbXBsZXgtb2JqZWN0LWFzLWNvbmZpZ3VyYXRpb25cIik7XG4gIH1cbiAgY29uc3QgYXR0cnMgPSB7XG4gICAgaG91cnM6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5udW1iZXJUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLmhvdXJzKSxcbiAgICAgIGlzQmxvY2s6IGZhbHNlLFxuICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwibnVtYmVyXCIsXG4gICAgfSxcbiAgICBtaW51dGVzOiB7XG4gICAgICB2YWx1ZTogY2RrdGYubnVtYmVyVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5taW51dGVzKSxcbiAgICAgIGlzQmxvY2s6IGZhbHNlLFxuICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwibnVtYmVyXCIsXG4gICAgfSxcbiAgICBuYW5vczoge1xuICAgICAgdmFsdWU6IGNka3RmLm51bWJlclRvSGNsVGVycmFmb3JtKHN0cnVjdCEubmFub3MpLFxuICAgICAgaXNCbG9jazogZmFsc2UsXG4gICAgICB0eXBlOiBcInNpbXBsZVwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJudW1iZXJcIixcbiAgICB9LFxuICAgIHNlY29uZHM6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5udW1iZXJUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLnNlY29uZHMpLFxuICAgICAgaXNCbG9jazogZmFsc2UsXG4gICAgICB0eXBlOiBcInNpbXBsZVwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJudW1iZXJcIixcbiAgICB9LFxuICB9O1xuXG4gIC8vIHJlbW92ZSB1bmRlZmluZWQgYXR0cmlidXRlc1xuICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5lbnRyaWVzKGF0dHJzKS5maWx0ZXIoKFtfLCB2YWx1ZV0pID0+IHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUudmFsdWUgIT09IHVuZGVmaW5lZCkpO1xufVxuXG5leHBvcnQgY2xhc3MgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzTWluVGltZVZhbHVlT3V0cHV0UmVmZXJlbmNlIGV4dGVuZHMgY2RrdGYuQ29tcGxleE9iamVjdCB7XG4gIHByaXZhdGUgaXNFbXB0eU9iamVjdCA9IGZhbHNlO1xuXG4gIC8qKlxuICAqIEBwYXJhbSB0ZXJyYWZvcm1SZXNvdXJjZSBUaGUgcGFyZW50IHJlc291cmNlXG4gICogQHBhcmFtIHRlcnJhZm9ybUF0dHJpYnV0ZSBUaGUgYXR0cmlidXRlIG9uIHRoZSBwYXJlbnQgcmVzb3VyY2UgdGhpcyBjbGFzcyBpcyByZWZlcmVuY2luZ1xuICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IodGVycmFmb3JtUmVzb3VyY2U6IGNka3RmLklJbnRlcnBvbGF0aW5nUGFyZW50LCB0ZXJyYWZvcm1BdHRyaWJ1dGU6IHN0cmluZykge1xuICAgIHN1cGVyKHRlcnJhZm9ybVJlc291cmNlLCB0ZXJyYWZvcm1BdHRyaWJ1dGUsIGZhbHNlLCAwKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgaW50ZXJuYWxWYWx1ZSgpOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkJ1Y2tldGluZ0NvbmZpZ0J1Y2tldHNNaW5UaW1lVmFsdWUgfCB1bmRlZmluZWQge1xuICAgIGxldCBoYXNBbnlWYWx1ZXMgPSB0aGlzLmlzRW1wdHlPYmplY3Q7XG4gICAgY29uc3QgaW50ZXJuYWxWYWx1ZVJlc3VsdDogYW55ID0ge307XG4gICAgaWYgKHRoaXMuX2hvdXJzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LmhvdXJzID0gdGhpcy5faG91cnM7XG4gICAgfVxuICAgIGlmICh0aGlzLl9taW51dGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0Lm1pbnV0ZXMgPSB0aGlzLl9taW51dGVzO1xuICAgIH1cbiAgICBpZiAodGhpcy5fbmFub3MgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQubmFub3MgPSB0aGlzLl9uYW5vcztcbiAgICB9XG4gICAgaWYgKHRoaXMuX3NlY29uZHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQuc2Vjb25kcyA9IHRoaXMuX3NlY29uZHM7XG4gICAgfVxuICAgIHJldHVybiBoYXNBbnlWYWx1ZXMgPyBpbnRlcm5hbFZhbHVlUmVzdWx0IDogdW5kZWZpbmVkO1xuICB9XG5cbiAgcHVibGljIHNldCBpbnRlcm5hbFZhbHVlKHZhbHVlOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkJ1Y2tldGluZ0NvbmZpZ0J1Y2tldHNNaW5UaW1lVmFsdWUgfCB1bmRlZmluZWQpIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5pc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG4gICAgICB0aGlzLl9ob3VycyA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX21pbnV0ZXMgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9uYW5vcyA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX3NlY29uZHMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5pc0VtcHR5T2JqZWN0ID0gT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aCA9PT0gMDtcbiAgICAgIHRoaXMuX2hvdXJzID0gdmFsdWUuaG91cnM7XG4gICAgICB0aGlzLl9taW51dGVzID0gdmFsdWUubWludXRlcztcbiAgICAgIHRoaXMuX25hbm9zID0gdmFsdWUubmFub3M7XG4gICAgICB0aGlzLl9zZWNvbmRzID0gdmFsdWUuc2Vjb25kcztcbiAgICB9XG4gIH1cblxuICAvLyBob3VycyAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9ob3Vycz86IG51bWJlcjsgXG4gIHB1YmxpYyBnZXQgaG91cnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TnVtYmVyQXR0cmlidXRlKCdob3VycycpO1xuICB9XG4gIHB1YmxpYyBzZXQgaG91cnModmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX2hvdXJzID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0SG91cnMoKSB7XG4gICAgdGhpcy5faG91cnMgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IGhvdXJzSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2hvdXJzO1xuICB9XG5cbiAgLy8gbWludXRlcyAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9taW51dGVzPzogbnVtYmVyOyBcbiAgcHVibGljIGdldCBtaW51dGVzKCkge1xuICAgIHJldHVybiB0aGlzLmdldE51bWJlckF0dHJpYnV0ZSgnbWludXRlcycpO1xuICB9XG4gIHB1YmxpYyBzZXQgbWludXRlcyh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5fbWludXRlcyA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldE1pbnV0ZXMoKSB7XG4gICAgdGhpcy5fbWludXRlcyA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgbWludXRlc0lucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9taW51dGVzO1xuICB9XG5cbiAgLy8gbmFub3MgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfbmFub3M/OiBudW1iZXI7IFxuICBwdWJsaWMgZ2V0IG5hbm9zKCkge1xuICAgIHJldHVybiB0aGlzLmdldE51bWJlckF0dHJpYnV0ZSgnbmFub3MnKTtcbiAgfVxuICBwdWJsaWMgc2V0IG5hbm9zKHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl9uYW5vcyA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldE5hbm9zKCkge1xuICAgIHRoaXMuX25hbm9zID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBuYW5vc0lucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9uYW5vcztcbiAgfVxuXG4gIC8vIHNlY29uZHMgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfc2Vjb25kcz86IG51bWJlcjsgXG4gIHB1YmxpYyBnZXQgc2Vjb25kcygpIHtcbiAgICByZXR1cm4gdGhpcy5nZXROdW1iZXJBdHRyaWJ1dGUoJ3NlY29uZHMnKTtcbiAgfVxuICBwdWJsaWMgc2V0IHNlY29uZHModmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX3NlY29uZHMgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRTZWNvbmRzKCkge1xuICAgIHRoaXMuX3NlY29uZHMgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IHNlY29uZHNJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2Vjb25kcztcbiAgfVxufVxuZXhwb3J0IGludGVyZmFjZSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkJ1Y2tldGluZ0NvbmZpZ0J1Y2tldHNNaW4ge1xuICAvKipcbiAgKiBBIGJvb2xlYW4gdmFsdWUuXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI2Jvb2xlYW5fdmFsdWUgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI2Jvb2xlYW5fdmFsdWV9XG4gICovXG4gIHJlYWRvbmx5IGJvb2xlYW5WYWx1ZT86IGJvb2xlYW4gfCBjZGt0Zi5JUmVzb2x2YWJsZTtcbiAgLyoqXG4gICogUmVwcmVzZW50cyBhIGRheSBvZiB0aGUgd2Vlay4gUG9zc2libGUgdmFsdWVzOiBbXCJNT05EQVlcIiwgXCJUVUVTREFZXCIsIFwiV0VETkVTREFZXCIsIFwiVEhVUlNEQVlcIiwgXCJGUklEQVlcIiwgXCJTQVRVUkRBWVwiLCBcIlNVTkRBWVwiXVxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNkYXlfb2Zfd2Vla192YWx1ZSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjZGF5X29mX3dlZWtfdmFsdWV9XG4gICovXG4gIHJlYWRvbmx5IGRheU9mV2Vla1ZhbHVlPzogc3RyaW5nO1xuICAvKipcbiAgKiBBIGZsb2F0IHZhbHVlLlxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNmbG9hdF92YWx1ZSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjZmxvYXRfdmFsdWV9XG4gICovXG4gIHJlYWRvbmx5IGZsb2F0VmFsdWU/OiBudW1iZXI7XG4gIC8qKlxuICAqIEFuIGludGVnZXIgdmFsdWUgKGludDY0IGZvcm1hdClcbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjaW50ZWdlcl92YWx1ZSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjaW50ZWdlcl92YWx1ZX1cbiAgKi9cbiAgcmVhZG9ubHkgaW50ZWdlclZhbHVlPzogc3RyaW5nO1xuICAvKipcbiAgKiBBIHN0cmluZyB2YWx1ZS5cbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjc3RyaW5nX3ZhbHVlIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSNzdHJpbmdfdmFsdWV9XG4gICovXG4gIHJlYWRvbmx5IHN0cmluZ1ZhbHVlPzogc3RyaW5nO1xuICAvKipcbiAgKiBBIHRpbWVzdGFtcCBpbiBSRkMzMzM5IFVUQyBcIlp1bHVcIiBmb3JtYXQsIHdpdGggbmFub3NlY29uZCByZXNvbHV0aW9uIGFuZCB1cCB0byBuaW5lIGZyYWN0aW9uYWwgZGlnaXRzLiBFeGFtcGxlczogXCIyMDE0LTEwLTAyVDE1OjAxOjIzWlwiIGFuZCBcIjIwMTQtMTAtMDJUMTU6MDE6MjMuMDQ1MTIzNDU2WlwiLlxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSN0aW1lc3RhbXBfdmFsdWUgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI3RpbWVzdGFtcF92YWx1ZX1cbiAgKi9cbiAgcmVhZG9ubHkgdGltZXN0YW1wVmFsdWU/OiBzdHJpbmc7XG4gIC8qKlxuICAqIGRhdGVfdmFsdWUgYmxvY2tcbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjZGF0ZV92YWx1ZSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjZGF0ZV92YWx1ZX1cbiAgKi9cbiAgcmVhZG9ubHkgZGF0ZVZhbHVlPzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzTWluRGF0ZVZhbHVlO1xuICAvKipcbiAgKiB0aW1lX3ZhbHVlIGJsb2NrXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI3RpbWVfdmFsdWUgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI3RpbWVfdmFsdWV9XG4gICovXG4gIHJlYWRvbmx5IHRpbWVWYWx1ZT86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c01pblRpbWVWYWx1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c01pblRvVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c01pbk91dHB1dFJlZmVyZW5jZSB8IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c01pbik6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpIHx8IGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIGlmIChjZGt0Zi5pc0NvbXBsZXhFbGVtZW50KHN0cnVjdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGNvbXBsZXggZWxlbWVudCB3YXMgdXNlZCBhcyBjb25maWd1cmF0aW9uLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQ6IGh0dHBzOi8vY2RrLnRmL2NvbXBsZXgtb2JqZWN0LWFzLWNvbmZpZ3VyYXRpb25cIik7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBib29sZWFuX3ZhbHVlOiBjZGt0Zi5ib29sZWFuVG9UZXJyYWZvcm0oc3RydWN0IS5ib29sZWFuVmFsdWUpLFxuICAgIGRheV9vZl93ZWVrX3ZhbHVlOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLmRheU9mV2Vla1ZhbHVlKSxcbiAgICBmbG9hdF92YWx1ZTogY2RrdGYubnVtYmVyVG9UZXJyYWZvcm0oc3RydWN0IS5mbG9hdFZhbHVlKSxcbiAgICBpbnRlZ2VyX3ZhbHVlOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLmludGVnZXJWYWx1ZSksXG4gICAgc3RyaW5nX3ZhbHVlOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLnN0cmluZ1ZhbHVlKSxcbiAgICB0aW1lc3RhbXBfdmFsdWU6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEudGltZXN0YW1wVmFsdWUpLFxuICAgIGRhdGVfdmFsdWU6IGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c01pbkRhdGVWYWx1ZVRvVGVycmFmb3JtKHN0cnVjdCEuZGF0ZVZhbHVlKSxcbiAgICB0aW1lX3ZhbHVlOiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkJ1Y2tldGluZ0NvbmZpZ0J1Y2tldHNNaW5UaW1lVmFsdWVUb1RlcnJhZm9ybShzdHJ1Y3QhLnRpbWVWYWx1ZSksXG4gIH1cbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzTWluVG9IY2xUZXJyYWZvcm0oc3RydWN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzTWluT3V0cHV0UmVmZXJlbmNlIHwgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzTWluKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkgfHwgY2RrdGYuVG9rZW5pemF0aW9uLmlzUmVzb2x2YWJsZShzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgaWYgKGNka3RmLmlzQ29tcGxleEVsZW1lbnQoc3RydWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkEgY29tcGxleCBlbGVtZW50IHdhcyB1c2VkIGFzIGNvbmZpZ3VyYXRpb24sIHRoaXMgaXMgbm90IHN1cHBvcnRlZDogaHR0cHM6Ly9jZGsudGYvY29tcGxleC1vYmplY3QtYXMtY29uZmlndXJhdGlvblwiKTtcbiAgfVxuICBjb25zdCBhdHRycyA9IHtcbiAgICBib29sZWFuX3ZhbHVlOiB7XG4gICAgICB2YWx1ZTogY2RrdGYuYm9vbGVhblRvSGNsVGVycmFmb3JtKHN0cnVjdCEuYm9vbGVhblZhbHVlKSxcbiAgICAgIGlzQmxvY2s6IGZhbHNlLFxuICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwiYm9vbGVhblwiLFxuICAgIH0sXG4gICAgZGF5X29mX3dlZWtfdmFsdWU6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5zdHJpbmdUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLmRheU9mV2Vla1ZhbHVlKSxcbiAgICAgIGlzQmxvY2s6IGZhbHNlLFxuICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwic3RyaW5nXCIsXG4gICAgfSxcbiAgICBmbG9hdF92YWx1ZToge1xuICAgICAgdmFsdWU6IGNka3RmLm51bWJlclRvSGNsVGVycmFmb3JtKHN0cnVjdCEuZmxvYXRWYWx1ZSksXG4gICAgICBpc0Jsb2NrOiBmYWxzZSxcbiAgICAgIHR5cGU6IFwic2ltcGxlXCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcIm51bWJlclwiLFxuICAgIH0sXG4gICAgaW50ZWdlcl92YWx1ZToge1xuICAgICAgdmFsdWU6IGNka3RmLnN0cmluZ1RvSGNsVGVycmFmb3JtKHN0cnVjdCEuaW50ZWdlclZhbHVlKSxcbiAgICAgIGlzQmxvY2s6IGZhbHNlLFxuICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwic3RyaW5nXCIsXG4gICAgfSxcbiAgICBzdHJpbmdfdmFsdWU6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5zdHJpbmdUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLnN0cmluZ1ZhbHVlKSxcbiAgICAgIGlzQmxvY2s6IGZhbHNlLFxuICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwic3RyaW5nXCIsXG4gICAgfSxcbiAgICB0aW1lc3RhbXBfdmFsdWU6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5zdHJpbmdUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLnRpbWVzdGFtcFZhbHVlKSxcbiAgICAgIGlzQmxvY2s6IGZhbHNlLFxuICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwic3RyaW5nXCIsXG4gICAgfSxcbiAgICBkYXRlX3ZhbHVlOiB7XG4gICAgICB2YWx1ZTogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzTWluRGF0ZVZhbHVlVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5kYXRlVmFsdWUpLFxuICAgICAgaXNCbG9jazogdHJ1ZSxcbiAgICAgIHR5cGU6IFwibGlzdFwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkJ1Y2tldGluZ0NvbmZpZ0J1Y2tldHNNaW5EYXRlVmFsdWVMaXN0XCIsXG4gICAgfSxcbiAgICB0aW1lX3ZhbHVlOiB7XG4gICAgICB2YWx1ZTogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzTWluVGltZVZhbHVlVG9IY2xUZXJyYWZvcm0oc3RydWN0IS50aW1lVmFsdWUpLFxuICAgICAgaXNCbG9jazogdHJ1ZSxcbiAgICAgIHR5cGU6IFwibGlzdFwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkJ1Y2tldGluZ0NvbmZpZ0J1Y2tldHNNaW5UaW1lVmFsdWVMaXN0XCIsXG4gICAgfSxcbiAgfTtcblxuICAvLyByZW1vdmUgdW5kZWZpbmVkIGF0dHJpYnV0ZXNcbiAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhhdHRycykuZmlsdGVyKChbXywgdmFsdWVdKSA9PiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlLnZhbHVlICE9PSB1bmRlZmluZWQpKTtcbn1cblxuZXhwb3J0IGNsYXNzIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c01pbk91dHB1dFJlZmVyZW5jZSBleHRlbmRzIGNka3RmLkNvbXBsZXhPYmplY3Qge1xuICBwcml2YXRlIGlzRW1wdHlPYmplY3QgPSBmYWxzZTtcblxuICAvKipcbiAgKiBAcGFyYW0gdGVycmFmb3JtUmVzb3VyY2UgVGhlIHBhcmVudCByZXNvdXJjZVxuICAqIEBwYXJhbSB0ZXJyYWZvcm1BdHRyaWJ1dGUgVGhlIGF0dHJpYnV0ZSBvbiB0aGUgcGFyZW50IHJlc291cmNlIHRoaXMgY2xhc3MgaXMgcmVmZXJlbmNpbmdcbiAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHRlcnJhZm9ybVJlc291cmNlOiBjZGt0Zi5JSW50ZXJwb2xhdGluZ1BhcmVudCwgdGVycmFmb3JtQXR0cmlidXRlOiBzdHJpbmcpIHtcbiAgICBzdXBlcih0ZXJyYWZvcm1SZXNvdXJjZSwgdGVycmFmb3JtQXR0cmlidXRlLCBmYWxzZSwgMCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGludGVybmFsVmFsdWUoKTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzTWluIHwgdW5kZWZpbmVkIHtcbiAgICBsZXQgaGFzQW55VmFsdWVzID0gdGhpcy5pc0VtcHR5T2JqZWN0O1xuICAgIGNvbnN0IGludGVybmFsVmFsdWVSZXN1bHQ6IGFueSA9IHt9O1xuICAgIGlmICh0aGlzLl9ib29sZWFuVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQuYm9vbGVhblZhbHVlID0gdGhpcy5fYm9vbGVhblZhbHVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5fZGF5T2ZXZWVrVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQuZGF5T2ZXZWVrVmFsdWUgPSB0aGlzLl9kYXlPZldlZWtWYWx1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2Zsb2F0VmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQuZmxvYXRWYWx1ZSA9IHRoaXMuX2Zsb2F0VmFsdWU7XG4gICAgfVxuICAgIGlmICh0aGlzLl9pbnRlZ2VyVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQuaW50ZWdlclZhbHVlID0gdGhpcy5faW50ZWdlclZhbHVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5fc3RyaW5nVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQuc3RyaW5nVmFsdWUgPSB0aGlzLl9zdHJpbmdWYWx1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3RpbWVzdGFtcFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LnRpbWVzdGFtcFZhbHVlID0gdGhpcy5fdGltZXN0YW1wVmFsdWU7XG4gICAgfVxuICAgIGlmICh0aGlzLl9kYXRlVmFsdWU/LmludGVybmFsVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQuZGF0ZVZhbHVlID0gdGhpcy5fZGF0ZVZhbHVlPy5pbnRlcm5hbFZhbHVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5fdGltZVZhbHVlPy5pbnRlcm5hbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LnRpbWVWYWx1ZSA9IHRoaXMuX3RpbWVWYWx1ZT8uaW50ZXJuYWxWYWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGhhc0FueVZhbHVlcyA/IGludGVybmFsVmFsdWVSZXN1bHQgOiB1bmRlZmluZWQ7XG4gIH1cblxuICBwdWJsaWMgc2V0IGludGVybmFsVmFsdWUodmFsdWU6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c01pbiB8IHVuZGVmaW5lZCkge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmlzRW1wdHlPYmplY3QgPSBmYWxzZTtcbiAgICAgIHRoaXMuX2Jvb2xlYW5WYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2RheU9mV2Vla1ZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fZmxvYXRWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2ludGVnZXJWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX3N0cmluZ1ZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fdGltZXN0YW1wVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9kYXRlVmFsdWUuaW50ZXJuYWxWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX3RpbWVWYWx1ZS5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggPT09IDA7XG4gICAgICB0aGlzLl9ib29sZWFuVmFsdWUgPSB2YWx1ZS5ib29sZWFuVmFsdWU7XG4gICAgICB0aGlzLl9kYXlPZldlZWtWYWx1ZSA9IHZhbHVlLmRheU9mV2Vla1ZhbHVlO1xuICAgICAgdGhpcy5fZmxvYXRWYWx1ZSA9IHZhbHVlLmZsb2F0VmFsdWU7XG4gICAgICB0aGlzLl9pbnRlZ2VyVmFsdWUgPSB2YWx1ZS5pbnRlZ2VyVmFsdWU7XG4gICAgICB0aGlzLl9zdHJpbmdWYWx1ZSA9IHZhbHVlLnN0cmluZ1ZhbHVlO1xuICAgICAgdGhpcy5fdGltZXN0YW1wVmFsdWUgPSB2YWx1ZS50aW1lc3RhbXBWYWx1ZTtcbiAgICAgIHRoaXMuX2RhdGVWYWx1ZS5pbnRlcm5hbFZhbHVlID0gdmFsdWUuZGF0ZVZhbHVlO1xuICAgICAgdGhpcy5fdGltZVZhbHVlLmludGVybmFsVmFsdWUgPSB2YWx1ZS50aW1lVmFsdWU7XG4gICAgfVxuICB9XG5cbiAgLy8gYm9vbGVhbl92YWx1ZSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9ib29sZWFuVmFsdWU/OiBib29sZWFuIHwgY2RrdGYuSVJlc29sdmFibGU7IFxuICBwdWJsaWMgZ2V0IGJvb2xlYW5WYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRCb29sZWFuQXR0cmlidXRlKCdib29sZWFuX3ZhbHVlJyk7XG4gIH1cbiAgcHVibGljIHNldCBib29sZWFuVmFsdWUodmFsdWU6IGJvb2xlYW4gfCBjZGt0Zi5JUmVzb2x2YWJsZSkge1xuICAgIHRoaXMuX2Jvb2xlYW5WYWx1ZSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldEJvb2xlYW5WYWx1ZSgpIHtcbiAgICB0aGlzLl9ib29sZWFuVmFsdWUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IGJvb2xlYW5WYWx1ZUlucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9ib29sZWFuVmFsdWU7XG4gIH1cblxuICAvLyBkYXlfb2Zfd2Vla192YWx1ZSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9kYXlPZldlZWtWYWx1ZT86IHN0cmluZzsgXG4gIHB1YmxpYyBnZXQgZGF5T2ZXZWVrVmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCdkYXlfb2Zfd2Vla192YWx1ZScpO1xuICB9XG4gIHB1YmxpYyBzZXQgZGF5T2ZXZWVrVmFsdWUodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX2RheU9mV2Vla1ZhbHVlID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0RGF5T2ZXZWVrVmFsdWUoKSB7XG4gICAgdGhpcy5fZGF5T2ZXZWVrVmFsdWUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IGRheU9mV2Vla1ZhbHVlSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RheU9mV2Vla1ZhbHVlO1xuICB9XG5cbiAgLy8gZmxvYXRfdmFsdWUgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfZmxvYXRWYWx1ZT86IG51bWJlcjsgXG4gIHB1YmxpYyBnZXQgZmxvYXRWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXROdW1iZXJBdHRyaWJ1dGUoJ2Zsb2F0X3ZhbHVlJyk7XG4gIH1cbiAgcHVibGljIHNldCBmbG9hdFZhbHVlKHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl9mbG9hdFZhbHVlID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0RmxvYXRWYWx1ZSgpIHtcbiAgICB0aGlzLl9mbG9hdFZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBmbG9hdFZhbHVlSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Zsb2F0VmFsdWU7XG4gIH1cblxuICAvLyBpbnRlZ2VyX3ZhbHVlIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX2ludGVnZXJWYWx1ZT86IHN0cmluZzsgXG4gIHB1YmxpYyBnZXQgaW50ZWdlclZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgnaW50ZWdlcl92YWx1ZScpO1xuICB9XG4gIHB1YmxpYyBzZXQgaW50ZWdlclZhbHVlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9pbnRlZ2VyVmFsdWUgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRJbnRlZ2VyVmFsdWUoKSB7XG4gICAgdGhpcy5faW50ZWdlclZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBpbnRlZ2VyVmFsdWVJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5faW50ZWdlclZhbHVlO1xuICB9XG5cbiAgLy8gc3RyaW5nX3ZhbHVlIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX3N0cmluZ1ZhbHVlPzogc3RyaW5nOyBcbiAgcHVibGljIGdldCBzdHJpbmdWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ3N0cmluZ192YWx1ZScpO1xuICB9XG4gIHB1YmxpYyBzZXQgc3RyaW5nVmFsdWUodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX3N0cmluZ1ZhbHVlID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0U3RyaW5nVmFsdWUoKSB7XG4gICAgdGhpcy5fc3RyaW5nVmFsdWUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IHN0cmluZ1ZhbHVlSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N0cmluZ1ZhbHVlO1xuICB9XG5cbiAgLy8gdGltZXN0YW1wX3ZhbHVlIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX3RpbWVzdGFtcFZhbHVlPzogc3RyaW5nOyBcbiAgcHVibGljIGdldCB0aW1lc3RhbXBWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ3RpbWVzdGFtcF92YWx1ZScpO1xuICB9XG4gIHB1YmxpYyBzZXQgdGltZXN0YW1wVmFsdWUodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX3RpbWVzdGFtcFZhbHVlID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0VGltZXN0YW1wVmFsdWUoKSB7XG4gICAgdGhpcy5fdGltZXN0YW1wVmFsdWUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IHRpbWVzdGFtcFZhbHVlSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RpbWVzdGFtcFZhbHVlO1xuICB9XG5cbiAgLy8gZGF0ZV92YWx1ZSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9kYXRlVmFsdWUgPSBuZXcgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzTWluRGF0ZVZhbHVlT3V0cHV0UmVmZXJlbmNlKHRoaXMsIFwiZGF0ZV92YWx1ZVwiKTtcbiAgcHVibGljIGdldCBkYXRlVmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGVWYWx1ZTtcbiAgfVxuICBwdWJsaWMgcHV0RGF0ZVZhbHVlKHZhbHVlOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkJ1Y2tldGluZ0NvbmZpZ0J1Y2tldHNNaW5EYXRlVmFsdWUpIHtcbiAgICB0aGlzLl9kYXRlVmFsdWUuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldERhdGVWYWx1ZSgpIHtcbiAgICB0aGlzLl9kYXRlVmFsdWUuaW50ZXJuYWxWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgZGF0ZVZhbHVlSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGVWYWx1ZS5pbnRlcm5hbFZhbHVlO1xuICB9XG5cbiAgLy8gdGltZV92YWx1ZSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF90aW1lVmFsdWUgPSBuZXcgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzTWluVGltZVZhbHVlT3V0cHV0UmVmZXJlbmNlKHRoaXMsIFwidGltZV92YWx1ZVwiKTtcbiAgcHVibGljIGdldCB0aW1lVmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RpbWVWYWx1ZTtcbiAgfVxuICBwdWJsaWMgcHV0VGltZVZhbHVlKHZhbHVlOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkJ1Y2tldGluZ0NvbmZpZ0J1Y2tldHNNaW5UaW1lVmFsdWUpIHtcbiAgICB0aGlzLl90aW1lVmFsdWUuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldFRpbWVWYWx1ZSgpIHtcbiAgICB0aGlzLl90aW1lVmFsdWUuaW50ZXJuYWxWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgdGltZVZhbHVlSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RpbWVWYWx1ZS5pbnRlcm5hbFZhbHVlO1xuICB9XG59XG5leHBvcnQgaW50ZXJmYWNlIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c1JlcGxhY2VtZW50VmFsdWVEYXRlVmFsdWUge1xuICAvKipcbiAgKiBEYXkgb2YgYSBtb250aC4gTXVzdCBiZSBmcm9tIDEgdG8gMzEgYW5kIHZhbGlkIGZvciB0aGUgeWVhciBhbmQgbW9udGgsIG9yIDAgdG8gc3BlY2lmeSBhIHllYXIgYnkgaXRzZWxmIG9yIGEgeWVhciBhbmQgbW9udGggd2hlcmUgdGhlIGRheSBpc24ndCBzaWduaWZpY2FudC5cbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjZGF5IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSNkYXl9XG4gICovXG4gIHJlYWRvbmx5IGRheT86IG51bWJlcjtcbiAgLyoqXG4gICogTW9udGggb2YgYSB5ZWFyLiBNdXN0IGJlIGZyb20gMSB0byAxMiwgb3IgMCB0byBzcGVjaWZ5IGEgeWVhciB3aXRob3V0IGEgbW9udGggYW5kIGRheS5cbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjbW9udGggRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI21vbnRofVxuICAqL1xuICByZWFkb25seSBtb250aD86IG51bWJlcjtcbiAgLyoqXG4gICogWWVhciBvZiB0aGUgZGF0ZS4gTXVzdCBiZSBmcm9tIDEgdG8gOTk5OSwgb3IgMCB0byBzcGVjaWZ5IGEgZGF0ZSB3aXRob3V0IGEgeWVhci5cbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjeWVhciBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjeWVhcn1cbiAgKi9cbiAgcmVhZG9ubHkgeWVhcj86IG51bWJlcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c1JlcGxhY2VtZW50VmFsdWVEYXRlVmFsdWVUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkJ1Y2tldGluZ0NvbmZpZ0J1Y2tldHNSZXBsYWNlbWVudFZhbHVlRGF0ZVZhbHVlT3V0cHV0UmVmZXJlbmNlIHwgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzUmVwbGFjZW1lbnRWYWx1ZURhdGVWYWx1ZSk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpIHx8IGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIGlmIChjZGt0Zi5pc0NvbXBsZXhFbGVtZW50KHN0cnVjdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGNvbXBsZXggZWxlbWVudCB3YXMgdXNlZCBhcyBjb25maWd1cmF0aW9uLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQ6IGh0dHBzOi8vY2RrLnRmL2NvbXBsZXgtb2JqZWN0LWFzLWNvbmZpZ3VyYXRpb25cIik7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBkYXk6IGNka3RmLm51bWJlclRvVGVycmFmb3JtKHN0cnVjdCEuZGF5KSxcbiAgICBtb250aDogY2RrdGYubnVtYmVyVG9UZXJyYWZvcm0oc3RydWN0IS5tb250aCksXG4gICAgeWVhcjogY2RrdGYubnVtYmVyVG9UZXJyYWZvcm0oc3RydWN0IS55ZWFyKSxcbiAgfVxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkJ1Y2tldGluZ0NvbmZpZ0J1Y2tldHNSZXBsYWNlbWVudFZhbHVlRGF0ZVZhbHVlVG9IY2xUZXJyYWZvcm0oc3RydWN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzUmVwbGFjZW1lbnRWYWx1ZURhdGVWYWx1ZU91dHB1dFJlZmVyZW5jZSB8IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c1JlcGxhY2VtZW50VmFsdWVEYXRlVmFsdWUpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIGNvbnN0IGF0dHJzID0ge1xuICAgIGRheToge1xuICAgICAgdmFsdWU6IGNka3RmLm51bWJlclRvSGNsVGVycmFmb3JtKHN0cnVjdCEuZGF5KSxcbiAgICAgIGlzQmxvY2s6IGZhbHNlLFxuICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwibnVtYmVyXCIsXG4gICAgfSxcbiAgICBtb250aDoge1xuICAgICAgdmFsdWU6IGNka3RmLm51bWJlclRvSGNsVGVycmFmb3JtKHN0cnVjdCEubW9udGgpLFxuICAgICAgaXNCbG9jazogZmFsc2UsXG4gICAgICB0eXBlOiBcInNpbXBsZVwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJudW1iZXJcIixcbiAgICB9LFxuICAgIHllYXI6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5udW1iZXJUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLnllYXIpLFxuICAgICAgaXNCbG9jazogZmFsc2UsXG4gICAgICB0eXBlOiBcInNpbXBsZVwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJudW1iZXJcIixcbiAgICB9LFxuICB9O1xuXG4gIC8vIHJlbW92ZSB1bmRlZmluZWQgYXR0cmlidXRlc1xuICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5lbnRyaWVzKGF0dHJzKS5maWx0ZXIoKFtfLCB2YWx1ZV0pID0+IHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUudmFsdWUgIT09IHVuZGVmaW5lZCkpO1xufVxuXG5leHBvcnQgY2xhc3MgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzUmVwbGFjZW1lbnRWYWx1ZURhdGVWYWx1ZU91dHB1dFJlZmVyZW5jZSBleHRlbmRzIGNka3RmLkNvbXBsZXhPYmplY3Qge1xuICBwcml2YXRlIGlzRW1wdHlPYmplY3QgPSBmYWxzZTtcblxuICAvKipcbiAgKiBAcGFyYW0gdGVycmFmb3JtUmVzb3VyY2UgVGhlIHBhcmVudCByZXNvdXJjZVxuICAqIEBwYXJhbSB0ZXJyYWZvcm1BdHRyaWJ1dGUgVGhlIGF0dHJpYnV0ZSBvbiB0aGUgcGFyZW50IHJlc291cmNlIHRoaXMgY2xhc3MgaXMgcmVmZXJlbmNpbmdcbiAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHRlcnJhZm9ybVJlc291cmNlOiBjZGt0Zi5JSW50ZXJwb2xhdGluZ1BhcmVudCwgdGVycmFmb3JtQXR0cmlidXRlOiBzdHJpbmcpIHtcbiAgICBzdXBlcih0ZXJyYWZvcm1SZXNvdXJjZSwgdGVycmFmb3JtQXR0cmlidXRlLCBmYWxzZSwgMCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGludGVybmFsVmFsdWUoKTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzUmVwbGFjZW1lbnRWYWx1ZURhdGVWYWx1ZSB8IHVuZGVmaW5lZCB7XG4gICAgbGV0IGhhc0FueVZhbHVlcyA9IHRoaXMuaXNFbXB0eU9iamVjdDtcbiAgICBjb25zdCBpbnRlcm5hbFZhbHVlUmVzdWx0OiBhbnkgPSB7fTtcbiAgICBpZiAodGhpcy5fZGF5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LmRheSA9IHRoaXMuX2RheTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX21vbnRoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0Lm1vbnRoID0gdGhpcy5fbW9udGg7XG4gICAgfVxuICAgIGlmICh0aGlzLl95ZWFyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LnllYXIgPSB0aGlzLl95ZWFyO1xuICAgIH1cbiAgICByZXR1cm4gaGFzQW55VmFsdWVzID8gaW50ZXJuYWxWYWx1ZVJlc3VsdCA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgaW50ZXJuYWxWYWx1ZSh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzUmVwbGFjZW1lbnRWYWx1ZURhdGVWYWx1ZSB8IHVuZGVmaW5lZCkge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmlzRW1wdHlPYmplY3QgPSBmYWxzZTtcbiAgICAgIHRoaXMuX2RheSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX21vbnRoID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5feWVhciA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLmlzRW1wdHlPYmplY3QgPSBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoID09PSAwO1xuICAgICAgdGhpcy5fZGF5ID0gdmFsdWUuZGF5O1xuICAgICAgdGhpcy5fbW9udGggPSB2YWx1ZS5tb250aDtcbiAgICAgIHRoaXMuX3llYXIgPSB2YWx1ZS55ZWFyO1xuICAgIH1cbiAgfVxuXG4gIC8vIGRheSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9kYXk/OiBudW1iZXI7IFxuICBwdWJsaWMgZ2V0IGRheSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXROdW1iZXJBdHRyaWJ1dGUoJ2RheScpO1xuICB9XG4gIHB1YmxpYyBzZXQgZGF5KHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl9kYXkgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXREYXkoKSB7XG4gICAgdGhpcy5fZGF5ID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBkYXlJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGF5O1xuICB9XG5cbiAgLy8gbW9udGggLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfbW9udGg/OiBudW1iZXI7IFxuICBwdWJsaWMgZ2V0IG1vbnRoKCkge1xuICAgIHJldHVybiB0aGlzLmdldE51bWJlckF0dHJpYnV0ZSgnbW9udGgnKTtcbiAgfVxuICBwdWJsaWMgc2V0IG1vbnRoKHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl9tb250aCA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldE1vbnRoKCkge1xuICAgIHRoaXMuX21vbnRoID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBtb250aElucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9tb250aDtcbiAgfVxuXG4gIC8vIHllYXIgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfeWVhcj86IG51bWJlcjsgXG4gIHB1YmxpYyBnZXQgeWVhcigpIHtcbiAgICByZXR1cm4gdGhpcy5nZXROdW1iZXJBdHRyaWJ1dGUoJ3llYXInKTtcbiAgfVxuICBwdWJsaWMgc2V0IHllYXIodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX3llYXIgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRZZWFyKCkge1xuICAgIHRoaXMuX3llYXIgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IHllYXJJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5feWVhcjtcbiAgfVxufVxuZXhwb3J0IGludGVyZmFjZSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkJ1Y2tldGluZ0NvbmZpZ0J1Y2tldHNSZXBsYWNlbWVudFZhbHVlVGltZVZhbHVlIHtcbiAgLyoqXG4gICogSG91cnMgb2YgZGF5IGluIDI0IGhvdXIgZm9ybWF0LiBTaG91bGQgYmUgZnJvbSAwIHRvIDIzLiBBbiBBUEkgbWF5IGNob29zZSB0byBhbGxvdyB0aGUgdmFsdWUgXCIyNDowMDowMFwiIGZvciBzY2VuYXJpb3MgbGlrZSBidXNpbmVzcyBjbG9zaW5nIHRpbWUuXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI2hvdXJzIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSNob3Vyc31cbiAgKi9cbiAgcmVhZG9ubHkgaG91cnM/OiBudW1iZXI7XG4gIC8qKlxuICAqIE1pbnV0ZXMgb2YgaG91ciBvZiBkYXkuIE11c3QgYmUgZnJvbSAwIHRvIDU5LlxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNtaW51dGVzIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSNtaW51dGVzfVxuICAqL1xuICByZWFkb25seSBtaW51dGVzPzogbnVtYmVyO1xuICAvKipcbiAgKiBGcmFjdGlvbnMgb2Ygc2Vjb25kcyBpbiBuYW5vc2Vjb25kcy4gTXVzdCBiZSBmcm9tIDAgdG8gOTk5LDk5OSw5OTkuXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI25hbm9zIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSNuYW5vc31cbiAgKi9cbiAgcmVhZG9ubHkgbmFub3M/OiBudW1iZXI7XG4gIC8qKlxuICAqIFNlY29uZHMgb2YgbWludXRlcyBvZiB0aGUgdGltZS4gTXVzdCBub3JtYWxseSBiZSBmcm9tIDAgdG8gNTkuIEFuIEFQSSBtYXkgYWxsb3cgdGhlIHZhbHVlIDYwIGlmIGl0IGFsbG93cyBsZWFwLXNlY29uZHMuXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI3NlY29uZHMgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI3NlY29uZHN9XG4gICovXG4gIHJlYWRvbmx5IHNlY29uZHM/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkJ1Y2tldGluZ0NvbmZpZ0J1Y2tldHNSZXBsYWNlbWVudFZhbHVlVGltZVZhbHVlVG9UZXJyYWZvcm0oc3RydWN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzUmVwbGFjZW1lbnRWYWx1ZVRpbWVWYWx1ZU91dHB1dFJlZmVyZW5jZSB8IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c1JlcGxhY2VtZW50VmFsdWVUaW1lVmFsdWUpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIHJldHVybiB7XG4gICAgaG91cnM6IGNka3RmLm51bWJlclRvVGVycmFmb3JtKHN0cnVjdCEuaG91cnMpLFxuICAgIG1pbnV0ZXM6IGNka3RmLm51bWJlclRvVGVycmFmb3JtKHN0cnVjdCEubWludXRlcyksXG4gICAgbmFub3M6IGNka3RmLm51bWJlclRvVGVycmFmb3JtKHN0cnVjdCEubmFub3MpLFxuICAgIHNlY29uZHM6IGNka3RmLm51bWJlclRvVGVycmFmb3JtKHN0cnVjdCEuc2Vjb25kcyksXG4gIH1cbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzUmVwbGFjZW1lbnRWYWx1ZVRpbWVWYWx1ZVRvSGNsVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c1JlcGxhY2VtZW50VmFsdWVUaW1lVmFsdWVPdXRwdXRSZWZlcmVuY2UgfCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkJ1Y2tldGluZ0NvbmZpZ0J1Y2tldHNSZXBsYWNlbWVudFZhbHVlVGltZVZhbHVlKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkgfHwgY2RrdGYuVG9rZW5pemF0aW9uLmlzUmVzb2x2YWJsZShzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgaWYgKGNka3RmLmlzQ29tcGxleEVsZW1lbnQoc3RydWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkEgY29tcGxleCBlbGVtZW50IHdhcyB1c2VkIGFzIGNvbmZpZ3VyYXRpb24sIHRoaXMgaXMgbm90IHN1cHBvcnRlZDogaHR0cHM6Ly9jZGsudGYvY29tcGxleC1vYmplY3QtYXMtY29uZmlndXJhdGlvblwiKTtcbiAgfVxuICBjb25zdCBhdHRycyA9IHtcbiAgICBob3Vyczoge1xuICAgICAgdmFsdWU6IGNka3RmLm51bWJlclRvSGNsVGVycmFmb3JtKHN0cnVjdCEuaG91cnMpLFxuICAgICAgaXNCbG9jazogZmFsc2UsXG4gICAgICB0eXBlOiBcInNpbXBsZVwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJudW1iZXJcIixcbiAgICB9LFxuICAgIG1pbnV0ZXM6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5udW1iZXJUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLm1pbnV0ZXMpLFxuICAgICAgaXNCbG9jazogZmFsc2UsXG4gICAgICB0eXBlOiBcInNpbXBsZVwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJudW1iZXJcIixcbiAgICB9LFxuICAgIG5hbm9zOiB7XG4gICAgICB2YWx1ZTogY2RrdGYubnVtYmVyVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5uYW5vcyksXG4gICAgICBpc0Jsb2NrOiBmYWxzZSxcbiAgICAgIHR5cGU6IFwic2ltcGxlXCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcIm51bWJlclwiLFxuICAgIH0sXG4gICAgc2Vjb25kczoge1xuICAgICAgdmFsdWU6IGNka3RmLm51bWJlclRvSGNsVGVycmFmb3JtKHN0cnVjdCEuc2Vjb25kcyksXG4gICAgICBpc0Jsb2NrOiBmYWxzZSxcbiAgICAgIHR5cGU6IFwic2ltcGxlXCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcIm51bWJlclwiLFxuICAgIH0sXG4gIH07XG5cbiAgLy8gcmVtb3ZlIHVuZGVmaW5lZCBhdHRyaWJ1dGVzXG4gIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMoYXR0cnMpLmZpbHRlcigoW18sIHZhbHVlXSkgPT4gdmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZS52YWx1ZSAhPT0gdW5kZWZpbmVkKSk7XG59XG5cbmV4cG9ydCBjbGFzcyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkJ1Y2tldGluZ0NvbmZpZ0J1Y2tldHNSZXBsYWNlbWVudFZhbHVlVGltZVZhbHVlT3V0cHV0UmVmZXJlbmNlIGV4dGVuZHMgY2RrdGYuQ29tcGxleE9iamVjdCB7XG4gIHByaXZhdGUgaXNFbXB0eU9iamVjdCA9IGZhbHNlO1xuXG4gIC8qKlxuICAqIEBwYXJhbSB0ZXJyYWZvcm1SZXNvdXJjZSBUaGUgcGFyZW50IHJlc291cmNlXG4gICogQHBhcmFtIHRlcnJhZm9ybUF0dHJpYnV0ZSBUaGUgYXR0cmlidXRlIG9uIHRoZSBwYXJlbnQgcmVzb3VyY2UgdGhpcyBjbGFzcyBpcyByZWZlcmVuY2luZ1xuICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IodGVycmFmb3JtUmVzb3VyY2U6IGNka3RmLklJbnRlcnBvbGF0aW5nUGFyZW50LCB0ZXJyYWZvcm1BdHRyaWJ1dGU6IHN0cmluZykge1xuICAgIHN1cGVyKHRlcnJhZm9ybVJlc291cmNlLCB0ZXJyYWZvcm1BdHRyaWJ1dGUsIGZhbHNlLCAwKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgaW50ZXJuYWxWYWx1ZSgpOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkJ1Y2tldGluZ0NvbmZpZ0J1Y2tldHNSZXBsYWNlbWVudFZhbHVlVGltZVZhbHVlIHwgdW5kZWZpbmVkIHtcbiAgICBsZXQgaGFzQW55VmFsdWVzID0gdGhpcy5pc0VtcHR5T2JqZWN0O1xuICAgIGNvbnN0IGludGVybmFsVmFsdWVSZXN1bHQ6IGFueSA9IHt9O1xuICAgIGlmICh0aGlzLl9ob3VycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC5ob3VycyA9IHRoaXMuX2hvdXJzO1xuICAgIH1cbiAgICBpZiAodGhpcy5fbWludXRlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC5taW51dGVzID0gdGhpcy5fbWludXRlcztcbiAgICB9XG4gICAgaWYgKHRoaXMuX25hbm9zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0Lm5hbm9zID0gdGhpcy5fbmFub3M7XG4gICAgfVxuICAgIGlmICh0aGlzLl9zZWNvbmRzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LnNlY29uZHMgPSB0aGlzLl9zZWNvbmRzO1xuICAgIH1cbiAgICByZXR1cm4gaGFzQW55VmFsdWVzID8gaW50ZXJuYWxWYWx1ZVJlc3VsdCA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgaW50ZXJuYWxWYWx1ZSh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzUmVwbGFjZW1lbnRWYWx1ZVRpbWVWYWx1ZSB8IHVuZGVmaW5lZCkge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmlzRW1wdHlPYmplY3QgPSBmYWxzZTtcbiAgICAgIHRoaXMuX2hvdXJzID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fbWludXRlcyA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX25hbm9zID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fc2Vjb25kcyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLmlzRW1wdHlPYmplY3QgPSBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoID09PSAwO1xuICAgICAgdGhpcy5faG91cnMgPSB2YWx1ZS5ob3VycztcbiAgICAgIHRoaXMuX21pbnV0ZXMgPSB2YWx1ZS5taW51dGVzO1xuICAgICAgdGhpcy5fbmFub3MgPSB2YWx1ZS5uYW5vcztcbiAgICAgIHRoaXMuX3NlY29uZHMgPSB2YWx1ZS5zZWNvbmRzO1xuICAgIH1cbiAgfVxuXG4gIC8vIGhvdXJzIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX2hvdXJzPzogbnVtYmVyOyBcbiAgcHVibGljIGdldCBob3VycygpIHtcbiAgICByZXR1cm4gdGhpcy5nZXROdW1iZXJBdHRyaWJ1dGUoJ2hvdXJzJyk7XG4gIH1cbiAgcHVibGljIHNldCBob3Vycyh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5faG91cnMgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRIb3VycygpIHtcbiAgICB0aGlzLl9ob3VycyA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgaG91cnNJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5faG91cnM7XG4gIH1cblxuICAvLyBtaW51dGVzIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX21pbnV0ZXM/OiBudW1iZXI7IFxuICBwdWJsaWMgZ2V0IG1pbnV0ZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TnVtYmVyQXR0cmlidXRlKCdtaW51dGVzJyk7XG4gIH1cbiAgcHVibGljIHNldCBtaW51dGVzKHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl9taW51dGVzID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0TWludXRlcygpIHtcbiAgICB0aGlzLl9taW51dGVzID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBtaW51dGVzSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX21pbnV0ZXM7XG4gIH1cblxuICAvLyBuYW5vcyAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9uYW5vcz86IG51bWJlcjsgXG4gIHB1YmxpYyBnZXQgbmFub3MoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TnVtYmVyQXR0cmlidXRlKCduYW5vcycpO1xuICB9XG4gIHB1YmxpYyBzZXQgbmFub3ModmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX25hbm9zID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0TmFub3MoKSB7XG4gICAgdGhpcy5fbmFub3MgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IG5hbm9zSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX25hbm9zO1xuICB9XG5cbiAgLy8gc2Vjb25kcyAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9zZWNvbmRzPzogbnVtYmVyOyBcbiAgcHVibGljIGdldCBzZWNvbmRzKCkge1xuICAgIHJldHVybiB0aGlzLmdldE51bWJlckF0dHJpYnV0ZSgnc2Vjb25kcycpO1xuICB9XG4gIHB1YmxpYyBzZXQgc2Vjb25kcyh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5fc2Vjb25kcyA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldFNlY29uZHMoKSB7XG4gICAgdGhpcy5fc2Vjb25kcyA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgc2Vjb25kc0lucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9zZWNvbmRzO1xuICB9XG59XG5leHBvcnQgaW50ZXJmYWNlIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c1JlcGxhY2VtZW50VmFsdWUge1xuICAvKipcbiAgKiBBIGJvb2xlYW4gdmFsdWUuXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI2Jvb2xlYW5fdmFsdWUgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI2Jvb2xlYW5fdmFsdWV9XG4gICovXG4gIHJlYWRvbmx5IGJvb2xlYW5WYWx1ZT86IGJvb2xlYW4gfCBjZGt0Zi5JUmVzb2x2YWJsZTtcbiAgLyoqXG4gICogUmVwcmVzZW50cyBhIGRheSBvZiB0aGUgd2Vlay4gUG9zc2libGUgdmFsdWVzOiBbXCJNT05EQVlcIiwgXCJUVUVTREFZXCIsIFwiV0VETkVTREFZXCIsIFwiVEhVUlNEQVlcIiwgXCJGUklEQVlcIiwgXCJTQVRVUkRBWVwiLCBcIlNVTkRBWVwiXVxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNkYXlfb2Zfd2Vla192YWx1ZSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjZGF5X29mX3dlZWtfdmFsdWV9XG4gICovXG4gIHJlYWRvbmx5IGRheU9mV2Vla1ZhbHVlPzogc3RyaW5nO1xuICAvKipcbiAgKiBBIGZsb2F0IHZhbHVlLlxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNmbG9hdF92YWx1ZSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjZmxvYXRfdmFsdWV9XG4gICovXG4gIHJlYWRvbmx5IGZsb2F0VmFsdWU/OiBudW1iZXI7XG4gIC8qKlxuICAqIEFuIGludGVnZXIgdmFsdWUgKGludDY0IGZvcm1hdClcbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjaW50ZWdlcl92YWx1ZSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjaW50ZWdlcl92YWx1ZX1cbiAgKi9cbiAgcmVhZG9ubHkgaW50ZWdlclZhbHVlPzogc3RyaW5nO1xuICAvKipcbiAgKiBBIHN0cmluZyB2YWx1ZS5cbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjc3RyaW5nX3ZhbHVlIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSNzdHJpbmdfdmFsdWV9XG4gICovXG4gIHJlYWRvbmx5IHN0cmluZ1ZhbHVlPzogc3RyaW5nO1xuICAvKipcbiAgKiBBIHRpbWVzdGFtcCBpbiBSRkMzMzM5IFVUQyBcIlp1bHVcIiBmb3JtYXQsIHdpdGggbmFub3NlY29uZCByZXNvbHV0aW9uIGFuZCB1cCB0byBuaW5lIGZyYWN0aW9uYWwgZGlnaXRzLiBFeGFtcGxlczogXCIyMDE0LTEwLTAyVDE1OjAxOjIzWlwiIGFuZCBcIjIwMTQtMTAtMDJUMTU6MDE6MjMuMDQ1MTIzNDU2WlwiLlxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSN0aW1lc3RhbXBfdmFsdWUgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI3RpbWVzdGFtcF92YWx1ZX1cbiAgKi9cbiAgcmVhZG9ubHkgdGltZXN0YW1wVmFsdWU/OiBzdHJpbmc7XG4gIC8qKlxuICAqIGRhdGVfdmFsdWUgYmxvY2tcbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjZGF0ZV92YWx1ZSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjZGF0ZV92YWx1ZX1cbiAgKi9cbiAgcmVhZG9ubHkgZGF0ZVZhbHVlPzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzUmVwbGFjZW1lbnRWYWx1ZURhdGVWYWx1ZTtcbiAgLyoqXG4gICogdGltZV92YWx1ZSBibG9ja1xuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSN0aW1lX3ZhbHVlIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSN0aW1lX3ZhbHVlfVxuICAqL1xuICByZWFkb25seSB0aW1lVmFsdWU/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkJ1Y2tldGluZ0NvbmZpZ0J1Y2tldHNSZXBsYWNlbWVudFZhbHVlVGltZVZhbHVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzUmVwbGFjZW1lbnRWYWx1ZVRvVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c1JlcGxhY2VtZW50VmFsdWVPdXRwdXRSZWZlcmVuY2UgfCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkJ1Y2tldGluZ0NvbmZpZ0J1Y2tldHNSZXBsYWNlbWVudFZhbHVlKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkgfHwgY2RrdGYuVG9rZW5pemF0aW9uLmlzUmVzb2x2YWJsZShzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgaWYgKGNka3RmLmlzQ29tcGxleEVsZW1lbnQoc3RydWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkEgY29tcGxleCBlbGVtZW50IHdhcyB1c2VkIGFzIGNvbmZpZ3VyYXRpb24sIHRoaXMgaXMgbm90IHN1cHBvcnRlZDogaHR0cHM6Ly9jZGsudGYvY29tcGxleC1vYmplY3QtYXMtY29uZmlndXJhdGlvblwiKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGJvb2xlYW5fdmFsdWU6IGNka3RmLmJvb2xlYW5Ub1RlcnJhZm9ybShzdHJ1Y3QhLmJvb2xlYW5WYWx1ZSksXG4gICAgZGF5X29mX3dlZWtfdmFsdWU6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuZGF5T2ZXZWVrVmFsdWUpLFxuICAgIGZsb2F0X3ZhbHVlOiBjZGt0Zi5udW1iZXJUb1RlcnJhZm9ybShzdHJ1Y3QhLmZsb2F0VmFsdWUpLFxuICAgIGludGVnZXJfdmFsdWU6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuaW50ZWdlclZhbHVlKSxcbiAgICBzdHJpbmdfdmFsdWU6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuc3RyaW5nVmFsdWUpLFxuICAgIHRpbWVzdGFtcF92YWx1ZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS50aW1lc3RhbXBWYWx1ZSksXG4gICAgZGF0ZV92YWx1ZTogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzUmVwbGFjZW1lbnRWYWx1ZURhdGVWYWx1ZVRvVGVycmFmb3JtKHN0cnVjdCEuZGF0ZVZhbHVlKSxcbiAgICB0aW1lX3ZhbHVlOiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkJ1Y2tldGluZ0NvbmZpZ0J1Y2tldHNSZXBsYWNlbWVudFZhbHVlVGltZVZhbHVlVG9UZXJyYWZvcm0oc3RydWN0IS50aW1lVmFsdWUpLFxuICB9XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c1JlcGxhY2VtZW50VmFsdWVUb0hjbFRlcnJhZm9ybShzdHJ1Y3Q/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkJ1Y2tldGluZ0NvbmZpZ0J1Y2tldHNSZXBsYWNlbWVudFZhbHVlT3V0cHV0UmVmZXJlbmNlIHwgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzUmVwbGFjZW1lbnRWYWx1ZSk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpIHx8IGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIGlmIChjZGt0Zi5pc0NvbXBsZXhFbGVtZW50KHN0cnVjdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGNvbXBsZXggZWxlbWVudCB3YXMgdXNlZCBhcyBjb25maWd1cmF0aW9uLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQ6IGh0dHBzOi8vY2RrLnRmL2NvbXBsZXgtb2JqZWN0LWFzLWNvbmZpZ3VyYXRpb25cIik7XG4gIH1cbiAgY29uc3QgYXR0cnMgPSB7XG4gICAgYm9vbGVhbl92YWx1ZToge1xuICAgICAgdmFsdWU6IGNka3RmLmJvb2xlYW5Ub0hjbFRlcnJhZm9ybShzdHJ1Y3QhLmJvb2xlYW5WYWx1ZSksXG4gICAgICBpc0Jsb2NrOiBmYWxzZSxcbiAgICAgIHR5cGU6IFwic2ltcGxlXCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcImJvb2xlYW5cIixcbiAgICB9LFxuICAgIGRheV9vZl93ZWVrX3ZhbHVlOiB7XG4gICAgICB2YWx1ZTogY2RrdGYuc3RyaW5nVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5kYXlPZldlZWtWYWx1ZSksXG4gICAgICBpc0Jsb2NrOiBmYWxzZSxcbiAgICAgIHR5cGU6IFwic2ltcGxlXCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcInN0cmluZ1wiLFxuICAgIH0sXG4gICAgZmxvYXRfdmFsdWU6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5udW1iZXJUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLmZsb2F0VmFsdWUpLFxuICAgICAgaXNCbG9jazogZmFsc2UsXG4gICAgICB0eXBlOiBcInNpbXBsZVwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJudW1iZXJcIixcbiAgICB9LFxuICAgIGludGVnZXJfdmFsdWU6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5zdHJpbmdUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLmludGVnZXJWYWx1ZSksXG4gICAgICBpc0Jsb2NrOiBmYWxzZSxcbiAgICAgIHR5cGU6IFwic2ltcGxlXCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcInN0cmluZ1wiLFxuICAgIH0sXG4gICAgc3RyaW5nX3ZhbHVlOiB7XG4gICAgICB2YWx1ZTogY2RrdGYuc3RyaW5nVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5zdHJpbmdWYWx1ZSksXG4gICAgICBpc0Jsb2NrOiBmYWxzZSxcbiAgICAgIHR5cGU6IFwic2ltcGxlXCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcInN0cmluZ1wiLFxuICAgIH0sXG4gICAgdGltZXN0YW1wX3ZhbHVlOiB7XG4gICAgICB2YWx1ZTogY2RrdGYuc3RyaW5nVG9IY2xUZXJyYWZvcm0oc3RydWN0IS50aW1lc3RhbXBWYWx1ZSksXG4gICAgICBpc0Jsb2NrOiBmYWxzZSxcbiAgICAgIHR5cGU6IFwic2ltcGxlXCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcInN0cmluZ1wiLFxuICAgIH0sXG4gICAgZGF0ZV92YWx1ZToge1xuICAgICAgdmFsdWU6IGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c1JlcGxhY2VtZW50VmFsdWVEYXRlVmFsdWVUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLmRhdGVWYWx1ZSksXG4gICAgICBpc0Jsb2NrOiB0cnVlLFxuICAgICAgdHlwZTogXCJsaXN0XCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcIkRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c1JlcGxhY2VtZW50VmFsdWVEYXRlVmFsdWVMaXN0XCIsXG4gICAgfSxcbiAgICB0aW1lX3ZhbHVlOiB7XG4gICAgICB2YWx1ZTogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzUmVwbGFjZW1lbnRWYWx1ZVRpbWVWYWx1ZVRvSGNsVGVycmFmb3JtKHN0cnVjdCEudGltZVZhbHVlKSxcbiAgICAgIGlzQmxvY2s6IHRydWUsXG4gICAgICB0eXBlOiBcImxpc3RcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwiRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzUmVwbGFjZW1lbnRWYWx1ZVRpbWVWYWx1ZUxpc3RcIixcbiAgICB9LFxuICB9O1xuXG4gIC8vIHJlbW92ZSB1bmRlZmluZWQgYXR0cmlidXRlc1xuICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5lbnRyaWVzKGF0dHJzKS5maWx0ZXIoKFtfLCB2YWx1ZV0pID0+IHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUudmFsdWUgIT09IHVuZGVmaW5lZCkpO1xufVxuXG5leHBvcnQgY2xhc3MgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzUmVwbGFjZW1lbnRWYWx1ZU91dHB1dFJlZmVyZW5jZSBleHRlbmRzIGNka3RmLkNvbXBsZXhPYmplY3Qge1xuICBwcml2YXRlIGlzRW1wdHlPYmplY3QgPSBmYWxzZTtcblxuICAvKipcbiAgKiBAcGFyYW0gdGVycmFmb3JtUmVzb3VyY2UgVGhlIHBhcmVudCByZXNvdXJjZVxuICAqIEBwYXJhbSB0ZXJyYWZvcm1BdHRyaWJ1dGUgVGhlIGF0dHJpYnV0ZSBvbiB0aGUgcGFyZW50IHJlc291cmNlIHRoaXMgY2xhc3MgaXMgcmVmZXJlbmNpbmdcbiAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHRlcnJhZm9ybVJlc291cmNlOiBjZGt0Zi5JSW50ZXJwb2xhdGluZ1BhcmVudCwgdGVycmFmb3JtQXR0cmlidXRlOiBzdHJpbmcpIHtcbiAgICBzdXBlcih0ZXJyYWZvcm1SZXNvdXJjZSwgdGVycmFmb3JtQXR0cmlidXRlLCBmYWxzZSwgMCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGludGVybmFsVmFsdWUoKTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzUmVwbGFjZW1lbnRWYWx1ZSB8IHVuZGVmaW5lZCB7XG4gICAgbGV0IGhhc0FueVZhbHVlcyA9IHRoaXMuaXNFbXB0eU9iamVjdDtcbiAgICBjb25zdCBpbnRlcm5hbFZhbHVlUmVzdWx0OiBhbnkgPSB7fTtcbiAgICBpZiAodGhpcy5fYm9vbGVhblZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LmJvb2xlYW5WYWx1ZSA9IHRoaXMuX2Jvb2xlYW5WYWx1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2RheU9mV2Vla1ZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LmRheU9mV2Vla1ZhbHVlID0gdGhpcy5fZGF5T2ZXZWVrVmFsdWU7XG4gICAgfVxuICAgIGlmICh0aGlzLl9mbG9hdFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LmZsb2F0VmFsdWUgPSB0aGlzLl9mbG9hdFZhbHVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5faW50ZWdlclZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LmludGVnZXJWYWx1ZSA9IHRoaXMuX2ludGVnZXJWYWx1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3N0cmluZ1ZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LnN0cmluZ1ZhbHVlID0gdGhpcy5fc3RyaW5nVmFsdWU7XG4gICAgfVxuICAgIGlmICh0aGlzLl90aW1lc3RhbXBWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC50aW1lc3RhbXBWYWx1ZSA9IHRoaXMuX3RpbWVzdGFtcFZhbHVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5fZGF0ZVZhbHVlPy5pbnRlcm5hbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LmRhdGVWYWx1ZSA9IHRoaXMuX2RhdGVWYWx1ZT8uaW50ZXJuYWxWYWx1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3RpbWVWYWx1ZT8uaW50ZXJuYWxWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC50aW1lVmFsdWUgPSB0aGlzLl90aW1lVmFsdWU/LmludGVybmFsVmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBoYXNBbnlWYWx1ZXMgPyBpbnRlcm5hbFZhbHVlUmVzdWx0IDogdW5kZWZpbmVkO1xuICB9XG5cbiAgcHVibGljIHNldCBpbnRlcm5hbFZhbHVlKHZhbHVlOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkJ1Y2tldGluZ0NvbmZpZ0J1Y2tldHNSZXBsYWNlbWVudFZhbHVlIHwgdW5kZWZpbmVkKSB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IGZhbHNlO1xuICAgICAgdGhpcy5fYm9vbGVhblZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fZGF5T2ZXZWVrVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9mbG9hdFZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5faW50ZWdlclZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fc3RyaW5nVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl90aW1lc3RhbXBWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2RhdGVWYWx1ZS5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fdGltZVZhbHVlLmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5pc0VtcHR5T2JqZWN0ID0gT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aCA9PT0gMDtcbiAgICAgIHRoaXMuX2Jvb2xlYW5WYWx1ZSA9IHZhbHVlLmJvb2xlYW5WYWx1ZTtcbiAgICAgIHRoaXMuX2RheU9mV2Vla1ZhbHVlID0gdmFsdWUuZGF5T2ZXZWVrVmFsdWU7XG4gICAgICB0aGlzLl9mbG9hdFZhbHVlID0gdmFsdWUuZmxvYXRWYWx1ZTtcbiAgICAgIHRoaXMuX2ludGVnZXJWYWx1ZSA9IHZhbHVlLmludGVnZXJWYWx1ZTtcbiAgICAgIHRoaXMuX3N0cmluZ1ZhbHVlID0gdmFsdWUuc3RyaW5nVmFsdWU7XG4gICAgICB0aGlzLl90aW1lc3RhbXBWYWx1ZSA9IHZhbHVlLnRpbWVzdGFtcFZhbHVlO1xuICAgICAgdGhpcy5fZGF0ZVZhbHVlLmludGVybmFsVmFsdWUgPSB2YWx1ZS5kYXRlVmFsdWU7XG4gICAgICB0aGlzLl90aW1lVmFsdWUuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlLnRpbWVWYWx1ZTtcbiAgICB9XG4gIH1cblxuICAvLyBib29sZWFuX3ZhbHVlIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX2Jvb2xlYW5WYWx1ZT86IGJvb2xlYW4gfCBjZGt0Zi5JUmVzb2x2YWJsZTsgXG4gIHB1YmxpYyBnZXQgYm9vbGVhblZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLmdldEJvb2xlYW5BdHRyaWJ1dGUoJ2Jvb2xlYW5fdmFsdWUnKTtcbiAgfVxuICBwdWJsaWMgc2V0IGJvb2xlYW5WYWx1ZSh2YWx1ZTogYm9vbGVhbiB8IGNka3RmLklSZXNvbHZhYmxlKSB7XG4gICAgdGhpcy5fYm9vbGVhblZhbHVlID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0Qm9vbGVhblZhbHVlKCkge1xuICAgIHRoaXMuX2Jvb2xlYW5WYWx1ZSA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgYm9vbGVhblZhbHVlSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Jvb2xlYW5WYWx1ZTtcbiAgfVxuXG4gIC8vIGRheV9vZl93ZWVrX3ZhbHVlIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX2RheU9mV2Vla1ZhbHVlPzogc3RyaW5nOyBcbiAgcHVibGljIGdldCBkYXlPZldlZWtWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ2RheV9vZl93ZWVrX3ZhbHVlJyk7XG4gIH1cbiAgcHVibGljIHNldCBkYXlPZldlZWtWYWx1ZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fZGF5T2ZXZWVrVmFsdWUgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXREYXlPZldlZWtWYWx1ZSgpIHtcbiAgICB0aGlzLl9kYXlPZldlZWtWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgZGF5T2ZXZWVrVmFsdWVJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGF5T2ZXZWVrVmFsdWU7XG4gIH1cblxuICAvLyBmbG9hdF92YWx1ZSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9mbG9hdFZhbHVlPzogbnVtYmVyOyBcbiAgcHVibGljIGdldCBmbG9hdFZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLmdldE51bWJlckF0dHJpYnV0ZSgnZmxvYXRfdmFsdWUnKTtcbiAgfVxuICBwdWJsaWMgc2V0IGZsb2F0VmFsdWUodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX2Zsb2F0VmFsdWUgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRGbG9hdFZhbHVlKCkge1xuICAgIHRoaXMuX2Zsb2F0VmFsdWUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IGZsb2F0VmFsdWVJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZmxvYXRWYWx1ZTtcbiAgfVxuXG4gIC8vIGludGVnZXJfdmFsdWUgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfaW50ZWdlclZhbHVlPzogc3RyaW5nOyBcbiAgcHVibGljIGdldCBpbnRlZ2VyVmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCdpbnRlZ2VyX3ZhbHVlJyk7XG4gIH1cbiAgcHVibGljIHNldCBpbnRlZ2VyVmFsdWUodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX2ludGVnZXJWYWx1ZSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldEludGVnZXJWYWx1ZSgpIHtcbiAgICB0aGlzLl9pbnRlZ2VyVmFsdWUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IGludGVnZXJWYWx1ZUlucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9pbnRlZ2VyVmFsdWU7XG4gIH1cblxuICAvLyBzdHJpbmdfdmFsdWUgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfc3RyaW5nVmFsdWU/OiBzdHJpbmc7IFxuICBwdWJsaWMgZ2V0IHN0cmluZ1ZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgnc3RyaW5nX3ZhbHVlJyk7XG4gIH1cbiAgcHVibGljIHNldCBzdHJpbmdWYWx1ZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fc3RyaW5nVmFsdWUgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRTdHJpbmdWYWx1ZSgpIHtcbiAgICB0aGlzLl9zdHJpbmdWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgc3RyaW5nVmFsdWVJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fc3RyaW5nVmFsdWU7XG4gIH1cblxuICAvLyB0aW1lc3RhbXBfdmFsdWUgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfdGltZXN0YW1wVmFsdWU/OiBzdHJpbmc7IFxuICBwdWJsaWMgZ2V0IHRpbWVzdGFtcFZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgndGltZXN0YW1wX3ZhbHVlJyk7XG4gIH1cbiAgcHVibGljIHNldCB0aW1lc3RhbXBWYWx1ZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fdGltZXN0YW1wVmFsdWUgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRUaW1lc3RhbXBWYWx1ZSgpIHtcbiAgICB0aGlzLl90aW1lc3RhbXBWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgdGltZXN0YW1wVmFsdWVJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fdGltZXN0YW1wVmFsdWU7XG4gIH1cblxuICAvLyBkYXRlX3ZhbHVlIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX2RhdGVWYWx1ZSA9IG5ldyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkJ1Y2tldGluZ0NvbmZpZ0J1Y2tldHNSZXBsYWNlbWVudFZhbHVlRGF0ZVZhbHVlT3V0cHV0UmVmZXJlbmNlKHRoaXMsIFwiZGF0ZV92YWx1ZVwiKTtcbiAgcHVibGljIGdldCBkYXRlVmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGVWYWx1ZTtcbiAgfVxuICBwdWJsaWMgcHV0RGF0ZVZhbHVlKHZhbHVlOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkJ1Y2tldGluZ0NvbmZpZ0J1Y2tldHNSZXBsYWNlbWVudFZhbHVlRGF0ZVZhbHVlKSB7XG4gICAgdGhpcy5fZGF0ZVZhbHVlLmludGVybmFsVmFsdWUgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXREYXRlVmFsdWUoKSB7XG4gICAgdGhpcy5fZGF0ZVZhbHVlLmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IGRhdGVWYWx1ZUlucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9kYXRlVmFsdWUuaW50ZXJuYWxWYWx1ZTtcbiAgfVxuXG4gIC8vIHRpbWVfdmFsdWUgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfdGltZVZhbHVlID0gbmV3IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c1JlcGxhY2VtZW50VmFsdWVUaW1lVmFsdWVPdXRwdXRSZWZlcmVuY2UodGhpcywgXCJ0aW1lX3ZhbHVlXCIpO1xuICBwdWJsaWMgZ2V0IHRpbWVWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdGltZVZhbHVlO1xuICB9XG4gIHB1YmxpYyBwdXRUaW1lVmFsdWUodmFsdWU6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c1JlcGxhY2VtZW50VmFsdWVUaW1lVmFsdWUpIHtcbiAgICB0aGlzLl90aW1lVmFsdWUuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldFRpbWVWYWx1ZSgpIHtcbiAgICB0aGlzLl90aW1lVmFsdWUuaW50ZXJuYWxWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgdGltZVZhbHVlSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RpbWVWYWx1ZS5pbnRlcm5hbFZhbHVlO1xuICB9XG59XG5leHBvcnQgaW50ZXJmYWNlIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0cyB7XG4gIC8qKlxuICAqIG1heCBibG9ja1xuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNtYXggRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI21heH1cbiAgKi9cbiAgcmVhZG9ubHkgbWF4PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzTWF4O1xuICAvKipcbiAgKiBtaW4gYmxvY2tcbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjbWluIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSNtaW59XG4gICovXG4gIHJlYWRvbmx5IG1pbj86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c01pbjtcbiAgLyoqXG4gICogcmVwbGFjZW1lbnRfdmFsdWUgYmxvY2tcbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjcmVwbGFjZW1lbnRfdmFsdWUgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI3JlcGxhY2VtZW50X3ZhbHVlfVxuICAqL1xuICByZWFkb25seSByZXBsYWNlbWVudFZhbHVlOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkJ1Y2tldGluZ0NvbmZpZ0J1Y2tldHNSZXBsYWNlbWVudFZhbHVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzVG9UZXJyYWZvcm0oc3RydWN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzIHwgY2RrdGYuSVJlc29sdmFibGUpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIHJldHVybiB7XG4gICAgbWF4OiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkJ1Y2tldGluZ0NvbmZpZ0J1Y2tldHNNYXhUb1RlcnJhZm9ybShzdHJ1Y3QhLm1heCksXG4gICAgbWluOiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkJ1Y2tldGluZ0NvbmZpZ0J1Y2tldHNNaW5Ub1RlcnJhZm9ybShzdHJ1Y3QhLm1pbiksXG4gICAgcmVwbGFjZW1lbnRfdmFsdWU6IGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c1JlcGxhY2VtZW50VmFsdWVUb1RlcnJhZm9ybShzdHJ1Y3QhLnJlcGxhY2VtZW50VmFsdWUpLFxuICB9XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c1RvSGNsVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0cyB8IGNka3RmLklSZXNvbHZhYmxlKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkgfHwgY2RrdGYuVG9rZW5pemF0aW9uLmlzUmVzb2x2YWJsZShzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgaWYgKGNka3RmLmlzQ29tcGxleEVsZW1lbnQoc3RydWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkEgY29tcGxleCBlbGVtZW50IHdhcyB1c2VkIGFzIGNvbmZpZ3VyYXRpb24sIHRoaXMgaXMgbm90IHN1cHBvcnRlZDogaHR0cHM6Ly9jZGsudGYvY29tcGxleC1vYmplY3QtYXMtY29uZmlndXJhdGlvblwiKTtcbiAgfVxuICBjb25zdCBhdHRycyA9IHtcbiAgICBtYXg6IHtcbiAgICAgIHZhbHVlOiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkJ1Y2tldGluZ0NvbmZpZ0J1Y2tldHNNYXhUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLm1heCksXG4gICAgICBpc0Jsb2NrOiB0cnVlLFxuICAgICAgdHlwZTogXCJsaXN0XCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcIkRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c01heExpc3RcIixcbiAgICB9LFxuICAgIG1pbjoge1xuICAgICAgdmFsdWU6IGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c01pblRvSGNsVGVycmFmb3JtKHN0cnVjdCEubWluKSxcbiAgICAgIGlzQmxvY2s6IHRydWUsXG4gICAgICB0eXBlOiBcImxpc3RcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwiRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzTWluTGlzdFwiLFxuICAgIH0sXG4gICAgcmVwbGFjZW1lbnRfdmFsdWU6IHtcbiAgICAgIHZhbHVlOiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkJ1Y2tldGluZ0NvbmZpZ0J1Y2tldHNSZXBsYWNlbWVudFZhbHVlVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5yZXBsYWNlbWVudFZhbHVlKSxcbiAgICAgIGlzQmxvY2s6IHRydWUsXG4gICAgICB0eXBlOiBcImxpc3RcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwiRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzUmVwbGFjZW1lbnRWYWx1ZUxpc3RcIixcbiAgICB9LFxuICB9O1xuXG4gIC8vIHJlbW92ZSB1bmRlZmluZWQgYXR0cmlidXRlc1xuICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5lbnRyaWVzKGF0dHJzKS5maWx0ZXIoKFtfLCB2YWx1ZV0pID0+IHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUudmFsdWUgIT09IHVuZGVmaW5lZCkpO1xufVxuXG5leHBvcnQgY2xhc3MgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzT3V0cHV0UmVmZXJlbmNlIGV4dGVuZHMgY2RrdGYuQ29tcGxleE9iamVjdCB7XG4gIHByaXZhdGUgaXNFbXB0eU9iamVjdCA9IGZhbHNlO1xuICBwcml2YXRlIHJlc29sdmFibGVWYWx1ZT86IGNka3RmLklSZXNvbHZhYmxlO1xuXG4gIC8qKlxuICAqIEBwYXJhbSB0ZXJyYWZvcm1SZXNvdXJjZSBUaGUgcGFyZW50IHJlc291cmNlXG4gICogQHBhcmFtIHRlcnJhZm9ybUF0dHJpYnV0ZSBUaGUgYXR0cmlidXRlIG9uIHRoZSBwYXJlbnQgcmVzb3VyY2UgdGhpcyBjbGFzcyBpcyByZWZlcmVuY2luZ1xuICAqIEBwYXJhbSBjb21wbGV4T2JqZWN0SW5kZXggdGhlIGluZGV4IG9mIHRoaXMgaXRlbSBpbiB0aGUgbGlzdFxuICAqIEBwYXJhbSBjb21wbGV4T2JqZWN0SXNGcm9tU2V0IHdoZXRoZXIgdGhlIGxpc3QgaXMgd3JhcHBpbmcgYSBzZXQgKHdpbGwgYWRkIHRvbGlzdCgpIHRvIGJlIGFibGUgdG8gYWNjZXNzIGFuIGl0ZW0gdmlhIGFuIGluZGV4KVxuICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IodGVycmFmb3JtUmVzb3VyY2U6IGNka3RmLklJbnRlcnBvbGF0aW5nUGFyZW50LCB0ZXJyYWZvcm1BdHRyaWJ1dGU6IHN0cmluZywgY29tcGxleE9iamVjdEluZGV4OiBudW1iZXIsIGNvbXBsZXhPYmplY3RJc0Zyb21TZXQ6IGJvb2xlYW4pIHtcbiAgICBzdXBlcih0ZXJyYWZvcm1SZXNvdXJjZSwgdGVycmFmb3JtQXR0cmlidXRlLCBjb21wbGV4T2JqZWN0SXNGcm9tU2V0LCBjb21wbGV4T2JqZWN0SW5kZXgpO1xuICB9XG5cbiAgcHVibGljIGdldCBpbnRlcm5hbFZhbHVlKCk6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0cyB8IGNka3RmLklSZXNvbHZhYmxlIHwgdW5kZWZpbmVkIHtcbiAgICBpZiAodGhpcy5yZXNvbHZhYmxlVmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlc29sdmFibGVWYWx1ZTtcbiAgICB9XG4gICAgbGV0IGhhc0FueVZhbHVlcyA9IHRoaXMuaXNFbXB0eU9iamVjdDtcbiAgICBjb25zdCBpbnRlcm5hbFZhbHVlUmVzdWx0OiBhbnkgPSB7fTtcbiAgICBpZiAodGhpcy5fbWF4Py5pbnRlcm5hbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0Lm1heCA9IHRoaXMuX21heD8uaW50ZXJuYWxWYWx1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX21pbj8uaW50ZXJuYWxWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC5taW4gPSB0aGlzLl9taW4/LmludGVybmFsVmFsdWU7XG4gICAgfVxuICAgIGlmICh0aGlzLl9yZXBsYWNlbWVudFZhbHVlPy5pbnRlcm5hbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LnJlcGxhY2VtZW50VmFsdWUgPSB0aGlzLl9yZXBsYWNlbWVudFZhbHVlPy5pbnRlcm5hbFZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gaGFzQW55VmFsdWVzID8gaW50ZXJuYWxWYWx1ZVJlc3VsdCA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgaW50ZXJuYWxWYWx1ZSh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzIHwgY2RrdGYuSVJlc29sdmFibGUgfCB1bmRlZmluZWQpIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5pc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG4gICAgICB0aGlzLnJlc29sdmFibGVWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX21heC5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fbWluLmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9yZXBsYWNlbWVudFZhbHVlLmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGVsc2UgaWYgKGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUodmFsdWUpKSB7XG4gICAgICB0aGlzLmlzRW1wdHlPYmplY3QgPSBmYWxzZTtcbiAgICAgIHRoaXMucmVzb2x2YWJsZVZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5pc0VtcHR5T2JqZWN0ID0gT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aCA9PT0gMDtcbiAgICAgIHRoaXMucmVzb2x2YWJsZVZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fbWF4LmludGVybmFsVmFsdWUgPSB2YWx1ZS5tYXg7XG4gICAgICB0aGlzLl9taW4uaW50ZXJuYWxWYWx1ZSA9IHZhbHVlLm1pbjtcbiAgICAgIHRoaXMuX3JlcGxhY2VtZW50VmFsdWUuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlLnJlcGxhY2VtZW50VmFsdWU7XG4gICAgfVxuICB9XG5cbiAgLy8gbWF4IC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX21heCA9IG5ldyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkJ1Y2tldGluZ0NvbmZpZ0J1Y2tldHNNYXhPdXRwdXRSZWZlcmVuY2UodGhpcywgXCJtYXhcIik7XG4gIHB1YmxpYyBnZXQgbWF4KCkge1xuICAgIHJldHVybiB0aGlzLl9tYXg7XG4gIH1cbiAgcHVibGljIHB1dE1heCh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzTWF4KSB7XG4gICAgdGhpcy5fbWF4LmludGVybmFsVmFsdWUgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRNYXgoKSB7XG4gICAgdGhpcy5fbWF4LmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IG1heElucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9tYXguaW50ZXJuYWxWYWx1ZTtcbiAgfVxuXG4gIC8vIG1pbiAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9taW4gPSBuZXcgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzTWluT3V0cHV0UmVmZXJlbmNlKHRoaXMsIFwibWluXCIpO1xuICBwdWJsaWMgZ2V0IG1pbigpIHtcbiAgICByZXR1cm4gdGhpcy5fbWluO1xuICB9XG4gIHB1YmxpYyBwdXRNaW4odmFsdWU6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c01pbikge1xuICAgIHRoaXMuX21pbi5pbnRlcm5hbFZhbHVlID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0TWluKCkge1xuICAgIHRoaXMuX21pbi5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBtaW5JbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fbWluLmludGVybmFsVmFsdWU7XG4gIH1cblxuICAvLyByZXBsYWNlbWVudF92YWx1ZSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IGZhbHNlLCByZXF1aXJlZDogdHJ1ZVxuICBwcml2YXRlIF9yZXBsYWNlbWVudFZhbHVlID0gbmV3IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c1JlcGxhY2VtZW50VmFsdWVPdXRwdXRSZWZlcmVuY2UodGhpcywgXCJyZXBsYWNlbWVudF92YWx1ZVwiKTtcbiAgcHVibGljIGdldCByZXBsYWNlbWVudFZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLl9yZXBsYWNlbWVudFZhbHVlO1xuICB9XG4gIHB1YmxpYyBwdXRSZXBsYWNlbWVudFZhbHVlKHZhbHVlOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkJ1Y2tldGluZ0NvbmZpZ0J1Y2tldHNSZXBsYWNlbWVudFZhbHVlKSB7XG4gICAgdGhpcy5fcmVwbGFjZW1lbnRWYWx1ZS5pbnRlcm5hbFZhbHVlID0gdmFsdWU7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IHJlcGxhY2VtZW50VmFsdWVJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVwbGFjZW1lbnRWYWx1ZS5pbnRlcm5hbFZhbHVlO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkJ1Y2tldGluZ0NvbmZpZ0J1Y2tldHNMaXN0IGV4dGVuZHMgY2RrdGYuQ29tcGxleExpc3Qge1xuICBwdWJsaWMgaW50ZXJuYWxWYWx1ZT8gOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkJ1Y2tldGluZ0NvbmZpZ0J1Y2tldHNbXSB8IGNka3RmLklSZXNvbHZhYmxlXG5cbiAgLyoqXG4gICogQHBhcmFtIHRlcnJhZm9ybVJlc291cmNlIFRoZSBwYXJlbnQgcmVzb3VyY2VcbiAgKiBAcGFyYW0gdGVycmFmb3JtQXR0cmlidXRlIFRoZSBhdHRyaWJ1dGUgb24gdGhlIHBhcmVudCByZXNvdXJjZSB0aGlzIGNsYXNzIGlzIHJlZmVyZW5jaW5nXG4gICogQHBhcmFtIHdyYXBzU2V0IHdoZXRoZXIgdGhlIGxpc3QgaXMgd3JhcHBpbmcgYSBzZXQgKHdpbGwgYWRkIHRvbGlzdCgpIHRvIGJlIGFibGUgdG8gYWNjZXNzIGFuIGl0ZW0gdmlhIGFuIGluZGV4KVxuICAqL1xuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgdGVycmFmb3JtUmVzb3VyY2U6IGNka3RmLklJbnRlcnBvbGF0aW5nUGFyZW50LCBwcm90ZWN0ZWQgdGVycmFmb3JtQXR0cmlidXRlOiBzdHJpbmcsIHByb3RlY3RlZCB3cmFwc1NldDogYm9vbGVhbikge1xuICAgIHN1cGVyKHRlcnJhZm9ybVJlc291cmNlLCB0ZXJyYWZvcm1BdHRyaWJ1dGUsIHdyYXBzU2V0KVxuICB9XG5cbiAgLyoqXG4gICogQHBhcmFtIGluZGV4IHRoZSBpbmRleCBvZiB0aGUgaXRlbSB0byByZXR1cm5cbiAgKi9cbiAgcHVibGljIGdldChpbmRleDogbnVtYmVyKTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzT3V0cHV0UmVmZXJlbmNlIHtcbiAgICByZXR1cm4gbmV3IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c091dHB1dFJlZmVyZW5jZSh0aGlzLnRlcnJhZm9ybVJlc291cmNlLCB0aGlzLnRlcnJhZm9ybUF0dHJpYnV0ZSwgaW5kZXgsIHRoaXMud3JhcHNTZXQpO1xuICB9XG59XG5leHBvcnQgaW50ZXJmYWNlIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnIHtcbiAgLyoqXG4gICogYnVja2V0cyBibG9ja1xuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNidWNrZXRzIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSNidWNrZXRzfVxuICAqL1xuICByZWFkb25seSBidWNrZXRzPzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzW10gfCBjZGt0Zi5JUmVzb2x2YWJsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnVG9UZXJyYWZvcm0oc3RydWN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdPdXRwdXRSZWZlcmVuY2UgfCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkJ1Y2tldGluZ0NvbmZpZyk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpIHx8IGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIGlmIChjZGt0Zi5pc0NvbXBsZXhFbGVtZW50KHN0cnVjdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGNvbXBsZXggZWxlbWVudCB3YXMgdXNlZCBhcyBjb25maWd1cmF0aW9uLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQ6IGh0dHBzOi8vY2RrLnRmL2NvbXBsZXgtb2JqZWN0LWFzLWNvbmZpZ3VyYXRpb25cIik7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBidWNrZXRzOiBjZGt0Zi5saXN0TWFwcGVyKGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c1RvVGVycmFmb3JtLCB0cnVlKShzdHJ1Y3QhLmJ1Y2tldHMpLFxuICB9XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnVG9IY2xUZXJyYWZvcm0oc3RydWN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdPdXRwdXRSZWZlcmVuY2UgfCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkJ1Y2tldGluZ0NvbmZpZyk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpIHx8IGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIGlmIChjZGt0Zi5pc0NvbXBsZXhFbGVtZW50KHN0cnVjdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGNvbXBsZXggZWxlbWVudCB3YXMgdXNlZCBhcyBjb25maWd1cmF0aW9uLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQ6IGh0dHBzOi8vY2RrLnRmL2NvbXBsZXgtb2JqZWN0LWFzLWNvbmZpZ3VyYXRpb25cIik7XG4gIH1cbiAgY29uc3QgYXR0cnMgPSB7XG4gICAgYnVja2V0czoge1xuICAgICAgdmFsdWU6IGNka3RmLmxpc3RNYXBwZXJIY2woZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdCdWNrZXRzVG9IY2xUZXJyYWZvcm0sIHRydWUpKHN0cnVjdCEuYnVja2V0cyksXG4gICAgICBpc0Jsb2NrOiB0cnVlLFxuICAgICAgdHlwZTogXCJsaXN0XCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcIkRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c0xpc3RcIixcbiAgICB9LFxuICB9O1xuXG4gIC8vIHJlbW92ZSB1bmRlZmluZWQgYXR0cmlidXRlc1xuICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5lbnRyaWVzKGF0dHJzKS5maWx0ZXIoKFtfLCB2YWx1ZV0pID0+IHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUudmFsdWUgIT09IHVuZGVmaW5lZCkpO1xufVxuXG5leHBvcnQgY2xhc3MgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdPdXRwdXRSZWZlcmVuY2UgZXh0ZW5kcyBjZGt0Zi5Db21wbGV4T2JqZWN0IHtcbiAgcHJpdmF0ZSBpc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG5cbiAgLyoqXG4gICogQHBhcmFtIHRlcnJhZm9ybVJlc291cmNlIFRoZSBwYXJlbnQgcmVzb3VyY2VcbiAgKiBAcGFyYW0gdGVycmFmb3JtQXR0cmlidXRlIFRoZSBhdHRyaWJ1dGUgb24gdGhlIHBhcmVudCByZXNvdXJjZSB0aGlzIGNsYXNzIGlzIHJlZmVyZW5jaW5nXG4gICovXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcih0ZXJyYWZvcm1SZXNvdXJjZTogY2RrdGYuSUludGVycG9sYXRpbmdQYXJlbnQsIHRlcnJhZm9ybUF0dHJpYnV0ZTogc3RyaW5nKSB7XG4gICAgc3VwZXIodGVycmFmb3JtUmVzb3VyY2UsIHRlcnJhZm9ybUF0dHJpYnV0ZSwgZmFsc2UsIDApO1xuICB9XG5cbiAgcHVibGljIGdldCBpbnRlcm5hbFZhbHVlKCk6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnIHwgdW5kZWZpbmVkIHtcbiAgICBsZXQgaGFzQW55VmFsdWVzID0gdGhpcy5pc0VtcHR5T2JqZWN0O1xuICAgIGNvbnN0IGludGVybmFsVmFsdWVSZXN1bHQ6IGFueSA9IHt9O1xuICAgIGlmICh0aGlzLl9idWNrZXRzPy5pbnRlcm5hbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LmJ1Y2tldHMgPSB0aGlzLl9idWNrZXRzPy5pbnRlcm5hbFZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gaGFzQW55VmFsdWVzID8gaW50ZXJuYWxWYWx1ZVJlc3VsdCA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgaW50ZXJuYWxWYWx1ZSh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWcgfCB1bmRlZmluZWQpIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5pc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG4gICAgICB0aGlzLl9idWNrZXRzLmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5pc0VtcHR5T2JqZWN0ID0gT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aCA9PT0gMDtcbiAgICAgIHRoaXMuX2J1Y2tldHMuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlLmJ1Y2tldHM7XG4gICAgfVxuICB9XG5cbiAgLy8gYnVja2V0cyAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9idWNrZXRzID0gbmV3IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnQnVja2V0c0xpc3QodGhpcywgXCJidWNrZXRzXCIsIGZhbHNlKTtcbiAgcHVibGljIGdldCBidWNrZXRzKCkge1xuICAgIHJldHVybiB0aGlzLl9idWNrZXRzO1xuICB9XG4gIHB1YmxpYyBwdXRCdWNrZXRzKHZhbHVlOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkJ1Y2tldGluZ0NvbmZpZ0J1Y2tldHNbXSB8IGNka3RmLklSZXNvbHZhYmxlKSB7XG4gICAgdGhpcy5fYnVja2V0cy5pbnRlcm5hbFZhbHVlID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0QnVja2V0cygpIHtcbiAgICB0aGlzLl9idWNrZXRzLmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IGJ1Y2tldHNJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fYnVja2V0cy5pbnRlcm5hbFZhbHVlO1xuICB9XG59XG5leHBvcnQgaW50ZXJmYWNlIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ2hhcmFjdGVyTWFza0NvbmZpZ0NoYXJhY3RlcnNUb0lnbm9yZSB7XG4gIC8qKlxuICAqIENoYXJhY3RlcnMgdG8gbm90IHRyYW5zZm9ybSB3aGVuIG1hc2tpbmcuXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI2NoYXJhY3RlcnNfdG9fc2tpcCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjY2hhcmFjdGVyc190b19za2lwfVxuICAqL1xuICByZWFkb25seSBjaGFyYWN0ZXJzVG9Ta2lwPzogc3RyaW5nO1xuICAvKipcbiAgKiBDb21tb24gY2hhcmFjdGVycyB0byBub3QgdHJhbnNmb3JtIHdoZW4gbWFza2luZy4gVXNlZnVsIHRvIGF2b2lkIHJlbW92aW5nIHB1bmN0dWF0aW9uLiBQb3NzaWJsZSB2YWx1ZXM6IFtcIk5VTUVSSUNcIiwgXCJBTFBIQV9VUFBFUl9DQVNFXCIsIFwiQUxQSEFfTE9XRVJfQ0FTRVwiLCBcIlBVTkNUVUFUSU9OXCIsIFwiV0hJVEVTUEFDRVwiXVxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNjb21tb25fY2hhcmFjdGVyc190b19pZ25vcmUgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI2NvbW1vbl9jaGFyYWN0ZXJzX3RvX2lnbm9yZX1cbiAgKi9cbiAgcmVhZG9ubHkgY29tbW9uQ2hhcmFjdGVyc1RvSWdub3JlPzogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DaGFyYWN0ZXJNYXNrQ29uZmlnQ2hhcmFjdGVyc1RvSWdub3JlVG9UZXJyYWZvcm0oc3RydWN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DaGFyYWN0ZXJNYXNrQ29uZmlnQ2hhcmFjdGVyc1RvSWdub3JlIHwgY2RrdGYuSVJlc29sdmFibGUpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIHJldHVybiB7XG4gICAgY2hhcmFjdGVyc190b19za2lwOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLmNoYXJhY3RlcnNUb1NraXApLFxuICAgIGNvbW1vbl9jaGFyYWN0ZXJzX3RvX2lnbm9yZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5jb21tb25DaGFyYWN0ZXJzVG9JZ25vcmUpLFxuICB9XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ2hhcmFjdGVyTWFza0NvbmZpZ0NoYXJhY3RlcnNUb0lnbm9yZVRvSGNsVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ2hhcmFjdGVyTWFza0NvbmZpZ0NoYXJhY3RlcnNUb0lnbm9yZSB8IGNka3RmLklSZXNvbHZhYmxlKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkgfHwgY2RrdGYuVG9rZW5pemF0aW9uLmlzUmVzb2x2YWJsZShzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgaWYgKGNka3RmLmlzQ29tcGxleEVsZW1lbnQoc3RydWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkEgY29tcGxleCBlbGVtZW50IHdhcyB1c2VkIGFzIGNvbmZpZ3VyYXRpb24sIHRoaXMgaXMgbm90IHN1cHBvcnRlZDogaHR0cHM6Ly9jZGsudGYvY29tcGxleC1vYmplY3QtYXMtY29uZmlndXJhdGlvblwiKTtcbiAgfVxuICBjb25zdCBhdHRycyA9IHtcbiAgICBjaGFyYWN0ZXJzX3RvX3NraXA6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5zdHJpbmdUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLmNoYXJhY3RlcnNUb1NraXApLFxuICAgICAgaXNCbG9jazogZmFsc2UsXG4gICAgICB0eXBlOiBcInNpbXBsZVwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJzdHJpbmdcIixcbiAgICB9LFxuICAgIGNvbW1vbl9jaGFyYWN0ZXJzX3RvX2lnbm9yZToge1xuICAgICAgdmFsdWU6IGNka3RmLnN0cmluZ1RvSGNsVGVycmFmb3JtKHN0cnVjdCEuY29tbW9uQ2hhcmFjdGVyc1RvSWdub3JlKSxcbiAgICAgIGlzQmxvY2s6IGZhbHNlLFxuICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwic3RyaW5nXCIsXG4gICAgfSxcbiAgfTtcblxuICAvLyByZW1vdmUgdW5kZWZpbmVkIGF0dHJpYnV0ZXNcbiAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhhdHRycykuZmlsdGVyKChbXywgdmFsdWVdKSA9PiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlLnZhbHVlICE9PSB1bmRlZmluZWQpKTtcbn1cblxuZXhwb3J0IGNsYXNzIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ2hhcmFjdGVyTWFza0NvbmZpZ0NoYXJhY3RlcnNUb0lnbm9yZU91dHB1dFJlZmVyZW5jZSBleHRlbmRzIGNka3RmLkNvbXBsZXhPYmplY3Qge1xuICBwcml2YXRlIGlzRW1wdHlPYmplY3QgPSBmYWxzZTtcbiAgcHJpdmF0ZSByZXNvbHZhYmxlVmFsdWU/OiBjZGt0Zi5JUmVzb2x2YWJsZTtcblxuICAvKipcbiAgKiBAcGFyYW0gdGVycmFmb3JtUmVzb3VyY2UgVGhlIHBhcmVudCByZXNvdXJjZVxuICAqIEBwYXJhbSB0ZXJyYWZvcm1BdHRyaWJ1dGUgVGhlIGF0dHJpYnV0ZSBvbiB0aGUgcGFyZW50IHJlc291cmNlIHRoaXMgY2xhc3MgaXMgcmVmZXJlbmNpbmdcbiAgKiBAcGFyYW0gY29tcGxleE9iamVjdEluZGV4IHRoZSBpbmRleCBvZiB0aGlzIGl0ZW0gaW4gdGhlIGxpc3RcbiAgKiBAcGFyYW0gY29tcGxleE9iamVjdElzRnJvbVNldCB3aGV0aGVyIHRoZSBsaXN0IGlzIHdyYXBwaW5nIGEgc2V0ICh3aWxsIGFkZCB0b2xpc3QoKSB0byBiZSBhYmxlIHRvIGFjY2VzcyBhbiBpdGVtIHZpYSBhbiBpbmRleClcbiAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHRlcnJhZm9ybVJlc291cmNlOiBjZGt0Zi5JSW50ZXJwb2xhdGluZ1BhcmVudCwgdGVycmFmb3JtQXR0cmlidXRlOiBzdHJpbmcsIGNvbXBsZXhPYmplY3RJbmRleDogbnVtYmVyLCBjb21wbGV4T2JqZWN0SXNGcm9tU2V0OiBib29sZWFuKSB7XG4gICAgc3VwZXIodGVycmFmb3JtUmVzb3VyY2UsIHRlcnJhZm9ybUF0dHJpYnV0ZSwgY29tcGxleE9iamVjdElzRnJvbVNldCwgY29tcGxleE9iamVjdEluZGV4KTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgaW50ZXJuYWxWYWx1ZSgpOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNoYXJhY3Rlck1hc2tDb25maWdDaGFyYWN0ZXJzVG9JZ25vcmUgfCBjZGt0Zi5JUmVzb2x2YWJsZSB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKHRoaXMucmVzb2x2YWJsZVZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXNvbHZhYmxlVmFsdWU7XG4gICAgfVxuICAgIGxldCBoYXNBbnlWYWx1ZXMgPSB0aGlzLmlzRW1wdHlPYmplY3Q7XG4gICAgY29uc3QgaW50ZXJuYWxWYWx1ZVJlc3VsdDogYW55ID0ge307XG4gICAgaWYgKHRoaXMuX2NoYXJhY3RlcnNUb1NraXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQuY2hhcmFjdGVyc1RvU2tpcCA9IHRoaXMuX2NoYXJhY3RlcnNUb1NraXA7XG4gICAgfVxuICAgIGlmICh0aGlzLl9jb21tb25DaGFyYWN0ZXJzVG9JZ25vcmUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQuY29tbW9uQ2hhcmFjdGVyc1RvSWdub3JlID0gdGhpcy5fY29tbW9uQ2hhcmFjdGVyc1RvSWdub3JlO1xuICAgIH1cbiAgICByZXR1cm4gaGFzQW55VmFsdWVzID8gaW50ZXJuYWxWYWx1ZVJlc3VsdCA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgaW50ZXJuYWxWYWx1ZSh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DaGFyYWN0ZXJNYXNrQ29uZmlnQ2hhcmFjdGVyc1RvSWdub3JlIHwgY2RrdGYuSVJlc29sdmFibGUgfCB1bmRlZmluZWQpIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5pc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG4gICAgICB0aGlzLnJlc29sdmFibGVWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2NoYXJhY3RlcnNUb1NraXAgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9jb21tb25DaGFyYWN0ZXJzVG9JZ25vcmUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGVsc2UgaWYgKGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUodmFsdWUpKSB7XG4gICAgICB0aGlzLmlzRW1wdHlPYmplY3QgPSBmYWxzZTtcbiAgICAgIHRoaXMucmVzb2x2YWJsZVZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5pc0VtcHR5T2JqZWN0ID0gT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aCA9PT0gMDtcbiAgICAgIHRoaXMucmVzb2x2YWJsZVZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fY2hhcmFjdGVyc1RvU2tpcCA9IHZhbHVlLmNoYXJhY3RlcnNUb1NraXA7XG4gICAgICB0aGlzLl9jb21tb25DaGFyYWN0ZXJzVG9JZ25vcmUgPSB2YWx1ZS5jb21tb25DaGFyYWN0ZXJzVG9JZ25vcmU7XG4gICAgfVxuICB9XG5cbiAgLy8gY2hhcmFjdGVyc190b19za2lwIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX2NoYXJhY3RlcnNUb1NraXA/OiBzdHJpbmc7IFxuICBwdWJsaWMgZ2V0IGNoYXJhY3RlcnNUb1NraXAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCdjaGFyYWN0ZXJzX3RvX3NraXAnKTtcbiAgfVxuICBwdWJsaWMgc2V0IGNoYXJhY3RlcnNUb1NraXAodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX2NoYXJhY3RlcnNUb1NraXAgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRDaGFyYWN0ZXJzVG9Ta2lwKCkge1xuICAgIHRoaXMuX2NoYXJhY3RlcnNUb1NraXAgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IGNoYXJhY3RlcnNUb1NraXBJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fY2hhcmFjdGVyc1RvU2tpcDtcbiAgfVxuXG4gIC8vIGNvbW1vbl9jaGFyYWN0ZXJzX3RvX2lnbm9yZSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9jb21tb25DaGFyYWN0ZXJzVG9JZ25vcmU/OiBzdHJpbmc7IFxuICBwdWJsaWMgZ2V0IGNvbW1vbkNoYXJhY3RlcnNUb0lnbm9yZSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ2NvbW1vbl9jaGFyYWN0ZXJzX3RvX2lnbm9yZScpO1xuICB9XG4gIHB1YmxpYyBzZXQgY29tbW9uQ2hhcmFjdGVyc1RvSWdub3JlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9jb21tb25DaGFyYWN0ZXJzVG9JZ25vcmUgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRDb21tb25DaGFyYWN0ZXJzVG9JZ25vcmUoKSB7XG4gICAgdGhpcy5fY29tbW9uQ2hhcmFjdGVyc1RvSWdub3JlID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBjb21tb25DaGFyYWN0ZXJzVG9JZ25vcmVJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29tbW9uQ2hhcmFjdGVyc1RvSWdub3JlO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNoYXJhY3Rlck1hc2tDb25maWdDaGFyYWN0ZXJzVG9JZ25vcmVMaXN0IGV4dGVuZHMgY2RrdGYuQ29tcGxleExpc3Qge1xuICBwdWJsaWMgaW50ZXJuYWxWYWx1ZT8gOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNoYXJhY3Rlck1hc2tDb25maWdDaGFyYWN0ZXJzVG9JZ25vcmVbXSB8IGNka3RmLklSZXNvbHZhYmxlXG5cbiAgLyoqXG4gICogQHBhcmFtIHRlcnJhZm9ybVJlc291cmNlIFRoZSBwYXJlbnQgcmVzb3VyY2VcbiAgKiBAcGFyYW0gdGVycmFmb3JtQXR0cmlidXRlIFRoZSBhdHRyaWJ1dGUgb24gdGhlIHBhcmVudCByZXNvdXJjZSB0aGlzIGNsYXNzIGlzIHJlZmVyZW5jaW5nXG4gICogQHBhcmFtIHdyYXBzU2V0IHdoZXRoZXIgdGhlIGxpc3QgaXMgd3JhcHBpbmcgYSBzZXQgKHdpbGwgYWRkIHRvbGlzdCgpIHRvIGJlIGFibGUgdG8gYWNjZXNzIGFuIGl0ZW0gdmlhIGFuIGluZGV4KVxuICAqL1xuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgdGVycmFmb3JtUmVzb3VyY2U6IGNka3RmLklJbnRlcnBvbGF0aW5nUGFyZW50LCBwcm90ZWN0ZWQgdGVycmFmb3JtQXR0cmlidXRlOiBzdHJpbmcsIHByb3RlY3RlZCB3cmFwc1NldDogYm9vbGVhbikge1xuICAgIHN1cGVyKHRlcnJhZm9ybVJlc291cmNlLCB0ZXJyYWZvcm1BdHRyaWJ1dGUsIHdyYXBzU2V0KVxuICB9XG5cbiAgLyoqXG4gICogQHBhcmFtIGluZGV4IHRoZSBpbmRleCBvZiB0aGUgaXRlbSB0byByZXR1cm5cbiAgKi9cbiAgcHVibGljIGdldChpbmRleDogbnVtYmVyKTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DaGFyYWN0ZXJNYXNrQ29uZmlnQ2hhcmFjdGVyc1RvSWdub3JlT3V0cHV0UmVmZXJlbmNlIHtcbiAgICByZXR1cm4gbmV3IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ2hhcmFjdGVyTWFza0NvbmZpZ0NoYXJhY3RlcnNUb0lnbm9yZU91dHB1dFJlZmVyZW5jZSh0aGlzLnRlcnJhZm9ybVJlc291cmNlLCB0aGlzLnRlcnJhZm9ybUF0dHJpYnV0ZSwgaW5kZXgsIHRoaXMud3JhcHNTZXQpO1xuICB9XG59XG5leHBvcnQgaW50ZXJmYWNlIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ2hhcmFjdGVyTWFza0NvbmZpZyB7XG4gIC8qKlxuICAqIENoYXJhY3RlciB0byB1c2UgdG8gbWFzayB0aGUgc2Vuc2l0aXZlIHZhbHVlc+KAlGZvciBleGFtcGxlLCAqIGZvciBhbiBhbHBoYWJldGljIHN0cmluZyBzdWNoIGFzIGEgbmFtZSwgb3IgMCBmb3IgYSBudW1lcmljIHN0cmluZ1xuICAqIHN1Y2ggYXMgWklQIGNvZGUgb3IgY3JlZGl0IGNhcmQgbnVtYmVyLiBUaGlzIHN0cmluZyBtdXN0IGhhdmUgYSBsZW5ndGggb2YgMS4gSWYgbm90IHN1cHBsaWVkLCB0aGlzIHZhbHVlIGRlZmF1bHRzIHRvICogZm9yXG4gICogc3RyaW5ncywgYW5kIDAgZm9yIGRpZ2l0cy5cbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjbWFza2luZ19jaGFyYWN0ZXIgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI21hc2tpbmdfY2hhcmFjdGVyfVxuICAqL1xuICByZWFkb25seSBtYXNraW5nQ2hhcmFjdGVyPzogc3RyaW5nO1xuICAvKipcbiAgKiBOdW1iZXIgb2YgY2hhcmFjdGVycyB0byBtYXNrLiBJZiBub3Qgc2V0LCBhbGwgbWF0Y2hpbmcgY2hhcnMgd2lsbCBiZSBtYXNrZWQuIFNraXBwZWQgY2hhcmFjdGVycyBkbyBub3QgY291bnQgdG93YXJkcyB0aGlzIHRhbGx5LlxuICAqIElmIG51bWJlcl90b19tYXNrIGlzIG5lZ2F0aXZlLCB0aGlzIGRlbm90ZXMgaW52ZXJzZSBtYXNraW5nLiBDbG91ZCBETFAgbWFza3MgYWxsIGJ1dCBhIG51bWJlciBvZiBjaGFyYWN0ZXJzLiBGb3IgZXhhbXBsZSwgc3VwcG9zZSB5b3UgaGF2ZSB0aGUgZm9sbG93aW5nIHZhbHVlczpcbiAgKiAtICdtYXNraW5nX2NoYXJhY3RlcicgaXMgKlxuICAqIC0gJ251bWJlcl90b19tYXNrJyBpcyAtNFxuICAqIC0gJ3JldmVyc2Vfb3JkZXInIGlzIGZhbHNlXG4gICogLSAnY2hhcmFjdGVyc190b19pZ25vcmUnIGluY2x1ZGVzIC1cbiAgKiAtIElucHV0IHN0cmluZyBpcyAxMjM0LTU2NzgtOTAxMi0zNDU2XG4gICogXG4gICogVGhlIHJlc3VsdGluZyBkZS1pZGVudGlmaWVkIHN0cmluZyBpcyAqKioqLSoqKiotKioqKi0zNDU2LiBDbG91ZCBETFAgbWFza3MgYWxsIGJ1dCB0aGUgbGFzdCBmb3VyIGNoYXJhY3RlcnMuIElmIHJldmVyc2VPcmRlciBpcyB0cnVlLCBhbGwgYnV0IHRoZSBmaXJzdCBmb3VyIGNoYXJhY3RlcnMgYXJlIG1hc2tlZCBhcyAxMjM0LSoqKiotKioqKi0qKioqLlxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNudW1iZXJfdG9fbWFzayBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjbnVtYmVyX3RvX21hc2t9XG4gICovXG4gIHJlYWRvbmx5IG51bWJlclRvTWFzaz86IG51bWJlcjtcbiAgLyoqXG4gICogTWFzayBjaGFyYWN0ZXJzIGluIHJldmVyc2Ugb3JkZXIuIEZvciBleGFtcGxlLCBpZiBtYXNraW5nX2NoYXJhY3RlciBpcyAwLCBudW1iZXJfdG9fbWFzayBpcyAxNCwgYW5kIHJldmVyc2Vfb3JkZXIgaXMgJ2ZhbHNlJywgdGhlbiB0aGVcbiAgKiBpbnB1dCBzdHJpbmcgJzEyMzQtNTY3OC05MDEyLTM0NTYnIGlzIG1hc2tlZCBhcyAnMDAwMDAwMDAwMDAwMDAtMzQ1NicuXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI3JldmVyc2Vfb3JkZXIgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI3JldmVyc2Vfb3JkZXJ9XG4gICovXG4gIHJlYWRvbmx5IHJldmVyc2VPcmRlcj86IGJvb2xlYW4gfCBjZGt0Zi5JUmVzb2x2YWJsZTtcbiAgLyoqXG4gICogY2hhcmFjdGVyc190b19pZ25vcmUgYmxvY2tcbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjY2hhcmFjdGVyc190b19pZ25vcmUgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI2NoYXJhY3RlcnNfdG9faWdub3JlfVxuICAqL1xuICByZWFkb25seSBjaGFyYWN0ZXJzVG9JZ25vcmU/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNoYXJhY3Rlck1hc2tDb25maWdDaGFyYWN0ZXJzVG9JZ25vcmVbXSB8IGNka3RmLklSZXNvbHZhYmxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DaGFyYWN0ZXJNYXNrQ29uZmlnVG9UZXJyYWZvcm0oc3RydWN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DaGFyYWN0ZXJNYXNrQ29uZmlnT3V0cHV0UmVmZXJlbmNlIHwgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DaGFyYWN0ZXJNYXNrQ29uZmlnKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkgfHwgY2RrdGYuVG9rZW5pemF0aW9uLmlzUmVzb2x2YWJsZShzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgaWYgKGNka3RmLmlzQ29tcGxleEVsZW1lbnQoc3RydWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkEgY29tcGxleCBlbGVtZW50IHdhcyB1c2VkIGFzIGNvbmZpZ3VyYXRpb24sIHRoaXMgaXMgbm90IHN1cHBvcnRlZDogaHR0cHM6Ly9jZGsudGYvY29tcGxleC1vYmplY3QtYXMtY29uZmlndXJhdGlvblwiKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG1hc2tpbmdfY2hhcmFjdGVyOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLm1hc2tpbmdDaGFyYWN0ZXIpLFxuICAgIG51bWJlcl90b19tYXNrOiBjZGt0Zi5udW1iZXJUb1RlcnJhZm9ybShzdHJ1Y3QhLm51bWJlclRvTWFzayksXG4gICAgcmV2ZXJzZV9vcmRlcjogY2RrdGYuYm9vbGVhblRvVGVycmFmb3JtKHN0cnVjdCEucmV2ZXJzZU9yZGVyKSxcbiAgICBjaGFyYWN0ZXJzX3RvX2lnbm9yZTogY2RrdGYubGlzdE1hcHBlcihkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNoYXJhY3Rlck1hc2tDb25maWdDaGFyYWN0ZXJzVG9JZ25vcmVUb1RlcnJhZm9ybSwgdHJ1ZSkoc3RydWN0IS5jaGFyYWN0ZXJzVG9JZ25vcmUpLFxuICB9XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ2hhcmFjdGVyTWFza0NvbmZpZ1RvSGNsVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ2hhcmFjdGVyTWFza0NvbmZpZ091dHB1dFJlZmVyZW5jZSB8IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ2hhcmFjdGVyTWFza0NvbmZpZyk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpIHx8IGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIGlmIChjZGt0Zi5pc0NvbXBsZXhFbGVtZW50KHN0cnVjdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGNvbXBsZXggZWxlbWVudCB3YXMgdXNlZCBhcyBjb25maWd1cmF0aW9uLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQ6IGh0dHBzOi8vY2RrLnRmL2NvbXBsZXgtb2JqZWN0LWFzLWNvbmZpZ3VyYXRpb25cIik7XG4gIH1cbiAgY29uc3QgYXR0cnMgPSB7XG4gICAgbWFza2luZ19jaGFyYWN0ZXI6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5zdHJpbmdUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLm1hc2tpbmdDaGFyYWN0ZXIpLFxuICAgICAgaXNCbG9jazogZmFsc2UsXG4gICAgICB0eXBlOiBcInNpbXBsZVwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJzdHJpbmdcIixcbiAgICB9LFxuICAgIG51bWJlcl90b19tYXNrOiB7XG4gICAgICB2YWx1ZTogY2RrdGYubnVtYmVyVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5udW1iZXJUb01hc2spLFxuICAgICAgaXNCbG9jazogZmFsc2UsXG4gICAgICB0eXBlOiBcInNpbXBsZVwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJudW1iZXJcIixcbiAgICB9LFxuICAgIHJldmVyc2Vfb3JkZXI6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5ib29sZWFuVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5yZXZlcnNlT3JkZXIpLFxuICAgICAgaXNCbG9jazogZmFsc2UsXG4gICAgICB0eXBlOiBcInNpbXBsZVwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJib29sZWFuXCIsXG4gICAgfSxcbiAgICBjaGFyYWN0ZXJzX3RvX2lnbm9yZToge1xuICAgICAgdmFsdWU6IGNka3RmLmxpc3RNYXBwZXJIY2woZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DaGFyYWN0ZXJNYXNrQ29uZmlnQ2hhcmFjdGVyc1RvSWdub3JlVG9IY2xUZXJyYWZvcm0sIHRydWUpKHN0cnVjdCEuY2hhcmFjdGVyc1RvSWdub3JlKSxcbiAgICAgIGlzQmxvY2s6IHRydWUsXG4gICAgICB0eXBlOiBcImxpc3RcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwiRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DaGFyYWN0ZXJNYXNrQ29uZmlnQ2hhcmFjdGVyc1RvSWdub3JlTGlzdFwiLFxuICAgIH0sXG4gIH07XG5cbiAgLy8gcmVtb3ZlIHVuZGVmaW5lZCBhdHRyaWJ1dGVzXG4gIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMoYXR0cnMpLmZpbHRlcigoW18sIHZhbHVlXSkgPT4gdmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZS52YWx1ZSAhPT0gdW5kZWZpbmVkKSk7XG59XG5cbmV4cG9ydCBjbGFzcyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNoYXJhY3Rlck1hc2tDb25maWdPdXRwdXRSZWZlcmVuY2UgZXh0ZW5kcyBjZGt0Zi5Db21wbGV4T2JqZWN0IHtcbiAgcHJpdmF0ZSBpc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG5cbiAgLyoqXG4gICogQHBhcmFtIHRlcnJhZm9ybVJlc291cmNlIFRoZSBwYXJlbnQgcmVzb3VyY2VcbiAgKiBAcGFyYW0gdGVycmFmb3JtQXR0cmlidXRlIFRoZSBhdHRyaWJ1dGUgb24gdGhlIHBhcmVudCByZXNvdXJjZSB0aGlzIGNsYXNzIGlzIHJlZmVyZW5jaW5nXG4gICovXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcih0ZXJyYWZvcm1SZXNvdXJjZTogY2RrdGYuSUludGVycG9sYXRpbmdQYXJlbnQsIHRlcnJhZm9ybUF0dHJpYnV0ZTogc3RyaW5nKSB7XG4gICAgc3VwZXIodGVycmFmb3JtUmVzb3VyY2UsIHRlcnJhZm9ybUF0dHJpYnV0ZSwgZmFsc2UsIDApO1xuICB9XG5cbiAgcHVibGljIGdldCBpbnRlcm5hbFZhbHVlKCk6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ2hhcmFjdGVyTWFza0NvbmZpZyB8IHVuZGVmaW5lZCB7XG4gICAgbGV0IGhhc0FueVZhbHVlcyA9IHRoaXMuaXNFbXB0eU9iamVjdDtcbiAgICBjb25zdCBpbnRlcm5hbFZhbHVlUmVzdWx0OiBhbnkgPSB7fTtcbiAgICBpZiAodGhpcy5fbWFza2luZ0NoYXJhY3RlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC5tYXNraW5nQ2hhcmFjdGVyID0gdGhpcy5fbWFza2luZ0NoYXJhY3RlcjtcbiAgICB9XG4gICAgaWYgKHRoaXMuX251bWJlclRvTWFzayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC5udW1iZXJUb01hc2sgPSB0aGlzLl9udW1iZXJUb01hc2s7XG4gICAgfVxuICAgIGlmICh0aGlzLl9yZXZlcnNlT3JkZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQucmV2ZXJzZU9yZGVyID0gdGhpcy5fcmV2ZXJzZU9yZGVyO1xuICAgIH1cbiAgICBpZiAodGhpcy5fY2hhcmFjdGVyc1RvSWdub3JlPy5pbnRlcm5hbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LmNoYXJhY3RlcnNUb0lnbm9yZSA9IHRoaXMuX2NoYXJhY3RlcnNUb0lnbm9yZT8uaW50ZXJuYWxWYWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGhhc0FueVZhbHVlcyA/IGludGVybmFsVmFsdWVSZXN1bHQgOiB1bmRlZmluZWQ7XG4gIH1cblxuICBwdWJsaWMgc2V0IGludGVybmFsVmFsdWUodmFsdWU6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ2hhcmFjdGVyTWFza0NvbmZpZyB8IHVuZGVmaW5lZCkge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmlzRW1wdHlPYmplY3QgPSBmYWxzZTtcbiAgICAgIHRoaXMuX21hc2tpbmdDaGFyYWN0ZXIgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9udW1iZXJUb01hc2sgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9yZXZlcnNlT3JkZXIgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9jaGFyYWN0ZXJzVG9JZ25vcmUuaW50ZXJuYWxWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLmlzRW1wdHlPYmplY3QgPSBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoID09PSAwO1xuICAgICAgdGhpcy5fbWFza2luZ0NoYXJhY3RlciA9IHZhbHVlLm1hc2tpbmdDaGFyYWN0ZXI7XG4gICAgICB0aGlzLl9udW1iZXJUb01hc2sgPSB2YWx1ZS5udW1iZXJUb01hc2s7XG4gICAgICB0aGlzLl9yZXZlcnNlT3JkZXIgPSB2YWx1ZS5yZXZlcnNlT3JkZXI7XG4gICAgICB0aGlzLl9jaGFyYWN0ZXJzVG9JZ25vcmUuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlLmNoYXJhY3RlcnNUb0lnbm9yZTtcbiAgICB9XG4gIH1cblxuICAvLyBtYXNraW5nX2NoYXJhY3RlciAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9tYXNraW5nQ2hhcmFjdGVyPzogc3RyaW5nOyBcbiAgcHVibGljIGdldCBtYXNraW5nQ2hhcmFjdGVyKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgnbWFza2luZ19jaGFyYWN0ZXInKTtcbiAgfVxuICBwdWJsaWMgc2V0IG1hc2tpbmdDaGFyYWN0ZXIodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX21hc2tpbmdDaGFyYWN0ZXIgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRNYXNraW5nQ2hhcmFjdGVyKCkge1xuICAgIHRoaXMuX21hc2tpbmdDaGFyYWN0ZXIgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IG1hc2tpbmdDaGFyYWN0ZXJJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fbWFza2luZ0NoYXJhY3RlcjtcbiAgfVxuXG4gIC8vIG51bWJlcl90b19tYXNrIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX251bWJlclRvTWFzaz86IG51bWJlcjsgXG4gIHB1YmxpYyBnZXQgbnVtYmVyVG9NYXNrKCkge1xuICAgIHJldHVybiB0aGlzLmdldE51bWJlckF0dHJpYnV0ZSgnbnVtYmVyX3RvX21hc2snKTtcbiAgfVxuICBwdWJsaWMgc2V0IG51bWJlclRvTWFzayh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5fbnVtYmVyVG9NYXNrID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0TnVtYmVyVG9NYXNrKCkge1xuICAgIHRoaXMuX251bWJlclRvTWFzayA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgbnVtYmVyVG9NYXNrSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX251bWJlclRvTWFzaztcbiAgfVxuXG4gIC8vIHJldmVyc2Vfb3JkZXIgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfcmV2ZXJzZU9yZGVyPzogYm9vbGVhbiB8IGNka3RmLklSZXNvbHZhYmxlOyBcbiAgcHVibGljIGdldCByZXZlcnNlT3JkZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0Qm9vbGVhbkF0dHJpYnV0ZSgncmV2ZXJzZV9vcmRlcicpO1xuICB9XG4gIHB1YmxpYyBzZXQgcmV2ZXJzZU9yZGVyKHZhbHVlOiBib29sZWFuIHwgY2RrdGYuSVJlc29sdmFibGUpIHtcbiAgICB0aGlzLl9yZXZlcnNlT3JkZXIgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRSZXZlcnNlT3JkZXIoKSB7XG4gICAgdGhpcy5fcmV2ZXJzZU9yZGVyID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCByZXZlcnNlT3JkZXJJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmV2ZXJzZU9yZGVyO1xuICB9XG5cbiAgLy8gY2hhcmFjdGVyc190b19pZ25vcmUgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfY2hhcmFjdGVyc1RvSWdub3JlID0gbmV3IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ2hhcmFjdGVyTWFza0NvbmZpZ0NoYXJhY3RlcnNUb0lnbm9yZUxpc3QodGhpcywgXCJjaGFyYWN0ZXJzX3RvX2lnbm9yZVwiLCBmYWxzZSk7XG4gIHB1YmxpYyBnZXQgY2hhcmFjdGVyc1RvSWdub3JlKCkge1xuICAgIHJldHVybiB0aGlzLl9jaGFyYWN0ZXJzVG9JZ25vcmU7XG4gIH1cbiAgcHVibGljIHB1dENoYXJhY3RlcnNUb0lnbm9yZSh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DaGFyYWN0ZXJNYXNrQ29uZmlnQ2hhcmFjdGVyc1RvSWdub3JlW10gfCBjZGt0Zi5JUmVzb2x2YWJsZSkge1xuICAgIHRoaXMuX2NoYXJhY3RlcnNUb0lnbm9yZS5pbnRlcm5hbFZhbHVlID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0Q2hhcmFjdGVyc1RvSWdub3JlKCkge1xuICAgIHRoaXMuX2NoYXJhY3RlcnNUb0lnbm9yZS5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBjaGFyYWN0ZXJzVG9JZ25vcmVJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fY2hhcmFjdGVyc1RvSWdub3JlLmludGVybmFsVmFsdWU7XG4gIH1cbn1cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnQ29udGV4dCB7XG4gIC8qKlxuICAqIE5hbWUgZGVzY3JpYmluZyB0aGUgZmllbGQuXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI25hbWUgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI25hbWV9XG4gICovXG4gIHJlYWRvbmx5IG5hbWU/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0RldGVybWluaXN0aWNDb25maWdDb250ZXh0VG9UZXJyYWZvcm0oc3RydWN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnQ29udGV4dE91dHB1dFJlZmVyZW5jZSB8IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvRGV0ZXJtaW5pc3RpY0NvbmZpZ0NvbnRleHQpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIHJldHVybiB7XG4gICAgbmFtZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5uYW1lKSxcbiAgfVxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0RldGVybWluaXN0aWNDb25maWdDb250ZXh0VG9IY2xUZXJyYWZvcm0oc3RydWN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnQ29udGV4dE91dHB1dFJlZmVyZW5jZSB8IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvRGV0ZXJtaW5pc3RpY0NvbmZpZ0NvbnRleHQpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIGNvbnN0IGF0dHJzID0ge1xuICAgIG5hbWU6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5zdHJpbmdUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLm5hbWUpLFxuICAgICAgaXNCbG9jazogZmFsc2UsXG4gICAgICB0eXBlOiBcInNpbXBsZVwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJzdHJpbmdcIixcbiAgICB9LFxuICB9O1xuXG4gIC8vIHJlbW92ZSB1bmRlZmluZWQgYXR0cmlidXRlc1xuICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5lbnRyaWVzKGF0dHJzKS5maWx0ZXIoKFtfLCB2YWx1ZV0pID0+IHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUudmFsdWUgIT09IHVuZGVmaW5lZCkpO1xufVxuXG5leHBvcnQgY2xhc3MgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnQ29udGV4dE91dHB1dFJlZmVyZW5jZSBleHRlbmRzIGNka3RmLkNvbXBsZXhPYmplY3Qge1xuICBwcml2YXRlIGlzRW1wdHlPYmplY3QgPSBmYWxzZTtcblxuICAvKipcbiAgKiBAcGFyYW0gdGVycmFmb3JtUmVzb3VyY2UgVGhlIHBhcmVudCByZXNvdXJjZVxuICAqIEBwYXJhbSB0ZXJyYWZvcm1BdHRyaWJ1dGUgVGhlIGF0dHJpYnV0ZSBvbiB0aGUgcGFyZW50IHJlc291cmNlIHRoaXMgY2xhc3MgaXMgcmVmZXJlbmNpbmdcbiAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHRlcnJhZm9ybVJlc291cmNlOiBjZGt0Zi5JSW50ZXJwb2xhdGluZ1BhcmVudCwgdGVycmFmb3JtQXR0cmlidXRlOiBzdHJpbmcpIHtcbiAgICBzdXBlcih0ZXJyYWZvcm1SZXNvdXJjZSwgdGVycmFmb3JtQXR0cmlidXRlLCBmYWxzZSwgMCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGludGVybmFsVmFsdWUoKTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnQ29udGV4dCB8IHVuZGVmaW5lZCB7XG4gICAgbGV0IGhhc0FueVZhbHVlcyA9IHRoaXMuaXNFbXB0eU9iamVjdDtcbiAgICBjb25zdCBpbnRlcm5hbFZhbHVlUmVzdWx0OiBhbnkgPSB7fTtcbiAgICBpZiAodGhpcy5fbmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC5uYW1lID0gdGhpcy5fbmFtZTtcbiAgICB9XG4gICAgcmV0dXJuIGhhc0FueVZhbHVlcyA/IGludGVybmFsVmFsdWVSZXN1bHQgOiB1bmRlZmluZWQ7XG4gIH1cblxuICBwdWJsaWMgc2V0IGludGVybmFsVmFsdWUodmFsdWU6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvRGV0ZXJtaW5pc3RpY0NvbmZpZ0NvbnRleHQgfCB1bmRlZmluZWQpIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5pc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG4gICAgICB0aGlzLl9uYW1lID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggPT09IDA7XG4gICAgICB0aGlzLl9uYW1lID0gdmFsdWUubmFtZTtcbiAgICB9XG4gIH1cblxuICAvLyBuYW1lIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX25hbWU/OiBzdHJpbmc7IFxuICBwdWJsaWMgZ2V0IG5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCduYW1lJyk7XG4gIH1cbiAgcHVibGljIHNldCBuYW1lKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9uYW1lID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0TmFtZSgpIHtcbiAgICB0aGlzLl9uYW1lID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBuYW1lSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX25hbWU7XG4gIH1cbn1cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnQ3J5cHRvS2V5S21zV3JhcHBlZCB7XG4gIC8qKlxuICAqIFRoZSByZXNvdXJjZSBuYW1lIG9mIHRoZSBLTVMgQ3J5cHRvS2V5IHRvIHVzZSBmb3IgdW53cmFwcGluZy5cbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjY3J5cHRvX2tleV9uYW1lIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSNjcnlwdG9fa2V5X25hbWV9XG4gICovXG4gIHJlYWRvbmx5IGNyeXB0b0tleU5hbWU6IHN0cmluZztcbiAgLyoqXG4gICogVGhlIHdyYXBwZWQgZGF0YSBjcnlwdG8ga2V5LlxuICAqIFxuICAqIEEgYmFzZTY0LWVuY29kZWQgc3RyaW5nLlxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSN3cmFwcGVkX2tleSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjd3JhcHBlZF9rZXl9XG4gICovXG4gIHJlYWRvbmx5IHdyYXBwZWRLZXk6IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvRGV0ZXJtaW5pc3RpY0NvbmZpZ0NyeXB0b0tleUttc1dyYXBwZWRUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0RldGVybWluaXN0aWNDb25maWdDcnlwdG9LZXlLbXNXcmFwcGVkT3V0cHV0UmVmZXJlbmNlIHwgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnQ3J5cHRvS2V5S21zV3JhcHBlZCk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpIHx8IGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIGlmIChjZGt0Zi5pc0NvbXBsZXhFbGVtZW50KHN0cnVjdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGNvbXBsZXggZWxlbWVudCB3YXMgdXNlZCBhcyBjb25maWd1cmF0aW9uLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQ6IGh0dHBzOi8vY2RrLnRmL2NvbXBsZXgtb2JqZWN0LWFzLWNvbmZpZ3VyYXRpb25cIik7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBjcnlwdG9fa2V5X25hbWU6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuY3J5cHRvS2V5TmFtZSksXG4gICAgd3JhcHBlZF9rZXk6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEud3JhcHBlZEtleSksXG4gIH1cbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnQ3J5cHRvS2V5S21zV3JhcHBlZFRvSGNsVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvRGV0ZXJtaW5pc3RpY0NvbmZpZ0NyeXB0b0tleUttc1dyYXBwZWRPdXRwdXRSZWZlcmVuY2UgfCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0RldGVybWluaXN0aWNDb25maWdDcnlwdG9LZXlLbXNXcmFwcGVkKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkgfHwgY2RrdGYuVG9rZW5pemF0aW9uLmlzUmVzb2x2YWJsZShzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgaWYgKGNka3RmLmlzQ29tcGxleEVsZW1lbnQoc3RydWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkEgY29tcGxleCBlbGVtZW50IHdhcyB1c2VkIGFzIGNvbmZpZ3VyYXRpb24sIHRoaXMgaXMgbm90IHN1cHBvcnRlZDogaHR0cHM6Ly9jZGsudGYvY29tcGxleC1vYmplY3QtYXMtY29uZmlndXJhdGlvblwiKTtcbiAgfVxuICBjb25zdCBhdHRycyA9IHtcbiAgICBjcnlwdG9fa2V5X25hbWU6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5zdHJpbmdUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLmNyeXB0b0tleU5hbWUpLFxuICAgICAgaXNCbG9jazogZmFsc2UsXG4gICAgICB0eXBlOiBcInNpbXBsZVwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJzdHJpbmdcIixcbiAgICB9LFxuICAgIHdyYXBwZWRfa2V5OiB7XG4gICAgICB2YWx1ZTogY2RrdGYuc3RyaW5nVG9IY2xUZXJyYWZvcm0oc3RydWN0IS53cmFwcGVkS2V5KSxcbiAgICAgIGlzQmxvY2s6IGZhbHNlLFxuICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwic3RyaW5nXCIsXG4gICAgfSxcbiAgfTtcblxuICAvLyByZW1vdmUgdW5kZWZpbmVkIGF0dHJpYnV0ZXNcbiAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhhdHRycykuZmlsdGVyKChbXywgdmFsdWVdKSA9PiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlLnZhbHVlICE9PSB1bmRlZmluZWQpKTtcbn1cblxuZXhwb3J0IGNsYXNzIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvRGV0ZXJtaW5pc3RpY0NvbmZpZ0NyeXB0b0tleUttc1dyYXBwZWRPdXRwdXRSZWZlcmVuY2UgZXh0ZW5kcyBjZGt0Zi5Db21wbGV4T2JqZWN0IHtcbiAgcHJpdmF0ZSBpc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG5cbiAgLyoqXG4gICogQHBhcmFtIHRlcnJhZm9ybVJlc291cmNlIFRoZSBwYXJlbnQgcmVzb3VyY2VcbiAgKiBAcGFyYW0gdGVycmFmb3JtQXR0cmlidXRlIFRoZSBhdHRyaWJ1dGUgb24gdGhlIHBhcmVudCByZXNvdXJjZSB0aGlzIGNsYXNzIGlzIHJlZmVyZW5jaW5nXG4gICovXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcih0ZXJyYWZvcm1SZXNvdXJjZTogY2RrdGYuSUludGVycG9sYXRpbmdQYXJlbnQsIHRlcnJhZm9ybUF0dHJpYnV0ZTogc3RyaW5nKSB7XG4gICAgc3VwZXIodGVycmFmb3JtUmVzb3VyY2UsIHRlcnJhZm9ybUF0dHJpYnV0ZSwgZmFsc2UsIDApO1xuICB9XG5cbiAgcHVibGljIGdldCBpbnRlcm5hbFZhbHVlKCk6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvRGV0ZXJtaW5pc3RpY0NvbmZpZ0NyeXB0b0tleUttc1dyYXBwZWQgfCB1bmRlZmluZWQge1xuICAgIGxldCBoYXNBbnlWYWx1ZXMgPSB0aGlzLmlzRW1wdHlPYmplY3Q7XG4gICAgY29uc3QgaW50ZXJuYWxWYWx1ZVJlc3VsdDogYW55ID0ge307XG4gICAgaWYgKHRoaXMuX2NyeXB0b0tleU5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQuY3J5cHRvS2V5TmFtZSA9IHRoaXMuX2NyeXB0b0tleU5hbWU7XG4gICAgfVxuICAgIGlmICh0aGlzLl93cmFwcGVkS2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LndyYXBwZWRLZXkgPSB0aGlzLl93cmFwcGVkS2V5O1xuICAgIH1cbiAgICByZXR1cm4gaGFzQW55VmFsdWVzID8gaW50ZXJuYWxWYWx1ZVJlc3VsdCA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgaW50ZXJuYWxWYWx1ZSh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnQ3J5cHRvS2V5S21zV3JhcHBlZCB8IHVuZGVmaW5lZCkge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmlzRW1wdHlPYmplY3QgPSBmYWxzZTtcbiAgICAgIHRoaXMuX2NyeXB0b0tleU5hbWUgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl93cmFwcGVkS2V5ID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggPT09IDA7XG4gICAgICB0aGlzLl9jcnlwdG9LZXlOYW1lID0gdmFsdWUuY3J5cHRvS2V5TmFtZTtcbiAgICAgIHRoaXMuX3dyYXBwZWRLZXkgPSB2YWx1ZS53cmFwcGVkS2V5O1xuICAgIH1cbiAgfVxuXG4gIC8vIGNyeXB0b19rZXlfbmFtZSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IGZhbHNlLCByZXF1aXJlZDogdHJ1ZVxuICBwcml2YXRlIF9jcnlwdG9LZXlOYW1lPzogc3RyaW5nOyBcbiAgcHVibGljIGdldCBjcnlwdG9LZXlOYW1lKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgnY3J5cHRvX2tleV9uYW1lJyk7XG4gIH1cbiAgcHVibGljIHNldCBjcnlwdG9LZXlOYW1lKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9jcnlwdG9LZXlOYW1lID0gdmFsdWU7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IGNyeXB0b0tleU5hbWVJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fY3J5cHRvS2V5TmFtZTtcbiAgfVxuXG4gIC8vIHdyYXBwZWRfa2V5IC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogZmFsc2UsIHJlcXVpcmVkOiB0cnVlXG4gIHByaXZhdGUgX3dyYXBwZWRLZXk/OiBzdHJpbmc7IFxuICBwdWJsaWMgZ2V0IHdyYXBwZWRLZXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCd3cmFwcGVkX2tleScpO1xuICB9XG4gIHB1YmxpYyBzZXQgd3JhcHBlZEtleSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fd3JhcHBlZEtleSA9IHZhbHVlO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCB3cmFwcGVkS2V5SW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dyYXBwZWRLZXk7XG4gIH1cbn1cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnQ3J5cHRvS2V5VHJhbnNpZW50IHtcbiAgLyoqXG4gICogTmFtZSBvZiB0aGUga2V5LiBUaGlzIGlzIGFuIGFyYml0cmFyeSBzdHJpbmcgdXNlZCB0byBkaWZmZXJlbnRpYXRlIGRpZmZlcmVudCBrZXlzLiBBIHVuaXF1ZSBrZXkgaXMgZ2VuZXJhdGVkIHBlciBuYW1lOiB0d28gc2VwYXJhdGUgJ1RyYW5zaWVudENyeXB0b0tleScgcHJvdG9zIHNoYXJlIHRoZSBzYW1lIGdlbmVyYXRlZCBrZXkgaWYgdGhlaXIgbmFtZXMgYXJlIHRoZSBzYW1lLiBXaGVuIHRoZSBkYXRhIGNyeXB0byBrZXkgaXMgZ2VuZXJhdGVkLCB0aGlzIG5hbWUgaXMgbm90IHVzZWQgaW4gYW55IHdheSAocmVwZWF0aW5nIHRoZSBhcGkgY2FsbCB3aWxsIHJlc3VsdCBpbiBhIGRpZmZlcmVudCBrZXkgYmVpbmcgZ2VuZXJhdGVkKS5cbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjbmFtZSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjbmFtZX1cbiAgKi9cbiAgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnQ3J5cHRvS2V5VHJhbnNpZW50VG9UZXJyYWZvcm0oc3RydWN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnQ3J5cHRvS2V5VHJhbnNpZW50T3V0cHV0UmVmZXJlbmNlIHwgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnQ3J5cHRvS2V5VHJhbnNpZW50KTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkgfHwgY2RrdGYuVG9rZW5pemF0aW9uLmlzUmVzb2x2YWJsZShzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgaWYgKGNka3RmLmlzQ29tcGxleEVsZW1lbnQoc3RydWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkEgY29tcGxleCBlbGVtZW50IHdhcyB1c2VkIGFzIGNvbmZpZ3VyYXRpb24sIHRoaXMgaXMgbm90IHN1cHBvcnRlZDogaHR0cHM6Ly9jZGsudGYvY29tcGxleC1vYmplY3QtYXMtY29uZmlndXJhdGlvblwiKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG5hbWU6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEubmFtZSksXG4gIH1cbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnQ3J5cHRvS2V5VHJhbnNpZW50VG9IY2xUZXJyYWZvcm0oc3RydWN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnQ3J5cHRvS2V5VHJhbnNpZW50T3V0cHV0UmVmZXJlbmNlIHwgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnQ3J5cHRvS2V5VHJhbnNpZW50KTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkgfHwgY2RrdGYuVG9rZW5pemF0aW9uLmlzUmVzb2x2YWJsZShzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgaWYgKGNka3RmLmlzQ29tcGxleEVsZW1lbnQoc3RydWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkEgY29tcGxleCBlbGVtZW50IHdhcyB1c2VkIGFzIGNvbmZpZ3VyYXRpb24sIHRoaXMgaXMgbm90IHN1cHBvcnRlZDogaHR0cHM6Ly9jZGsudGYvY29tcGxleC1vYmplY3QtYXMtY29uZmlndXJhdGlvblwiKTtcbiAgfVxuICBjb25zdCBhdHRycyA9IHtcbiAgICBuYW1lOiB7XG4gICAgICB2YWx1ZTogY2RrdGYuc3RyaW5nVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5uYW1lKSxcbiAgICAgIGlzQmxvY2s6IGZhbHNlLFxuICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwic3RyaW5nXCIsXG4gICAgfSxcbiAgfTtcblxuICAvLyByZW1vdmUgdW5kZWZpbmVkIGF0dHJpYnV0ZXNcbiAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhhdHRycykuZmlsdGVyKChbXywgdmFsdWVdKSA9PiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlLnZhbHVlICE9PSB1bmRlZmluZWQpKTtcbn1cblxuZXhwb3J0IGNsYXNzIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvRGV0ZXJtaW5pc3RpY0NvbmZpZ0NyeXB0b0tleVRyYW5zaWVudE91dHB1dFJlZmVyZW5jZSBleHRlbmRzIGNka3RmLkNvbXBsZXhPYmplY3Qge1xuICBwcml2YXRlIGlzRW1wdHlPYmplY3QgPSBmYWxzZTtcblxuICAvKipcbiAgKiBAcGFyYW0gdGVycmFmb3JtUmVzb3VyY2UgVGhlIHBhcmVudCByZXNvdXJjZVxuICAqIEBwYXJhbSB0ZXJyYWZvcm1BdHRyaWJ1dGUgVGhlIGF0dHJpYnV0ZSBvbiB0aGUgcGFyZW50IHJlc291cmNlIHRoaXMgY2xhc3MgaXMgcmVmZXJlbmNpbmdcbiAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHRlcnJhZm9ybVJlc291cmNlOiBjZGt0Zi5JSW50ZXJwb2xhdGluZ1BhcmVudCwgdGVycmFmb3JtQXR0cmlidXRlOiBzdHJpbmcpIHtcbiAgICBzdXBlcih0ZXJyYWZvcm1SZXNvdXJjZSwgdGVycmFmb3JtQXR0cmlidXRlLCBmYWxzZSwgMCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGludGVybmFsVmFsdWUoKTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnQ3J5cHRvS2V5VHJhbnNpZW50IHwgdW5kZWZpbmVkIHtcbiAgICBsZXQgaGFzQW55VmFsdWVzID0gdGhpcy5pc0VtcHR5T2JqZWN0O1xuICAgIGNvbnN0IGludGVybmFsVmFsdWVSZXN1bHQ6IGFueSA9IHt9O1xuICAgIGlmICh0aGlzLl9uYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0Lm5hbWUgPSB0aGlzLl9uYW1lO1xuICAgIH1cbiAgICByZXR1cm4gaGFzQW55VmFsdWVzID8gaW50ZXJuYWxWYWx1ZVJlc3VsdCA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgaW50ZXJuYWxWYWx1ZSh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnQ3J5cHRvS2V5VHJhbnNpZW50IHwgdW5kZWZpbmVkKSB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IGZhbHNlO1xuICAgICAgdGhpcy5fbmFtZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLmlzRW1wdHlPYmplY3QgPSBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoID09PSAwO1xuICAgICAgdGhpcy5fbmFtZSA9IHZhbHVlLm5hbWU7XG4gICAgfVxuICB9XG5cbiAgLy8gbmFtZSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IGZhbHNlLCByZXF1aXJlZDogdHJ1ZVxuICBwcml2YXRlIF9uYW1lPzogc3RyaW5nOyBcbiAgcHVibGljIGdldCBuYW1lKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgnbmFtZScpO1xuICB9XG4gIHB1YmxpYyBzZXQgbmFtZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fbmFtZSA9IHZhbHVlO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBuYW1lSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX25hbWU7XG4gIH1cbn1cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnQ3J5cHRvS2V5VW53cmFwcGVkIHtcbiAgLyoqXG4gICogQSAxMjgvMTkyLzI1NiBiaXQga2V5LlxuICAqIFxuICAqIEEgYmFzZTY0LWVuY29kZWQgc3RyaW5nLlxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNrZXkgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI2tleX1cbiAgKi9cbiAgcmVhZG9ubHkga2V5OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0RldGVybWluaXN0aWNDb25maWdDcnlwdG9LZXlVbndyYXBwZWRUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0RldGVybWluaXN0aWNDb25maWdDcnlwdG9LZXlVbndyYXBwZWRPdXRwdXRSZWZlcmVuY2UgfCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0RldGVybWluaXN0aWNDb25maWdDcnlwdG9LZXlVbndyYXBwZWQpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIHJldHVybiB7XG4gICAga2V5OiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLmtleSksXG4gIH1cbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnQ3J5cHRvS2V5VW53cmFwcGVkVG9IY2xUZXJyYWZvcm0oc3RydWN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnQ3J5cHRvS2V5VW53cmFwcGVkT3V0cHV0UmVmZXJlbmNlIHwgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnQ3J5cHRvS2V5VW53cmFwcGVkKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkgfHwgY2RrdGYuVG9rZW5pemF0aW9uLmlzUmVzb2x2YWJsZShzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgaWYgKGNka3RmLmlzQ29tcGxleEVsZW1lbnQoc3RydWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkEgY29tcGxleCBlbGVtZW50IHdhcyB1c2VkIGFzIGNvbmZpZ3VyYXRpb24sIHRoaXMgaXMgbm90IHN1cHBvcnRlZDogaHR0cHM6Ly9jZGsudGYvY29tcGxleC1vYmplY3QtYXMtY29uZmlndXJhdGlvblwiKTtcbiAgfVxuICBjb25zdCBhdHRycyA9IHtcbiAgICBrZXk6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5zdHJpbmdUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLmtleSksXG4gICAgICBpc0Jsb2NrOiBmYWxzZSxcbiAgICAgIHR5cGU6IFwic2ltcGxlXCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcInN0cmluZ1wiLFxuICAgIH0sXG4gIH07XG5cbiAgLy8gcmVtb3ZlIHVuZGVmaW5lZCBhdHRyaWJ1dGVzXG4gIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMoYXR0cnMpLmZpbHRlcigoW18sIHZhbHVlXSkgPT4gdmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZS52YWx1ZSAhPT0gdW5kZWZpbmVkKSk7XG59XG5cbmV4cG9ydCBjbGFzcyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0RldGVybWluaXN0aWNDb25maWdDcnlwdG9LZXlVbndyYXBwZWRPdXRwdXRSZWZlcmVuY2UgZXh0ZW5kcyBjZGt0Zi5Db21wbGV4T2JqZWN0IHtcbiAgcHJpdmF0ZSBpc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG5cbiAgLyoqXG4gICogQHBhcmFtIHRlcnJhZm9ybVJlc291cmNlIFRoZSBwYXJlbnQgcmVzb3VyY2VcbiAgKiBAcGFyYW0gdGVycmFmb3JtQXR0cmlidXRlIFRoZSBhdHRyaWJ1dGUgb24gdGhlIHBhcmVudCByZXNvdXJjZSB0aGlzIGNsYXNzIGlzIHJlZmVyZW5jaW5nXG4gICovXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcih0ZXJyYWZvcm1SZXNvdXJjZTogY2RrdGYuSUludGVycG9sYXRpbmdQYXJlbnQsIHRlcnJhZm9ybUF0dHJpYnV0ZTogc3RyaW5nKSB7XG4gICAgc3VwZXIodGVycmFmb3JtUmVzb3VyY2UsIHRlcnJhZm9ybUF0dHJpYnV0ZSwgZmFsc2UsIDApO1xuICB9XG5cbiAgcHVibGljIGdldCBpbnRlcm5hbFZhbHVlKCk6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvRGV0ZXJtaW5pc3RpY0NvbmZpZ0NyeXB0b0tleVVud3JhcHBlZCB8IHVuZGVmaW5lZCB7XG4gICAgbGV0IGhhc0FueVZhbHVlcyA9IHRoaXMuaXNFbXB0eU9iamVjdDtcbiAgICBjb25zdCBpbnRlcm5hbFZhbHVlUmVzdWx0OiBhbnkgPSB7fTtcbiAgICBpZiAodGhpcy5fa2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LmtleSA9IHRoaXMuX2tleTtcbiAgICB9XG4gICAgcmV0dXJuIGhhc0FueVZhbHVlcyA/IGludGVybmFsVmFsdWVSZXN1bHQgOiB1bmRlZmluZWQ7XG4gIH1cblxuICBwdWJsaWMgc2V0IGludGVybmFsVmFsdWUodmFsdWU6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvRGV0ZXJtaW5pc3RpY0NvbmZpZ0NyeXB0b0tleVVud3JhcHBlZCB8IHVuZGVmaW5lZCkge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmlzRW1wdHlPYmplY3QgPSBmYWxzZTtcbiAgICAgIHRoaXMuX2tleSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLmlzRW1wdHlPYmplY3QgPSBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoID09PSAwO1xuICAgICAgdGhpcy5fa2V5ID0gdmFsdWUua2V5O1xuICAgIH1cbiAgfVxuXG4gIC8vIGtleSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IGZhbHNlLCByZXF1aXJlZDogdHJ1ZVxuICBwcml2YXRlIF9rZXk/OiBzdHJpbmc7IFxuICBwdWJsaWMgZ2V0IGtleSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ2tleScpO1xuICB9XG4gIHB1YmxpYyBzZXQga2V5KHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9rZXkgPSB2YWx1ZTtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQga2V5SW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2tleTtcbiAgfVxufVxuZXhwb3J0IGludGVyZmFjZSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0RldGVybWluaXN0aWNDb25maWdDcnlwdG9LZXkge1xuICAvKipcbiAgKiBrbXNfd3JhcHBlZCBibG9ja1xuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNrbXNfd3JhcHBlZCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUja21zX3dyYXBwZWR9XG4gICovXG4gIHJlYWRvbmx5IGttc1dyYXBwZWQ/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0RldGVybWluaXN0aWNDb25maWdDcnlwdG9LZXlLbXNXcmFwcGVkO1xuICAvKipcbiAgKiB0cmFuc2llbnQgYmxvY2tcbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjdHJhbnNpZW50IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSN0cmFuc2llbnR9XG4gICovXG4gIHJlYWRvbmx5IHRyYW5zaWVudD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvRGV0ZXJtaW5pc3RpY0NvbmZpZ0NyeXB0b0tleVRyYW5zaWVudDtcbiAgLyoqXG4gICogdW53cmFwcGVkIGJsb2NrXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI3Vud3JhcHBlZCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjdW53cmFwcGVkfVxuICAqL1xuICByZWFkb25seSB1bndyYXBwZWQ/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0RldGVybWluaXN0aWNDb25maWdDcnlwdG9LZXlVbndyYXBwZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0RldGVybWluaXN0aWNDb25maWdDcnlwdG9LZXlUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0RldGVybWluaXN0aWNDb25maWdDcnlwdG9LZXlPdXRwdXRSZWZlcmVuY2UgfCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0RldGVybWluaXN0aWNDb25maWdDcnlwdG9LZXkpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIHJldHVybiB7XG4gICAga21zX3dyYXBwZWQ6IGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvRGV0ZXJtaW5pc3RpY0NvbmZpZ0NyeXB0b0tleUttc1dyYXBwZWRUb1RlcnJhZm9ybShzdHJ1Y3QhLmttc1dyYXBwZWQpLFxuICAgIHRyYW5zaWVudDogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnQ3J5cHRvS2V5VHJhbnNpZW50VG9UZXJyYWZvcm0oc3RydWN0IS50cmFuc2llbnQpLFxuICAgIHVud3JhcHBlZDogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnQ3J5cHRvS2V5VW53cmFwcGVkVG9UZXJyYWZvcm0oc3RydWN0IS51bndyYXBwZWQpLFxuICB9XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvRGV0ZXJtaW5pc3RpY0NvbmZpZ0NyeXB0b0tleVRvSGNsVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvRGV0ZXJtaW5pc3RpY0NvbmZpZ0NyeXB0b0tleU91dHB1dFJlZmVyZW5jZSB8IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvRGV0ZXJtaW5pc3RpY0NvbmZpZ0NyeXB0b0tleSk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpIHx8IGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIGlmIChjZGt0Zi5pc0NvbXBsZXhFbGVtZW50KHN0cnVjdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGNvbXBsZXggZWxlbWVudCB3YXMgdXNlZCBhcyBjb25maWd1cmF0aW9uLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQ6IGh0dHBzOi8vY2RrLnRmL2NvbXBsZXgtb2JqZWN0LWFzLWNvbmZpZ3VyYXRpb25cIik7XG4gIH1cbiAgY29uc3QgYXR0cnMgPSB7XG4gICAga21zX3dyYXBwZWQ6IHtcbiAgICAgIHZhbHVlOiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0RldGVybWluaXN0aWNDb25maWdDcnlwdG9LZXlLbXNXcmFwcGVkVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5rbXNXcmFwcGVkKSxcbiAgICAgIGlzQmxvY2s6IHRydWUsXG4gICAgICB0eXBlOiBcImxpc3RcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwiRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnQ3J5cHRvS2V5S21zV3JhcHBlZExpc3RcIixcbiAgICB9LFxuICAgIHRyYW5zaWVudDoge1xuICAgICAgdmFsdWU6IGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvRGV0ZXJtaW5pc3RpY0NvbmZpZ0NyeXB0b0tleVRyYW5zaWVudFRvSGNsVGVycmFmb3JtKHN0cnVjdCEudHJhbnNpZW50KSxcbiAgICAgIGlzQmxvY2s6IHRydWUsXG4gICAgICB0eXBlOiBcImxpc3RcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwiRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnQ3J5cHRvS2V5VHJhbnNpZW50TGlzdFwiLFxuICAgIH0sXG4gICAgdW53cmFwcGVkOiB7XG4gICAgICB2YWx1ZTogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnQ3J5cHRvS2V5VW53cmFwcGVkVG9IY2xUZXJyYWZvcm0oc3RydWN0IS51bndyYXBwZWQpLFxuICAgICAgaXNCbG9jazogdHJ1ZSxcbiAgICAgIHR5cGU6IFwibGlzdFwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0RldGVybWluaXN0aWNDb25maWdDcnlwdG9LZXlVbndyYXBwZWRMaXN0XCIsXG4gICAgfSxcbiAgfTtcblxuICAvLyByZW1vdmUgdW5kZWZpbmVkIGF0dHJpYnV0ZXNcbiAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhhdHRycykuZmlsdGVyKChbXywgdmFsdWVdKSA9PiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlLnZhbHVlICE9PSB1bmRlZmluZWQpKTtcbn1cblxuZXhwb3J0IGNsYXNzIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvRGV0ZXJtaW5pc3RpY0NvbmZpZ0NyeXB0b0tleU91dHB1dFJlZmVyZW5jZSBleHRlbmRzIGNka3RmLkNvbXBsZXhPYmplY3Qge1xuICBwcml2YXRlIGlzRW1wdHlPYmplY3QgPSBmYWxzZTtcblxuICAvKipcbiAgKiBAcGFyYW0gdGVycmFmb3JtUmVzb3VyY2UgVGhlIHBhcmVudCByZXNvdXJjZVxuICAqIEBwYXJhbSB0ZXJyYWZvcm1BdHRyaWJ1dGUgVGhlIGF0dHJpYnV0ZSBvbiB0aGUgcGFyZW50IHJlc291cmNlIHRoaXMgY2xhc3MgaXMgcmVmZXJlbmNpbmdcbiAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHRlcnJhZm9ybVJlc291cmNlOiBjZGt0Zi5JSW50ZXJwb2xhdGluZ1BhcmVudCwgdGVycmFmb3JtQXR0cmlidXRlOiBzdHJpbmcpIHtcbiAgICBzdXBlcih0ZXJyYWZvcm1SZXNvdXJjZSwgdGVycmFmb3JtQXR0cmlidXRlLCBmYWxzZSwgMCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGludGVybmFsVmFsdWUoKTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnQ3J5cHRvS2V5IHwgdW5kZWZpbmVkIHtcbiAgICBsZXQgaGFzQW55VmFsdWVzID0gdGhpcy5pc0VtcHR5T2JqZWN0O1xuICAgIGNvbnN0IGludGVybmFsVmFsdWVSZXN1bHQ6IGFueSA9IHt9O1xuICAgIGlmICh0aGlzLl9rbXNXcmFwcGVkPy5pbnRlcm5hbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0Lmttc1dyYXBwZWQgPSB0aGlzLl9rbXNXcmFwcGVkPy5pbnRlcm5hbFZhbHVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5fdHJhbnNpZW50Py5pbnRlcm5hbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LnRyYW5zaWVudCA9IHRoaXMuX3RyYW5zaWVudD8uaW50ZXJuYWxWYWx1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3Vud3JhcHBlZD8uaW50ZXJuYWxWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC51bndyYXBwZWQgPSB0aGlzLl91bndyYXBwZWQ/LmludGVybmFsVmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBoYXNBbnlWYWx1ZXMgPyBpbnRlcm5hbFZhbHVlUmVzdWx0IDogdW5kZWZpbmVkO1xuICB9XG5cbiAgcHVibGljIHNldCBpbnRlcm5hbFZhbHVlKHZhbHVlOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0RldGVybWluaXN0aWNDb25maWdDcnlwdG9LZXkgfCB1bmRlZmluZWQpIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5pc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG4gICAgICB0aGlzLl9rbXNXcmFwcGVkLmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl90cmFuc2llbnQuaW50ZXJuYWxWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX3Vud3JhcHBlZC5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggPT09IDA7XG4gICAgICB0aGlzLl9rbXNXcmFwcGVkLmludGVybmFsVmFsdWUgPSB2YWx1ZS5rbXNXcmFwcGVkO1xuICAgICAgdGhpcy5fdHJhbnNpZW50LmludGVybmFsVmFsdWUgPSB2YWx1ZS50cmFuc2llbnQ7XG4gICAgICB0aGlzLl91bndyYXBwZWQuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlLnVud3JhcHBlZDtcbiAgICB9XG4gIH1cblxuICAvLyBrbXNfd3JhcHBlZCAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9rbXNXcmFwcGVkID0gbmV3IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvRGV0ZXJtaW5pc3RpY0NvbmZpZ0NyeXB0b0tleUttc1dyYXBwZWRPdXRwdXRSZWZlcmVuY2UodGhpcywgXCJrbXNfd3JhcHBlZFwiKTtcbiAgcHVibGljIGdldCBrbXNXcmFwcGVkKCkge1xuICAgIHJldHVybiB0aGlzLl9rbXNXcmFwcGVkO1xuICB9XG4gIHB1YmxpYyBwdXRLbXNXcmFwcGVkKHZhbHVlOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0RldGVybWluaXN0aWNDb25maWdDcnlwdG9LZXlLbXNXcmFwcGVkKSB7XG4gICAgdGhpcy5fa21zV3JhcHBlZC5pbnRlcm5hbFZhbHVlID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0S21zV3JhcHBlZCgpIHtcbiAgICB0aGlzLl9rbXNXcmFwcGVkLmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IGttc1dyYXBwZWRJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fa21zV3JhcHBlZC5pbnRlcm5hbFZhbHVlO1xuICB9XG5cbiAgLy8gdHJhbnNpZW50IC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX3RyYW5zaWVudCA9IG5ldyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0RldGVybWluaXN0aWNDb25maWdDcnlwdG9LZXlUcmFuc2llbnRPdXRwdXRSZWZlcmVuY2UodGhpcywgXCJ0cmFuc2llbnRcIik7XG4gIHB1YmxpYyBnZXQgdHJhbnNpZW50KCkge1xuICAgIHJldHVybiB0aGlzLl90cmFuc2llbnQ7XG4gIH1cbiAgcHVibGljIHB1dFRyYW5zaWVudCh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnQ3J5cHRvS2V5VHJhbnNpZW50KSB7XG4gICAgdGhpcy5fdHJhbnNpZW50LmludGVybmFsVmFsdWUgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRUcmFuc2llbnQoKSB7XG4gICAgdGhpcy5fdHJhbnNpZW50LmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IHRyYW5zaWVudElucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl90cmFuc2llbnQuaW50ZXJuYWxWYWx1ZTtcbiAgfVxuXG4gIC8vIHVud3JhcHBlZCAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF91bndyYXBwZWQgPSBuZXcgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnQ3J5cHRvS2V5VW53cmFwcGVkT3V0cHV0UmVmZXJlbmNlKHRoaXMsIFwidW53cmFwcGVkXCIpO1xuICBwdWJsaWMgZ2V0IHVud3JhcHBlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5fdW53cmFwcGVkO1xuICB9XG4gIHB1YmxpYyBwdXRVbndyYXBwZWQodmFsdWU6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvRGV0ZXJtaW5pc3RpY0NvbmZpZ0NyeXB0b0tleVVud3JhcHBlZCkge1xuICAgIHRoaXMuX3Vud3JhcHBlZC5pbnRlcm5hbFZhbHVlID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0VW53cmFwcGVkKCkge1xuICAgIHRoaXMuX3Vud3JhcHBlZC5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCB1bndyYXBwZWRJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fdW53cmFwcGVkLmludGVybmFsVmFsdWU7XG4gIH1cbn1cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnU3Vycm9nYXRlSW5mb1R5cGVTZW5zaXRpdml0eVNjb3JlIHtcbiAgLyoqXG4gICogVGhlIHNlbnNpdGl2aXR5IHNjb3JlIGFwcGxpZWQgdG8gdGhlIHJlc291cmNlLiBQb3NzaWJsZSB2YWx1ZXM6IFtcIlNFTlNJVElWSVRZX0xPV1wiLCBcIlNFTlNJVElWSVRZX01PREVSQVRFXCIsIFwiU0VOU0lUSVZJVFlfSElHSFwiXVxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNzY29yZSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjc2NvcmV9XG4gICovXG4gIHJlYWRvbmx5IHNjb3JlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0RldGVybWluaXN0aWNDb25maWdTdXJyb2dhdGVJbmZvVHlwZVNlbnNpdGl2aXR5U2NvcmVUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0RldGVybWluaXN0aWNDb25maWdTdXJyb2dhdGVJbmZvVHlwZVNlbnNpdGl2aXR5U2NvcmVPdXRwdXRSZWZlcmVuY2UgfCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0RldGVybWluaXN0aWNDb25maWdTdXJyb2dhdGVJbmZvVHlwZVNlbnNpdGl2aXR5U2NvcmUpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIHJldHVybiB7XG4gICAgc2NvcmU6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuc2NvcmUpLFxuICB9XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvRGV0ZXJtaW5pc3RpY0NvbmZpZ1N1cnJvZ2F0ZUluZm9UeXBlU2Vuc2l0aXZpdHlTY29yZVRvSGNsVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvRGV0ZXJtaW5pc3RpY0NvbmZpZ1N1cnJvZ2F0ZUluZm9UeXBlU2Vuc2l0aXZpdHlTY29yZU91dHB1dFJlZmVyZW5jZSB8IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvRGV0ZXJtaW5pc3RpY0NvbmZpZ1N1cnJvZ2F0ZUluZm9UeXBlU2Vuc2l0aXZpdHlTY29yZSk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpIHx8IGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIGlmIChjZGt0Zi5pc0NvbXBsZXhFbGVtZW50KHN0cnVjdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGNvbXBsZXggZWxlbWVudCB3YXMgdXNlZCBhcyBjb25maWd1cmF0aW9uLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQ6IGh0dHBzOi8vY2RrLnRmL2NvbXBsZXgtb2JqZWN0LWFzLWNvbmZpZ3VyYXRpb25cIik7XG4gIH1cbiAgY29uc3QgYXR0cnMgPSB7XG4gICAgc2NvcmU6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5zdHJpbmdUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLnNjb3JlKSxcbiAgICAgIGlzQmxvY2s6IGZhbHNlLFxuICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwic3RyaW5nXCIsXG4gICAgfSxcbiAgfTtcblxuICAvLyByZW1vdmUgdW5kZWZpbmVkIGF0dHJpYnV0ZXNcbiAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhhdHRycykuZmlsdGVyKChbXywgdmFsdWVdKSA9PiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlLnZhbHVlICE9PSB1bmRlZmluZWQpKTtcbn1cblxuZXhwb3J0IGNsYXNzIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvRGV0ZXJtaW5pc3RpY0NvbmZpZ1N1cnJvZ2F0ZUluZm9UeXBlU2Vuc2l0aXZpdHlTY29yZU91dHB1dFJlZmVyZW5jZSBleHRlbmRzIGNka3RmLkNvbXBsZXhPYmplY3Qge1xuICBwcml2YXRlIGlzRW1wdHlPYmplY3QgPSBmYWxzZTtcblxuICAvKipcbiAgKiBAcGFyYW0gdGVycmFmb3JtUmVzb3VyY2UgVGhlIHBhcmVudCByZXNvdXJjZVxuICAqIEBwYXJhbSB0ZXJyYWZvcm1BdHRyaWJ1dGUgVGhlIGF0dHJpYnV0ZSBvbiB0aGUgcGFyZW50IHJlc291cmNlIHRoaXMgY2xhc3MgaXMgcmVmZXJlbmNpbmdcbiAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHRlcnJhZm9ybVJlc291cmNlOiBjZGt0Zi5JSW50ZXJwb2xhdGluZ1BhcmVudCwgdGVycmFmb3JtQXR0cmlidXRlOiBzdHJpbmcpIHtcbiAgICBzdXBlcih0ZXJyYWZvcm1SZXNvdXJjZSwgdGVycmFmb3JtQXR0cmlidXRlLCBmYWxzZSwgMCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGludGVybmFsVmFsdWUoKTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnU3Vycm9nYXRlSW5mb1R5cGVTZW5zaXRpdml0eVNjb3JlIHwgdW5kZWZpbmVkIHtcbiAgICBsZXQgaGFzQW55VmFsdWVzID0gdGhpcy5pc0VtcHR5T2JqZWN0O1xuICAgIGNvbnN0IGludGVybmFsVmFsdWVSZXN1bHQ6IGFueSA9IHt9O1xuICAgIGlmICh0aGlzLl9zY29yZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC5zY29yZSA9IHRoaXMuX3Njb3JlO1xuICAgIH1cbiAgICByZXR1cm4gaGFzQW55VmFsdWVzID8gaW50ZXJuYWxWYWx1ZVJlc3VsdCA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgaW50ZXJuYWxWYWx1ZSh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnU3Vycm9nYXRlSW5mb1R5cGVTZW5zaXRpdml0eVNjb3JlIHwgdW5kZWZpbmVkKSB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IGZhbHNlO1xuICAgICAgdGhpcy5fc2NvcmUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5pc0VtcHR5T2JqZWN0ID0gT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aCA9PT0gMDtcbiAgICAgIHRoaXMuX3Njb3JlID0gdmFsdWUuc2NvcmU7XG4gICAgfVxuICB9XG5cbiAgLy8gc2NvcmUgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiBmYWxzZSwgcmVxdWlyZWQ6IHRydWVcbiAgcHJpdmF0ZSBfc2NvcmU/OiBzdHJpbmc7IFxuICBwdWJsaWMgZ2V0IHNjb3JlKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgnc2NvcmUnKTtcbiAgfVxuICBwdWJsaWMgc2V0IHNjb3JlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9zY29yZSA9IHZhbHVlO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBzY29yZUlucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9zY29yZTtcbiAgfVxufVxuZXhwb3J0IGludGVyZmFjZSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0RldGVybWluaXN0aWNDb25maWdTdXJyb2dhdGVJbmZvVHlwZSB7XG4gIC8qKlxuICAqIE5hbWUgb2YgdGhlIGluZm9ybWF0aW9uIHR5cGUuIEVpdGhlciBhIG5hbWUgb2YgeW91ciBjaG9vc2luZyB3aGVuIGNyZWF0aW5nIGEgQ3VzdG9tSW5mb1R5cGUsIG9yIG9uZSBvZiB0aGUgbmFtZXMgbGlzdGVkIGF0IFtodHRwczovL2Nsb3VkLmdvb2dsZS5jb20vZGxwL2RvY3MvaW5mb3R5cGVzLXJlZmVyZW5jZV0oaHR0cHM6Ly9jbG91ZC5nb29nbGUuY29tL2RscC9kb2NzL2luZm90eXBlcy1yZWZlcmVuY2UpIHdoZW4gc3BlY2lmeWluZyBhIGJ1aWx0LWluIHR5cGUuIFdoZW4gc2VuZGluZyBDbG91ZCBETFAgcmVzdWx0cyB0byBEYXRhIENhdGFsb2csIGluZm9UeXBlIG5hbWVzIHNob3VsZCBjb25mb3JtIHRvIHRoZSBwYXR0ZXJuICdbQS1aYS16MC05JC1fXXsxLDY0fScuXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI25hbWUgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI25hbWV9XG4gICovXG4gIHJlYWRvbmx5IG5hbWU/OiBzdHJpbmc7XG4gIC8qKlxuICAqIE9wdGlvbmFsIHZlcnNpb24gbmFtZSBmb3IgdGhpcyBJbmZvVHlwZS5cbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjdmVyc2lvbiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjdmVyc2lvbn1cbiAgKi9cbiAgcmVhZG9ubHkgdmVyc2lvbj86IHN0cmluZztcbiAgLyoqXG4gICogc2Vuc2l0aXZpdHlfc2NvcmUgYmxvY2tcbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjc2Vuc2l0aXZpdHlfc2NvcmUgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI3NlbnNpdGl2aXR5X3Njb3JlfVxuICAqL1xuICByZWFkb25seSBzZW5zaXRpdml0eVNjb3JlPzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnU3Vycm9nYXRlSW5mb1R5cGVTZW5zaXRpdml0eVNjb3JlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnU3Vycm9nYXRlSW5mb1R5cGVUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0RldGVybWluaXN0aWNDb25maWdTdXJyb2dhdGVJbmZvVHlwZU91dHB1dFJlZmVyZW5jZSB8IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvRGV0ZXJtaW5pc3RpY0NvbmZpZ1N1cnJvZ2F0ZUluZm9UeXBlKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkgfHwgY2RrdGYuVG9rZW5pemF0aW9uLmlzUmVzb2x2YWJsZShzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgaWYgKGNka3RmLmlzQ29tcGxleEVsZW1lbnQoc3RydWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkEgY29tcGxleCBlbGVtZW50IHdhcyB1c2VkIGFzIGNvbmZpZ3VyYXRpb24sIHRoaXMgaXMgbm90IHN1cHBvcnRlZDogaHR0cHM6Ly9jZGsudGYvY29tcGxleC1vYmplY3QtYXMtY29uZmlndXJhdGlvblwiKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG5hbWU6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEubmFtZSksXG4gICAgdmVyc2lvbjogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS52ZXJzaW9uKSxcbiAgICBzZW5zaXRpdml0eV9zY29yZTogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnU3Vycm9nYXRlSW5mb1R5cGVTZW5zaXRpdml0eVNjb3JlVG9UZXJyYWZvcm0oc3RydWN0IS5zZW5zaXRpdml0eVNjb3JlKSxcbiAgfVxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0RldGVybWluaXN0aWNDb25maWdTdXJyb2dhdGVJbmZvVHlwZVRvSGNsVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvRGV0ZXJtaW5pc3RpY0NvbmZpZ1N1cnJvZ2F0ZUluZm9UeXBlT3V0cHV0UmVmZXJlbmNlIHwgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnU3Vycm9nYXRlSW5mb1R5cGUpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIGNvbnN0IGF0dHJzID0ge1xuICAgIG5hbWU6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5zdHJpbmdUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLm5hbWUpLFxuICAgICAgaXNCbG9jazogZmFsc2UsXG4gICAgICB0eXBlOiBcInNpbXBsZVwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJzdHJpbmdcIixcbiAgICB9LFxuICAgIHZlcnNpb246IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5zdHJpbmdUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLnZlcnNpb24pLFxuICAgICAgaXNCbG9jazogZmFsc2UsXG4gICAgICB0eXBlOiBcInNpbXBsZVwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJzdHJpbmdcIixcbiAgICB9LFxuICAgIHNlbnNpdGl2aXR5X3Njb3JlOiB7XG4gICAgICB2YWx1ZTogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnU3Vycm9nYXRlSW5mb1R5cGVTZW5zaXRpdml0eVNjb3JlVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5zZW5zaXRpdml0eVNjb3JlKSxcbiAgICAgIGlzQmxvY2s6IHRydWUsXG4gICAgICB0eXBlOiBcImxpc3RcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwiRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnU3Vycm9nYXRlSW5mb1R5cGVTZW5zaXRpdml0eVNjb3JlTGlzdFwiLFxuICAgIH0sXG4gIH07XG5cbiAgLy8gcmVtb3ZlIHVuZGVmaW5lZCBhdHRyaWJ1dGVzXG4gIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMoYXR0cnMpLmZpbHRlcigoW18sIHZhbHVlXSkgPT4gdmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZS52YWx1ZSAhPT0gdW5kZWZpbmVkKSk7XG59XG5cbmV4cG9ydCBjbGFzcyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0RldGVybWluaXN0aWNDb25maWdTdXJyb2dhdGVJbmZvVHlwZU91dHB1dFJlZmVyZW5jZSBleHRlbmRzIGNka3RmLkNvbXBsZXhPYmplY3Qge1xuICBwcml2YXRlIGlzRW1wdHlPYmplY3QgPSBmYWxzZTtcblxuICAvKipcbiAgKiBAcGFyYW0gdGVycmFmb3JtUmVzb3VyY2UgVGhlIHBhcmVudCByZXNvdXJjZVxuICAqIEBwYXJhbSB0ZXJyYWZvcm1BdHRyaWJ1dGUgVGhlIGF0dHJpYnV0ZSBvbiB0aGUgcGFyZW50IHJlc291cmNlIHRoaXMgY2xhc3MgaXMgcmVmZXJlbmNpbmdcbiAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHRlcnJhZm9ybVJlc291cmNlOiBjZGt0Zi5JSW50ZXJwb2xhdGluZ1BhcmVudCwgdGVycmFmb3JtQXR0cmlidXRlOiBzdHJpbmcpIHtcbiAgICBzdXBlcih0ZXJyYWZvcm1SZXNvdXJjZSwgdGVycmFmb3JtQXR0cmlidXRlLCBmYWxzZSwgMCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGludGVybmFsVmFsdWUoKTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnU3Vycm9nYXRlSW5mb1R5cGUgfCB1bmRlZmluZWQge1xuICAgIGxldCBoYXNBbnlWYWx1ZXMgPSB0aGlzLmlzRW1wdHlPYmplY3Q7XG4gICAgY29uc3QgaW50ZXJuYWxWYWx1ZVJlc3VsdDogYW55ID0ge307XG4gICAgaWYgKHRoaXMuX25hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQubmFtZSA9IHRoaXMuX25hbWU7XG4gICAgfVxuICAgIGlmICh0aGlzLl92ZXJzaW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LnZlcnNpb24gPSB0aGlzLl92ZXJzaW9uO1xuICAgIH1cbiAgICBpZiAodGhpcy5fc2Vuc2l0aXZpdHlTY29yZT8uaW50ZXJuYWxWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC5zZW5zaXRpdml0eVNjb3JlID0gdGhpcy5fc2Vuc2l0aXZpdHlTY29yZT8uaW50ZXJuYWxWYWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGhhc0FueVZhbHVlcyA/IGludGVybmFsVmFsdWVSZXN1bHQgOiB1bmRlZmluZWQ7XG4gIH1cblxuICBwdWJsaWMgc2V0IGludGVybmFsVmFsdWUodmFsdWU6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvRGV0ZXJtaW5pc3RpY0NvbmZpZ1N1cnJvZ2F0ZUluZm9UeXBlIHwgdW5kZWZpbmVkKSB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IGZhbHNlO1xuICAgICAgdGhpcy5fbmFtZSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX3ZlcnNpb24gPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9zZW5zaXRpdml0eVNjb3JlLmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5pc0VtcHR5T2JqZWN0ID0gT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aCA9PT0gMDtcbiAgICAgIHRoaXMuX25hbWUgPSB2YWx1ZS5uYW1lO1xuICAgICAgdGhpcy5fdmVyc2lvbiA9IHZhbHVlLnZlcnNpb247XG4gICAgICB0aGlzLl9zZW5zaXRpdml0eVNjb3JlLmludGVybmFsVmFsdWUgPSB2YWx1ZS5zZW5zaXRpdml0eVNjb3JlO1xuICAgIH1cbiAgfVxuXG4gIC8vIG5hbWUgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfbmFtZT86IHN0cmluZzsgXG4gIHB1YmxpYyBnZXQgbmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ25hbWUnKTtcbiAgfVxuICBwdWJsaWMgc2V0IG5hbWUodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX25hbWUgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXROYW1lKCkge1xuICAgIHRoaXMuX25hbWUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IG5hbWVJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fbmFtZTtcbiAgfVxuXG4gIC8vIHZlcnNpb24gLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfdmVyc2lvbj86IHN0cmluZzsgXG4gIHB1YmxpYyBnZXQgdmVyc2lvbigpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ3ZlcnNpb24nKTtcbiAgfVxuICBwdWJsaWMgc2V0IHZlcnNpb24odmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX3ZlcnNpb24gPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRWZXJzaW9uKCkge1xuICAgIHRoaXMuX3ZlcnNpb24gPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IHZlcnNpb25JbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmVyc2lvbjtcbiAgfVxuXG4gIC8vIHNlbnNpdGl2aXR5X3Njb3JlIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX3NlbnNpdGl2aXR5U2NvcmUgPSBuZXcgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnU3Vycm9nYXRlSW5mb1R5cGVTZW5zaXRpdml0eVNjb3JlT3V0cHV0UmVmZXJlbmNlKHRoaXMsIFwic2Vuc2l0aXZpdHlfc2NvcmVcIik7XG4gIHB1YmxpYyBnZXQgc2Vuc2l0aXZpdHlTY29yZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2Vuc2l0aXZpdHlTY29yZTtcbiAgfVxuICBwdWJsaWMgcHV0U2Vuc2l0aXZpdHlTY29yZSh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnU3Vycm9nYXRlSW5mb1R5cGVTZW5zaXRpdml0eVNjb3JlKSB7XG4gICAgdGhpcy5fc2Vuc2l0aXZpdHlTY29yZS5pbnRlcm5hbFZhbHVlID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0U2Vuc2l0aXZpdHlTY29yZSgpIHtcbiAgICB0aGlzLl9zZW5zaXRpdml0eVNjb3JlLmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IHNlbnNpdGl2aXR5U2NvcmVJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2Vuc2l0aXZpdHlTY29yZS5pbnRlcm5hbFZhbHVlO1xuICB9XG59XG5leHBvcnQgaW50ZXJmYWNlIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvRGV0ZXJtaW5pc3RpY0NvbmZpZyB7XG4gIC8qKlxuICAqIGNvbnRleHQgYmxvY2tcbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjY29udGV4dCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjY29udGV4dH1cbiAgKi9cbiAgcmVhZG9ubHkgY29udGV4dD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvRGV0ZXJtaW5pc3RpY0NvbmZpZ0NvbnRleHQ7XG4gIC8qKlxuICAqIGNyeXB0b19rZXkgYmxvY2tcbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjY3J5cHRvX2tleSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjY3J5cHRvX2tleX1cbiAgKi9cbiAgcmVhZG9ubHkgY3J5cHRvS2V5PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnQ3J5cHRvS2V5O1xuICAvKipcbiAgKiBzdXJyb2dhdGVfaW5mb190eXBlIGJsb2NrXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI3N1cnJvZ2F0ZV9pbmZvX3R5cGUgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI3N1cnJvZ2F0ZV9pbmZvX3R5cGV9XG4gICovXG4gIHJlYWRvbmx5IHN1cnJvZ2F0ZUluZm9UeXBlPzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnU3Vycm9nYXRlSW5mb1R5cGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0RldGVybWluaXN0aWNDb25maWdUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0RldGVybWluaXN0aWNDb25maWdPdXRwdXRSZWZlcmVuY2UgfCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0RldGVybWluaXN0aWNDb25maWcpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIHJldHVybiB7XG4gICAgY29udGV4dDogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnQ29udGV4dFRvVGVycmFmb3JtKHN0cnVjdCEuY29udGV4dCksXG4gICAgY3J5cHRvX2tleTogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnQ3J5cHRvS2V5VG9UZXJyYWZvcm0oc3RydWN0IS5jcnlwdG9LZXkpLFxuICAgIHN1cnJvZ2F0ZV9pbmZvX3R5cGU6IGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvRGV0ZXJtaW5pc3RpY0NvbmZpZ1N1cnJvZ2F0ZUluZm9UeXBlVG9UZXJyYWZvcm0oc3RydWN0IS5zdXJyb2dhdGVJbmZvVHlwZSksXG4gIH1cbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnVG9IY2xUZXJyYWZvcm0oc3RydWN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnT3V0cHV0UmVmZXJlbmNlIHwgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkgfHwgY2RrdGYuVG9rZW5pemF0aW9uLmlzUmVzb2x2YWJsZShzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgaWYgKGNka3RmLmlzQ29tcGxleEVsZW1lbnQoc3RydWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkEgY29tcGxleCBlbGVtZW50IHdhcyB1c2VkIGFzIGNvbmZpZ3VyYXRpb24sIHRoaXMgaXMgbm90IHN1cHBvcnRlZDogaHR0cHM6Ly9jZGsudGYvY29tcGxleC1vYmplY3QtYXMtY29uZmlndXJhdGlvblwiKTtcbiAgfVxuICBjb25zdCBhdHRycyA9IHtcbiAgICBjb250ZXh0OiB7XG4gICAgICB2YWx1ZTogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnQ29udGV4dFRvSGNsVGVycmFmb3JtKHN0cnVjdCEuY29udGV4dCksXG4gICAgICBpc0Jsb2NrOiB0cnVlLFxuICAgICAgdHlwZTogXCJsaXN0XCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcIkRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvRGV0ZXJtaW5pc3RpY0NvbmZpZ0NvbnRleHRMaXN0XCIsXG4gICAgfSxcbiAgICBjcnlwdG9fa2V5OiB7XG4gICAgICB2YWx1ZTogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnQ3J5cHRvS2V5VG9IY2xUZXJyYWZvcm0oc3RydWN0IS5jcnlwdG9LZXkpLFxuICAgICAgaXNCbG9jazogdHJ1ZSxcbiAgICAgIHR5cGU6IFwibGlzdFwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0RldGVybWluaXN0aWNDb25maWdDcnlwdG9LZXlMaXN0XCIsXG4gICAgfSxcbiAgICBzdXJyb2dhdGVfaW5mb190eXBlOiB7XG4gICAgICB2YWx1ZTogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnU3Vycm9nYXRlSW5mb1R5cGVUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLnN1cnJvZ2F0ZUluZm9UeXBlKSxcbiAgICAgIGlzQmxvY2s6IHRydWUsXG4gICAgICB0eXBlOiBcImxpc3RcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwiRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnU3Vycm9nYXRlSW5mb1R5cGVMaXN0XCIsXG4gICAgfSxcbiAgfTtcblxuICAvLyByZW1vdmUgdW5kZWZpbmVkIGF0dHJpYnV0ZXNcbiAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhhdHRycykuZmlsdGVyKChbXywgdmFsdWVdKSA9PiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlLnZhbHVlICE9PSB1bmRlZmluZWQpKTtcbn1cblxuZXhwb3J0IGNsYXNzIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvRGV0ZXJtaW5pc3RpY0NvbmZpZ091dHB1dFJlZmVyZW5jZSBleHRlbmRzIGNka3RmLkNvbXBsZXhPYmplY3Qge1xuICBwcml2YXRlIGlzRW1wdHlPYmplY3QgPSBmYWxzZTtcblxuICAvKipcbiAgKiBAcGFyYW0gdGVycmFmb3JtUmVzb3VyY2UgVGhlIHBhcmVudCByZXNvdXJjZVxuICAqIEBwYXJhbSB0ZXJyYWZvcm1BdHRyaWJ1dGUgVGhlIGF0dHJpYnV0ZSBvbiB0aGUgcGFyZW50IHJlc291cmNlIHRoaXMgY2xhc3MgaXMgcmVmZXJlbmNpbmdcbiAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHRlcnJhZm9ybVJlc291cmNlOiBjZGt0Zi5JSW50ZXJwb2xhdGluZ1BhcmVudCwgdGVycmFmb3JtQXR0cmlidXRlOiBzdHJpbmcpIHtcbiAgICBzdXBlcih0ZXJyYWZvcm1SZXNvdXJjZSwgdGVycmFmb3JtQXR0cmlidXRlLCBmYWxzZSwgMCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGludGVybmFsVmFsdWUoKTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnIHwgdW5kZWZpbmVkIHtcbiAgICBsZXQgaGFzQW55VmFsdWVzID0gdGhpcy5pc0VtcHR5T2JqZWN0O1xuICAgIGNvbnN0IGludGVybmFsVmFsdWVSZXN1bHQ6IGFueSA9IHt9O1xuICAgIGlmICh0aGlzLl9jb250ZXh0Py5pbnRlcm5hbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LmNvbnRleHQgPSB0aGlzLl9jb250ZXh0Py5pbnRlcm5hbFZhbHVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5fY3J5cHRvS2V5Py5pbnRlcm5hbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LmNyeXB0b0tleSA9IHRoaXMuX2NyeXB0b0tleT8uaW50ZXJuYWxWYWx1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3N1cnJvZ2F0ZUluZm9UeXBlPy5pbnRlcm5hbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LnN1cnJvZ2F0ZUluZm9UeXBlID0gdGhpcy5fc3Vycm9nYXRlSW5mb1R5cGU/LmludGVybmFsVmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBoYXNBbnlWYWx1ZXMgPyBpbnRlcm5hbFZhbHVlUmVzdWx0IDogdW5kZWZpbmVkO1xuICB9XG5cbiAgcHVibGljIHNldCBpbnRlcm5hbFZhbHVlKHZhbHVlOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0RldGVybWluaXN0aWNDb25maWcgfCB1bmRlZmluZWQpIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5pc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG4gICAgICB0aGlzLl9jb250ZXh0LmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9jcnlwdG9LZXkuaW50ZXJuYWxWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX3N1cnJvZ2F0ZUluZm9UeXBlLmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5pc0VtcHR5T2JqZWN0ID0gT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aCA9PT0gMDtcbiAgICAgIHRoaXMuX2NvbnRleHQuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlLmNvbnRleHQ7XG4gICAgICB0aGlzLl9jcnlwdG9LZXkuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlLmNyeXB0b0tleTtcbiAgICAgIHRoaXMuX3N1cnJvZ2F0ZUluZm9UeXBlLmludGVybmFsVmFsdWUgPSB2YWx1ZS5zdXJyb2dhdGVJbmZvVHlwZTtcbiAgICB9XG4gIH1cblxuICAvLyBjb250ZXh0IC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX2NvbnRleHQgPSBuZXcgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnQ29udGV4dE91dHB1dFJlZmVyZW5jZSh0aGlzLCBcImNvbnRleHRcIik7XG4gIHB1YmxpYyBnZXQgY29udGV4dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29udGV4dDtcbiAgfVxuICBwdWJsaWMgcHV0Q29udGV4dCh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnQ29udGV4dCkge1xuICAgIHRoaXMuX2NvbnRleHQuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldENvbnRleHQoKSB7XG4gICAgdGhpcy5fY29udGV4dC5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBjb250ZXh0SW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRleHQuaW50ZXJuYWxWYWx1ZTtcbiAgfVxuXG4gIC8vIGNyeXB0b19rZXkgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfY3J5cHRvS2V5ID0gbmV3IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvRGV0ZXJtaW5pc3RpY0NvbmZpZ0NyeXB0b0tleU91dHB1dFJlZmVyZW5jZSh0aGlzLCBcImNyeXB0b19rZXlcIik7XG4gIHB1YmxpYyBnZXQgY3J5cHRvS2V5KCkge1xuICAgIHJldHVybiB0aGlzLl9jcnlwdG9LZXk7XG4gIH1cbiAgcHVibGljIHB1dENyeXB0b0tleSh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnQ3J5cHRvS2V5KSB7XG4gICAgdGhpcy5fY3J5cHRvS2V5LmludGVybmFsVmFsdWUgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRDcnlwdG9LZXkoKSB7XG4gICAgdGhpcy5fY3J5cHRvS2V5LmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IGNyeXB0b0tleUlucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9jcnlwdG9LZXkuaW50ZXJuYWxWYWx1ZTtcbiAgfVxuXG4gIC8vIHN1cnJvZ2F0ZV9pbmZvX3R5cGUgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfc3Vycm9nYXRlSW5mb1R5cGUgPSBuZXcgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnU3Vycm9nYXRlSW5mb1R5cGVPdXRwdXRSZWZlcmVuY2UodGhpcywgXCJzdXJyb2dhdGVfaW5mb190eXBlXCIpO1xuICBwdWJsaWMgZ2V0IHN1cnJvZ2F0ZUluZm9UeXBlKCkge1xuICAgIHJldHVybiB0aGlzLl9zdXJyb2dhdGVJbmZvVHlwZTtcbiAgfVxuICBwdWJsaWMgcHV0U3Vycm9nYXRlSW5mb1R5cGUodmFsdWU6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvRGV0ZXJtaW5pc3RpY0NvbmZpZ1N1cnJvZ2F0ZUluZm9UeXBlKSB7XG4gICAgdGhpcy5fc3Vycm9nYXRlSW5mb1R5cGUuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldFN1cnJvZ2F0ZUluZm9UeXBlKCkge1xuICAgIHRoaXMuX3N1cnJvZ2F0ZUluZm9UeXBlLmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IHN1cnJvZ2F0ZUluZm9UeXBlSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N1cnJvZ2F0ZUluZm9UeXBlLmludGVybmFsVmFsdWU7XG4gIH1cbn1cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9IYXNoQ29uZmlnQ3J5cHRvS2V5S21zV3JhcHBlZCB7XG4gIC8qKlxuICAqIFRoZSByZXNvdXJjZSBuYW1lIG9mIHRoZSBLTVMgQ3J5cHRvS2V5IHRvIHVzZSBmb3IgdW53cmFwcGluZy5cbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjY3J5cHRvX2tleV9uYW1lIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSNjcnlwdG9fa2V5X25hbWV9XG4gICovXG4gIHJlYWRvbmx5IGNyeXB0b0tleU5hbWU6IHN0cmluZztcbiAgLyoqXG4gICogVGhlIHdyYXBwZWQgZGF0YSBjcnlwdG8ga2V5LlxuICAqIFxuICAqIEEgYmFzZTY0LWVuY29kZWQgc3RyaW5nLlxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSN3cmFwcGVkX2tleSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjd3JhcHBlZF9rZXl9XG4gICovXG4gIHJlYWRvbmx5IHdyYXBwZWRLZXk6IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvSGFzaENvbmZpZ0NyeXB0b0tleUttc1dyYXBwZWRUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0hhc2hDb25maWdDcnlwdG9LZXlLbXNXcmFwcGVkT3V0cHV0UmVmZXJlbmNlIHwgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9IYXNoQ29uZmlnQ3J5cHRvS2V5S21zV3JhcHBlZCk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpIHx8IGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIGlmIChjZGt0Zi5pc0NvbXBsZXhFbGVtZW50KHN0cnVjdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGNvbXBsZXggZWxlbWVudCB3YXMgdXNlZCBhcyBjb25maWd1cmF0aW9uLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQ6IGh0dHBzOi8vY2RrLnRmL2NvbXBsZXgtb2JqZWN0LWFzLWNvbmZpZ3VyYXRpb25cIik7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBjcnlwdG9fa2V5X25hbWU6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuY3J5cHRvS2V5TmFtZSksXG4gICAgd3JhcHBlZF9rZXk6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEud3JhcHBlZEtleSksXG4gIH1cbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9IYXNoQ29uZmlnQ3J5cHRvS2V5S21zV3JhcHBlZFRvSGNsVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvSGFzaENvbmZpZ0NyeXB0b0tleUttc1dyYXBwZWRPdXRwdXRSZWZlcmVuY2UgfCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0hhc2hDb25maWdDcnlwdG9LZXlLbXNXcmFwcGVkKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkgfHwgY2RrdGYuVG9rZW5pemF0aW9uLmlzUmVzb2x2YWJsZShzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgaWYgKGNka3RmLmlzQ29tcGxleEVsZW1lbnQoc3RydWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkEgY29tcGxleCBlbGVtZW50IHdhcyB1c2VkIGFzIGNvbmZpZ3VyYXRpb24sIHRoaXMgaXMgbm90IHN1cHBvcnRlZDogaHR0cHM6Ly9jZGsudGYvY29tcGxleC1vYmplY3QtYXMtY29uZmlndXJhdGlvblwiKTtcbiAgfVxuICBjb25zdCBhdHRycyA9IHtcbiAgICBjcnlwdG9fa2V5X25hbWU6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5zdHJpbmdUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLmNyeXB0b0tleU5hbWUpLFxuICAgICAgaXNCbG9jazogZmFsc2UsXG4gICAgICB0eXBlOiBcInNpbXBsZVwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJzdHJpbmdcIixcbiAgICB9LFxuICAgIHdyYXBwZWRfa2V5OiB7XG4gICAgICB2YWx1ZTogY2RrdGYuc3RyaW5nVG9IY2xUZXJyYWZvcm0oc3RydWN0IS53cmFwcGVkS2V5KSxcbiAgICAgIGlzQmxvY2s6IGZhbHNlLFxuICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwic3RyaW5nXCIsXG4gICAgfSxcbiAgfTtcblxuICAvLyByZW1vdmUgdW5kZWZpbmVkIGF0dHJpYnV0ZXNcbiAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhhdHRycykuZmlsdGVyKChbXywgdmFsdWVdKSA9PiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlLnZhbHVlICE9PSB1bmRlZmluZWQpKTtcbn1cblxuZXhwb3J0IGNsYXNzIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvSGFzaENvbmZpZ0NyeXB0b0tleUttc1dyYXBwZWRPdXRwdXRSZWZlcmVuY2UgZXh0ZW5kcyBjZGt0Zi5Db21wbGV4T2JqZWN0IHtcbiAgcHJpdmF0ZSBpc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG5cbiAgLyoqXG4gICogQHBhcmFtIHRlcnJhZm9ybVJlc291cmNlIFRoZSBwYXJlbnQgcmVzb3VyY2VcbiAgKiBAcGFyYW0gdGVycmFmb3JtQXR0cmlidXRlIFRoZSBhdHRyaWJ1dGUgb24gdGhlIHBhcmVudCByZXNvdXJjZSB0aGlzIGNsYXNzIGlzIHJlZmVyZW5jaW5nXG4gICovXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcih0ZXJyYWZvcm1SZXNvdXJjZTogY2RrdGYuSUludGVycG9sYXRpbmdQYXJlbnQsIHRlcnJhZm9ybUF0dHJpYnV0ZTogc3RyaW5nKSB7XG4gICAgc3VwZXIodGVycmFmb3JtUmVzb3VyY2UsIHRlcnJhZm9ybUF0dHJpYnV0ZSwgZmFsc2UsIDApO1xuICB9XG5cbiAgcHVibGljIGdldCBpbnRlcm5hbFZhbHVlKCk6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvSGFzaENvbmZpZ0NyeXB0b0tleUttc1dyYXBwZWQgfCB1bmRlZmluZWQge1xuICAgIGxldCBoYXNBbnlWYWx1ZXMgPSB0aGlzLmlzRW1wdHlPYmplY3Q7XG4gICAgY29uc3QgaW50ZXJuYWxWYWx1ZVJlc3VsdDogYW55ID0ge307XG4gICAgaWYgKHRoaXMuX2NyeXB0b0tleU5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQuY3J5cHRvS2V5TmFtZSA9IHRoaXMuX2NyeXB0b0tleU5hbWU7XG4gICAgfVxuICAgIGlmICh0aGlzLl93cmFwcGVkS2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LndyYXBwZWRLZXkgPSB0aGlzLl93cmFwcGVkS2V5O1xuICAgIH1cbiAgICByZXR1cm4gaGFzQW55VmFsdWVzID8gaW50ZXJuYWxWYWx1ZVJlc3VsdCA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgaW50ZXJuYWxWYWx1ZSh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9IYXNoQ29uZmlnQ3J5cHRvS2V5S21zV3JhcHBlZCB8IHVuZGVmaW5lZCkge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmlzRW1wdHlPYmplY3QgPSBmYWxzZTtcbiAgICAgIHRoaXMuX2NyeXB0b0tleU5hbWUgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl93cmFwcGVkS2V5ID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggPT09IDA7XG4gICAgICB0aGlzLl9jcnlwdG9LZXlOYW1lID0gdmFsdWUuY3J5cHRvS2V5TmFtZTtcbiAgICAgIHRoaXMuX3dyYXBwZWRLZXkgPSB2YWx1ZS53cmFwcGVkS2V5O1xuICAgIH1cbiAgfVxuXG4gIC8vIGNyeXB0b19rZXlfbmFtZSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IGZhbHNlLCByZXF1aXJlZDogdHJ1ZVxuICBwcml2YXRlIF9jcnlwdG9LZXlOYW1lPzogc3RyaW5nOyBcbiAgcHVibGljIGdldCBjcnlwdG9LZXlOYW1lKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgnY3J5cHRvX2tleV9uYW1lJyk7XG4gIH1cbiAgcHVibGljIHNldCBjcnlwdG9LZXlOYW1lKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9jcnlwdG9LZXlOYW1lID0gdmFsdWU7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IGNyeXB0b0tleU5hbWVJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fY3J5cHRvS2V5TmFtZTtcbiAgfVxuXG4gIC8vIHdyYXBwZWRfa2V5IC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogZmFsc2UsIHJlcXVpcmVkOiB0cnVlXG4gIHByaXZhdGUgX3dyYXBwZWRLZXk/OiBzdHJpbmc7IFxuICBwdWJsaWMgZ2V0IHdyYXBwZWRLZXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCd3cmFwcGVkX2tleScpO1xuICB9XG4gIHB1YmxpYyBzZXQgd3JhcHBlZEtleSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fd3JhcHBlZEtleSA9IHZhbHVlO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCB3cmFwcGVkS2V5SW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dyYXBwZWRLZXk7XG4gIH1cbn1cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9IYXNoQ29uZmlnQ3J5cHRvS2V5VHJhbnNpZW50IHtcbiAgLyoqXG4gICogTmFtZSBvZiB0aGUga2V5LiBUaGlzIGlzIGFuIGFyYml0cmFyeSBzdHJpbmcgdXNlZCB0byBkaWZmZXJlbnRpYXRlIGRpZmZlcmVudCBrZXlzLiBBIHVuaXF1ZSBrZXkgaXMgZ2VuZXJhdGVkIHBlciBuYW1lOiB0d28gc2VwYXJhdGUgJ1RyYW5zaWVudENyeXB0b0tleScgcHJvdG9zIHNoYXJlIHRoZSBzYW1lIGdlbmVyYXRlZCBrZXkgaWYgdGhlaXIgbmFtZXMgYXJlIHRoZSBzYW1lLiBXaGVuIHRoZSBkYXRhIGNyeXB0byBrZXkgaXMgZ2VuZXJhdGVkLCB0aGlzIG5hbWUgaXMgbm90IHVzZWQgaW4gYW55IHdheSAocmVwZWF0aW5nIHRoZSBhcGkgY2FsbCB3aWxsIHJlc3VsdCBpbiBhIGRpZmZlcmVudCBrZXkgYmVpbmcgZ2VuZXJhdGVkKS5cbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjbmFtZSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjbmFtZX1cbiAgKi9cbiAgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9IYXNoQ29uZmlnQ3J5cHRvS2V5VHJhbnNpZW50VG9UZXJyYWZvcm0oc3RydWN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9IYXNoQ29uZmlnQ3J5cHRvS2V5VHJhbnNpZW50T3V0cHV0UmVmZXJlbmNlIHwgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9IYXNoQ29uZmlnQ3J5cHRvS2V5VHJhbnNpZW50KTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkgfHwgY2RrdGYuVG9rZW5pemF0aW9uLmlzUmVzb2x2YWJsZShzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgaWYgKGNka3RmLmlzQ29tcGxleEVsZW1lbnQoc3RydWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkEgY29tcGxleCBlbGVtZW50IHdhcyB1c2VkIGFzIGNvbmZpZ3VyYXRpb24sIHRoaXMgaXMgbm90IHN1cHBvcnRlZDogaHR0cHM6Ly9jZGsudGYvY29tcGxleC1vYmplY3QtYXMtY29uZmlndXJhdGlvblwiKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG5hbWU6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEubmFtZSksXG4gIH1cbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9IYXNoQ29uZmlnQ3J5cHRvS2V5VHJhbnNpZW50VG9IY2xUZXJyYWZvcm0oc3RydWN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9IYXNoQ29uZmlnQ3J5cHRvS2V5VHJhbnNpZW50T3V0cHV0UmVmZXJlbmNlIHwgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9IYXNoQ29uZmlnQ3J5cHRvS2V5VHJhbnNpZW50KTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkgfHwgY2RrdGYuVG9rZW5pemF0aW9uLmlzUmVzb2x2YWJsZShzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgaWYgKGNka3RmLmlzQ29tcGxleEVsZW1lbnQoc3RydWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkEgY29tcGxleCBlbGVtZW50IHdhcyB1c2VkIGFzIGNvbmZpZ3VyYXRpb24sIHRoaXMgaXMgbm90IHN1cHBvcnRlZDogaHR0cHM6Ly9jZGsudGYvY29tcGxleC1vYmplY3QtYXMtY29uZmlndXJhdGlvblwiKTtcbiAgfVxuICBjb25zdCBhdHRycyA9IHtcbiAgICBuYW1lOiB7XG4gICAgICB2YWx1ZTogY2RrdGYuc3RyaW5nVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5uYW1lKSxcbiAgICAgIGlzQmxvY2s6IGZhbHNlLFxuICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwic3RyaW5nXCIsXG4gICAgfSxcbiAgfTtcblxuICAvLyByZW1vdmUgdW5kZWZpbmVkIGF0dHJpYnV0ZXNcbiAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhhdHRycykuZmlsdGVyKChbXywgdmFsdWVdKSA9PiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlLnZhbHVlICE9PSB1bmRlZmluZWQpKTtcbn1cblxuZXhwb3J0IGNsYXNzIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvSGFzaENvbmZpZ0NyeXB0b0tleVRyYW5zaWVudE91dHB1dFJlZmVyZW5jZSBleHRlbmRzIGNka3RmLkNvbXBsZXhPYmplY3Qge1xuICBwcml2YXRlIGlzRW1wdHlPYmplY3QgPSBmYWxzZTtcblxuICAvKipcbiAgKiBAcGFyYW0gdGVycmFmb3JtUmVzb3VyY2UgVGhlIHBhcmVudCByZXNvdXJjZVxuICAqIEBwYXJhbSB0ZXJyYWZvcm1BdHRyaWJ1dGUgVGhlIGF0dHJpYnV0ZSBvbiB0aGUgcGFyZW50IHJlc291cmNlIHRoaXMgY2xhc3MgaXMgcmVmZXJlbmNpbmdcbiAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHRlcnJhZm9ybVJlc291cmNlOiBjZGt0Zi5JSW50ZXJwb2xhdGluZ1BhcmVudCwgdGVycmFmb3JtQXR0cmlidXRlOiBzdHJpbmcpIHtcbiAgICBzdXBlcih0ZXJyYWZvcm1SZXNvdXJjZSwgdGVycmFmb3JtQXR0cmlidXRlLCBmYWxzZSwgMCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGludGVybmFsVmFsdWUoKTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9IYXNoQ29uZmlnQ3J5cHRvS2V5VHJhbnNpZW50IHwgdW5kZWZpbmVkIHtcbiAgICBsZXQgaGFzQW55VmFsdWVzID0gdGhpcy5pc0VtcHR5T2JqZWN0O1xuICAgIGNvbnN0IGludGVybmFsVmFsdWVSZXN1bHQ6IGFueSA9IHt9O1xuICAgIGlmICh0aGlzLl9uYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0Lm5hbWUgPSB0aGlzLl9uYW1lO1xuICAgIH1cbiAgICByZXR1cm4gaGFzQW55VmFsdWVzID8gaW50ZXJuYWxWYWx1ZVJlc3VsdCA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgaW50ZXJuYWxWYWx1ZSh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9IYXNoQ29uZmlnQ3J5cHRvS2V5VHJhbnNpZW50IHwgdW5kZWZpbmVkKSB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IGZhbHNlO1xuICAgICAgdGhpcy5fbmFtZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLmlzRW1wdHlPYmplY3QgPSBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoID09PSAwO1xuICAgICAgdGhpcy5fbmFtZSA9IHZhbHVlLm5hbWU7XG4gICAgfVxuICB9XG5cbiAgLy8gbmFtZSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IGZhbHNlLCByZXF1aXJlZDogdHJ1ZVxuICBwcml2YXRlIF9uYW1lPzogc3RyaW5nOyBcbiAgcHVibGljIGdldCBuYW1lKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgnbmFtZScpO1xuICB9XG4gIHB1YmxpYyBzZXQgbmFtZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fbmFtZSA9IHZhbHVlO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBuYW1lSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX25hbWU7XG4gIH1cbn1cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9IYXNoQ29uZmlnQ3J5cHRvS2V5VW53cmFwcGVkIHtcbiAgLyoqXG4gICogQSAxMjgvMTkyLzI1NiBiaXQga2V5LlxuICAqIFxuICAqIEEgYmFzZTY0LWVuY29kZWQgc3RyaW5nLlxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNrZXkgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI2tleX1cbiAgKi9cbiAgcmVhZG9ubHkga2V5OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0hhc2hDb25maWdDcnlwdG9LZXlVbndyYXBwZWRUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0hhc2hDb25maWdDcnlwdG9LZXlVbndyYXBwZWRPdXRwdXRSZWZlcmVuY2UgfCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0hhc2hDb25maWdDcnlwdG9LZXlVbndyYXBwZWQpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIHJldHVybiB7XG4gICAga2V5OiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLmtleSksXG4gIH1cbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9IYXNoQ29uZmlnQ3J5cHRvS2V5VW53cmFwcGVkVG9IY2xUZXJyYWZvcm0oc3RydWN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9IYXNoQ29uZmlnQ3J5cHRvS2V5VW53cmFwcGVkT3V0cHV0UmVmZXJlbmNlIHwgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9IYXNoQ29uZmlnQ3J5cHRvS2V5VW53cmFwcGVkKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkgfHwgY2RrdGYuVG9rZW5pemF0aW9uLmlzUmVzb2x2YWJsZShzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgaWYgKGNka3RmLmlzQ29tcGxleEVsZW1lbnQoc3RydWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkEgY29tcGxleCBlbGVtZW50IHdhcyB1c2VkIGFzIGNvbmZpZ3VyYXRpb24sIHRoaXMgaXMgbm90IHN1cHBvcnRlZDogaHR0cHM6Ly9jZGsudGYvY29tcGxleC1vYmplY3QtYXMtY29uZmlndXJhdGlvblwiKTtcbiAgfVxuICBjb25zdCBhdHRycyA9IHtcbiAgICBrZXk6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5zdHJpbmdUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLmtleSksXG4gICAgICBpc0Jsb2NrOiBmYWxzZSxcbiAgICAgIHR5cGU6IFwic2ltcGxlXCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcInN0cmluZ1wiLFxuICAgIH0sXG4gIH07XG5cbiAgLy8gcmVtb3ZlIHVuZGVmaW5lZCBhdHRyaWJ1dGVzXG4gIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMoYXR0cnMpLmZpbHRlcigoW18sIHZhbHVlXSkgPT4gdmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZS52YWx1ZSAhPT0gdW5kZWZpbmVkKSk7XG59XG5cbmV4cG9ydCBjbGFzcyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0hhc2hDb25maWdDcnlwdG9LZXlVbndyYXBwZWRPdXRwdXRSZWZlcmVuY2UgZXh0ZW5kcyBjZGt0Zi5Db21wbGV4T2JqZWN0IHtcbiAgcHJpdmF0ZSBpc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG5cbiAgLyoqXG4gICogQHBhcmFtIHRlcnJhZm9ybVJlc291cmNlIFRoZSBwYXJlbnQgcmVzb3VyY2VcbiAgKiBAcGFyYW0gdGVycmFmb3JtQXR0cmlidXRlIFRoZSBhdHRyaWJ1dGUgb24gdGhlIHBhcmVudCByZXNvdXJjZSB0aGlzIGNsYXNzIGlzIHJlZmVyZW5jaW5nXG4gICovXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcih0ZXJyYWZvcm1SZXNvdXJjZTogY2RrdGYuSUludGVycG9sYXRpbmdQYXJlbnQsIHRlcnJhZm9ybUF0dHJpYnV0ZTogc3RyaW5nKSB7XG4gICAgc3VwZXIodGVycmFmb3JtUmVzb3VyY2UsIHRlcnJhZm9ybUF0dHJpYnV0ZSwgZmFsc2UsIDApO1xuICB9XG5cbiAgcHVibGljIGdldCBpbnRlcm5hbFZhbHVlKCk6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvSGFzaENvbmZpZ0NyeXB0b0tleVVud3JhcHBlZCB8IHVuZGVmaW5lZCB7XG4gICAgbGV0IGhhc0FueVZhbHVlcyA9IHRoaXMuaXNFbXB0eU9iamVjdDtcbiAgICBjb25zdCBpbnRlcm5hbFZhbHVlUmVzdWx0OiBhbnkgPSB7fTtcbiAgICBpZiAodGhpcy5fa2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LmtleSA9IHRoaXMuX2tleTtcbiAgICB9XG4gICAgcmV0dXJuIGhhc0FueVZhbHVlcyA/IGludGVybmFsVmFsdWVSZXN1bHQgOiB1bmRlZmluZWQ7XG4gIH1cblxuICBwdWJsaWMgc2V0IGludGVybmFsVmFsdWUodmFsdWU6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvSGFzaENvbmZpZ0NyeXB0b0tleVVud3JhcHBlZCB8IHVuZGVmaW5lZCkge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmlzRW1wdHlPYmplY3QgPSBmYWxzZTtcbiAgICAgIHRoaXMuX2tleSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLmlzRW1wdHlPYmplY3QgPSBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoID09PSAwO1xuICAgICAgdGhpcy5fa2V5ID0gdmFsdWUua2V5O1xuICAgIH1cbiAgfVxuXG4gIC8vIGtleSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IGZhbHNlLCByZXF1aXJlZDogdHJ1ZVxuICBwcml2YXRlIF9rZXk/OiBzdHJpbmc7IFxuICBwdWJsaWMgZ2V0IGtleSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ2tleScpO1xuICB9XG4gIHB1YmxpYyBzZXQga2V5KHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9rZXkgPSB2YWx1ZTtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQga2V5SW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2tleTtcbiAgfVxufVxuZXhwb3J0IGludGVyZmFjZSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0hhc2hDb25maWdDcnlwdG9LZXkge1xuICAvKipcbiAgKiBrbXNfd3JhcHBlZCBibG9ja1xuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNrbXNfd3JhcHBlZCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUja21zX3dyYXBwZWR9XG4gICovXG4gIHJlYWRvbmx5IGttc1dyYXBwZWQ/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0hhc2hDb25maWdDcnlwdG9LZXlLbXNXcmFwcGVkO1xuICAvKipcbiAgKiB0cmFuc2llbnQgYmxvY2tcbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjdHJhbnNpZW50IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSN0cmFuc2llbnR9XG4gICovXG4gIHJlYWRvbmx5IHRyYW5zaWVudD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvSGFzaENvbmZpZ0NyeXB0b0tleVRyYW5zaWVudDtcbiAgLyoqXG4gICogdW53cmFwcGVkIGJsb2NrXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI3Vud3JhcHBlZCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjdW53cmFwcGVkfVxuICAqL1xuICByZWFkb25seSB1bndyYXBwZWQ/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0hhc2hDb25maWdDcnlwdG9LZXlVbndyYXBwZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0hhc2hDb25maWdDcnlwdG9LZXlUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0hhc2hDb25maWdDcnlwdG9LZXlPdXRwdXRSZWZlcmVuY2UgfCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0hhc2hDb25maWdDcnlwdG9LZXkpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIHJldHVybiB7XG4gICAga21zX3dyYXBwZWQ6IGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvSGFzaENvbmZpZ0NyeXB0b0tleUttc1dyYXBwZWRUb1RlcnJhZm9ybShzdHJ1Y3QhLmttc1dyYXBwZWQpLFxuICAgIHRyYW5zaWVudDogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9IYXNoQ29uZmlnQ3J5cHRvS2V5VHJhbnNpZW50VG9UZXJyYWZvcm0oc3RydWN0IS50cmFuc2llbnQpLFxuICAgIHVud3JhcHBlZDogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9IYXNoQ29uZmlnQ3J5cHRvS2V5VW53cmFwcGVkVG9UZXJyYWZvcm0oc3RydWN0IS51bndyYXBwZWQpLFxuICB9XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvSGFzaENvbmZpZ0NyeXB0b0tleVRvSGNsVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvSGFzaENvbmZpZ0NyeXB0b0tleU91dHB1dFJlZmVyZW5jZSB8IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvSGFzaENvbmZpZ0NyeXB0b0tleSk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpIHx8IGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIGlmIChjZGt0Zi5pc0NvbXBsZXhFbGVtZW50KHN0cnVjdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGNvbXBsZXggZWxlbWVudCB3YXMgdXNlZCBhcyBjb25maWd1cmF0aW9uLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQ6IGh0dHBzOi8vY2RrLnRmL2NvbXBsZXgtb2JqZWN0LWFzLWNvbmZpZ3VyYXRpb25cIik7XG4gIH1cbiAgY29uc3QgYXR0cnMgPSB7XG4gICAga21zX3dyYXBwZWQ6IHtcbiAgICAgIHZhbHVlOiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0hhc2hDb25maWdDcnlwdG9LZXlLbXNXcmFwcGVkVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5rbXNXcmFwcGVkKSxcbiAgICAgIGlzQmxvY2s6IHRydWUsXG4gICAgICB0eXBlOiBcImxpc3RcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwiRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9IYXNoQ29uZmlnQ3J5cHRvS2V5S21zV3JhcHBlZExpc3RcIixcbiAgICB9LFxuICAgIHRyYW5zaWVudDoge1xuICAgICAgdmFsdWU6IGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvSGFzaENvbmZpZ0NyeXB0b0tleVRyYW5zaWVudFRvSGNsVGVycmFmb3JtKHN0cnVjdCEudHJhbnNpZW50KSxcbiAgICAgIGlzQmxvY2s6IHRydWUsXG4gICAgICB0eXBlOiBcImxpc3RcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwiRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9IYXNoQ29uZmlnQ3J5cHRvS2V5VHJhbnNpZW50TGlzdFwiLFxuICAgIH0sXG4gICAgdW53cmFwcGVkOiB7XG4gICAgICB2YWx1ZTogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9IYXNoQ29uZmlnQ3J5cHRvS2V5VW53cmFwcGVkVG9IY2xUZXJyYWZvcm0oc3RydWN0IS51bndyYXBwZWQpLFxuICAgICAgaXNCbG9jazogdHJ1ZSxcbiAgICAgIHR5cGU6IFwibGlzdFwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0hhc2hDb25maWdDcnlwdG9LZXlVbndyYXBwZWRMaXN0XCIsXG4gICAgfSxcbiAgfTtcblxuICAvLyByZW1vdmUgdW5kZWZpbmVkIGF0dHJpYnV0ZXNcbiAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhhdHRycykuZmlsdGVyKChbXywgdmFsdWVdKSA9PiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlLnZhbHVlICE9PSB1bmRlZmluZWQpKTtcbn1cblxuZXhwb3J0IGNsYXNzIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvSGFzaENvbmZpZ0NyeXB0b0tleU91dHB1dFJlZmVyZW5jZSBleHRlbmRzIGNka3RmLkNvbXBsZXhPYmplY3Qge1xuICBwcml2YXRlIGlzRW1wdHlPYmplY3QgPSBmYWxzZTtcblxuICAvKipcbiAgKiBAcGFyYW0gdGVycmFmb3JtUmVzb3VyY2UgVGhlIHBhcmVudCByZXNvdXJjZVxuICAqIEBwYXJhbSB0ZXJyYWZvcm1BdHRyaWJ1dGUgVGhlIGF0dHJpYnV0ZSBvbiB0aGUgcGFyZW50IHJlc291cmNlIHRoaXMgY2xhc3MgaXMgcmVmZXJlbmNpbmdcbiAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHRlcnJhZm9ybVJlc291cmNlOiBjZGt0Zi5JSW50ZXJwb2xhdGluZ1BhcmVudCwgdGVycmFmb3JtQXR0cmlidXRlOiBzdHJpbmcpIHtcbiAgICBzdXBlcih0ZXJyYWZvcm1SZXNvdXJjZSwgdGVycmFmb3JtQXR0cmlidXRlLCBmYWxzZSwgMCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGludGVybmFsVmFsdWUoKTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9IYXNoQ29uZmlnQ3J5cHRvS2V5IHwgdW5kZWZpbmVkIHtcbiAgICBsZXQgaGFzQW55VmFsdWVzID0gdGhpcy5pc0VtcHR5T2JqZWN0O1xuICAgIGNvbnN0IGludGVybmFsVmFsdWVSZXN1bHQ6IGFueSA9IHt9O1xuICAgIGlmICh0aGlzLl9rbXNXcmFwcGVkPy5pbnRlcm5hbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0Lmttc1dyYXBwZWQgPSB0aGlzLl9rbXNXcmFwcGVkPy5pbnRlcm5hbFZhbHVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5fdHJhbnNpZW50Py5pbnRlcm5hbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LnRyYW5zaWVudCA9IHRoaXMuX3RyYW5zaWVudD8uaW50ZXJuYWxWYWx1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3Vud3JhcHBlZD8uaW50ZXJuYWxWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC51bndyYXBwZWQgPSB0aGlzLl91bndyYXBwZWQ/LmludGVybmFsVmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBoYXNBbnlWYWx1ZXMgPyBpbnRlcm5hbFZhbHVlUmVzdWx0IDogdW5kZWZpbmVkO1xuICB9XG5cbiAgcHVibGljIHNldCBpbnRlcm5hbFZhbHVlKHZhbHVlOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0hhc2hDb25maWdDcnlwdG9LZXkgfCB1bmRlZmluZWQpIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5pc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG4gICAgICB0aGlzLl9rbXNXcmFwcGVkLmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl90cmFuc2llbnQuaW50ZXJuYWxWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX3Vud3JhcHBlZC5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggPT09IDA7XG4gICAgICB0aGlzLl9rbXNXcmFwcGVkLmludGVybmFsVmFsdWUgPSB2YWx1ZS5rbXNXcmFwcGVkO1xuICAgICAgdGhpcy5fdHJhbnNpZW50LmludGVybmFsVmFsdWUgPSB2YWx1ZS50cmFuc2llbnQ7XG4gICAgICB0aGlzLl91bndyYXBwZWQuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlLnVud3JhcHBlZDtcbiAgICB9XG4gIH1cblxuICAvLyBrbXNfd3JhcHBlZCAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9rbXNXcmFwcGVkID0gbmV3IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvSGFzaENvbmZpZ0NyeXB0b0tleUttc1dyYXBwZWRPdXRwdXRSZWZlcmVuY2UodGhpcywgXCJrbXNfd3JhcHBlZFwiKTtcbiAgcHVibGljIGdldCBrbXNXcmFwcGVkKCkge1xuICAgIHJldHVybiB0aGlzLl9rbXNXcmFwcGVkO1xuICB9XG4gIHB1YmxpYyBwdXRLbXNXcmFwcGVkKHZhbHVlOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0hhc2hDb25maWdDcnlwdG9LZXlLbXNXcmFwcGVkKSB7XG4gICAgdGhpcy5fa21zV3JhcHBlZC5pbnRlcm5hbFZhbHVlID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0S21zV3JhcHBlZCgpIHtcbiAgICB0aGlzLl9rbXNXcmFwcGVkLmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IGttc1dyYXBwZWRJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fa21zV3JhcHBlZC5pbnRlcm5hbFZhbHVlO1xuICB9XG5cbiAgLy8gdHJhbnNpZW50IC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX3RyYW5zaWVudCA9IG5ldyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0hhc2hDb25maWdDcnlwdG9LZXlUcmFuc2llbnRPdXRwdXRSZWZlcmVuY2UodGhpcywgXCJ0cmFuc2llbnRcIik7XG4gIHB1YmxpYyBnZXQgdHJhbnNpZW50KCkge1xuICAgIHJldHVybiB0aGlzLl90cmFuc2llbnQ7XG4gIH1cbiAgcHVibGljIHB1dFRyYW5zaWVudCh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9IYXNoQ29uZmlnQ3J5cHRvS2V5VHJhbnNpZW50KSB7XG4gICAgdGhpcy5fdHJhbnNpZW50LmludGVybmFsVmFsdWUgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRUcmFuc2llbnQoKSB7XG4gICAgdGhpcy5fdHJhbnNpZW50LmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IHRyYW5zaWVudElucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl90cmFuc2llbnQuaW50ZXJuYWxWYWx1ZTtcbiAgfVxuXG4gIC8vIHVud3JhcHBlZCAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF91bndyYXBwZWQgPSBuZXcgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9IYXNoQ29uZmlnQ3J5cHRvS2V5VW53cmFwcGVkT3V0cHV0UmVmZXJlbmNlKHRoaXMsIFwidW53cmFwcGVkXCIpO1xuICBwdWJsaWMgZ2V0IHVud3JhcHBlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5fdW53cmFwcGVkO1xuICB9XG4gIHB1YmxpYyBwdXRVbndyYXBwZWQodmFsdWU6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvSGFzaENvbmZpZ0NyeXB0b0tleVVud3JhcHBlZCkge1xuICAgIHRoaXMuX3Vud3JhcHBlZC5pbnRlcm5hbFZhbHVlID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0VW53cmFwcGVkKCkge1xuICAgIHRoaXMuX3Vud3JhcHBlZC5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCB1bndyYXBwZWRJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fdW53cmFwcGVkLmludGVybmFsVmFsdWU7XG4gIH1cbn1cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9IYXNoQ29uZmlnIHtcbiAgLyoqXG4gICogY3J5cHRvX2tleSBibG9ja1xuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNjcnlwdG9fa2V5IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSNjcnlwdG9fa2V5fVxuICAqL1xuICByZWFkb25seSBjcnlwdG9LZXk/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0hhc2hDb25maWdDcnlwdG9LZXk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0hhc2hDb25maWdUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0hhc2hDb25maWdPdXRwdXRSZWZlcmVuY2UgfCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0hhc2hDb25maWcpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIHJldHVybiB7XG4gICAgY3J5cHRvX2tleTogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9IYXNoQ29uZmlnQ3J5cHRvS2V5VG9UZXJyYWZvcm0oc3RydWN0IS5jcnlwdG9LZXkpLFxuICB9XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvSGFzaENvbmZpZ1RvSGNsVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvSGFzaENvbmZpZ091dHB1dFJlZmVyZW5jZSB8IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvSGFzaENvbmZpZyk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpIHx8IGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIGlmIChjZGt0Zi5pc0NvbXBsZXhFbGVtZW50KHN0cnVjdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGNvbXBsZXggZWxlbWVudCB3YXMgdXNlZCBhcyBjb25maWd1cmF0aW9uLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQ6IGh0dHBzOi8vY2RrLnRmL2NvbXBsZXgtb2JqZWN0LWFzLWNvbmZpZ3VyYXRpb25cIik7XG4gIH1cbiAgY29uc3QgYXR0cnMgPSB7XG4gICAgY3J5cHRvX2tleToge1xuICAgICAgdmFsdWU6IGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvSGFzaENvbmZpZ0NyeXB0b0tleVRvSGNsVGVycmFmb3JtKHN0cnVjdCEuY3J5cHRvS2V5KSxcbiAgICAgIGlzQmxvY2s6IHRydWUsXG4gICAgICB0eXBlOiBcImxpc3RcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwiRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9IYXNoQ29uZmlnQ3J5cHRvS2V5TGlzdFwiLFxuICAgIH0sXG4gIH07XG5cbiAgLy8gcmVtb3ZlIHVuZGVmaW5lZCBhdHRyaWJ1dGVzXG4gIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMoYXR0cnMpLmZpbHRlcigoW18sIHZhbHVlXSkgPT4gdmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZS52YWx1ZSAhPT0gdW5kZWZpbmVkKSk7XG59XG5cbmV4cG9ydCBjbGFzcyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0hhc2hDb25maWdPdXRwdXRSZWZlcmVuY2UgZXh0ZW5kcyBjZGt0Zi5Db21wbGV4T2JqZWN0IHtcbiAgcHJpdmF0ZSBpc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG5cbiAgLyoqXG4gICogQHBhcmFtIHRlcnJhZm9ybVJlc291cmNlIFRoZSBwYXJlbnQgcmVzb3VyY2VcbiAgKiBAcGFyYW0gdGVycmFmb3JtQXR0cmlidXRlIFRoZSBhdHRyaWJ1dGUgb24gdGhlIHBhcmVudCByZXNvdXJjZSB0aGlzIGNsYXNzIGlzIHJlZmVyZW5jaW5nXG4gICovXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcih0ZXJyYWZvcm1SZXNvdXJjZTogY2RrdGYuSUludGVycG9sYXRpbmdQYXJlbnQsIHRlcnJhZm9ybUF0dHJpYnV0ZTogc3RyaW5nKSB7XG4gICAgc3VwZXIodGVycmFmb3JtUmVzb3VyY2UsIHRlcnJhZm9ybUF0dHJpYnV0ZSwgZmFsc2UsIDApO1xuICB9XG5cbiAgcHVibGljIGdldCBpbnRlcm5hbFZhbHVlKCk6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvSGFzaENvbmZpZyB8IHVuZGVmaW5lZCB7XG4gICAgbGV0IGhhc0FueVZhbHVlcyA9IHRoaXMuaXNFbXB0eU9iamVjdDtcbiAgICBjb25zdCBpbnRlcm5hbFZhbHVlUmVzdWx0OiBhbnkgPSB7fTtcbiAgICBpZiAodGhpcy5fY3J5cHRvS2V5Py5pbnRlcm5hbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LmNyeXB0b0tleSA9IHRoaXMuX2NyeXB0b0tleT8uaW50ZXJuYWxWYWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGhhc0FueVZhbHVlcyA/IGludGVybmFsVmFsdWVSZXN1bHQgOiB1bmRlZmluZWQ7XG4gIH1cblxuICBwdWJsaWMgc2V0IGludGVybmFsVmFsdWUodmFsdWU6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvSGFzaENvbmZpZyB8IHVuZGVmaW5lZCkge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmlzRW1wdHlPYmplY3QgPSBmYWxzZTtcbiAgICAgIHRoaXMuX2NyeXB0b0tleS5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggPT09IDA7XG4gICAgICB0aGlzLl9jcnlwdG9LZXkuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlLmNyeXB0b0tleTtcbiAgICB9XG4gIH1cblxuICAvLyBjcnlwdG9fa2V5IC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX2NyeXB0b0tleSA9IG5ldyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0hhc2hDb25maWdDcnlwdG9LZXlPdXRwdXRSZWZlcmVuY2UodGhpcywgXCJjcnlwdG9fa2V5XCIpO1xuICBwdWJsaWMgZ2V0IGNyeXB0b0tleSgpIHtcbiAgICByZXR1cm4gdGhpcy5fY3J5cHRvS2V5O1xuICB9XG4gIHB1YmxpYyBwdXRDcnlwdG9LZXkodmFsdWU6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvSGFzaENvbmZpZ0NyeXB0b0tleSkge1xuICAgIHRoaXMuX2NyeXB0b0tleS5pbnRlcm5hbFZhbHVlID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0Q3J5cHRvS2V5KCkge1xuICAgIHRoaXMuX2NyeXB0b0tleS5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBjcnlwdG9LZXlJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fY3J5cHRvS2V5LmludGVybmFsVmFsdWU7XG4gIH1cbn1cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnQ29udGV4dCB7XG4gIC8qKlxuICAqIE5hbWUgZGVzY3JpYmluZyB0aGUgZmllbGQuXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI25hbWUgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI25hbWV9XG4gICovXG4gIHJlYWRvbmx5IG5hbWU/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b1JlcGxhY2VGZnhGcGVDb25maWdDb250ZXh0VG9UZXJyYWZvcm0oc3RydWN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnQ29udGV4dE91dHB1dFJlZmVyZW5jZSB8IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZ0NvbnRleHQpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIHJldHVybiB7XG4gICAgbmFtZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5uYW1lKSxcbiAgfVxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b1JlcGxhY2VGZnhGcGVDb25maWdDb250ZXh0VG9IY2xUZXJyYWZvcm0oc3RydWN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnQ29udGV4dE91dHB1dFJlZmVyZW5jZSB8IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZ0NvbnRleHQpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIGNvbnN0IGF0dHJzID0ge1xuICAgIG5hbWU6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5zdHJpbmdUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLm5hbWUpLFxuICAgICAgaXNCbG9jazogZmFsc2UsXG4gICAgICB0eXBlOiBcInNpbXBsZVwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJzdHJpbmdcIixcbiAgICB9LFxuICB9O1xuXG4gIC8vIHJlbW92ZSB1bmRlZmluZWQgYXR0cmlidXRlc1xuICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5lbnRyaWVzKGF0dHJzKS5maWx0ZXIoKFtfLCB2YWx1ZV0pID0+IHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUudmFsdWUgIT09IHVuZGVmaW5lZCkpO1xufVxuXG5leHBvcnQgY2xhc3MgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnQ29udGV4dE91dHB1dFJlZmVyZW5jZSBleHRlbmRzIGNka3RmLkNvbXBsZXhPYmplY3Qge1xuICBwcml2YXRlIGlzRW1wdHlPYmplY3QgPSBmYWxzZTtcblxuICAvKipcbiAgKiBAcGFyYW0gdGVycmFmb3JtUmVzb3VyY2UgVGhlIHBhcmVudCByZXNvdXJjZVxuICAqIEBwYXJhbSB0ZXJyYWZvcm1BdHRyaWJ1dGUgVGhlIGF0dHJpYnV0ZSBvbiB0aGUgcGFyZW50IHJlc291cmNlIHRoaXMgY2xhc3MgaXMgcmVmZXJlbmNpbmdcbiAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHRlcnJhZm9ybVJlc291cmNlOiBjZGt0Zi5JSW50ZXJwb2xhdGluZ1BhcmVudCwgdGVycmFmb3JtQXR0cmlidXRlOiBzdHJpbmcpIHtcbiAgICBzdXBlcih0ZXJyYWZvcm1SZXNvdXJjZSwgdGVycmFmb3JtQXR0cmlidXRlLCBmYWxzZSwgMCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGludGVybmFsVmFsdWUoKTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnQ29udGV4dCB8IHVuZGVmaW5lZCB7XG4gICAgbGV0IGhhc0FueVZhbHVlcyA9IHRoaXMuaXNFbXB0eU9iamVjdDtcbiAgICBjb25zdCBpbnRlcm5hbFZhbHVlUmVzdWx0OiBhbnkgPSB7fTtcbiAgICBpZiAodGhpcy5fbmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC5uYW1lID0gdGhpcy5fbmFtZTtcbiAgICB9XG4gICAgcmV0dXJuIGhhc0FueVZhbHVlcyA/IGludGVybmFsVmFsdWVSZXN1bHQgOiB1bmRlZmluZWQ7XG4gIH1cblxuICBwdWJsaWMgc2V0IGludGVybmFsVmFsdWUodmFsdWU6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZ0NvbnRleHQgfCB1bmRlZmluZWQpIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5pc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG4gICAgICB0aGlzLl9uYW1lID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggPT09IDA7XG4gICAgICB0aGlzLl9uYW1lID0gdmFsdWUubmFtZTtcbiAgICB9XG4gIH1cblxuICAvLyBuYW1lIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX25hbWU/OiBzdHJpbmc7IFxuICBwdWJsaWMgZ2V0IG5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCduYW1lJyk7XG4gIH1cbiAgcHVibGljIHNldCBuYW1lKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9uYW1lID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0TmFtZSgpIHtcbiAgICB0aGlzLl9uYW1lID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBuYW1lSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX25hbWU7XG4gIH1cbn1cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnQ3J5cHRvS2V5S21zV3JhcHBlZCB7XG4gIC8qKlxuICAqIFRoZSByZXNvdXJjZSBuYW1lIG9mIHRoZSBLTVMgQ3J5cHRvS2V5IHRvIHVzZSBmb3IgdW53cmFwcGluZy5cbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjY3J5cHRvX2tleV9uYW1lIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSNjcnlwdG9fa2V5X25hbWV9XG4gICovXG4gIHJlYWRvbmx5IGNyeXB0b0tleU5hbWU6IHN0cmluZztcbiAgLyoqXG4gICogVGhlIHdyYXBwZWQgZGF0YSBjcnlwdG8ga2V5LlxuICAqIFxuICAqIEEgYmFzZTY0LWVuY29kZWQgc3RyaW5nLlxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSN3cmFwcGVkX2tleSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjd3JhcHBlZF9rZXl9XG4gICovXG4gIHJlYWRvbmx5IHdyYXBwZWRLZXk6IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZ0NyeXB0b0tleUttc1dyYXBwZWRUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b1JlcGxhY2VGZnhGcGVDb25maWdDcnlwdG9LZXlLbXNXcmFwcGVkT3V0cHV0UmVmZXJlbmNlIHwgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnQ3J5cHRvS2V5S21zV3JhcHBlZCk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpIHx8IGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIGlmIChjZGt0Zi5pc0NvbXBsZXhFbGVtZW50KHN0cnVjdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGNvbXBsZXggZWxlbWVudCB3YXMgdXNlZCBhcyBjb25maWd1cmF0aW9uLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQ6IGh0dHBzOi8vY2RrLnRmL2NvbXBsZXgtb2JqZWN0LWFzLWNvbmZpZ3VyYXRpb25cIik7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBjcnlwdG9fa2V5X25hbWU6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuY3J5cHRvS2V5TmFtZSksXG4gICAgd3JhcHBlZF9rZXk6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEud3JhcHBlZEtleSksXG4gIH1cbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnQ3J5cHRvS2V5S21zV3JhcHBlZFRvSGNsVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZ0NyeXB0b0tleUttc1dyYXBwZWRPdXRwdXRSZWZlcmVuY2UgfCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b1JlcGxhY2VGZnhGcGVDb25maWdDcnlwdG9LZXlLbXNXcmFwcGVkKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkgfHwgY2RrdGYuVG9rZW5pemF0aW9uLmlzUmVzb2x2YWJsZShzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgaWYgKGNka3RmLmlzQ29tcGxleEVsZW1lbnQoc3RydWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkEgY29tcGxleCBlbGVtZW50IHdhcyB1c2VkIGFzIGNvbmZpZ3VyYXRpb24sIHRoaXMgaXMgbm90IHN1cHBvcnRlZDogaHR0cHM6Ly9jZGsudGYvY29tcGxleC1vYmplY3QtYXMtY29uZmlndXJhdGlvblwiKTtcbiAgfVxuICBjb25zdCBhdHRycyA9IHtcbiAgICBjcnlwdG9fa2V5X25hbWU6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5zdHJpbmdUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLmNyeXB0b0tleU5hbWUpLFxuICAgICAgaXNCbG9jazogZmFsc2UsXG4gICAgICB0eXBlOiBcInNpbXBsZVwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJzdHJpbmdcIixcbiAgICB9LFxuICAgIHdyYXBwZWRfa2V5OiB7XG4gICAgICB2YWx1ZTogY2RrdGYuc3RyaW5nVG9IY2xUZXJyYWZvcm0oc3RydWN0IS53cmFwcGVkS2V5KSxcbiAgICAgIGlzQmxvY2s6IGZhbHNlLFxuICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwic3RyaW5nXCIsXG4gICAgfSxcbiAgfTtcblxuICAvLyByZW1vdmUgdW5kZWZpbmVkIGF0dHJpYnV0ZXNcbiAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhhdHRycykuZmlsdGVyKChbXywgdmFsdWVdKSA9PiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlLnZhbHVlICE9PSB1bmRlZmluZWQpKTtcbn1cblxuZXhwb3J0IGNsYXNzIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZ0NyeXB0b0tleUttc1dyYXBwZWRPdXRwdXRSZWZlcmVuY2UgZXh0ZW5kcyBjZGt0Zi5Db21wbGV4T2JqZWN0IHtcbiAgcHJpdmF0ZSBpc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG5cbiAgLyoqXG4gICogQHBhcmFtIHRlcnJhZm9ybVJlc291cmNlIFRoZSBwYXJlbnQgcmVzb3VyY2VcbiAgKiBAcGFyYW0gdGVycmFmb3JtQXR0cmlidXRlIFRoZSBhdHRyaWJ1dGUgb24gdGhlIHBhcmVudCByZXNvdXJjZSB0aGlzIGNsYXNzIGlzIHJlZmVyZW5jaW5nXG4gICovXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcih0ZXJyYWZvcm1SZXNvdXJjZTogY2RrdGYuSUludGVycG9sYXRpbmdQYXJlbnQsIHRlcnJhZm9ybUF0dHJpYnV0ZTogc3RyaW5nKSB7XG4gICAgc3VwZXIodGVycmFmb3JtUmVzb3VyY2UsIHRlcnJhZm9ybUF0dHJpYnV0ZSwgZmFsc2UsIDApO1xuICB9XG5cbiAgcHVibGljIGdldCBpbnRlcm5hbFZhbHVlKCk6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZ0NyeXB0b0tleUttc1dyYXBwZWQgfCB1bmRlZmluZWQge1xuICAgIGxldCBoYXNBbnlWYWx1ZXMgPSB0aGlzLmlzRW1wdHlPYmplY3Q7XG4gICAgY29uc3QgaW50ZXJuYWxWYWx1ZVJlc3VsdDogYW55ID0ge307XG4gICAgaWYgKHRoaXMuX2NyeXB0b0tleU5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQuY3J5cHRvS2V5TmFtZSA9IHRoaXMuX2NyeXB0b0tleU5hbWU7XG4gICAgfVxuICAgIGlmICh0aGlzLl93cmFwcGVkS2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LndyYXBwZWRLZXkgPSB0aGlzLl93cmFwcGVkS2V5O1xuICAgIH1cbiAgICByZXR1cm4gaGFzQW55VmFsdWVzID8gaW50ZXJuYWxWYWx1ZVJlc3VsdCA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgaW50ZXJuYWxWYWx1ZSh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnQ3J5cHRvS2V5S21zV3JhcHBlZCB8IHVuZGVmaW5lZCkge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmlzRW1wdHlPYmplY3QgPSBmYWxzZTtcbiAgICAgIHRoaXMuX2NyeXB0b0tleU5hbWUgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl93cmFwcGVkS2V5ID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggPT09IDA7XG4gICAgICB0aGlzLl9jcnlwdG9LZXlOYW1lID0gdmFsdWUuY3J5cHRvS2V5TmFtZTtcbiAgICAgIHRoaXMuX3dyYXBwZWRLZXkgPSB2YWx1ZS53cmFwcGVkS2V5O1xuICAgIH1cbiAgfVxuXG4gIC8vIGNyeXB0b19rZXlfbmFtZSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IGZhbHNlLCByZXF1aXJlZDogdHJ1ZVxuICBwcml2YXRlIF9jcnlwdG9LZXlOYW1lPzogc3RyaW5nOyBcbiAgcHVibGljIGdldCBjcnlwdG9LZXlOYW1lKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgnY3J5cHRvX2tleV9uYW1lJyk7XG4gIH1cbiAgcHVibGljIHNldCBjcnlwdG9LZXlOYW1lKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9jcnlwdG9LZXlOYW1lID0gdmFsdWU7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IGNyeXB0b0tleU5hbWVJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fY3J5cHRvS2V5TmFtZTtcbiAgfVxuXG4gIC8vIHdyYXBwZWRfa2V5IC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogZmFsc2UsIHJlcXVpcmVkOiB0cnVlXG4gIHByaXZhdGUgX3dyYXBwZWRLZXk/OiBzdHJpbmc7IFxuICBwdWJsaWMgZ2V0IHdyYXBwZWRLZXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCd3cmFwcGVkX2tleScpO1xuICB9XG4gIHB1YmxpYyBzZXQgd3JhcHBlZEtleSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fd3JhcHBlZEtleSA9IHZhbHVlO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCB3cmFwcGVkS2V5SW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dyYXBwZWRLZXk7XG4gIH1cbn1cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnQ3J5cHRvS2V5VHJhbnNpZW50IHtcbiAgLyoqXG4gICogTmFtZSBvZiB0aGUga2V5LiBUaGlzIGlzIGFuIGFyYml0cmFyeSBzdHJpbmcgdXNlZCB0byBkaWZmZXJlbnRpYXRlIGRpZmZlcmVudCBrZXlzLiBBIHVuaXF1ZSBrZXkgaXMgZ2VuZXJhdGVkIHBlciBuYW1lOiB0d28gc2VwYXJhdGUgJ1RyYW5zaWVudENyeXB0b0tleScgcHJvdG9zIHNoYXJlIHRoZSBzYW1lIGdlbmVyYXRlZCBrZXkgaWYgdGhlaXIgbmFtZXMgYXJlIHRoZSBzYW1lLiBXaGVuIHRoZSBkYXRhIGNyeXB0byBrZXkgaXMgZ2VuZXJhdGVkLCB0aGlzIG5hbWUgaXMgbm90IHVzZWQgaW4gYW55IHdheSAocmVwZWF0aW5nIHRoZSBhcGkgY2FsbCB3aWxsIHJlc3VsdCBpbiBhIGRpZmZlcmVudCBrZXkgYmVpbmcgZ2VuZXJhdGVkKS5cbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjbmFtZSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjbmFtZX1cbiAgKi9cbiAgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnQ3J5cHRvS2V5VHJhbnNpZW50VG9UZXJyYWZvcm0oc3RydWN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnQ3J5cHRvS2V5VHJhbnNpZW50T3V0cHV0UmVmZXJlbmNlIHwgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnQ3J5cHRvS2V5VHJhbnNpZW50KTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkgfHwgY2RrdGYuVG9rZW5pemF0aW9uLmlzUmVzb2x2YWJsZShzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgaWYgKGNka3RmLmlzQ29tcGxleEVsZW1lbnQoc3RydWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkEgY29tcGxleCBlbGVtZW50IHdhcyB1c2VkIGFzIGNvbmZpZ3VyYXRpb24sIHRoaXMgaXMgbm90IHN1cHBvcnRlZDogaHR0cHM6Ly9jZGsudGYvY29tcGxleC1vYmplY3QtYXMtY29uZmlndXJhdGlvblwiKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG5hbWU6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEubmFtZSksXG4gIH1cbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnQ3J5cHRvS2V5VHJhbnNpZW50VG9IY2xUZXJyYWZvcm0oc3RydWN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnQ3J5cHRvS2V5VHJhbnNpZW50T3V0cHV0UmVmZXJlbmNlIHwgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnQ3J5cHRvS2V5VHJhbnNpZW50KTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkgfHwgY2RrdGYuVG9rZW5pemF0aW9uLmlzUmVzb2x2YWJsZShzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgaWYgKGNka3RmLmlzQ29tcGxleEVsZW1lbnQoc3RydWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkEgY29tcGxleCBlbGVtZW50IHdhcyB1c2VkIGFzIGNvbmZpZ3VyYXRpb24sIHRoaXMgaXMgbm90IHN1cHBvcnRlZDogaHR0cHM6Ly9jZGsudGYvY29tcGxleC1vYmplY3QtYXMtY29uZmlndXJhdGlvblwiKTtcbiAgfVxuICBjb25zdCBhdHRycyA9IHtcbiAgICBuYW1lOiB7XG4gICAgICB2YWx1ZTogY2RrdGYuc3RyaW5nVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5uYW1lKSxcbiAgICAgIGlzQmxvY2s6IGZhbHNlLFxuICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwic3RyaW5nXCIsXG4gICAgfSxcbiAgfTtcblxuICAvLyByZW1vdmUgdW5kZWZpbmVkIGF0dHJpYnV0ZXNcbiAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhhdHRycykuZmlsdGVyKChbXywgdmFsdWVdKSA9PiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlLnZhbHVlICE9PSB1bmRlZmluZWQpKTtcbn1cblxuZXhwb3J0IGNsYXNzIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZ0NyeXB0b0tleVRyYW5zaWVudE91dHB1dFJlZmVyZW5jZSBleHRlbmRzIGNka3RmLkNvbXBsZXhPYmplY3Qge1xuICBwcml2YXRlIGlzRW1wdHlPYmplY3QgPSBmYWxzZTtcblxuICAvKipcbiAgKiBAcGFyYW0gdGVycmFmb3JtUmVzb3VyY2UgVGhlIHBhcmVudCByZXNvdXJjZVxuICAqIEBwYXJhbSB0ZXJyYWZvcm1BdHRyaWJ1dGUgVGhlIGF0dHJpYnV0ZSBvbiB0aGUgcGFyZW50IHJlc291cmNlIHRoaXMgY2xhc3MgaXMgcmVmZXJlbmNpbmdcbiAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHRlcnJhZm9ybVJlc291cmNlOiBjZGt0Zi5JSW50ZXJwb2xhdGluZ1BhcmVudCwgdGVycmFmb3JtQXR0cmlidXRlOiBzdHJpbmcpIHtcbiAgICBzdXBlcih0ZXJyYWZvcm1SZXNvdXJjZSwgdGVycmFmb3JtQXR0cmlidXRlLCBmYWxzZSwgMCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGludGVybmFsVmFsdWUoKTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnQ3J5cHRvS2V5VHJhbnNpZW50IHwgdW5kZWZpbmVkIHtcbiAgICBsZXQgaGFzQW55VmFsdWVzID0gdGhpcy5pc0VtcHR5T2JqZWN0O1xuICAgIGNvbnN0IGludGVybmFsVmFsdWVSZXN1bHQ6IGFueSA9IHt9O1xuICAgIGlmICh0aGlzLl9uYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0Lm5hbWUgPSB0aGlzLl9uYW1lO1xuICAgIH1cbiAgICByZXR1cm4gaGFzQW55VmFsdWVzID8gaW50ZXJuYWxWYWx1ZVJlc3VsdCA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgaW50ZXJuYWxWYWx1ZSh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnQ3J5cHRvS2V5VHJhbnNpZW50IHwgdW5kZWZpbmVkKSB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IGZhbHNlO1xuICAgICAgdGhpcy5fbmFtZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLmlzRW1wdHlPYmplY3QgPSBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoID09PSAwO1xuICAgICAgdGhpcy5fbmFtZSA9IHZhbHVlLm5hbWU7XG4gICAgfVxuICB9XG5cbiAgLy8gbmFtZSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IGZhbHNlLCByZXF1aXJlZDogdHJ1ZVxuICBwcml2YXRlIF9uYW1lPzogc3RyaW5nOyBcbiAgcHVibGljIGdldCBuYW1lKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgnbmFtZScpO1xuICB9XG4gIHB1YmxpYyBzZXQgbmFtZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fbmFtZSA9IHZhbHVlO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBuYW1lSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX25hbWU7XG4gIH1cbn1cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnQ3J5cHRvS2V5VW53cmFwcGVkIHtcbiAgLyoqXG4gICogQSAxMjgvMTkyLzI1NiBiaXQga2V5LlxuICAqIFxuICAqIEEgYmFzZTY0LWVuY29kZWQgc3RyaW5nLlxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNrZXkgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI2tleX1cbiAgKi9cbiAgcmVhZG9ubHkga2V5OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b1JlcGxhY2VGZnhGcGVDb25maWdDcnlwdG9LZXlVbndyYXBwZWRUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b1JlcGxhY2VGZnhGcGVDb25maWdDcnlwdG9LZXlVbndyYXBwZWRPdXRwdXRSZWZlcmVuY2UgfCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b1JlcGxhY2VGZnhGcGVDb25maWdDcnlwdG9LZXlVbndyYXBwZWQpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIHJldHVybiB7XG4gICAga2V5OiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLmtleSksXG4gIH1cbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnQ3J5cHRvS2V5VW53cmFwcGVkVG9IY2xUZXJyYWZvcm0oc3RydWN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnQ3J5cHRvS2V5VW53cmFwcGVkT3V0cHV0UmVmZXJlbmNlIHwgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnQ3J5cHRvS2V5VW53cmFwcGVkKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkgfHwgY2RrdGYuVG9rZW5pemF0aW9uLmlzUmVzb2x2YWJsZShzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgaWYgKGNka3RmLmlzQ29tcGxleEVsZW1lbnQoc3RydWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkEgY29tcGxleCBlbGVtZW50IHdhcyB1c2VkIGFzIGNvbmZpZ3VyYXRpb24sIHRoaXMgaXMgbm90IHN1cHBvcnRlZDogaHR0cHM6Ly9jZGsudGYvY29tcGxleC1vYmplY3QtYXMtY29uZmlndXJhdGlvblwiKTtcbiAgfVxuICBjb25zdCBhdHRycyA9IHtcbiAgICBrZXk6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5zdHJpbmdUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLmtleSksXG4gICAgICBpc0Jsb2NrOiBmYWxzZSxcbiAgICAgIHR5cGU6IFwic2ltcGxlXCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcInN0cmluZ1wiLFxuICAgIH0sXG4gIH07XG5cbiAgLy8gcmVtb3ZlIHVuZGVmaW5lZCBhdHRyaWJ1dGVzXG4gIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMoYXR0cnMpLmZpbHRlcigoW18sIHZhbHVlXSkgPT4gdmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZS52YWx1ZSAhPT0gdW5kZWZpbmVkKSk7XG59XG5cbmV4cG9ydCBjbGFzcyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b1JlcGxhY2VGZnhGcGVDb25maWdDcnlwdG9LZXlVbndyYXBwZWRPdXRwdXRSZWZlcmVuY2UgZXh0ZW5kcyBjZGt0Zi5Db21wbGV4T2JqZWN0IHtcbiAgcHJpdmF0ZSBpc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG5cbiAgLyoqXG4gICogQHBhcmFtIHRlcnJhZm9ybVJlc291cmNlIFRoZSBwYXJlbnQgcmVzb3VyY2VcbiAgKiBAcGFyYW0gdGVycmFmb3JtQXR0cmlidXRlIFRoZSBhdHRyaWJ1dGUgb24gdGhlIHBhcmVudCByZXNvdXJjZSB0aGlzIGNsYXNzIGlzIHJlZmVyZW5jaW5nXG4gICovXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcih0ZXJyYWZvcm1SZXNvdXJjZTogY2RrdGYuSUludGVycG9sYXRpbmdQYXJlbnQsIHRlcnJhZm9ybUF0dHJpYnV0ZTogc3RyaW5nKSB7XG4gICAgc3VwZXIodGVycmFmb3JtUmVzb3VyY2UsIHRlcnJhZm9ybUF0dHJpYnV0ZSwgZmFsc2UsIDApO1xuICB9XG5cbiAgcHVibGljIGdldCBpbnRlcm5hbFZhbHVlKCk6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZ0NyeXB0b0tleVVud3JhcHBlZCB8IHVuZGVmaW5lZCB7XG4gICAgbGV0IGhhc0FueVZhbHVlcyA9IHRoaXMuaXNFbXB0eU9iamVjdDtcbiAgICBjb25zdCBpbnRlcm5hbFZhbHVlUmVzdWx0OiBhbnkgPSB7fTtcbiAgICBpZiAodGhpcy5fa2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LmtleSA9IHRoaXMuX2tleTtcbiAgICB9XG4gICAgcmV0dXJuIGhhc0FueVZhbHVlcyA/IGludGVybmFsVmFsdWVSZXN1bHQgOiB1bmRlZmluZWQ7XG4gIH1cblxuICBwdWJsaWMgc2V0IGludGVybmFsVmFsdWUodmFsdWU6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZ0NyeXB0b0tleVVud3JhcHBlZCB8IHVuZGVmaW5lZCkge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmlzRW1wdHlPYmplY3QgPSBmYWxzZTtcbiAgICAgIHRoaXMuX2tleSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLmlzRW1wdHlPYmplY3QgPSBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoID09PSAwO1xuICAgICAgdGhpcy5fa2V5ID0gdmFsdWUua2V5O1xuICAgIH1cbiAgfVxuXG4gIC8vIGtleSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IGZhbHNlLCByZXF1aXJlZDogdHJ1ZVxuICBwcml2YXRlIF9rZXk/OiBzdHJpbmc7IFxuICBwdWJsaWMgZ2V0IGtleSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ2tleScpO1xuICB9XG4gIHB1YmxpYyBzZXQga2V5KHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9rZXkgPSB2YWx1ZTtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQga2V5SW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2tleTtcbiAgfVxufVxuZXhwb3J0IGludGVyZmFjZSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b1JlcGxhY2VGZnhGcGVDb25maWdDcnlwdG9LZXkge1xuICAvKipcbiAgKiBrbXNfd3JhcHBlZCBibG9ja1xuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNrbXNfd3JhcHBlZCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUja21zX3dyYXBwZWR9XG4gICovXG4gIHJlYWRvbmx5IGttc1dyYXBwZWQ/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b1JlcGxhY2VGZnhGcGVDb25maWdDcnlwdG9LZXlLbXNXcmFwcGVkO1xuICAvKipcbiAgKiB0cmFuc2llbnQgYmxvY2tcbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjdHJhbnNpZW50IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSN0cmFuc2llbnR9XG4gICovXG4gIHJlYWRvbmx5IHRyYW5zaWVudD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZ0NyeXB0b0tleVRyYW5zaWVudDtcbiAgLyoqXG4gICogdW53cmFwcGVkIGJsb2NrXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI3Vud3JhcHBlZCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjdW53cmFwcGVkfVxuICAqL1xuICByZWFkb25seSB1bndyYXBwZWQ/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b1JlcGxhY2VGZnhGcGVDb25maWdDcnlwdG9LZXlVbndyYXBwZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b1JlcGxhY2VGZnhGcGVDb25maWdDcnlwdG9LZXlUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b1JlcGxhY2VGZnhGcGVDb25maWdDcnlwdG9LZXlPdXRwdXRSZWZlcmVuY2UgfCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b1JlcGxhY2VGZnhGcGVDb25maWdDcnlwdG9LZXkpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIHJldHVybiB7XG4gICAga21zX3dyYXBwZWQ6IGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZ0NyeXB0b0tleUttc1dyYXBwZWRUb1RlcnJhZm9ybShzdHJ1Y3QhLmttc1dyYXBwZWQpLFxuICAgIHRyYW5zaWVudDogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnQ3J5cHRvS2V5VHJhbnNpZW50VG9UZXJyYWZvcm0oc3RydWN0IS50cmFuc2llbnQpLFxuICAgIHVud3JhcHBlZDogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnQ3J5cHRvS2V5VW53cmFwcGVkVG9UZXJyYWZvcm0oc3RydWN0IS51bndyYXBwZWQpLFxuICB9XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZ0NyeXB0b0tleVRvSGNsVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZ0NyeXB0b0tleU91dHB1dFJlZmVyZW5jZSB8IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZ0NyeXB0b0tleSk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpIHx8IGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIGlmIChjZGt0Zi5pc0NvbXBsZXhFbGVtZW50KHN0cnVjdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGNvbXBsZXggZWxlbWVudCB3YXMgdXNlZCBhcyBjb25maWd1cmF0aW9uLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQ6IGh0dHBzOi8vY2RrLnRmL2NvbXBsZXgtb2JqZWN0LWFzLWNvbmZpZ3VyYXRpb25cIik7XG4gIH1cbiAgY29uc3QgYXR0cnMgPSB7XG4gICAga21zX3dyYXBwZWQ6IHtcbiAgICAgIHZhbHVlOiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b1JlcGxhY2VGZnhGcGVDb25maWdDcnlwdG9LZXlLbXNXcmFwcGVkVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5rbXNXcmFwcGVkKSxcbiAgICAgIGlzQmxvY2s6IHRydWUsXG4gICAgICB0eXBlOiBcImxpc3RcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwiRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnQ3J5cHRvS2V5S21zV3JhcHBlZExpc3RcIixcbiAgICB9LFxuICAgIHRyYW5zaWVudDoge1xuICAgICAgdmFsdWU6IGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZ0NyeXB0b0tleVRyYW5zaWVudFRvSGNsVGVycmFmb3JtKHN0cnVjdCEudHJhbnNpZW50KSxcbiAgICAgIGlzQmxvY2s6IHRydWUsXG4gICAgICB0eXBlOiBcImxpc3RcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwiRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnQ3J5cHRvS2V5VHJhbnNpZW50TGlzdFwiLFxuICAgIH0sXG4gICAgdW53cmFwcGVkOiB7XG4gICAgICB2YWx1ZTogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnQ3J5cHRvS2V5VW53cmFwcGVkVG9IY2xUZXJyYWZvcm0oc3RydWN0IS51bndyYXBwZWQpLFxuICAgICAgaXNCbG9jazogdHJ1ZSxcbiAgICAgIHR5cGU6IFwibGlzdFwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b1JlcGxhY2VGZnhGcGVDb25maWdDcnlwdG9LZXlVbndyYXBwZWRMaXN0XCIsXG4gICAgfSxcbiAgfTtcblxuICAvLyByZW1vdmUgdW5kZWZpbmVkIGF0dHJpYnV0ZXNcbiAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhhdHRycykuZmlsdGVyKChbXywgdmFsdWVdKSA9PiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlLnZhbHVlICE9PSB1bmRlZmluZWQpKTtcbn1cblxuZXhwb3J0IGNsYXNzIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZ0NyeXB0b0tleU91dHB1dFJlZmVyZW5jZSBleHRlbmRzIGNka3RmLkNvbXBsZXhPYmplY3Qge1xuICBwcml2YXRlIGlzRW1wdHlPYmplY3QgPSBmYWxzZTtcblxuICAvKipcbiAgKiBAcGFyYW0gdGVycmFmb3JtUmVzb3VyY2UgVGhlIHBhcmVudCByZXNvdXJjZVxuICAqIEBwYXJhbSB0ZXJyYWZvcm1BdHRyaWJ1dGUgVGhlIGF0dHJpYnV0ZSBvbiB0aGUgcGFyZW50IHJlc291cmNlIHRoaXMgY2xhc3MgaXMgcmVmZXJlbmNpbmdcbiAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHRlcnJhZm9ybVJlc291cmNlOiBjZGt0Zi5JSW50ZXJwb2xhdGluZ1BhcmVudCwgdGVycmFmb3JtQXR0cmlidXRlOiBzdHJpbmcpIHtcbiAgICBzdXBlcih0ZXJyYWZvcm1SZXNvdXJjZSwgdGVycmFmb3JtQXR0cmlidXRlLCBmYWxzZSwgMCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGludGVybmFsVmFsdWUoKTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnQ3J5cHRvS2V5IHwgdW5kZWZpbmVkIHtcbiAgICBsZXQgaGFzQW55VmFsdWVzID0gdGhpcy5pc0VtcHR5T2JqZWN0O1xuICAgIGNvbnN0IGludGVybmFsVmFsdWVSZXN1bHQ6IGFueSA9IHt9O1xuICAgIGlmICh0aGlzLl9rbXNXcmFwcGVkPy5pbnRlcm5hbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0Lmttc1dyYXBwZWQgPSB0aGlzLl9rbXNXcmFwcGVkPy5pbnRlcm5hbFZhbHVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5fdHJhbnNpZW50Py5pbnRlcm5hbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LnRyYW5zaWVudCA9IHRoaXMuX3RyYW5zaWVudD8uaW50ZXJuYWxWYWx1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3Vud3JhcHBlZD8uaW50ZXJuYWxWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC51bndyYXBwZWQgPSB0aGlzLl91bndyYXBwZWQ/LmludGVybmFsVmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBoYXNBbnlWYWx1ZXMgPyBpbnRlcm5hbFZhbHVlUmVzdWx0IDogdW5kZWZpbmVkO1xuICB9XG5cbiAgcHVibGljIHNldCBpbnRlcm5hbFZhbHVlKHZhbHVlOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b1JlcGxhY2VGZnhGcGVDb25maWdDcnlwdG9LZXkgfCB1bmRlZmluZWQpIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5pc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG4gICAgICB0aGlzLl9rbXNXcmFwcGVkLmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl90cmFuc2llbnQuaW50ZXJuYWxWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX3Vud3JhcHBlZC5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggPT09IDA7XG4gICAgICB0aGlzLl9rbXNXcmFwcGVkLmludGVybmFsVmFsdWUgPSB2YWx1ZS5rbXNXcmFwcGVkO1xuICAgICAgdGhpcy5fdHJhbnNpZW50LmludGVybmFsVmFsdWUgPSB2YWx1ZS50cmFuc2llbnQ7XG4gICAgICB0aGlzLl91bndyYXBwZWQuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlLnVud3JhcHBlZDtcbiAgICB9XG4gIH1cblxuICAvLyBrbXNfd3JhcHBlZCAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9rbXNXcmFwcGVkID0gbmV3IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZ0NyeXB0b0tleUttc1dyYXBwZWRPdXRwdXRSZWZlcmVuY2UodGhpcywgXCJrbXNfd3JhcHBlZFwiKTtcbiAgcHVibGljIGdldCBrbXNXcmFwcGVkKCkge1xuICAgIHJldHVybiB0aGlzLl9rbXNXcmFwcGVkO1xuICB9XG4gIHB1YmxpYyBwdXRLbXNXcmFwcGVkKHZhbHVlOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b1JlcGxhY2VGZnhGcGVDb25maWdDcnlwdG9LZXlLbXNXcmFwcGVkKSB7XG4gICAgdGhpcy5fa21zV3JhcHBlZC5pbnRlcm5hbFZhbHVlID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0S21zV3JhcHBlZCgpIHtcbiAgICB0aGlzLl9rbXNXcmFwcGVkLmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IGttc1dyYXBwZWRJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fa21zV3JhcHBlZC5pbnRlcm5hbFZhbHVlO1xuICB9XG5cbiAgLy8gdHJhbnNpZW50IC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX3RyYW5zaWVudCA9IG5ldyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b1JlcGxhY2VGZnhGcGVDb25maWdDcnlwdG9LZXlUcmFuc2llbnRPdXRwdXRSZWZlcmVuY2UodGhpcywgXCJ0cmFuc2llbnRcIik7XG4gIHB1YmxpYyBnZXQgdHJhbnNpZW50KCkge1xuICAgIHJldHVybiB0aGlzLl90cmFuc2llbnQ7XG4gIH1cbiAgcHVibGljIHB1dFRyYW5zaWVudCh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnQ3J5cHRvS2V5VHJhbnNpZW50KSB7XG4gICAgdGhpcy5fdHJhbnNpZW50LmludGVybmFsVmFsdWUgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRUcmFuc2llbnQoKSB7XG4gICAgdGhpcy5fdHJhbnNpZW50LmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IHRyYW5zaWVudElucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl90cmFuc2llbnQuaW50ZXJuYWxWYWx1ZTtcbiAgfVxuXG4gIC8vIHVud3JhcHBlZCAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF91bndyYXBwZWQgPSBuZXcgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnQ3J5cHRvS2V5VW53cmFwcGVkT3V0cHV0UmVmZXJlbmNlKHRoaXMsIFwidW53cmFwcGVkXCIpO1xuICBwdWJsaWMgZ2V0IHVud3JhcHBlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5fdW53cmFwcGVkO1xuICB9XG4gIHB1YmxpYyBwdXRVbndyYXBwZWQodmFsdWU6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZ0NyeXB0b0tleVVud3JhcHBlZCkge1xuICAgIHRoaXMuX3Vud3JhcHBlZC5pbnRlcm5hbFZhbHVlID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0VW53cmFwcGVkKCkge1xuICAgIHRoaXMuX3Vud3JhcHBlZC5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCB1bndyYXBwZWRJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fdW53cmFwcGVkLmludGVybmFsVmFsdWU7XG4gIH1cbn1cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnU3Vycm9nYXRlSW5mb1R5cGVTZW5zaXRpdml0eVNjb3JlIHtcbiAgLyoqXG4gICogVGhlIHNlbnNpdGl2aXR5IHNjb3JlIGFwcGxpZWQgdG8gdGhlIHJlc291cmNlLiBQb3NzaWJsZSB2YWx1ZXM6IFtcIlNFTlNJVElWSVRZX0xPV1wiLCBcIlNFTlNJVElWSVRZX01PREVSQVRFXCIsIFwiU0VOU0lUSVZJVFlfSElHSFwiXVxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNzY29yZSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjc2NvcmV9XG4gICovXG4gIHJlYWRvbmx5IHNjb3JlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b1JlcGxhY2VGZnhGcGVDb25maWdTdXJyb2dhdGVJbmZvVHlwZVNlbnNpdGl2aXR5U2NvcmVUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b1JlcGxhY2VGZnhGcGVDb25maWdTdXJyb2dhdGVJbmZvVHlwZVNlbnNpdGl2aXR5U2NvcmVPdXRwdXRSZWZlcmVuY2UgfCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b1JlcGxhY2VGZnhGcGVDb25maWdTdXJyb2dhdGVJbmZvVHlwZVNlbnNpdGl2aXR5U2NvcmUpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIHJldHVybiB7XG4gICAgc2NvcmU6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuc2NvcmUpLFxuICB9XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZ1N1cnJvZ2F0ZUluZm9UeXBlU2Vuc2l0aXZpdHlTY29yZVRvSGNsVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZ1N1cnJvZ2F0ZUluZm9UeXBlU2Vuc2l0aXZpdHlTY29yZU91dHB1dFJlZmVyZW5jZSB8IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZ1N1cnJvZ2F0ZUluZm9UeXBlU2Vuc2l0aXZpdHlTY29yZSk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpIHx8IGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIGlmIChjZGt0Zi5pc0NvbXBsZXhFbGVtZW50KHN0cnVjdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGNvbXBsZXggZWxlbWVudCB3YXMgdXNlZCBhcyBjb25maWd1cmF0aW9uLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQ6IGh0dHBzOi8vY2RrLnRmL2NvbXBsZXgtb2JqZWN0LWFzLWNvbmZpZ3VyYXRpb25cIik7XG4gIH1cbiAgY29uc3QgYXR0cnMgPSB7XG4gICAgc2NvcmU6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5zdHJpbmdUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLnNjb3JlKSxcbiAgICAgIGlzQmxvY2s6IGZhbHNlLFxuICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwic3RyaW5nXCIsXG4gICAgfSxcbiAgfTtcblxuICAvLyByZW1vdmUgdW5kZWZpbmVkIGF0dHJpYnV0ZXNcbiAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhhdHRycykuZmlsdGVyKChbXywgdmFsdWVdKSA9PiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlLnZhbHVlICE9PSB1bmRlZmluZWQpKTtcbn1cblxuZXhwb3J0IGNsYXNzIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZ1N1cnJvZ2F0ZUluZm9UeXBlU2Vuc2l0aXZpdHlTY29yZU91dHB1dFJlZmVyZW5jZSBleHRlbmRzIGNka3RmLkNvbXBsZXhPYmplY3Qge1xuICBwcml2YXRlIGlzRW1wdHlPYmplY3QgPSBmYWxzZTtcblxuICAvKipcbiAgKiBAcGFyYW0gdGVycmFmb3JtUmVzb3VyY2UgVGhlIHBhcmVudCByZXNvdXJjZVxuICAqIEBwYXJhbSB0ZXJyYWZvcm1BdHRyaWJ1dGUgVGhlIGF0dHJpYnV0ZSBvbiB0aGUgcGFyZW50IHJlc291cmNlIHRoaXMgY2xhc3MgaXMgcmVmZXJlbmNpbmdcbiAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHRlcnJhZm9ybVJlc291cmNlOiBjZGt0Zi5JSW50ZXJwb2xhdGluZ1BhcmVudCwgdGVycmFmb3JtQXR0cmlidXRlOiBzdHJpbmcpIHtcbiAgICBzdXBlcih0ZXJyYWZvcm1SZXNvdXJjZSwgdGVycmFmb3JtQXR0cmlidXRlLCBmYWxzZSwgMCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGludGVybmFsVmFsdWUoKTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnU3Vycm9nYXRlSW5mb1R5cGVTZW5zaXRpdml0eVNjb3JlIHwgdW5kZWZpbmVkIHtcbiAgICBsZXQgaGFzQW55VmFsdWVzID0gdGhpcy5pc0VtcHR5T2JqZWN0O1xuICAgIGNvbnN0IGludGVybmFsVmFsdWVSZXN1bHQ6IGFueSA9IHt9O1xuICAgIGlmICh0aGlzLl9zY29yZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC5zY29yZSA9IHRoaXMuX3Njb3JlO1xuICAgIH1cbiAgICByZXR1cm4gaGFzQW55VmFsdWVzID8gaW50ZXJuYWxWYWx1ZVJlc3VsdCA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgaW50ZXJuYWxWYWx1ZSh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnU3Vycm9nYXRlSW5mb1R5cGVTZW5zaXRpdml0eVNjb3JlIHwgdW5kZWZpbmVkKSB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IGZhbHNlO1xuICAgICAgdGhpcy5fc2NvcmUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5pc0VtcHR5T2JqZWN0ID0gT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aCA9PT0gMDtcbiAgICAgIHRoaXMuX3Njb3JlID0gdmFsdWUuc2NvcmU7XG4gICAgfVxuICB9XG5cbiAgLy8gc2NvcmUgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiBmYWxzZSwgcmVxdWlyZWQ6IHRydWVcbiAgcHJpdmF0ZSBfc2NvcmU/OiBzdHJpbmc7IFxuICBwdWJsaWMgZ2V0IHNjb3JlKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgnc2NvcmUnKTtcbiAgfVxuICBwdWJsaWMgc2V0IHNjb3JlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9zY29yZSA9IHZhbHVlO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBzY29yZUlucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9zY29yZTtcbiAgfVxufVxuZXhwb3J0IGludGVyZmFjZSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b1JlcGxhY2VGZnhGcGVDb25maWdTdXJyb2dhdGVJbmZvVHlwZSB7XG4gIC8qKlxuICAqIE5hbWUgb2YgdGhlIGluZm9ybWF0aW9uIHR5cGUuIEVpdGhlciBhIG5hbWUgb2YgeW91ciBjaG9vc2luZyB3aGVuIGNyZWF0aW5nIGEgQ3VzdG9tSW5mb1R5cGUsIG9yIG9uZSBvZiB0aGUgbmFtZXMgbGlzdGVkIGF0IFtodHRwczovL2Nsb3VkLmdvb2dsZS5jb20vZGxwL2RvY3MvaW5mb3R5cGVzLXJlZmVyZW5jZV0oaHR0cHM6Ly9jbG91ZC5nb29nbGUuY29tL2RscC9kb2NzL2luZm90eXBlcy1yZWZlcmVuY2UpIHdoZW4gc3BlY2lmeWluZyBhIGJ1aWx0LWluIHR5cGUuIFdoZW4gc2VuZGluZyBDbG91ZCBETFAgcmVzdWx0cyB0byBEYXRhIENhdGFsb2csIGluZm9UeXBlIG5hbWVzIHNob3VsZCBjb25mb3JtIHRvIHRoZSBwYXR0ZXJuICdbQS1aYS16MC05JC1fXXsxLDY0fScuXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI25hbWUgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI25hbWV9XG4gICovXG4gIHJlYWRvbmx5IG5hbWU/OiBzdHJpbmc7XG4gIC8qKlxuICAqIE9wdGlvbmFsIHZlcnNpb24gbmFtZSBmb3IgdGhpcyBJbmZvVHlwZS5cbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjdmVyc2lvbiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjdmVyc2lvbn1cbiAgKi9cbiAgcmVhZG9ubHkgdmVyc2lvbj86IHN0cmluZztcbiAgLyoqXG4gICogc2Vuc2l0aXZpdHlfc2NvcmUgYmxvY2tcbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjc2Vuc2l0aXZpdHlfc2NvcmUgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI3NlbnNpdGl2aXR5X3Njb3JlfVxuICAqL1xuICByZWFkb25seSBzZW5zaXRpdml0eVNjb3JlPzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnU3Vycm9nYXRlSW5mb1R5cGVTZW5zaXRpdml0eVNjb3JlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnU3Vycm9nYXRlSW5mb1R5cGVUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b1JlcGxhY2VGZnhGcGVDb25maWdTdXJyb2dhdGVJbmZvVHlwZU91dHB1dFJlZmVyZW5jZSB8IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZ1N1cnJvZ2F0ZUluZm9UeXBlKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkgfHwgY2RrdGYuVG9rZW5pemF0aW9uLmlzUmVzb2x2YWJsZShzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgaWYgKGNka3RmLmlzQ29tcGxleEVsZW1lbnQoc3RydWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkEgY29tcGxleCBlbGVtZW50IHdhcyB1c2VkIGFzIGNvbmZpZ3VyYXRpb24sIHRoaXMgaXMgbm90IHN1cHBvcnRlZDogaHR0cHM6Ly9jZGsudGYvY29tcGxleC1vYmplY3QtYXMtY29uZmlndXJhdGlvblwiKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG5hbWU6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEubmFtZSksXG4gICAgdmVyc2lvbjogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS52ZXJzaW9uKSxcbiAgICBzZW5zaXRpdml0eV9zY29yZTogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnU3Vycm9nYXRlSW5mb1R5cGVTZW5zaXRpdml0eVNjb3JlVG9UZXJyYWZvcm0oc3RydWN0IS5zZW5zaXRpdml0eVNjb3JlKSxcbiAgfVxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b1JlcGxhY2VGZnhGcGVDb25maWdTdXJyb2dhdGVJbmZvVHlwZVRvSGNsVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZ1N1cnJvZ2F0ZUluZm9UeXBlT3V0cHV0UmVmZXJlbmNlIHwgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnU3Vycm9nYXRlSW5mb1R5cGUpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIGNvbnN0IGF0dHJzID0ge1xuICAgIG5hbWU6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5zdHJpbmdUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLm5hbWUpLFxuICAgICAgaXNCbG9jazogZmFsc2UsXG4gICAgICB0eXBlOiBcInNpbXBsZVwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJzdHJpbmdcIixcbiAgICB9LFxuICAgIHZlcnNpb246IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5zdHJpbmdUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLnZlcnNpb24pLFxuICAgICAgaXNCbG9jazogZmFsc2UsXG4gICAgICB0eXBlOiBcInNpbXBsZVwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJzdHJpbmdcIixcbiAgICB9LFxuICAgIHNlbnNpdGl2aXR5X3Njb3JlOiB7XG4gICAgICB2YWx1ZTogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnU3Vycm9nYXRlSW5mb1R5cGVTZW5zaXRpdml0eVNjb3JlVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5zZW5zaXRpdml0eVNjb3JlKSxcbiAgICAgIGlzQmxvY2s6IHRydWUsXG4gICAgICB0eXBlOiBcImxpc3RcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwiRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnU3Vycm9nYXRlSW5mb1R5cGVTZW5zaXRpdml0eVNjb3JlTGlzdFwiLFxuICAgIH0sXG4gIH07XG5cbiAgLy8gcmVtb3ZlIHVuZGVmaW5lZCBhdHRyaWJ1dGVzXG4gIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMoYXR0cnMpLmZpbHRlcigoW18sIHZhbHVlXSkgPT4gdmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZS52YWx1ZSAhPT0gdW5kZWZpbmVkKSk7XG59XG5cbmV4cG9ydCBjbGFzcyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b1JlcGxhY2VGZnhGcGVDb25maWdTdXJyb2dhdGVJbmZvVHlwZU91dHB1dFJlZmVyZW5jZSBleHRlbmRzIGNka3RmLkNvbXBsZXhPYmplY3Qge1xuICBwcml2YXRlIGlzRW1wdHlPYmplY3QgPSBmYWxzZTtcblxuICAvKipcbiAgKiBAcGFyYW0gdGVycmFmb3JtUmVzb3VyY2UgVGhlIHBhcmVudCByZXNvdXJjZVxuICAqIEBwYXJhbSB0ZXJyYWZvcm1BdHRyaWJ1dGUgVGhlIGF0dHJpYnV0ZSBvbiB0aGUgcGFyZW50IHJlc291cmNlIHRoaXMgY2xhc3MgaXMgcmVmZXJlbmNpbmdcbiAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHRlcnJhZm9ybVJlc291cmNlOiBjZGt0Zi5JSW50ZXJwb2xhdGluZ1BhcmVudCwgdGVycmFmb3JtQXR0cmlidXRlOiBzdHJpbmcpIHtcbiAgICBzdXBlcih0ZXJyYWZvcm1SZXNvdXJjZSwgdGVycmFmb3JtQXR0cmlidXRlLCBmYWxzZSwgMCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGludGVybmFsVmFsdWUoKTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnU3Vycm9nYXRlSW5mb1R5cGUgfCB1bmRlZmluZWQge1xuICAgIGxldCBoYXNBbnlWYWx1ZXMgPSB0aGlzLmlzRW1wdHlPYmplY3Q7XG4gICAgY29uc3QgaW50ZXJuYWxWYWx1ZVJlc3VsdDogYW55ID0ge307XG4gICAgaWYgKHRoaXMuX25hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQubmFtZSA9IHRoaXMuX25hbWU7XG4gICAgfVxuICAgIGlmICh0aGlzLl92ZXJzaW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LnZlcnNpb24gPSB0aGlzLl92ZXJzaW9uO1xuICAgIH1cbiAgICBpZiAodGhpcy5fc2Vuc2l0aXZpdHlTY29yZT8uaW50ZXJuYWxWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC5zZW5zaXRpdml0eVNjb3JlID0gdGhpcy5fc2Vuc2l0aXZpdHlTY29yZT8uaW50ZXJuYWxWYWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGhhc0FueVZhbHVlcyA/IGludGVybmFsVmFsdWVSZXN1bHQgOiB1bmRlZmluZWQ7XG4gIH1cblxuICBwdWJsaWMgc2V0IGludGVybmFsVmFsdWUodmFsdWU6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZ1N1cnJvZ2F0ZUluZm9UeXBlIHwgdW5kZWZpbmVkKSB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IGZhbHNlO1xuICAgICAgdGhpcy5fbmFtZSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX3ZlcnNpb24gPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9zZW5zaXRpdml0eVNjb3JlLmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5pc0VtcHR5T2JqZWN0ID0gT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aCA9PT0gMDtcbiAgICAgIHRoaXMuX25hbWUgPSB2YWx1ZS5uYW1lO1xuICAgICAgdGhpcy5fdmVyc2lvbiA9IHZhbHVlLnZlcnNpb247XG4gICAgICB0aGlzLl9zZW5zaXRpdml0eVNjb3JlLmludGVybmFsVmFsdWUgPSB2YWx1ZS5zZW5zaXRpdml0eVNjb3JlO1xuICAgIH1cbiAgfVxuXG4gIC8vIG5hbWUgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfbmFtZT86IHN0cmluZzsgXG4gIHB1YmxpYyBnZXQgbmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ25hbWUnKTtcbiAgfVxuICBwdWJsaWMgc2V0IG5hbWUodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX25hbWUgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXROYW1lKCkge1xuICAgIHRoaXMuX25hbWUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IG5hbWVJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fbmFtZTtcbiAgfVxuXG4gIC8vIHZlcnNpb24gLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfdmVyc2lvbj86IHN0cmluZzsgXG4gIHB1YmxpYyBnZXQgdmVyc2lvbigpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ3ZlcnNpb24nKTtcbiAgfVxuICBwdWJsaWMgc2V0IHZlcnNpb24odmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX3ZlcnNpb24gPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRWZXJzaW9uKCkge1xuICAgIHRoaXMuX3ZlcnNpb24gPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IHZlcnNpb25JbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmVyc2lvbjtcbiAgfVxuXG4gIC8vIHNlbnNpdGl2aXR5X3Njb3JlIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX3NlbnNpdGl2aXR5U2NvcmUgPSBuZXcgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnU3Vycm9nYXRlSW5mb1R5cGVTZW5zaXRpdml0eVNjb3JlT3V0cHV0UmVmZXJlbmNlKHRoaXMsIFwic2Vuc2l0aXZpdHlfc2NvcmVcIik7XG4gIHB1YmxpYyBnZXQgc2Vuc2l0aXZpdHlTY29yZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2Vuc2l0aXZpdHlTY29yZTtcbiAgfVxuICBwdWJsaWMgcHV0U2Vuc2l0aXZpdHlTY29yZSh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnU3Vycm9nYXRlSW5mb1R5cGVTZW5zaXRpdml0eVNjb3JlKSB7XG4gICAgdGhpcy5fc2Vuc2l0aXZpdHlTY29yZS5pbnRlcm5hbFZhbHVlID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0U2Vuc2l0aXZpdHlTY29yZSgpIHtcbiAgICB0aGlzLl9zZW5zaXRpdml0eVNjb3JlLmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IHNlbnNpdGl2aXR5U2NvcmVJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2Vuc2l0aXZpdHlTY29yZS5pbnRlcm5hbFZhbHVlO1xuICB9XG59XG5leHBvcnQgaW50ZXJmYWNlIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZyB7XG4gIC8qKlxuICAqIENvbW1vbiBhbHBoYWJldHMuIFBvc3NpYmxlIHZhbHVlczogW1wiRkZYX0NPTU1PTl9OQVRJVkVfQUxQSEFCRVRfVU5TUEVDSUZJRURcIiwgXCJOVU1FUklDXCIsIFwiSEVYQURFQ0lNQUxcIiwgXCJVUFBFUl9DQVNFX0FMUEhBX05VTUVSSUNcIiwgXCJBTFBIQV9OVU1FUklDXCJdXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI2NvbW1vbl9hbHBoYWJldCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjY29tbW9uX2FscGhhYmV0fVxuICAqL1xuICByZWFkb25seSBjb21tb25BbHBoYWJldD86IHN0cmluZztcbiAgLyoqXG4gICogVGhpcyBpcyBzdXBwb3J0ZWQgYnkgbWFwcGluZyB0aGVzZSB0byB0aGUgYWxwaGFudW1lcmljIGNoYXJhY3RlcnMgdGhhdCB0aGUgRkZYIG1vZGUgbmF0aXZlbHkgc3VwcG9ydHMuIFRoaXMgaGFwcGVucyBiZWZvcmUvYWZ0ZXIgZW5jcnlwdGlvbi9kZWNyeXB0aW9uLiBFYWNoIGNoYXJhY3RlciBsaXN0ZWQgbXVzdCBhcHBlYXIgb25seSBvbmNlLiBOdW1iZXIgb2YgY2hhcmFjdGVycyBtdXN0IGJlIGluIHRoZSByYW5nZSBcXFsyLCA5NVxcXS4gVGhpcyBtdXN0IGJlIGVuY29kZWQgYXMgQVNDSUkuIFRoZSBvcmRlciBvZiBjaGFyYWN0ZXJzIGRvZXMgbm90IG1hdHRlci4gVGhlIGZ1bGwgbGlzdCBvZiBhbGxvd2VkIGNoYXJhY3RlcnMgaXM6XG4gICogXG4gICogJycwMTIzNDU2Nzg5QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eiB+JyFAIyQlXiYqKClfLSs9e1t9XXw6O1wiJzwsPi4/LycnXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI2N1c3RvbV9hbHBoYWJldCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjY3VzdG9tX2FscGhhYmV0fVxuICAqL1xuICByZWFkb25seSBjdXN0b21BbHBoYWJldD86IHN0cmluZztcbiAgLyoqXG4gICogVGhlIG5hdGl2ZSB3YXkgdG8gc2VsZWN0IHRoZSBhbHBoYWJldC4gTXVzdCBiZSBpbiB0aGUgcmFuZ2UgXFxbMiwgOTVcXF0uXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI3JhZGl4IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSNyYWRpeH1cbiAgKi9cbiAgcmVhZG9ubHkgcmFkaXg/OiBudW1iZXI7XG4gIC8qKlxuICAqIGNvbnRleHQgYmxvY2tcbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjY29udGV4dCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjY29udGV4dH1cbiAgKi9cbiAgcmVhZG9ubHkgY29udGV4dD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZ0NvbnRleHQ7XG4gIC8qKlxuICAqIGNyeXB0b19rZXkgYmxvY2tcbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjY3J5cHRvX2tleSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjY3J5cHRvX2tleX1cbiAgKi9cbiAgcmVhZG9ubHkgY3J5cHRvS2V5PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnQ3J5cHRvS2V5O1xuICAvKipcbiAgKiBzdXJyb2dhdGVfaW5mb190eXBlIGJsb2NrXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI3N1cnJvZ2F0ZV9pbmZvX3R5cGUgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI3N1cnJvZ2F0ZV9pbmZvX3R5cGV9XG4gICovXG4gIHJlYWRvbmx5IHN1cnJvZ2F0ZUluZm9UeXBlPzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnU3Vycm9nYXRlSW5mb1R5cGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b1JlcGxhY2VGZnhGcGVDb25maWdUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b1JlcGxhY2VGZnhGcGVDb25maWdPdXRwdXRSZWZlcmVuY2UgfCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b1JlcGxhY2VGZnhGcGVDb25maWcpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIHJldHVybiB7XG4gICAgY29tbW9uX2FscGhhYmV0OiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLmNvbW1vbkFscGhhYmV0KSxcbiAgICBjdXN0b21fYWxwaGFiZXQ6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuY3VzdG9tQWxwaGFiZXQpLFxuICAgIHJhZGl4OiBjZGt0Zi5udW1iZXJUb1RlcnJhZm9ybShzdHJ1Y3QhLnJhZGl4KSxcbiAgICBjb250ZXh0OiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b1JlcGxhY2VGZnhGcGVDb25maWdDb250ZXh0VG9UZXJyYWZvcm0oc3RydWN0IS5jb250ZXh0KSxcbiAgICBjcnlwdG9fa2V5OiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b1JlcGxhY2VGZnhGcGVDb25maWdDcnlwdG9LZXlUb1RlcnJhZm9ybShzdHJ1Y3QhLmNyeXB0b0tleSksXG4gICAgc3Vycm9nYXRlX2luZm9fdHlwZTogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnU3Vycm9nYXRlSW5mb1R5cGVUb1RlcnJhZm9ybShzdHJ1Y3QhLnN1cnJvZ2F0ZUluZm9UeXBlKSxcbiAgfVxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b1JlcGxhY2VGZnhGcGVDb25maWdUb0hjbFRlcnJhZm9ybShzdHJ1Y3Q/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b1JlcGxhY2VGZnhGcGVDb25maWdPdXRwdXRSZWZlcmVuY2UgfCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b1JlcGxhY2VGZnhGcGVDb25maWcpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIGNvbnN0IGF0dHJzID0ge1xuICAgIGNvbW1vbl9hbHBoYWJldDoge1xuICAgICAgdmFsdWU6IGNka3RmLnN0cmluZ1RvSGNsVGVycmFmb3JtKHN0cnVjdCEuY29tbW9uQWxwaGFiZXQpLFxuICAgICAgaXNCbG9jazogZmFsc2UsXG4gICAgICB0eXBlOiBcInNpbXBsZVwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJzdHJpbmdcIixcbiAgICB9LFxuICAgIGN1c3RvbV9hbHBoYWJldDoge1xuICAgICAgdmFsdWU6IGNka3RmLnN0cmluZ1RvSGNsVGVycmFmb3JtKHN0cnVjdCEuY3VzdG9tQWxwaGFiZXQpLFxuICAgICAgaXNCbG9jazogZmFsc2UsXG4gICAgICB0eXBlOiBcInNpbXBsZVwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJzdHJpbmdcIixcbiAgICB9LFxuICAgIHJhZGl4OiB7XG4gICAgICB2YWx1ZTogY2RrdGYubnVtYmVyVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5yYWRpeCksXG4gICAgICBpc0Jsb2NrOiBmYWxzZSxcbiAgICAgIHR5cGU6IFwic2ltcGxlXCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcIm51bWJlclwiLFxuICAgIH0sXG4gICAgY29udGV4dDoge1xuICAgICAgdmFsdWU6IGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZ0NvbnRleHRUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLmNvbnRleHQpLFxuICAgICAgaXNCbG9jazogdHJ1ZSxcbiAgICAgIHR5cGU6IFwibGlzdFwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b1JlcGxhY2VGZnhGcGVDb25maWdDb250ZXh0TGlzdFwiLFxuICAgIH0sXG4gICAgY3J5cHRvX2tleToge1xuICAgICAgdmFsdWU6IGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZ0NyeXB0b0tleVRvSGNsVGVycmFmb3JtKHN0cnVjdCEuY3J5cHRvS2V5KSxcbiAgICAgIGlzQmxvY2s6IHRydWUsXG4gICAgICB0eXBlOiBcImxpc3RcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwiRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnQ3J5cHRvS2V5TGlzdFwiLFxuICAgIH0sXG4gICAgc3Vycm9nYXRlX2luZm9fdHlwZToge1xuICAgICAgdmFsdWU6IGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZ1N1cnJvZ2F0ZUluZm9UeXBlVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5zdXJyb2dhdGVJbmZvVHlwZSksXG4gICAgICBpc0Jsb2NrOiB0cnVlLFxuICAgICAgdHlwZTogXCJsaXN0XCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcIkRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZ1N1cnJvZ2F0ZUluZm9UeXBlTGlzdFwiLFxuICAgIH0sXG4gIH07XG5cbiAgLy8gcmVtb3ZlIHVuZGVmaW5lZCBhdHRyaWJ1dGVzXG4gIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMoYXR0cnMpLmZpbHRlcigoW18sIHZhbHVlXSkgPT4gdmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZS52YWx1ZSAhPT0gdW5kZWZpbmVkKSk7XG59XG5cbmV4cG9ydCBjbGFzcyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b1JlcGxhY2VGZnhGcGVDb25maWdPdXRwdXRSZWZlcmVuY2UgZXh0ZW5kcyBjZGt0Zi5Db21wbGV4T2JqZWN0IHtcbiAgcHJpdmF0ZSBpc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG5cbiAgLyoqXG4gICogQHBhcmFtIHRlcnJhZm9ybVJlc291cmNlIFRoZSBwYXJlbnQgcmVzb3VyY2VcbiAgKiBAcGFyYW0gdGVycmFmb3JtQXR0cmlidXRlIFRoZSBhdHRyaWJ1dGUgb24gdGhlIHBhcmVudCByZXNvdXJjZSB0aGlzIGNsYXNzIGlzIHJlZmVyZW5jaW5nXG4gICovXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcih0ZXJyYWZvcm1SZXNvdXJjZTogY2RrdGYuSUludGVycG9sYXRpbmdQYXJlbnQsIHRlcnJhZm9ybUF0dHJpYnV0ZTogc3RyaW5nKSB7XG4gICAgc3VwZXIodGVycmFmb3JtUmVzb3VyY2UsIHRlcnJhZm9ybUF0dHJpYnV0ZSwgZmFsc2UsIDApO1xuICB9XG5cbiAgcHVibGljIGdldCBpbnRlcm5hbFZhbHVlKCk6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZyB8IHVuZGVmaW5lZCB7XG4gICAgbGV0IGhhc0FueVZhbHVlcyA9IHRoaXMuaXNFbXB0eU9iamVjdDtcbiAgICBjb25zdCBpbnRlcm5hbFZhbHVlUmVzdWx0OiBhbnkgPSB7fTtcbiAgICBpZiAodGhpcy5fY29tbW9uQWxwaGFiZXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQuY29tbW9uQWxwaGFiZXQgPSB0aGlzLl9jb21tb25BbHBoYWJldDtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2N1c3RvbUFscGhhYmV0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LmN1c3RvbUFscGhhYmV0ID0gdGhpcy5fY3VzdG9tQWxwaGFiZXQ7XG4gICAgfVxuICAgIGlmICh0aGlzLl9yYWRpeCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC5yYWRpeCA9IHRoaXMuX3JhZGl4O1xuICAgIH1cbiAgICBpZiAodGhpcy5fY29udGV4dD8uaW50ZXJuYWxWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC5jb250ZXh0ID0gdGhpcy5fY29udGV4dD8uaW50ZXJuYWxWYWx1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2NyeXB0b0tleT8uaW50ZXJuYWxWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC5jcnlwdG9LZXkgPSB0aGlzLl9jcnlwdG9LZXk/LmludGVybmFsVmFsdWU7XG4gICAgfVxuICAgIGlmICh0aGlzLl9zdXJyb2dhdGVJbmZvVHlwZT8uaW50ZXJuYWxWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC5zdXJyb2dhdGVJbmZvVHlwZSA9IHRoaXMuX3N1cnJvZ2F0ZUluZm9UeXBlPy5pbnRlcm5hbFZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gaGFzQW55VmFsdWVzID8gaW50ZXJuYWxWYWx1ZVJlc3VsdCA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgaW50ZXJuYWxWYWx1ZSh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnIHwgdW5kZWZpbmVkKSB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IGZhbHNlO1xuICAgICAgdGhpcy5fY29tbW9uQWxwaGFiZXQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9jdXN0b21BbHBoYWJldCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX3JhZGl4ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fY29udGV4dC5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fY3J5cHRvS2V5LmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9zdXJyb2dhdGVJbmZvVHlwZS5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggPT09IDA7XG4gICAgICB0aGlzLl9jb21tb25BbHBoYWJldCA9IHZhbHVlLmNvbW1vbkFscGhhYmV0O1xuICAgICAgdGhpcy5fY3VzdG9tQWxwaGFiZXQgPSB2YWx1ZS5jdXN0b21BbHBoYWJldDtcbiAgICAgIHRoaXMuX3JhZGl4ID0gdmFsdWUucmFkaXg7XG4gICAgICB0aGlzLl9jb250ZXh0LmludGVybmFsVmFsdWUgPSB2YWx1ZS5jb250ZXh0O1xuICAgICAgdGhpcy5fY3J5cHRvS2V5LmludGVybmFsVmFsdWUgPSB2YWx1ZS5jcnlwdG9LZXk7XG4gICAgICB0aGlzLl9zdXJyb2dhdGVJbmZvVHlwZS5pbnRlcm5hbFZhbHVlID0gdmFsdWUuc3Vycm9nYXRlSW5mb1R5cGU7XG4gICAgfVxuICB9XG5cbiAgLy8gY29tbW9uX2FscGhhYmV0IC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX2NvbW1vbkFscGhhYmV0Pzogc3RyaW5nOyBcbiAgcHVibGljIGdldCBjb21tb25BbHBoYWJldCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ2NvbW1vbl9hbHBoYWJldCcpO1xuICB9XG4gIHB1YmxpYyBzZXQgY29tbW9uQWxwaGFiZXQodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX2NvbW1vbkFscGhhYmV0ID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0Q29tbW9uQWxwaGFiZXQoKSB7XG4gICAgdGhpcy5fY29tbW9uQWxwaGFiZXQgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IGNvbW1vbkFscGhhYmV0SW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbW1vbkFscGhhYmV0O1xuICB9XG5cbiAgLy8gY3VzdG9tX2FscGhhYmV0IC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX2N1c3RvbUFscGhhYmV0Pzogc3RyaW5nOyBcbiAgcHVibGljIGdldCBjdXN0b21BbHBoYWJldCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ2N1c3RvbV9hbHBoYWJldCcpO1xuICB9XG4gIHB1YmxpYyBzZXQgY3VzdG9tQWxwaGFiZXQodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX2N1c3RvbUFscGhhYmV0ID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0Q3VzdG9tQWxwaGFiZXQoKSB7XG4gICAgdGhpcy5fY3VzdG9tQWxwaGFiZXQgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IGN1c3RvbUFscGhhYmV0SW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2N1c3RvbUFscGhhYmV0O1xuICB9XG5cbiAgLy8gcmFkaXggLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfcmFkaXg/OiBudW1iZXI7IFxuICBwdWJsaWMgZ2V0IHJhZGl4KCkge1xuICAgIHJldHVybiB0aGlzLmdldE51bWJlckF0dHJpYnV0ZSgncmFkaXgnKTtcbiAgfVxuICBwdWJsaWMgc2V0IHJhZGl4KHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl9yYWRpeCA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldFJhZGl4KCkge1xuICAgIHRoaXMuX3JhZGl4ID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCByYWRpeElucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9yYWRpeDtcbiAgfVxuXG4gIC8vIGNvbnRleHQgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfY29udGV4dCA9IG5ldyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b1JlcGxhY2VGZnhGcGVDb25maWdDb250ZXh0T3V0cHV0UmVmZXJlbmNlKHRoaXMsIFwiY29udGV4dFwiKTtcbiAgcHVibGljIGdldCBjb250ZXh0KCkge1xuICAgIHJldHVybiB0aGlzLl9jb250ZXh0O1xuICB9XG4gIHB1YmxpYyBwdXRDb250ZXh0KHZhbHVlOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b1JlcGxhY2VGZnhGcGVDb25maWdDb250ZXh0KSB7XG4gICAgdGhpcy5fY29udGV4dC5pbnRlcm5hbFZhbHVlID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0Q29udGV4dCgpIHtcbiAgICB0aGlzLl9jb250ZXh0LmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IGNvbnRleHRJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29udGV4dC5pbnRlcm5hbFZhbHVlO1xuICB9XG5cbiAgLy8gY3J5cHRvX2tleSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9jcnlwdG9LZXkgPSBuZXcgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnQ3J5cHRvS2V5T3V0cHV0UmVmZXJlbmNlKHRoaXMsIFwiY3J5cHRvX2tleVwiKTtcbiAgcHVibGljIGdldCBjcnlwdG9LZXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NyeXB0b0tleTtcbiAgfVxuICBwdWJsaWMgcHV0Q3J5cHRvS2V5KHZhbHVlOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b1JlcGxhY2VGZnhGcGVDb25maWdDcnlwdG9LZXkpIHtcbiAgICB0aGlzLl9jcnlwdG9LZXkuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldENyeXB0b0tleSgpIHtcbiAgICB0aGlzLl9jcnlwdG9LZXkuaW50ZXJuYWxWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgY3J5cHRvS2V5SW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NyeXB0b0tleS5pbnRlcm5hbFZhbHVlO1xuICB9XG5cbiAgLy8gc3Vycm9nYXRlX2luZm9fdHlwZSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9zdXJyb2dhdGVJbmZvVHlwZSA9IG5ldyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b1JlcGxhY2VGZnhGcGVDb25maWdTdXJyb2dhdGVJbmZvVHlwZU91dHB1dFJlZmVyZW5jZSh0aGlzLCBcInN1cnJvZ2F0ZV9pbmZvX3R5cGVcIik7XG4gIHB1YmxpYyBnZXQgc3Vycm9nYXRlSW5mb1R5cGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N1cnJvZ2F0ZUluZm9UeXBlO1xuICB9XG4gIHB1YmxpYyBwdXRTdXJyb2dhdGVJbmZvVHlwZSh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnU3Vycm9nYXRlSW5mb1R5cGUpIHtcbiAgICB0aGlzLl9zdXJyb2dhdGVJbmZvVHlwZS5pbnRlcm5hbFZhbHVlID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0U3Vycm9nYXRlSW5mb1R5cGUoKSB7XG4gICAgdGhpcy5fc3Vycm9nYXRlSW5mb1R5cGUuaW50ZXJuYWxWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgc3Vycm9nYXRlSW5mb1R5cGVJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fc3Vycm9nYXRlSW5mb1R5cGUuaW50ZXJuYWxWYWx1ZTtcbiAgfVxufVxuZXhwb3J0IGludGVyZmFjZSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkRhdGVTaGlmdENvbmZpZ0NvbnRleHQge1xuICAvKipcbiAgKiBOYW1lIGRlc2NyaWJpbmcgdGhlIGZpZWxkLlxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNuYW1lIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSNuYW1lfVxuICAqL1xuICByZWFkb25seSBuYW1lPzogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25EYXRlU2hpZnRDb25maWdDb250ZXh0VG9UZXJyYWZvcm0oc3RydWN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25EYXRlU2hpZnRDb25maWdDb250ZXh0T3V0cHV0UmVmZXJlbmNlIHwgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25EYXRlU2hpZnRDb25maWdDb250ZXh0KTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkgfHwgY2RrdGYuVG9rZW5pemF0aW9uLmlzUmVzb2x2YWJsZShzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgaWYgKGNka3RmLmlzQ29tcGxleEVsZW1lbnQoc3RydWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkEgY29tcGxleCBlbGVtZW50IHdhcyB1c2VkIGFzIGNvbmZpZ3VyYXRpb24sIHRoaXMgaXMgbm90IHN1cHBvcnRlZDogaHR0cHM6Ly9jZGsudGYvY29tcGxleC1vYmplY3QtYXMtY29uZmlndXJhdGlvblwiKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG5hbWU6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEubmFtZSksXG4gIH1cbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25EYXRlU2hpZnRDb25maWdDb250ZXh0VG9IY2xUZXJyYWZvcm0oc3RydWN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25EYXRlU2hpZnRDb25maWdDb250ZXh0T3V0cHV0UmVmZXJlbmNlIHwgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25EYXRlU2hpZnRDb25maWdDb250ZXh0KTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkgfHwgY2RrdGYuVG9rZW5pemF0aW9uLmlzUmVzb2x2YWJsZShzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgaWYgKGNka3RmLmlzQ29tcGxleEVsZW1lbnQoc3RydWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkEgY29tcGxleCBlbGVtZW50IHdhcyB1c2VkIGFzIGNvbmZpZ3VyYXRpb24sIHRoaXMgaXMgbm90IHN1cHBvcnRlZDogaHR0cHM6Ly9jZGsudGYvY29tcGxleC1vYmplY3QtYXMtY29uZmlndXJhdGlvblwiKTtcbiAgfVxuICBjb25zdCBhdHRycyA9IHtcbiAgICBuYW1lOiB7XG4gICAgICB2YWx1ZTogY2RrdGYuc3RyaW5nVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5uYW1lKSxcbiAgICAgIGlzQmxvY2s6IGZhbHNlLFxuICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwic3RyaW5nXCIsXG4gICAgfSxcbiAgfTtcblxuICAvLyByZW1vdmUgdW5kZWZpbmVkIGF0dHJpYnV0ZXNcbiAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhhdHRycykuZmlsdGVyKChbXywgdmFsdWVdKSA9PiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlLnZhbHVlICE9PSB1bmRlZmluZWQpKTtcbn1cblxuZXhwb3J0IGNsYXNzIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRGF0ZVNoaWZ0Q29uZmlnQ29udGV4dE91dHB1dFJlZmVyZW5jZSBleHRlbmRzIGNka3RmLkNvbXBsZXhPYmplY3Qge1xuICBwcml2YXRlIGlzRW1wdHlPYmplY3QgPSBmYWxzZTtcblxuICAvKipcbiAgKiBAcGFyYW0gdGVycmFmb3JtUmVzb3VyY2UgVGhlIHBhcmVudCByZXNvdXJjZVxuICAqIEBwYXJhbSB0ZXJyYWZvcm1BdHRyaWJ1dGUgVGhlIGF0dHJpYnV0ZSBvbiB0aGUgcGFyZW50IHJlc291cmNlIHRoaXMgY2xhc3MgaXMgcmVmZXJlbmNpbmdcbiAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHRlcnJhZm9ybVJlc291cmNlOiBjZGt0Zi5JSW50ZXJwb2xhdGluZ1BhcmVudCwgdGVycmFmb3JtQXR0cmlidXRlOiBzdHJpbmcpIHtcbiAgICBzdXBlcih0ZXJyYWZvcm1SZXNvdXJjZSwgdGVycmFmb3JtQXR0cmlidXRlLCBmYWxzZSwgMCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGludGVybmFsVmFsdWUoKTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25EYXRlU2hpZnRDb25maWdDb250ZXh0IHwgdW5kZWZpbmVkIHtcbiAgICBsZXQgaGFzQW55VmFsdWVzID0gdGhpcy5pc0VtcHR5T2JqZWN0O1xuICAgIGNvbnN0IGludGVybmFsVmFsdWVSZXN1bHQ6IGFueSA9IHt9O1xuICAgIGlmICh0aGlzLl9uYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0Lm5hbWUgPSB0aGlzLl9uYW1lO1xuICAgIH1cbiAgICByZXR1cm4gaGFzQW55VmFsdWVzID8gaW50ZXJuYWxWYWx1ZVJlc3VsdCA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgaW50ZXJuYWxWYWx1ZSh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25EYXRlU2hpZnRDb25maWdDb250ZXh0IHwgdW5kZWZpbmVkKSB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IGZhbHNlO1xuICAgICAgdGhpcy5fbmFtZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLmlzRW1wdHlPYmplY3QgPSBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoID09PSAwO1xuICAgICAgdGhpcy5fbmFtZSA9IHZhbHVlLm5hbWU7XG4gICAgfVxuICB9XG5cbiAgLy8gbmFtZSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9uYW1lPzogc3RyaW5nOyBcbiAgcHVibGljIGdldCBuYW1lKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgnbmFtZScpO1xuICB9XG4gIHB1YmxpYyBzZXQgbmFtZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fbmFtZSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldE5hbWUoKSB7XG4gICAgdGhpcy5fbmFtZSA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgbmFtZUlucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9uYW1lO1xuICB9XG59XG5leHBvcnQgaW50ZXJmYWNlIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRGF0ZVNoaWZ0Q29uZmlnQ3J5cHRvS2V5S21zV3JhcHBlZCB7XG4gIC8qKlxuICAqIFRoZSByZXNvdXJjZSBuYW1lIG9mIHRoZSBLTVMgQ3J5cHRvS2V5IHRvIHVzZSBmb3IgdW53cmFwcGluZy5cbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjY3J5cHRvX2tleV9uYW1lIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSNjcnlwdG9fa2V5X25hbWV9XG4gICovXG4gIHJlYWRvbmx5IGNyeXB0b0tleU5hbWU6IHN0cmluZztcbiAgLyoqXG4gICogVGhlIHdyYXBwZWQgZGF0YSBjcnlwdG8ga2V5LlxuICAqIFxuICAqIEEgYmFzZTY0LWVuY29kZWQgc3RyaW5nLlxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSN3cmFwcGVkX2tleSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjd3JhcHBlZF9rZXl9XG4gICovXG4gIHJlYWRvbmx5IHdyYXBwZWRLZXk6IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRGF0ZVNoaWZ0Q29uZmlnQ3J5cHRvS2V5S21zV3JhcHBlZFRvVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRGF0ZVNoaWZ0Q29uZmlnQ3J5cHRvS2V5S21zV3JhcHBlZE91dHB1dFJlZmVyZW5jZSB8IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRGF0ZVNoaWZ0Q29uZmlnQ3J5cHRvS2V5S21zV3JhcHBlZCk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpIHx8IGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIGlmIChjZGt0Zi5pc0NvbXBsZXhFbGVtZW50KHN0cnVjdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGNvbXBsZXggZWxlbWVudCB3YXMgdXNlZCBhcyBjb25maWd1cmF0aW9uLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQ6IGh0dHBzOi8vY2RrLnRmL2NvbXBsZXgtb2JqZWN0LWFzLWNvbmZpZ3VyYXRpb25cIik7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBjcnlwdG9fa2V5X25hbWU6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEuY3J5cHRvS2V5TmFtZSksXG4gICAgd3JhcHBlZF9rZXk6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEud3JhcHBlZEtleSksXG4gIH1cbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25EYXRlU2hpZnRDb25maWdDcnlwdG9LZXlLbXNXcmFwcGVkVG9IY2xUZXJyYWZvcm0oc3RydWN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25EYXRlU2hpZnRDb25maWdDcnlwdG9LZXlLbXNXcmFwcGVkT3V0cHV0UmVmZXJlbmNlIHwgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25EYXRlU2hpZnRDb25maWdDcnlwdG9LZXlLbXNXcmFwcGVkKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkgfHwgY2RrdGYuVG9rZW5pemF0aW9uLmlzUmVzb2x2YWJsZShzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgaWYgKGNka3RmLmlzQ29tcGxleEVsZW1lbnQoc3RydWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkEgY29tcGxleCBlbGVtZW50IHdhcyB1c2VkIGFzIGNvbmZpZ3VyYXRpb24sIHRoaXMgaXMgbm90IHN1cHBvcnRlZDogaHR0cHM6Ly9jZGsudGYvY29tcGxleC1vYmplY3QtYXMtY29uZmlndXJhdGlvblwiKTtcbiAgfVxuICBjb25zdCBhdHRycyA9IHtcbiAgICBjcnlwdG9fa2V5X25hbWU6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5zdHJpbmdUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLmNyeXB0b0tleU5hbWUpLFxuICAgICAgaXNCbG9jazogZmFsc2UsXG4gICAgICB0eXBlOiBcInNpbXBsZVwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJzdHJpbmdcIixcbiAgICB9LFxuICAgIHdyYXBwZWRfa2V5OiB7XG4gICAgICB2YWx1ZTogY2RrdGYuc3RyaW5nVG9IY2xUZXJyYWZvcm0oc3RydWN0IS53cmFwcGVkS2V5KSxcbiAgICAgIGlzQmxvY2s6IGZhbHNlLFxuICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwic3RyaW5nXCIsXG4gICAgfSxcbiAgfTtcblxuICAvLyByZW1vdmUgdW5kZWZpbmVkIGF0dHJpYnV0ZXNcbiAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhhdHRycykuZmlsdGVyKChbXywgdmFsdWVdKSA9PiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlLnZhbHVlICE9PSB1bmRlZmluZWQpKTtcbn1cblxuZXhwb3J0IGNsYXNzIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRGF0ZVNoaWZ0Q29uZmlnQ3J5cHRvS2V5S21zV3JhcHBlZE91dHB1dFJlZmVyZW5jZSBleHRlbmRzIGNka3RmLkNvbXBsZXhPYmplY3Qge1xuICBwcml2YXRlIGlzRW1wdHlPYmplY3QgPSBmYWxzZTtcblxuICAvKipcbiAgKiBAcGFyYW0gdGVycmFmb3JtUmVzb3VyY2UgVGhlIHBhcmVudCByZXNvdXJjZVxuICAqIEBwYXJhbSB0ZXJyYWZvcm1BdHRyaWJ1dGUgVGhlIGF0dHJpYnV0ZSBvbiB0aGUgcGFyZW50IHJlc291cmNlIHRoaXMgY2xhc3MgaXMgcmVmZXJlbmNpbmdcbiAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHRlcnJhZm9ybVJlc291cmNlOiBjZGt0Zi5JSW50ZXJwb2xhdGluZ1BhcmVudCwgdGVycmFmb3JtQXR0cmlidXRlOiBzdHJpbmcpIHtcbiAgICBzdXBlcih0ZXJyYWZvcm1SZXNvdXJjZSwgdGVycmFmb3JtQXR0cmlidXRlLCBmYWxzZSwgMCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGludGVybmFsVmFsdWUoKTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25EYXRlU2hpZnRDb25maWdDcnlwdG9LZXlLbXNXcmFwcGVkIHwgdW5kZWZpbmVkIHtcbiAgICBsZXQgaGFzQW55VmFsdWVzID0gdGhpcy5pc0VtcHR5T2JqZWN0O1xuICAgIGNvbnN0IGludGVybmFsVmFsdWVSZXN1bHQ6IGFueSA9IHt9O1xuICAgIGlmICh0aGlzLl9jcnlwdG9LZXlOYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LmNyeXB0b0tleU5hbWUgPSB0aGlzLl9jcnlwdG9LZXlOYW1lO1xuICAgIH1cbiAgICBpZiAodGhpcy5fd3JhcHBlZEtleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC53cmFwcGVkS2V5ID0gdGhpcy5fd3JhcHBlZEtleTtcbiAgICB9XG4gICAgcmV0dXJuIGhhc0FueVZhbHVlcyA/IGludGVybmFsVmFsdWVSZXN1bHQgOiB1bmRlZmluZWQ7XG4gIH1cblxuICBwdWJsaWMgc2V0IGludGVybmFsVmFsdWUodmFsdWU6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRGF0ZVNoaWZ0Q29uZmlnQ3J5cHRvS2V5S21zV3JhcHBlZCB8IHVuZGVmaW5lZCkge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmlzRW1wdHlPYmplY3QgPSBmYWxzZTtcbiAgICAgIHRoaXMuX2NyeXB0b0tleU5hbWUgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl93cmFwcGVkS2V5ID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggPT09IDA7XG4gICAgICB0aGlzLl9jcnlwdG9LZXlOYW1lID0gdmFsdWUuY3J5cHRvS2V5TmFtZTtcbiAgICAgIHRoaXMuX3dyYXBwZWRLZXkgPSB2YWx1ZS53cmFwcGVkS2V5O1xuICAgIH1cbiAgfVxuXG4gIC8vIGNyeXB0b19rZXlfbmFtZSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IGZhbHNlLCByZXF1aXJlZDogdHJ1ZVxuICBwcml2YXRlIF9jcnlwdG9LZXlOYW1lPzogc3RyaW5nOyBcbiAgcHVibGljIGdldCBjcnlwdG9LZXlOYW1lKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgnY3J5cHRvX2tleV9uYW1lJyk7XG4gIH1cbiAgcHVibGljIHNldCBjcnlwdG9LZXlOYW1lKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9jcnlwdG9LZXlOYW1lID0gdmFsdWU7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IGNyeXB0b0tleU5hbWVJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fY3J5cHRvS2V5TmFtZTtcbiAgfVxuXG4gIC8vIHdyYXBwZWRfa2V5IC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogZmFsc2UsIHJlcXVpcmVkOiB0cnVlXG4gIHByaXZhdGUgX3dyYXBwZWRLZXk/OiBzdHJpbmc7IFxuICBwdWJsaWMgZ2V0IHdyYXBwZWRLZXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCd3cmFwcGVkX2tleScpO1xuICB9XG4gIHB1YmxpYyBzZXQgd3JhcHBlZEtleSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fd3JhcHBlZEtleSA9IHZhbHVlO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCB3cmFwcGVkS2V5SW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dyYXBwZWRLZXk7XG4gIH1cbn1cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25EYXRlU2hpZnRDb25maWdDcnlwdG9LZXlUcmFuc2llbnQge1xuICAvKipcbiAgKiBOYW1lIG9mIHRoZSBrZXkuIFRoaXMgaXMgYW4gYXJiaXRyYXJ5IHN0cmluZyB1c2VkIHRvIGRpZmZlcmVudGlhdGUgZGlmZmVyZW50IGtleXMuIEEgdW5pcXVlIGtleSBpcyBnZW5lcmF0ZWQgcGVyIG5hbWU6IHR3byBzZXBhcmF0ZSAnVHJhbnNpZW50Q3J5cHRvS2V5JyBwcm90b3Mgc2hhcmUgdGhlIHNhbWUgZ2VuZXJhdGVkIGtleSBpZiB0aGVpciBuYW1lcyBhcmUgdGhlIHNhbWUuIFdoZW4gdGhlIGRhdGEgY3J5cHRvIGtleSBpcyBnZW5lcmF0ZWQsIHRoaXMgbmFtZSBpcyBub3QgdXNlZCBpbiBhbnkgd2F5IChyZXBlYXRpbmcgdGhlIGFwaSBjYWxsIHdpbGwgcmVzdWx0IGluIGEgZGlmZmVyZW50IGtleSBiZWluZyBnZW5lcmF0ZWQpLlxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNuYW1lIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSNuYW1lfVxuICAqL1xuICByZWFkb25seSBuYW1lOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkRhdGVTaGlmdENvbmZpZ0NyeXB0b0tleVRyYW5zaWVudFRvVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRGF0ZVNoaWZ0Q29uZmlnQ3J5cHRvS2V5VHJhbnNpZW50T3V0cHV0UmVmZXJlbmNlIHwgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25EYXRlU2hpZnRDb25maWdDcnlwdG9LZXlUcmFuc2llbnQpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIHJldHVybiB7XG4gICAgbmFtZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5uYW1lKSxcbiAgfVxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkRhdGVTaGlmdENvbmZpZ0NyeXB0b0tleVRyYW5zaWVudFRvSGNsVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRGF0ZVNoaWZ0Q29uZmlnQ3J5cHRvS2V5VHJhbnNpZW50T3V0cHV0UmVmZXJlbmNlIHwgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25EYXRlU2hpZnRDb25maWdDcnlwdG9LZXlUcmFuc2llbnQpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIGNvbnN0IGF0dHJzID0ge1xuICAgIG5hbWU6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5zdHJpbmdUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLm5hbWUpLFxuICAgICAgaXNCbG9jazogZmFsc2UsXG4gICAgICB0eXBlOiBcInNpbXBsZVwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJzdHJpbmdcIixcbiAgICB9LFxuICB9O1xuXG4gIC8vIHJlbW92ZSB1bmRlZmluZWQgYXR0cmlidXRlc1xuICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5lbnRyaWVzKGF0dHJzKS5maWx0ZXIoKFtfLCB2YWx1ZV0pID0+IHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUudmFsdWUgIT09IHVuZGVmaW5lZCkpO1xufVxuXG5leHBvcnQgY2xhc3MgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25EYXRlU2hpZnRDb25maWdDcnlwdG9LZXlUcmFuc2llbnRPdXRwdXRSZWZlcmVuY2UgZXh0ZW5kcyBjZGt0Zi5Db21wbGV4T2JqZWN0IHtcbiAgcHJpdmF0ZSBpc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG5cbiAgLyoqXG4gICogQHBhcmFtIHRlcnJhZm9ybVJlc291cmNlIFRoZSBwYXJlbnQgcmVzb3VyY2VcbiAgKiBAcGFyYW0gdGVycmFmb3JtQXR0cmlidXRlIFRoZSBhdHRyaWJ1dGUgb24gdGhlIHBhcmVudCByZXNvdXJjZSB0aGlzIGNsYXNzIGlzIHJlZmVyZW5jaW5nXG4gICovXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcih0ZXJyYWZvcm1SZXNvdXJjZTogY2RrdGYuSUludGVycG9sYXRpbmdQYXJlbnQsIHRlcnJhZm9ybUF0dHJpYnV0ZTogc3RyaW5nKSB7XG4gICAgc3VwZXIodGVycmFmb3JtUmVzb3VyY2UsIHRlcnJhZm9ybUF0dHJpYnV0ZSwgZmFsc2UsIDApO1xuICB9XG5cbiAgcHVibGljIGdldCBpbnRlcm5hbFZhbHVlKCk6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRGF0ZVNoaWZ0Q29uZmlnQ3J5cHRvS2V5VHJhbnNpZW50IHwgdW5kZWZpbmVkIHtcbiAgICBsZXQgaGFzQW55VmFsdWVzID0gdGhpcy5pc0VtcHR5T2JqZWN0O1xuICAgIGNvbnN0IGludGVybmFsVmFsdWVSZXN1bHQ6IGFueSA9IHt9O1xuICAgIGlmICh0aGlzLl9uYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0Lm5hbWUgPSB0aGlzLl9uYW1lO1xuICAgIH1cbiAgICByZXR1cm4gaGFzQW55VmFsdWVzID8gaW50ZXJuYWxWYWx1ZVJlc3VsdCA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgaW50ZXJuYWxWYWx1ZSh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25EYXRlU2hpZnRDb25maWdDcnlwdG9LZXlUcmFuc2llbnQgfCB1bmRlZmluZWQpIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5pc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG4gICAgICB0aGlzLl9uYW1lID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggPT09IDA7XG4gICAgICB0aGlzLl9uYW1lID0gdmFsdWUubmFtZTtcbiAgICB9XG4gIH1cblxuICAvLyBuYW1lIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogZmFsc2UsIHJlcXVpcmVkOiB0cnVlXG4gIHByaXZhdGUgX25hbWU/OiBzdHJpbmc7IFxuICBwdWJsaWMgZ2V0IG5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCduYW1lJyk7XG4gIH1cbiAgcHVibGljIHNldCBuYW1lKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9uYW1lID0gdmFsdWU7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IG5hbWVJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fbmFtZTtcbiAgfVxufVxuZXhwb3J0IGludGVyZmFjZSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkRhdGVTaGlmdENvbmZpZ0NyeXB0b0tleVVud3JhcHBlZCB7XG4gIC8qKlxuICAqIEEgMTI4LzE5Mi8yNTYgYml0IGtleS5cbiAgKiBcbiAgKiBBIGJhc2U2NC1lbmNvZGVkIHN0cmluZy5cbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUja2V5IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSNrZXl9XG4gICovXG4gIHJlYWRvbmx5IGtleTogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25EYXRlU2hpZnRDb25maWdDcnlwdG9LZXlVbndyYXBwZWRUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkRhdGVTaGlmdENvbmZpZ0NyeXB0b0tleVVud3JhcHBlZE91dHB1dFJlZmVyZW5jZSB8IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRGF0ZVNoaWZ0Q29uZmlnQ3J5cHRvS2V5VW53cmFwcGVkKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkgfHwgY2RrdGYuVG9rZW5pemF0aW9uLmlzUmVzb2x2YWJsZShzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgaWYgKGNka3RmLmlzQ29tcGxleEVsZW1lbnQoc3RydWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkEgY29tcGxleCBlbGVtZW50IHdhcyB1c2VkIGFzIGNvbmZpZ3VyYXRpb24sIHRoaXMgaXMgbm90IHN1cHBvcnRlZDogaHR0cHM6Ly9jZGsudGYvY29tcGxleC1vYmplY3QtYXMtY29uZmlndXJhdGlvblwiKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGtleTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5rZXkpLFxuICB9XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRGF0ZVNoaWZ0Q29uZmlnQ3J5cHRvS2V5VW53cmFwcGVkVG9IY2xUZXJyYWZvcm0oc3RydWN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25EYXRlU2hpZnRDb25maWdDcnlwdG9LZXlVbndyYXBwZWRPdXRwdXRSZWZlcmVuY2UgfCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkRhdGVTaGlmdENvbmZpZ0NyeXB0b0tleVVud3JhcHBlZCk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpIHx8IGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIGlmIChjZGt0Zi5pc0NvbXBsZXhFbGVtZW50KHN0cnVjdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGNvbXBsZXggZWxlbWVudCB3YXMgdXNlZCBhcyBjb25maWd1cmF0aW9uLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQ6IGh0dHBzOi8vY2RrLnRmL2NvbXBsZXgtb2JqZWN0LWFzLWNvbmZpZ3VyYXRpb25cIik7XG4gIH1cbiAgY29uc3QgYXR0cnMgPSB7XG4gICAga2V5OiB7XG4gICAgICB2YWx1ZTogY2RrdGYuc3RyaW5nVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5rZXkpLFxuICAgICAgaXNCbG9jazogZmFsc2UsXG4gICAgICB0eXBlOiBcInNpbXBsZVwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJzdHJpbmdcIixcbiAgICB9LFxuICB9O1xuXG4gIC8vIHJlbW92ZSB1bmRlZmluZWQgYXR0cmlidXRlc1xuICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5lbnRyaWVzKGF0dHJzKS5maWx0ZXIoKFtfLCB2YWx1ZV0pID0+IHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUudmFsdWUgIT09IHVuZGVmaW5lZCkpO1xufVxuXG5leHBvcnQgY2xhc3MgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25EYXRlU2hpZnRDb25maWdDcnlwdG9LZXlVbndyYXBwZWRPdXRwdXRSZWZlcmVuY2UgZXh0ZW5kcyBjZGt0Zi5Db21wbGV4T2JqZWN0IHtcbiAgcHJpdmF0ZSBpc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG5cbiAgLyoqXG4gICogQHBhcmFtIHRlcnJhZm9ybVJlc291cmNlIFRoZSBwYXJlbnQgcmVzb3VyY2VcbiAgKiBAcGFyYW0gdGVycmFmb3JtQXR0cmlidXRlIFRoZSBhdHRyaWJ1dGUgb24gdGhlIHBhcmVudCByZXNvdXJjZSB0aGlzIGNsYXNzIGlzIHJlZmVyZW5jaW5nXG4gICovXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcih0ZXJyYWZvcm1SZXNvdXJjZTogY2RrdGYuSUludGVycG9sYXRpbmdQYXJlbnQsIHRlcnJhZm9ybUF0dHJpYnV0ZTogc3RyaW5nKSB7XG4gICAgc3VwZXIodGVycmFmb3JtUmVzb3VyY2UsIHRlcnJhZm9ybUF0dHJpYnV0ZSwgZmFsc2UsIDApO1xuICB9XG5cbiAgcHVibGljIGdldCBpbnRlcm5hbFZhbHVlKCk6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRGF0ZVNoaWZ0Q29uZmlnQ3J5cHRvS2V5VW53cmFwcGVkIHwgdW5kZWZpbmVkIHtcbiAgICBsZXQgaGFzQW55VmFsdWVzID0gdGhpcy5pc0VtcHR5T2JqZWN0O1xuICAgIGNvbnN0IGludGVybmFsVmFsdWVSZXN1bHQ6IGFueSA9IHt9O1xuICAgIGlmICh0aGlzLl9rZXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQua2V5ID0gdGhpcy5fa2V5O1xuICAgIH1cbiAgICByZXR1cm4gaGFzQW55VmFsdWVzID8gaW50ZXJuYWxWYWx1ZVJlc3VsdCA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgaW50ZXJuYWxWYWx1ZSh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25EYXRlU2hpZnRDb25maWdDcnlwdG9LZXlVbndyYXBwZWQgfCB1bmRlZmluZWQpIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5pc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG4gICAgICB0aGlzLl9rZXkgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5pc0VtcHR5T2JqZWN0ID0gT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aCA9PT0gMDtcbiAgICAgIHRoaXMuX2tleSA9IHZhbHVlLmtleTtcbiAgICB9XG4gIH1cblxuICAvLyBrZXkgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiBmYWxzZSwgcmVxdWlyZWQ6IHRydWVcbiAgcHJpdmF0ZSBfa2V5Pzogc3RyaW5nOyBcbiAgcHVibGljIGdldCBrZXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCdrZXknKTtcbiAgfVxuICBwdWJsaWMgc2V0IGtleSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fa2V5ID0gdmFsdWU7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IGtleUlucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9rZXk7XG4gIH1cbn1cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25EYXRlU2hpZnRDb25maWdDcnlwdG9LZXkge1xuICAvKipcbiAgKiBrbXNfd3JhcHBlZCBibG9ja1xuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNrbXNfd3JhcHBlZCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUja21zX3dyYXBwZWR9XG4gICovXG4gIHJlYWRvbmx5IGttc1dyYXBwZWQ/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkRhdGVTaGlmdENvbmZpZ0NyeXB0b0tleUttc1dyYXBwZWQ7XG4gIC8qKlxuICAqIHRyYW5zaWVudCBibG9ja1xuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSN0cmFuc2llbnQgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI3RyYW5zaWVudH1cbiAgKi9cbiAgcmVhZG9ubHkgdHJhbnNpZW50PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25EYXRlU2hpZnRDb25maWdDcnlwdG9LZXlUcmFuc2llbnQ7XG4gIC8qKlxuICAqIHVud3JhcHBlZCBibG9ja1xuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSN1bndyYXBwZWQgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI3Vud3JhcHBlZH1cbiAgKi9cbiAgcmVhZG9ubHkgdW53cmFwcGVkPzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25EYXRlU2hpZnRDb25maWdDcnlwdG9LZXlVbndyYXBwZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkRhdGVTaGlmdENvbmZpZ0NyeXB0b0tleVRvVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRGF0ZVNoaWZ0Q29uZmlnQ3J5cHRvS2V5T3V0cHV0UmVmZXJlbmNlIHwgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25EYXRlU2hpZnRDb25maWdDcnlwdG9LZXkpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIHJldHVybiB7XG4gICAga21zX3dyYXBwZWQ6IGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRGF0ZVNoaWZ0Q29uZmlnQ3J5cHRvS2V5S21zV3JhcHBlZFRvVGVycmFmb3JtKHN0cnVjdCEua21zV3JhcHBlZCksXG4gICAgdHJhbnNpZW50OiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkRhdGVTaGlmdENvbmZpZ0NyeXB0b0tleVRyYW5zaWVudFRvVGVycmFmb3JtKHN0cnVjdCEudHJhbnNpZW50KSxcbiAgICB1bndyYXBwZWQ6IGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRGF0ZVNoaWZ0Q29uZmlnQ3J5cHRvS2V5VW53cmFwcGVkVG9UZXJyYWZvcm0oc3RydWN0IS51bndyYXBwZWQpLFxuICB9XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRGF0ZVNoaWZ0Q29uZmlnQ3J5cHRvS2V5VG9IY2xUZXJyYWZvcm0oc3RydWN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25EYXRlU2hpZnRDb25maWdDcnlwdG9LZXlPdXRwdXRSZWZlcmVuY2UgfCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkRhdGVTaGlmdENvbmZpZ0NyeXB0b0tleSk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpIHx8IGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIGlmIChjZGt0Zi5pc0NvbXBsZXhFbGVtZW50KHN0cnVjdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGNvbXBsZXggZWxlbWVudCB3YXMgdXNlZCBhcyBjb25maWd1cmF0aW9uLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQ6IGh0dHBzOi8vY2RrLnRmL2NvbXBsZXgtb2JqZWN0LWFzLWNvbmZpZ3VyYXRpb25cIik7XG4gIH1cbiAgY29uc3QgYXR0cnMgPSB7XG4gICAga21zX3dyYXBwZWQ6IHtcbiAgICAgIHZhbHVlOiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkRhdGVTaGlmdENvbmZpZ0NyeXB0b0tleUttc1dyYXBwZWRUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLmttc1dyYXBwZWQpLFxuICAgICAgaXNCbG9jazogdHJ1ZSxcbiAgICAgIHR5cGU6IFwibGlzdFwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkRhdGVTaGlmdENvbmZpZ0NyeXB0b0tleUttc1dyYXBwZWRMaXN0XCIsXG4gICAgfSxcbiAgICB0cmFuc2llbnQ6IHtcbiAgICAgIHZhbHVlOiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkRhdGVTaGlmdENvbmZpZ0NyeXB0b0tleVRyYW5zaWVudFRvSGNsVGVycmFmb3JtKHN0cnVjdCEudHJhbnNpZW50KSxcbiAgICAgIGlzQmxvY2s6IHRydWUsXG4gICAgICB0eXBlOiBcImxpc3RcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwiRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25EYXRlU2hpZnRDb25maWdDcnlwdG9LZXlUcmFuc2llbnRMaXN0XCIsXG4gICAgfSxcbiAgICB1bndyYXBwZWQ6IHtcbiAgICAgIHZhbHVlOiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkRhdGVTaGlmdENvbmZpZ0NyeXB0b0tleVVud3JhcHBlZFRvSGNsVGVycmFmb3JtKHN0cnVjdCEudW53cmFwcGVkKSxcbiAgICAgIGlzQmxvY2s6IHRydWUsXG4gICAgICB0eXBlOiBcImxpc3RcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwiRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25EYXRlU2hpZnRDb25maWdDcnlwdG9LZXlVbndyYXBwZWRMaXN0XCIsXG4gICAgfSxcbiAgfTtcblxuICAvLyByZW1vdmUgdW5kZWZpbmVkIGF0dHJpYnV0ZXNcbiAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhhdHRycykuZmlsdGVyKChbXywgdmFsdWVdKSA9PiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlLnZhbHVlICE9PSB1bmRlZmluZWQpKTtcbn1cblxuZXhwb3J0IGNsYXNzIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRGF0ZVNoaWZ0Q29uZmlnQ3J5cHRvS2V5T3V0cHV0UmVmZXJlbmNlIGV4dGVuZHMgY2RrdGYuQ29tcGxleE9iamVjdCB7XG4gIHByaXZhdGUgaXNFbXB0eU9iamVjdCA9IGZhbHNlO1xuXG4gIC8qKlxuICAqIEBwYXJhbSB0ZXJyYWZvcm1SZXNvdXJjZSBUaGUgcGFyZW50IHJlc291cmNlXG4gICogQHBhcmFtIHRlcnJhZm9ybUF0dHJpYnV0ZSBUaGUgYXR0cmlidXRlIG9uIHRoZSBwYXJlbnQgcmVzb3VyY2UgdGhpcyBjbGFzcyBpcyByZWZlcmVuY2luZ1xuICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IodGVycmFmb3JtUmVzb3VyY2U6IGNka3RmLklJbnRlcnBvbGF0aW5nUGFyZW50LCB0ZXJyYWZvcm1BdHRyaWJ1dGU6IHN0cmluZykge1xuICAgIHN1cGVyKHRlcnJhZm9ybVJlc291cmNlLCB0ZXJyYWZvcm1BdHRyaWJ1dGUsIGZhbHNlLCAwKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgaW50ZXJuYWxWYWx1ZSgpOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkRhdGVTaGlmdENvbmZpZ0NyeXB0b0tleSB8IHVuZGVmaW5lZCB7XG4gICAgbGV0IGhhc0FueVZhbHVlcyA9IHRoaXMuaXNFbXB0eU9iamVjdDtcbiAgICBjb25zdCBpbnRlcm5hbFZhbHVlUmVzdWx0OiBhbnkgPSB7fTtcbiAgICBpZiAodGhpcy5fa21zV3JhcHBlZD8uaW50ZXJuYWxWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC5rbXNXcmFwcGVkID0gdGhpcy5fa21zV3JhcHBlZD8uaW50ZXJuYWxWYWx1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3RyYW5zaWVudD8uaW50ZXJuYWxWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC50cmFuc2llbnQgPSB0aGlzLl90cmFuc2llbnQ/LmludGVybmFsVmFsdWU7XG4gICAgfVxuICAgIGlmICh0aGlzLl91bndyYXBwZWQ/LmludGVybmFsVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQudW53cmFwcGVkID0gdGhpcy5fdW53cmFwcGVkPy5pbnRlcm5hbFZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gaGFzQW55VmFsdWVzID8gaW50ZXJuYWxWYWx1ZVJlc3VsdCA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgaW50ZXJuYWxWYWx1ZSh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25EYXRlU2hpZnRDb25maWdDcnlwdG9LZXkgfCB1bmRlZmluZWQpIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5pc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG4gICAgICB0aGlzLl9rbXNXcmFwcGVkLmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl90cmFuc2llbnQuaW50ZXJuYWxWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX3Vud3JhcHBlZC5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggPT09IDA7XG4gICAgICB0aGlzLl9rbXNXcmFwcGVkLmludGVybmFsVmFsdWUgPSB2YWx1ZS5rbXNXcmFwcGVkO1xuICAgICAgdGhpcy5fdHJhbnNpZW50LmludGVybmFsVmFsdWUgPSB2YWx1ZS50cmFuc2llbnQ7XG4gICAgICB0aGlzLl91bndyYXBwZWQuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlLnVud3JhcHBlZDtcbiAgICB9XG4gIH1cblxuICAvLyBrbXNfd3JhcHBlZCAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9rbXNXcmFwcGVkID0gbmV3IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRGF0ZVNoaWZ0Q29uZmlnQ3J5cHRvS2V5S21zV3JhcHBlZE91dHB1dFJlZmVyZW5jZSh0aGlzLCBcImttc193cmFwcGVkXCIpO1xuICBwdWJsaWMgZ2V0IGttc1dyYXBwZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ttc1dyYXBwZWQ7XG4gIH1cbiAgcHVibGljIHB1dEttc1dyYXBwZWQodmFsdWU6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRGF0ZVNoaWZ0Q29uZmlnQ3J5cHRvS2V5S21zV3JhcHBlZCkge1xuICAgIHRoaXMuX2ttc1dyYXBwZWQuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldEttc1dyYXBwZWQoKSB7XG4gICAgdGhpcy5fa21zV3JhcHBlZC5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBrbXNXcmFwcGVkSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ttc1dyYXBwZWQuaW50ZXJuYWxWYWx1ZTtcbiAgfVxuXG4gIC8vIHRyYW5zaWVudCAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF90cmFuc2llbnQgPSBuZXcgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25EYXRlU2hpZnRDb25maWdDcnlwdG9LZXlUcmFuc2llbnRPdXRwdXRSZWZlcmVuY2UodGhpcywgXCJ0cmFuc2llbnRcIik7XG4gIHB1YmxpYyBnZXQgdHJhbnNpZW50KCkge1xuICAgIHJldHVybiB0aGlzLl90cmFuc2llbnQ7XG4gIH1cbiAgcHVibGljIHB1dFRyYW5zaWVudCh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25EYXRlU2hpZnRDb25maWdDcnlwdG9LZXlUcmFuc2llbnQpIHtcbiAgICB0aGlzLl90cmFuc2llbnQuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldFRyYW5zaWVudCgpIHtcbiAgICB0aGlzLl90cmFuc2llbnQuaW50ZXJuYWxWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgdHJhbnNpZW50SW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RyYW5zaWVudC5pbnRlcm5hbFZhbHVlO1xuICB9XG5cbiAgLy8gdW53cmFwcGVkIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX3Vud3JhcHBlZCA9IG5ldyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkRhdGVTaGlmdENvbmZpZ0NyeXB0b0tleVVud3JhcHBlZE91dHB1dFJlZmVyZW5jZSh0aGlzLCBcInVud3JhcHBlZFwiKTtcbiAgcHVibGljIGdldCB1bndyYXBwZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Vud3JhcHBlZDtcbiAgfVxuICBwdWJsaWMgcHV0VW53cmFwcGVkKHZhbHVlOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkRhdGVTaGlmdENvbmZpZ0NyeXB0b0tleVVud3JhcHBlZCkge1xuICAgIHRoaXMuX3Vud3JhcHBlZC5pbnRlcm5hbFZhbHVlID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0VW53cmFwcGVkKCkge1xuICAgIHRoaXMuX3Vud3JhcHBlZC5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCB1bndyYXBwZWRJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fdW53cmFwcGVkLmludGVybmFsVmFsdWU7XG4gIH1cbn1cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25EYXRlU2hpZnRDb25maWcge1xuICAvKipcbiAgKiBGb3IgZXhhbXBsZSwgLTUgbWVhbnMgc2hpZnQgZGF0ZSB0byBhdCBtb3N0IDUgZGF5cyBiYWNrIGluIHRoZSBwYXN0LlxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNsb3dlcl9ib3VuZF9kYXlzIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSNsb3dlcl9ib3VuZF9kYXlzfVxuICAqL1xuICByZWFkb25seSBsb3dlckJvdW5kRGF5czogbnVtYmVyO1xuICAvKipcbiAgKiBSYW5nZSBvZiBzaGlmdCBpbiBkYXlzLiBBY3R1YWwgc2hpZnQgd2lsbCBiZSBzZWxlY3RlZCBhdCByYW5kb20gd2l0aGluIHRoaXMgcmFuZ2UgKGluY2x1c2l2ZSBlbmRzKS4gTmVnYXRpdmUgbWVhbnMgc2hpZnQgdG8gZWFybGllciBpbiB0aW1lLiBNdXN0IG5vdCBiZSBtb3JlIHRoYW4gMzY1MjUwIGRheXMgKDEwMDAgeWVhcnMpIGVhY2ggZGlyZWN0aW9uLlxuICAqIFxuICAqIEZvciBleGFtcGxlLCAzIG1lYW5zIHNoaWZ0IGRhdGUgdG8gYXQgbW9zdCAzIGRheXMgaW50byB0aGUgZnV0dXJlLlxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSN1cHBlcl9ib3VuZF9kYXlzIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSN1cHBlcl9ib3VuZF9kYXlzfVxuICAqL1xuICByZWFkb25seSB1cHBlckJvdW5kRGF5czogbnVtYmVyO1xuICAvKipcbiAgKiBjb250ZXh0IGJsb2NrXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI2NvbnRleHQgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI2NvbnRleHR9XG4gICovXG4gIHJlYWRvbmx5IGNvbnRleHQ/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkRhdGVTaGlmdENvbmZpZ0NvbnRleHQ7XG4gIC8qKlxuICAqIGNyeXB0b19rZXkgYmxvY2tcbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjY3J5cHRvX2tleSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjY3J5cHRvX2tleX1cbiAgKi9cbiAgcmVhZG9ubHkgY3J5cHRvS2V5PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25EYXRlU2hpZnRDb25maWdDcnlwdG9LZXk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkRhdGVTaGlmdENvbmZpZ1RvVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRGF0ZVNoaWZ0Q29uZmlnT3V0cHV0UmVmZXJlbmNlIHwgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25EYXRlU2hpZnRDb25maWcpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIHJldHVybiB7XG4gICAgbG93ZXJfYm91bmRfZGF5czogY2RrdGYubnVtYmVyVG9UZXJyYWZvcm0oc3RydWN0IS5sb3dlckJvdW5kRGF5cyksXG4gICAgdXBwZXJfYm91bmRfZGF5czogY2RrdGYubnVtYmVyVG9UZXJyYWZvcm0oc3RydWN0IS51cHBlckJvdW5kRGF5cyksXG4gICAgY29udGV4dDogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25EYXRlU2hpZnRDb25maWdDb250ZXh0VG9UZXJyYWZvcm0oc3RydWN0IS5jb250ZXh0KSxcbiAgICBjcnlwdG9fa2V5OiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkRhdGVTaGlmdENvbmZpZ0NyeXB0b0tleVRvVGVycmFmb3JtKHN0cnVjdCEuY3J5cHRvS2V5KSxcbiAgfVxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkRhdGVTaGlmdENvbmZpZ1RvSGNsVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRGF0ZVNoaWZ0Q29uZmlnT3V0cHV0UmVmZXJlbmNlIHwgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25EYXRlU2hpZnRDb25maWcpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIGNvbnN0IGF0dHJzID0ge1xuICAgIGxvd2VyX2JvdW5kX2RheXM6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5udW1iZXJUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLmxvd2VyQm91bmREYXlzKSxcbiAgICAgIGlzQmxvY2s6IGZhbHNlLFxuICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwibnVtYmVyXCIsXG4gICAgfSxcbiAgICB1cHBlcl9ib3VuZF9kYXlzOiB7XG4gICAgICB2YWx1ZTogY2RrdGYubnVtYmVyVG9IY2xUZXJyYWZvcm0oc3RydWN0IS51cHBlckJvdW5kRGF5cyksXG4gICAgICBpc0Jsb2NrOiBmYWxzZSxcbiAgICAgIHR5cGU6IFwic2ltcGxlXCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcIm51bWJlclwiLFxuICAgIH0sXG4gICAgY29udGV4dDoge1xuICAgICAgdmFsdWU6IGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRGF0ZVNoaWZ0Q29uZmlnQ29udGV4dFRvSGNsVGVycmFmb3JtKHN0cnVjdCEuY29udGV4dCksXG4gICAgICBpc0Jsb2NrOiB0cnVlLFxuICAgICAgdHlwZTogXCJsaXN0XCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcIkRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRGF0ZVNoaWZ0Q29uZmlnQ29udGV4dExpc3RcIixcbiAgICB9LFxuICAgIGNyeXB0b19rZXk6IHtcbiAgICAgIHZhbHVlOiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkRhdGVTaGlmdENvbmZpZ0NyeXB0b0tleVRvSGNsVGVycmFmb3JtKHN0cnVjdCEuY3J5cHRvS2V5KSxcbiAgICAgIGlzQmxvY2s6IHRydWUsXG4gICAgICB0eXBlOiBcImxpc3RcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwiRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25EYXRlU2hpZnRDb25maWdDcnlwdG9LZXlMaXN0XCIsXG4gICAgfSxcbiAgfTtcblxuICAvLyByZW1vdmUgdW5kZWZpbmVkIGF0dHJpYnV0ZXNcbiAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhhdHRycykuZmlsdGVyKChbXywgdmFsdWVdKSA9PiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlLnZhbHVlICE9PSB1bmRlZmluZWQpKTtcbn1cblxuZXhwb3J0IGNsYXNzIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRGF0ZVNoaWZ0Q29uZmlnT3V0cHV0UmVmZXJlbmNlIGV4dGVuZHMgY2RrdGYuQ29tcGxleE9iamVjdCB7XG4gIHByaXZhdGUgaXNFbXB0eU9iamVjdCA9IGZhbHNlO1xuXG4gIC8qKlxuICAqIEBwYXJhbSB0ZXJyYWZvcm1SZXNvdXJjZSBUaGUgcGFyZW50IHJlc291cmNlXG4gICogQHBhcmFtIHRlcnJhZm9ybUF0dHJpYnV0ZSBUaGUgYXR0cmlidXRlIG9uIHRoZSBwYXJlbnQgcmVzb3VyY2UgdGhpcyBjbGFzcyBpcyByZWZlcmVuY2luZ1xuICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IodGVycmFmb3JtUmVzb3VyY2U6IGNka3RmLklJbnRlcnBvbGF0aW5nUGFyZW50LCB0ZXJyYWZvcm1BdHRyaWJ1dGU6IHN0cmluZykge1xuICAgIHN1cGVyKHRlcnJhZm9ybVJlc291cmNlLCB0ZXJyYWZvcm1BdHRyaWJ1dGUsIGZhbHNlLCAwKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgaW50ZXJuYWxWYWx1ZSgpOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkRhdGVTaGlmdENvbmZpZyB8IHVuZGVmaW5lZCB7XG4gICAgbGV0IGhhc0FueVZhbHVlcyA9IHRoaXMuaXNFbXB0eU9iamVjdDtcbiAgICBjb25zdCBpbnRlcm5hbFZhbHVlUmVzdWx0OiBhbnkgPSB7fTtcbiAgICBpZiAodGhpcy5fbG93ZXJCb3VuZERheXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQubG93ZXJCb3VuZERheXMgPSB0aGlzLl9sb3dlckJvdW5kRGF5cztcbiAgICB9XG4gICAgaWYgKHRoaXMuX3VwcGVyQm91bmREYXlzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LnVwcGVyQm91bmREYXlzID0gdGhpcy5fdXBwZXJCb3VuZERheXM7XG4gICAgfVxuICAgIGlmICh0aGlzLl9jb250ZXh0Py5pbnRlcm5hbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LmNvbnRleHQgPSB0aGlzLl9jb250ZXh0Py5pbnRlcm5hbFZhbHVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5fY3J5cHRvS2V5Py5pbnRlcm5hbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LmNyeXB0b0tleSA9IHRoaXMuX2NyeXB0b0tleT8uaW50ZXJuYWxWYWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGhhc0FueVZhbHVlcyA/IGludGVybmFsVmFsdWVSZXN1bHQgOiB1bmRlZmluZWQ7XG4gIH1cblxuICBwdWJsaWMgc2V0IGludGVybmFsVmFsdWUodmFsdWU6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRGF0ZVNoaWZ0Q29uZmlnIHwgdW5kZWZpbmVkKSB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IGZhbHNlO1xuICAgICAgdGhpcy5fbG93ZXJCb3VuZERheXMgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl91cHBlckJvdW5kRGF5cyA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2NvbnRleHQuaW50ZXJuYWxWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2NyeXB0b0tleS5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggPT09IDA7XG4gICAgICB0aGlzLl9sb3dlckJvdW5kRGF5cyA9IHZhbHVlLmxvd2VyQm91bmREYXlzO1xuICAgICAgdGhpcy5fdXBwZXJCb3VuZERheXMgPSB2YWx1ZS51cHBlckJvdW5kRGF5cztcbiAgICAgIHRoaXMuX2NvbnRleHQuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlLmNvbnRleHQ7XG4gICAgICB0aGlzLl9jcnlwdG9LZXkuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlLmNyeXB0b0tleTtcbiAgICB9XG4gIH1cblxuICAvLyBsb3dlcl9ib3VuZF9kYXlzIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogZmFsc2UsIHJlcXVpcmVkOiB0cnVlXG4gIHByaXZhdGUgX2xvd2VyQm91bmREYXlzPzogbnVtYmVyOyBcbiAgcHVibGljIGdldCBsb3dlckJvdW5kRGF5cygpIHtcbiAgICByZXR1cm4gdGhpcy5nZXROdW1iZXJBdHRyaWJ1dGUoJ2xvd2VyX2JvdW5kX2RheXMnKTtcbiAgfVxuICBwdWJsaWMgc2V0IGxvd2VyQm91bmREYXlzKHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl9sb3dlckJvdW5kRGF5cyA9IHZhbHVlO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBsb3dlckJvdW5kRGF5c0lucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9sb3dlckJvdW5kRGF5cztcbiAgfVxuXG4gIC8vIHVwcGVyX2JvdW5kX2RheXMgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiBmYWxzZSwgcmVxdWlyZWQ6IHRydWVcbiAgcHJpdmF0ZSBfdXBwZXJCb3VuZERheXM/OiBudW1iZXI7IFxuICBwdWJsaWMgZ2V0IHVwcGVyQm91bmREYXlzKCkge1xuICAgIHJldHVybiB0aGlzLmdldE51bWJlckF0dHJpYnV0ZSgndXBwZXJfYm91bmRfZGF5cycpO1xuICB9XG4gIHB1YmxpYyBzZXQgdXBwZXJCb3VuZERheXModmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX3VwcGVyQm91bmREYXlzID0gdmFsdWU7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IHVwcGVyQm91bmREYXlzSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3VwcGVyQm91bmREYXlzO1xuICB9XG5cbiAgLy8gY29udGV4dCAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9jb250ZXh0ID0gbmV3IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRGF0ZVNoaWZ0Q29uZmlnQ29udGV4dE91dHB1dFJlZmVyZW5jZSh0aGlzLCBcImNvbnRleHRcIik7XG4gIHB1YmxpYyBnZXQgY29udGV4dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29udGV4dDtcbiAgfVxuICBwdWJsaWMgcHV0Q29udGV4dCh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25EYXRlU2hpZnRDb25maWdDb250ZXh0KSB7XG4gICAgdGhpcy5fY29udGV4dC5pbnRlcm5hbFZhbHVlID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0Q29udGV4dCgpIHtcbiAgICB0aGlzLl9jb250ZXh0LmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IGNvbnRleHRJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29udGV4dC5pbnRlcm5hbFZhbHVlO1xuICB9XG5cbiAgLy8gY3J5cHRvX2tleSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9jcnlwdG9LZXkgPSBuZXcgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25EYXRlU2hpZnRDb25maWdDcnlwdG9LZXlPdXRwdXRSZWZlcmVuY2UodGhpcywgXCJjcnlwdG9fa2V5XCIpO1xuICBwdWJsaWMgZ2V0IGNyeXB0b0tleSgpIHtcbiAgICByZXR1cm4gdGhpcy5fY3J5cHRvS2V5O1xuICB9XG4gIHB1YmxpYyBwdXRDcnlwdG9LZXkodmFsdWU6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRGF0ZVNoaWZ0Q29uZmlnQ3J5cHRvS2V5KSB7XG4gICAgdGhpcy5fY3J5cHRvS2V5LmludGVybmFsVmFsdWUgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRDcnlwdG9LZXkoKSB7XG4gICAgdGhpcy5fY3J5cHRvS2V5LmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IGNyeXB0b0tleUlucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9jcnlwdG9LZXkuaW50ZXJuYWxWYWx1ZTtcbiAgfVxufVxuZXhwb3J0IGludGVyZmFjZSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZ0xvd2VyQm91bmREYXRlVmFsdWUge1xuICAvKipcbiAgKiBEYXkgb2YgYSBtb250aC4gTXVzdCBiZSBmcm9tIDEgdG8gMzEgYW5kIHZhbGlkIGZvciB0aGUgeWVhciBhbmQgbW9udGgsIG9yIDAgdG8gc3BlY2lmeSBhIHllYXIgYnkgaXRzZWxmIG9yIGEgeWVhciBhbmQgbW9udGggd2hlcmUgdGhlIGRheSBpc24ndCBzaWduaWZpY2FudC5cbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjZGF5IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSNkYXl9XG4gICovXG4gIHJlYWRvbmx5IGRheT86IG51bWJlcjtcbiAgLyoqXG4gICogTW9udGggb2YgYSB5ZWFyLiBNdXN0IGJlIGZyb20gMSB0byAxMiwgb3IgMCB0byBzcGVjaWZ5IGEgeWVhciB3aXRob3V0IGEgbW9udGggYW5kIGRheS5cbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjbW9udGggRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI21vbnRofVxuICAqL1xuICByZWFkb25seSBtb250aD86IG51bWJlcjtcbiAgLyoqXG4gICogWWVhciBvZiB0aGUgZGF0ZS4gTXVzdCBiZSBmcm9tIDEgdG8gOTk5OSwgb3IgMCB0byBzcGVjaWZ5IGEgZGF0ZSB3aXRob3V0IGEgeWVhci5cbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjeWVhciBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjeWVhcn1cbiAgKi9cbiAgcmVhZG9ubHkgeWVhcj86IG51bWJlcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRml4ZWRTaXplQnVja2V0aW5nQ29uZmlnTG93ZXJCb3VuZERhdGVWYWx1ZVRvVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRml4ZWRTaXplQnVja2V0aW5nQ29uZmlnTG93ZXJCb3VuZERhdGVWYWx1ZU91dHB1dFJlZmVyZW5jZSB8IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRml4ZWRTaXplQnVja2V0aW5nQ29uZmlnTG93ZXJCb3VuZERhdGVWYWx1ZSk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpIHx8IGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIGlmIChjZGt0Zi5pc0NvbXBsZXhFbGVtZW50KHN0cnVjdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGNvbXBsZXggZWxlbWVudCB3YXMgdXNlZCBhcyBjb25maWd1cmF0aW9uLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQ6IGh0dHBzOi8vY2RrLnRmL2NvbXBsZXgtb2JqZWN0LWFzLWNvbmZpZ3VyYXRpb25cIik7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBkYXk6IGNka3RmLm51bWJlclRvVGVycmFmb3JtKHN0cnVjdCEuZGF5KSxcbiAgICBtb250aDogY2RrdGYubnVtYmVyVG9UZXJyYWZvcm0oc3RydWN0IS5tb250aCksXG4gICAgeWVhcjogY2RrdGYubnVtYmVyVG9UZXJyYWZvcm0oc3RydWN0IS55ZWFyKSxcbiAgfVxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZ0xvd2VyQm91bmREYXRlVmFsdWVUb0hjbFRlcnJhZm9ybShzdHJ1Y3Q/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZ0xvd2VyQm91bmREYXRlVmFsdWVPdXRwdXRSZWZlcmVuY2UgfCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZ0xvd2VyQm91bmREYXRlVmFsdWUpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIGNvbnN0IGF0dHJzID0ge1xuICAgIGRheToge1xuICAgICAgdmFsdWU6IGNka3RmLm51bWJlclRvSGNsVGVycmFmb3JtKHN0cnVjdCEuZGF5KSxcbiAgICAgIGlzQmxvY2s6IGZhbHNlLFxuICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwibnVtYmVyXCIsXG4gICAgfSxcbiAgICBtb250aDoge1xuICAgICAgdmFsdWU6IGNka3RmLm51bWJlclRvSGNsVGVycmFmb3JtKHN0cnVjdCEubW9udGgpLFxuICAgICAgaXNCbG9jazogZmFsc2UsXG4gICAgICB0eXBlOiBcInNpbXBsZVwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJudW1iZXJcIixcbiAgICB9LFxuICAgIHllYXI6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5udW1iZXJUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLnllYXIpLFxuICAgICAgaXNCbG9jazogZmFsc2UsXG4gICAgICB0eXBlOiBcInNpbXBsZVwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJudW1iZXJcIixcbiAgICB9LFxuICB9O1xuXG4gIC8vIHJlbW92ZSB1bmRlZmluZWQgYXR0cmlidXRlc1xuICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5lbnRyaWVzKGF0dHJzKS5maWx0ZXIoKFtfLCB2YWx1ZV0pID0+IHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUudmFsdWUgIT09IHVuZGVmaW5lZCkpO1xufVxuXG5leHBvcnQgY2xhc3MgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25GaXhlZFNpemVCdWNrZXRpbmdDb25maWdMb3dlckJvdW5kRGF0ZVZhbHVlT3V0cHV0UmVmZXJlbmNlIGV4dGVuZHMgY2RrdGYuQ29tcGxleE9iamVjdCB7XG4gIHByaXZhdGUgaXNFbXB0eU9iamVjdCA9IGZhbHNlO1xuXG4gIC8qKlxuICAqIEBwYXJhbSB0ZXJyYWZvcm1SZXNvdXJjZSBUaGUgcGFyZW50IHJlc291cmNlXG4gICogQHBhcmFtIHRlcnJhZm9ybUF0dHJpYnV0ZSBUaGUgYXR0cmlidXRlIG9uIHRoZSBwYXJlbnQgcmVzb3VyY2UgdGhpcyBjbGFzcyBpcyByZWZlcmVuY2luZ1xuICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IodGVycmFmb3JtUmVzb3VyY2U6IGNka3RmLklJbnRlcnBvbGF0aW5nUGFyZW50LCB0ZXJyYWZvcm1BdHRyaWJ1dGU6IHN0cmluZykge1xuICAgIHN1cGVyKHRlcnJhZm9ybVJlc291cmNlLCB0ZXJyYWZvcm1BdHRyaWJ1dGUsIGZhbHNlLCAwKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgaW50ZXJuYWxWYWx1ZSgpOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZ0xvd2VyQm91bmREYXRlVmFsdWUgfCB1bmRlZmluZWQge1xuICAgIGxldCBoYXNBbnlWYWx1ZXMgPSB0aGlzLmlzRW1wdHlPYmplY3Q7XG4gICAgY29uc3QgaW50ZXJuYWxWYWx1ZVJlc3VsdDogYW55ID0ge307XG4gICAgaWYgKHRoaXMuX2RheSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC5kYXkgPSB0aGlzLl9kYXk7XG4gICAgfVxuICAgIGlmICh0aGlzLl9tb250aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC5tb250aCA9IHRoaXMuX21vbnRoO1xuICAgIH1cbiAgICBpZiAodGhpcy5feWVhciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC55ZWFyID0gdGhpcy5feWVhcjtcbiAgICB9XG4gICAgcmV0dXJuIGhhc0FueVZhbHVlcyA/IGludGVybmFsVmFsdWVSZXN1bHQgOiB1bmRlZmluZWQ7XG4gIH1cblxuICBwdWJsaWMgc2V0IGludGVybmFsVmFsdWUodmFsdWU6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRml4ZWRTaXplQnVja2V0aW5nQ29uZmlnTG93ZXJCb3VuZERhdGVWYWx1ZSB8IHVuZGVmaW5lZCkge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmlzRW1wdHlPYmplY3QgPSBmYWxzZTtcbiAgICAgIHRoaXMuX2RheSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX21vbnRoID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5feWVhciA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLmlzRW1wdHlPYmplY3QgPSBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoID09PSAwO1xuICAgICAgdGhpcy5fZGF5ID0gdmFsdWUuZGF5O1xuICAgICAgdGhpcy5fbW9udGggPSB2YWx1ZS5tb250aDtcbiAgICAgIHRoaXMuX3llYXIgPSB2YWx1ZS55ZWFyO1xuICAgIH1cbiAgfVxuXG4gIC8vIGRheSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9kYXk/OiBudW1iZXI7IFxuICBwdWJsaWMgZ2V0IGRheSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXROdW1iZXJBdHRyaWJ1dGUoJ2RheScpO1xuICB9XG4gIHB1YmxpYyBzZXQgZGF5KHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl9kYXkgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXREYXkoKSB7XG4gICAgdGhpcy5fZGF5ID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBkYXlJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGF5O1xuICB9XG5cbiAgLy8gbW9udGggLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfbW9udGg/OiBudW1iZXI7IFxuICBwdWJsaWMgZ2V0IG1vbnRoKCkge1xuICAgIHJldHVybiB0aGlzLmdldE51bWJlckF0dHJpYnV0ZSgnbW9udGgnKTtcbiAgfVxuICBwdWJsaWMgc2V0IG1vbnRoKHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl9tb250aCA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldE1vbnRoKCkge1xuICAgIHRoaXMuX21vbnRoID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBtb250aElucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9tb250aDtcbiAgfVxuXG4gIC8vIHllYXIgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfeWVhcj86IG51bWJlcjsgXG4gIHB1YmxpYyBnZXQgeWVhcigpIHtcbiAgICByZXR1cm4gdGhpcy5nZXROdW1iZXJBdHRyaWJ1dGUoJ3llYXInKTtcbiAgfVxuICBwdWJsaWMgc2V0IHllYXIodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX3llYXIgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRZZWFyKCkge1xuICAgIHRoaXMuX3llYXIgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IHllYXJJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5feWVhcjtcbiAgfVxufVxuZXhwb3J0IGludGVyZmFjZSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZ0xvd2VyQm91bmRUaW1lVmFsdWUge1xuICAvKipcbiAgKiBIb3VycyBvZiBkYXkgaW4gMjQgaG91ciBmb3JtYXQuIFNob3VsZCBiZSBmcm9tIDAgdG8gMjMuIEFuIEFQSSBtYXkgY2hvb3NlIHRvIGFsbG93IHRoZSB2YWx1ZSBcIjI0OjAwOjAwXCIgZm9yIHNjZW5hcmlvcyBsaWtlIGJ1c2luZXNzIGNsb3NpbmcgdGltZS5cbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjaG91cnMgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI2hvdXJzfVxuICAqL1xuICByZWFkb25seSBob3Vycz86IG51bWJlcjtcbiAgLyoqXG4gICogTWludXRlcyBvZiBob3VyIG9mIGRheS4gTXVzdCBiZSBmcm9tIDAgdG8gNTkuXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI21pbnV0ZXMgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI21pbnV0ZXN9XG4gICovXG4gIHJlYWRvbmx5IG1pbnV0ZXM/OiBudW1iZXI7XG4gIC8qKlxuICAqIEZyYWN0aW9ucyBvZiBzZWNvbmRzIGluIG5hbm9zZWNvbmRzLiBNdXN0IGJlIGZyb20gMCB0byA5OTksOTk5LDk5OS5cbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjbmFub3MgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI25hbm9zfVxuICAqL1xuICByZWFkb25seSBuYW5vcz86IG51bWJlcjtcbiAgLyoqXG4gICogU2Vjb25kcyBvZiBtaW51dGVzIG9mIHRoZSB0aW1lLiBNdXN0IG5vcm1hbGx5IGJlIGZyb20gMCB0byA1OS4gQW4gQVBJIG1heSBhbGxvdyB0aGUgdmFsdWUgNjAgaWYgaXQgYWxsb3dzIGxlYXAtc2Vjb25kcy5cbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjc2Vjb25kcyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjc2Vjb25kc31cbiAgKi9cbiAgcmVhZG9ubHkgc2Vjb25kcz86IG51bWJlcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRml4ZWRTaXplQnVja2V0aW5nQ29uZmlnTG93ZXJCb3VuZFRpbWVWYWx1ZVRvVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRml4ZWRTaXplQnVja2V0aW5nQ29uZmlnTG93ZXJCb3VuZFRpbWVWYWx1ZU91dHB1dFJlZmVyZW5jZSB8IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRml4ZWRTaXplQnVja2V0aW5nQ29uZmlnTG93ZXJCb3VuZFRpbWVWYWx1ZSk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpIHx8IGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIGlmIChjZGt0Zi5pc0NvbXBsZXhFbGVtZW50KHN0cnVjdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGNvbXBsZXggZWxlbWVudCB3YXMgdXNlZCBhcyBjb25maWd1cmF0aW9uLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQ6IGh0dHBzOi8vY2RrLnRmL2NvbXBsZXgtb2JqZWN0LWFzLWNvbmZpZ3VyYXRpb25cIik7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBob3VyczogY2RrdGYubnVtYmVyVG9UZXJyYWZvcm0oc3RydWN0IS5ob3VycyksXG4gICAgbWludXRlczogY2RrdGYubnVtYmVyVG9UZXJyYWZvcm0oc3RydWN0IS5taW51dGVzKSxcbiAgICBuYW5vczogY2RrdGYubnVtYmVyVG9UZXJyYWZvcm0oc3RydWN0IS5uYW5vcyksXG4gICAgc2Vjb25kczogY2RrdGYubnVtYmVyVG9UZXJyYWZvcm0oc3RydWN0IS5zZWNvbmRzKSxcbiAgfVxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZ0xvd2VyQm91bmRUaW1lVmFsdWVUb0hjbFRlcnJhZm9ybShzdHJ1Y3Q/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZ0xvd2VyQm91bmRUaW1lVmFsdWVPdXRwdXRSZWZlcmVuY2UgfCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZ0xvd2VyQm91bmRUaW1lVmFsdWUpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIGNvbnN0IGF0dHJzID0ge1xuICAgIGhvdXJzOiB7XG4gICAgICB2YWx1ZTogY2RrdGYubnVtYmVyVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5ob3VycyksXG4gICAgICBpc0Jsb2NrOiBmYWxzZSxcbiAgICAgIHR5cGU6IFwic2ltcGxlXCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcIm51bWJlclwiLFxuICAgIH0sXG4gICAgbWludXRlczoge1xuICAgICAgdmFsdWU6IGNka3RmLm51bWJlclRvSGNsVGVycmFmb3JtKHN0cnVjdCEubWludXRlcyksXG4gICAgICBpc0Jsb2NrOiBmYWxzZSxcbiAgICAgIHR5cGU6IFwic2ltcGxlXCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcIm51bWJlclwiLFxuICAgIH0sXG4gICAgbmFub3M6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5udW1iZXJUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLm5hbm9zKSxcbiAgICAgIGlzQmxvY2s6IGZhbHNlLFxuICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwibnVtYmVyXCIsXG4gICAgfSxcbiAgICBzZWNvbmRzOiB7XG4gICAgICB2YWx1ZTogY2RrdGYubnVtYmVyVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5zZWNvbmRzKSxcbiAgICAgIGlzQmxvY2s6IGZhbHNlLFxuICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwibnVtYmVyXCIsXG4gICAgfSxcbiAgfTtcblxuICAvLyByZW1vdmUgdW5kZWZpbmVkIGF0dHJpYnV0ZXNcbiAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhhdHRycykuZmlsdGVyKChbXywgdmFsdWVdKSA9PiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlLnZhbHVlICE9PSB1bmRlZmluZWQpKTtcbn1cblxuZXhwb3J0IGNsYXNzIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRml4ZWRTaXplQnVja2V0aW5nQ29uZmlnTG93ZXJCb3VuZFRpbWVWYWx1ZU91dHB1dFJlZmVyZW5jZSBleHRlbmRzIGNka3RmLkNvbXBsZXhPYmplY3Qge1xuICBwcml2YXRlIGlzRW1wdHlPYmplY3QgPSBmYWxzZTtcblxuICAvKipcbiAgKiBAcGFyYW0gdGVycmFmb3JtUmVzb3VyY2UgVGhlIHBhcmVudCByZXNvdXJjZVxuICAqIEBwYXJhbSB0ZXJyYWZvcm1BdHRyaWJ1dGUgVGhlIGF0dHJpYnV0ZSBvbiB0aGUgcGFyZW50IHJlc291cmNlIHRoaXMgY2xhc3MgaXMgcmVmZXJlbmNpbmdcbiAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHRlcnJhZm9ybVJlc291cmNlOiBjZGt0Zi5JSW50ZXJwb2xhdGluZ1BhcmVudCwgdGVycmFmb3JtQXR0cmlidXRlOiBzdHJpbmcpIHtcbiAgICBzdXBlcih0ZXJyYWZvcm1SZXNvdXJjZSwgdGVycmFmb3JtQXR0cmlidXRlLCBmYWxzZSwgMCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGludGVybmFsVmFsdWUoKTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25GaXhlZFNpemVCdWNrZXRpbmdDb25maWdMb3dlckJvdW5kVGltZVZhbHVlIHwgdW5kZWZpbmVkIHtcbiAgICBsZXQgaGFzQW55VmFsdWVzID0gdGhpcy5pc0VtcHR5T2JqZWN0O1xuICAgIGNvbnN0IGludGVybmFsVmFsdWVSZXN1bHQ6IGFueSA9IHt9O1xuICAgIGlmICh0aGlzLl9ob3VycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC5ob3VycyA9IHRoaXMuX2hvdXJzO1xuICAgIH1cbiAgICBpZiAodGhpcy5fbWludXRlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC5taW51dGVzID0gdGhpcy5fbWludXRlcztcbiAgICB9XG4gICAgaWYgKHRoaXMuX25hbm9zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0Lm5hbm9zID0gdGhpcy5fbmFub3M7XG4gICAgfVxuICAgIGlmICh0aGlzLl9zZWNvbmRzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LnNlY29uZHMgPSB0aGlzLl9zZWNvbmRzO1xuICAgIH1cbiAgICByZXR1cm4gaGFzQW55VmFsdWVzID8gaW50ZXJuYWxWYWx1ZVJlc3VsdCA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgaW50ZXJuYWxWYWx1ZSh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25GaXhlZFNpemVCdWNrZXRpbmdDb25maWdMb3dlckJvdW5kVGltZVZhbHVlIHwgdW5kZWZpbmVkKSB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IGZhbHNlO1xuICAgICAgdGhpcy5faG91cnMgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9taW51dGVzID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fbmFub3MgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9zZWNvbmRzID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggPT09IDA7XG4gICAgICB0aGlzLl9ob3VycyA9IHZhbHVlLmhvdXJzO1xuICAgICAgdGhpcy5fbWludXRlcyA9IHZhbHVlLm1pbnV0ZXM7XG4gICAgICB0aGlzLl9uYW5vcyA9IHZhbHVlLm5hbm9zO1xuICAgICAgdGhpcy5fc2Vjb25kcyA9IHZhbHVlLnNlY29uZHM7XG4gICAgfVxuICB9XG5cbiAgLy8gaG91cnMgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfaG91cnM/OiBudW1iZXI7IFxuICBwdWJsaWMgZ2V0IGhvdXJzKCkge1xuICAgIHJldHVybiB0aGlzLmdldE51bWJlckF0dHJpYnV0ZSgnaG91cnMnKTtcbiAgfVxuICBwdWJsaWMgc2V0IGhvdXJzKHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl9ob3VycyA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldEhvdXJzKCkge1xuICAgIHRoaXMuX2hvdXJzID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBob3Vyc0lucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9ob3VycztcbiAgfVxuXG4gIC8vIG1pbnV0ZXMgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfbWludXRlcz86IG51bWJlcjsgXG4gIHB1YmxpYyBnZXQgbWludXRlcygpIHtcbiAgICByZXR1cm4gdGhpcy5nZXROdW1iZXJBdHRyaWJ1dGUoJ21pbnV0ZXMnKTtcbiAgfVxuICBwdWJsaWMgc2V0IG1pbnV0ZXModmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX21pbnV0ZXMgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRNaW51dGVzKCkge1xuICAgIHRoaXMuX21pbnV0ZXMgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IG1pbnV0ZXNJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fbWludXRlcztcbiAgfVxuXG4gIC8vIG5hbm9zIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX25hbm9zPzogbnVtYmVyOyBcbiAgcHVibGljIGdldCBuYW5vcygpIHtcbiAgICByZXR1cm4gdGhpcy5nZXROdW1iZXJBdHRyaWJ1dGUoJ25hbm9zJyk7XG4gIH1cbiAgcHVibGljIHNldCBuYW5vcyh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5fbmFub3MgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXROYW5vcygpIHtcbiAgICB0aGlzLl9uYW5vcyA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgbmFub3NJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fbmFub3M7XG4gIH1cblxuICAvLyBzZWNvbmRzIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX3NlY29uZHM/OiBudW1iZXI7IFxuICBwdWJsaWMgZ2V0IHNlY29uZHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TnVtYmVyQXR0cmlidXRlKCdzZWNvbmRzJyk7XG4gIH1cbiAgcHVibGljIHNldCBzZWNvbmRzKHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl9zZWNvbmRzID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0U2Vjb25kcygpIHtcbiAgICB0aGlzLl9zZWNvbmRzID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBzZWNvbmRzSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NlY29uZHM7XG4gIH1cbn1cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25GaXhlZFNpemVCdWNrZXRpbmdDb25maWdMb3dlckJvdW5kIHtcbiAgLyoqXG4gICogQSBib29sZWFuIHZhbHVlLlxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNib29sZWFuX3ZhbHVlIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSNib29sZWFuX3ZhbHVlfVxuICAqL1xuICByZWFkb25seSBib29sZWFuVmFsdWU/OiBib29sZWFuIHwgY2RrdGYuSVJlc29sdmFibGU7XG4gIC8qKlxuICAqIFJlcHJlc2VudHMgYSBkYXkgb2YgdGhlIHdlZWsuIFBvc3NpYmxlIHZhbHVlczogW1wiTU9OREFZXCIsIFwiVFVFU0RBWVwiLCBcIldFRE5FU0RBWVwiLCBcIlRIVVJTREFZXCIsIFwiRlJJREFZXCIsIFwiU0FUVVJEQVlcIiwgXCJTVU5EQVlcIl1cbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjZGF5X29mX3dlZWtfdmFsdWUgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI2RheV9vZl93ZWVrX3ZhbHVlfVxuICAqL1xuICByZWFkb25seSBkYXlPZldlZWtWYWx1ZT86IHN0cmluZztcbiAgLyoqXG4gICogQSBmbG9hdCB2YWx1ZS5cbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjZmxvYXRfdmFsdWUgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI2Zsb2F0X3ZhbHVlfVxuICAqL1xuICByZWFkb25seSBmbG9hdFZhbHVlPzogbnVtYmVyO1xuICAvKipcbiAgKiBBbiBpbnRlZ2VyIHZhbHVlIChpbnQ2NCBmb3JtYXQpXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI2ludGVnZXJfdmFsdWUgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI2ludGVnZXJfdmFsdWV9XG4gICovXG4gIHJlYWRvbmx5IGludGVnZXJWYWx1ZT86IHN0cmluZztcbiAgLyoqXG4gICogQSBzdHJpbmcgdmFsdWUuXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI3N0cmluZ192YWx1ZSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjc3RyaW5nX3ZhbHVlfVxuICAqL1xuICByZWFkb25seSBzdHJpbmdWYWx1ZT86IHN0cmluZztcbiAgLyoqXG4gICogQSB0aW1lc3RhbXAgaW4gUkZDMzMzOSBVVEMgXCJadWx1XCIgZm9ybWF0LCB3aXRoIG5hbm9zZWNvbmQgcmVzb2x1dGlvbiBhbmQgdXAgdG8gbmluZSBmcmFjdGlvbmFsIGRpZ2l0cy4gRXhhbXBsZXM6IFwiMjAxNC0xMC0wMlQxNTowMToyM1pcIiBhbmQgXCIyMDE0LTEwLTAyVDE1OjAxOjIzLjA0NTEyMzQ1NlpcIi5cbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjdGltZXN0YW1wX3ZhbHVlIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSN0aW1lc3RhbXBfdmFsdWV9XG4gICovXG4gIHJlYWRvbmx5IHRpbWVzdGFtcFZhbHVlPzogc3RyaW5nO1xuICAvKipcbiAgKiBkYXRlX3ZhbHVlIGJsb2NrXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI2RhdGVfdmFsdWUgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI2RhdGVfdmFsdWV9XG4gICovXG4gIHJlYWRvbmx5IGRhdGVWYWx1ZT86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRml4ZWRTaXplQnVja2V0aW5nQ29uZmlnTG93ZXJCb3VuZERhdGVWYWx1ZTtcbiAgLyoqXG4gICogdGltZV92YWx1ZSBibG9ja1xuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSN0aW1lX3ZhbHVlIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSN0aW1lX3ZhbHVlfVxuICAqL1xuICByZWFkb25seSB0aW1lVmFsdWU/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZ0xvd2VyQm91bmRUaW1lVmFsdWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZ0xvd2VyQm91bmRUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZ0xvd2VyQm91bmRPdXRwdXRSZWZlcmVuY2UgfCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZ0xvd2VyQm91bmQpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIHJldHVybiB7XG4gICAgYm9vbGVhbl92YWx1ZTogY2RrdGYuYm9vbGVhblRvVGVycmFmb3JtKHN0cnVjdCEuYm9vbGVhblZhbHVlKSxcbiAgICBkYXlfb2Zfd2Vla192YWx1ZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5kYXlPZldlZWtWYWx1ZSksXG4gICAgZmxvYXRfdmFsdWU6IGNka3RmLm51bWJlclRvVGVycmFmb3JtKHN0cnVjdCEuZmxvYXRWYWx1ZSksXG4gICAgaW50ZWdlcl92YWx1ZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5pbnRlZ2VyVmFsdWUpLFxuICAgIHN0cmluZ192YWx1ZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5zdHJpbmdWYWx1ZSksXG4gICAgdGltZXN0YW1wX3ZhbHVlOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLnRpbWVzdGFtcFZhbHVlKSxcbiAgICBkYXRlX3ZhbHVlOiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZ0xvd2VyQm91bmREYXRlVmFsdWVUb1RlcnJhZm9ybShzdHJ1Y3QhLmRhdGVWYWx1ZSksXG4gICAgdGltZV92YWx1ZTogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25GaXhlZFNpemVCdWNrZXRpbmdDb25maWdMb3dlckJvdW5kVGltZVZhbHVlVG9UZXJyYWZvcm0oc3RydWN0IS50aW1lVmFsdWUpLFxuICB9XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRml4ZWRTaXplQnVja2V0aW5nQ29uZmlnTG93ZXJCb3VuZFRvSGNsVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRml4ZWRTaXplQnVja2V0aW5nQ29uZmlnTG93ZXJCb3VuZE91dHB1dFJlZmVyZW5jZSB8IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRml4ZWRTaXplQnVja2V0aW5nQ29uZmlnTG93ZXJCb3VuZCk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpIHx8IGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIGlmIChjZGt0Zi5pc0NvbXBsZXhFbGVtZW50KHN0cnVjdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGNvbXBsZXggZWxlbWVudCB3YXMgdXNlZCBhcyBjb25maWd1cmF0aW9uLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQ6IGh0dHBzOi8vY2RrLnRmL2NvbXBsZXgtb2JqZWN0LWFzLWNvbmZpZ3VyYXRpb25cIik7XG4gIH1cbiAgY29uc3QgYXR0cnMgPSB7XG4gICAgYm9vbGVhbl92YWx1ZToge1xuICAgICAgdmFsdWU6IGNka3RmLmJvb2xlYW5Ub0hjbFRlcnJhZm9ybShzdHJ1Y3QhLmJvb2xlYW5WYWx1ZSksXG4gICAgICBpc0Jsb2NrOiBmYWxzZSxcbiAgICAgIHR5cGU6IFwic2ltcGxlXCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcImJvb2xlYW5cIixcbiAgICB9LFxuICAgIGRheV9vZl93ZWVrX3ZhbHVlOiB7XG4gICAgICB2YWx1ZTogY2RrdGYuc3RyaW5nVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5kYXlPZldlZWtWYWx1ZSksXG4gICAgICBpc0Jsb2NrOiBmYWxzZSxcbiAgICAgIHR5cGU6IFwic2ltcGxlXCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcInN0cmluZ1wiLFxuICAgIH0sXG4gICAgZmxvYXRfdmFsdWU6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5udW1iZXJUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLmZsb2F0VmFsdWUpLFxuICAgICAgaXNCbG9jazogZmFsc2UsXG4gICAgICB0eXBlOiBcInNpbXBsZVwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJudW1iZXJcIixcbiAgICB9LFxuICAgIGludGVnZXJfdmFsdWU6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5zdHJpbmdUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLmludGVnZXJWYWx1ZSksXG4gICAgICBpc0Jsb2NrOiBmYWxzZSxcbiAgICAgIHR5cGU6IFwic2ltcGxlXCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcInN0cmluZ1wiLFxuICAgIH0sXG4gICAgc3RyaW5nX3ZhbHVlOiB7XG4gICAgICB2YWx1ZTogY2RrdGYuc3RyaW5nVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5zdHJpbmdWYWx1ZSksXG4gICAgICBpc0Jsb2NrOiBmYWxzZSxcbiAgICAgIHR5cGU6IFwic2ltcGxlXCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcInN0cmluZ1wiLFxuICAgIH0sXG4gICAgdGltZXN0YW1wX3ZhbHVlOiB7XG4gICAgICB2YWx1ZTogY2RrdGYuc3RyaW5nVG9IY2xUZXJyYWZvcm0oc3RydWN0IS50aW1lc3RhbXBWYWx1ZSksXG4gICAgICBpc0Jsb2NrOiBmYWxzZSxcbiAgICAgIHR5cGU6IFwic2ltcGxlXCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcInN0cmluZ1wiLFxuICAgIH0sXG4gICAgZGF0ZV92YWx1ZToge1xuICAgICAgdmFsdWU6IGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRml4ZWRTaXplQnVja2V0aW5nQ29uZmlnTG93ZXJCb3VuZERhdGVWYWx1ZVRvSGNsVGVycmFmb3JtKHN0cnVjdCEuZGF0ZVZhbHVlKSxcbiAgICAgIGlzQmxvY2s6IHRydWUsXG4gICAgICB0eXBlOiBcImxpc3RcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwiRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25GaXhlZFNpemVCdWNrZXRpbmdDb25maWdMb3dlckJvdW5kRGF0ZVZhbHVlTGlzdFwiLFxuICAgIH0sXG4gICAgdGltZV92YWx1ZToge1xuICAgICAgdmFsdWU6IGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRml4ZWRTaXplQnVja2V0aW5nQ29uZmlnTG93ZXJCb3VuZFRpbWVWYWx1ZVRvSGNsVGVycmFmb3JtKHN0cnVjdCEudGltZVZhbHVlKSxcbiAgICAgIGlzQmxvY2s6IHRydWUsXG4gICAgICB0eXBlOiBcImxpc3RcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwiRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25GaXhlZFNpemVCdWNrZXRpbmdDb25maWdMb3dlckJvdW5kVGltZVZhbHVlTGlzdFwiLFxuICAgIH0sXG4gIH07XG5cbiAgLy8gcmVtb3ZlIHVuZGVmaW5lZCBhdHRyaWJ1dGVzXG4gIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMoYXR0cnMpLmZpbHRlcigoW18sIHZhbHVlXSkgPT4gdmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZS52YWx1ZSAhPT0gdW5kZWZpbmVkKSk7XG59XG5cbmV4cG9ydCBjbGFzcyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZ0xvd2VyQm91bmRPdXRwdXRSZWZlcmVuY2UgZXh0ZW5kcyBjZGt0Zi5Db21wbGV4T2JqZWN0IHtcbiAgcHJpdmF0ZSBpc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG5cbiAgLyoqXG4gICogQHBhcmFtIHRlcnJhZm9ybVJlc291cmNlIFRoZSBwYXJlbnQgcmVzb3VyY2VcbiAgKiBAcGFyYW0gdGVycmFmb3JtQXR0cmlidXRlIFRoZSBhdHRyaWJ1dGUgb24gdGhlIHBhcmVudCByZXNvdXJjZSB0aGlzIGNsYXNzIGlzIHJlZmVyZW5jaW5nXG4gICovXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcih0ZXJyYWZvcm1SZXNvdXJjZTogY2RrdGYuSUludGVycG9sYXRpbmdQYXJlbnQsIHRlcnJhZm9ybUF0dHJpYnV0ZTogc3RyaW5nKSB7XG4gICAgc3VwZXIodGVycmFmb3JtUmVzb3VyY2UsIHRlcnJhZm9ybUF0dHJpYnV0ZSwgZmFsc2UsIDApO1xuICB9XG5cbiAgcHVibGljIGdldCBpbnRlcm5hbFZhbHVlKCk6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRml4ZWRTaXplQnVja2V0aW5nQ29uZmlnTG93ZXJCb3VuZCB8IHVuZGVmaW5lZCB7XG4gICAgbGV0IGhhc0FueVZhbHVlcyA9IHRoaXMuaXNFbXB0eU9iamVjdDtcbiAgICBjb25zdCBpbnRlcm5hbFZhbHVlUmVzdWx0OiBhbnkgPSB7fTtcbiAgICBpZiAodGhpcy5fYm9vbGVhblZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LmJvb2xlYW5WYWx1ZSA9IHRoaXMuX2Jvb2xlYW5WYWx1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2RheU9mV2Vla1ZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LmRheU9mV2Vla1ZhbHVlID0gdGhpcy5fZGF5T2ZXZWVrVmFsdWU7XG4gICAgfVxuICAgIGlmICh0aGlzLl9mbG9hdFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LmZsb2F0VmFsdWUgPSB0aGlzLl9mbG9hdFZhbHVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5faW50ZWdlclZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LmludGVnZXJWYWx1ZSA9IHRoaXMuX2ludGVnZXJWYWx1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3N0cmluZ1ZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LnN0cmluZ1ZhbHVlID0gdGhpcy5fc3RyaW5nVmFsdWU7XG4gICAgfVxuICAgIGlmICh0aGlzLl90aW1lc3RhbXBWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC50aW1lc3RhbXBWYWx1ZSA9IHRoaXMuX3RpbWVzdGFtcFZhbHVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5fZGF0ZVZhbHVlPy5pbnRlcm5hbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LmRhdGVWYWx1ZSA9IHRoaXMuX2RhdGVWYWx1ZT8uaW50ZXJuYWxWYWx1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3RpbWVWYWx1ZT8uaW50ZXJuYWxWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC50aW1lVmFsdWUgPSB0aGlzLl90aW1lVmFsdWU/LmludGVybmFsVmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBoYXNBbnlWYWx1ZXMgPyBpbnRlcm5hbFZhbHVlUmVzdWx0IDogdW5kZWZpbmVkO1xuICB9XG5cbiAgcHVibGljIHNldCBpbnRlcm5hbFZhbHVlKHZhbHVlOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZ0xvd2VyQm91bmQgfCB1bmRlZmluZWQpIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5pc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG4gICAgICB0aGlzLl9ib29sZWFuVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9kYXlPZldlZWtWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2Zsb2F0VmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9pbnRlZ2VyVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9zdHJpbmdWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX3RpbWVzdGFtcFZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fZGF0ZVZhbHVlLmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl90aW1lVmFsdWUuaW50ZXJuYWxWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLmlzRW1wdHlPYmplY3QgPSBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoID09PSAwO1xuICAgICAgdGhpcy5fYm9vbGVhblZhbHVlID0gdmFsdWUuYm9vbGVhblZhbHVlO1xuICAgICAgdGhpcy5fZGF5T2ZXZWVrVmFsdWUgPSB2YWx1ZS5kYXlPZldlZWtWYWx1ZTtcbiAgICAgIHRoaXMuX2Zsb2F0VmFsdWUgPSB2YWx1ZS5mbG9hdFZhbHVlO1xuICAgICAgdGhpcy5faW50ZWdlclZhbHVlID0gdmFsdWUuaW50ZWdlclZhbHVlO1xuICAgICAgdGhpcy5fc3RyaW5nVmFsdWUgPSB2YWx1ZS5zdHJpbmdWYWx1ZTtcbiAgICAgIHRoaXMuX3RpbWVzdGFtcFZhbHVlID0gdmFsdWUudGltZXN0YW1wVmFsdWU7XG4gICAgICB0aGlzLl9kYXRlVmFsdWUuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlLmRhdGVWYWx1ZTtcbiAgICAgIHRoaXMuX3RpbWVWYWx1ZS5pbnRlcm5hbFZhbHVlID0gdmFsdWUudGltZVZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIC8vIGJvb2xlYW5fdmFsdWUgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfYm9vbGVhblZhbHVlPzogYm9vbGVhbiB8IGNka3RmLklSZXNvbHZhYmxlOyBcbiAgcHVibGljIGdldCBib29sZWFuVmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0Qm9vbGVhbkF0dHJpYnV0ZSgnYm9vbGVhbl92YWx1ZScpO1xuICB9XG4gIHB1YmxpYyBzZXQgYm9vbGVhblZhbHVlKHZhbHVlOiBib29sZWFuIHwgY2RrdGYuSVJlc29sdmFibGUpIHtcbiAgICB0aGlzLl9ib29sZWFuVmFsdWUgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRCb29sZWFuVmFsdWUoKSB7XG4gICAgdGhpcy5fYm9vbGVhblZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBib29sZWFuVmFsdWVJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fYm9vbGVhblZhbHVlO1xuICB9XG5cbiAgLy8gZGF5X29mX3dlZWtfdmFsdWUgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfZGF5T2ZXZWVrVmFsdWU/OiBzdHJpbmc7IFxuICBwdWJsaWMgZ2V0IGRheU9mV2Vla1ZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgnZGF5X29mX3dlZWtfdmFsdWUnKTtcbiAgfVxuICBwdWJsaWMgc2V0IGRheU9mV2Vla1ZhbHVlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9kYXlPZldlZWtWYWx1ZSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldERheU9mV2Vla1ZhbHVlKCkge1xuICAgIHRoaXMuX2RheU9mV2Vla1ZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBkYXlPZldlZWtWYWx1ZUlucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9kYXlPZldlZWtWYWx1ZTtcbiAgfVxuXG4gIC8vIGZsb2F0X3ZhbHVlIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX2Zsb2F0VmFsdWU/OiBudW1iZXI7IFxuICBwdWJsaWMgZ2V0IGZsb2F0VmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TnVtYmVyQXR0cmlidXRlKCdmbG9hdF92YWx1ZScpO1xuICB9XG4gIHB1YmxpYyBzZXQgZmxvYXRWYWx1ZSh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5fZmxvYXRWYWx1ZSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldEZsb2F0VmFsdWUoKSB7XG4gICAgdGhpcy5fZmxvYXRWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgZmxvYXRWYWx1ZUlucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9mbG9hdFZhbHVlO1xuICB9XG5cbiAgLy8gaW50ZWdlcl92YWx1ZSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9pbnRlZ2VyVmFsdWU/OiBzdHJpbmc7IFxuICBwdWJsaWMgZ2V0IGludGVnZXJWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ2ludGVnZXJfdmFsdWUnKTtcbiAgfVxuICBwdWJsaWMgc2V0IGludGVnZXJWYWx1ZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5faW50ZWdlclZhbHVlID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0SW50ZWdlclZhbHVlKCkge1xuICAgIHRoaXMuX2ludGVnZXJWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgaW50ZWdlclZhbHVlSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ludGVnZXJWYWx1ZTtcbiAgfVxuXG4gIC8vIHN0cmluZ192YWx1ZSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9zdHJpbmdWYWx1ZT86IHN0cmluZzsgXG4gIHB1YmxpYyBnZXQgc3RyaW5nVmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCdzdHJpbmdfdmFsdWUnKTtcbiAgfVxuICBwdWJsaWMgc2V0IHN0cmluZ1ZhbHVlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9zdHJpbmdWYWx1ZSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldFN0cmluZ1ZhbHVlKCkge1xuICAgIHRoaXMuX3N0cmluZ1ZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBzdHJpbmdWYWx1ZUlucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9zdHJpbmdWYWx1ZTtcbiAgfVxuXG4gIC8vIHRpbWVzdGFtcF92YWx1ZSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF90aW1lc3RhbXBWYWx1ZT86IHN0cmluZzsgXG4gIHB1YmxpYyBnZXQgdGltZXN0YW1wVmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCd0aW1lc3RhbXBfdmFsdWUnKTtcbiAgfVxuICBwdWJsaWMgc2V0IHRpbWVzdGFtcFZhbHVlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl90aW1lc3RhbXBWYWx1ZSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldFRpbWVzdGFtcFZhbHVlKCkge1xuICAgIHRoaXMuX3RpbWVzdGFtcFZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCB0aW1lc3RhbXBWYWx1ZUlucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl90aW1lc3RhbXBWYWx1ZTtcbiAgfVxuXG4gIC8vIGRhdGVfdmFsdWUgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfZGF0ZVZhbHVlID0gbmV3IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRml4ZWRTaXplQnVja2V0aW5nQ29uZmlnTG93ZXJCb3VuZERhdGVWYWx1ZU91dHB1dFJlZmVyZW5jZSh0aGlzLCBcImRhdGVfdmFsdWVcIik7XG4gIHB1YmxpYyBnZXQgZGF0ZVZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLl9kYXRlVmFsdWU7XG4gIH1cbiAgcHVibGljIHB1dERhdGVWYWx1ZSh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25GaXhlZFNpemVCdWNrZXRpbmdDb25maWdMb3dlckJvdW5kRGF0ZVZhbHVlKSB7XG4gICAgdGhpcy5fZGF0ZVZhbHVlLmludGVybmFsVmFsdWUgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXREYXRlVmFsdWUoKSB7XG4gICAgdGhpcy5fZGF0ZVZhbHVlLmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IGRhdGVWYWx1ZUlucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9kYXRlVmFsdWUuaW50ZXJuYWxWYWx1ZTtcbiAgfVxuXG4gIC8vIHRpbWVfdmFsdWUgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfdGltZVZhbHVlID0gbmV3IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRml4ZWRTaXplQnVja2V0aW5nQ29uZmlnTG93ZXJCb3VuZFRpbWVWYWx1ZU91dHB1dFJlZmVyZW5jZSh0aGlzLCBcInRpbWVfdmFsdWVcIik7XG4gIHB1YmxpYyBnZXQgdGltZVZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLl90aW1lVmFsdWU7XG4gIH1cbiAgcHVibGljIHB1dFRpbWVWYWx1ZSh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25GaXhlZFNpemVCdWNrZXRpbmdDb25maWdMb3dlckJvdW5kVGltZVZhbHVlKSB7XG4gICAgdGhpcy5fdGltZVZhbHVlLmludGVybmFsVmFsdWUgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRUaW1lVmFsdWUoKSB7XG4gICAgdGhpcy5fdGltZVZhbHVlLmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IHRpbWVWYWx1ZUlucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl90aW1lVmFsdWUuaW50ZXJuYWxWYWx1ZTtcbiAgfVxufVxuZXhwb3J0IGludGVyZmFjZSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZ1VwcGVyQm91bmREYXRlVmFsdWUge1xuICAvKipcbiAgKiBEYXkgb2YgYSBtb250aC4gTXVzdCBiZSBmcm9tIDEgdG8gMzEgYW5kIHZhbGlkIGZvciB0aGUgeWVhciBhbmQgbW9udGgsIG9yIDAgdG8gc3BlY2lmeSBhIHllYXIgYnkgaXRzZWxmIG9yIGEgeWVhciBhbmQgbW9udGggd2hlcmUgdGhlIGRheSBpc24ndCBzaWduaWZpY2FudC5cbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjZGF5IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSNkYXl9XG4gICovXG4gIHJlYWRvbmx5IGRheT86IG51bWJlcjtcbiAgLyoqXG4gICogTW9udGggb2YgYSB5ZWFyLiBNdXN0IGJlIGZyb20gMSB0byAxMiwgb3IgMCB0byBzcGVjaWZ5IGEgeWVhciB3aXRob3V0IGEgbW9udGggYW5kIGRheS5cbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjbW9udGggRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI21vbnRofVxuICAqL1xuICByZWFkb25seSBtb250aD86IG51bWJlcjtcbiAgLyoqXG4gICogWWVhciBvZiB0aGUgZGF0ZS4gTXVzdCBiZSBmcm9tIDEgdG8gOTk5OSwgb3IgMCB0byBzcGVjaWZ5IGEgZGF0ZSB3aXRob3V0IGEgeWVhci5cbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjeWVhciBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjeWVhcn1cbiAgKi9cbiAgcmVhZG9ubHkgeWVhcj86IG51bWJlcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRml4ZWRTaXplQnVja2V0aW5nQ29uZmlnVXBwZXJCb3VuZERhdGVWYWx1ZVRvVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRml4ZWRTaXplQnVja2V0aW5nQ29uZmlnVXBwZXJCb3VuZERhdGVWYWx1ZU91dHB1dFJlZmVyZW5jZSB8IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRml4ZWRTaXplQnVja2V0aW5nQ29uZmlnVXBwZXJCb3VuZERhdGVWYWx1ZSk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpIHx8IGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIGlmIChjZGt0Zi5pc0NvbXBsZXhFbGVtZW50KHN0cnVjdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGNvbXBsZXggZWxlbWVudCB3YXMgdXNlZCBhcyBjb25maWd1cmF0aW9uLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQ6IGh0dHBzOi8vY2RrLnRmL2NvbXBsZXgtb2JqZWN0LWFzLWNvbmZpZ3VyYXRpb25cIik7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBkYXk6IGNka3RmLm51bWJlclRvVGVycmFmb3JtKHN0cnVjdCEuZGF5KSxcbiAgICBtb250aDogY2RrdGYubnVtYmVyVG9UZXJyYWZvcm0oc3RydWN0IS5tb250aCksXG4gICAgeWVhcjogY2RrdGYubnVtYmVyVG9UZXJyYWZvcm0oc3RydWN0IS55ZWFyKSxcbiAgfVxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZ1VwcGVyQm91bmREYXRlVmFsdWVUb0hjbFRlcnJhZm9ybShzdHJ1Y3Q/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZ1VwcGVyQm91bmREYXRlVmFsdWVPdXRwdXRSZWZlcmVuY2UgfCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZ1VwcGVyQm91bmREYXRlVmFsdWUpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIGNvbnN0IGF0dHJzID0ge1xuICAgIGRheToge1xuICAgICAgdmFsdWU6IGNka3RmLm51bWJlclRvSGNsVGVycmFmb3JtKHN0cnVjdCEuZGF5KSxcbiAgICAgIGlzQmxvY2s6IGZhbHNlLFxuICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwibnVtYmVyXCIsXG4gICAgfSxcbiAgICBtb250aDoge1xuICAgICAgdmFsdWU6IGNka3RmLm51bWJlclRvSGNsVGVycmFmb3JtKHN0cnVjdCEubW9udGgpLFxuICAgICAgaXNCbG9jazogZmFsc2UsXG4gICAgICB0eXBlOiBcInNpbXBsZVwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJudW1iZXJcIixcbiAgICB9LFxuICAgIHllYXI6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5udW1iZXJUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLnllYXIpLFxuICAgICAgaXNCbG9jazogZmFsc2UsXG4gICAgICB0eXBlOiBcInNpbXBsZVwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJudW1iZXJcIixcbiAgICB9LFxuICB9O1xuXG4gIC8vIHJlbW92ZSB1bmRlZmluZWQgYXR0cmlidXRlc1xuICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5lbnRyaWVzKGF0dHJzKS5maWx0ZXIoKFtfLCB2YWx1ZV0pID0+IHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUudmFsdWUgIT09IHVuZGVmaW5lZCkpO1xufVxuXG5leHBvcnQgY2xhc3MgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25GaXhlZFNpemVCdWNrZXRpbmdDb25maWdVcHBlckJvdW5kRGF0ZVZhbHVlT3V0cHV0UmVmZXJlbmNlIGV4dGVuZHMgY2RrdGYuQ29tcGxleE9iamVjdCB7XG4gIHByaXZhdGUgaXNFbXB0eU9iamVjdCA9IGZhbHNlO1xuXG4gIC8qKlxuICAqIEBwYXJhbSB0ZXJyYWZvcm1SZXNvdXJjZSBUaGUgcGFyZW50IHJlc291cmNlXG4gICogQHBhcmFtIHRlcnJhZm9ybUF0dHJpYnV0ZSBUaGUgYXR0cmlidXRlIG9uIHRoZSBwYXJlbnQgcmVzb3VyY2UgdGhpcyBjbGFzcyBpcyByZWZlcmVuY2luZ1xuICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IodGVycmFmb3JtUmVzb3VyY2U6IGNka3RmLklJbnRlcnBvbGF0aW5nUGFyZW50LCB0ZXJyYWZvcm1BdHRyaWJ1dGU6IHN0cmluZykge1xuICAgIHN1cGVyKHRlcnJhZm9ybVJlc291cmNlLCB0ZXJyYWZvcm1BdHRyaWJ1dGUsIGZhbHNlLCAwKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgaW50ZXJuYWxWYWx1ZSgpOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZ1VwcGVyQm91bmREYXRlVmFsdWUgfCB1bmRlZmluZWQge1xuICAgIGxldCBoYXNBbnlWYWx1ZXMgPSB0aGlzLmlzRW1wdHlPYmplY3Q7XG4gICAgY29uc3QgaW50ZXJuYWxWYWx1ZVJlc3VsdDogYW55ID0ge307XG4gICAgaWYgKHRoaXMuX2RheSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC5kYXkgPSB0aGlzLl9kYXk7XG4gICAgfVxuICAgIGlmICh0aGlzLl9tb250aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC5tb250aCA9IHRoaXMuX21vbnRoO1xuICAgIH1cbiAgICBpZiAodGhpcy5feWVhciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC55ZWFyID0gdGhpcy5feWVhcjtcbiAgICB9XG4gICAgcmV0dXJuIGhhc0FueVZhbHVlcyA/IGludGVybmFsVmFsdWVSZXN1bHQgOiB1bmRlZmluZWQ7XG4gIH1cblxuICBwdWJsaWMgc2V0IGludGVybmFsVmFsdWUodmFsdWU6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRml4ZWRTaXplQnVja2V0aW5nQ29uZmlnVXBwZXJCb3VuZERhdGVWYWx1ZSB8IHVuZGVmaW5lZCkge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmlzRW1wdHlPYmplY3QgPSBmYWxzZTtcbiAgICAgIHRoaXMuX2RheSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX21vbnRoID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5feWVhciA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLmlzRW1wdHlPYmplY3QgPSBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoID09PSAwO1xuICAgICAgdGhpcy5fZGF5ID0gdmFsdWUuZGF5O1xuICAgICAgdGhpcy5fbW9udGggPSB2YWx1ZS5tb250aDtcbiAgICAgIHRoaXMuX3llYXIgPSB2YWx1ZS55ZWFyO1xuICAgIH1cbiAgfVxuXG4gIC8vIGRheSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9kYXk/OiBudW1iZXI7IFxuICBwdWJsaWMgZ2V0IGRheSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXROdW1iZXJBdHRyaWJ1dGUoJ2RheScpO1xuICB9XG4gIHB1YmxpYyBzZXQgZGF5KHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl9kYXkgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXREYXkoKSB7XG4gICAgdGhpcy5fZGF5ID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBkYXlJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGF5O1xuICB9XG5cbiAgLy8gbW9udGggLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfbW9udGg/OiBudW1iZXI7IFxuICBwdWJsaWMgZ2V0IG1vbnRoKCkge1xuICAgIHJldHVybiB0aGlzLmdldE51bWJlckF0dHJpYnV0ZSgnbW9udGgnKTtcbiAgfVxuICBwdWJsaWMgc2V0IG1vbnRoKHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl9tb250aCA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldE1vbnRoKCkge1xuICAgIHRoaXMuX21vbnRoID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBtb250aElucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9tb250aDtcbiAgfVxuXG4gIC8vIHllYXIgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfeWVhcj86IG51bWJlcjsgXG4gIHB1YmxpYyBnZXQgeWVhcigpIHtcbiAgICByZXR1cm4gdGhpcy5nZXROdW1iZXJBdHRyaWJ1dGUoJ3llYXInKTtcbiAgfVxuICBwdWJsaWMgc2V0IHllYXIodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX3llYXIgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRZZWFyKCkge1xuICAgIHRoaXMuX3llYXIgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IHllYXJJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5feWVhcjtcbiAgfVxufVxuZXhwb3J0IGludGVyZmFjZSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZ1VwcGVyQm91bmRUaW1lVmFsdWUge1xuICAvKipcbiAgKiBIb3VycyBvZiBkYXkgaW4gMjQgaG91ciBmb3JtYXQuIFNob3VsZCBiZSBmcm9tIDAgdG8gMjMuIEFuIEFQSSBtYXkgY2hvb3NlIHRvIGFsbG93IHRoZSB2YWx1ZSBcIjI0OjAwOjAwXCIgZm9yIHNjZW5hcmlvcyBsaWtlIGJ1c2luZXNzIGNsb3NpbmcgdGltZS5cbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjaG91cnMgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI2hvdXJzfVxuICAqL1xuICByZWFkb25seSBob3Vycz86IG51bWJlcjtcbiAgLyoqXG4gICogTWludXRlcyBvZiBob3VyIG9mIGRheS4gTXVzdCBiZSBmcm9tIDAgdG8gNTkuXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI21pbnV0ZXMgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI21pbnV0ZXN9XG4gICovXG4gIHJlYWRvbmx5IG1pbnV0ZXM/OiBudW1iZXI7XG4gIC8qKlxuICAqIEZyYWN0aW9ucyBvZiBzZWNvbmRzIGluIG5hbm9zZWNvbmRzLiBNdXN0IGJlIGZyb20gMCB0byA5OTksOTk5LDk5OS5cbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjbmFub3MgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI25hbm9zfVxuICAqL1xuICByZWFkb25seSBuYW5vcz86IG51bWJlcjtcbiAgLyoqXG4gICogU2Vjb25kcyBvZiBtaW51dGVzIG9mIHRoZSB0aW1lLiBNdXN0IG5vcm1hbGx5IGJlIGZyb20gMCB0byA1OS4gQW4gQVBJIG1heSBhbGxvdyB0aGUgdmFsdWUgNjAgaWYgaXQgYWxsb3dzIGxlYXAtc2Vjb25kcy5cbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjc2Vjb25kcyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjc2Vjb25kc31cbiAgKi9cbiAgcmVhZG9ubHkgc2Vjb25kcz86IG51bWJlcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRml4ZWRTaXplQnVja2V0aW5nQ29uZmlnVXBwZXJCb3VuZFRpbWVWYWx1ZVRvVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRml4ZWRTaXplQnVja2V0aW5nQ29uZmlnVXBwZXJCb3VuZFRpbWVWYWx1ZU91dHB1dFJlZmVyZW5jZSB8IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRml4ZWRTaXplQnVja2V0aW5nQ29uZmlnVXBwZXJCb3VuZFRpbWVWYWx1ZSk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpIHx8IGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIGlmIChjZGt0Zi5pc0NvbXBsZXhFbGVtZW50KHN0cnVjdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGNvbXBsZXggZWxlbWVudCB3YXMgdXNlZCBhcyBjb25maWd1cmF0aW9uLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQ6IGh0dHBzOi8vY2RrLnRmL2NvbXBsZXgtb2JqZWN0LWFzLWNvbmZpZ3VyYXRpb25cIik7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBob3VyczogY2RrdGYubnVtYmVyVG9UZXJyYWZvcm0oc3RydWN0IS5ob3VycyksXG4gICAgbWludXRlczogY2RrdGYubnVtYmVyVG9UZXJyYWZvcm0oc3RydWN0IS5taW51dGVzKSxcbiAgICBuYW5vczogY2RrdGYubnVtYmVyVG9UZXJyYWZvcm0oc3RydWN0IS5uYW5vcyksXG4gICAgc2Vjb25kczogY2RrdGYubnVtYmVyVG9UZXJyYWZvcm0oc3RydWN0IS5zZWNvbmRzKSxcbiAgfVxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZ1VwcGVyQm91bmRUaW1lVmFsdWVUb0hjbFRlcnJhZm9ybShzdHJ1Y3Q/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZ1VwcGVyQm91bmRUaW1lVmFsdWVPdXRwdXRSZWZlcmVuY2UgfCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZ1VwcGVyQm91bmRUaW1lVmFsdWUpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIGNvbnN0IGF0dHJzID0ge1xuICAgIGhvdXJzOiB7XG4gICAgICB2YWx1ZTogY2RrdGYubnVtYmVyVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5ob3VycyksXG4gICAgICBpc0Jsb2NrOiBmYWxzZSxcbiAgICAgIHR5cGU6IFwic2ltcGxlXCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcIm51bWJlclwiLFxuICAgIH0sXG4gICAgbWludXRlczoge1xuICAgICAgdmFsdWU6IGNka3RmLm51bWJlclRvSGNsVGVycmFmb3JtKHN0cnVjdCEubWludXRlcyksXG4gICAgICBpc0Jsb2NrOiBmYWxzZSxcbiAgICAgIHR5cGU6IFwic2ltcGxlXCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcIm51bWJlclwiLFxuICAgIH0sXG4gICAgbmFub3M6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5udW1iZXJUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLm5hbm9zKSxcbiAgICAgIGlzQmxvY2s6IGZhbHNlLFxuICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwibnVtYmVyXCIsXG4gICAgfSxcbiAgICBzZWNvbmRzOiB7XG4gICAgICB2YWx1ZTogY2RrdGYubnVtYmVyVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5zZWNvbmRzKSxcbiAgICAgIGlzQmxvY2s6IGZhbHNlLFxuICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwibnVtYmVyXCIsXG4gICAgfSxcbiAgfTtcblxuICAvLyByZW1vdmUgdW5kZWZpbmVkIGF0dHJpYnV0ZXNcbiAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhhdHRycykuZmlsdGVyKChbXywgdmFsdWVdKSA9PiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlLnZhbHVlICE9PSB1bmRlZmluZWQpKTtcbn1cblxuZXhwb3J0IGNsYXNzIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRml4ZWRTaXplQnVja2V0aW5nQ29uZmlnVXBwZXJCb3VuZFRpbWVWYWx1ZU91dHB1dFJlZmVyZW5jZSBleHRlbmRzIGNka3RmLkNvbXBsZXhPYmplY3Qge1xuICBwcml2YXRlIGlzRW1wdHlPYmplY3QgPSBmYWxzZTtcblxuICAvKipcbiAgKiBAcGFyYW0gdGVycmFmb3JtUmVzb3VyY2UgVGhlIHBhcmVudCByZXNvdXJjZVxuICAqIEBwYXJhbSB0ZXJyYWZvcm1BdHRyaWJ1dGUgVGhlIGF0dHJpYnV0ZSBvbiB0aGUgcGFyZW50IHJlc291cmNlIHRoaXMgY2xhc3MgaXMgcmVmZXJlbmNpbmdcbiAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHRlcnJhZm9ybVJlc291cmNlOiBjZGt0Zi5JSW50ZXJwb2xhdGluZ1BhcmVudCwgdGVycmFmb3JtQXR0cmlidXRlOiBzdHJpbmcpIHtcbiAgICBzdXBlcih0ZXJyYWZvcm1SZXNvdXJjZSwgdGVycmFmb3JtQXR0cmlidXRlLCBmYWxzZSwgMCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGludGVybmFsVmFsdWUoKTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25GaXhlZFNpemVCdWNrZXRpbmdDb25maWdVcHBlckJvdW5kVGltZVZhbHVlIHwgdW5kZWZpbmVkIHtcbiAgICBsZXQgaGFzQW55VmFsdWVzID0gdGhpcy5pc0VtcHR5T2JqZWN0O1xuICAgIGNvbnN0IGludGVybmFsVmFsdWVSZXN1bHQ6IGFueSA9IHt9O1xuICAgIGlmICh0aGlzLl9ob3VycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC5ob3VycyA9IHRoaXMuX2hvdXJzO1xuICAgIH1cbiAgICBpZiAodGhpcy5fbWludXRlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC5taW51dGVzID0gdGhpcy5fbWludXRlcztcbiAgICB9XG4gICAgaWYgKHRoaXMuX25hbm9zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0Lm5hbm9zID0gdGhpcy5fbmFub3M7XG4gICAgfVxuICAgIGlmICh0aGlzLl9zZWNvbmRzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LnNlY29uZHMgPSB0aGlzLl9zZWNvbmRzO1xuICAgIH1cbiAgICByZXR1cm4gaGFzQW55VmFsdWVzID8gaW50ZXJuYWxWYWx1ZVJlc3VsdCA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgaW50ZXJuYWxWYWx1ZSh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25GaXhlZFNpemVCdWNrZXRpbmdDb25maWdVcHBlckJvdW5kVGltZVZhbHVlIHwgdW5kZWZpbmVkKSB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IGZhbHNlO1xuICAgICAgdGhpcy5faG91cnMgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9taW51dGVzID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fbmFub3MgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9zZWNvbmRzID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggPT09IDA7XG4gICAgICB0aGlzLl9ob3VycyA9IHZhbHVlLmhvdXJzO1xuICAgICAgdGhpcy5fbWludXRlcyA9IHZhbHVlLm1pbnV0ZXM7XG4gICAgICB0aGlzLl9uYW5vcyA9IHZhbHVlLm5hbm9zO1xuICAgICAgdGhpcy5fc2Vjb25kcyA9IHZhbHVlLnNlY29uZHM7XG4gICAgfVxuICB9XG5cbiAgLy8gaG91cnMgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfaG91cnM/OiBudW1iZXI7IFxuICBwdWJsaWMgZ2V0IGhvdXJzKCkge1xuICAgIHJldHVybiB0aGlzLmdldE51bWJlckF0dHJpYnV0ZSgnaG91cnMnKTtcbiAgfVxuICBwdWJsaWMgc2V0IGhvdXJzKHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl9ob3VycyA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldEhvdXJzKCkge1xuICAgIHRoaXMuX2hvdXJzID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBob3Vyc0lucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9ob3VycztcbiAgfVxuXG4gIC8vIG1pbnV0ZXMgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfbWludXRlcz86IG51bWJlcjsgXG4gIHB1YmxpYyBnZXQgbWludXRlcygpIHtcbiAgICByZXR1cm4gdGhpcy5nZXROdW1iZXJBdHRyaWJ1dGUoJ21pbnV0ZXMnKTtcbiAgfVxuICBwdWJsaWMgc2V0IG1pbnV0ZXModmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX21pbnV0ZXMgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRNaW51dGVzKCkge1xuICAgIHRoaXMuX21pbnV0ZXMgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IG1pbnV0ZXNJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fbWludXRlcztcbiAgfVxuXG4gIC8vIG5hbm9zIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX25hbm9zPzogbnVtYmVyOyBcbiAgcHVibGljIGdldCBuYW5vcygpIHtcbiAgICByZXR1cm4gdGhpcy5nZXROdW1iZXJBdHRyaWJ1dGUoJ25hbm9zJyk7XG4gIH1cbiAgcHVibGljIHNldCBuYW5vcyh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5fbmFub3MgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXROYW5vcygpIHtcbiAgICB0aGlzLl9uYW5vcyA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgbmFub3NJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fbmFub3M7XG4gIH1cblxuICAvLyBzZWNvbmRzIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX3NlY29uZHM/OiBudW1iZXI7IFxuICBwdWJsaWMgZ2V0IHNlY29uZHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TnVtYmVyQXR0cmlidXRlKCdzZWNvbmRzJyk7XG4gIH1cbiAgcHVibGljIHNldCBzZWNvbmRzKHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl9zZWNvbmRzID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0U2Vjb25kcygpIHtcbiAgICB0aGlzLl9zZWNvbmRzID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBzZWNvbmRzSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NlY29uZHM7XG4gIH1cbn1cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25GaXhlZFNpemVCdWNrZXRpbmdDb25maWdVcHBlckJvdW5kIHtcbiAgLyoqXG4gICogQSBib29sZWFuIHZhbHVlLlxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNib29sZWFuX3ZhbHVlIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSNib29sZWFuX3ZhbHVlfVxuICAqL1xuICByZWFkb25seSBib29sZWFuVmFsdWU/OiBib29sZWFuIHwgY2RrdGYuSVJlc29sdmFibGU7XG4gIC8qKlxuICAqIFJlcHJlc2VudHMgYSBkYXkgb2YgdGhlIHdlZWsuIFBvc3NpYmxlIHZhbHVlczogW1wiTU9OREFZXCIsIFwiVFVFU0RBWVwiLCBcIldFRE5FU0RBWVwiLCBcIlRIVVJTREFZXCIsIFwiRlJJREFZXCIsIFwiU0FUVVJEQVlcIiwgXCJTVU5EQVlcIl1cbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjZGF5X29mX3dlZWtfdmFsdWUgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI2RheV9vZl93ZWVrX3ZhbHVlfVxuICAqL1xuICByZWFkb25seSBkYXlPZldlZWtWYWx1ZT86IHN0cmluZztcbiAgLyoqXG4gICogQSBmbG9hdCB2YWx1ZS5cbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjZmxvYXRfdmFsdWUgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI2Zsb2F0X3ZhbHVlfVxuICAqL1xuICByZWFkb25seSBmbG9hdFZhbHVlPzogbnVtYmVyO1xuICAvKipcbiAgKiBBbiBpbnRlZ2VyIHZhbHVlIChpbnQ2NCBmb3JtYXQpXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI2ludGVnZXJfdmFsdWUgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI2ludGVnZXJfdmFsdWV9XG4gICovXG4gIHJlYWRvbmx5IGludGVnZXJWYWx1ZT86IHN0cmluZztcbiAgLyoqXG4gICogQSBzdHJpbmcgdmFsdWUuXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI3N0cmluZ192YWx1ZSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjc3RyaW5nX3ZhbHVlfVxuICAqL1xuICByZWFkb25seSBzdHJpbmdWYWx1ZT86IHN0cmluZztcbiAgLyoqXG4gICogQSB0aW1lc3RhbXAgaW4gUkZDMzMzOSBVVEMgXCJadWx1XCIgZm9ybWF0LCB3aXRoIG5hbm9zZWNvbmQgcmVzb2x1dGlvbiBhbmQgdXAgdG8gbmluZSBmcmFjdGlvbmFsIGRpZ2l0cy4gRXhhbXBsZXM6IFwiMjAxNC0xMC0wMlQxNTowMToyM1pcIiBhbmQgXCIyMDE0LTEwLTAyVDE1OjAxOjIzLjA0NTEyMzQ1NlpcIi5cbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjdGltZXN0YW1wX3ZhbHVlIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSN0aW1lc3RhbXBfdmFsdWV9XG4gICovXG4gIHJlYWRvbmx5IHRpbWVzdGFtcFZhbHVlPzogc3RyaW5nO1xuICAvKipcbiAgKiBkYXRlX3ZhbHVlIGJsb2NrXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI2RhdGVfdmFsdWUgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI2RhdGVfdmFsdWV9XG4gICovXG4gIHJlYWRvbmx5IGRhdGVWYWx1ZT86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRml4ZWRTaXplQnVja2V0aW5nQ29uZmlnVXBwZXJCb3VuZERhdGVWYWx1ZTtcbiAgLyoqXG4gICogdGltZV92YWx1ZSBibG9ja1xuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSN0aW1lX3ZhbHVlIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSN0aW1lX3ZhbHVlfVxuICAqL1xuICByZWFkb25seSB0aW1lVmFsdWU/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZ1VwcGVyQm91bmRUaW1lVmFsdWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZ1VwcGVyQm91bmRUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZ1VwcGVyQm91bmRPdXRwdXRSZWZlcmVuY2UgfCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZ1VwcGVyQm91bmQpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIHJldHVybiB7XG4gICAgYm9vbGVhbl92YWx1ZTogY2RrdGYuYm9vbGVhblRvVGVycmFmb3JtKHN0cnVjdCEuYm9vbGVhblZhbHVlKSxcbiAgICBkYXlfb2Zfd2Vla192YWx1ZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5kYXlPZldlZWtWYWx1ZSksXG4gICAgZmxvYXRfdmFsdWU6IGNka3RmLm51bWJlclRvVGVycmFmb3JtKHN0cnVjdCEuZmxvYXRWYWx1ZSksXG4gICAgaW50ZWdlcl92YWx1ZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5pbnRlZ2VyVmFsdWUpLFxuICAgIHN0cmluZ192YWx1ZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5zdHJpbmdWYWx1ZSksXG4gICAgdGltZXN0YW1wX3ZhbHVlOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLnRpbWVzdGFtcFZhbHVlKSxcbiAgICBkYXRlX3ZhbHVlOiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZ1VwcGVyQm91bmREYXRlVmFsdWVUb1RlcnJhZm9ybShzdHJ1Y3QhLmRhdGVWYWx1ZSksXG4gICAgdGltZV92YWx1ZTogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25GaXhlZFNpemVCdWNrZXRpbmdDb25maWdVcHBlckJvdW5kVGltZVZhbHVlVG9UZXJyYWZvcm0oc3RydWN0IS50aW1lVmFsdWUpLFxuICB9XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRml4ZWRTaXplQnVja2V0aW5nQ29uZmlnVXBwZXJCb3VuZFRvSGNsVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRml4ZWRTaXplQnVja2V0aW5nQ29uZmlnVXBwZXJCb3VuZE91dHB1dFJlZmVyZW5jZSB8IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRml4ZWRTaXplQnVja2V0aW5nQ29uZmlnVXBwZXJCb3VuZCk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpIHx8IGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIGlmIChjZGt0Zi5pc0NvbXBsZXhFbGVtZW50KHN0cnVjdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGNvbXBsZXggZWxlbWVudCB3YXMgdXNlZCBhcyBjb25maWd1cmF0aW9uLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQ6IGh0dHBzOi8vY2RrLnRmL2NvbXBsZXgtb2JqZWN0LWFzLWNvbmZpZ3VyYXRpb25cIik7XG4gIH1cbiAgY29uc3QgYXR0cnMgPSB7XG4gICAgYm9vbGVhbl92YWx1ZToge1xuICAgICAgdmFsdWU6IGNka3RmLmJvb2xlYW5Ub0hjbFRlcnJhZm9ybShzdHJ1Y3QhLmJvb2xlYW5WYWx1ZSksXG4gICAgICBpc0Jsb2NrOiBmYWxzZSxcbiAgICAgIHR5cGU6IFwic2ltcGxlXCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcImJvb2xlYW5cIixcbiAgICB9LFxuICAgIGRheV9vZl93ZWVrX3ZhbHVlOiB7XG4gICAgICB2YWx1ZTogY2RrdGYuc3RyaW5nVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5kYXlPZldlZWtWYWx1ZSksXG4gICAgICBpc0Jsb2NrOiBmYWxzZSxcbiAgICAgIHR5cGU6IFwic2ltcGxlXCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcInN0cmluZ1wiLFxuICAgIH0sXG4gICAgZmxvYXRfdmFsdWU6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5udW1iZXJUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLmZsb2F0VmFsdWUpLFxuICAgICAgaXNCbG9jazogZmFsc2UsXG4gICAgICB0eXBlOiBcInNpbXBsZVwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJudW1iZXJcIixcbiAgICB9LFxuICAgIGludGVnZXJfdmFsdWU6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5zdHJpbmdUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLmludGVnZXJWYWx1ZSksXG4gICAgICBpc0Jsb2NrOiBmYWxzZSxcbiAgICAgIHR5cGU6IFwic2ltcGxlXCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcInN0cmluZ1wiLFxuICAgIH0sXG4gICAgc3RyaW5nX3ZhbHVlOiB7XG4gICAgICB2YWx1ZTogY2RrdGYuc3RyaW5nVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5zdHJpbmdWYWx1ZSksXG4gICAgICBpc0Jsb2NrOiBmYWxzZSxcbiAgICAgIHR5cGU6IFwic2ltcGxlXCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcInN0cmluZ1wiLFxuICAgIH0sXG4gICAgdGltZXN0YW1wX3ZhbHVlOiB7XG4gICAgICB2YWx1ZTogY2RrdGYuc3RyaW5nVG9IY2xUZXJyYWZvcm0oc3RydWN0IS50aW1lc3RhbXBWYWx1ZSksXG4gICAgICBpc0Jsb2NrOiBmYWxzZSxcbiAgICAgIHR5cGU6IFwic2ltcGxlXCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcInN0cmluZ1wiLFxuICAgIH0sXG4gICAgZGF0ZV92YWx1ZToge1xuICAgICAgdmFsdWU6IGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRml4ZWRTaXplQnVja2V0aW5nQ29uZmlnVXBwZXJCb3VuZERhdGVWYWx1ZVRvSGNsVGVycmFmb3JtKHN0cnVjdCEuZGF0ZVZhbHVlKSxcbiAgICAgIGlzQmxvY2s6IHRydWUsXG4gICAgICB0eXBlOiBcImxpc3RcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwiRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25GaXhlZFNpemVCdWNrZXRpbmdDb25maWdVcHBlckJvdW5kRGF0ZVZhbHVlTGlzdFwiLFxuICAgIH0sXG4gICAgdGltZV92YWx1ZToge1xuICAgICAgdmFsdWU6IGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRml4ZWRTaXplQnVja2V0aW5nQ29uZmlnVXBwZXJCb3VuZFRpbWVWYWx1ZVRvSGNsVGVycmFmb3JtKHN0cnVjdCEudGltZVZhbHVlKSxcbiAgICAgIGlzQmxvY2s6IHRydWUsXG4gICAgICB0eXBlOiBcImxpc3RcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwiRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25GaXhlZFNpemVCdWNrZXRpbmdDb25maWdVcHBlckJvdW5kVGltZVZhbHVlTGlzdFwiLFxuICAgIH0sXG4gIH07XG5cbiAgLy8gcmVtb3ZlIHVuZGVmaW5lZCBhdHRyaWJ1dGVzXG4gIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMoYXR0cnMpLmZpbHRlcigoW18sIHZhbHVlXSkgPT4gdmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZS52YWx1ZSAhPT0gdW5kZWZpbmVkKSk7XG59XG5cbmV4cG9ydCBjbGFzcyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZ1VwcGVyQm91bmRPdXRwdXRSZWZlcmVuY2UgZXh0ZW5kcyBjZGt0Zi5Db21wbGV4T2JqZWN0IHtcbiAgcHJpdmF0ZSBpc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG5cbiAgLyoqXG4gICogQHBhcmFtIHRlcnJhZm9ybVJlc291cmNlIFRoZSBwYXJlbnQgcmVzb3VyY2VcbiAgKiBAcGFyYW0gdGVycmFmb3JtQXR0cmlidXRlIFRoZSBhdHRyaWJ1dGUgb24gdGhlIHBhcmVudCByZXNvdXJjZSB0aGlzIGNsYXNzIGlzIHJlZmVyZW5jaW5nXG4gICovXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcih0ZXJyYWZvcm1SZXNvdXJjZTogY2RrdGYuSUludGVycG9sYXRpbmdQYXJlbnQsIHRlcnJhZm9ybUF0dHJpYnV0ZTogc3RyaW5nKSB7XG4gICAgc3VwZXIodGVycmFmb3JtUmVzb3VyY2UsIHRlcnJhZm9ybUF0dHJpYnV0ZSwgZmFsc2UsIDApO1xuICB9XG5cbiAgcHVibGljIGdldCBpbnRlcm5hbFZhbHVlKCk6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRml4ZWRTaXplQnVja2V0aW5nQ29uZmlnVXBwZXJCb3VuZCB8IHVuZGVmaW5lZCB7XG4gICAgbGV0IGhhc0FueVZhbHVlcyA9IHRoaXMuaXNFbXB0eU9iamVjdDtcbiAgICBjb25zdCBpbnRlcm5hbFZhbHVlUmVzdWx0OiBhbnkgPSB7fTtcbiAgICBpZiAodGhpcy5fYm9vbGVhblZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LmJvb2xlYW5WYWx1ZSA9IHRoaXMuX2Jvb2xlYW5WYWx1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2RheU9mV2Vla1ZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LmRheU9mV2Vla1ZhbHVlID0gdGhpcy5fZGF5T2ZXZWVrVmFsdWU7XG4gICAgfVxuICAgIGlmICh0aGlzLl9mbG9hdFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LmZsb2F0VmFsdWUgPSB0aGlzLl9mbG9hdFZhbHVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5faW50ZWdlclZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LmludGVnZXJWYWx1ZSA9IHRoaXMuX2ludGVnZXJWYWx1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3N0cmluZ1ZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LnN0cmluZ1ZhbHVlID0gdGhpcy5fc3RyaW5nVmFsdWU7XG4gICAgfVxuICAgIGlmICh0aGlzLl90aW1lc3RhbXBWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC50aW1lc3RhbXBWYWx1ZSA9IHRoaXMuX3RpbWVzdGFtcFZhbHVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5fZGF0ZVZhbHVlPy5pbnRlcm5hbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LmRhdGVWYWx1ZSA9IHRoaXMuX2RhdGVWYWx1ZT8uaW50ZXJuYWxWYWx1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3RpbWVWYWx1ZT8uaW50ZXJuYWxWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC50aW1lVmFsdWUgPSB0aGlzLl90aW1lVmFsdWU/LmludGVybmFsVmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBoYXNBbnlWYWx1ZXMgPyBpbnRlcm5hbFZhbHVlUmVzdWx0IDogdW5kZWZpbmVkO1xuICB9XG5cbiAgcHVibGljIHNldCBpbnRlcm5hbFZhbHVlKHZhbHVlOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZ1VwcGVyQm91bmQgfCB1bmRlZmluZWQpIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5pc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG4gICAgICB0aGlzLl9ib29sZWFuVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9kYXlPZldlZWtWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2Zsb2F0VmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9pbnRlZ2VyVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9zdHJpbmdWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX3RpbWVzdGFtcFZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fZGF0ZVZhbHVlLmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl90aW1lVmFsdWUuaW50ZXJuYWxWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLmlzRW1wdHlPYmplY3QgPSBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoID09PSAwO1xuICAgICAgdGhpcy5fYm9vbGVhblZhbHVlID0gdmFsdWUuYm9vbGVhblZhbHVlO1xuICAgICAgdGhpcy5fZGF5T2ZXZWVrVmFsdWUgPSB2YWx1ZS5kYXlPZldlZWtWYWx1ZTtcbiAgICAgIHRoaXMuX2Zsb2F0VmFsdWUgPSB2YWx1ZS5mbG9hdFZhbHVlO1xuICAgICAgdGhpcy5faW50ZWdlclZhbHVlID0gdmFsdWUuaW50ZWdlclZhbHVlO1xuICAgICAgdGhpcy5fc3RyaW5nVmFsdWUgPSB2YWx1ZS5zdHJpbmdWYWx1ZTtcbiAgICAgIHRoaXMuX3RpbWVzdGFtcFZhbHVlID0gdmFsdWUudGltZXN0YW1wVmFsdWU7XG4gICAgICB0aGlzLl9kYXRlVmFsdWUuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlLmRhdGVWYWx1ZTtcbiAgICAgIHRoaXMuX3RpbWVWYWx1ZS5pbnRlcm5hbFZhbHVlID0gdmFsdWUudGltZVZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIC8vIGJvb2xlYW5fdmFsdWUgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfYm9vbGVhblZhbHVlPzogYm9vbGVhbiB8IGNka3RmLklSZXNvbHZhYmxlOyBcbiAgcHVibGljIGdldCBib29sZWFuVmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0Qm9vbGVhbkF0dHJpYnV0ZSgnYm9vbGVhbl92YWx1ZScpO1xuICB9XG4gIHB1YmxpYyBzZXQgYm9vbGVhblZhbHVlKHZhbHVlOiBib29sZWFuIHwgY2RrdGYuSVJlc29sdmFibGUpIHtcbiAgICB0aGlzLl9ib29sZWFuVmFsdWUgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRCb29sZWFuVmFsdWUoKSB7XG4gICAgdGhpcy5fYm9vbGVhblZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBib29sZWFuVmFsdWVJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fYm9vbGVhblZhbHVlO1xuICB9XG5cbiAgLy8gZGF5X29mX3dlZWtfdmFsdWUgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfZGF5T2ZXZWVrVmFsdWU/OiBzdHJpbmc7IFxuICBwdWJsaWMgZ2V0IGRheU9mV2Vla1ZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgnZGF5X29mX3dlZWtfdmFsdWUnKTtcbiAgfVxuICBwdWJsaWMgc2V0IGRheU9mV2Vla1ZhbHVlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9kYXlPZldlZWtWYWx1ZSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldERheU9mV2Vla1ZhbHVlKCkge1xuICAgIHRoaXMuX2RheU9mV2Vla1ZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBkYXlPZldlZWtWYWx1ZUlucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9kYXlPZldlZWtWYWx1ZTtcbiAgfVxuXG4gIC8vIGZsb2F0X3ZhbHVlIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX2Zsb2F0VmFsdWU/OiBudW1iZXI7IFxuICBwdWJsaWMgZ2V0IGZsb2F0VmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TnVtYmVyQXR0cmlidXRlKCdmbG9hdF92YWx1ZScpO1xuICB9XG4gIHB1YmxpYyBzZXQgZmxvYXRWYWx1ZSh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5fZmxvYXRWYWx1ZSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldEZsb2F0VmFsdWUoKSB7XG4gICAgdGhpcy5fZmxvYXRWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgZmxvYXRWYWx1ZUlucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9mbG9hdFZhbHVlO1xuICB9XG5cbiAgLy8gaW50ZWdlcl92YWx1ZSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9pbnRlZ2VyVmFsdWU/OiBzdHJpbmc7IFxuICBwdWJsaWMgZ2V0IGludGVnZXJWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ2ludGVnZXJfdmFsdWUnKTtcbiAgfVxuICBwdWJsaWMgc2V0IGludGVnZXJWYWx1ZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5faW50ZWdlclZhbHVlID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0SW50ZWdlclZhbHVlKCkge1xuICAgIHRoaXMuX2ludGVnZXJWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgaW50ZWdlclZhbHVlSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ludGVnZXJWYWx1ZTtcbiAgfVxuXG4gIC8vIHN0cmluZ192YWx1ZSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9zdHJpbmdWYWx1ZT86IHN0cmluZzsgXG4gIHB1YmxpYyBnZXQgc3RyaW5nVmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCdzdHJpbmdfdmFsdWUnKTtcbiAgfVxuICBwdWJsaWMgc2V0IHN0cmluZ1ZhbHVlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9zdHJpbmdWYWx1ZSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldFN0cmluZ1ZhbHVlKCkge1xuICAgIHRoaXMuX3N0cmluZ1ZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBzdHJpbmdWYWx1ZUlucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9zdHJpbmdWYWx1ZTtcbiAgfVxuXG4gIC8vIHRpbWVzdGFtcF92YWx1ZSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF90aW1lc3RhbXBWYWx1ZT86IHN0cmluZzsgXG4gIHB1YmxpYyBnZXQgdGltZXN0YW1wVmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCd0aW1lc3RhbXBfdmFsdWUnKTtcbiAgfVxuICBwdWJsaWMgc2V0IHRpbWVzdGFtcFZhbHVlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl90aW1lc3RhbXBWYWx1ZSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldFRpbWVzdGFtcFZhbHVlKCkge1xuICAgIHRoaXMuX3RpbWVzdGFtcFZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCB0aW1lc3RhbXBWYWx1ZUlucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl90aW1lc3RhbXBWYWx1ZTtcbiAgfVxuXG4gIC8vIGRhdGVfdmFsdWUgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfZGF0ZVZhbHVlID0gbmV3IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRml4ZWRTaXplQnVja2V0aW5nQ29uZmlnVXBwZXJCb3VuZERhdGVWYWx1ZU91dHB1dFJlZmVyZW5jZSh0aGlzLCBcImRhdGVfdmFsdWVcIik7XG4gIHB1YmxpYyBnZXQgZGF0ZVZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLl9kYXRlVmFsdWU7XG4gIH1cbiAgcHVibGljIHB1dERhdGVWYWx1ZSh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25GaXhlZFNpemVCdWNrZXRpbmdDb25maWdVcHBlckJvdW5kRGF0ZVZhbHVlKSB7XG4gICAgdGhpcy5fZGF0ZVZhbHVlLmludGVybmFsVmFsdWUgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXREYXRlVmFsdWUoKSB7XG4gICAgdGhpcy5fZGF0ZVZhbHVlLmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IGRhdGVWYWx1ZUlucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9kYXRlVmFsdWUuaW50ZXJuYWxWYWx1ZTtcbiAgfVxuXG4gIC8vIHRpbWVfdmFsdWUgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfdGltZVZhbHVlID0gbmV3IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRml4ZWRTaXplQnVja2V0aW5nQ29uZmlnVXBwZXJCb3VuZFRpbWVWYWx1ZU91dHB1dFJlZmVyZW5jZSh0aGlzLCBcInRpbWVfdmFsdWVcIik7XG4gIHB1YmxpYyBnZXQgdGltZVZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLl90aW1lVmFsdWU7XG4gIH1cbiAgcHVibGljIHB1dFRpbWVWYWx1ZSh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25GaXhlZFNpemVCdWNrZXRpbmdDb25maWdVcHBlckJvdW5kVGltZVZhbHVlKSB7XG4gICAgdGhpcy5fdGltZVZhbHVlLmludGVybmFsVmFsdWUgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRUaW1lVmFsdWUoKSB7XG4gICAgdGhpcy5fdGltZVZhbHVlLmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IHRpbWVWYWx1ZUlucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl90aW1lVmFsdWUuaW50ZXJuYWxWYWx1ZTtcbiAgfVxufVxuZXhwb3J0IGludGVyZmFjZSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZyB7XG4gIC8qKlxuICAqIFNpemUgb2YgZWFjaCBidWNrZXQgKGV4Y2VwdCBmb3IgbWluaW11bSBhbmQgbWF4aW11bSBidWNrZXRzKS5cbiAgKiBTbyBpZiBsb3dlcl9ib3VuZCA9IDEwLCB1cHBlcl9ib3VuZCA9IDg5LCBhbmQgYnVja2V0U2l6ZSA9IDEwLCB0aGVuIHRoZSBmb2xsb3dpbmcgYnVja2V0cyB3b3VsZCBiZSB1c2VkOiAtMTAsIDEwLTIwLCAyMC0zMCwgMzAtNDAsIDQwLTUwLCA1MC02MCwgNjAtNzAsIDcwLTgwLCA4MC04OSwgODkrLlxuICAqIFByZWNpc2lvbiB1cCB0byAyIGRlY2ltYWxzIHdvcmtzLlxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNidWNrZXRfc2l6ZSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjYnVja2V0X3NpemV9XG4gICovXG4gIHJlYWRvbmx5IGJ1Y2tldFNpemU6IG51bWJlcjtcbiAgLyoqXG4gICogbG93ZXJfYm91bmQgYmxvY2tcbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjbG93ZXJfYm91bmQgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI2xvd2VyX2JvdW5kfVxuICAqL1xuICByZWFkb25seSBsb3dlckJvdW5kOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZ0xvd2VyQm91bmQ7XG4gIC8qKlxuICAqIHVwcGVyX2JvdW5kIGJsb2NrXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI3VwcGVyX2JvdW5kIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSN1cHBlcl9ib3VuZH1cbiAgKi9cbiAgcmVhZG9ubHkgdXBwZXJCb3VuZDogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25GaXhlZFNpemVCdWNrZXRpbmdDb25maWdVcHBlckJvdW5kO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25GaXhlZFNpemVCdWNrZXRpbmdDb25maWdUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZ091dHB1dFJlZmVyZW5jZSB8IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRml4ZWRTaXplQnVja2V0aW5nQ29uZmlnKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkgfHwgY2RrdGYuVG9rZW5pemF0aW9uLmlzUmVzb2x2YWJsZShzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgaWYgKGNka3RmLmlzQ29tcGxleEVsZW1lbnQoc3RydWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkEgY29tcGxleCBlbGVtZW50IHdhcyB1c2VkIGFzIGNvbmZpZ3VyYXRpb24sIHRoaXMgaXMgbm90IHN1cHBvcnRlZDogaHR0cHM6Ly9jZGsudGYvY29tcGxleC1vYmplY3QtYXMtY29uZmlndXJhdGlvblwiKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGJ1Y2tldF9zaXplOiBjZGt0Zi5udW1iZXJUb1RlcnJhZm9ybShzdHJ1Y3QhLmJ1Y2tldFNpemUpLFxuICAgIGxvd2VyX2JvdW5kOiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZ0xvd2VyQm91bmRUb1RlcnJhZm9ybShzdHJ1Y3QhLmxvd2VyQm91bmQpLFxuICAgIHVwcGVyX2JvdW5kOiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZ1VwcGVyQm91bmRUb1RlcnJhZm9ybShzdHJ1Y3QhLnVwcGVyQm91bmQpLFxuICB9XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRml4ZWRTaXplQnVja2V0aW5nQ29uZmlnVG9IY2xUZXJyYWZvcm0oc3RydWN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25GaXhlZFNpemVCdWNrZXRpbmdDb25maWdPdXRwdXRSZWZlcmVuY2UgfCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZyk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpIHx8IGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIGlmIChjZGt0Zi5pc0NvbXBsZXhFbGVtZW50KHN0cnVjdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGNvbXBsZXggZWxlbWVudCB3YXMgdXNlZCBhcyBjb25maWd1cmF0aW9uLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQ6IGh0dHBzOi8vY2RrLnRmL2NvbXBsZXgtb2JqZWN0LWFzLWNvbmZpZ3VyYXRpb25cIik7XG4gIH1cbiAgY29uc3QgYXR0cnMgPSB7XG4gICAgYnVja2V0X3NpemU6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5udW1iZXJUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLmJ1Y2tldFNpemUpLFxuICAgICAgaXNCbG9jazogZmFsc2UsXG4gICAgICB0eXBlOiBcInNpbXBsZVwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJudW1iZXJcIixcbiAgICB9LFxuICAgIGxvd2VyX2JvdW5kOiB7XG4gICAgICB2YWx1ZTogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25GaXhlZFNpemVCdWNrZXRpbmdDb25maWdMb3dlckJvdW5kVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5sb3dlckJvdW5kKSxcbiAgICAgIGlzQmxvY2s6IHRydWUsXG4gICAgICB0eXBlOiBcImxpc3RcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwiRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25GaXhlZFNpemVCdWNrZXRpbmdDb25maWdMb3dlckJvdW5kTGlzdFwiLFxuICAgIH0sXG4gICAgdXBwZXJfYm91bmQ6IHtcbiAgICAgIHZhbHVlOiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZ1VwcGVyQm91bmRUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLnVwcGVyQm91bmQpLFxuICAgICAgaXNCbG9jazogdHJ1ZSxcbiAgICAgIHR5cGU6IFwibGlzdFwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZ1VwcGVyQm91bmRMaXN0XCIsXG4gICAgfSxcbiAgfTtcblxuICAvLyByZW1vdmUgdW5kZWZpbmVkIGF0dHJpYnV0ZXNcbiAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhhdHRycykuZmlsdGVyKChbXywgdmFsdWVdKSA9PiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlLnZhbHVlICE9PSB1bmRlZmluZWQpKTtcbn1cblxuZXhwb3J0IGNsYXNzIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRml4ZWRTaXplQnVja2V0aW5nQ29uZmlnT3V0cHV0UmVmZXJlbmNlIGV4dGVuZHMgY2RrdGYuQ29tcGxleE9iamVjdCB7XG4gIHByaXZhdGUgaXNFbXB0eU9iamVjdCA9IGZhbHNlO1xuXG4gIC8qKlxuICAqIEBwYXJhbSB0ZXJyYWZvcm1SZXNvdXJjZSBUaGUgcGFyZW50IHJlc291cmNlXG4gICogQHBhcmFtIHRlcnJhZm9ybUF0dHJpYnV0ZSBUaGUgYXR0cmlidXRlIG9uIHRoZSBwYXJlbnQgcmVzb3VyY2UgdGhpcyBjbGFzcyBpcyByZWZlcmVuY2luZ1xuICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IodGVycmFmb3JtUmVzb3VyY2U6IGNka3RmLklJbnRlcnBvbGF0aW5nUGFyZW50LCB0ZXJyYWZvcm1BdHRyaWJ1dGU6IHN0cmluZykge1xuICAgIHN1cGVyKHRlcnJhZm9ybVJlc291cmNlLCB0ZXJyYWZvcm1BdHRyaWJ1dGUsIGZhbHNlLCAwKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgaW50ZXJuYWxWYWx1ZSgpOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZyB8IHVuZGVmaW5lZCB7XG4gICAgbGV0IGhhc0FueVZhbHVlcyA9IHRoaXMuaXNFbXB0eU9iamVjdDtcbiAgICBjb25zdCBpbnRlcm5hbFZhbHVlUmVzdWx0OiBhbnkgPSB7fTtcbiAgICBpZiAodGhpcy5fYnVja2V0U2l6ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC5idWNrZXRTaXplID0gdGhpcy5fYnVja2V0U2l6ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2xvd2VyQm91bmQ/LmludGVybmFsVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQubG93ZXJCb3VuZCA9IHRoaXMuX2xvd2VyQm91bmQ/LmludGVybmFsVmFsdWU7XG4gICAgfVxuICAgIGlmICh0aGlzLl91cHBlckJvdW5kPy5pbnRlcm5hbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LnVwcGVyQm91bmQgPSB0aGlzLl91cHBlckJvdW5kPy5pbnRlcm5hbFZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gaGFzQW55VmFsdWVzID8gaW50ZXJuYWxWYWx1ZVJlc3VsdCA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgaW50ZXJuYWxWYWx1ZSh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25GaXhlZFNpemVCdWNrZXRpbmdDb25maWcgfCB1bmRlZmluZWQpIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5pc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG4gICAgICB0aGlzLl9idWNrZXRTaXplID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fbG93ZXJCb3VuZC5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fdXBwZXJCb3VuZC5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggPT09IDA7XG4gICAgICB0aGlzLl9idWNrZXRTaXplID0gdmFsdWUuYnVja2V0U2l6ZTtcbiAgICAgIHRoaXMuX2xvd2VyQm91bmQuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlLmxvd2VyQm91bmQ7XG4gICAgICB0aGlzLl91cHBlckJvdW5kLmludGVybmFsVmFsdWUgPSB2YWx1ZS51cHBlckJvdW5kO1xuICAgIH1cbiAgfVxuXG4gIC8vIGJ1Y2tldF9zaXplIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogZmFsc2UsIHJlcXVpcmVkOiB0cnVlXG4gIHByaXZhdGUgX2J1Y2tldFNpemU/OiBudW1iZXI7IFxuICBwdWJsaWMgZ2V0IGJ1Y2tldFNpemUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TnVtYmVyQXR0cmlidXRlKCdidWNrZXRfc2l6ZScpO1xuICB9XG4gIHB1YmxpYyBzZXQgYnVja2V0U2l6ZSh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5fYnVja2V0U2l6ZSA9IHZhbHVlO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBidWNrZXRTaXplSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2J1Y2tldFNpemU7XG4gIH1cblxuICAvLyBsb3dlcl9ib3VuZCAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IGZhbHNlLCByZXF1aXJlZDogdHJ1ZVxuICBwcml2YXRlIF9sb3dlckJvdW5kID0gbmV3IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRml4ZWRTaXplQnVja2V0aW5nQ29uZmlnTG93ZXJCb3VuZE91dHB1dFJlZmVyZW5jZSh0aGlzLCBcImxvd2VyX2JvdW5kXCIpO1xuICBwdWJsaWMgZ2V0IGxvd2VyQm91bmQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xvd2VyQm91bmQ7XG4gIH1cbiAgcHVibGljIHB1dExvd2VyQm91bmQodmFsdWU6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRml4ZWRTaXplQnVja2V0aW5nQ29uZmlnTG93ZXJCb3VuZCkge1xuICAgIHRoaXMuX2xvd2VyQm91bmQuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBsb3dlckJvdW5kSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xvd2VyQm91bmQuaW50ZXJuYWxWYWx1ZTtcbiAgfVxuXG4gIC8vIHVwcGVyX2JvdW5kIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogZmFsc2UsIHJlcXVpcmVkOiB0cnVlXG4gIHByaXZhdGUgX3VwcGVyQm91bmQgPSBuZXcgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25GaXhlZFNpemVCdWNrZXRpbmdDb25maWdVcHBlckJvdW5kT3V0cHV0UmVmZXJlbmNlKHRoaXMsIFwidXBwZXJfYm91bmRcIik7XG4gIHB1YmxpYyBnZXQgdXBwZXJCb3VuZCgpIHtcbiAgICByZXR1cm4gdGhpcy5fdXBwZXJCb3VuZDtcbiAgfVxuICBwdWJsaWMgcHV0VXBwZXJCb3VuZCh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25GaXhlZFNpemVCdWNrZXRpbmdDb25maWdVcHBlckJvdW5kKSB7XG4gICAgdGhpcy5fdXBwZXJCb3VuZC5pbnRlcm5hbFZhbHVlID0gdmFsdWU7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IHVwcGVyQm91bmRJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fdXBwZXJCb3VuZC5pbnRlcm5hbFZhbHVlO1xuICB9XG59XG5leHBvcnQgaW50ZXJmYWNlIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uUmVkYWN0Q29uZmlnIHtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uUmVkYWN0Q29uZmlnVG9UZXJyYWZvcm0oc3RydWN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25SZWRhY3RDb25maWdPdXRwdXRSZWZlcmVuY2UgfCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvblJlZGFjdENvbmZpZyk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpIHx8IGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIGlmIChjZGt0Zi5pc0NvbXBsZXhFbGVtZW50KHN0cnVjdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGNvbXBsZXggZWxlbWVudCB3YXMgdXNlZCBhcyBjb25maWd1cmF0aW9uLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQ6IGh0dHBzOi8vY2RrLnRmL2NvbXBsZXgtb2JqZWN0LWFzLWNvbmZpZ3VyYXRpb25cIik7XG4gIH1cbiAgcmV0dXJuIHtcbiAgfVxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvblJlZGFjdENvbmZpZ1RvSGNsVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uUmVkYWN0Q29uZmlnT3V0cHV0UmVmZXJlbmNlIHwgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25SZWRhY3RDb25maWcpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIGNvbnN0IGF0dHJzID0ge1xuICB9O1xuICByZXR1cm4gYXR0cnM7XG59XG5cbmV4cG9ydCBjbGFzcyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvblJlZGFjdENvbmZpZ091dHB1dFJlZmVyZW5jZSBleHRlbmRzIGNka3RmLkNvbXBsZXhPYmplY3Qge1xuICBwcml2YXRlIGlzRW1wdHlPYmplY3QgPSBmYWxzZTtcblxuICAvKipcbiAgKiBAcGFyYW0gdGVycmFmb3JtUmVzb3VyY2UgVGhlIHBhcmVudCByZXNvdXJjZVxuICAqIEBwYXJhbSB0ZXJyYWZvcm1BdHRyaWJ1dGUgVGhlIGF0dHJpYnV0ZSBvbiB0aGUgcGFyZW50IHJlc291cmNlIHRoaXMgY2xhc3MgaXMgcmVmZXJlbmNpbmdcbiAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHRlcnJhZm9ybVJlc291cmNlOiBjZGt0Zi5JSW50ZXJwb2xhdGluZ1BhcmVudCwgdGVycmFmb3JtQXR0cmlidXRlOiBzdHJpbmcpIHtcbiAgICBzdXBlcih0ZXJyYWZvcm1SZXNvdXJjZSwgdGVycmFmb3JtQXR0cmlidXRlLCBmYWxzZSwgMCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGludGVybmFsVmFsdWUoKTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25SZWRhY3RDb25maWcgfCB1bmRlZmluZWQge1xuICAgIGxldCBoYXNBbnlWYWx1ZXMgPSB0aGlzLmlzRW1wdHlPYmplY3Q7XG4gICAgY29uc3QgaW50ZXJuYWxWYWx1ZVJlc3VsdDogYW55ID0ge307XG4gICAgcmV0dXJuIGhhc0FueVZhbHVlcyA/IGludGVybmFsVmFsdWVSZXN1bHQgOiB1bmRlZmluZWQ7XG4gIH1cblxuICBwdWJsaWMgc2V0IGludGVybmFsVmFsdWUodmFsdWU6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uUmVkYWN0Q29uZmlnIHwgdW5kZWZpbmVkKSB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IGZhbHNlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggPT09IDA7XG4gICAgfVxuICB9XG59XG5leHBvcnQgaW50ZXJmYWNlIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uUmVwbGFjZUNvbmZpZ05ld1ZhbHVlRGF0ZVZhbHVlIHtcbiAgLyoqXG4gICogRGF5IG9mIGEgbW9udGguIE11c3QgYmUgZnJvbSAxIHRvIDMxIGFuZCB2YWxpZCBmb3IgdGhlIHllYXIgYW5kIG1vbnRoLCBvciAwIHRvIHNwZWNpZnkgYSB5ZWFyIGJ5IGl0c2VsZiBvciBhIHllYXIgYW5kIG1vbnRoIHdoZXJlIHRoZSBkYXkgaXNuJ3Qgc2lnbmlmaWNhbnQuXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI2RheSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjZGF5fVxuICAqL1xuICByZWFkb25seSBkYXk/OiBudW1iZXI7XG4gIC8qKlxuICAqIE1vbnRoIG9mIGEgeWVhci4gTXVzdCBiZSBmcm9tIDEgdG8gMTIsIG9yIDAgdG8gc3BlY2lmeSBhIHllYXIgd2l0aG91dCBhIG1vbnRoIGFuZCBkYXkuXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI21vbnRoIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSNtb250aH1cbiAgKi9cbiAgcmVhZG9ubHkgbW9udGg/OiBudW1iZXI7XG4gIC8qKlxuICAqIFllYXIgb2YgdGhlIGRhdGUuIE11c3QgYmUgZnJvbSAxIHRvIDk5OTksIG9yIDAgdG8gc3BlY2lmeSBhIGRhdGUgd2l0aG91dCBhIHllYXIuXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI3llYXIgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI3llYXJ9XG4gICovXG4gIHJlYWRvbmx5IHllYXI/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvblJlcGxhY2VDb25maWdOZXdWYWx1ZURhdGVWYWx1ZVRvVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uUmVwbGFjZUNvbmZpZ05ld1ZhbHVlRGF0ZVZhbHVlT3V0cHV0UmVmZXJlbmNlIHwgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25SZXBsYWNlQ29uZmlnTmV3VmFsdWVEYXRlVmFsdWUpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIHJldHVybiB7XG4gICAgZGF5OiBjZGt0Zi5udW1iZXJUb1RlcnJhZm9ybShzdHJ1Y3QhLmRheSksXG4gICAgbW9udGg6IGNka3RmLm51bWJlclRvVGVycmFmb3JtKHN0cnVjdCEubW9udGgpLFxuICAgIHllYXI6IGNka3RmLm51bWJlclRvVGVycmFmb3JtKHN0cnVjdCEueWVhciksXG4gIH1cbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25SZXBsYWNlQ29uZmlnTmV3VmFsdWVEYXRlVmFsdWVUb0hjbFRlcnJhZm9ybShzdHJ1Y3Q/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvblJlcGxhY2VDb25maWdOZXdWYWx1ZURhdGVWYWx1ZU91dHB1dFJlZmVyZW5jZSB8IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uUmVwbGFjZUNvbmZpZ05ld1ZhbHVlRGF0ZVZhbHVlKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkgfHwgY2RrdGYuVG9rZW5pemF0aW9uLmlzUmVzb2x2YWJsZShzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgaWYgKGNka3RmLmlzQ29tcGxleEVsZW1lbnQoc3RydWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkEgY29tcGxleCBlbGVtZW50IHdhcyB1c2VkIGFzIGNvbmZpZ3VyYXRpb24sIHRoaXMgaXMgbm90IHN1cHBvcnRlZDogaHR0cHM6Ly9jZGsudGYvY29tcGxleC1vYmplY3QtYXMtY29uZmlndXJhdGlvblwiKTtcbiAgfVxuICBjb25zdCBhdHRycyA9IHtcbiAgICBkYXk6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5udW1iZXJUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLmRheSksXG4gICAgICBpc0Jsb2NrOiBmYWxzZSxcbiAgICAgIHR5cGU6IFwic2ltcGxlXCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcIm51bWJlclwiLFxuICAgIH0sXG4gICAgbW9udGg6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5udW1iZXJUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLm1vbnRoKSxcbiAgICAgIGlzQmxvY2s6IGZhbHNlLFxuICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwibnVtYmVyXCIsXG4gICAgfSxcbiAgICB5ZWFyOiB7XG4gICAgICB2YWx1ZTogY2RrdGYubnVtYmVyVG9IY2xUZXJyYWZvcm0oc3RydWN0IS55ZWFyKSxcbiAgICAgIGlzQmxvY2s6IGZhbHNlLFxuICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwibnVtYmVyXCIsXG4gICAgfSxcbiAgfTtcblxuICAvLyByZW1vdmUgdW5kZWZpbmVkIGF0dHJpYnV0ZXNcbiAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhhdHRycykuZmlsdGVyKChbXywgdmFsdWVdKSA9PiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlLnZhbHVlICE9PSB1bmRlZmluZWQpKTtcbn1cblxuZXhwb3J0IGNsYXNzIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uUmVwbGFjZUNvbmZpZ05ld1ZhbHVlRGF0ZVZhbHVlT3V0cHV0UmVmZXJlbmNlIGV4dGVuZHMgY2RrdGYuQ29tcGxleE9iamVjdCB7XG4gIHByaXZhdGUgaXNFbXB0eU9iamVjdCA9IGZhbHNlO1xuXG4gIC8qKlxuICAqIEBwYXJhbSB0ZXJyYWZvcm1SZXNvdXJjZSBUaGUgcGFyZW50IHJlc291cmNlXG4gICogQHBhcmFtIHRlcnJhZm9ybUF0dHJpYnV0ZSBUaGUgYXR0cmlidXRlIG9uIHRoZSBwYXJlbnQgcmVzb3VyY2UgdGhpcyBjbGFzcyBpcyByZWZlcmVuY2luZ1xuICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IodGVycmFmb3JtUmVzb3VyY2U6IGNka3RmLklJbnRlcnBvbGF0aW5nUGFyZW50LCB0ZXJyYWZvcm1BdHRyaWJ1dGU6IHN0cmluZykge1xuICAgIHN1cGVyKHRlcnJhZm9ybVJlc291cmNlLCB0ZXJyYWZvcm1BdHRyaWJ1dGUsIGZhbHNlLCAwKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgaW50ZXJuYWxWYWx1ZSgpOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvblJlcGxhY2VDb25maWdOZXdWYWx1ZURhdGVWYWx1ZSB8IHVuZGVmaW5lZCB7XG4gICAgbGV0IGhhc0FueVZhbHVlcyA9IHRoaXMuaXNFbXB0eU9iamVjdDtcbiAgICBjb25zdCBpbnRlcm5hbFZhbHVlUmVzdWx0OiBhbnkgPSB7fTtcbiAgICBpZiAodGhpcy5fZGF5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LmRheSA9IHRoaXMuX2RheTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX21vbnRoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0Lm1vbnRoID0gdGhpcy5fbW9udGg7XG4gICAgfVxuICAgIGlmICh0aGlzLl95ZWFyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LnllYXIgPSB0aGlzLl95ZWFyO1xuICAgIH1cbiAgICByZXR1cm4gaGFzQW55VmFsdWVzID8gaW50ZXJuYWxWYWx1ZVJlc3VsdCA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgaW50ZXJuYWxWYWx1ZSh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25SZXBsYWNlQ29uZmlnTmV3VmFsdWVEYXRlVmFsdWUgfCB1bmRlZmluZWQpIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5pc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG4gICAgICB0aGlzLl9kYXkgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9tb250aCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX3llYXIgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5pc0VtcHR5T2JqZWN0ID0gT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aCA9PT0gMDtcbiAgICAgIHRoaXMuX2RheSA9IHZhbHVlLmRheTtcbiAgICAgIHRoaXMuX21vbnRoID0gdmFsdWUubW9udGg7XG4gICAgICB0aGlzLl95ZWFyID0gdmFsdWUueWVhcjtcbiAgICB9XG4gIH1cblxuICAvLyBkYXkgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfZGF5PzogbnVtYmVyOyBcbiAgcHVibGljIGdldCBkYXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TnVtYmVyQXR0cmlidXRlKCdkYXknKTtcbiAgfVxuICBwdWJsaWMgc2V0IGRheSh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5fZGF5ID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0RGF5KCkge1xuICAgIHRoaXMuX2RheSA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgZGF5SW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RheTtcbiAgfVxuXG4gIC8vIG1vbnRoIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX21vbnRoPzogbnVtYmVyOyBcbiAgcHVibGljIGdldCBtb250aCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXROdW1iZXJBdHRyaWJ1dGUoJ21vbnRoJyk7XG4gIH1cbiAgcHVibGljIHNldCBtb250aCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5fbW9udGggPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRNb250aCgpIHtcbiAgICB0aGlzLl9tb250aCA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgbW9udGhJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fbW9udGg7XG4gIH1cblxuICAvLyB5ZWFyIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX3llYXI/OiBudW1iZXI7IFxuICBwdWJsaWMgZ2V0IHllYXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TnVtYmVyQXR0cmlidXRlKCd5ZWFyJyk7XG4gIH1cbiAgcHVibGljIHNldCB5ZWFyKHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl95ZWFyID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0WWVhcigpIHtcbiAgICB0aGlzLl95ZWFyID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCB5ZWFySW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3llYXI7XG4gIH1cbn1cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25SZXBsYWNlQ29uZmlnTmV3VmFsdWVUaW1lVmFsdWUge1xuICAvKipcbiAgKiBIb3VycyBvZiBkYXkgaW4gMjQgaG91ciBmb3JtYXQuIFNob3VsZCBiZSBmcm9tIDAgdG8gMjMuIEFuIEFQSSBtYXkgY2hvb3NlIHRvIGFsbG93IHRoZSB2YWx1ZSBcIjI0OjAwOjAwXCIgZm9yIHNjZW5hcmlvcyBsaWtlIGJ1c2luZXNzIGNsb3NpbmcgdGltZS5cbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjaG91cnMgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI2hvdXJzfVxuICAqL1xuICByZWFkb25seSBob3Vycz86IG51bWJlcjtcbiAgLyoqXG4gICogTWludXRlcyBvZiBob3VyIG9mIGRheS4gTXVzdCBiZSBmcm9tIDAgdG8gNTkuXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI21pbnV0ZXMgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI21pbnV0ZXN9XG4gICovXG4gIHJlYWRvbmx5IG1pbnV0ZXM/OiBudW1iZXI7XG4gIC8qKlxuICAqIEZyYWN0aW9ucyBvZiBzZWNvbmRzIGluIG5hbm9zZWNvbmRzLiBNdXN0IGJlIGZyb20gMCB0byA5OTksOTk5LDk5OS5cbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjbmFub3MgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI25hbm9zfVxuICAqL1xuICByZWFkb25seSBuYW5vcz86IG51bWJlcjtcbiAgLyoqXG4gICogU2Vjb25kcyBvZiBtaW51dGVzIG9mIHRoZSB0aW1lLiBNdXN0IG5vcm1hbGx5IGJlIGZyb20gMCB0byA1OS4gQW4gQVBJIG1heSBhbGxvdyB0aGUgdmFsdWUgNjAgaWYgaXQgYWxsb3dzIGxlYXAtc2Vjb25kcy5cbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjc2Vjb25kcyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjc2Vjb25kc31cbiAgKi9cbiAgcmVhZG9ubHkgc2Vjb25kcz86IG51bWJlcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uUmVwbGFjZUNvbmZpZ05ld1ZhbHVlVGltZVZhbHVlVG9UZXJyYWZvcm0oc3RydWN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25SZXBsYWNlQ29uZmlnTmV3VmFsdWVUaW1lVmFsdWVPdXRwdXRSZWZlcmVuY2UgfCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvblJlcGxhY2VDb25maWdOZXdWYWx1ZVRpbWVWYWx1ZSk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpIHx8IGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIGlmIChjZGt0Zi5pc0NvbXBsZXhFbGVtZW50KHN0cnVjdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGNvbXBsZXggZWxlbWVudCB3YXMgdXNlZCBhcyBjb25maWd1cmF0aW9uLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQ6IGh0dHBzOi8vY2RrLnRmL2NvbXBsZXgtb2JqZWN0LWFzLWNvbmZpZ3VyYXRpb25cIik7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBob3VyczogY2RrdGYubnVtYmVyVG9UZXJyYWZvcm0oc3RydWN0IS5ob3VycyksXG4gICAgbWludXRlczogY2RrdGYubnVtYmVyVG9UZXJyYWZvcm0oc3RydWN0IS5taW51dGVzKSxcbiAgICBuYW5vczogY2RrdGYubnVtYmVyVG9UZXJyYWZvcm0oc3RydWN0IS5uYW5vcyksXG4gICAgc2Vjb25kczogY2RrdGYubnVtYmVyVG9UZXJyYWZvcm0oc3RydWN0IS5zZWNvbmRzKSxcbiAgfVxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvblJlcGxhY2VDb25maWdOZXdWYWx1ZVRpbWVWYWx1ZVRvSGNsVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uUmVwbGFjZUNvbmZpZ05ld1ZhbHVlVGltZVZhbHVlT3V0cHV0UmVmZXJlbmNlIHwgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25SZXBsYWNlQ29uZmlnTmV3VmFsdWVUaW1lVmFsdWUpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIGNvbnN0IGF0dHJzID0ge1xuICAgIGhvdXJzOiB7XG4gICAgICB2YWx1ZTogY2RrdGYubnVtYmVyVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5ob3VycyksXG4gICAgICBpc0Jsb2NrOiBmYWxzZSxcbiAgICAgIHR5cGU6IFwic2ltcGxlXCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcIm51bWJlclwiLFxuICAgIH0sXG4gICAgbWludXRlczoge1xuICAgICAgdmFsdWU6IGNka3RmLm51bWJlclRvSGNsVGVycmFmb3JtKHN0cnVjdCEubWludXRlcyksXG4gICAgICBpc0Jsb2NrOiBmYWxzZSxcbiAgICAgIHR5cGU6IFwic2ltcGxlXCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcIm51bWJlclwiLFxuICAgIH0sXG4gICAgbmFub3M6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5udW1iZXJUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLm5hbm9zKSxcbiAgICAgIGlzQmxvY2s6IGZhbHNlLFxuICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwibnVtYmVyXCIsXG4gICAgfSxcbiAgICBzZWNvbmRzOiB7XG4gICAgICB2YWx1ZTogY2RrdGYubnVtYmVyVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5zZWNvbmRzKSxcbiAgICAgIGlzQmxvY2s6IGZhbHNlLFxuICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwibnVtYmVyXCIsXG4gICAgfSxcbiAgfTtcblxuICAvLyByZW1vdmUgdW5kZWZpbmVkIGF0dHJpYnV0ZXNcbiAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhhdHRycykuZmlsdGVyKChbXywgdmFsdWVdKSA9PiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlLnZhbHVlICE9PSB1bmRlZmluZWQpKTtcbn1cblxuZXhwb3J0IGNsYXNzIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uUmVwbGFjZUNvbmZpZ05ld1ZhbHVlVGltZVZhbHVlT3V0cHV0UmVmZXJlbmNlIGV4dGVuZHMgY2RrdGYuQ29tcGxleE9iamVjdCB7XG4gIHByaXZhdGUgaXNFbXB0eU9iamVjdCA9IGZhbHNlO1xuXG4gIC8qKlxuICAqIEBwYXJhbSB0ZXJyYWZvcm1SZXNvdXJjZSBUaGUgcGFyZW50IHJlc291cmNlXG4gICogQHBhcmFtIHRlcnJhZm9ybUF0dHJpYnV0ZSBUaGUgYXR0cmlidXRlIG9uIHRoZSBwYXJlbnQgcmVzb3VyY2UgdGhpcyBjbGFzcyBpcyByZWZlcmVuY2luZ1xuICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IodGVycmFmb3JtUmVzb3VyY2U6IGNka3RmLklJbnRlcnBvbGF0aW5nUGFyZW50LCB0ZXJyYWZvcm1BdHRyaWJ1dGU6IHN0cmluZykge1xuICAgIHN1cGVyKHRlcnJhZm9ybVJlc291cmNlLCB0ZXJyYWZvcm1BdHRyaWJ1dGUsIGZhbHNlLCAwKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgaW50ZXJuYWxWYWx1ZSgpOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvblJlcGxhY2VDb25maWdOZXdWYWx1ZVRpbWVWYWx1ZSB8IHVuZGVmaW5lZCB7XG4gICAgbGV0IGhhc0FueVZhbHVlcyA9IHRoaXMuaXNFbXB0eU9iamVjdDtcbiAgICBjb25zdCBpbnRlcm5hbFZhbHVlUmVzdWx0OiBhbnkgPSB7fTtcbiAgICBpZiAodGhpcy5faG91cnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQuaG91cnMgPSB0aGlzLl9ob3VycztcbiAgICB9XG4gICAgaWYgKHRoaXMuX21pbnV0ZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQubWludXRlcyA9IHRoaXMuX21pbnV0ZXM7XG4gICAgfVxuICAgIGlmICh0aGlzLl9uYW5vcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC5uYW5vcyA9IHRoaXMuX25hbm9zO1xuICAgIH1cbiAgICBpZiAodGhpcy5fc2Vjb25kcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC5zZWNvbmRzID0gdGhpcy5fc2Vjb25kcztcbiAgICB9XG4gICAgcmV0dXJuIGhhc0FueVZhbHVlcyA/IGludGVybmFsVmFsdWVSZXN1bHQgOiB1bmRlZmluZWQ7XG4gIH1cblxuICBwdWJsaWMgc2V0IGludGVybmFsVmFsdWUodmFsdWU6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uUmVwbGFjZUNvbmZpZ05ld1ZhbHVlVGltZVZhbHVlIHwgdW5kZWZpbmVkKSB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IGZhbHNlO1xuICAgICAgdGhpcy5faG91cnMgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9taW51dGVzID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fbmFub3MgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9zZWNvbmRzID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggPT09IDA7XG4gICAgICB0aGlzLl9ob3VycyA9IHZhbHVlLmhvdXJzO1xuICAgICAgdGhpcy5fbWludXRlcyA9IHZhbHVlLm1pbnV0ZXM7XG4gICAgICB0aGlzLl9uYW5vcyA9IHZhbHVlLm5hbm9zO1xuICAgICAgdGhpcy5fc2Vjb25kcyA9IHZhbHVlLnNlY29uZHM7XG4gICAgfVxuICB9XG5cbiAgLy8gaG91cnMgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfaG91cnM/OiBudW1iZXI7IFxuICBwdWJsaWMgZ2V0IGhvdXJzKCkge1xuICAgIHJldHVybiB0aGlzLmdldE51bWJlckF0dHJpYnV0ZSgnaG91cnMnKTtcbiAgfVxuICBwdWJsaWMgc2V0IGhvdXJzKHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl9ob3VycyA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldEhvdXJzKCkge1xuICAgIHRoaXMuX2hvdXJzID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBob3Vyc0lucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9ob3VycztcbiAgfVxuXG4gIC8vIG1pbnV0ZXMgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfbWludXRlcz86IG51bWJlcjsgXG4gIHB1YmxpYyBnZXQgbWludXRlcygpIHtcbiAgICByZXR1cm4gdGhpcy5nZXROdW1iZXJBdHRyaWJ1dGUoJ21pbnV0ZXMnKTtcbiAgfVxuICBwdWJsaWMgc2V0IG1pbnV0ZXModmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX21pbnV0ZXMgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRNaW51dGVzKCkge1xuICAgIHRoaXMuX21pbnV0ZXMgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IG1pbnV0ZXNJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fbWludXRlcztcbiAgfVxuXG4gIC8vIG5hbm9zIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX25hbm9zPzogbnVtYmVyOyBcbiAgcHVibGljIGdldCBuYW5vcygpIHtcbiAgICByZXR1cm4gdGhpcy5nZXROdW1iZXJBdHRyaWJ1dGUoJ25hbm9zJyk7XG4gIH1cbiAgcHVibGljIHNldCBuYW5vcyh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5fbmFub3MgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXROYW5vcygpIHtcbiAgICB0aGlzLl9uYW5vcyA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgbmFub3NJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fbmFub3M7XG4gIH1cblxuICAvLyBzZWNvbmRzIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX3NlY29uZHM/OiBudW1iZXI7IFxuICBwdWJsaWMgZ2V0IHNlY29uZHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TnVtYmVyQXR0cmlidXRlKCdzZWNvbmRzJyk7XG4gIH1cbiAgcHVibGljIHNldCBzZWNvbmRzKHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl9zZWNvbmRzID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0U2Vjb25kcygpIHtcbiAgICB0aGlzLl9zZWNvbmRzID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBzZWNvbmRzSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NlY29uZHM7XG4gIH1cbn1cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25SZXBsYWNlQ29uZmlnTmV3VmFsdWUge1xuICAvKipcbiAgKiBBIGJvb2xlYW4gdmFsdWUuXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI2Jvb2xlYW5fdmFsdWUgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI2Jvb2xlYW5fdmFsdWV9XG4gICovXG4gIHJlYWRvbmx5IGJvb2xlYW5WYWx1ZT86IGJvb2xlYW4gfCBjZGt0Zi5JUmVzb2x2YWJsZTtcbiAgLyoqXG4gICogUmVwcmVzZW50cyBhIGRheSBvZiB0aGUgd2Vlay4gUG9zc2libGUgdmFsdWVzOiBbXCJNT05EQVlcIiwgXCJUVUVTREFZXCIsIFwiV0VETkVTREFZXCIsIFwiVEhVUlNEQVlcIiwgXCJGUklEQVlcIiwgXCJTQVRVUkRBWVwiLCBcIlNVTkRBWVwiXVxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNkYXlfb2Zfd2Vla192YWx1ZSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjZGF5X29mX3dlZWtfdmFsdWV9XG4gICovXG4gIHJlYWRvbmx5IGRheU9mV2Vla1ZhbHVlPzogc3RyaW5nO1xuICAvKipcbiAgKiBBIGZsb2F0IHZhbHVlLlxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNmbG9hdF92YWx1ZSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjZmxvYXRfdmFsdWV9XG4gICovXG4gIHJlYWRvbmx5IGZsb2F0VmFsdWU/OiBudW1iZXI7XG4gIC8qKlxuICAqIEFuIGludGVnZXIgdmFsdWUgKGludDY0IGZvcm1hdClcbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjaW50ZWdlcl92YWx1ZSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjaW50ZWdlcl92YWx1ZX1cbiAgKi9cbiAgcmVhZG9ubHkgaW50ZWdlclZhbHVlPzogc3RyaW5nO1xuICAvKipcbiAgKiBBIHN0cmluZyB2YWx1ZS5cbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjc3RyaW5nX3ZhbHVlIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSNzdHJpbmdfdmFsdWV9XG4gICovXG4gIHJlYWRvbmx5IHN0cmluZ1ZhbHVlPzogc3RyaW5nO1xuICAvKipcbiAgKiBBIHRpbWVzdGFtcCBpbiBSRkMzMzM5IFVUQyBcIlp1bHVcIiBmb3JtYXQsIHdpdGggbmFub3NlY29uZCByZXNvbHV0aW9uIGFuZCB1cCB0byBuaW5lIGZyYWN0aW9uYWwgZGlnaXRzLiBFeGFtcGxlczogXCIyMDE0LTEwLTAyVDE1OjAxOjIzWlwiIGFuZCBcIjIwMTQtMTAtMDJUMTU6MDE6MjMuMDQ1MTIzNDU2WlwiLlxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSN0aW1lc3RhbXBfdmFsdWUgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI3RpbWVzdGFtcF92YWx1ZX1cbiAgKi9cbiAgcmVhZG9ubHkgdGltZXN0YW1wVmFsdWU/OiBzdHJpbmc7XG4gIC8qKlxuICAqIGRhdGVfdmFsdWUgYmxvY2tcbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjZGF0ZV92YWx1ZSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjZGF0ZV92YWx1ZX1cbiAgKi9cbiAgcmVhZG9ubHkgZGF0ZVZhbHVlPzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25SZXBsYWNlQ29uZmlnTmV3VmFsdWVEYXRlVmFsdWU7XG4gIC8qKlxuICAqIHRpbWVfdmFsdWUgYmxvY2tcbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjdGltZV92YWx1ZSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjdGltZV92YWx1ZX1cbiAgKi9cbiAgcmVhZG9ubHkgdGltZVZhbHVlPzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25SZXBsYWNlQ29uZmlnTmV3VmFsdWVUaW1lVmFsdWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvblJlcGxhY2VDb25maWdOZXdWYWx1ZVRvVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uUmVwbGFjZUNvbmZpZ05ld1ZhbHVlT3V0cHV0UmVmZXJlbmNlIHwgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25SZXBsYWNlQ29uZmlnTmV3VmFsdWUpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIHJldHVybiB7XG4gICAgYm9vbGVhbl92YWx1ZTogY2RrdGYuYm9vbGVhblRvVGVycmFmb3JtKHN0cnVjdCEuYm9vbGVhblZhbHVlKSxcbiAgICBkYXlfb2Zfd2Vla192YWx1ZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5kYXlPZldlZWtWYWx1ZSksXG4gICAgZmxvYXRfdmFsdWU6IGNka3RmLm51bWJlclRvVGVycmFmb3JtKHN0cnVjdCEuZmxvYXRWYWx1ZSksXG4gICAgaW50ZWdlcl92YWx1ZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5pbnRlZ2VyVmFsdWUpLFxuICAgIHN0cmluZ192YWx1ZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5zdHJpbmdWYWx1ZSksXG4gICAgdGltZXN0YW1wX3ZhbHVlOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLnRpbWVzdGFtcFZhbHVlKSxcbiAgICBkYXRlX3ZhbHVlOiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvblJlcGxhY2VDb25maWdOZXdWYWx1ZURhdGVWYWx1ZVRvVGVycmFmb3JtKHN0cnVjdCEuZGF0ZVZhbHVlKSxcbiAgICB0aW1lX3ZhbHVlOiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvblJlcGxhY2VDb25maWdOZXdWYWx1ZVRpbWVWYWx1ZVRvVGVycmFmb3JtKHN0cnVjdCEudGltZVZhbHVlKSxcbiAgfVxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvblJlcGxhY2VDb25maWdOZXdWYWx1ZVRvSGNsVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uUmVwbGFjZUNvbmZpZ05ld1ZhbHVlT3V0cHV0UmVmZXJlbmNlIHwgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25SZXBsYWNlQ29uZmlnTmV3VmFsdWUpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIGNvbnN0IGF0dHJzID0ge1xuICAgIGJvb2xlYW5fdmFsdWU6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5ib29sZWFuVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5ib29sZWFuVmFsdWUpLFxuICAgICAgaXNCbG9jazogZmFsc2UsXG4gICAgICB0eXBlOiBcInNpbXBsZVwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJib29sZWFuXCIsXG4gICAgfSxcbiAgICBkYXlfb2Zfd2Vla192YWx1ZToge1xuICAgICAgdmFsdWU6IGNka3RmLnN0cmluZ1RvSGNsVGVycmFmb3JtKHN0cnVjdCEuZGF5T2ZXZWVrVmFsdWUpLFxuICAgICAgaXNCbG9jazogZmFsc2UsXG4gICAgICB0eXBlOiBcInNpbXBsZVwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJzdHJpbmdcIixcbiAgICB9LFxuICAgIGZsb2F0X3ZhbHVlOiB7XG4gICAgICB2YWx1ZTogY2RrdGYubnVtYmVyVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5mbG9hdFZhbHVlKSxcbiAgICAgIGlzQmxvY2s6IGZhbHNlLFxuICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwibnVtYmVyXCIsXG4gICAgfSxcbiAgICBpbnRlZ2VyX3ZhbHVlOiB7XG4gICAgICB2YWx1ZTogY2RrdGYuc3RyaW5nVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5pbnRlZ2VyVmFsdWUpLFxuICAgICAgaXNCbG9jazogZmFsc2UsXG4gICAgICB0eXBlOiBcInNpbXBsZVwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJzdHJpbmdcIixcbiAgICB9LFxuICAgIHN0cmluZ192YWx1ZToge1xuICAgICAgdmFsdWU6IGNka3RmLnN0cmluZ1RvSGNsVGVycmFmb3JtKHN0cnVjdCEuc3RyaW5nVmFsdWUpLFxuICAgICAgaXNCbG9jazogZmFsc2UsXG4gICAgICB0eXBlOiBcInNpbXBsZVwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJzdHJpbmdcIixcbiAgICB9LFxuICAgIHRpbWVzdGFtcF92YWx1ZToge1xuICAgICAgdmFsdWU6IGNka3RmLnN0cmluZ1RvSGNsVGVycmFmb3JtKHN0cnVjdCEudGltZXN0YW1wVmFsdWUpLFxuICAgICAgaXNCbG9jazogZmFsc2UsXG4gICAgICB0eXBlOiBcInNpbXBsZVwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJzdHJpbmdcIixcbiAgICB9LFxuICAgIGRhdGVfdmFsdWU6IHtcbiAgICAgIHZhbHVlOiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvblJlcGxhY2VDb25maWdOZXdWYWx1ZURhdGVWYWx1ZVRvSGNsVGVycmFmb3JtKHN0cnVjdCEuZGF0ZVZhbHVlKSxcbiAgICAgIGlzQmxvY2s6IHRydWUsXG4gICAgICB0eXBlOiBcImxpc3RcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwiRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25SZXBsYWNlQ29uZmlnTmV3VmFsdWVEYXRlVmFsdWVMaXN0XCIsXG4gICAgfSxcbiAgICB0aW1lX3ZhbHVlOiB7XG4gICAgICB2YWx1ZTogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25SZXBsYWNlQ29uZmlnTmV3VmFsdWVUaW1lVmFsdWVUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLnRpbWVWYWx1ZSksXG4gICAgICBpc0Jsb2NrOiB0cnVlLFxuICAgICAgdHlwZTogXCJsaXN0XCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcIkRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uUmVwbGFjZUNvbmZpZ05ld1ZhbHVlVGltZVZhbHVlTGlzdFwiLFxuICAgIH0sXG4gIH07XG5cbiAgLy8gcmVtb3ZlIHVuZGVmaW5lZCBhdHRyaWJ1dGVzXG4gIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMoYXR0cnMpLmZpbHRlcigoW18sIHZhbHVlXSkgPT4gdmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZS52YWx1ZSAhPT0gdW5kZWZpbmVkKSk7XG59XG5cbmV4cG9ydCBjbGFzcyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvblJlcGxhY2VDb25maWdOZXdWYWx1ZU91dHB1dFJlZmVyZW5jZSBleHRlbmRzIGNka3RmLkNvbXBsZXhPYmplY3Qge1xuICBwcml2YXRlIGlzRW1wdHlPYmplY3QgPSBmYWxzZTtcblxuICAvKipcbiAgKiBAcGFyYW0gdGVycmFmb3JtUmVzb3VyY2UgVGhlIHBhcmVudCByZXNvdXJjZVxuICAqIEBwYXJhbSB0ZXJyYWZvcm1BdHRyaWJ1dGUgVGhlIGF0dHJpYnV0ZSBvbiB0aGUgcGFyZW50IHJlc291cmNlIHRoaXMgY2xhc3MgaXMgcmVmZXJlbmNpbmdcbiAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHRlcnJhZm9ybVJlc291cmNlOiBjZGt0Zi5JSW50ZXJwb2xhdGluZ1BhcmVudCwgdGVycmFmb3JtQXR0cmlidXRlOiBzdHJpbmcpIHtcbiAgICBzdXBlcih0ZXJyYWZvcm1SZXNvdXJjZSwgdGVycmFmb3JtQXR0cmlidXRlLCBmYWxzZSwgMCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGludGVybmFsVmFsdWUoKTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25SZXBsYWNlQ29uZmlnTmV3VmFsdWUgfCB1bmRlZmluZWQge1xuICAgIGxldCBoYXNBbnlWYWx1ZXMgPSB0aGlzLmlzRW1wdHlPYmplY3Q7XG4gICAgY29uc3QgaW50ZXJuYWxWYWx1ZVJlc3VsdDogYW55ID0ge307XG4gICAgaWYgKHRoaXMuX2Jvb2xlYW5WYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC5ib29sZWFuVmFsdWUgPSB0aGlzLl9ib29sZWFuVmFsdWU7XG4gICAgfVxuICAgIGlmICh0aGlzLl9kYXlPZldlZWtWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC5kYXlPZldlZWtWYWx1ZSA9IHRoaXMuX2RheU9mV2Vla1ZhbHVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5fZmxvYXRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC5mbG9hdFZhbHVlID0gdGhpcy5fZmxvYXRWYWx1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2ludGVnZXJWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC5pbnRlZ2VyVmFsdWUgPSB0aGlzLl9pbnRlZ2VyVmFsdWU7XG4gICAgfVxuICAgIGlmICh0aGlzLl9zdHJpbmdWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC5zdHJpbmdWYWx1ZSA9IHRoaXMuX3N0cmluZ1ZhbHVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5fdGltZXN0YW1wVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQudGltZXN0YW1wVmFsdWUgPSB0aGlzLl90aW1lc3RhbXBWYWx1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2RhdGVWYWx1ZT8uaW50ZXJuYWxWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC5kYXRlVmFsdWUgPSB0aGlzLl9kYXRlVmFsdWU/LmludGVybmFsVmFsdWU7XG4gICAgfVxuICAgIGlmICh0aGlzLl90aW1lVmFsdWU/LmludGVybmFsVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQudGltZVZhbHVlID0gdGhpcy5fdGltZVZhbHVlPy5pbnRlcm5hbFZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gaGFzQW55VmFsdWVzID8gaW50ZXJuYWxWYWx1ZVJlc3VsdCA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgaW50ZXJuYWxWYWx1ZSh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25SZXBsYWNlQ29uZmlnTmV3VmFsdWUgfCB1bmRlZmluZWQpIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5pc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG4gICAgICB0aGlzLl9ib29sZWFuVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9kYXlPZldlZWtWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2Zsb2F0VmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9pbnRlZ2VyVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9zdHJpbmdWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX3RpbWVzdGFtcFZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fZGF0ZVZhbHVlLmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl90aW1lVmFsdWUuaW50ZXJuYWxWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLmlzRW1wdHlPYmplY3QgPSBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoID09PSAwO1xuICAgICAgdGhpcy5fYm9vbGVhblZhbHVlID0gdmFsdWUuYm9vbGVhblZhbHVlO1xuICAgICAgdGhpcy5fZGF5T2ZXZWVrVmFsdWUgPSB2YWx1ZS5kYXlPZldlZWtWYWx1ZTtcbiAgICAgIHRoaXMuX2Zsb2F0VmFsdWUgPSB2YWx1ZS5mbG9hdFZhbHVlO1xuICAgICAgdGhpcy5faW50ZWdlclZhbHVlID0gdmFsdWUuaW50ZWdlclZhbHVlO1xuICAgICAgdGhpcy5fc3RyaW5nVmFsdWUgPSB2YWx1ZS5zdHJpbmdWYWx1ZTtcbiAgICAgIHRoaXMuX3RpbWVzdGFtcFZhbHVlID0gdmFsdWUudGltZXN0YW1wVmFsdWU7XG4gICAgICB0aGlzLl9kYXRlVmFsdWUuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlLmRhdGVWYWx1ZTtcbiAgICAgIHRoaXMuX3RpbWVWYWx1ZS5pbnRlcm5hbFZhbHVlID0gdmFsdWUudGltZVZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIC8vIGJvb2xlYW5fdmFsdWUgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfYm9vbGVhblZhbHVlPzogYm9vbGVhbiB8IGNka3RmLklSZXNvbHZhYmxlOyBcbiAgcHVibGljIGdldCBib29sZWFuVmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0Qm9vbGVhbkF0dHJpYnV0ZSgnYm9vbGVhbl92YWx1ZScpO1xuICB9XG4gIHB1YmxpYyBzZXQgYm9vbGVhblZhbHVlKHZhbHVlOiBib29sZWFuIHwgY2RrdGYuSVJlc29sdmFibGUpIHtcbiAgICB0aGlzLl9ib29sZWFuVmFsdWUgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRCb29sZWFuVmFsdWUoKSB7XG4gICAgdGhpcy5fYm9vbGVhblZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBib29sZWFuVmFsdWVJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fYm9vbGVhblZhbHVlO1xuICB9XG5cbiAgLy8gZGF5X29mX3dlZWtfdmFsdWUgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfZGF5T2ZXZWVrVmFsdWU/OiBzdHJpbmc7IFxuICBwdWJsaWMgZ2V0IGRheU9mV2Vla1ZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgnZGF5X29mX3dlZWtfdmFsdWUnKTtcbiAgfVxuICBwdWJsaWMgc2V0IGRheU9mV2Vla1ZhbHVlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9kYXlPZldlZWtWYWx1ZSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldERheU9mV2Vla1ZhbHVlKCkge1xuICAgIHRoaXMuX2RheU9mV2Vla1ZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBkYXlPZldlZWtWYWx1ZUlucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9kYXlPZldlZWtWYWx1ZTtcbiAgfVxuXG4gIC8vIGZsb2F0X3ZhbHVlIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX2Zsb2F0VmFsdWU/OiBudW1iZXI7IFxuICBwdWJsaWMgZ2V0IGZsb2F0VmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TnVtYmVyQXR0cmlidXRlKCdmbG9hdF92YWx1ZScpO1xuICB9XG4gIHB1YmxpYyBzZXQgZmxvYXRWYWx1ZSh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5fZmxvYXRWYWx1ZSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldEZsb2F0VmFsdWUoKSB7XG4gICAgdGhpcy5fZmxvYXRWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgZmxvYXRWYWx1ZUlucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9mbG9hdFZhbHVlO1xuICB9XG5cbiAgLy8gaW50ZWdlcl92YWx1ZSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9pbnRlZ2VyVmFsdWU/OiBzdHJpbmc7IFxuICBwdWJsaWMgZ2V0IGludGVnZXJWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ2ludGVnZXJfdmFsdWUnKTtcbiAgfVxuICBwdWJsaWMgc2V0IGludGVnZXJWYWx1ZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5faW50ZWdlclZhbHVlID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0SW50ZWdlclZhbHVlKCkge1xuICAgIHRoaXMuX2ludGVnZXJWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgaW50ZWdlclZhbHVlSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ludGVnZXJWYWx1ZTtcbiAgfVxuXG4gIC8vIHN0cmluZ192YWx1ZSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9zdHJpbmdWYWx1ZT86IHN0cmluZzsgXG4gIHB1YmxpYyBnZXQgc3RyaW5nVmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCdzdHJpbmdfdmFsdWUnKTtcbiAgfVxuICBwdWJsaWMgc2V0IHN0cmluZ1ZhbHVlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9zdHJpbmdWYWx1ZSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldFN0cmluZ1ZhbHVlKCkge1xuICAgIHRoaXMuX3N0cmluZ1ZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBzdHJpbmdWYWx1ZUlucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9zdHJpbmdWYWx1ZTtcbiAgfVxuXG4gIC8vIHRpbWVzdGFtcF92YWx1ZSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF90aW1lc3RhbXBWYWx1ZT86IHN0cmluZzsgXG4gIHB1YmxpYyBnZXQgdGltZXN0YW1wVmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCd0aW1lc3RhbXBfdmFsdWUnKTtcbiAgfVxuICBwdWJsaWMgc2V0IHRpbWVzdGFtcFZhbHVlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl90aW1lc3RhbXBWYWx1ZSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldFRpbWVzdGFtcFZhbHVlKCkge1xuICAgIHRoaXMuX3RpbWVzdGFtcFZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCB0aW1lc3RhbXBWYWx1ZUlucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl90aW1lc3RhbXBWYWx1ZTtcbiAgfVxuXG4gIC8vIGRhdGVfdmFsdWUgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfZGF0ZVZhbHVlID0gbmV3IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uUmVwbGFjZUNvbmZpZ05ld1ZhbHVlRGF0ZVZhbHVlT3V0cHV0UmVmZXJlbmNlKHRoaXMsIFwiZGF0ZV92YWx1ZVwiKTtcbiAgcHVibGljIGdldCBkYXRlVmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGVWYWx1ZTtcbiAgfVxuICBwdWJsaWMgcHV0RGF0ZVZhbHVlKHZhbHVlOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvblJlcGxhY2VDb25maWdOZXdWYWx1ZURhdGVWYWx1ZSkge1xuICAgIHRoaXMuX2RhdGVWYWx1ZS5pbnRlcm5hbFZhbHVlID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0RGF0ZVZhbHVlKCkge1xuICAgIHRoaXMuX2RhdGVWYWx1ZS5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBkYXRlVmFsdWVJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGF0ZVZhbHVlLmludGVybmFsVmFsdWU7XG4gIH1cblxuICAvLyB0aW1lX3ZhbHVlIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX3RpbWVWYWx1ZSA9IG5ldyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvblJlcGxhY2VDb25maWdOZXdWYWx1ZVRpbWVWYWx1ZU91dHB1dFJlZmVyZW5jZSh0aGlzLCBcInRpbWVfdmFsdWVcIik7XG4gIHB1YmxpYyBnZXQgdGltZVZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLl90aW1lVmFsdWU7XG4gIH1cbiAgcHVibGljIHB1dFRpbWVWYWx1ZSh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25SZXBsYWNlQ29uZmlnTmV3VmFsdWVUaW1lVmFsdWUpIHtcbiAgICB0aGlzLl90aW1lVmFsdWUuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldFRpbWVWYWx1ZSgpIHtcbiAgICB0aGlzLl90aW1lVmFsdWUuaW50ZXJuYWxWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgdGltZVZhbHVlSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RpbWVWYWx1ZS5pbnRlcm5hbFZhbHVlO1xuICB9XG59XG5leHBvcnQgaW50ZXJmYWNlIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uUmVwbGFjZUNvbmZpZyB7XG4gIC8qKlxuICAqIG5ld192YWx1ZSBibG9ja1xuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNuZXdfdmFsdWUgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI25ld192YWx1ZX1cbiAgKi9cbiAgcmVhZG9ubHkgbmV3VmFsdWU6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uUmVwbGFjZUNvbmZpZ05ld1ZhbHVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25SZXBsYWNlQ29uZmlnVG9UZXJyYWZvcm0oc3RydWN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25SZXBsYWNlQ29uZmlnT3V0cHV0UmVmZXJlbmNlIHwgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25SZXBsYWNlQ29uZmlnKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkgfHwgY2RrdGYuVG9rZW5pemF0aW9uLmlzUmVzb2x2YWJsZShzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgaWYgKGNka3RmLmlzQ29tcGxleEVsZW1lbnQoc3RydWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkEgY29tcGxleCBlbGVtZW50IHdhcyB1c2VkIGFzIGNvbmZpZ3VyYXRpb24sIHRoaXMgaXMgbm90IHN1cHBvcnRlZDogaHR0cHM6Ly9jZGsudGYvY29tcGxleC1vYmplY3QtYXMtY29uZmlndXJhdGlvblwiKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG5ld192YWx1ZTogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25SZXBsYWNlQ29uZmlnTmV3VmFsdWVUb1RlcnJhZm9ybShzdHJ1Y3QhLm5ld1ZhbHVlKSxcbiAgfVxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvblJlcGxhY2VDb25maWdUb0hjbFRlcnJhZm9ybShzdHJ1Y3Q/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvblJlcGxhY2VDb25maWdPdXRwdXRSZWZlcmVuY2UgfCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvblJlcGxhY2VDb25maWcpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIGNvbnN0IGF0dHJzID0ge1xuICAgIG5ld192YWx1ZToge1xuICAgICAgdmFsdWU6IGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uUmVwbGFjZUNvbmZpZ05ld1ZhbHVlVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5uZXdWYWx1ZSksXG4gICAgICBpc0Jsb2NrOiB0cnVlLFxuICAgICAgdHlwZTogXCJsaXN0XCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcIkRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uUmVwbGFjZUNvbmZpZ05ld1ZhbHVlTGlzdFwiLFxuICAgIH0sXG4gIH07XG5cbiAgLy8gcmVtb3ZlIHVuZGVmaW5lZCBhdHRyaWJ1dGVzXG4gIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMoYXR0cnMpLmZpbHRlcigoW18sIHZhbHVlXSkgPT4gdmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZS52YWx1ZSAhPT0gdW5kZWZpbmVkKSk7XG59XG5cbmV4cG9ydCBjbGFzcyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvblJlcGxhY2VDb25maWdPdXRwdXRSZWZlcmVuY2UgZXh0ZW5kcyBjZGt0Zi5Db21wbGV4T2JqZWN0IHtcbiAgcHJpdmF0ZSBpc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG5cbiAgLyoqXG4gICogQHBhcmFtIHRlcnJhZm9ybVJlc291cmNlIFRoZSBwYXJlbnQgcmVzb3VyY2VcbiAgKiBAcGFyYW0gdGVycmFmb3JtQXR0cmlidXRlIFRoZSBhdHRyaWJ1dGUgb24gdGhlIHBhcmVudCByZXNvdXJjZSB0aGlzIGNsYXNzIGlzIHJlZmVyZW5jaW5nXG4gICovXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcih0ZXJyYWZvcm1SZXNvdXJjZTogY2RrdGYuSUludGVycG9sYXRpbmdQYXJlbnQsIHRlcnJhZm9ybUF0dHJpYnV0ZTogc3RyaW5nKSB7XG4gICAgc3VwZXIodGVycmFmb3JtUmVzb3VyY2UsIHRlcnJhZm9ybUF0dHJpYnV0ZSwgZmFsc2UsIDApO1xuICB9XG5cbiAgcHVibGljIGdldCBpbnRlcm5hbFZhbHVlKCk6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uUmVwbGFjZUNvbmZpZyB8IHVuZGVmaW5lZCB7XG4gICAgbGV0IGhhc0FueVZhbHVlcyA9IHRoaXMuaXNFbXB0eU9iamVjdDtcbiAgICBjb25zdCBpbnRlcm5hbFZhbHVlUmVzdWx0OiBhbnkgPSB7fTtcbiAgICBpZiAodGhpcy5fbmV3VmFsdWU/LmludGVybmFsVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQubmV3VmFsdWUgPSB0aGlzLl9uZXdWYWx1ZT8uaW50ZXJuYWxWYWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGhhc0FueVZhbHVlcyA/IGludGVybmFsVmFsdWVSZXN1bHQgOiB1bmRlZmluZWQ7XG4gIH1cblxuICBwdWJsaWMgc2V0IGludGVybmFsVmFsdWUodmFsdWU6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uUmVwbGFjZUNvbmZpZyB8IHVuZGVmaW5lZCkge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmlzRW1wdHlPYmplY3QgPSBmYWxzZTtcbiAgICAgIHRoaXMuX25ld1ZhbHVlLmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5pc0VtcHR5T2JqZWN0ID0gT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aCA9PT0gMDtcbiAgICAgIHRoaXMuX25ld1ZhbHVlLmludGVybmFsVmFsdWUgPSB2YWx1ZS5uZXdWYWx1ZTtcbiAgICB9XG4gIH1cblxuICAvLyBuZXdfdmFsdWUgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiBmYWxzZSwgcmVxdWlyZWQ6IHRydWVcbiAgcHJpdmF0ZSBfbmV3VmFsdWUgPSBuZXcgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25SZXBsYWNlQ29uZmlnTmV3VmFsdWVPdXRwdXRSZWZlcmVuY2UodGhpcywgXCJuZXdfdmFsdWVcIik7XG4gIHB1YmxpYyBnZXQgbmV3VmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX25ld1ZhbHVlO1xuICB9XG4gIHB1YmxpYyBwdXROZXdWYWx1ZSh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25SZXBsYWNlQ29uZmlnTmV3VmFsdWUpIHtcbiAgICB0aGlzLl9uZXdWYWx1ZS5pbnRlcm5hbFZhbHVlID0gdmFsdWU7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IG5ld1ZhbHVlSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX25ld1ZhbHVlLmludGVybmFsVmFsdWU7XG4gIH1cbn1cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25SZXBsYWNlRGljdGlvbmFyeUNvbmZpZ1dvcmRMaXN0U3RydWN0IHtcbiAgLyoqXG4gICogV29yZHMgb3IgcGhyYXNlcyBkZWZpbmluZyB0aGUgZGljdGlvbmFyeS4gVGhlIGRpY3Rpb25hcnkgbXVzdCBjb250YWluIGF0IGxlYXN0IG9uZSBwaHJhc2UgYW5kIGV2ZXJ5IHBocmFzZSBtdXN0IGNvbnRhaW4gYXQgbGVhc3QgMiBjaGFyYWN0ZXJzIHRoYXQgYXJlIGxldHRlcnMgb3IgZGlnaXRzLlxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSN3b3JkcyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjd29yZHN9XG4gICovXG4gIHJlYWRvbmx5IHdvcmRzOiBzdHJpbmdbXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uUmVwbGFjZURpY3Rpb25hcnlDb25maWdXb3JkTGlzdFN0cnVjdFRvVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uUmVwbGFjZURpY3Rpb25hcnlDb25maWdXb3JkTGlzdFN0cnVjdE91dHB1dFJlZmVyZW5jZSB8IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uUmVwbGFjZURpY3Rpb25hcnlDb25maWdXb3JkTGlzdFN0cnVjdCk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpIHx8IGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIGlmIChjZGt0Zi5pc0NvbXBsZXhFbGVtZW50KHN0cnVjdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGNvbXBsZXggZWxlbWVudCB3YXMgdXNlZCBhcyBjb25maWd1cmF0aW9uLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQ6IGh0dHBzOi8vY2RrLnRmL2NvbXBsZXgtb2JqZWN0LWFzLWNvbmZpZ3VyYXRpb25cIik7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB3b3JkczogY2RrdGYubGlzdE1hcHBlcihjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybSwgZmFsc2UpKHN0cnVjdCEud29yZHMpLFxuICB9XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uUmVwbGFjZURpY3Rpb25hcnlDb25maWdXb3JkTGlzdFN0cnVjdFRvSGNsVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uUmVwbGFjZURpY3Rpb25hcnlDb25maWdXb3JkTGlzdFN0cnVjdE91dHB1dFJlZmVyZW5jZSB8IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uUmVwbGFjZURpY3Rpb25hcnlDb25maWdXb3JkTGlzdFN0cnVjdCk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpIHx8IGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIGlmIChjZGt0Zi5pc0NvbXBsZXhFbGVtZW50KHN0cnVjdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGNvbXBsZXggZWxlbWVudCB3YXMgdXNlZCBhcyBjb25maWd1cmF0aW9uLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQ6IGh0dHBzOi8vY2RrLnRmL2NvbXBsZXgtb2JqZWN0LWFzLWNvbmZpZ3VyYXRpb25cIik7XG4gIH1cbiAgY29uc3QgYXR0cnMgPSB7XG4gICAgd29yZHM6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5saXN0TWFwcGVySGNsKGNka3RmLnN0cmluZ1RvSGNsVGVycmFmb3JtLCBmYWxzZSkoc3RydWN0IS53b3JkcyksXG4gICAgICBpc0Jsb2NrOiBmYWxzZSxcbiAgICAgIHR5cGU6IFwibGlzdFwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJzdHJpbmdMaXN0XCIsXG4gICAgfSxcbiAgfTtcblxuICAvLyByZW1vdmUgdW5kZWZpbmVkIGF0dHJpYnV0ZXNcbiAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhhdHRycykuZmlsdGVyKChbXywgdmFsdWVdKSA9PiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlLnZhbHVlICE9PSB1bmRlZmluZWQpKTtcbn1cblxuZXhwb3J0IGNsYXNzIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uUmVwbGFjZURpY3Rpb25hcnlDb25maWdXb3JkTGlzdFN0cnVjdE91dHB1dFJlZmVyZW5jZSBleHRlbmRzIGNka3RmLkNvbXBsZXhPYmplY3Qge1xuICBwcml2YXRlIGlzRW1wdHlPYmplY3QgPSBmYWxzZTtcblxuICAvKipcbiAgKiBAcGFyYW0gdGVycmFmb3JtUmVzb3VyY2UgVGhlIHBhcmVudCByZXNvdXJjZVxuICAqIEBwYXJhbSB0ZXJyYWZvcm1BdHRyaWJ1dGUgVGhlIGF0dHJpYnV0ZSBvbiB0aGUgcGFyZW50IHJlc291cmNlIHRoaXMgY2xhc3MgaXMgcmVmZXJlbmNpbmdcbiAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHRlcnJhZm9ybVJlc291cmNlOiBjZGt0Zi5JSW50ZXJwb2xhdGluZ1BhcmVudCwgdGVycmFmb3JtQXR0cmlidXRlOiBzdHJpbmcpIHtcbiAgICBzdXBlcih0ZXJyYWZvcm1SZXNvdXJjZSwgdGVycmFmb3JtQXR0cmlidXRlLCBmYWxzZSwgMCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGludGVybmFsVmFsdWUoKTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25SZXBsYWNlRGljdGlvbmFyeUNvbmZpZ1dvcmRMaXN0U3RydWN0IHwgdW5kZWZpbmVkIHtcbiAgICBsZXQgaGFzQW55VmFsdWVzID0gdGhpcy5pc0VtcHR5T2JqZWN0O1xuICAgIGNvbnN0IGludGVybmFsVmFsdWVSZXN1bHQ6IGFueSA9IHt9O1xuICAgIGlmICh0aGlzLl93b3JkcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC53b3JkcyA9IHRoaXMuX3dvcmRzO1xuICAgIH1cbiAgICByZXR1cm4gaGFzQW55VmFsdWVzID8gaW50ZXJuYWxWYWx1ZVJlc3VsdCA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgaW50ZXJuYWxWYWx1ZSh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25SZXBsYWNlRGljdGlvbmFyeUNvbmZpZ1dvcmRMaXN0U3RydWN0IHwgdW5kZWZpbmVkKSB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IGZhbHNlO1xuICAgICAgdGhpcy5fd29yZHMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5pc0VtcHR5T2JqZWN0ID0gT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aCA9PT0gMDtcbiAgICAgIHRoaXMuX3dvcmRzID0gdmFsdWUud29yZHM7XG4gICAgfVxuICB9XG5cbiAgLy8gd29yZHMgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiBmYWxzZSwgcmVxdWlyZWQ6IHRydWVcbiAgcHJpdmF0ZSBfd29yZHM/OiBzdHJpbmdbXTsgXG4gIHB1YmxpYyBnZXQgd29yZHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TGlzdEF0dHJpYnV0ZSgnd29yZHMnKTtcbiAgfVxuICBwdWJsaWMgc2V0IHdvcmRzKHZhbHVlOiBzdHJpbmdbXSkge1xuICAgIHRoaXMuX3dvcmRzID0gdmFsdWU7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IHdvcmRzSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dvcmRzO1xuICB9XG59XG5leHBvcnQgaW50ZXJmYWNlIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uUmVwbGFjZURpY3Rpb25hcnlDb25maWcge1xuICAvKipcbiAgKiB3b3JkX2xpc3QgYmxvY2tcbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjd29yZF9saXN0IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSN3b3JkX2xpc3R9XG4gICovXG4gIHJlYWRvbmx5IHdvcmRMaXN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25SZXBsYWNlRGljdGlvbmFyeUNvbmZpZ1dvcmRMaXN0U3RydWN0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25SZXBsYWNlRGljdGlvbmFyeUNvbmZpZ1RvVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uUmVwbGFjZURpY3Rpb25hcnlDb25maWdPdXRwdXRSZWZlcmVuY2UgfCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvblJlcGxhY2VEaWN0aW9uYXJ5Q29uZmlnKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkgfHwgY2RrdGYuVG9rZW5pemF0aW9uLmlzUmVzb2x2YWJsZShzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgaWYgKGNka3RmLmlzQ29tcGxleEVsZW1lbnQoc3RydWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkEgY29tcGxleCBlbGVtZW50IHdhcyB1c2VkIGFzIGNvbmZpZ3VyYXRpb24sIHRoaXMgaXMgbm90IHN1cHBvcnRlZDogaHR0cHM6Ly9jZGsudGYvY29tcGxleC1vYmplY3QtYXMtY29uZmlndXJhdGlvblwiKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHdvcmRfbGlzdDogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25SZXBsYWNlRGljdGlvbmFyeUNvbmZpZ1dvcmRMaXN0U3RydWN0VG9UZXJyYWZvcm0oc3RydWN0IS53b3JkTGlzdCksXG4gIH1cbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25SZXBsYWNlRGljdGlvbmFyeUNvbmZpZ1RvSGNsVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uUmVwbGFjZURpY3Rpb25hcnlDb25maWdPdXRwdXRSZWZlcmVuY2UgfCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvblJlcGxhY2VEaWN0aW9uYXJ5Q29uZmlnKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkgfHwgY2RrdGYuVG9rZW5pemF0aW9uLmlzUmVzb2x2YWJsZShzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgaWYgKGNka3RmLmlzQ29tcGxleEVsZW1lbnQoc3RydWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkEgY29tcGxleCBlbGVtZW50IHdhcyB1c2VkIGFzIGNvbmZpZ3VyYXRpb24sIHRoaXMgaXMgbm90IHN1cHBvcnRlZDogaHR0cHM6Ly9jZGsudGYvY29tcGxleC1vYmplY3QtYXMtY29uZmlndXJhdGlvblwiKTtcbiAgfVxuICBjb25zdCBhdHRycyA9IHtcbiAgICB3b3JkX2xpc3Q6IHtcbiAgICAgIHZhbHVlOiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvblJlcGxhY2VEaWN0aW9uYXJ5Q29uZmlnV29yZExpc3RTdHJ1Y3RUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLndvcmRMaXN0KSxcbiAgICAgIGlzQmxvY2s6IHRydWUsXG4gICAgICB0eXBlOiBcImxpc3RcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwiRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25SZXBsYWNlRGljdGlvbmFyeUNvbmZpZ1dvcmRMaXN0U3RydWN0TGlzdFwiLFxuICAgIH0sXG4gIH07XG5cbiAgLy8gcmVtb3ZlIHVuZGVmaW5lZCBhdHRyaWJ1dGVzXG4gIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMoYXR0cnMpLmZpbHRlcigoW18sIHZhbHVlXSkgPT4gdmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZS52YWx1ZSAhPT0gdW5kZWZpbmVkKSk7XG59XG5cbmV4cG9ydCBjbGFzcyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvblJlcGxhY2VEaWN0aW9uYXJ5Q29uZmlnT3V0cHV0UmVmZXJlbmNlIGV4dGVuZHMgY2RrdGYuQ29tcGxleE9iamVjdCB7XG4gIHByaXZhdGUgaXNFbXB0eU9iamVjdCA9IGZhbHNlO1xuXG4gIC8qKlxuICAqIEBwYXJhbSB0ZXJyYWZvcm1SZXNvdXJjZSBUaGUgcGFyZW50IHJlc291cmNlXG4gICogQHBhcmFtIHRlcnJhZm9ybUF0dHJpYnV0ZSBUaGUgYXR0cmlidXRlIG9uIHRoZSBwYXJlbnQgcmVzb3VyY2UgdGhpcyBjbGFzcyBpcyByZWZlcmVuY2luZ1xuICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IodGVycmFmb3JtUmVzb3VyY2U6IGNka3RmLklJbnRlcnBvbGF0aW5nUGFyZW50LCB0ZXJyYWZvcm1BdHRyaWJ1dGU6IHN0cmluZykge1xuICAgIHN1cGVyKHRlcnJhZm9ybVJlc291cmNlLCB0ZXJyYWZvcm1BdHRyaWJ1dGUsIGZhbHNlLCAwKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgaW50ZXJuYWxWYWx1ZSgpOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvblJlcGxhY2VEaWN0aW9uYXJ5Q29uZmlnIHwgdW5kZWZpbmVkIHtcbiAgICBsZXQgaGFzQW55VmFsdWVzID0gdGhpcy5pc0VtcHR5T2JqZWN0O1xuICAgIGNvbnN0IGludGVybmFsVmFsdWVSZXN1bHQ6IGFueSA9IHt9O1xuICAgIGlmICh0aGlzLl93b3JkTGlzdD8uaW50ZXJuYWxWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC53b3JkTGlzdCA9IHRoaXMuX3dvcmRMaXN0Py5pbnRlcm5hbFZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gaGFzQW55VmFsdWVzID8gaW50ZXJuYWxWYWx1ZVJlc3VsdCA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgaW50ZXJuYWxWYWx1ZSh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25SZXBsYWNlRGljdGlvbmFyeUNvbmZpZyB8IHVuZGVmaW5lZCkge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmlzRW1wdHlPYmplY3QgPSBmYWxzZTtcbiAgICAgIHRoaXMuX3dvcmRMaXN0LmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5pc0VtcHR5T2JqZWN0ID0gT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aCA9PT0gMDtcbiAgICAgIHRoaXMuX3dvcmRMaXN0LmludGVybmFsVmFsdWUgPSB2YWx1ZS53b3JkTGlzdDtcbiAgICB9XG4gIH1cblxuICAvLyB3b3JkX2xpc3QgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfd29yZExpc3QgPSBuZXcgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25SZXBsYWNlRGljdGlvbmFyeUNvbmZpZ1dvcmRMaXN0U3RydWN0T3V0cHV0UmVmZXJlbmNlKHRoaXMsIFwid29yZF9saXN0XCIpO1xuICBwdWJsaWMgZ2V0IHdvcmRMaXN0KCkge1xuICAgIHJldHVybiB0aGlzLl93b3JkTGlzdDtcbiAgfVxuICBwdWJsaWMgcHV0V29yZExpc3QodmFsdWU6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uUmVwbGFjZURpY3Rpb25hcnlDb25maWdXb3JkTGlzdFN0cnVjdCkge1xuICAgIHRoaXMuX3dvcmRMaXN0LmludGVybmFsVmFsdWUgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRXb3JkTGlzdCgpIHtcbiAgICB0aGlzLl93b3JkTGlzdC5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCB3b3JkTGlzdElucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl93b3JkTGlzdC5pbnRlcm5hbFZhbHVlO1xuICB9XG59XG5leHBvcnQgaW50ZXJmYWNlIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uVGltZVBhcnRDb25maWcge1xuICAvKipcbiAgKiBUaGUgcGFydCBvZiB0aGUgdGltZSB0byBrZWVwLiBQb3NzaWJsZSB2YWx1ZXM6IFtcIllFQVJcIiwgXCJNT05USFwiLCBcIkRBWV9PRl9NT05USFwiLCBcIkRBWV9PRl9XRUVLXCIsIFwiV0VFS19PRl9ZRUFSXCIsIFwiSE9VUl9PRl9EQVlcIl1cbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjcGFydF90b19leHRyYWN0IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSNwYXJ0X3RvX2V4dHJhY3R9XG4gICovXG4gIHJlYWRvbmx5IHBhcnRUb0V4dHJhY3Q/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvblRpbWVQYXJ0Q29uZmlnVG9UZXJyYWZvcm0oc3RydWN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25UaW1lUGFydENvbmZpZ091dHB1dFJlZmVyZW5jZSB8IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uVGltZVBhcnRDb25maWcpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIHJldHVybiB7XG4gICAgcGFydF90b19leHRyYWN0OiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLnBhcnRUb0V4dHJhY3QpLFxuICB9XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uVGltZVBhcnRDb25maWdUb0hjbFRlcnJhZm9ybShzdHJ1Y3Q/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvblRpbWVQYXJ0Q29uZmlnT3V0cHV0UmVmZXJlbmNlIHwgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25UaW1lUGFydENvbmZpZyk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpIHx8IGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIGlmIChjZGt0Zi5pc0NvbXBsZXhFbGVtZW50KHN0cnVjdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGNvbXBsZXggZWxlbWVudCB3YXMgdXNlZCBhcyBjb25maWd1cmF0aW9uLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQ6IGh0dHBzOi8vY2RrLnRmL2NvbXBsZXgtb2JqZWN0LWFzLWNvbmZpZ3VyYXRpb25cIik7XG4gIH1cbiAgY29uc3QgYXR0cnMgPSB7XG4gICAgcGFydF90b19leHRyYWN0OiB7XG4gICAgICB2YWx1ZTogY2RrdGYuc3RyaW5nVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5wYXJ0VG9FeHRyYWN0KSxcbiAgICAgIGlzQmxvY2s6IGZhbHNlLFxuICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwic3RyaW5nXCIsXG4gICAgfSxcbiAgfTtcblxuICAvLyByZW1vdmUgdW5kZWZpbmVkIGF0dHJpYnV0ZXNcbiAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhhdHRycykuZmlsdGVyKChbXywgdmFsdWVdKSA9PiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlLnZhbHVlICE9PSB1bmRlZmluZWQpKTtcbn1cblxuZXhwb3J0IGNsYXNzIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uVGltZVBhcnRDb25maWdPdXRwdXRSZWZlcmVuY2UgZXh0ZW5kcyBjZGt0Zi5Db21wbGV4T2JqZWN0IHtcbiAgcHJpdmF0ZSBpc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG5cbiAgLyoqXG4gICogQHBhcmFtIHRlcnJhZm9ybVJlc291cmNlIFRoZSBwYXJlbnQgcmVzb3VyY2VcbiAgKiBAcGFyYW0gdGVycmFmb3JtQXR0cmlidXRlIFRoZSBhdHRyaWJ1dGUgb24gdGhlIHBhcmVudCByZXNvdXJjZSB0aGlzIGNsYXNzIGlzIHJlZmVyZW5jaW5nXG4gICovXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcih0ZXJyYWZvcm1SZXNvdXJjZTogY2RrdGYuSUludGVycG9sYXRpbmdQYXJlbnQsIHRlcnJhZm9ybUF0dHJpYnV0ZTogc3RyaW5nKSB7XG4gICAgc3VwZXIodGVycmFmb3JtUmVzb3VyY2UsIHRlcnJhZm9ybUF0dHJpYnV0ZSwgZmFsc2UsIDApO1xuICB9XG5cbiAgcHVibGljIGdldCBpbnRlcm5hbFZhbHVlKCk6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uVGltZVBhcnRDb25maWcgfCB1bmRlZmluZWQge1xuICAgIGxldCBoYXNBbnlWYWx1ZXMgPSB0aGlzLmlzRW1wdHlPYmplY3Q7XG4gICAgY29uc3QgaW50ZXJuYWxWYWx1ZVJlc3VsdDogYW55ID0ge307XG4gICAgaWYgKHRoaXMuX3BhcnRUb0V4dHJhY3QgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQucGFydFRvRXh0cmFjdCA9IHRoaXMuX3BhcnRUb0V4dHJhY3Q7XG4gICAgfVxuICAgIHJldHVybiBoYXNBbnlWYWx1ZXMgPyBpbnRlcm5hbFZhbHVlUmVzdWx0IDogdW5kZWZpbmVkO1xuICB9XG5cbiAgcHVibGljIHNldCBpbnRlcm5hbFZhbHVlKHZhbHVlOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvblRpbWVQYXJ0Q29uZmlnIHwgdW5kZWZpbmVkKSB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IGZhbHNlO1xuICAgICAgdGhpcy5fcGFydFRvRXh0cmFjdCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLmlzRW1wdHlPYmplY3QgPSBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoID09PSAwO1xuICAgICAgdGhpcy5fcGFydFRvRXh0cmFjdCA9IHZhbHVlLnBhcnRUb0V4dHJhY3Q7XG4gICAgfVxuICB9XG5cbiAgLy8gcGFydF90b19leHRyYWN0IC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX3BhcnRUb0V4dHJhY3Q/OiBzdHJpbmc7IFxuICBwdWJsaWMgZ2V0IHBhcnRUb0V4dHJhY3QoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCdwYXJ0X3RvX2V4dHJhY3QnKTtcbiAgfVxuICBwdWJsaWMgc2V0IHBhcnRUb0V4dHJhY3QodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX3BhcnRUb0V4dHJhY3QgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRQYXJ0VG9FeHRyYWN0KCkge1xuICAgIHRoaXMuX3BhcnRUb0V4dHJhY3QgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IHBhcnRUb0V4dHJhY3RJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcGFydFRvRXh0cmFjdDtcbiAgfVxufVxuZXhwb3J0IGludGVyZmFjZSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbiB7XG4gIC8qKlxuICAqIGJ1Y2tldGluZ19jb25maWcgYmxvY2tcbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjYnVja2V0aW5nX2NvbmZpZyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjYnVja2V0aW5nX2NvbmZpZ31cbiAgKi9cbiAgcmVhZG9ubHkgYnVja2V0aW5nQ29uZmlnPzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWc7XG4gIC8qKlxuICAqIGNoYXJhY3Rlcl9tYXNrX2NvbmZpZyBibG9ja1xuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNjaGFyYWN0ZXJfbWFza19jb25maWcgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI2NoYXJhY3Rlcl9tYXNrX2NvbmZpZ31cbiAgKi9cbiAgcmVhZG9ubHkgY2hhcmFjdGVyTWFza0NvbmZpZz86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ2hhcmFjdGVyTWFza0NvbmZpZztcbiAgLyoqXG4gICogY3J5cHRvX2RldGVybWluaXN0aWNfY29uZmlnIGJsb2NrXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI2NyeXB0b19kZXRlcm1pbmlzdGljX2NvbmZpZyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjY3J5cHRvX2RldGVybWluaXN0aWNfY29uZmlnfVxuICAqL1xuICByZWFkb25seSBjcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnPzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnO1xuICAvKipcbiAgKiBjcnlwdG9faGFzaF9jb25maWcgYmxvY2tcbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjY3J5cHRvX2hhc2hfY29uZmlnIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSNjcnlwdG9faGFzaF9jb25maWd9XG4gICovXG4gIHJlYWRvbmx5IGNyeXB0b0hhc2hDb25maWc/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0hhc2hDb25maWc7XG4gIC8qKlxuICAqIGNyeXB0b19yZXBsYWNlX2ZmeF9mcGVfY29uZmlnIGJsb2NrXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI2NyeXB0b19yZXBsYWNlX2ZmeF9mcGVfY29uZmlnIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSNjcnlwdG9fcmVwbGFjZV9mZnhfZnBlX2NvbmZpZ31cbiAgKi9cbiAgcmVhZG9ubHkgY3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZz86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZztcbiAgLyoqXG4gICogZGF0ZV9zaGlmdF9jb25maWcgYmxvY2tcbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjZGF0ZV9zaGlmdF9jb25maWcgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI2RhdGVfc2hpZnRfY29uZmlnfVxuICAqL1xuICByZWFkb25seSBkYXRlU2hpZnRDb25maWc/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkRhdGVTaGlmdENvbmZpZztcbiAgLyoqXG4gICogZml4ZWRfc2l6ZV9idWNrZXRpbmdfY29uZmlnIGJsb2NrXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI2ZpeGVkX3NpemVfYnVja2V0aW5nX2NvbmZpZyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjZml4ZWRfc2l6ZV9idWNrZXRpbmdfY29uZmlnfVxuICAqL1xuICByZWFkb25seSBmaXhlZFNpemVCdWNrZXRpbmdDb25maWc/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZztcbiAgLyoqXG4gICogcmVkYWN0X2NvbmZpZyBibG9ja1xuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNyZWRhY3RfY29uZmlnIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSNyZWRhY3RfY29uZmlnfVxuICAqL1xuICByZWFkb25seSByZWRhY3RDb25maWc/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvblJlZGFjdENvbmZpZztcbiAgLyoqXG4gICogcmVwbGFjZV9jb25maWcgYmxvY2tcbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjcmVwbGFjZV9jb25maWcgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI3JlcGxhY2VfY29uZmlnfVxuICAqL1xuICByZWFkb25seSByZXBsYWNlQ29uZmlnPzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25SZXBsYWNlQ29uZmlnO1xuICAvKipcbiAgKiByZXBsYWNlX2RpY3Rpb25hcnlfY29uZmlnIGJsb2NrXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI3JlcGxhY2VfZGljdGlvbmFyeV9jb25maWcgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI3JlcGxhY2VfZGljdGlvbmFyeV9jb25maWd9XG4gICovXG4gIHJlYWRvbmx5IHJlcGxhY2VEaWN0aW9uYXJ5Q29uZmlnPzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25SZXBsYWNlRGljdGlvbmFyeUNvbmZpZztcbiAgLyoqXG4gICogdGltZV9wYXJ0X2NvbmZpZyBibG9ja1xuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSN0aW1lX3BhcnRfY29uZmlnIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSN0aW1lX3BhcnRfY29uZmlnfVxuICAqL1xuICByZWFkb25seSB0aW1lUGFydENvbmZpZz86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uVGltZVBhcnRDb25maWc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvblRvVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uT3V0cHV0UmVmZXJlbmNlIHwgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb24pOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIHJldHVybiB7XG4gICAgYnVja2V0aW5nX2NvbmZpZzogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdUb1RlcnJhZm9ybShzdHJ1Y3QhLmJ1Y2tldGluZ0NvbmZpZyksXG4gICAgY2hhcmFjdGVyX21hc2tfY29uZmlnOiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNoYXJhY3Rlck1hc2tDb25maWdUb1RlcnJhZm9ybShzdHJ1Y3QhLmNoYXJhY3Rlck1hc2tDb25maWcpLFxuICAgIGNyeXB0b19kZXRlcm1pbmlzdGljX2NvbmZpZzogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnVG9UZXJyYWZvcm0oc3RydWN0IS5jcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnKSxcbiAgICBjcnlwdG9faGFzaF9jb25maWc6IGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvSGFzaENvbmZpZ1RvVGVycmFmb3JtKHN0cnVjdCEuY3J5cHRvSGFzaENvbmZpZyksXG4gICAgY3J5cHRvX3JlcGxhY2VfZmZ4X2ZwZV9jb25maWc6IGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZ1RvVGVycmFmb3JtKHN0cnVjdCEuY3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZyksXG4gICAgZGF0ZV9zaGlmdF9jb25maWc6IGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRGF0ZVNoaWZ0Q29uZmlnVG9UZXJyYWZvcm0oc3RydWN0IS5kYXRlU2hpZnRDb25maWcpLFxuICAgIGZpeGVkX3NpemVfYnVja2V0aW5nX2NvbmZpZzogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25GaXhlZFNpemVCdWNrZXRpbmdDb25maWdUb1RlcnJhZm9ybShzdHJ1Y3QhLmZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZyksXG4gICAgcmVkYWN0X2NvbmZpZzogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25SZWRhY3RDb25maWdUb1RlcnJhZm9ybShzdHJ1Y3QhLnJlZGFjdENvbmZpZyksXG4gICAgcmVwbGFjZV9jb25maWc6IGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uUmVwbGFjZUNvbmZpZ1RvVGVycmFmb3JtKHN0cnVjdCEucmVwbGFjZUNvbmZpZyksXG4gICAgcmVwbGFjZV9kaWN0aW9uYXJ5X2NvbmZpZzogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25SZXBsYWNlRGljdGlvbmFyeUNvbmZpZ1RvVGVycmFmb3JtKHN0cnVjdCEucmVwbGFjZURpY3Rpb25hcnlDb25maWcpLFxuICAgIHRpbWVfcGFydF9jb25maWc6IGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uVGltZVBhcnRDb25maWdUb1RlcnJhZm9ybShzdHJ1Y3QhLnRpbWVQYXJ0Q29uZmlnKSxcbiAgfVxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvblRvSGNsVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uT3V0cHV0UmVmZXJlbmNlIHwgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb24pOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIGNvbnN0IGF0dHJzID0ge1xuICAgIGJ1Y2tldGluZ19jb25maWc6IHtcbiAgICAgIHZhbHVlOiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkJ1Y2tldGluZ0NvbmZpZ1RvSGNsVGVycmFmb3JtKHN0cnVjdCEuYnVja2V0aW5nQ29uZmlnKSxcbiAgICAgIGlzQmxvY2s6IHRydWUsXG4gICAgICB0eXBlOiBcImxpc3RcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwiRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdMaXN0XCIsXG4gICAgfSxcbiAgICBjaGFyYWN0ZXJfbWFza19jb25maWc6IHtcbiAgICAgIHZhbHVlOiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNoYXJhY3Rlck1hc2tDb25maWdUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLmNoYXJhY3Rlck1hc2tDb25maWcpLFxuICAgICAgaXNCbG9jazogdHJ1ZSxcbiAgICAgIHR5cGU6IFwibGlzdFwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNoYXJhY3Rlck1hc2tDb25maWdMaXN0XCIsXG4gICAgfSxcbiAgICBjcnlwdG9fZGV0ZXJtaW5pc3RpY19jb25maWc6IHtcbiAgICAgIHZhbHVlOiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0RldGVybWluaXN0aWNDb25maWdUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLmNyeXB0b0RldGVybWluaXN0aWNDb25maWcpLFxuICAgICAgaXNCbG9jazogdHJ1ZSxcbiAgICAgIHR5cGU6IFwibGlzdFwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0RldGVybWluaXN0aWNDb25maWdMaXN0XCIsXG4gICAgfSxcbiAgICBjcnlwdG9faGFzaF9jb25maWc6IHtcbiAgICAgIHZhbHVlOiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0hhc2hDb25maWdUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLmNyeXB0b0hhc2hDb25maWcpLFxuICAgICAgaXNCbG9jazogdHJ1ZSxcbiAgICAgIHR5cGU6IFwibGlzdFwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0hhc2hDb25maWdMaXN0XCIsXG4gICAgfSxcbiAgICBjcnlwdG9fcmVwbGFjZV9mZnhfZnBlX2NvbmZpZzoge1xuICAgICAgdmFsdWU6IGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZ1RvSGNsVGVycmFmb3JtKHN0cnVjdCEuY3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZyksXG4gICAgICBpc0Jsb2NrOiB0cnVlLFxuICAgICAgdHlwZTogXCJsaXN0XCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcIkRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZ0xpc3RcIixcbiAgICB9LFxuICAgIGRhdGVfc2hpZnRfY29uZmlnOiB7XG4gICAgICB2YWx1ZTogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25EYXRlU2hpZnRDb25maWdUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLmRhdGVTaGlmdENvbmZpZyksXG4gICAgICBpc0Jsb2NrOiB0cnVlLFxuICAgICAgdHlwZTogXCJsaXN0XCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcIkRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRGF0ZVNoaWZ0Q29uZmlnTGlzdFwiLFxuICAgIH0sXG4gICAgZml4ZWRfc2l6ZV9idWNrZXRpbmdfY29uZmlnOiB7XG4gICAgICB2YWx1ZTogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25GaXhlZFNpemVCdWNrZXRpbmdDb25maWdUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLmZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZyksXG4gICAgICBpc0Jsb2NrOiB0cnVlLFxuICAgICAgdHlwZTogXCJsaXN0XCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcIkRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRml4ZWRTaXplQnVja2V0aW5nQ29uZmlnTGlzdFwiLFxuICAgIH0sXG4gICAgcmVkYWN0X2NvbmZpZzoge1xuICAgICAgdmFsdWU6IGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uUmVkYWN0Q29uZmlnVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5yZWRhY3RDb25maWcpLFxuICAgICAgaXNCbG9jazogdHJ1ZSxcbiAgICAgIHR5cGU6IFwibGlzdFwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvblJlZGFjdENvbmZpZ0xpc3RcIixcbiAgICB9LFxuICAgIHJlcGxhY2VfY29uZmlnOiB7XG4gICAgICB2YWx1ZTogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25SZXBsYWNlQ29uZmlnVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5yZXBsYWNlQ29uZmlnKSxcbiAgICAgIGlzQmxvY2s6IHRydWUsXG4gICAgICB0eXBlOiBcImxpc3RcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwiRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25SZXBsYWNlQ29uZmlnTGlzdFwiLFxuICAgIH0sXG4gICAgcmVwbGFjZV9kaWN0aW9uYXJ5X2NvbmZpZzoge1xuICAgICAgdmFsdWU6IGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uUmVwbGFjZURpY3Rpb25hcnlDb25maWdUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLnJlcGxhY2VEaWN0aW9uYXJ5Q29uZmlnKSxcbiAgICAgIGlzQmxvY2s6IHRydWUsXG4gICAgICB0eXBlOiBcImxpc3RcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwiRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25SZXBsYWNlRGljdGlvbmFyeUNvbmZpZ0xpc3RcIixcbiAgICB9LFxuICAgIHRpbWVfcGFydF9jb25maWc6IHtcbiAgICAgIHZhbHVlOiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvblRpbWVQYXJ0Q29uZmlnVG9IY2xUZXJyYWZvcm0oc3RydWN0IS50aW1lUGFydENvbmZpZyksXG4gICAgICBpc0Jsb2NrOiB0cnVlLFxuICAgICAgdHlwZTogXCJsaXN0XCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcIkRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uVGltZVBhcnRDb25maWdMaXN0XCIsXG4gICAgfSxcbiAgfTtcblxuICAvLyByZW1vdmUgdW5kZWZpbmVkIGF0dHJpYnV0ZXNcbiAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhhdHRycykuZmlsdGVyKChbXywgdmFsdWVdKSA9PiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlLnZhbHVlICE9PSB1bmRlZmluZWQpKTtcbn1cblxuZXhwb3J0IGNsYXNzIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uT3V0cHV0UmVmZXJlbmNlIGV4dGVuZHMgY2RrdGYuQ29tcGxleE9iamVjdCB7XG4gIHByaXZhdGUgaXNFbXB0eU9iamVjdCA9IGZhbHNlO1xuXG4gIC8qKlxuICAqIEBwYXJhbSB0ZXJyYWZvcm1SZXNvdXJjZSBUaGUgcGFyZW50IHJlc291cmNlXG4gICogQHBhcmFtIHRlcnJhZm9ybUF0dHJpYnV0ZSBUaGUgYXR0cmlidXRlIG9uIHRoZSBwYXJlbnQgcmVzb3VyY2UgdGhpcyBjbGFzcyBpcyByZWZlcmVuY2luZ1xuICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IodGVycmFmb3JtUmVzb3VyY2U6IGNka3RmLklJbnRlcnBvbGF0aW5nUGFyZW50LCB0ZXJyYWZvcm1BdHRyaWJ1dGU6IHN0cmluZykge1xuICAgIHN1cGVyKHRlcnJhZm9ybVJlc291cmNlLCB0ZXJyYWZvcm1BdHRyaWJ1dGUsIGZhbHNlLCAwKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgaW50ZXJuYWxWYWx1ZSgpOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbiB8IHVuZGVmaW5lZCB7XG4gICAgbGV0IGhhc0FueVZhbHVlcyA9IHRoaXMuaXNFbXB0eU9iamVjdDtcbiAgICBjb25zdCBpbnRlcm5hbFZhbHVlUmVzdWx0OiBhbnkgPSB7fTtcbiAgICBpZiAodGhpcy5fYnVja2V0aW5nQ29uZmlnPy5pbnRlcm5hbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LmJ1Y2tldGluZ0NvbmZpZyA9IHRoaXMuX2J1Y2tldGluZ0NvbmZpZz8uaW50ZXJuYWxWYWx1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2NoYXJhY3Rlck1hc2tDb25maWc/LmludGVybmFsVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQuY2hhcmFjdGVyTWFza0NvbmZpZyA9IHRoaXMuX2NoYXJhY3Rlck1hc2tDb25maWc/LmludGVybmFsVmFsdWU7XG4gICAgfVxuICAgIGlmICh0aGlzLl9jcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnPy5pbnRlcm5hbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LmNyeXB0b0RldGVybWluaXN0aWNDb25maWcgPSB0aGlzLl9jcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnPy5pbnRlcm5hbFZhbHVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5fY3J5cHRvSGFzaENvbmZpZz8uaW50ZXJuYWxWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC5jcnlwdG9IYXNoQ29uZmlnID0gdGhpcy5fY3J5cHRvSGFzaENvbmZpZz8uaW50ZXJuYWxWYWx1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2NyeXB0b1JlcGxhY2VGZnhGcGVDb25maWc/LmludGVybmFsVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQuY3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZyA9IHRoaXMuX2NyeXB0b1JlcGxhY2VGZnhGcGVDb25maWc/LmludGVybmFsVmFsdWU7XG4gICAgfVxuICAgIGlmICh0aGlzLl9kYXRlU2hpZnRDb25maWc/LmludGVybmFsVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQuZGF0ZVNoaWZ0Q29uZmlnID0gdGhpcy5fZGF0ZVNoaWZ0Q29uZmlnPy5pbnRlcm5hbFZhbHVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5fZml4ZWRTaXplQnVja2V0aW5nQ29uZmlnPy5pbnRlcm5hbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LmZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZyA9IHRoaXMuX2ZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZz8uaW50ZXJuYWxWYWx1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3JlZGFjdENvbmZpZz8uaW50ZXJuYWxWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC5yZWRhY3RDb25maWcgPSB0aGlzLl9yZWRhY3RDb25maWc/LmludGVybmFsVmFsdWU7XG4gICAgfVxuICAgIGlmICh0aGlzLl9yZXBsYWNlQ29uZmlnPy5pbnRlcm5hbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LnJlcGxhY2VDb25maWcgPSB0aGlzLl9yZXBsYWNlQ29uZmlnPy5pbnRlcm5hbFZhbHVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5fcmVwbGFjZURpY3Rpb25hcnlDb25maWc/LmludGVybmFsVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQucmVwbGFjZURpY3Rpb25hcnlDb25maWcgPSB0aGlzLl9yZXBsYWNlRGljdGlvbmFyeUNvbmZpZz8uaW50ZXJuYWxWYWx1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3RpbWVQYXJ0Q29uZmlnPy5pbnRlcm5hbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LnRpbWVQYXJ0Q29uZmlnID0gdGhpcy5fdGltZVBhcnRDb25maWc/LmludGVybmFsVmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBoYXNBbnlWYWx1ZXMgPyBpbnRlcm5hbFZhbHVlUmVzdWx0IDogdW5kZWZpbmVkO1xuICB9XG5cbiAgcHVibGljIHNldCBpbnRlcm5hbFZhbHVlKHZhbHVlOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbiB8IHVuZGVmaW5lZCkge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmlzRW1wdHlPYmplY3QgPSBmYWxzZTtcbiAgICAgIHRoaXMuX2J1Y2tldGluZ0NvbmZpZy5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fY2hhcmFjdGVyTWFza0NvbmZpZy5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fY3J5cHRvRGV0ZXJtaW5pc3RpY0NvbmZpZy5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fY3J5cHRvSGFzaENvbmZpZy5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fY3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZy5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fZGF0ZVNoaWZ0Q29uZmlnLmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9maXhlZFNpemVCdWNrZXRpbmdDb25maWcuaW50ZXJuYWxWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX3JlZGFjdENvbmZpZy5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fcmVwbGFjZUNvbmZpZy5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fcmVwbGFjZURpY3Rpb25hcnlDb25maWcuaW50ZXJuYWxWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX3RpbWVQYXJ0Q29uZmlnLmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5pc0VtcHR5T2JqZWN0ID0gT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aCA9PT0gMDtcbiAgICAgIHRoaXMuX2J1Y2tldGluZ0NvbmZpZy5pbnRlcm5hbFZhbHVlID0gdmFsdWUuYnVja2V0aW5nQ29uZmlnO1xuICAgICAgdGhpcy5fY2hhcmFjdGVyTWFza0NvbmZpZy5pbnRlcm5hbFZhbHVlID0gdmFsdWUuY2hhcmFjdGVyTWFza0NvbmZpZztcbiAgICAgIHRoaXMuX2NyeXB0b0RldGVybWluaXN0aWNDb25maWcuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlLmNyeXB0b0RldGVybWluaXN0aWNDb25maWc7XG4gICAgICB0aGlzLl9jcnlwdG9IYXNoQ29uZmlnLmludGVybmFsVmFsdWUgPSB2YWx1ZS5jcnlwdG9IYXNoQ29uZmlnO1xuICAgICAgdGhpcy5fY3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZy5pbnRlcm5hbFZhbHVlID0gdmFsdWUuY3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZztcbiAgICAgIHRoaXMuX2RhdGVTaGlmdENvbmZpZy5pbnRlcm5hbFZhbHVlID0gdmFsdWUuZGF0ZVNoaWZ0Q29uZmlnO1xuICAgICAgdGhpcy5fZml4ZWRTaXplQnVja2V0aW5nQ29uZmlnLmludGVybmFsVmFsdWUgPSB2YWx1ZS5maXhlZFNpemVCdWNrZXRpbmdDb25maWc7XG4gICAgICB0aGlzLl9yZWRhY3RDb25maWcuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlLnJlZGFjdENvbmZpZztcbiAgICAgIHRoaXMuX3JlcGxhY2VDb25maWcuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlLnJlcGxhY2VDb25maWc7XG4gICAgICB0aGlzLl9yZXBsYWNlRGljdGlvbmFyeUNvbmZpZy5pbnRlcm5hbFZhbHVlID0gdmFsdWUucmVwbGFjZURpY3Rpb25hcnlDb25maWc7XG4gICAgICB0aGlzLl90aW1lUGFydENvbmZpZy5pbnRlcm5hbFZhbHVlID0gdmFsdWUudGltZVBhcnRDb25maWc7XG4gICAgfVxuICB9XG5cbiAgLy8gYnVja2V0aW5nX2NvbmZpZyAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9idWNrZXRpbmdDb25maWcgPSBuZXcgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25CdWNrZXRpbmdDb25maWdPdXRwdXRSZWZlcmVuY2UodGhpcywgXCJidWNrZXRpbmdfY29uZmlnXCIpO1xuICBwdWJsaWMgZ2V0IGJ1Y2tldGluZ0NvbmZpZygpIHtcbiAgICByZXR1cm4gdGhpcy5fYnVja2V0aW5nQ29uZmlnO1xuICB9XG4gIHB1YmxpYyBwdXRCdWNrZXRpbmdDb25maWcodmFsdWU6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQnVja2V0aW5nQ29uZmlnKSB7XG4gICAgdGhpcy5fYnVja2V0aW5nQ29uZmlnLmludGVybmFsVmFsdWUgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRCdWNrZXRpbmdDb25maWcoKSB7XG4gICAgdGhpcy5fYnVja2V0aW5nQ29uZmlnLmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IGJ1Y2tldGluZ0NvbmZpZ0lucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9idWNrZXRpbmdDb25maWcuaW50ZXJuYWxWYWx1ZTtcbiAgfVxuXG4gIC8vIGNoYXJhY3Rlcl9tYXNrX2NvbmZpZyAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9jaGFyYWN0ZXJNYXNrQ29uZmlnID0gbmV3IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ2hhcmFjdGVyTWFza0NvbmZpZ091dHB1dFJlZmVyZW5jZSh0aGlzLCBcImNoYXJhY3Rlcl9tYXNrX2NvbmZpZ1wiKTtcbiAgcHVibGljIGdldCBjaGFyYWN0ZXJNYXNrQ29uZmlnKCkge1xuICAgIHJldHVybiB0aGlzLl9jaGFyYWN0ZXJNYXNrQ29uZmlnO1xuICB9XG4gIHB1YmxpYyBwdXRDaGFyYWN0ZXJNYXNrQ29uZmlnKHZhbHVlOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNoYXJhY3Rlck1hc2tDb25maWcpIHtcbiAgICB0aGlzLl9jaGFyYWN0ZXJNYXNrQ29uZmlnLmludGVybmFsVmFsdWUgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRDaGFyYWN0ZXJNYXNrQ29uZmlnKCkge1xuICAgIHRoaXMuX2NoYXJhY3Rlck1hc2tDb25maWcuaW50ZXJuYWxWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgY2hhcmFjdGVyTWFza0NvbmZpZ0lucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9jaGFyYWN0ZXJNYXNrQ29uZmlnLmludGVybmFsVmFsdWU7XG4gIH1cblxuICAvLyBjcnlwdG9fZGV0ZXJtaW5pc3RpY19jb25maWcgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfY3J5cHRvRGV0ZXJtaW5pc3RpY0NvbmZpZyA9IG5ldyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkNyeXB0b0RldGVybWluaXN0aWNDb25maWdPdXRwdXRSZWZlcmVuY2UodGhpcywgXCJjcnlwdG9fZGV0ZXJtaW5pc3RpY19jb25maWdcIik7XG4gIHB1YmxpYyBnZXQgY3J5cHRvRGV0ZXJtaW5pc3RpY0NvbmZpZygpIHtcbiAgICByZXR1cm4gdGhpcy5fY3J5cHRvRGV0ZXJtaW5pc3RpY0NvbmZpZztcbiAgfVxuICBwdWJsaWMgcHV0Q3J5cHRvRGV0ZXJtaW5pc3RpY0NvbmZpZyh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnKSB7XG4gICAgdGhpcy5fY3J5cHRvRGV0ZXJtaW5pc3RpY0NvbmZpZy5pbnRlcm5hbFZhbHVlID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0Q3J5cHRvRGV0ZXJtaW5pc3RpY0NvbmZpZygpIHtcbiAgICB0aGlzLl9jcnlwdG9EZXRlcm1pbmlzdGljQ29uZmlnLmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IGNyeXB0b0RldGVybWluaXN0aWNDb25maWdJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fY3J5cHRvRGV0ZXJtaW5pc3RpY0NvbmZpZy5pbnRlcm5hbFZhbHVlO1xuICB9XG5cbiAgLy8gY3J5cHRvX2hhc2hfY29uZmlnIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX2NyeXB0b0hhc2hDb25maWcgPSBuZXcgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9IYXNoQ29uZmlnT3V0cHV0UmVmZXJlbmNlKHRoaXMsIFwiY3J5cHRvX2hhc2hfY29uZmlnXCIpO1xuICBwdWJsaWMgZ2V0IGNyeXB0b0hhc2hDb25maWcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NyeXB0b0hhc2hDb25maWc7XG4gIH1cbiAgcHVibGljIHB1dENyeXB0b0hhc2hDb25maWcodmFsdWU6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uQ3J5cHRvSGFzaENvbmZpZykge1xuICAgIHRoaXMuX2NyeXB0b0hhc2hDb25maWcuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldENyeXB0b0hhc2hDb25maWcoKSB7XG4gICAgdGhpcy5fY3J5cHRvSGFzaENvbmZpZy5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBjcnlwdG9IYXNoQ29uZmlnSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NyeXB0b0hhc2hDb25maWcuaW50ZXJuYWxWYWx1ZTtcbiAgfVxuXG4gIC8vIGNyeXB0b19yZXBsYWNlX2ZmeF9mcGVfY29uZmlnIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX2NyeXB0b1JlcGxhY2VGZnhGcGVDb25maWcgPSBuZXcgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnT3V0cHV0UmVmZXJlbmNlKHRoaXMsIFwiY3J5cHRvX3JlcGxhY2VfZmZ4X2ZwZV9jb25maWdcIik7XG4gIHB1YmxpYyBnZXQgY3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZygpIHtcbiAgICByZXR1cm4gdGhpcy5fY3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZztcbiAgfVxuICBwdWJsaWMgcHV0Q3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZyh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25DcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnKSB7XG4gICAgdGhpcy5fY3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZy5pbnRlcm5hbFZhbHVlID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0Q3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZygpIHtcbiAgICB0aGlzLl9jcnlwdG9SZXBsYWNlRmZ4RnBlQ29uZmlnLmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IGNyeXB0b1JlcGxhY2VGZnhGcGVDb25maWdJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fY3J5cHRvUmVwbGFjZUZmeEZwZUNvbmZpZy5pbnRlcm5hbFZhbHVlO1xuICB9XG5cbiAgLy8gZGF0ZV9zaGlmdF9jb25maWcgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfZGF0ZVNoaWZ0Q29uZmlnID0gbmV3IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uRGF0ZVNoaWZ0Q29uZmlnT3V0cHV0UmVmZXJlbmNlKHRoaXMsIFwiZGF0ZV9zaGlmdF9jb25maWdcIik7XG4gIHB1YmxpYyBnZXQgZGF0ZVNoaWZ0Q29uZmlnKCkge1xuICAgIHJldHVybiB0aGlzLl9kYXRlU2hpZnRDb25maWc7XG4gIH1cbiAgcHVibGljIHB1dERhdGVTaGlmdENvbmZpZyh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25EYXRlU2hpZnRDb25maWcpIHtcbiAgICB0aGlzLl9kYXRlU2hpZnRDb25maWcuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldERhdGVTaGlmdENvbmZpZygpIHtcbiAgICB0aGlzLl9kYXRlU2hpZnRDb25maWcuaW50ZXJuYWxWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgZGF0ZVNoaWZ0Q29uZmlnSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGVTaGlmdENvbmZpZy5pbnRlcm5hbFZhbHVlO1xuICB9XG5cbiAgLy8gZml4ZWRfc2l6ZV9idWNrZXRpbmdfY29uZmlnIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX2ZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZyA9IG5ldyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZ091dHB1dFJlZmVyZW5jZSh0aGlzLCBcImZpeGVkX3NpemVfYnVja2V0aW5nX2NvbmZpZ1wiKTtcbiAgcHVibGljIGdldCBmaXhlZFNpemVCdWNrZXRpbmdDb25maWcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZztcbiAgfVxuICBwdWJsaWMgcHV0Rml4ZWRTaXplQnVja2V0aW5nQ29uZmlnKHZhbHVlOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvbkZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZykge1xuICAgIHRoaXMuX2ZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZy5pbnRlcm5hbFZhbHVlID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0Rml4ZWRTaXplQnVja2V0aW5nQ29uZmlnKCkge1xuICAgIHRoaXMuX2ZpeGVkU2l6ZUJ1Y2tldGluZ0NvbmZpZy5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBmaXhlZFNpemVCdWNrZXRpbmdDb25maWdJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZml4ZWRTaXplQnVja2V0aW5nQ29uZmlnLmludGVybmFsVmFsdWU7XG4gIH1cblxuICAvLyByZWRhY3RfY29uZmlnIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX3JlZGFjdENvbmZpZyA9IG5ldyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvblJlZGFjdENvbmZpZ091dHB1dFJlZmVyZW5jZSh0aGlzLCBcInJlZGFjdF9jb25maWdcIik7XG4gIHB1YmxpYyBnZXQgcmVkYWN0Q29uZmlnKCkge1xuICAgIHJldHVybiB0aGlzLl9yZWRhY3RDb25maWc7XG4gIH1cbiAgcHVibGljIHB1dFJlZGFjdENvbmZpZyh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25SZWRhY3RDb25maWcpIHtcbiAgICB0aGlzLl9yZWRhY3RDb25maWcuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldFJlZGFjdENvbmZpZygpIHtcbiAgICB0aGlzLl9yZWRhY3RDb25maWcuaW50ZXJuYWxWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgcmVkYWN0Q29uZmlnSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlZGFjdENvbmZpZy5pbnRlcm5hbFZhbHVlO1xuICB9XG5cbiAgLy8gcmVwbGFjZV9jb25maWcgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfcmVwbGFjZUNvbmZpZyA9IG5ldyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvblJlcGxhY2VDb25maWdPdXRwdXRSZWZlcmVuY2UodGhpcywgXCJyZXBsYWNlX2NvbmZpZ1wiKTtcbiAgcHVibGljIGdldCByZXBsYWNlQ29uZmlnKCkge1xuICAgIHJldHVybiB0aGlzLl9yZXBsYWNlQ29uZmlnO1xuICB9XG4gIHB1YmxpYyBwdXRSZXBsYWNlQ29uZmlnKHZhbHVlOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNQcmltaXRpdmVUcmFuc2Zvcm1hdGlvblJlcGxhY2VDb25maWcpIHtcbiAgICB0aGlzLl9yZXBsYWNlQ29uZmlnLmludGVybmFsVmFsdWUgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRSZXBsYWNlQ29uZmlnKCkge1xuICAgIHRoaXMuX3JlcGxhY2VDb25maWcuaW50ZXJuYWxWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgcmVwbGFjZUNvbmZpZ0lucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9yZXBsYWNlQ29uZmlnLmludGVybmFsVmFsdWU7XG4gIH1cblxuICAvLyByZXBsYWNlX2RpY3Rpb25hcnlfY29uZmlnIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX3JlcGxhY2VEaWN0aW9uYXJ5Q29uZmlnID0gbmV3IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uUmVwbGFjZURpY3Rpb25hcnlDb25maWdPdXRwdXRSZWZlcmVuY2UodGhpcywgXCJyZXBsYWNlX2RpY3Rpb25hcnlfY29uZmlnXCIpO1xuICBwdWJsaWMgZ2V0IHJlcGxhY2VEaWN0aW9uYXJ5Q29uZmlnKCkge1xuICAgIHJldHVybiB0aGlzLl9yZXBsYWNlRGljdGlvbmFyeUNvbmZpZztcbiAgfVxuICBwdWJsaWMgcHV0UmVwbGFjZURpY3Rpb25hcnlDb25maWcodmFsdWU6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uUmVwbGFjZURpY3Rpb25hcnlDb25maWcpIHtcbiAgICB0aGlzLl9yZXBsYWNlRGljdGlvbmFyeUNvbmZpZy5pbnRlcm5hbFZhbHVlID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0UmVwbGFjZURpY3Rpb25hcnlDb25maWcoKSB7XG4gICAgdGhpcy5fcmVwbGFjZURpY3Rpb25hcnlDb25maWcuaW50ZXJuYWxWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgcmVwbGFjZURpY3Rpb25hcnlDb25maWdJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVwbGFjZURpY3Rpb25hcnlDb25maWcuaW50ZXJuYWxWYWx1ZTtcbiAgfVxuXG4gIC8vIHRpbWVfcGFydF9jb25maWcgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfdGltZVBhcnRDb25maWcgPSBuZXcgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25UaW1lUGFydENvbmZpZ091dHB1dFJlZmVyZW5jZSh0aGlzLCBcInRpbWVfcGFydF9jb25maWdcIik7XG4gIHB1YmxpYyBnZXQgdGltZVBhcnRDb25maWcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RpbWVQYXJ0Q29uZmlnO1xuICB9XG4gIHB1YmxpYyBwdXRUaW1lUGFydENvbmZpZyh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25UaW1lUGFydENvbmZpZykge1xuICAgIHRoaXMuX3RpbWVQYXJ0Q29uZmlnLmludGVybmFsVmFsdWUgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRUaW1lUGFydENvbmZpZygpIHtcbiAgICB0aGlzLl90aW1lUGFydENvbmZpZy5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCB0aW1lUGFydENvbmZpZ0lucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl90aW1lUGFydENvbmZpZy5pbnRlcm5hbFZhbHVlO1xuICB9XG59XG5leHBvcnQgaW50ZXJmYWNlIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9ucyB7XG4gIC8qKlxuICAqIGNvbmRpdGlvbiBibG9ja1xuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNjb25kaXRpb24gRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI2NvbmRpdGlvbn1cbiAgKi9cbiAgcmVhZG9ubHkgY29uZGl0aW9uPzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zQ29uZGl0aW9uO1xuICAvKipcbiAgKiBmaWVsZHMgYmxvY2tcbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjZmllbGRzIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSNmaWVsZHN9XG4gICovXG4gIHJlYWRvbmx5IGZpZWxkczogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zRmllbGRzW10gfCBjZGt0Zi5JUmVzb2x2YWJsZTtcbiAgLyoqXG4gICogaW5mb190eXBlX3RyYW5zZm9ybWF0aW9ucyBibG9ja1xuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNpbmZvX3R5cGVfdHJhbnNmb3JtYXRpb25zIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSNpbmZvX3R5cGVfdHJhbnNmb3JtYXRpb25zfVxuICAqL1xuICByZWFkb25seSBpbmZvVHlwZVRyYW5zZm9ybWF0aW9ucz86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc0luZm9UeXBlVHJhbnNmb3JtYXRpb25zO1xuICAvKipcbiAgKiBwcmltaXRpdmVfdHJhbnNmb3JtYXRpb24gYmxvY2tcbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjcHJpbWl0aXZlX3RyYW5zZm9ybWF0aW9uIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSNwcmltaXRpdmVfdHJhbnNmb3JtYXRpb259XG4gICovXG4gIHJlYWRvbmx5IHByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uPzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb247XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnMgfCBjZGt0Zi5JUmVzb2x2YWJsZSk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpIHx8IGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIGlmIChjZGt0Zi5pc0NvbXBsZXhFbGVtZW50KHN0cnVjdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGNvbXBsZXggZWxlbWVudCB3YXMgdXNlZCBhcyBjb25maWd1cmF0aW9uLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQ6IGh0dHBzOi8vY2RrLnRmL2NvbXBsZXgtb2JqZWN0LWFzLWNvbmZpZ3VyYXRpb25cIik7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBjb25kaXRpb246IGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc0NvbmRpdGlvblRvVGVycmFmb3JtKHN0cnVjdCEuY29uZGl0aW9uKSxcbiAgICBmaWVsZHM6IGNka3RmLmxpc3RNYXBwZXIoZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zRmllbGRzVG9UZXJyYWZvcm0sIHRydWUpKHN0cnVjdCEuZmllbGRzKSxcbiAgICBpbmZvX3R5cGVfdHJhbnNmb3JtYXRpb25zOiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNJbmZvVHlwZVRyYW5zZm9ybWF0aW9uc1RvVGVycmFmb3JtKHN0cnVjdCEuaW5mb1R5cGVUcmFuc2Zvcm1hdGlvbnMpLFxuICAgIHByaW1pdGl2ZV90cmFuc2Zvcm1hdGlvbjogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zUHJpbWl0aXZlVHJhbnNmb3JtYXRpb25Ub1RlcnJhZm9ybShzdHJ1Y3QhLnByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uKSxcbiAgfVxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNUb0hjbFRlcnJhZm9ybShzdHJ1Y3Q/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnMgfCBjZGt0Zi5JUmVzb2x2YWJsZSk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpIHx8IGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIGlmIChjZGt0Zi5pc0NvbXBsZXhFbGVtZW50KHN0cnVjdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGNvbXBsZXggZWxlbWVudCB3YXMgdXNlZCBhcyBjb25maWd1cmF0aW9uLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQ6IGh0dHBzOi8vY2RrLnRmL2NvbXBsZXgtb2JqZWN0LWFzLWNvbmZpZ3VyYXRpb25cIik7XG4gIH1cbiAgY29uc3QgYXR0cnMgPSB7XG4gICAgY29uZGl0aW9uOiB7XG4gICAgICB2YWx1ZTogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zQ29uZGl0aW9uVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5jb25kaXRpb24pLFxuICAgICAgaXNCbG9jazogdHJ1ZSxcbiAgICAgIHR5cGU6IFwibGlzdFwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNDb25kaXRpb25MaXN0XCIsXG4gICAgfSxcbiAgICBmaWVsZHM6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5saXN0TWFwcGVySGNsKGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc0ZpZWxkc1RvSGNsVGVycmFmb3JtLCB0cnVlKShzdHJ1Y3QhLmZpZWxkcyksXG4gICAgICBpc0Jsb2NrOiB0cnVlLFxuICAgICAgdHlwZTogXCJsaXN0XCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcIkRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc0ZpZWxkc0xpc3RcIixcbiAgICB9LFxuICAgIGluZm9fdHlwZV90cmFuc2Zvcm1hdGlvbnM6IHtcbiAgICAgIHZhbHVlOiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNJbmZvVHlwZVRyYW5zZm9ybWF0aW9uc1RvSGNsVGVycmFmb3JtKHN0cnVjdCEuaW5mb1R5cGVUcmFuc2Zvcm1hdGlvbnMpLFxuICAgICAgaXNCbG9jazogdHJ1ZSxcbiAgICAgIHR5cGU6IFwibGlzdFwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNJbmZvVHlwZVRyYW5zZm9ybWF0aW9uc0xpc3RcIixcbiAgICB9LFxuICAgIHByaW1pdGl2ZV90cmFuc2Zvcm1hdGlvbjoge1xuICAgICAgdmFsdWU6IGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5wcmltaXRpdmVUcmFuc2Zvcm1hdGlvbiksXG4gICAgICBpc0Jsb2NrOiB0cnVlLFxuICAgICAgdHlwZTogXCJsaXN0XCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcIkRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uTGlzdFwiLFxuICAgIH0sXG4gIH07XG5cbiAgLy8gcmVtb3ZlIHVuZGVmaW5lZCBhdHRyaWJ1dGVzXG4gIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMoYXR0cnMpLmZpbHRlcigoW18sIHZhbHVlXSkgPT4gdmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZS52YWx1ZSAhPT0gdW5kZWZpbmVkKSk7XG59XG5cbmV4cG9ydCBjbGFzcyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNPdXRwdXRSZWZlcmVuY2UgZXh0ZW5kcyBjZGt0Zi5Db21wbGV4T2JqZWN0IHtcbiAgcHJpdmF0ZSBpc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG4gIHByaXZhdGUgcmVzb2x2YWJsZVZhbHVlPzogY2RrdGYuSVJlc29sdmFibGU7XG5cbiAgLyoqXG4gICogQHBhcmFtIHRlcnJhZm9ybVJlc291cmNlIFRoZSBwYXJlbnQgcmVzb3VyY2VcbiAgKiBAcGFyYW0gdGVycmFmb3JtQXR0cmlidXRlIFRoZSBhdHRyaWJ1dGUgb24gdGhlIHBhcmVudCByZXNvdXJjZSB0aGlzIGNsYXNzIGlzIHJlZmVyZW5jaW5nXG4gICogQHBhcmFtIGNvbXBsZXhPYmplY3RJbmRleCB0aGUgaW5kZXggb2YgdGhpcyBpdGVtIGluIHRoZSBsaXN0XG4gICogQHBhcmFtIGNvbXBsZXhPYmplY3RJc0Zyb21TZXQgd2hldGhlciB0aGUgbGlzdCBpcyB3cmFwcGluZyBhIHNldCAod2lsbCBhZGQgdG9saXN0KCkgdG8gYmUgYWJsZSB0byBhY2Nlc3MgYW4gaXRlbSB2aWEgYW4gaW5kZXgpXG4gICovXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcih0ZXJyYWZvcm1SZXNvdXJjZTogY2RrdGYuSUludGVycG9sYXRpbmdQYXJlbnQsIHRlcnJhZm9ybUF0dHJpYnV0ZTogc3RyaW5nLCBjb21wbGV4T2JqZWN0SW5kZXg6IG51bWJlciwgY29tcGxleE9iamVjdElzRnJvbVNldDogYm9vbGVhbikge1xuICAgIHN1cGVyKHRlcnJhZm9ybVJlc291cmNlLCB0ZXJyYWZvcm1BdHRyaWJ1dGUsIGNvbXBsZXhPYmplY3RJc0Zyb21TZXQsIGNvbXBsZXhPYmplY3RJbmRleCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGludGVybmFsVmFsdWUoKTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zIHwgY2RrdGYuSVJlc29sdmFibGUgfCB1bmRlZmluZWQge1xuICAgIGlmICh0aGlzLnJlc29sdmFibGVWYWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMucmVzb2x2YWJsZVZhbHVlO1xuICAgIH1cbiAgICBsZXQgaGFzQW55VmFsdWVzID0gdGhpcy5pc0VtcHR5T2JqZWN0O1xuICAgIGNvbnN0IGludGVybmFsVmFsdWVSZXN1bHQ6IGFueSA9IHt9O1xuICAgIGlmICh0aGlzLl9jb25kaXRpb24/LmludGVybmFsVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQuY29uZGl0aW9uID0gdGhpcy5fY29uZGl0aW9uPy5pbnRlcm5hbFZhbHVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5fZmllbGRzPy5pbnRlcm5hbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LmZpZWxkcyA9IHRoaXMuX2ZpZWxkcz8uaW50ZXJuYWxWYWx1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2luZm9UeXBlVHJhbnNmb3JtYXRpb25zPy5pbnRlcm5hbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LmluZm9UeXBlVHJhbnNmb3JtYXRpb25zID0gdGhpcy5faW5mb1R5cGVUcmFuc2Zvcm1hdGlvbnM/LmludGVybmFsVmFsdWU7XG4gICAgfVxuICAgIGlmICh0aGlzLl9wcmltaXRpdmVUcmFuc2Zvcm1hdGlvbj8uaW50ZXJuYWxWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC5wcmltaXRpdmVUcmFuc2Zvcm1hdGlvbiA9IHRoaXMuX3ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uPy5pbnRlcm5hbFZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gaGFzQW55VmFsdWVzID8gaW50ZXJuYWxWYWx1ZVJlc3VsdCA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgaW50ZXJuYWxWYWx1ZSh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zIHwgY2RrdGYuSVJlc29sdmFibGUgfCB1bmRlZmluZWQpIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5pc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG4gICAgICB0aGlzLnJlc29sdmFibGVWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2NvbmRpdGlvbi5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fZmllbGRzLmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9pbmZvVHlwZVRyYW5zZm9ybWF0aW9ucy5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fcHJpbWl0aXZlVHJhbnNmb3JtYXRpb24uaW50ZXJuYWxWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZWxzZSBpZiAoY2RrdGYuVG9rZW5pemF0aW9uLmlzUmVzb2x2YWJsZSh2YWx1ZSkpIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IGZhbHNlO1xuICAgICAgdGhpcy5yZXNvbHZhYmxlVmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLmlzRW1wdHlPYmplY3QgPSBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoID09PSAwO1xuICAgICAgdGhpcy5yZXNvbHZhYmxlVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9jb25kaXRpb24uaW50ZXJuYWxWYWx1ZSA9IHZhbHVlLmNvbmRpdGlvbjtcbiAgICAgIHRoaXMuX2ZpZWxkcy5pbnRlcm5hbFZhbHVlID0gdmFsdWUuZmllbGRzO1xuICAgICAgdGhpcy5faW5mb1R5cGVUcmFuc2Zvcm1hdGlvbnMuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlLmluZm9UeXBlVHJhbnNmb3JtYXRpb25zO1xuICAgICAgdGhpcy5fcHJpbWl0aXZlVHJhbnNmb3JtYXRpb24uaW50ZXJuYWxWYWx1ZSA9IHZhbHVlLnByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uO1xuICAgIH1cbiAgfVxuXG4gIC8vIGNvbmRpdGlvbiAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9jb25kaXRpb24gPSBuZXcgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zQ29uZGl0aW9uT3V0cHV0UmVmZXJlbmNlKHRoaXMsIFwiY29uZGl0aW9uXCIpO1xuICBwdWJsaWMgZ2V0IGNvbmRpdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fY29uZGl0aW9uO1xuICB9XG4gIHB1YmxpYyBwdXRDb25kaXRpb24odmFsdWU6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc0NvbmRpdGlvbikge1xuICAgIHRoaXMuX2NvbmRpdGlvbi5pbnRlcm5hbFZhbHVlID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0Q29uZGl0aW9uKCkge1xuICAgIHRoaXMuX2NvbmRpdGlvbi5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBjb25kaXRpb25JbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29uZGl0aW9uLmludGVybmFsVmFsdWU7XG4gIH1cblxuICAvLyBmaWVsZHMgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiBmYWxzZSwgcmVxdWlyZWQ6IHRydWVcbiAgcHJpdmF0ZSBfZmllbGRzID0gbmV3IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc0ZpZWxkc0xpc3QodGhpcywgXCJmaWVsZHNcIiwgZmFsc2UpO1xuICBwdWJsaWMgZ2V0IGZpZWxkcygpIHtcbiAgICByZXR1cm4gdGhpcy5fZmllbGRzO1xuICB9XG4gIHB1YmxpYyBwdXRGaWVsZHModmFsdWU6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc0ZpZWxkc1tdIHwgY2RrdGYuSVJlc29sdmFibGUpIHtcbiAgICB0aGlzLl9maWVsZHMuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBmaWVsZHNJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZmllbGRzLmludGVybmFsVmFsdWU7XG4gIH1cblxuICAvLyBpbmZvX3R5cGVfdHJhbnNmb3JtYXRpb25zIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX2luZm9UeXBlVHJhbnNmb3JtYXRpb25zID0gbmV3IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc0luZm9UeXBlVHJhbnNmb3JtYXRpb25zT3V0cHV0UmVmZXJlbmNlKHRoaXMsIFwiaW5mb190eXBlX3RyYW5zZm9ybWF0aW9uc1wiKTtcbiAgcHVibGljIGdldCBpbmZvVHlwZVRyYW5zZm9ybWF0aW9ucygpIHtcbiAgICByZXR1cm4gdGhpcy5faW5mb1R5cGVUcmFuc2Zvcm1hdGlvbnM7XG4gIH1cbiAgcHVibGljIHB1dEluZm9UeXBlVHJhbnNmb3JtYXRpb25zKHZhbHVlOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNJbmZvVHlwZVRyYW5zZm9ybWF0aW9ucykge1xuICAgIHRoaXMuX2luZm9UeXBlVHJhbnNmb3JtYXRpb25zLmludGVybmFsVmFsdWUgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRJbmZvVHlwZVRyYW5zZm9ybWF0aW9ucygpIHtcbiAgICB0aGlzLl9pbmZvVHlwZVRyYW5zZm9ybWF0aW9ucy5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBpbmZvVHlwZVRyYW5zZm9ybWF0aW9uc0lucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9pbmZvVHlwZVRyYW5zZm9ybWF0aW9ucy5pbnRlcm5hbFZhbHVlO1xuICB9XG5cbiAgLy8gcHJpbWl0aXZlX3RyYW5zZm9ybWF0aW9uIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX3ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uID0gbmV3IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uT3V0cHV0UmVmZXJlbmNlKHRoaXMsIFwicHJpbWl0aXZlX3RyYW5zZm9ybWF0aW9uXCIpO1xuICBwdWJsaWMgZ2V0IHByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9wcmltaXRpdmVUcmFuc2Zvcm1hdGlvbjtcbiAgfVxuICBwdWJsaWMgcHV0UHJpbWl0aXZlVHJhbnNmb3JtYXRpb24odmFsdWU6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uKSB7XG4gICAgdGhpcy5fcHJpbWl0aXZlVHJhbnNmb3JtYXRpb24uaW50ZXJuYWxWYWx1ZSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldFByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uKCkge1xuICAgIHRoaXMuX3ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uLmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IHByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ByaW1pdGl2ZVRyYW5zZm9ybWF0aW9uLmludGVybmFsVmFsdWU7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc0xpc3QgZXh0ZW5kcyBjZGt0Zi5Db21wbGV4TGlzdCB7XG4gIHB1YmxpYyBpbnRlcm5hbFZhbHVlPyA6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNGaWVsZFRyYW5zZm9ybWF0aW9uc1tdIHwgY2RrdGYuSVJlc29sdmFibGVcblxuICAvKipcbiAgKiBAcGFyYW0gdGVycmFmb3JtUmVzb3VyY2UgVGhlIHBhcmVudCByZXNvdXJjZVxuICAqIEBwYXJhbSB0ZXJyYWZvcm1BdHRyaWJ1dGUgVGhlIGF0dHJpYnV0ZSBvbiB0aGUgcGFyZW50IHJlc291cmNlIHRoaXMgY2xhc3MgaXMgcmVmZXJlbmNpbmdcbiAgKiBAcGFyYW0gd3JhcHNTZXQgd2hldGhlciB0aGUgbGlzdCBpcyB3cmFwcGluZyBhIHNldCAod2lsbCBhZGQgdG9saXN0KCkgdG8gYmUgYWJsZSB0byBhY2Nlc3MgYW4gaXRlbSB2aWEgYW4gaW5kZXgpXG4gICovXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCB0ZXJyYWZvcm1SZXNvdXJjZTogY2RrdGYuSUludGVycG9sYXRpbmdQYXJlbnQsIHByb3RlY3RlZCB0ZXJyYWZvcm1BdHRyaWJ1dGU6IHN0cmluZywgcHJvdGVjdGVkIHdyYXBzU2V0OiBib29sZWFuKSB7XG4gICAgc3VwZXIodGVycmFmb3JtUmVzb3VyY2UsIHRlcnJhZm9ybUF0dHJpYnV0ZSwgd3JhcHNTZXQpXG4gIH1cblxuICAvKipcbiAgKiBAcGFyYW0gaW5kZXggdGhlIGluZGV4IG9mIHRoZSBpdGVtIHRvIHJldHVyblxuICAqL1xuICBwdWJsaWMgZ2V0KGluZGV4OiBudW1iZXIpOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNPdXRwdXRSZWZlcmVuY2Uge1xuICAgIHJldHVybiBuZXcgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zT3V0cHV0UmVmZXJlbmNlKHRoaXMudGVycmFmb3JtUmVzb3VyY2UsIHRoaXMudGVycmFmb3JtQXR0cmlidXRlLCBpbmRleCwgdGhpcy53cmFwc1NldCk7XG4gIH1cbn1cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc0NvbmRpdGlvbkV4cHJlc3Npb25zQ29uZGl0aW9uc0NvbmRpdGlvbnNGaWVsZCB7XG4gIC8qKlxuICAqIE5hbWUgZGVzY3JpYmluZyB0aGUgZmllbGQuXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI25hbWUgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI25hbWV9XG4gICovXG4gIHJlYWRvbmx5IG5hbWU/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zUmVjb3JkU3VwcHJlc3Npb25zQ29uZGl0aW9uRXhwcmVzc2lvbnNDb25kaXRpb25zQ29uZGl0aW9uc0ZpZWxkVG9UZXJyYWZvcm0oc3RydWN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc0NvbmRpdGlvbkV4cHJlc3Npb25zQ29uZGl0aW9uc0NvbmRpdGlvbnNGaWVsZE91dHB1dFJlZmVyZW5jZSB8IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNDb25kaXRpb25FeHByZXNzaW9uc0NvbmRpdGlvbnNDb25kaXRpb25zRmllbGQpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIHJldHVybiB7XG4gICAgbmFtZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5uYW1lKSxcbiAgfVxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zUmVjb3JkU3VwcHJlc3Npb25zQ29uZGl0aW9uRXhwcmVzc2lvbnNDb25kaXRpb25zQ29uZGl0aW9uc0ZpZWxkVG9IY2xUZXJyYWZvcm0oc3RydWN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc0NvbmRpdGlvbkV4cHJlc3Npb25zQ29uZGl0aW9uc0NvbmRpdGlvbnNGaWVsZE91dHB1dFJlZmVyZW5jZSB8IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNDb25kaXRpb25FeHByZXNzaW9uc0NvbmRpdGlvbnNDb25kaXRpb25zRmllbGQpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIGNvbnN0IGF0dHJzID0ge1xuICAgIG5hbWU6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5zdHJpbmdUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLm5hbWUpLFxuICAgICAgaXNCbG9jazogZmFsc2UsXG4gICAgICB0eXBlOiBcInNpbXBsZVwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJzdHJpbmdcIixcbiAgICB9LFxuICB9O1xuXG4gIC8vIHJlbW92ZSB1bmRlZmluZWQgYXR0cmlidXRlc1xuICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5lbnRyaWVzKGF0dHJzKS5maWx0ZXIoKFtfLCB2YWx1ZV0pID0+IHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUudmFsdWUgIT09IHVuZGVmaW5lZCkpO1xufVxuXG5leHBvcnQgY2xhc3MgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc0NvbmRpdGlvbkV4cHJlc3Npb25zQ29uZGl0aW9uc0NvbmRpdGlvbnNGaWVsZE91dHB1dFJlZmVyZW5jZSBleHRlbmRzIGNka3RmLkNvbXBsZXhPYmplY3Qge1xuICBwcml2YXRlIGlzRW1wdHlPYmplY3QgPSBmYWxzZTtcblxuICAvKipcbiAgKiBAcGFyYW0gdGVycmFmb3JtUmVzb3VyY2UgVGhlIHBhcmVudCByZXNvdXJjZVxuICAqIEBwYXJhbSB0ZXJyYWZvcm1BdHRyaWJ1dGUgVGhlIGF0dHJpYnV0ZSBvbiB0aGUgcGFyZW50IHJlc291cmNlIHRoaXMgY2xhc3MgaXMgcmVmZXJlbmNpbmdcbiAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHRlcnJhZm9ybVJlc291cmNlOiBjZGt0Zi5JSW50ZXJwb2xhdGluZ1BhcmVudCwgdGVycmFmb3JtQXR0cmlidXRlOiBzdHJpbmcpIHtcbiAgICBzdXBlcih0ZXJyYWZvcm1SZXNvdXJjZSwgdGVycmFmb3JtQXR0cmlidXRlLCBmYWxzZSwgMCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGludGVybmFsVmFsdWUoKTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc0NvbmRpdGlvbkV4cHJlc3Npb25zQ29uZGl0aW9uc0NvbmRpdGlvbnNGaWVsZCB8IHVuZGVmaW5lZCB7XG4gICAgbGV0IGhhc0FueVZhbHVlcyA9IHRoaXMuaXNFbXB0eU9iamVjdDtcbiAgICBjb25zdCBpbnRlcm5hbFZhbHVlUmVzdWx0OiBhbnkgPSB7fTtcbiAgICBpZiAodGhpcy5fbmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC5uYW1lID0gdGhpcy5fbmFtZTtcbiAgICB9XG4gICAgcmV0dXJuIGhhc0FueVZhbHVlcyA/IGludGVybmFsVmFsdWVSZXN1bHQgOiB1bmRlZmluZWQ7XG4gIH1cblxuICBwdWJsaWMgc2V0IGludGVybmFsVmFsdWUodmFsdWU6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNDb25kaXRpb25FeHByZXNzaW9uc0NvbmRpdGlvbnNDb25kaXRpb25zRmllbGQgfCB1bmRlZmluZWQpIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5pc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG4gICAgICB0aGlzLl9uYW1lID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggPT09IDA7XG4gICAgICB0aGlzLl9uYW1lID0gdmFsdWUubmFtZTtcbiAgICB9XG4gIH1cblxuICAvLyBuYW1lIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX25hbWU/OiBzdHJpbmc7IFxuICBwdWJsaWMgZ2V0IG5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCduYW1lJyk7XG4gIH1cbiAgcHVibGljIHNldCBuYW1lKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9uYW1lID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0TmFtZSgpIHtcbiAgICB0aGlzLl9uYW1lID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBuYW1lSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX25hbWU7XG4gIH1cbn1cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc0NvbmRpdGlvbkV4cHJlc3Npb25zQ29uZGl0aW9uc0NvbmRpdGlvbnNWYWx1ZURhdGVWYWx1ZSB7XG4gIC8qKlxuICAqIERheSBvZiBhIG1vbnRoLiBNdXN0IGJlIGZyb20gMSB0byAzMSBhbmQgdmFsaWQgZm9yIHRoZSB5ZWFyIGFuZCBtb250aCwgb3IgMCB0byBzcGVjaWZ5IGEgeWVhciBieSBpdHNlbGYgb3IgYSB5ZWFyIGFuZCBtb250aCB3aGVyZSB0aGUgZGF5IGlzbid0IHNpZ25pZmljYW50LlxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNkYXkgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI2RheX1cbiAgKi9cbiAgcmVhZG9ubHkgZGF5PzogbnVtYmVyO1xuICAvKipcbiAgKiBNb250aCBvZiBhIHllYXIuIE11c3QgYmUgZnJvbSAxIHRvIDEyLCBvciAwIHRvIHNwZWNpZnkgYSB5ZWFyIHdpdGhvdXQgYSBtb250aCBhbmQgZGF5LlxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNtb250aCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjbW9udGh9XG4gICovXG4gIHJlYWRvbmx5IG1vbnRoPzogbnVtYmVyO1xuICAvKipcbiAgKiBZZWFyIG9mIHRoZSBkYXRlLiBNdXN0IGJlIGZyb20gMSB0byA5OTk5LCBvciAwIHRvIHNwZWNpZnkgYSBkYXRlIHdpdGhvdXQgYSB5ZWFyLlxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSN5ZWFyIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSN5ZWFyfVxuICAqL1xuICByZWFkb25seSB5ZWFyPzogbnVtYmVyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc0NvbmRpdGlvbkV4cHJlc3Npb25zQ29uZGl0aW9uc0NvbmRpdGlvbnNWYWx1ZURhdGVWYWx1ZVRvVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNDb25kaXRpb25FeHByZXNzaW9uc0NvbmRpdGlvbnNDb25kaXRpb25zVmFsdWVEYXRlVmFsdWVPdXRwdXRSZWZlcmVuY2UgfCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zUmVjb3JkU3VwcHJlc3Npb25zQ29uZGl0aW9uRXhwcmVzc2lvbnNDb25kaXRpb25zQ29uZGl0aW9uc1ZhbHVlRGF0ZVZhbHVlKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkgfHwgY2RrdGYuVG9rZW5pemF0aW9uLmlzUmVzb2x2YWJsZShzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgaWYgKGNka3RmLmlzQ29tcGxleEVsZW1lbnQoc3RydWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkEgY29tcGxleCBlbGVtZW50IHdhcyB1c2VkIGFzIGNvbmZpZ3VyYXRpb24sIHRoaXMgaXMgbm90IHN1cHBvcnRlZDogaHR0cHM6Ly9jZGsudGYvY29tcGxleC1vYmplY3QtYXMtY29uZmlndXJhdGlvblwiKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGRheTogY2RrdGYubnVtYmVyVG9UZXJyYWZvcm0oc3RydWN0IS5kYXkpLFxuICAgIG1vbnRoOiBjZGt0Zi5udW1iZXJUb1RlcnJhZm9ybShzdHJ1Y3QhLm1vbnRoKSxcbiAgICB5ZWFyOiBjZGt0Zi5udW1iZXJUb1RlcnJhZm9ybShzdHJ1Y3QhLnllYXIpLFxuICB9XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNDb25kaXRpb25FeHByZXNzaW9uc0NvbmRpdGlvbnNDb25kaXRpb25zVmFsdWVEYXRlVmFsdWVUb0hjbFRlcnJhZm9ybShzdHJ1Y3Q/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zUmVjb3JkU3VwcHJlc3Npb25zQ29uZGl0aW9uRXhwcmVzc2lvbnNDb25kaXRpb25zQ29uZGl0aW9uc1ZhbHVlRGF0ZVZhbHVlT3V0cHV0UmVmZXJlbmNlIHwgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc0NvbmRpdGlvbkV4cHJlc3Npb25zQ29uZGl0aW9uc0NvbmRpdGlvbnNWYWx1ZURhdGVWYWx1ZSk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpIHx8IGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIGlmIChjZGt0Zi5pc0NvbXBsZXhFbGVtZW50KHN0cnVjdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGNvbXBsZXggZWxlbWVudCB3YXMgdXNlZCBhcyBjb25maWd1cmF0aW9uLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQ6IGh0dHBzOi8vY2RrLnRmL2NvbXBsZXgtb2JqZWN0LWFzLWNvbmZpZ3VyYXRpb25cIik7XG4gIH1cbiAgY29uc3QgYXR0cnMgPSB7XG4gICAgZGF5OiB7XG4gICAgICB2YWx1ZTogY2RrdGYubnVtYmVyVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5kYXkpLFxuICAgICAgaXNCbG9jazogZmFsc2UsXG4gICAgICB0eXBlOiBcInNpbXBsZVwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJudW1iZXJcIixcbiAgICB9LFxuICAgIG1vbnRoOiB7XG4gICAgICB2YWx1ZTogY2RrdGYubnVtYmVyVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5tb250aCksXG4gICAgICBpc0Jsb2NrOiBmYWxzZSxcbiAgICAgIHR5cGU6IFwic2ltcGxlXCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcIm51bWJlclwiLFxuICAgIH0sXG4gICAgeWVhcjoge1xuICAgICAgdmFsdWU6IGNka3RmLm51bWJlclRvSGNsVGVycmFmb3JtKHN0cnVjdCEueWVhciksXG4gICAgICBpc0Jsb2NrOiBmYWxzZSxcbiAgICAgIHR5cGU6IFwic2ltcGxlXCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcIm51bWJlclwiLFxuICAgIH0sXG4gIH07XG5cbiAgLy8gcmVtb3ZlIHVuZGVmaW5lZCBhdHRyaWJ1dGVzXG4gIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMoYXR0cnMpLmZpbHRlcigoW18sIHZhbHVlXSkgPT4gdmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZS52YWx1ZSAhPT0gdW5kZWZpbmVkKSk7XG59XG5cbmV4cG9ydCBjbGFzcyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zUmVjb3JkU3VwcHJlc3Npb25zQ29uZGl0aW9uRXhwcmVzc2lvbnNDb25kaXRpb25zQ29uZGl0aW9uc1ZhbHVlRGF0ZVZhbHVlT3V0cHV0UmVmZXJlbmNlIGV4dGVuZHMgY2RrdGYuQ29tcGxleE9iamVjdCB7XG4gIHByaXZhdGUgaXNFbXB0eU9iamVjdCA9IGZhbHNlO1xuXG4gIC8qKlxuICAqIEBwYXJhbSB0ZXJyYWZvcm1SZXNvdXJjZSBUaGUgcGFyZW50IHJlc291cmNlXG4gICogQHBhcmFtIHRlcnJhZm9ybUF0dHJpYnV0ZSBUaGUgYXR0cmlidXRlIG9uIHRoZSBwYXJlbnQgcmVzb3VyY2UgdGhpcyBjbGFzcyBpcyByZWZlcmVuY2luZ1xuICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IodGVycmFmb3JtUmVzb3VyY2U6IGNka3RmLklJbnRlcnBvbGF0aW5nUGFyZW50LCB0ZXJyYWZvcm1BdHRyaWJ1dGU6IHN0cmluZykge1xuICAgIHN1cGVyKHRlcnJhZm9ybVJlc291cmNlLCB0ZXJyYWZvcm1BdHRyaWJ1dGUsIGZhbHNlLCAwKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgaW50ZXJuYWxWYWx1ZSgpOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zUmVjb3JkU3VwcHJlc3Npb25zQ29uZGl0aW9uRXhwcmVzc2lvbnNDb25kaXRpb25zQ29uZGl0aW9uc1ZhbHVlRGF0ZVZhbHVlIHwgdW5kZWZpbmVkIHtcbiAgICBsZXQgaGFzQW55VmFsdWVzID0gdGhpcy5pc0VtcHR5T2JqZWN0O1xuICAgIGNvbnN0IGludGVybmFsVmFsdWVSZXN1bHQ6IGFueSA9IHt9O1xuICAgIGlmICh0aGlzLl9kYXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQuZGF5ID0gdGhpcy5fZGF5O1xuICAgIH1cbiAgICBpZiAodGhpcy5fbW9udGggIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQubW9udGggPSB0aGlzLl9tb250aDtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3llYXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQueWVhciA9IHRoaXMuX3llYXI7XG4gICAgfVxuICAgIHJldHVybiBoYXNBbnlWYWx1ZXMgPyBpbnRlcm5hbFZhbHVlUmVzdWx0IDogdW5kZWZpbmVkO1xuICB9XG5cbiAgcHVibGljIHNldCBpbnRlcm5hbFZhbHVlKHZhbHVlOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zUmVjb3JkU3VwcHJlc3Npb25zQ29uZGl0aW9uRXhwcmVzc2lvbnNDb25kaXRpb25zQ29uZGl0aW9uc1ZhbHVlRGF0ZVZhbHVlIHwgdW5kZWZpbmVkKSB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IGZhbHNlO1xuICAgICAgdGhpcy5fZGF5ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fbW9udGggPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl95ZWFyID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggPT09IDA7XG4gICAgICB0aGlzLl9kYXkgPSB2YWx1ZS5kYXk7XG4gICAgICB0aGlzLl9tb250aCA9IHZhbHVlLm1vbnRoO1xuICAgICAgdGhpcy5feWVhciA9IHZhbHVlLnllYXI7XG4gICAgfVxuICB9XG5cbiAgLy8gZGF5IC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX2RheT86IG51bWJlcjsgXG4gIHB1YmxpYyBnZXQgZGF5KCkge1xuICAgIHJldHVybiB0aGlzLmdldE51bWJlckF0dHJpYnV0ZSgnZGF5Jyk7XG4gIH1cbiAgcHVibGljIHNldCBkYXkodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX2RheSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldERheSgpIHtcbiAgICB0aGlzLl9kYXkgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IGRheUlucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9kYXk7XG4gIH1cblxuICAvLyBtb250aCAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9tb250aD86IG51bWJlcjsgXG4gIHB1YmxpYyBnZXQgbW9udGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TnVtYmVyQXR0cmlidXRlKCdtb250aCcpO1xuICB9XG4gIHB1YmxpYyBzZXQgbW9udGgodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX21vbnRoID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0TW9udGgoKSB7XG4gICAgdGhpcy5fbW9udGggPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IG1vbnRoSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX21vbnRoO1xuICB9XG5cbiAgLy8geWVhciAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF95ZWFyPzogbnVtYmVyOyBcbiAgcHVibGljIGdldCB5ZWFyKCkge1xuICAgIHJldHVybiB0aGlzLmdldE51bWJlckF0dHJpYnV0ZSgneWVhcicpO1xuICB9XG4gIHB1YmxpYyBzZXQgeWVhcih2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5feWVhciA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldFllYXIoKSB7XG4gICAgdGhpcy5feWVhciA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgeWVhcklucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl95ZWFyO1xuICB9XG59XG5leHBvcnQgaW50ZXJmYWNlIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNDb25kaXRpb25FeHByZXNzaW9uc0NvbmRpdGlvbnNDb25kaXRpb25zVmFsdWVUaW1lVmFsdWUge1xuICAvKipcbiAgKiBIb3VycyBvZiBkYXkgaW4gMjQgaG91ciBmb3JtYXQuIFNob3VsZCBiZSBmcm9tIDAgdG8gMjMuIEFuIEFQSSBtYXkgY2hvb3NlIHRvIGFsbG93IHRoZSB2YWx1ZSBcIjI0OjAwOjAwXCIgZm9yIHNjZW5hcmlvcyBsaWtlIGJ1c2luZXNzIGNsb3NpbmcgdGltZS5cbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjaG91cnMgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI2hvdXJzfVxuICAqL1xuICByZWFkb25seSBob3Vycz86IG51bWJlcjtcbiAgLyoqXG4gICogTWludXRlcyBvZiBob3VyIG9mIGRheS4gTXVzdCBiZSBmcm9tIDAgdG8gNTkuXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI21pbnV0ZXMgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI21pbnV0ZXN9XG4gICovXG4gIHJlYWRvbmx5IG1pbnV0ZXM/OiBudW1iZXI7XG4gIC8qKlxuICAqIEZyYWN0aW9ucyBvZiBzZWNvbmRzIGluIG5hbm9zZWNvbmRzLiBNdXN0IGJlIGZyb20gMCB0byA5OTksOTk5LDk5OS5cbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjbmFub3MgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI25hbm9zfVxuICAqL1xuICByZWFkb25seSBuYW5vcz86IG51bWJlcjtcbiAgLyoqXG4gICogU2Vjb25kcyBvZiBtaW51dGVzIG9mIHRoZSB0aW1lLiBNdXN0IG5vcm1hbGx5IGJlIGZyb20gMCB0byA1OS4gQW4gQVBJIG1heSBhbGxvdyB0aGUgdmFsdWUgNjAgaWYgaXQgYWxsb3dzIGxlYXAtc2Vjb25kcy5cbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjc2Vjb25kcyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjc2Vjb25kc31cbiAgKi9cbiAgcmVhZG9ubHkgc2Vjb25kcz86IG51bWJlcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNDb25kaXRpb25FeHByZXNzaW9uc0NvbmRpdGlvbnNDb25kaXRpb25zVmFsdWVUaW1lVmFsdWVUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zUmVjb3JkU3VwcHJlc3Npb25zQ29uZGl0aW9uRXhwcmVzc2lvbnNDb25kaXRpb25zQ29uZGl0aW9uc1ZhbHVlVGltZVZhbHVlT3V0cHV0UmVmZXJlbmNlIHwgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc0NvbmRpdGlvbkV4cHJlc3Npb25zQ29uZGl0aW9uc0NvbmRpdGlvbnNWYWx1ZVRpbWVWYWx1ZSk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpIHx8IGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIGlmIChjZGt0Zi5pc0NvbXBsZXhFbGVtZW50KHN0cnVjdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGNvbXBsZXggZWxlbWVudCB3YXMgdXNlZCBhcyBjb25maWd1cmF0aW9uLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQ6IGh0dHBzOi8vY2RrLnRmL2NvbXBsZXgtb2JqZWN0LWFzLWNvbmZpZ3VyYXRpb25cIik7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBob3VyczogY2RrdGYubnVtYmVyVG9UZXJyYWZvcm0oc3RydWN0IS5ob3VycyksXG4gICAgbWludXRlczogY2RrdGYubnVtYmVyVG9UZXJyYWZvcm0oc3RydWN0IS5taW51dGVzKSxcbiAgICBuYW5vczogY2RrdGYubnVtYmVyVG9UZXJyYWZvcm0oc3RydWN0IS5uYW5vcyksXG4gICAgc2Vjb25kczogY2RrdGYubnVtYmVyVG9UZXJyYWZvcm0oc3RydWN0IS5zZWNvbmRzKSxcbiAgfVxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zUmVjb3JkU3VwcHJlc3Npb25zQ29uZGl0aW9uRXhwcmVzc2lvbnNDb25kaXRpb25zQ29uZGl0aW9uc1ZhbHVlVGltZVZhbHVlVG9IY2xUZXJyYWZvcm0oc3RydWN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc0NvbmRpdGlvbkV4cHJlc3Npb25zQ29uZGl0aW9uc0NvbmRpdGlvbnNWYWx1ZVRpbWVWYWx1ZU91dHB1dFJlZmVyZW5jZSB8IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNDb25kaXRpb25FeHByZXNzaW9uc0NvbmRpdGlvbnNDb25kaXRpb25zVmFsdWVUaW1lVmFsdWUpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIGNvbnN0IGF0dHJzID0ge1xuICAgIGhvdXJzOiB7XG4gICAgICB2YWx1ZTogY2RrdGYubnVtYmVyVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5ob3VycyksXG4gICAgICBpc0Jsb2NrOiBmYWxzZSxcbiAgICAgIHR5cGU6IFwic2ltcGxlXCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcIm51bWJlclwiLFxuICAgIH0sXG4gICAgbWludXRlczoge1xuICAgICAgdmFsdWU6IGNka3RmLm51bWJlclRvSGNsVGVycmFmb3JtKHN0cnVjdCEubWludXRlcyksXG4gICAgICBpc0Jsb2NrOiBmYWxzZSxcbiAgICAgIHR5cGU6IFwic2ltcGxlXCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcIm51bWJlclwiLFxuICAgIH0sXG4gICAgbmFub3M6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5udW1iZXJUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLm5hbm9zKSxcbiAgICAgIGlzQmxvY2s6IGZhbHNlLFxuICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwibnVtYmVyXCIsXG4gICAgfSxcbiAgICBzZWNvbmRzOiB7XG4gICAgICB2YWx1ZTogY2RrdGYubnVtYmVyVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5zZWNvbmRzKSxcbiAgICAgIGlzQmxvY2s6IGZhbHNlLFxuICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwibnVtYmVyXCIsXG4gICAgfSxcbiAgfTtcblxuICAvLyByZW1vdmUgdW5kZWZpbmVkIGF0dHJpYnV0ZXNcbiAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhhdHRycykuZmlsdGVyKChbXywgdmFsdWVdKSA9PiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlLnZhbHVlICE9PSB1bmRlZmluZWQpKTtcbn1cblxuZXhwb3J0IGNsYXNzIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNDb25kaXRpb25FeHByZXNzaW9uc0NvbmRpdGlvbnNDb25kaXRpb25zVmFsdWVUaW1lVmFsdWVPdXRwdXRSZWZlcmVuY2UgZXh0ZW5kcyBjZGt0Zi5Db21wbGV4T2JqZWN0IHtcbiAgcHJpdmF0ZSBpc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG5cbiAgLyoqXG4gICogQHBhcmFtIHRlcnJhZm9ybVJlc291cmNlIFRoZSBwYXJlbnQgcmVzb3VyY2VcbiAgKiBAcGFyYW0gdGVycmFmb3JtQXR0cmlidXRlIFRoZSBhdHRyaWJ1dGUgb24gdGhlIHBhcmVudCByZXNvdXJjZSB0aGlzIGNsYXNzIGlzIHJlZmVyZW5jaW5nXG4gICovXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcih0ZXJyYWZvcm1SZXNvdXJjZTogY2RrdGYuSUludGVycG9sYXRpbmdQYXJlbnQsIHRlcnJhZm9ybUF0dHJpYnV0ZTogc3RyaW5nKSB7XG4gICAgc3VwZXIodGVycmFmb3JtUmVzb3VyY2UsIHRlcnJhZm9ybUF0dHJpYnV0ZSwgZmFsc2UsIDApO1xuICB9XG5cbiAgcHVibGljIGdldCBpbnRlcm5hbFZhbHVlKCk6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNDb25kaXRpb25FeHByZXNzaW9uc0NvbmRpdGlvbnNDb25kaXRpb25zVmFsdWVUaW1lVmFsdWUgfCB1bmRlZmluZWQge1xuICAgIGxldCBoYXNBbnlWYWx1ZXMgPSB0aGlzLmlzRW1wdHlPYmplY3Q7XG4gICAgY29uc3QgaW50ZXJuYWxWYWx1ZVJlc3VsdDogYW55ID0ge307XG4gICAgaWYgKHRoaXMuX2hvdXJzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LmhvdXJzID0gdGhpcy5faG91cnM7XG4gICAgfVxuICAgIGlmICh0aGlzLl9taW51dGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0Lm1pbnV0ZXMgPSB0aGlzLl9taW51dGVzO1xuICAgIH1cbiAgICBpZiAodGhpcy5fbmFub3MgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQubmFub3MgPSB0aGlzLl9uYW5vcztcbiAgICB9XG4gICAgaWYgKHRoaXMuX3NlY29uZHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQuc2Vjb25kcyA9IHRoaXMuX3NlY29uZHM7XG4gICAgfVxuICAgIHJldHVybiBoYXNBbnlWYWx1ZXMgPyBpbnRlcm5hbFZhbHVlUmVzdWx0IDogdW5kZWZpbmVkO1xuICB9XG5cbiAgcHVibGljIHNldCBpbnRlcm5hbFZhbHVlKHZhbHVlOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zUmVjb3JkU3VwcHJlc3Npb25zQ29uZGl0aW9uRXhwcmVzc2lvbnNDb25kaXRpb25zQ29uZGl0aW9uc1ZhbHVlVGltZVZhbHVlIHwgdW5kZWZpbmVkKSB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IGZhbHNlO1xuICAgICAgdGhpcy5faG91cnMgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9taW51dGVzID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fbmFub3MgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9zZWNvbmRzID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggPT09IDA7XG4gICAgICB0aGlzLl9ob3VycyA9IHZhbHVlLmhvdXJzO1xuICAgICAgdGhpcy5fbWludXRlcyA9IHZhbHVlLm1pbnV0ZXM7XG4gICAgICB0aGlzLl9uYW5vcyA9IHZhbHVlLm5hbm9zO1xuICAgICAgdGhpcy5fc2Vjb25kcyA9IHZhbHVlLnNlY29uZHM7XG4gICAgfVxuICB9XG5cbiAgLy8gaG91cnMgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfaG91cnM/OiBudW1iZXI7IFxuICBwdWJsaWMgZ2V0IGhvdXJzKCkge1xuICAgIHJldHVybiB0aGlzLmdldE51bWJlckF0dHJpYnV0ZSgnaG91cnMnKTtcbiAgfVxuICBwdWJsaWMgc2V0IGhvdXJzKHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl9ob3VycyA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldEhvdXJzKCkge1xuICAgIHRoaXMuX2hvdXJzID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBob3Vyc0lucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9ob3VycztcbiAgfVxuXG4gIC8vIG1pbnV0ZXMgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfbWludXRlcz86IG51bWJlcjsgXG4gIHB1YmxpYyBnZXQgbWludXRlcygpIHtcbiAgICByZXR1cm4gdGhpcy5nZXROdW1iZXJBdHRyaWJ1dGUoJ21pbnV0ZXMnKTtcbiAgfVxuICBwdWJsaWMgc2V0IG1pbnV0ZXModmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX21pbnV0ZXMgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRNaW51dGVzKCkge1xuICAgIHRoaXMuX21pbnV0ZXMgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IG1pbnV0ZXNJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fbWludXRlcztcbiAgfVxuXG4gIC8vIG5hbm9zIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX25hbm9zPzogbnVtYmVyOyBcbiAgcHVibGljIGdldCBuYW5vcygpIHtcbiAgICByZXR1cm4gdGhpcy5nZXROdW1iZXJBdHRyaWJ1dGUoJ25hbm9zJyk7XG4gIH1cbiAgcHVibGljIHNldCBuYW5vcyh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5fbmFub3MgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXROYW5vcygpIHtcbiAgICB0aGlzLl9uYW5vcyA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgbmFub3NJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fbmFub3M7XG4gIH1cblxuICAvLyBzZWNvbmRzIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX3NlY29uZHM/OiBudW1iZXI7IFxuICBwdWJsaWMgZ2V0IHNlY29uZHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TnVtYmVyQXR0cmlidXRlKCdzZWNvbmRzJyk7XG4gIH1cbiAgcHVibGljIHNldCBzZWNvbmRzKHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl9zZWNvbmRzID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0U2Vjb25kcygpIHtcbiAgICB0aGlzLl9zZWNvbmRzID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBzZWNvbmRzSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NlY29uZHM7XG4gIH1cbn1cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc0NvbmRpdGlvbkV4cHJlc3Npb25zQ29uZGl0aW9uc0NvbmRpdGlvbnNWYWx1ZSB7XG4gIC8qKlxuICAqIEEgYm9vbGVhbiB2YWx1ZS5cbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjYm9vbGVhbl92YWx1ZSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjYm9vbGVhbl92YWx1ZX1cbiAgKi9cbiAgcmVhZG9ubHkgYm9vbGVhblZhbHVlPzogYm9vbGVhbiB8IGNka3RmLklSZXNvbHZhYmxlO1xuICAvKipcbiAgKiBSZXByZXNlbnRzIGEgZGF5IG9mIHRoZSB3ZWVrLiBQb3NzaWJsZSB2YWx1ZXM6IFtcIk1PTkRBWVwiLCBcIlRVRVNEQVlcIiwgXCJXRURORVNEQVlcIiwgXCJUSFVSU0RBWVwiLCBcIkZSSURBWVwiLCBcIlNBVFVSREFZXCIsIFwiU1VOREFZXCJdXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI2RheV9vZl93ZWVrX3ZhbHVlIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSNkYXlfb2Zfd2Vla192YWx1ZX1cbiAgKi9cbiAgcmVhZG9ubHkgZGF5T2ZXZWVrVmFsdWU/OiBzdHJpbmc7XG4gIC8qKlxuICAqIEEgZmxvYXQgdmFsdWUuXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI2Zsb2F0X3ZhbHVlIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSNmbG9hdF92YWx1ZX1cbiAgKi9cbiAgcmVhZG9ubHkgZmxvYXRWYWx1ZT86IG51bWJlcjtcbiAgLyoqXG4gICogQW4gaW50ZWdlciB2YWx1ZSAoaW50NjQgZm9ybWF0KVxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNpbnRlZ2VyX3ZhbHVlIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSNpbnRlZ2VyX3ZhbHVlfVxuICAqL1xuICByZWFkb25seSBpbnRlZ2VyVmFsdWU/OiBzdHJpbmc7XG4gIC8qKlxuICAqIEEgc3RyaW5nIHZhbHVlLlxuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNzdHJpbmdfdmFsdWUgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI3N0cmluZ192YWx1ZX1cbiAgKi9cbiAgcmVhZG9ubHkgc3RyaW5nVmFsdWU/OiBzdHJpbmc7XG4gIC8qKlxuICAqIEEgdGltZXN0YW1wIGluIFJGQzMzMzkgVVRDIFwiWnVsdVwiIGZvcm1hdCwgd2l0aCBuYW5vc2Vjb25kIHJlc29sdXRpb24gYW5kIHVwIHRvIG5pbmUgZnJhY3Rpb25hbCBkaWdpdHMuIEV4YW1wbGVzOiBcIjIwMTQtMTAtMDJUMTU6MDE6MjNaXCIgYW5kIFwiMjAxNC0xMC0wMlQxNTowMToyMy4wNDUxMjM0NTZaXCIuXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI3RpbWVzdGFtcF92YWx1ZSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjdGltZXN0YW1wX3ZhbHVlfVxuICAqL1xuICByZWFkb25seSB0aW1lc3RhbXBWYWx1ZT86IHN0cmluZztcbiAgLyoqXG4gICogZGF0ZV92YWx1ZSBibG9ja1xuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNkYXRlX3ZhbHVlIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSNkYXRlX3ZhbHVlfVxuICAqL1xuICByZWFkb25seSBkYXRlVmFsdWU/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zUmVjb3JkU3VwcHJlc3Npb25zQ29uZGl0aW9uRXhwcmVzc2lvbnNDb25kaXRpb25zQ29uZGl0aW9uc1ZhbHVlRGF0ZVZhbHVlO1xuICAvKipcbiAgKiB0aW1lX3ZhbHVlIGJsb2NrXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI3RpbWVfdmFsdWUgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI3RpbWVfdmFsdWV9XG4gICovXG4gIHJlYWRvbmx5IHRpbWVWYWx1ZT86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNDb25kaXRpb25FeHByZXNzaW9uc0NvbmRpdGlvbnNDb25kaXRpb25zVmFsdWVUaW1lVmFsdWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zUmVjb3JkU3VwcHJlc3Npb25zQ29uZGl0aW9uRXhwcmVzc2lvbnNDb25kaXRpb25zQ29uZGl0aW9uc1ZhbHVlVG9UZXJyYWZvcm0oc3RydWN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc0NvbmRpdGlvbkV4cHJlc3Npb25zQ29uZGl0aW9uc0NvbmRpdGlvbnNWYWx1ZU91dHB1dFJlZmVyZW5jZSB8IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNDb25kaXRpb25FeHByZXNzaW9uc0NvbmRpdGlvbnNDb25kaXRpb25zVmFsdWUpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIHJldHVybiB7XG4gICAgYm9vbGVhbl92YWx1ZTogY2RrdGYuYm9vbGVhblRvVGVycmFmb3JtKHN0cnVjdCEuYm9vbGVhblZhbHVlKSxcbiAgICBkYXlfb2Zfd2Vla192YWx1ZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5kYXlPZldlZWtWYWx1ZSksXG4gICAgZmxvYXRfdmFsdWU6IGNka3RmLm51bWJlclRvVGVycmFmb3JtKHN0cnVjdCEuZmxvYXRWYWx1ZSksXG4gICAgaW50ZWdlcl92YWx1ZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5pbnRlZ2VyVmFsdWUpLFxuICAgIHN0cmluZ192YWx1ZTogY2RrdGYuc3RyaW5nVG9UZXJyYWZvcm0oc3RydWN0IS5zdHJpbmdWYWx1ZSksXG4gICAgdGltZXN0YW1wX3ZhbHVlOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLnRpbWVzdGFtcFZhbHVlKSxcbiAgICBkYXRlX3ZhbHVlOiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zUmVjb3JkU3VwcHJlc3Npb25zQ29uZGl0aW9uRXhwcmVzc2lvbnNDb25kaXRpb25zQ29uZGl0aW9uc1ZhbHVlRGF0ZVZhbHVlVG9UZXJyYWZvcm0oc3RydWN0IS5kYXRlVmFsdWUpLFxuICAgIHRpbWVfdmFsdWU6IGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNDb25kaXRpb25FeHByZXNzaW9uc0NvbmRpdGlvbnNDb25kaXRpb25zVmFsdWVUaW1lVmFsdWVUb1RlcnJhZm9ybShzdHJ1Y3QhLnRpbWVWYWx1ZSksXG4gIH1cbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc0NvbmRpdGlvbkV4cHJlc3Npb25zQ29uZGl0aW9uc0NvbmRpdGlvbnNWYWx1ZVRvSGNsVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNDb25kaXRpb25FeHByZXNzaW9uc0NvbmRpdGlvbnNDb25kaXRpb25zVmFsdWVPdXRwdXRSZWZlcmVuY2UgfCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zUmVjb3JkU3VwcHJlc3Npb25zQ29uZGl0aW9uRXhwcmVzc2lvbnNDb25kaXRpb25zQ29uZGl0aW9uc1ZhbHVlKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkgfHwgY2RrdGYuVG9rZW5pemF0aW9uLmlzUmVzb2x2YWJsZShzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgaWYgKGNka3RmLmlzQ29tcGxleEVsZW1lbnQoc3RydWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkEgY29tcGxleCBlbGVtZW50IHdhcyB1c2VkIGFzIGNvbmZpZ3VyYXRpb24sIHRoaXMgaXMgbm90IHN1cHBvcnRlZDogaHR0cHM6Ly9jZGsudGYvY29tcGxleC1vYmplY3QtYXMtY29uZmlndXJhdGlvblwiKTtcbiAgfVxuICBjb25zdCBhdHRycyA9IHtcbiAgICBib29sZWFuX3ZhbHVlOiB7XG4gICAgICB2YWx1ZTogY2RrdGYuYm9vbGVhblRvSGNsVGVycmFmb3JtKHN0cnVjdCEuYm9vbGVhblZhbHVlKSxcbiAgICAgIGlzQmxvY2s6IGZhbHNlLFxuICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwiYm9vbGVhblwiLFxuICAgIH0sXG4gICAgZGF5X29mX3dlZWtfdmFsdWU6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5zdHJpbmdUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLmRheU9mV2Vla1ZhbHVlKSxcbiAgICAgIGlzQmxvY2s6IGZhbHNlLFxuICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwic3RyaW5nXCIsXG4gICAgfSxcbiAgICBmbG9hdF92YWx1ZToge1xuICAgICAgdmFsdWU6IGNka3RmLm51bWJlclRvSGNsVGVycmFmb3JtKHN0cnVjdCEuZmxvYXRWYWx1ZSksXG4gICAgICBpc0Jsb2NrOiBmYWxzZSxcbiAgICAgIHR5cGU6IFwic2ltcGxlXCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcIm51bWJlclwiLFxuICAgIH0sXG4gICAgaW50ZWdlcl92YWx1ZToge1xuICAgICAgdmFsdWU6IGNka3RmLnN0cmluZ1RvSGNsVGVycmFmb3JtKHN0cnVjdCEuaW50ZWdlclZhbHVlKSxcbiAgICAgIGlzQmxvY2s6IGZhbHNlLFxuICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwic3RyaW5nXCIsXG4gICAgfSxcbiAgICBzdHJpbmdfdmFsdWU6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5zdHJpbmdUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLnN0cmluZ1ZhbHVlKSxcbiAgICAgIGlzQmxvY2s6IGZhbHNlLFxuICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwic3RyaW5nXCIsXG4gICAgfSxcbiAgICB0aW1lc3RhbXBfdmFsdWU6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5zdHJpbmdUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLnRpbWVzdGFtcFZhbHVlKSxcbiAgICAgIGlzQmxvY2s6IGZhbHNlLFxuICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwic3RyaW5nXCIsXG4gICAgfSxcbiAgICBkYXRlX3ZhbHVlOiB7XG4gICAgICB2YWx1ZTogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc0NvbmRpdGlvbkV4cHJlc3Npb25zQ29uZGl0aW9uc0NvbmRpdGlvbnNWYWx1ZURhdGVWYWx1ZVRvSGNsVGVycmFmb3JtKHN0cnVjdCEuZGF0ZVZhbHVlKSxcbiAgICAgIGlzQmxvY2s6IHRydWUsXG4gICAgICB0eXBlOiBcImxpc3RcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwiRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc0NvbmRpdGlvbkV4cHJlc3Npb25zQ29uZGl0aW9uc0NvbmRpdGlvbnNWYWx1ZURhdGVWYWx1ZUxpc3RcIixcbiAgICB9LFxuICAgIHRpbWVfdmFsdWU6IHtcbiAgICAgIHZhbHVlOiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zUmVjb3JkU3VwcHJlc3Npb25zQ29uZGl0aW9uRXhwcmVzc2lvbnNDb25kaXRpb25zQ29uZGl0aW9uc1ZhbHVlVGltZVZhbHVlVG9IY2xUZXJyYWZvcm0oc3RydWN0IS50aW1lVmFsdWUpLFxuICAgICAgaXNCbG9jazogdHJ1ZSxcbiAgICAgIHR5cGU6IFwibGlzdFwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zUmVjb3JkU3VwcHJlc3Npb25zQ29uZGl0aW9uRXhwcmVzc2lvbnNDb25kaXRpb25zQ29uZGl0aW9uc1ZhbHVlVGltZVZhbHVlTGlzdFwiLFxuICAgIH0sXG4gIH07XG5cbiAgLy8gcmVtb3ZlIHVuZGVmaW5lZCBhdHRyaWJ1dGVzXG4gIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMoYXR0cnMpLmZpbHRlcigoW18sIHZhbHVlXSkgPT4gdmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZS52YWx1ZSAhPT0gdW5kZWZpbmVkKSk7XG59XG5cbmV4cG9ydCBjbGFzcyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zUmVjb3JkU3VwcHJlc3Npb25zQ29uZGl0aW9uRXhwcmVzc2lvbnNDb25kaXRpb25zQ29uZGl0aW9uc1ZhbHVlT3V0cHV0UmVmZXJlbmNlIGV4dGVuZHMgY2RrdGYuQ29tcGxleE9iamVjdCB7XG4gIHByaXZhdGUgaXNFbXB0eU9iamVjdCA9IGZhbHNlO1xuXG4gIC8qKlxuICAqIEBwYXJhbSB0ZXJyYWZvcm1SZXNvdXJjZSBUaGUgcGFyZW50IHJlc291cmNlXG4gICogQHBhcmFtIHRlcnJhZm9ybUF0dHJpYnV0ZSBUaGUgYXR0cmlidXRlIG9uIHRoZSBwYXJlbnQgcmVzb3VyY2UgdGhpcyBjbGFzcyBpcyByZWZlcmVuY2luZ1xuICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IodGVycmFmb3JtUmVzb3VyY2U6IGNka3RmLklJbnRlcnBvbGF0aW5nUGFyZW50LCB0ZXJyYWZvcm1BdHRyaWJ1dGU6IHN0cmluZykge1xuICAgIHN1cGVyKHRlcnJhZm9ybVJlc291cmNlLCB0ZXJyYWZvcm1BdHRyaWJ1dGUsIGZhbHNlLCAwKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgaW50ZXJuYWxWYWx1ZSgpOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zUmVjb3JkU3VwcHJlc3Npb25zQ29uZGl0aW9uRXhwcmVzc2lvbnNDb25kaXRpb25zQ29uZGl0aW9uc1ZhbHVlIHwgdW5kZWZpbmVkIHtcbiAgICBsZXQgaGFzQW55VmFsdWVzID0gdGhpcy5pc0VtcHR5T2JqZWN0O1xuICAgIGNvbnN0IGludGVybmFsVmFsdWVSZXN1bHQ6IGFueSA9IHt9O1xuICAgIGlmICh0aGlzLl9ib29sZWFuVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQuYm9vbGVhblZhbHVlID0gdGhpcy5fYm9vbGVhblZhbHVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5fZGF5T2ZXZWVrVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQuZGF5T2ZXZWVrVmFsdWUgPSB0aGlzLl9kYXlPZldlZWtWYWx1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2Zsb2F0VmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQuZmxvYXRWYWx1ZSA9IHRoaXMuX2Zsb2F0VmFsdWU7XG4gICAgfVxuICAgIGlmICh0aGlzLl9pbnRlZ2VyVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQuaW50ZWdlclZhbHVlID0gdGhpcy5faW50ZWdlclZhbHVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5fc3RyaW5nVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQuc3RyaW5nVmFsdWUgPSB0aGlzLl9zdHJpbmdWYWx1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3RpbWVzdGFtcFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LnRpbWVzdGFtcFZhbHVlID0gdGhpcy5fdGltZXN0YW1wVmFsdWU7XG4gICAgfVxuICAgIGlmICh0aGlzLl9kYXRlVmFsdWU/LmludGVybmFsVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQuZGF0ZVZhbHVlID0gdGhpcy5fZGF0ZVZhbHVlPy5pbnRlcm5hbFZhbHVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5fdGltZVZhbHVlPy5pbnRlcm5hbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LnRpbWVWYWx1ZSA9IHRoaXMuX3RpbWVWYWx1ZT8uaW50ZXJuYWxWYWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGhhc0FueVZhbHVlcyA/IGludGVybmFsVmFsdWVSZXN1bHQgOiB1bmRlZmluZWQ7XG4gIH1cblxuICBwdWJsaWMgc2V0IGludGVybmFsVmFsdWUodmFsdWU6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNDb25kaXRpb25FeHByZXNzaW9uc0NvbmRpdGlvbnNDb25kaXRpb25zVmFsdWUgfCB1bmRlZmluZWQpIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5pc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG4gICAgICB0aGlzLl9ib29sZWFuVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9kYXlPZldlZWtWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2Zsb2F0VmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9pbnRlZ2VyVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9zdHJpbmdWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX3RpbWVzdGFtcFZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fZGF0ZVZhbHVlLmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl90aW1lVmFsdWUuaW50ZXJuYWxWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLmlzRW1wdHlPYmplY3QgPSBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoID09PSAwO1xuICAgICAgdGhpcy5fYm9vbGVhblZhbHVlID0gdmFsdWUuYm9vbGVhblZhbHVlO1xuICAgICAgdGhpcy5fZGF5T2ZXZWVrVmFsdWUgPSB2YWx1ZS5kYXlPZldlZWtWYWx1ZTtcbiAgICAgIHRoaXMuX2Zsb2F0VmFsdWUgPSB2YWx1ZS5mbG9hdFZhbHVlO1xuICAgICAgdGhpcy5faW50ZWdlclZhbHVlID0gdmFsdWUuaW50ZWdlclZhbHVlO1xuICAgICAgdGhpcy5fc3RyaW5nVmFsdWUgPSB2YWx1ZS5zdHJpbmdWYWx1ZTtcbiAgICAgIHRoaXMuX3RpbWVzdGFtcFZhbHVlID0gdmFsdWUudGltZXN0YW1wVmFsdWU7XG4gICAgICB0aGlzLl9kYXRlVmFsdWUuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlLmRhdGVWYWx1ZTtcbiAgICAgIHRoaXMuX3RpbWVWYWx1ZS5pbnRlcm5hbFZhbHVlID0gdmFsdWUudGltZVZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIC8vIGJvb2xlYW5fdmFsdWUgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfYm9vbGVhblZhbHVlPzogYm9vbGVhbiB8IGNka3RmLklSZXNvbHZhYmxlOyBcbiAgcHVibGljIGdldCBib29sZWFuVmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0Qm9vbGVhbkF0dHJpYnV0ZSgnYm9vbGVhbl92YWx1ZScpO1xuICB9XG4gIHB1YmxpYyBzZXQgYm9vbGVhblZhbHVlKHZhbHVlOiBib29sZWFuIHwgY2RrdGYuSVJlc29sdmFibGUpIHtcbiAgICB0aGlzLl9ib29sZWFuVmFsdWUgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRCb29sZWFuVmFsdWUoKSB7XG4gICAgdGhpcy5fYm9vbGVhblZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBib29sZWFuVmFsdWVJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fYm9vbGVhblZhbHVlO1xuICB9XG5cbiAgLy8gZGF5X29mX3dlZWtfdmFsdWUgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfZGF5T2ZXZWVrVmFsdWU/OiBzdHJpbmc7IFxuICBwdWJsaWMgZ2V0IGRheU9mV2Vla1ZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgnZGF5X29mX3dlZWtfdmFsdWUnKTtcbiAgfVxuICBwdWJsaWMgc2V0IGRheU9mV2Vla1ZhbHVlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9kYXlPZldlZWtWYWx1ZSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldERheU9mV2Vla1ZhbHVlKCkge1xuICAgIHRoaXMuX2RheU9mV2Vla1ZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBkYXlPZldlZWtWYWx1ZUlucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9kYXlPZldlZWtWYWx1ZTtcbiAgfVxuXG4gIC8vIGZsb2F0X3ZhbHVlIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX2Zsb2F0VmFsdWU/OiBudW1iZXI7IFxuICBwdWJsaWMgZ2V0IGZsb2F0VmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TnVtYmVyQXR0cmlidXRlKCdmbG9hdF92YWx1ZScpO1xuICB9XG4gIHB1YmxpYyBzZXQgZmxvYXRWYWx1ZSh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5fZmxvYXRWYWx1ZSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldEZsb2F0VmFsdWUoKSB7XG4gICAgdGhpcy5fZmxvYXRWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgZmxvYXRWYWx1ZUlucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9mbG9hdFZhbHVlO1xuICB9XG5cbiAgLy8gaW50ZWdlcl92YWx1ZSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9pbnRlZ2VyVmFsdWU/OiBzdHJpbmc7IFxuICBwdWJsaWMgZ2V0IGludGVnZXJWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ2ludGVnZXJfdmFsdWUnKTtcbiAgfVxuICBwdWJsaWMgc2V0IGludGVnZXJWYWx1ZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5faW50ZWdlclZhbHVlID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0SW50ZWdlclZhbHVlKCkge1xuICAgIHRoaXMuX2ludGVnZXJWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgaW50ZWdlclZhbHVlSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ludGVnZXJWYWx1ZTtcbiAgfVxuXG4gIC8vIHN0cmluZ192YWx1ZSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9zdHJpbmdWYWx1ZT86IHN0cmluZzsgXG4gIHB1YmxpYyBnZXQgc3RyaW5nVmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCdzdHJpbmdfdmFsdWUnKTtcbiAgfVxuICBwdWJsaWMgc2V0IHN0cmluZ1ZhbHVlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9zdHJpbmdWYWx1ZSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldFN0cmluZ1ZhbHVlKCkge1xuICAgIHRoaXMuX3N0cmluZ1ZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBzdHJpbmdWYWx1ZUlucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9zdHJpbmdWYWx1ZTtcbiAgfVxuXG4gIC8vIHRpbWVzdGFtcF92YWx1ZSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF90aW1lc3RhbXBWYWx1ZT86IHN0cmluZzsgXG4gIHB1YmxpYyBnZXQgdGltZXN0YW1wVmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCd0aW1lc3RhbXBfdmFsdWUnKTtcbiAgfVxuICBwdWJsaWMgc2V0IHRpbWVzdGFtcFZhbHVlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl90aW1lc3RhbXBWYWx1ZSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldFRpbWVzdGFtcFZhbHVlKCkge1xuICAgIHRoaXMuX3RpbWVzdGFtcFZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCB0aW1lc3RhbXBWYWx1ZUlucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl90aW1lc3RhbXBWYWx1ZTtcbiAgfVxuXG4gIC8vIGRhdGVfdmFsdWUgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfZGF0ZVZhbHVlID0gbmV3IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNDb25kaXRpb25FeHByZXNzaW9uc0NvbmRpdGlvbnNDb25kaXRpb25zVmFsdWVEYXRlVmFsdWVPdXRwdXRSZWZlcmVuY2UodGhpcywgXCJkYXRlX3ZhbHVlXCIpO1xuICBwdWJsaWMgZ2V0IGRhdGVWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGF0ZVZhbHVlO1xuICB9XG4gIHB1YmxpYyBwdXREYXRlVmFsdWUodmFsdWU6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNDb25kaXRpb25FeHByZXNzaW9uc0NvbmRpdGlvbnNDb25kaXRpb25zVmFsdWVEYXRlVmFsdWUpIHtcbiAgICB0aGlzLl9kYXRlVmFsdWUuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldERhdGVWYWx1ZSgpIHtcbiAgICB0aGlzLl9kYXRlVmFsdWUuaW50ZXJuYWxWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgZGF0ZVZhbHVlSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGVWYWx1ZS5pbnRlcm5hbFZhbHVlO1xuICB9XG5cbiAgLy8gdGltZV92YWx1ZSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF90aW1lVmFsdWUgPSBuZXcgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc0NvbmRpdGlvbkV4cHJlc3Npb25zQ29uZGl0aW9uc0NvbmRpdGlvbnNWYWx1ZVRpbWVWYWx1ZU91dHB1dFJlZmVyZW5jZSh0aGlzLCBcInRpbWVfdmFsdWVcIik7XG4gIHB1YmxpYyBnZXQgdGltZVZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLl90aW1lVmFsdWU7XG4gIH1cbiAgcHVibGljIHB1dFRpbWVWYWx1ZSh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc0NvbmRpdGlvbkV4cHJlc3Npb25zQ29uZGl0aW9uc0NvbmRpdGlvbnNWYWx1ZVRpbWVWYWx1ZSkge1xuICAgIHRoaXMuX3RpbWVWYWx1ZS5pbnRlcm5hbFZhbHVlID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0VGltZVZhbHVlKCkge1xuICAgIHRoaXMuX3RpbWVWYWx1ZS5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCB0aW1lVmFsdWVJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fdGltZVZhbHVlLmludGVybmFsVmFsdWU7XG4gIH1cbn1cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc0NvbmRpdGlvbkV4cHJlc3Npb25zQ29uZGl0aW9uc0NvbmRpdGlvbnMge1xuICAvKipcbiAgKiBPcGVyYXRvciB1c2VkIHRvIGNvbXBhcmUgdGhlIGZpZWxkIG9yIGluZm9UeXBlIHRvIHRoZSB2YWx1ZS4gUG9zc2libGUgdmFsdWVzOiBbXCJFUVVBTF9UT1wiLCBcIk5PVF9FUVVBTF9UT1wiLCBcIkdSRUFURVJfVEhBTlwiLCBcIkxFU1NfVEhBTlwiLCBcIkdSRUFURVJfVEhBTl9PUl9FUVVBTFNcIiwgXCJMRVNTX1RIQU5fT1JfRVFVQUxTXCIsIFwiRVhJU1RTXCJdXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI29wZXJhdG9yIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSNvcGVyYXRvcn1cbiAgKi9cbiAgcmVhZG9ubHkgb3BlcmF0b3I6IHN0cmluZztcbiAgLyoqXG4gICogZmllbGQgYmxvY2tcbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjZmllbGQgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI2ZpZWxkfVxuICAqL1xuICByZWFkb25seSBmaWVsZDogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc0NvbmRpdGlvbkV4cHJlc3Npb25zQ29uZGl0aW9uc0NvbmRpdGlvbnNGaWVsZDtcbiAgLyoqXG4gICogdmFsdWUgYmxvY2tcbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjdmFsdWUgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI3ZhbHVlfVxuICAqL1xuICByZWFkb25seSB2YWx1ZT86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNDb25kaXRpb25FeHByZXNzaW9uc0NvbmRpdGlvbnNDb25kaXRpb25zVmFsdWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zUmVjb3JkU3VwcHJlc3Npb25zQ29uZGl0aW9uRXhwcmVzc2lvbnNDb25kaXRpb25zQ29uZGl0aW9uc1RvVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNDb25kaXRpb25FeHByZXNzaW9uc0NvbmRpdGlvbnNDb25kaXRpb25zIHwgY2RrdGYuSVJlc29sdmFibGUpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIHJldHVybiB7XG4gICAgb3BlcmF0b3I6IGNka3RmLnN0cmluZ1RvVGVycmFmb3JtKHN0cnVjdCEub3BlcmF0b3IpLFxuICAgIGZpZWxkOiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zUmVjb3JkU3VwcHJlc3Npb25zQ29uZGl0aW9uRXhwcmVzc2lvbnNDb25kaXRpb25zQ29uZGl0aW9uc0ZpZWxkVG9UZXJyYWZvcm0oc3RydWN0IS5maWVsZCksXG4gICAgdmFsdWU6IGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNDb25kaXRpb25FeHByZXNzaW9uc0NvbmRpdGlvbnNDb25kaXRpb25zVmFsdWVUb1RlcnJhZm9ybShzdHJ1Y3QhLnZhbHVlKSxcbiAgfVxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zUmVjb3JkU3VwcHJlc3Npb25zQ29uZGl0aW9uRXhwcmVzc2lvbnNDb25kaXRpb25zQ29uZGl0aW9uc1RvSGNsVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNDb25kaXRpb25FeHByZXNzaW9uc0NvbmRpdGlvbnNDb25kaXRpb25zIHwgY2RrdGYuSVJlc29sdmFibGUpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIGNvbnN0IGF0dHJzID0ge1xuICAgIG9wZXJhdG9yOiB7XG4gICAgICB2YWx1ZTogY2RrdGYuc3RyaW5nVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5vcGVyYXRvciksXG4gICAgICBpc0Jsb2NrOiBmYWxzZSxcbiAgICAgIHR5cGU6IFwic2ltcGxlXCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcInN0cmluZ1wiLFxuICAgIH0sXG4gICAgZmllbGQ6IHtcbiAgICAgIHZhbHVlOiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zUmVjb3JkU3VwcHJlc3Npb25zQ29uZGl0aW9uRXhwcmVzc2lvbnNDb25kaXRpb25zQ29uZGl0aW9uc0ZpZWxkVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5maWVsZCksXG4gICAgICBpc0Jsb2NrOiB0cnVlLFxuICAgICAgdHlwZTogXCJsaXN0XCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcIkRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNDb25kaXRpb25FeHByZXNzaW9uc0NvbmRpdGlvbnNDb25kaXRpb25zRmllbGRMaXN0XCIsXG4gICAgfSxcbiAgICB2YWx1ZToge1xuICAgICAgdmFsdWU6IGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNDb25kaXRpb25FeHByZXNzaW9uc0NvbmRpdGlvbnNDb25kaXRpb25zVmFsdWVUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLnZhbHVlKSxcbiAgICAgIGlzQmxvY2s6IHRydWUsXG4gICAgICB0eXBlOiBcImxpc3RcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwiRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc0NvbmRpdGlvbkV4cHJlc3Npb25zQ29uZGl0aW9uc0NvbmRpdGlvbnNWYWx1ZUxpc3RcIixcbiAgICB9LFxuICB9O1xuXG4gIC8vIHJlbW92ZSB1bmRlZmluZWQgYXR0cmlidXRlc1xuICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5lbnRyaWVzKGF0dHJzKS5maWx0ZXIoKFtfLCB2YWx1ZV0pID0+IHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUudmFsdWUgIT09IHVuZGVmaW5lZCkpO1xufVxuXG5leHBvcnQgY2xhc3MgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc0NvbmRpdGlvbkV4cHJlc3Npb25zQ29uZGl0aW9uc0NvbmRpdGlvbnNPdXRwdXRSZWZlcmVuY2UgZXh0ZW5kcyBjZGt0Zi5Db21wbGV4T2JqZWN0IHtcbiAgcHJpdmF0ZSBpc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG4gIHByaXZhdGUgcmVzb2x2YWJsZVZhbHVlPzogY2RrdGYuSVJlc29sdmFibGU7XG5cbiAgLyoqXG4gICogQHBhcmFtIHRlcnJhZm9ybVJlc291cmNlIFRoZSBwYXJlbnQgcmVzb3VyY2VcbiAgKiBAcGFyYW0gdGVycmFmb3JtQXR0cmlidXRlIFRoZSBhdHRyaWJ1dGUgb24gdGhlIHBhcmVudCByZXNvdXJjZSB0aGlzIGNsYXNzIGlzIHJlZmVyZW5jaW5nXG4gICogQHBhcmFtIGNvbXBsZXhPYmplY3RJbmRleCB0aGUgaW5kZXggb2YgdGhpcyBpdGVtIGluIHRoZSBsaXN0XG4gICogQHBhcmFtIGNvbXBsZXhPYmplY3RJc0Zyb21TZXQgd2hldGhlciB0aGUgbGlzdCBpcyB3cmFwcGluZyBhIHNldCAod2lsbCBhZGQgdG9saXN0KCkgdG8gYmUgYWJsZSB0byBhY2Nlc3MgYW4gaXRlbSB2aWEgYW4gaW5kZXgpXG4gICovXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcih0ZXJyYWZvcm1SZXNvdXJjZTogY2RrdGYuSUludGVycG9sYXRpbmdQYXJlbnQsIHRlcnJhZm9ybUF0dHJpYnV0ZTogc3RyaW5nLCBjb21wbGV4T2JqZWN0SW5kZXg6IG51bWJlciwgY29tcGxleE9iamVjdElzRnJvbVNldDogYm9vbGVhbikge1xuICAgIHN1cGVyKHRlcnJhZm9ybVJlc291cmNlLCB0ZXJyYWZvcm1BdHRyaWJ1dGUsIGNvbXBsZXhPYmplY3RJc0Zyb21TZXQsIGNvbXBsZXhPYmplY3RJbmRleCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGludGVybmFsVmFsdWUoKTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc0NvbmRpdGlvbkV4cHJlc3Npb25zQ29uZGl0aW9uc0NvbmRpdGlvbnMgfCBjZGt0Zi5JUmVzb2x2YWJsZSB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKHRoaXMucmVzb2x2YWJsZVZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXNvbHZhYmxlVmFsdWU7XG4gICAgfVxuICAgIGxldCBoYXNBbnlWYWx1ZXMgPSB0aGlzLmlzRW1wdHlPYmplY3Q7XG4gICAgY29uc3QgaW50ZXJuYWxWYWx1ZVJlc3VsdDogYW55ID0ge307XG4gICAgaWYgKHRoaXMuX29wZXJhdG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0Lm9wZXJhdG9yID0gdGhpcy5fb3BlcmF0b3I7XG4gICAgfVxuICAgIGlmICh0aGlzLl9maWVsZD8uaW50ZXJuYWxWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC5maWVsZCA9IHRoaXMuX2ZpZWxkPy5pbnRlcm5hbFZhbHVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5fdmFsdWU/LmludGVybmFsVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQudmFsdWUgPSB0aGlzLl92YWx1ZT8uaW50ZXJuYWxWYWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGhhc0FueVZhbHVlcyA/IGludGVybmFsVmFsdWVSZXN1bHQgOiB1bmRlZmluZWQ7XG4gIH1cblxuICBwdWJsaWMgc2V0IGludGVybmFsVmFsdWUodmFsdWU6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNDb25kaXRpb25FeHByZXNzaW9uc0NvbmRpdGlvbnNDb25kaXRpb25zIHwgY2RrdGYuSVJlc29sdmFibGUgfCB1bmRlZmluZWQpIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5pc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG4gICAgICB0aGlzLnJlc29sdmFibGVWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX29wZXJhdG9yID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fZmllbGQuaW50ZXJuYWxWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX3ZhbHVlLmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGVsc2UgaWYgKGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUodmFsdWUpKSB7XG4gICAgICB0aGlzLmlzRW1wdHlPYmplY3QgPSBmYWxzZTtcbiAgICAgIHRoaXMucmVzb2x2YWJsZVZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5pc0VtcHR5T2JqZWN0ID0gT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aCA9PT0gMDtcbiAgICAgIHRoaXMucmVzb2x2YWJsZVZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fb3BlcmF0b3IgPSB2YWx1ZS5vcGVyYXRvcjtcbiAgICAgIHRoaXMuX2ZpZWxkLmludGVybmFsVmFsdWUgPSB2YWx1ZS5maWVsZDtcbiAgICAgIHRoaXMuX3ZhbHVlLmludGVybmFsVmFsdWUgPSB2YWx1ZS52YWx1ZTtcbiAgICB9XG4gIH1cblxuICAvLyBvcGVyYXRvciAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IGZhbHNlLCByZXF1aXJlZDogdHJ1ZVxuICBwcml2YXRlIF9vcGVyYXRvcj86IHN0cmluZzsgXG4gIHB1YmxpYyBnZXQgb3BlcmF0b3IoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCdvcGVyYXRvcicpO1xuICB9XG4gIHB1YmxpYyBzZXQgb3BlcmF0b3IodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX29wZXJhdG9yID0gdmFsdWU7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IG9wZXJhdG9ySW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX29wZXJhdG9yO1xuICB9XG5cbiAgLy8gZmllbGQgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiBmYWxzZSwgcmVxdWlyZWQ6IHRydWVcbiAgcHJpdmF0ZSBfZmllbGQgPSBuZXcgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc0NvbmRpdGlvbkV4cHJlc3Npb25zQ29uZGl0aW9uc0NvbmRpdGlvbnNGaWVsZE91dHB1dFJlZmVyZW5jZSh0aGlzLCBcImZpZWxkXCIpO1xuICBwdWJsaWMgZ2V0IGZpZWxkKCkge1xuICAgIHJldHVybiB0aGlzLl9maWVsZDtcbiAgfVxuICBwdWJsaWMgcHV0RmllbGQodmFsdWU6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNDb25kaXRpb25FeHByZXNzaW9uc0NvbmRpdGlvbnNDb25kaXRpb25zRmllbGQpIHtcbiAgICB0aGlzLl9maWVsZC5pbnRlcm5hbFZhbHVlID0gdmFsdWU7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IGZpZWxkSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ZpZWxkLmludGVybmFsVmFsdWU7XG4gIH1cblxuICAvLyB2YWx1ZSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF92YWx1ZSA9IG5ldyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zUmVjb3JkU3VwcHJlc3Npb25zQ29uZGl0aW9uRXhwcmVzc2lvbnNDb25kaXRpb25zQ29uZGl0aW9uc1ZhbHVlT3V0cHV0UmVmZXJlbmNlKHRoaXMsIFwidmFsdWVcIik7XG4gIHB1YmxpYyBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG4gIHB1YmxpYyBwdXRWYWx1ZSh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc0NvbmRpdGlvbkV4cHJlc3Npb25zQ29uZGl0aW9uc0NvbmRpdGlvbnNWYWx1ZSkge1xuICAgIHRoaXMuX3ZhbHVlLmludGVybmFsVmFsdWUgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRWYWx1ZSgpIHtcbiAgICB0aGlzLl92YWx1ZS5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCB2YWx1ZUlucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZS5pbnRlcm5hbFZhbHVlO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zUmVjb3JkU3VwcHJlc3Npb25zQ29uZGl0aW9uRXhwcmVzc2lvbnNDb25kaXRpb25zQ29uZGl0aW9uc0xpc3QgZXh0ZW5kcyBjZGt0Zi5Db21wbGV4TGlzdCB7XG4gIHB1YmxpYyBpbnRlcm5hbFZhbHVlPyA6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNDb25kaXRpb25FeHByZXNzaW9uc0NvbmRpdGlvbnNDb25kaXRpb25zW10gfCBjZGt0Zi5JUmVzb2x2YWJsZVxuXG4gIC8qKlxuICAqIEBwYXJhbSB0ZXJyYWZvcm1SZXNvdXJjZSBUaGUgcGFyZW50IHJlc291cmNlXG4gICogQHBhcmFtIHRlcnJhZm9ybUF0dHJpYnV0ZSBUaGUgYXR0cmlidXRlIG9uIHRoZSBwYXJlbnQgcmVzb3VyY2UgdGhpcyBjbGFzcyBpcyByZWZlcmVuY2luZ1xuICAqIEBwYXJhbSB3cmFwc1NldCB3aGV0aGVyIHRoZSBsaXN0IGlzIHdyYXBwaW5nIGEgc2V0ICh3aWxsIGFkZCB0b2xpc3QoKSB0byBiZSBhYmxlIHRvIGFjY2VzcyBhbiBpdGVtIHZpYSBhbiBpbmRleClcbiAgKi9cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIHRlcnJhZm9ybVJlc291cmNlOiBjZGt0Zi5JSW50ZXJwb2xhdGluZ1BhcmVudCwgcHJvdGVjdGVkIHRlcnJhZm9ybUF0dHJpYnV0ZTogc3RyaW5nLCBwcm90ZWN0ZWQgd3JhcHNTZXQ6IGJvb2xlYW4pIHtcbiAgICBzdXBlcih0ZXJyYWZvcm1SZXNvdXJjZSwgdGVycmFmb3JtQXR0cmlidXRlLCB3cmFwc1NldClcbiAgfVxuXG4gIC8qKlxuICAqIEBwYXJhbSBpbmRleCB0aGUgaW5kZXggb2YgdGhlIGl0ZW0gdG8gcmV0dXJuXG4gICovXG4gIHB1YmxpYyBnZXQoaW5kZXg6IG51bWJlcik6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNDb25kaXRpb25FeHByZXNzaW9uc0NvbmRpdGlvbnNDb25kaXRpb25zT3V0cHV0UmVmZXJlbmNlIHtcbiAgICByZXR1cm4gbmV3IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNDb25kaXRpb25FeHByZXNzaW9uc0NvbmRpdGlvbnNDb25kaXRpb25zT3V0cHV0UmVmZXJlbmNlKHRoaXMudGVycmFmb3JtUmVzb3VyY2UsIHRoaXMudGVycmFmb3JtQXR0cmlidXRlLCBpbmRleCwgdGhpcy53cmFwc1NldCk7XG4gIH1cbn1cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc0NvbmRpdGlvbkV4cHJlc3Npb25zQ29uZGl0aW9ucyB7XG4gIC8qKlxuICAqIGNvbmRpdGlvbnMgYmxvY2tcbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjY29uZGl0aW9ucyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjY29uZGl0aW9uc31cbiAgKi9cbiAgcmVhZG9ubHkgY29uZGl0aW9ucz86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNDb25kaXRpb25FeHByZXNzaW9uc0NvbmRpdGlvbnNDb25kaXRpb25zW10gfCBjZGt0Zi5JUmVzb2x2YWJsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNDb25kaXRpb25FeHByZXNzaW9uc0NvbmRpdGlvbnNUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zUmVjb3JkU3VwcHJlc3Npb25zQ29uZGl0aW9uRXhwcmVzc2lvbnNDb25kaXRpb25zT3V0cHV0UmVmZXJlbmNlIHwgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc0NvbmRpdGlvbkV4cHJlc3Npb25zQ29uZGl0aW9ucyk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpIHx8IGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIGlmIChjZGt0Zi5pc0NvbXBsZXhFbGVtZW50KHN0cnVjdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGNvbXBsZXggZWxlbWVudCB3YXMgdXNlZCBhcyBjb25maWd1cmF0aW9uLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQ6IGh0dHBzOi8vY2RrLnRmL2NvbXBsZXgtb2JqZWN0LWFzLWNvbmZpZ3VyYXRpb25cIik7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBjb25kaXRpb25zOiBjZGt0Zi5saXN0TWFwcGVyKGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNDb25kaXRpb25FeHByZXNzaW9uc0NvbmRpdGlvbnNDb25kaXRpb25zVG9UZXJyYWZvcm0sIHRydWUpKHN0cnVjdCEuY29uZGl0aW9ucyksXG4gIH1cbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc0NvbmRpdGlvbkV4cHJlc3Npb25zQ29uZGl0aW9uc1RvSGNsVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNDb25kaXRpb25FeHByZXNzaW9uc0NvbmRpdGlvbnNPdXRwdXRSZWZlcmVuY2UgfCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zUmVjb3JkU3VwcHJlc3Npb25zQ29uZGl0aW9uRXhwcmVzc2lvbnNDb25kaXRpb25zKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkgfHwgY2RrdGYuVG9rZW5pemF0aW9uLmlzUmVzb2x2YWJsZShzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgaWYgKGNka3RmLmlzQ29tcGxleEVsZW1lbnQoc3RydWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkEgY29tcGxleCBlbGVtZW50IHdhcyB1c2VkIGFzIGNvbmZpZ3VyYXRpb24sIHRoaXMgaXMgbm90IHN1cHBvcnRlZDogaHR0cHM6Ly9jZGsudGYvY29tcGxleC1vYmplY3QtYXMtY29uZmlndXJhdGlvblwiKTtcbiAgfVxuICBjb25zdCBhdHRycyA9IHtcbiAgICBjb25kaXRpb25zOiB7XG4gICAgICB2YWx1ZTogY2RrdGYubGlzdE1hcHBlckhjbChkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zUmVjb3JkU3VwcHJlc3Npb25zQ29uZGl0aW9uRXhwcmVzc2lvbnNDb25kaXRpb25zQ29uZGl0aW9uc1RvSGNsVGVycmFmb3JtLCB0cnVlKShzdHJ1Y3QhLmNvbmRpdGlvbnMpLFxuICAgICAgaXNCbG9jazogdHJ1ZSxcbiAgICAgIHR5cGU6IFwibGlzdFwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zUmVjb3JkU3VwcHJlc3Npb25zQ29uZGl0aW9uRXhwcmVzc2lvbnNDb25kaXRpb25zQ29uZGl0aW9uc0xpc3RcIixcbiAgICB9LFxuICB9O1xuXG4gIC8vIHJlbW92ZSB1bmRlZmluZWQgYXR0cmlidXRlc1xuICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5lbnRyaWVzKGF0dHJzKS5maWx0ZXIoKFtfLCB2YWx1ZV0pID0+IHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUudmFsdWUgIT09IHVuZGVmaW5lZCkpO1xufVxuXG5leHBvcnQgY2xhc3MgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc0NvbmRpdGlvbkV4cHJlc3Npb25zQ29uZGl0aW9uc091dHB1dFJlZmVyZW5jZSBleHRlbmRzIGNka3RmLkNvbXBsZXhPYmplY3Qge1xuICBwcml2YXRlIGlzRW1wdHlPYmplY3QgPSBmYWxzZTtcblxuICAvKipcbiAgKiBAcGFyYW0gdGVycmFmb3JtUmVzb3VyY2UgVGhlIHBhcmVudCByZXNvdXJjZVxuICAqIEBwYXJhbSB0ZXJyYWZvcm1BdHRyaWJ1dGUgVGhlIGF0dHJpYnV0ZSBvbiB0aGUgcGFyZW50IHJlc291cmNlIHRoaXMgY2xhc3MgaXMgcmVmZXJlbmNpbmdcbiAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHRlcnJhZm9ybVJlc291cmNlOiBjZGt0Zi5JSW50ZXJwb2xhdGluZ1BhcmVudCwgdGVycmFmb3JtQXR0cmlidXRlOiBzdHJpbmcpIHtcbiAgICBzdXBlcih0ZXJyYWZvcm1SZXNvdXJjZSwgdGVycmFmb3JtQXR0cmlidXRlLCBmYWxzZSwgMCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGludGVybmFsVmFsdWUoKTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc0NvbmRpdGlvbkV4cHJlc3Npb25zQ29uZGl0aW9ucyB8IHVuZGVmaW5lZCB7XG4gICAgbGV0IGhhc0FueVZhbHVlcyA9IHRoaXMuaXNFbXB0eU9iamVjdDtcbiAgICBjb25zdCBpbnRlcm5hbFZhbHVlUmVzdWx0OiBhbnkgPSB7fTtcbiAgICBpZiAodGhpcy5fY29uZGl0aW9ucz8uaW50ZXJuYWxWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC5jb25kaXRpb25zID0gdGhpcy5fY29uZGl0aW9ucz8uaW50ZXJuYWxWYWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGhhc0FueVZhbHVlcyA/IGludGVybmFsVmFsdWVSZXN1bHQgOiB1bmRlZmluZWQ7XG4gIH1cblxuICBwdWJsaWMgc2V0IGludGVybmFsVmFsdWUodmFsdWU6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNDb25kaXRpb25FeHByZXNzaW9uc0NvbmRpdGlvbnMgfCB1bmRlZmluZWQpIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5pc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG4gICAgICB0aGlzLl9jb25kaXRpb25zLmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5pc0VtcHR5T2JqZWN0ID0gT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aCA9PT0gMDtcbiAgICAgIHRoaXMuX2NvbmRpdGlvbnMuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlLmNvbmRpdGlvbnM7XG4gICAgfVxuICB9XG5cbiAgLy8gY29uZGl0aW9ucyAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9jb25kaXRpb25zID0gbmV3IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNDb25kaXRpb25FeHByZXNzaW9uc0NvbmRpdGlvbnNDb25kaXRpb25zTGlzdCh0aGlzLCBcImNvbmRpdGlvbnNcIiwgZmFsc2UpO1xuICBwdWJsaWMgZ2V0IGNvbmRpdGlvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbmRpdGlvbnM7XG4gIH1cbiAgcHVibGljIHB1dENvbmRpdGlvbnModmFsdWU6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNDb25kaXRpb25FeHByZXNzaW9uc0NvbmRpdGlvbnNDb25kaXRpb25zW10gfCBjZGt0Zi5JUmVzb2x2YWJsZSkge1xuICAgIHRoaXMuX2NvbmRpdGlvbnMuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldENvbmRpdGlvbnMoKSB7XG4gICAgdGhpcy5fY29uZGl0aW9ucy5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBjb25kaXRpb25zSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbmRpdGlvbnMuaW50ZXJuYWxWYWx1ZTtcbiAgfVxufVxuZXhwb3J0IGludGVyZmFjZSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zUmVjb3JkU3VwcHJlc3Npb25zQ29uZGl0aW9uRXhwcmVzc2lvbnMge1xuICAvKipcbiAgKiBUaGUgb3BlcmF0b3IgdG8gYXBwbHkgdG8gdGhlIHJlc3VsdCBvZiBjb25kaXRpb25zLiBEZWZhdWx0IGFuZCBjdXJyZW50bHkgb25seSBzdXBwb3J0ZWQgdmFsdWUgaXMgQU5ELiBEZWZhdWx0IHZhbHVlOiBcIkFORFwiIFBvc3NpYmxlIHZhbHVlczogW1wiQU5EXCJdXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI2xvZ2ljYWxfb3BlcmF0b3IgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI2xvZ2ljYWxfb3BlcmF0b3J9XG4gICovXG4gIHJlYWRvbmx5IGxvZ2ljYWxPcGVyYXRvcj86IHN0cmluZztcbiAgLyoqXG4gICogY29uZGl0aW9ucyBibG9ja1xuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNjb25kaXRpb25zIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSNjb25kaXRpb25zfVxuICAqL1xuICByZWFkb25seSBjb25kaXRpb25zPzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc0NvbmRpdGlvbkV4cHJlc3Npb25zQ29uZGl0aW9ucztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNDb25kaXRpb25FeHByZXNzaW9uc1RvVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNDb25kaXRpb25FeHByZXNzaW9uc091dHB1dFJlZmVyZW5jZSB8IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNDb25kaXRpb25FeHByZXNzaW9ucyk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpIHx8IGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIGlmIChjZGt0Zi5pc0NvbXBsZXhFbGVtZW50KHN0cnVjdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGNvbXBsZXggZWxlbWVudCB3YXMgdXNlZCBhcyBjb25maWd1cmF0aW9uLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQ6IGh0dHBzOi8vY2RrLnRmL2NvbXBsZXgtb2JqZWN0LWFzLWNvbmZpZ3VyYXRpb25cIik7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBsb2dpY2FsX29wZXJhdG9yOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLmxvZ2ljYWxPcGVyYXRvciksXG4gICAgY29uZGl0aW9uczogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc0NvbmRpdGlvbkV4cHJlc3Npb25zQ29uZGl0aW9uc1RvVGVycmFmb3JtKHN0cnVjdCEuY29uZGl0aW9ucyksXG4gIH1cbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc0NvbmRpdGlvbkV4cHJlc3Npb25zVG9IY2xUZXJyYWZvcm0oc3RydWN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc0NvbmRpdGlvbkV4cHJlc3Npb25zT3V0cHV0UmVmZXJlbmNlIHwgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc0NvbmRpdGlvbkV4cHJlc3Npb25zKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkgfHwgY2RrdGYuVG9rZW5pemF0aW9uLmlzUmVzb2x2YWJsZShzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgaWYgKGNka3RmLmlzQ29tcGxleEVsZW1lbnQoc3RydWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkEgY29tcGxleCBlbGVtZW50IHdhcyB1c2VkIGFzIGNvbmZpZ3VyYXRpb24sIHRoaXMgaXMgbm90IHN1cHBvcnRlZDogaHR0cHM6Ly9jZGsudGYvY29tcGxleC1vYmplY3QtYXMtY29uZmlndXJhdGlvblwiKTtcbiAgfVxuICBjb25zdCBhdHRycyA9IHtcbiAgICBsb2dpY2FsX29wZXJhdG9yOiB7XG4gICAgICB2YWx1ZTogY2RrdGYuc3RyaW5nVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5sb2dpY2FsT3BlcmF0b3IpLFxuICAgICAgaXNCbG9jazogZmFsc2UsXG4gICAgICB0eXBlOiBcInNpbXBsZVwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJzdHJpbmdcIixcbiAgICB9LFxuICAgIGNvbmRpdGlvbnM6IHtcbiAgICAgIHZhbHVlOiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zUmVjb3JkU3VwcHJlc3Npb25zQ29uZGl0aW9uRXhwcmVzc2lvbnNDb25kaXRpb25zVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5jb25kaXRpb25zKSxcbiAgICAgIGlzQmxvY2s6IHRydWUsXG4gICAgICB0eXBlOiBcImxpc3RcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwiRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc0NvbmRpdGlvbkV4cHJlc3Npb25zQ29uZGl0aW9uc0xpc3RcIixcbiAgICB9LFxuICB9O1xuXG4gIC8vIHJlbW92ZSB1bmRlZmluZWQgYXR0cmlidXRlc1xuICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5lbnRyaWVzKGF0dHJzKS5maWx0ZXIoKFtfLCB2YWx1ZV0pID0+IHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUudmFsdWUgIT09IHVuZGVmaW5lZCkpO1xufVxuXG5leHBvcnQgY2xhc3MgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc0NvbmRpdGlvbkV4cHJlc3Npb25zT3V0cHV0UmVmZXJlbmNlIGV4dGVuZHMgY2RrdGYuQ29tcGxleE9iamVjdCB7XG4gIHByaXZhdGUgaXNFbXB0eU9iamVjdCA9IGZhbHNlO1xuXG4gIC8qKlxuICAqIEBwYXJhbSB0ZXJyYWZvcm1SZXNvdXJjZSBUaGUgcGFyZW50IHJlc291cmNlXG4gICogQHBhcmFtIHRlcnJhZm9ybUF0dHJpYnV0ZSBUaGUgYXR0cmlidXRlIG9uIHRoZSBwYXJlbnQgcmVzb3VyY2UgdGhpcyBjbGFzcyBpcyByZWZlcmVuY2luZ1xuICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IodGVycmFmb3JtUmVzb3VyY2U6IGNka3RmLklJbnRlcnBvbGF0aW5nUGFyZW50LCB0ZXJyYWZvcm1BdHRyaWJ1dGU6IHN0cmluZykge1xuICAgIHN1cGVyKHRlcnJhZm9ybVJlc291cmNlLCB0ZXJyYWZvcm1BdHRyaWJ1dGUsIGZhbHNlLCAwKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgaW50ZXJuYWxWYWx1ZSgpOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zUmVjb3JkU3VwcHJlc3Npb25zQ29uZGl0aW9uRXhwcmVzc2lvbnMgfCB1bmRlZmluZWQge1xuICAgIGxldCBoYXNBbnlWYWx1ZXMgPSB0aGlzLmlzRW1wdHlPYmplY3Q7XG4gICAgY29uc3QgaW50ZXJuYWxWYWx1ZVJlc3VsdDogYW55ID0ge307XG4gICAgaWYgKHRoaXMuX2xvZ2ljYWxPcGVyYXRvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC5sb2dpY2FsT3BlcmF0b3IgPSB0aGlzLl9sb2dpY2FsT3BlcmF0b3I7XG4gICAgfVxuICAgIGlmICh0aGlzLl9jb25kaXRpb25zPy5pbnRlcm5hbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LmNvbmRpdGlvbnMgPSB0aGlzLl9jb25kaXRpb25zPy5pbnRlcm5hbFZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gaGFzQW55VmFsdWVzID8gaW50ZXJuYWxWYWx1ZVJlc3VsdCA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgaW50ZXJuYWxWYWx1ZSh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc0NvbmRpdGlvbkV4cHJlc3Npb25zIHwgdW5kZWZpbmVkKSB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IGZhbHNlO1xuICAgICAgdGhpcy5fbG9naWNhbE9wZXJhdG9yID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fY29uZGl0aW9ucy5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggPT09IDA7XG4gICAgICB0aGlzLl9sb2dpY2FsT3BlcmF0b3IgPSB2YWx1ZS5sb2dpY2FsT3BlcmF0b3I7XG4gICAgICB0aGlzLl9jb25kaXRpb25zLmludGVybmFsVmFsdWUgPSB2YWx1ZS5jb25kaXRpb25zO1xuICAgIH1cbiAgfVxuXG4gIC8vIGxvZ2ljYWxfb3BlcmF0b3IgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfbG9naWNhbE9wZXJhdG9yPzogc3RyaW5nOyBcbiAgcHVibGljIGdldCBsb2dpY2FsT3BlcmF0b3IoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCdsb2dpY2FsX29wZXJhdG9yJyk7XG4gIH1cbiAgcHVibGljIHNldCBsb2dpY2FsT3BlcmF0b3IodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX2xvZ2ljYWxPcGVyYXRvciA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldExvZ2ljYWxPcGVyYXRvcigpIHtcbiAgICB0aGlzLl9sb2dpY2FsT3BlcmF0b3IgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IGxvZ2ljYWxPcGVyYXRvcklucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9sb2dpY2FsT3BlcmF0b3I7XG4gIH1cblxuICAvLyBjb25kaXRpb25zIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX2NvbmRpdGlvbnMgPSBuZXcgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc0NvbmRpdGlvbkV4cHJlc3Npb25zQ29uZGl0aW9uc091dHB1dFJlZmVyZW5jZSh0aGlzLCBcImNvbmRpdGlvbnNcIik7XG4gIHB1YmxpYyBnZXQgY29uZGl0aW9ucygpIHtcbiAgICByZXR1cm4gdGhpcy5fY29uZGl0aW9ucztcbiAgfVxuICBwdWJsaWMgcHV0Q29uZGl0aW9ucyh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc0NvbmRpdGlvbkV4cHJlc3Npb25zQ29uZGl0aW9ucykge1xuICAgIHRoaXMuX2NvbmRpdGlvbnMuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldENvbmRpdGlvbnMoKSB7XG4gICAgdGhpcy5fY29uZGl0aW9ucy5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBjb25kaXRpb25zSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbmRpdGlvbnMuaW50ZXJuYWxWYWx1ZTtcbiAgfVxufVxuZXhwb3J0IGludGVyZmFjZSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zUmVjb3JkU3VwcHJlc3Npb25zQ29uZGl0aW9uIHtcbiAgLyoqXG4gICogZXhwcmVzc2lvbnMgYmxvY2tcbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjZXhwcmVzc2lvbnMgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI2V4cHJlc3Npb25zfVxuICAqL1xuICByZWFkb25seSBleHByZXNzaW9ucz86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNDb25kaXRpb25FeHByZXNzaW9ucztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNDb25kaXRpb25Ub1RlcnJhZm9ybShzdHJ1Y3Q/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zUmVjb3JkU3VwcHJlc3Npb25zQ29uZGl0aW9uT3V0cHV0UmVmZXJlbmNlIHwgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc0NvbmRpdGlvbik6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpIHx8IGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIGlmIChjZGt0Zi5pc0NvbXBsZXhFbGVtZW50KHN0cnVjdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGNvbXBsZXggZWxlbWVudCB3YXMgdXNlZCBhcyBjb25maWd1cmF0aW9uLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQ6IGh0dHBzOi8vY2RrLnRmL2NvbXBsZXgtb2JqZWN0LWFzLWNvbmZpZ3VyYXRpb25cIik7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBleHByZXNzaW9uczogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc0NvbmRpdGlvbkV4cHJlc3Npb25zVG9UZXJyYWZvcm0oc3RydWN0IS5leHByZXNzaW9ucyksXG4gIH1cbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc0NvbmRpdGlvblRvSGNsVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNDb25kaXRpb25PdXRwdXRSZWZlcmVuY2UgfCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zUmVjb3JkU3VwcHJlc3Npb25zQ29uZGl0aW9uKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkgfHwgY2RrdGYuVG9rZW5pemF0aW9uLmlzUmVzb2x2YWJsZShzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgaWYgKGNka3RmLmlzQ29tcGxleEVsZW1lbnQoc3RydWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkEgY29tcGxleCBlbGVtZW50IHdhcyB1c2VkIGFzIGNvbmZpZ3VyYXRpb24sIHRoaXMgaXMgbm90IHN1cHBvcnRlZDogaHR0cHM6Ly9jZGsudGYvY29tcGxleC1vYmplY3QtYXMtY29uZmlndXJhdGlvblwiKTtcbiAgfVxuICBjb25zdCBhdHRycyA9IHtcbiAgICBleHByZXNzaW9uczoge1xuICAgICAgdmFsdWU6IGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNDb25kaXRpb25FeHByZXNzaW9uc1RvSGNsVGVycmFmb3JtKHN0cnVjdCEuZXhwcmVzc2lvbnMpLFxuICAgICAgaXNCbG9jazogdHJ1ZSxcbiAgICAgIHR5cGU6IFwibGlzdFwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zUmVjb3JkU3VwcHJlc3Npb25zQ29uZGl0aW9uRXhwcmVzc2lvbnNMaXN0XCIsXG4gICAgfSxcbiAgfTtcblxuICAvLyByZW1vdmUgdW5kZWZpbmVkIGF0dHJpYnV0ZXNcbiAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhhdHRycykuZmlsdGVyKChbXywgdmFsdWVdKSA9PiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlLnZhbHVlICE9PSB1bmRlZmluZWQpKTtcbn1cblxuZXhwb3J0IGNsYXNzIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNDb25kaXRpb25PdXRwdXRSZWZlcmVuY2UgZXh0ZW5kcyBjZGt0Zi5Db21wbGV4T2JqZWN0IHtcbiAgcHJpdmF0ZSBpc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG5cbiAgLyoqXG4gICogQHBhcmFtIHRlcnJhZm9ybVJlc291cmNlIFRoZSBwYXJlbnQgcmVzb3VyY2VcbiAgKiBAcGFyYW0gdGVycmFmb3JtQXR0cmlidXRlIFRoZSBhdHRyaWJ1dGUgb24gdGhlIHBhcmVudCByZXNvdXJjZSB0aGlzIGNsYXNzIGlzIHJlZmVyZW5jaW5nXG4gICovXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcih0ZXJyYWZvcm1SZXNvdXJjZTogY2RrdGYuSUludGVycG9sYXRpbmdQYXJlbnQsIHRlcnJhZm9ybUF0dHJpYnV0ZTogc3RyaW5nKSB7XG4gICAgc3VwZXIodGVycmFmb3JtUmVzb3VyY2UsIHRlcnJhZm9ybUF0dHJpYnV0ZSwgZmFsc2UsIDApO1xuICB9XG5cbiAgcHVibGljIGdldCBpbnRlcm5hbFZhbHVlKCk6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNDb25kaXRpb24gfCB1bmRlZmluZWQge1xuICAgIGxldCBoYXNBbnlWYWx1ZXMgPSB0aGlzLmlzRW1wdHlPYmplY3Q7XG4gICAgY29uc3QgaW50ZXJuYWxWYWx1ZVJlc3VsdDogYW55ID0ge307XG4gICAgaWYgKHRoaXMuX2V4cHJlc3Npb25zPy5pbnRlcm5hbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LmV4cHJlc3Npb25zID0gdGhpcy5fZXhwcmVzc2lvbnM/LmludGVybmFsVmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBoYXNBbnlWYWx1ZXMgPyBpbnRlcm5hbFZhbHVlUmVzdWx0IDogdW5kZWZpbmVkO1xuICB9XG5cbiAgcHVibGljIHNldCBpbnRlcm5hbFZhbHVlKHZhbHVlOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zUmVjb3JkU3VwcHJlc3Npb25zQ29uZGl0aW9uIHwgdW5kZWZpbmVkKSB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IGZhbHNlO1xuICAgICAgdGhpcy5fZXhwcmVzc2lvbnMuaW50ZXJuYWxWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLmlzRW1wdHlPYmplY3QgPSBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoID09PSAwO1xuICAgICAgdGhpcy5fZXhwcmVzc2lvbnMuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlLmV4cHJlc3Npb25zO1xuICAgIH1cbiAgfVxuXG4gIC8vIGV4cHJlc3Npb25zIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX2V4cHJlc3Npb25zID0gbmV3IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNDb25kaXRpb25FeHByZXNzaW9uc091dHB1dFJlZmVyZW5jZSh0aGlzLCBcImV4cHJlc3Npb25zXCIpO1xuICBwdWJsaWMgZ2V0IGV4cHJlc3Npb25zKCkge1xuICAgIHJldHVybiB0aGlzLl9leHByZXNzaW9ucztcbiAgfVxuICBwdWJsaWMgcHV0RXhwcmVzc2lvbnModmFsdWU6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNDb25kaXRpb25FeHByZXNzaW9ucykge1xuICAgIHRoaXMuX2V4cHJlc3Npb25zLmludGVybmFsVmFsdWUgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRFeHByZXNzaW9ucygpIHtcbiAgICB0aGlzLl9leHByZXNzaW9ucy5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBleHByZXNzaW9uc0lucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9leHByZXNzaW9ucy5pbnRlcm5hbFZhbHVlO1xuICB9XG59XG5leHBvcnQgaW50ZXJmYWNlIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnMge1xuICAvKipcbiAgKiBjb25kaXRpb24gYmxvY2tcbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjY29uZGl0aW9uIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSNjb25kaXRpb259XG4gICovXG4gIHJlYWRvbmx5IGNvbmRpdGlvbj86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNDb25kaXRpb247XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zUmVjb3JkU3VwcHJlc3Npb25zVG9UZXJyYWZvcm0oc3RydWN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9ucyB8IGNka3RmLklSZXNvbHZhYmxlKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkgfHwgY2RrdGYuVG9rZW5pemF0aW9uLmlzUmVzb2x2YWJsZShzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgaWYgKGNka3RmLmlzQ29tcGxleEVsZW1lbnQoc3RydWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkEgY29tcGxleCBlbGVtZW50IHdhcyB1c2VkIGFzIGNvbmZpZ3VyYXRpb24sIHRoaXMgaXMgbm90IHN1cHBvcnRlZDogaHR0cHM6Ly9jZGsudGYvY29tcGxleC1vYmplY3QtYXMtY29uZmlndXJhdGlvblwiKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGNvbmRpdGlvbjogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc0NvbmRpdGlvblRvVGVycmFmb3JtKHN0cnVjdCEuY29uZGl0aW9uKSxcbiAgfVxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zUmVjb3JkU3VwcHJlc3Npb25zVG9IY2xUZXJyYWZvcm0oc3RydWN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9ucyB8IGNka3RmLklSZXNvbHZhYmxlKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkgfHwgY2RrdGYuVG9rZW5pemF0aW9uLmlzUmVzb2x2YWJsZShzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgaWYgKGNka3RmLmlzQ29tcGxleEVsZW1lbnQoc3RydWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkEgY29tcGxleCBlbGVtZW50IHdhcyB1c2VkIGFzIGNvbmZpZ3VyYXRpb24sIHRoaXMgaXMgbm90IHN1cHBvcnRlZDogaHR0cHM6Ly9jZGsudGYvY29tcGxleC1vYmplY3QtYXMtY29uZmlndXJhdGlvblwiKTtcbiAgfVxuICBjb25zdCBhdHRycyA9IHtcbiAgICBjb25kaXRpb246IHtcbiAgICAgIHZhbHVlOiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zUmVjb3JkU3VwcHJlc3Npb25zQ29uZGl0aW9uVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5jb25kaXRpb24pLFxuICAgICAgaXNCbG9jazogdHJ1ZSxcbiAgICAgIHR5cGU6IFwibGlzdFwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zUmVjb3JkU3VwcHJlc3Npb25zQ29uZGl0aW9uTGlzdFwiLFxuICAgIH0sXG4gIH07XG5cbiAgLy8gcmVtb3ZlIHVuZGVmaW5lZCBhdHRyaWJ1dGVzXG4gIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMoYXR0cnMpLmZpbHRlcigoW18sIHZhbHVlXSkgPT4gdmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZS52YWx1ZSAhPT0gdW5kZWZpbmVkKSk7XG59XG5cbmV4cG9ydCBjbGFzcyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zUmVjb3JkU3VwcHJlc3Npb25zT3V0cHV0UmVmZXJlbmNlIGV4dGVuZHMgY2RrdGYuQ29tcGxleE9iamVjdCB7XG4gIHByaXZhdGUgaXNFbXB0eU9iamVjdCA9IGZhbHNlO1xuICBwcml2YXRlIHJlc29sdmFibGVWYWx1ZT86IGNka3RmLklSZXNvbHZhYmxlO1xuXG4gIC8qKlxuICAqIEBwYXJhbSB0ZXJyYWZvcm1SZXNvdXJjZSBUaGUgcGFyZW50IHJlc291cmNlXG4gICogQHBhcmFtIHRlcnJhZm9ybUF0dHJpYnV0ZSBUaGUgYXR0cmlidXRlIG9uIHRoZSBwYXJlbnQgcmVzb3VyY2UgdGhpcyBjbGFzcyBpcyByZWZlcmVuY2luZ1xuICAqIEBwYXJhbSBjb21wbGV4T2JqZWN0SW5kZXggdGhlIGluZGV4IG9mIHRoaXMgaXRlbSBpbiB0aGUgbGlzdFxuICAqIEBwYXJhbSBjb21wbGV4T2JqZWN0SXNGcm9tU2V0IHdoZXRoZXIgdGhlIGxpc3QgaXMgd3JhcHBpbmcgYSBzZXQgKHdpbGwgYWRkIHRvbGlzdCgpIHRvIGJlIGFibGUgdG8gYWNjZXNzIGFuIGl0ZW0gdmlhIGFuIGluZGV4KVxuICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IodGVycmFmb3JtUmVzb3VyY2U6IGNka3RmLklJbnRlcnBvbGF0aW5nUGFyZW50LCB0ZXJyYWZvcm1BdHRyaWJ1dGU6IHN0cmluZywgY29tcGxleE9iamVjdEluZGV4OiBudW1iZXIsIGNvbXBsZXhPYmplY3RJc0Zyb21TZXQ6IGJvb2xlYW4pIHtcbiAgICBzdXBlcih0ZXJyYWZvcm1SZXNvdXJjZSwgdGVycmFmb3JtQXR0cmlidXRlLCBjb21wbGV4T2JqZWN0SXNGcm9tU2V0LCBjb21wbGV4T2JqZWN0SW5kZXgpO1xuICB9XG5cbiAgcHVibGljIGdldCBpbnRlcm5hbFZhbHVlKCk6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnMgfCBjZGt0Zi5JUmVzb2x2YWJsZSB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKHRoaXMucmVzb2x2YWJsZVZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXNvbHZhYmxlVmFsdWU7XG4gICAgfVxuICAgIGxldCBoYXNBbnlWYWx1ZXMgPSB0aGlzLmlzRW1wdHlPYmplY3Q7XG4gICAgY29uc3QgaW50ZXJuYWxWYWx1ZVJlc3VsdDogYW55ID0ge307XG4gICAgaWYgKHRoaXMuX2NvbmRpdGlvbj8uaW50ZXJuYWxWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC5jb25kaXRpb24gPSB0aGlzLl9jb25kaXRpb24/LmludGVybmFsVmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBoYXNBbnlWYWx1ZXMgPyBpbnRlcm5hbFZhbHVlUmVzdWx0IDogdW5kZWZpbmVkO1xuICB9XG5cbiAgcHVibGljIHNldCBpbnRlcm5hbFZhbHVlKHZhbHVlOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zUmVjb3JkU3VwcHJlc3Npb25zIHwgY2RrdGYuSVJlc29sdmFibGUgfCB1bmRlZmluZWQpIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5pc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG4gICAgICB0aGlzLnJlc29sdmFibGVWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2NvbmRpdGlvbi5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBlbHNlIGlmIChjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHZhbHVlKSkge1xuICAgICAgdGhpcy5pc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG4gICAgICB0aGlzLnJlc29sdmFibGVWYWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggPT09IDA7XG4gICAgICB0aGlzLnJlc29sdmFibGVWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2NvbmRpdGlvbi5pbnRlcm5hbFZhbHVlID0gdmFsdWUuY29uZGl0aW9uO1xuICAgIH1cbiAgfVxuXG4gIC8vIGNvbmRpdGlvbiAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9jb25kaXRpb24gPSBuZXcgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc0NvbmRpdGlvbk91dHB1dFJlZmVyZW5jZSh0aGlzLCBcImNvbmRpdGlvblwiKTtcbiAgcHVibGljIGdldCBjb25kaXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbmRpdGlvbjtcbiAgfVxuICBwdWJsaWMgcHV0Q29uZGl0aW9uKHZhbHVlOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zUmVjb3JkU3VwcHJlc3Npb25zQ29uZGl0aW9uKSB7XG4gICAgdGhpcy5fY29uZGl0aW9uLmludGVybmFsVmFsdWUgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRDb25kaXRpb24oKSB7XG4gICAgdGhpcy5fY29uZGl0aW9uLmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IGNvbmRpdGlvbklucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9jb25kaXRpb24uaW50ZXJuYWxWYWx1ZTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc0xpc3QgZXh0ZW5kcyBjZGt0Zi5Db21wbGV4TGlzdCB7XG4gIHB1YmxpYyBpbnRlcm5hbFZhbHVlPyA6IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNbXSB8IGNka3RmLklSZXNvbHZhYmxlXG5cbiAgLyoqXG4gICogQHBhcmFtIHRlcnJhZm9ybVJlc291cmNlIFRoZSBwYXJlbnQgcmVzb3VyY2VcbiAgKiBAcGFyYW0gdGVycmFmb3JtQXR0cmlidXRlIFRoZSBhdHRyaWJ1dGUgb24gdGhlIHBhcmVudCByZXNvdXJjZSB0aGlzIGNsYXNzIGlzIHJlZmVyZW5jaW5nXG4gICogQHBhcmFtIHdyYXBzU2V0IHdoZXRoZXIgdGhlIGxpc3QgaXMgd3JhcHBpbmcgYSBzZXQgKHdpbGwgYWRkIHRvbGlzdCgpIHRvIGJlIGFibGUgdG8gYWNjZXNzIGFuIGl0ZW0gdmlhIGFuIGluZGV4KVxuICAqL1xuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgdGVycmFmb3JtUmVzb3VyY2U6IGNka3RmLklJbnRlcnBvbGF0aW5nUGFyZW50LCBwcm90ZWN0ZWQgdGVycmFmb3JtQXR0cmlidXRlOiBzdHJpbmcsIHByb3RlY3RlZCB3cmFwc1NldDogYm9vbGVhbikge1xuICAgIHN1cGVyKHRlcnJhZm9ybVJlc291cmNlLCB0ZXJyYWZvcm1BdHRyaWJ1dGUsIHdyYXBzU2V0KVxuICB9XG5cbiAgLyoqXG4gICogQHBhcmFtIGluZGV4IHRoZSBpbmRleCBvZiB0aGUgaXRlbSB0byByZXR1cm5cbiAgKi9cbiAgcHVibGljIGdldChpbmRleDogbnVtYmVyKTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc091dHB1dFJlZmVyZW5jZSB7XG4gICAgcmV0dXJuIG5ldyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zUmVjb3JkU3VwcHJlc3Npb25zT3V0cHV0UmVmZXJlbmNlKHRoaXMudGVycmFmb3JtUmVzb3VyY2UsIHRoaXMudGVycmFmb3JtQXR0cmlidXRlLCBpbmRleCwgdGhpcy53cmFwc1NldCk7XG4gIH1cbn1cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9ucyB7XG4gIC8qKlxuICAqIGZpZWxkX3RyYW5zZm9ybWF0aW9ucyBibG9ja1xuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNmaWVsZF90cmFuc2Zvcm1hdGlvbnMgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI2ZpZWxkX3RyYW5zZm9ybWF0aW9uc31cbiAgKi9cbiAgcmVhZG9ubHkgZmllbGRUcmFuc2Zvcm1hdGlvbnM/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNbXSB8IGNka3RmLklSZXNvbHZhYmxlO1xuICAvKipcbiAgKiByZWNvcmRfc3VwcHJlc3Npb25zIGJsb2NrXG4gICpcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI3JlY29yZF9zdXBwcmVzc2lvbnMgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI3JlY29yZF9zdXBwcmVzc2lvbnN9XG4gICovXG4gIHJlYWRvbmx5IHJlY29yZFN1cHByZXNzaW9ucz86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNSZWNvcmRTdXBwcmVzc2lvbnNbXSB8IGNka3RmLklSZXNvbHZhYmxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1RvVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNPdXRwdXRSZWZlcmVuY2UgfCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkgfHwgY2RrdGYuVG9rZW5pemF0aW9uLmlzUmVzb2x2YWJsZShzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgaWYgKGNka3RmLmlzQ29tcGxleEVsZW1lbnQoc3RydWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkEgY29tcGxleCBlbGVtZW50IHdhcyB1c2VkIGFzIGNvbmZpZ3VyYXRpb24sIHRoaXMgaXMgbm90IHN1cHBvcnRlZDogaHR0cHM6Ly9jZGsudGYvY29tcGxleC1vYmplY3QtYXMtY29uZmlndXJhdGlvblwiKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGZpZWxkX3RyYW5zZm9ybWF0aW9uczogY2RrdGYubGlzdE1hcHBlcihkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNUb1RlcnJhZm9ybSwgdHJ1ZSkoc3RydWN0IS5maWVsZFRyYW5zZm9ybWF0aW9ucyksXG4gICAgcmVjb3JkX3N1cHByZXNzaW9uczogY2RrdGYubGlzdE1hcHBlcihkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zUmVjb3JkU3VwcHJlc3Npb25zVG9UZXJyYWZvcm0sIHRydWUpKHN0cnVjdCEucmVjb3JkU3VwcHJlc3Npb25zKSxcbiAgfVxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zVG9IY2xUZXJyYWZvcm0oc3RydWN0PzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc091dHB1dFJlZmVyZW5jZSB8IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnMpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIGNvbnN0IGF0dHJzID0ge1xuICAgIGZpZWxkX3RyYW5zZm9ybWF0aW9uczoge1xuICAgICAgdmFsdWU6IGNka3RmLmxpc3RNYXBwZXJIY2woZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zVG9IY2xUZXJyYWZvcm0sIHRydWUpKHN0cnVjdCEuZmllbGRUcmFuc2Zvcm1hdGlvbnMpLFxuICAgICAgaXNCbG9jazogdHJ1ZSxcbiAgICAgIHR5cGU6IFwibGlzdFwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zRmllbGRUcmFuc2Zvcm1hdGlvbnNMaXN0XCIsXG4gICAgfSxcbiAgICByZWNvcmRfc3VwcHJlc3Npb25zOiB7XG4gICAgICB2YWx1ZTogY2RrdGYubGlzdE1hcHBlckhjbChkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zUmVjb3JkU3VwcHJlc3Npb25zVG9IY2xUZXJyYWZvcm0sIHRydWUpKHN0cnVjdCEucmVjb3JkU3VwcHJlc3Npb25zKSxcbiAgICAgIGlzQmxvY2s6IHRydWUsXG4gICAgICB0eXBlOiBcImxpc3RcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwiRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc0xpc3RcIixcbiAgICB9LFxuICB9O1xuXG4gIC8vIHJlbW92ZSB1bmRlZmluZWQgYXR0cmlidXRlc1xuICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5lbnRyaWVzKGF0dHJzKS5maWx0ZXIoKFtfLCB2YWx1ZV0pID0+IHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUudmFsdWUgIT09IHVuZGVmaW5lZCkpO1xufVxuXG5leHBvcnQgY2xhc3MgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc091dHB1dFJlZmVyZW5jZSBleHRlbmRzIGNka3RmLkNvbXBsZXhPYmplY3Qge1xuICBwcml2YXRlIGlzRW1wdHlPYmplY3QgPSBmYWxzZTtcblxuICAvKipcbiAgKiBAcGFyYW0gdGVycmFmb3JtUmVzb3VyY2UgVGhlIHBhcmVudCByZXNvdXJjZVxuICAqIEBwYXJhbSB0ZXJyYWZvcm1BdHRyaWJ1dGUgVGhlIGF0dHJpYnV0ZSBvbiB0aGUgcGFyZW50IHJlc291cmNlIHRoaXMgY2xhc3MgaXMgcmVmZXJlbmNpbmdcbiAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHRlcnJhZm9ybVJlc291cmNlOiBjZGt0Zi5JSW50ZXJwb2xhdGluZ1BhcmVudCwgdGVycmFmb3JtQXR0cmlidXRlOiBzdHJpbmcpIHtcbiAgICBzdXBlcih0ZXJyYWZvcm1SZXNvdXJjZSwgdGVycmFmb3JtQXR0cmlidXRlLCBmYWxzZSwgMCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGludGVybmFsVmFsdWUoKTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9ucyB8IHVuZGVmaW5lZCB7XG4gICAgbGV0IGhhc0FueVZhbHVlcyA9IHRoaXMuaXNFbXB0eU9iamVjdDtcbiAgICBjb25zdCBpbnRlcm5hbFZhbHVlUmVzdWx0OiBhbnkgPSB7fTtcbiAgICBpZiAodGhpcy5fZmllbGRUcmFuc2Zvcm1hdGlvbnM/LmludGVybmFsVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQuZmllbGRUcmFuc2Zvcm1hdGlvbnMgPSB0aGlzLl9maWVsZFRyYW5zZm9ybWF0aW9ucz8uaW50ZXJuYWxWYWx1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3JlY29yZFN1cHByZXNzaW9ucz8uaW50ZXJuYWxWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC5yZWNvcmRTdXBwcmVzc2lvbnMgPSB0aGlzLl9yZWNvcmRTdXBwcmVzc2lvbnM/LmludGVybmFsVmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBoYXNBbnlWYWx1ZXMgPyBpbnRlcm5hbFZhbHVlUmVzdWx0IDogdW5kZWZpbmVkO1xuICB9XG5cbiAgcHVibGljIHNldCBpbnRlcm5hbFZhbHVlKHZhbHVlOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zIHwgdW5kZWZpbmVkKSB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IGZhbHNlO1xuICAgICAgdGhpcy5fZmllbGRUcmFuc2Zvcm1hdGlvbnMuaW50ZXJuYWxWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX3JlY29yZFN1cHByZXNzaW9ucy5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggPT09IDA7XG4gICAgICB0aGlzLl9maWVsZFRyYW5zZm9ybWF0aW9ucy5pbnRlcm5hbFZhbHVlID0gdmFsdWUuZmllbGRUcmFuc2Zvcm1hdGlvbnM7XG4gICAgICB0aGlzLl9yZWNvcmRTdXBwcmVzc2lvbnMuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlLnJlY29yZFN1cHByZXNzaW9ucztcbiAgICB9XG4gIH1cblxuICAvLyBmaWVsZF90cmFuc2Zvcm1hdGlvbnMgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfZmllbGRUcmFuc2Zvcm1hdGlvbnMgPSBuZXcgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zTGlzdCh0aGlzLCBcImZpZWxkX3RyYW5zZm9ybWF0aW9uc1wiLCBmYWxzZSk7XG4gIHB1YmxpYyBnZXQgZmllbGRUcmFuc2Zvcm1hdGlvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ZpZWxkVHJhbnNmb3JtYXRpb25zO1xuICB9XG4gIHB1YmxpYyBwdXRGaWVsZFRyYW5zZm9ybWF0aW9ucyh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0ZpZWxkVHJhbnNmb3JtYXRpb25zW10gfCBjZGt0Zi5JUmVzb2x2YWJsZSkge1xuICAgIHRoaXMuX2ZpZWxkVHJhbnNmb3JtYXRpb25zLmludGVybmFsVmFsdWUgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRGaWVsZFRyYW5zZm9ybWF0aW9ucygpIHtcbiAgICB0aGlzLl9maWVsZFRyYW5zZm9ybWF0aW9ucy5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBmaWVsZFRyYW5zZm9ybWF0aW9uc0lucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9maWVsZFRyYW5zZm9ybWF0aW9ucy5pbnRlcm5hbFZhbHVlO1xuICB9XG5cbiAgLy8gcmVjb3JkX3N1cHByZXNzaW9ucyAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9yZWNvcmRTdXBwcmVzc2lvbnMgPSBuZXcgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1JlY29yZFN1cHByZXNzaW9uc0xpc3QodGhpcywgXCJyZWNvcmRfc3VwcHJlc3Npb25zXCIsIGZhbHNlKTtcbiAgcHVibGljIGdldCByZWNvcmRTdXBwcmVzc2lvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlY29yZFN1cHByZXNzaW9ucztcbiAgfVxuICBwdWJsaWMgcHV0UmVjb3JkU3VwcHJlc3Npb25zKHZhbHVlOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zUmVjb3JkU3VwcHJlc3Npb25zW10gfCBjZGt0Zi5JUmVzb2x2YWJsZSkge1xuICAgIHRoaXMuX3JlY29yZFN1cHByZXNzaW9ucy5pbnRlcm5hbFZhbHVlID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0UmVjb3JkU3VwcHJlc3Npb25zKCkge1xuICAgIHRoaXMuX3JlY29yZFN1cHByZXNzaW9ucy5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCByZWNvcmRTdXBwcmVzc2lvbnNJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVjb3JkU3VwcHJlc3Npb25zLmludGVybmFsVmFsdWU7XG4gIH1cbn1cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZyB7XG4gIC8qKlxuICAqIGltYWdlX3RyYW5zZm9ybWF0aW9ucyBibG9ja1xuICAqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNpbWFnZV90cmFuc2Zvcm1hdGlvbnMgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI2ltYWdlX3RyYW5zZm9ybWF0aW9uc31cbiAgKi9cbiAgcmVhZG9ubHkgaW1hZ2VUcmFuc2Zvcm1hdGlvbnM/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnSW1hZ2VUcmFuc2Zvcm1hdGlvbnM7XG4gIC8qKlxuICAqIGluZm9fdHlwZV90cmFuc2Zvcm1hdGlvbnMgYmxvY2tcbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjaW5mb190eXBlX3RyYW5zZm9ybWF0aW9ucyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjaW5mb190eXBlX3RyYW5zZm9ybWF0aW9uc31cbiAgKi9cbiAgcmVhZG9ubHkgaW5mb1R5cGVUcmFuc2Zvcm1hdGlvbnM/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnSW5mb1R5cGVUcmFuc2Zvcm1hdGlvbnM7XG4gIC8qKlxuICAqIHJlY29yZF90cmFuc2Zvcm1hdGlvbnMgYmxvY2tcbiAgKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjcmVjb3JkX3RyYW5zZm9ybWF0aW9ucyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjcmVjb3JkX3RyYW5zZm9ybWF0aW9uc31cbiAgKi9cbiAgcmVhZG9ubHkgcmVjb3JkVHJhbnNmb3JtYXRpb25zPzogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9ucztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdUb1RlcnJhZm9ybShzdHJ1Y3Q/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnT3V0cHV0UmVmZXJlbmNlIHwgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZyk6IGFueSB7XG4gIGlmICghY2RrdGYuY2FuSW5zcGVjdChzdHJ1Y3QpIHx8IGNka3RmLlRva2VuaXphdGlvbi5pc1Jlc29sdmFibGUoc3RydWN0KSkgeyByZXR1cm4gc3RydWN0OyB9XG4gIGlmIChjZGt0Zi5pc0NvbXBsZXhFbGVtZW50KHN0cnVjdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGNvbXBsZXggZWxlbWVudCB3YXMgdXNlZCBhcyBjb25maWd1cmF0aW9uLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQ6IGh0dHBzOi8vY2RrLnRmL2NvbXBsZXgtb2JqZWN0LWFzLWNvbmZpZ3VyYXRpb25cIik7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBpbWFnZV90cmFuc2Zvcm1hdGlvbnM6IGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdJbWFnZVRyYW5zZm9ybWF0aW9uc1RvVGVycmFmb3JtKHN0cnVjdCEuaW1hZ2VUcmFuc2Zvcm1hdGlvbnMpLFxuICAgIGluZm9fdHlwZV90cmFuc2Zvcm1hdGlvbnM6IGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdJbmZvVHlwZVRyYW5zZm9ybWF0aW9uc1RvVGVycmFmb3JtKHN0cnVjdCEuaW5mb1R5cGVUcmFuc2Zvcm1hdGlvbnMpLFxuICAgIHJlY29yZF90cmFuc2Zvcm1hdGlvbnM6IGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdSZWNvcmRUcmFuc2Zvcm1hdGlvbnNUb1RlcnJhZm9ybShzdHJ1Y3QhLnJlY29yZFRyYW5zZm9ybWF0aW9ucyksXG4gIH1cbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1RvSGNsVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdPdXRwdXRSZWZlcmVuY2UgfCBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkgfHwgY2RrdGYuVG9rZW5pemF0aW9uLmlzUmVzb2x2YWJsZShzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgaWYgKGNka3RmLmlzQ29tcGxleEVsZW1lbnQoc3RydWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkEgY29tcGxleCBlbGVtZW50IHdhcyB1c2VkIGFzIGNvbmZpZ3VyYXRpb24sIHRoaXMgaXMgbm90IHN1cHBvcnRlZDogaHR0cHM6Ly9jZGsudGYvY29tcGxleC1vYmplY3QtYXMtY29uZmlndXJhdGlvblwiKTtcbiAgfVxuICBjb25zdCBhdHRycyA9IHtcbiAgICBpbWFnZV90cmFuc2Zvcm1hdGlvbnM6IHtcbiAgICAgIHZhbHVlOiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnSW1hZ2VUcmFuc2Zvcm1hdGlvbnNUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLmltYWdlVHJhbnNmb3JtYXRpb25zKSxcbiAgICAgIGlzQmxvY2s6IHRydWUsXG4gICAgICB0eXBlOiBcImxpc3RcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwiRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ0ltYWdlVHJhbnNmb3JtYXRpb25zTGlzdFwiLFxuICAgIH0sXG4gICAgaW5mb190eXBlX3RyYW5zZm9ybWF0aW9uczoge1xuICAgICAgdmFsdWU6IGRhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdJbmZvVHlwZVRyYW5zZm9ybWF0aW9uc1RvSGNsVGVycmFmb3JtKHN0cnVjdCEuaW5mb1R5cGVUcmFuc2Zvcm1hdGlvbnMpLFxuICAgICAgaXNCbG9jazogdHJ1ZSxcbiAgICAgIHR5cGU6IFwibGlzdFwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnSW5mb1R5cGVUcmFuc2Zvcm1hdGlvbnNMaXN0XCIsXG4gICAgfSxcbiAgICByZWNvcmRfdHJhbnNmb3JtYXRpb25zOiB7XG4gICAgICB2YWx1ZTogZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc1RvSGNsVGVycmFmb3JtKHN0cnVjdCEucmVjb3JkVHJhbnNmb3JtYXRpb25zKSxcbiAgICAgIGlzQmxvY2s6IHRydWUsXG4gICAgICB0eXBlOiBcImxpc3RcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwiRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ1JlY29yZFRyYW5zZm9ybWF0aW9uc0xpc3RcIixcbiAgICB9LFxuICB9O1xuXG4gIC8vIHJlbW92ZSB1bmRlZmluZWQgYXR0cmlidXRlc1xuICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5lbnRyaWVzKGF0dHJzKS5maWx0ZXIoKFtfLCB2YWx1ZV0pID0+IHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUudmFsdWUgIT09IHVuZGVmaW5lZCkpO1xufVxuXG5leHBvcnQgY2xhc3MgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ091dHB1dFJlZmVyZW5jZSBleHRlbmRzIGNka3RmLkNvbXBsZXhPYmplY3Qge1xuICBwcml2YXRlIGlzRW1wdHlPYmplY3QgPSBmYWxzZTtcblxuICAvKipcbiAgKiBAcGFyYW0gdGVycmFmb3JtUmVzb3VyY2UgVGhlIHBhcmVudCByZXNvdXJjZVxuICAqIEBwYXJhbSB0ZXJyYWZvcm1BdHRyaWJ1dGUgVGhlIGF0dHJpYnV0ZSBvbiB0aGUgcGFyZW50IHJlc291cmNlIHRoaXMgY2xhc3MgaXMgcmVmZXJlbmNpbmdcbiAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHRlcnJhZm9ybVJlc291cmNlOiBjZGt0Zi5JSW50ZXJwb2xhdGluZ1BhcmVudCwgdGVycmFmb3JtQXR0cmlidXRlOiBzdHJpbmcpIHtcbiAgICBzdXBlcih0ZXJyYWZvcm1SZXNvdXJjZSwgdGVycmFmb3JtQXR0cmlidXRlLCBmYWxzZSwgMCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGludGVybmFsVmFsdWUoKTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZyB8IHVuZGVmaW5lZCB7XG4gICAgbGV0IGhhc0FueVZhbHVlcyA9IHRoaXMuaXNFbXB0eU9iamVjdDtcbiAgICBjb25zdCBpbnRlcm5hbFZhbHVlUmVzdWx0OiBhbnkgPSB7fTtcbiAgICBpZiAodGhpcy5faW1hZ2VUcmFuc2Zvcm1hdGlvbnM/LmludGVybmFsVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQuaW1hZ2VUcmFuc2Zvcm1hdGlvbnMgPSB0aGlzLl9pbWFnZVRyYW5zZm9ybWF0aW9ucz8uaW50ZXJuYWxWYWx1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2luZm9UeXBlVHJhbnNmb3JtYXRpb25zPy5pbnRlcm5hbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LmluZm9UeXBlVHJhbnNmb3JtYXRpb25zID0gdGhpcy5faW5mb1R5cGVUcmFuc2Zvcm1hdGlvbnM/LmludGVybmFsVmFsdWU7XG4gICAgfVxuICAgIGlmICh0aGlzLl9yZWNvcmRUcmFuc2Zvcm1hdGlvbnM/LmludGVybmFsVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQucmVjb3JkVHJhbnNmb3JtYXRpb25zID0gdGhpcy5fcmVjb3JkVHJhbnNmb3JtYXRpb25zPy5pbnRlcm5hbFZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gaGFzQW55VmFsdWVzID8gaW50ZXJuYWxWYWx1ZVJlc3VsdCA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgaW50ZXJuYWxWYWx1ZSh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZyB8IHVuZGVmaW5lZCkge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmlzRW1wdHlPYmplY3QgPSBmYWxzZTtcbiAgICAgIHRoaXMuX2ltYWdlVHJhbnNmb3JtYXRpb25zLmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9pbmZvVHlwZVRyYW5zZm9ybWF0aW9ucy5pbnRlcm5hbFZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fcmVjb3JkVHJhbnNmb3JtYXRpb25zLmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5pc0VtcHR5T2JqZWN0ID0gT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aCA9PT0gMDtcbiAgICAgIHRoaXMuX2ltYWdlVHJhbnNmb3JtYXRpb25zLmludGVybmFsVmFsdWUgPSB2YWx1ZS5pbWFnZVRyYW5zZm9ybWF0aW9ucztcbiAgICAgIHRoaXMuX2luZm9UeXBlVHJhbnNmb3JtYXRpb25zLmludGVybmFsVmFsdWUgPSB2YWx1ZS5pbmZvVHlwZVRyYW5zZm9ybWF0aW9ucztcbiAgICAgIHRoaXMuX3JlY29yZFRyYW5zZm9ybWF0aW9ucy5pbnRlcm5hbFZhbHVlID0gdmFsdWUucmVjb3JkVHJhbnNmb3JtYXRpb25zO1xuICAgIH1cbiAgfVxuXG4gIC8vIGltYWdlX3RyYW5zZm9ybWF0aW9ucyAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9pbWFnZVRyYW5zZm9ybWF0aW9ucyA9IG5ldyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnSW1hZ2VUcmFuc2Zvcm1hdGlvbnNPdXRwdXRSZWZlcmVuY2UodGhpcywgXCJpbWFnZV90cmFuc2Zvcm1hdGlvbnNcIik7XG4gIHB1YmxpYyBnZXQgaW1hZ2VUcmFuc2Zvcm1hdGlvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ltYWdlVHJhbnNmb3JtYXRpb25zO1xuICB9XG4gIHB1YmxpYyBwdXRJbWFnZVRyYW5zZm9ybWF0aW9ucyh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ0ltYWdlVHJhbnNmb3JtYXRpb25zKSB7XG4gICAgdGhpcy5faW1hZ2VUcmFuc2Zvcm1hdGlvbnMuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldEltYWdlVHJhbnNmb3JtYXRpb25zKCkge1xuICAgIHRoaXMuX2ltYWdlVHJhbnNmb3JtYXRpb25zLmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IGltYWdlVHJhbnNmb3JtYXRpb25zSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ltYWdlVHJhbnNmb3JtYXRpb25zLmludGVybmFsVmFsdWU7XG4gIH1cblxuICAvLyBpbmZvX3R5cGVfdHJhbnNmb3JtYXRpb25zIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX2luZm9UeXBlVHJhbnNmb3JtYXRpb25zID0gbmV3IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZURlaWRlbnRpZnlDb25maWdJbmZvVHlwZVRyYW5zZm9ybWF0aW9uc091dHB1dFJlZmVyZW5jZSh0aGlzLCBcImluZm9fdHlwZV90cmFuc2Zvcm1hdGlvbnNcIik7XG4gIHB1YmxpYyBnZXQgaW5mb1R5cGVUcmFuc2Zvcm1hdGlvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2luZm9UeXBlVHJhbnNmb3JtYXRpb25zO1xuICB9XG4gIHB1YmxpYyBwdXRJbmZvVHlwZVRyYW5zZm9ybWF0aW9ucyh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlRGVpZGVudGlmeUNvbmZpZ0luZm9UeXBlVHJhbnNmb3JtYXRpb25zKSB7XG4gICAgdGhpcy5faW5mb1R5cGVUcmFuc2Zvcm1hdGlvbnMuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldEluZm9UeXBlVHJhbnNmb3JtYXRpb25zKCkge1xuICAgIHRoaXMuX2luZm9UeXBlVHJhbnNmb3JtYXRpb25zLmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IGluZm9UeXBlVHJhbnNmb3JtYXRpb25zSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2luZm9UeXBlVHJhbnNmb3JtYXRpb25zLmludGVybmFsVmFsdWU7XG4gIH1cblxuICAvLyByZWNvcmRfdHJhbnNmb3JtYXRpb25zIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX3JlY29yZFRyYW5zZm9ybWF0aW9ucyA9IG5ldyBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zT3V0cHV0UmVmZXJlbmNlKHRoaXMsIFwicmVjb3JkX3RyYW5zZm9ybWF0aW9uc1wiKTtcbiAgcHVibGljIGdldCByZWNvcmRUcmFuc2Zvcm1hdGlvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlY29yZFRyYW5zZm9ybWF0aW9ucztcbiAgfVxuICBwdWJsaWMgcHV0UmVjb3JkVHJhbnNmb3JtYXRpb25zKHZhbHVlOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVEZWlkZW50aWZ5Q29uZmlnUmVjb3JkVHJhbnNmb3JtYXRpb25zKSB7XG4gICAgdGhpcy5fcmVjb3JkVHJhbnNmb3JtYXRpb25zLmludGVybmFsVmFsdWUgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXRSZWNvcmRUcmFuc2Zvcm1hdGlvbnMoKSB7XG4gICAgdGhpcy5fcmVjb3JkVHJhbnNmb3JtYXRpb25zLmludGVybmFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IHJlY29yZFRyYW5zZm9ybWF0aW9uc0lucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl9yZWNvcmRUcmFuc2Zvcm1hdGlvbnMuaW50ZXJuYWxWYWx1ZTtcbiAgfVxufVxuZXhwb3J0IGludGVyZmFjZSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVUaW1lb3V0cyB7XG4gIC8qKlxuICAqIERvY3MgYXQgVGVycmFmb3JtIFJlZ2lzdHJ5OiB7QGxpbmsgaHR0cHM6Ly9yZWdpc3RyeS50ZXJyYWZvcm0uaW8vcHJvdmlkZXJzL2hhc2hpY29ycC9nb29nbGUvNi4xNC4xL2RvY3MvcmVzb3VyY2VzL2RhdGFfbG9zc19wcmV2ZW50aW9uX2RlaWRlbnRpZnlfdGVtcGxhdGUjY3JlYXRlIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZSNjcmVhdGV9XG4gICovXG4gIHJlYWRvbmx5IGNyZWF0ZT86IHN0cmluZztcbiAgLyoqXG4gICogRG9jcyBhdCBUZXJyYWZvcm0gUmVnaXN0cnk6IHtAbGluayBodHRwczovL3JlZ2lzdHJ5LnRlcnJhZm9ybS5pby9wcm92aWRlcnMvaGFzaGljb3JwL2dvb2dsZS82LjE0LjEvZG9jcy9yZXNvdXJjZXMvZGF0YV9sb3NzX3ByZXZlbnRpb25fZGVpZGVudGlmeV90ZW1wbGF0ZSNkZWxldGUgRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlI2RlbGV0ZX1cbiAgKi9cbiAgcmVhZG9ubHkgZGVsZXRlPzogc3RyaW5nO1xuICAvKipcbiAgKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL3Byb3ZpZGVycy9oYXNoaWNvcnAvZ29vZ2xlLzYuMTQuMS9kb2NzL3Jlc291cmNlcy9kYXRhX2xvc3NfcHJldmVudGlvbl9kZWlkZW50aWZ5X3RlbXBsYXRlI3VwZGF0ZSBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGUjdXBkYXRlfVxuICAqL1xuICByZWFkb25seSB1cGRhdGU/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVUaW1lb3V0c1RvVGVycmFmb3JtKHN0cnVjdD86IERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZVRpbWVvdXRzIHwgY2RrdGYuSVJlc29sdmFibGUpOiBhbnkge1xuICBpZiAoIWNka3RmLmNhbkluc3BlY3Qoc3RydWN0KSB8fCBjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHN0cnVjdCkpIHsgcmV0dXJuIHN0cnVjdDsgfVxuICBpZiAoY2RrdGYuaXNDb21wbGV4RWxlbWVudChzdHJ1Y3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBjb21wbGV4IGVsZW1lbnQgd2FzIHVzZWQgYXMgY29uZmlndXJhdGlvbiwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkOiBodHRwczovL2Nkay50Zi9jb21wbGV4LW9iamVjdC1hcy1jb25maWd1cmF0aW9uXCIpO1xuICB9XG4gIHJldHVybiB7XG4gICAgY3JlYXRlOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLmNyZWF0ZSksXG4gICAgZGVsZXRlOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLmRlbGV0ZSksXG4gICAgdXBkYXRlOiBjZGt0Zi5zdHJpbmdUb1RlcnJhZm9ybShzdHJ1Y3QhLnVwZGF0ZSksXG4gIH1cbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlVGltZW91dHNUb0hjbFRlcnJhZm9ybShzdHJ1Y3Q/OiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVUaW1lb3V0cyB8IGNka3RmLklSZXNvbHZhYmxlKTogYW55IHtcbiAgaWYgKCFjZGt0Zi5jYW5JbnNwZWN0KHN0cnVjdCkgfHwgY2RrdGYuVG9rZW5pemF0aW9uLmlzUmVzb2x2YWJsZShzdHJ1Y3QpKSB7IHJldHVybiBzdHJ1Y3Q7IH1cbiAgaWYgKGNka3RmLmlzQ29tcGxleEVsZW1lbnQoc3RydWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkEgY29tcGxleCBlbGVtZW50IHdhcyB1c2VkIGFzIGNvbmZpZ3VyYXRpb24sIHRoaXMgaXMgbm90IHN1cHBvcnRlZDogaHR0cHM6Ly9jZGsudGYvY29tcGxleC1vYmplY3QtYXMtY29uZmlndXJhdGlvblwiKTtcbiAgfVxuICBjb25zdCBhdHRycyA9IHtcbiAgICBjcmVhdGU6IHtcbiAgICAgIHZhbHVlOiBjZGt0Zi5zdHJpbmdUb0hjbFRlcnJhZm9ybShzdHJ1Y3QhLmNyZWF0ZSksXG4gICAgICBpc0Jsb2NrOiBmYWxzZSxcbiAgICAgIHR5cGU6IFwic2ltcGxlXCIsXG4gICAgICBzdG9yYWdlQ2xhc3NUeXBlOiBcInN0cmluZ1wiLFxuICAgIH0sXG4gICAgZGVsZXRlOiB7XG4gICAgICB2YWx1ZTogY2RrdGYuc3RyaW5nVG9IY2xUZXJyYWZvcm0oc3RydWN0IS5kZWxldGUpLFxuICAgICAgaXNCbG9jazogZmFsc2UsXG4gICAgICB0eXBlOiBcInNpbXBsZVwiLFxuICAgICAgc3RvcmFnZUNsYXNzVHlwZTogXCJzdHJpbmdcIixcbiAgICB9LFxuICAgIHVwZGF0ZToge1xuICAgICAgdmFsdWU6IGNka3RmLnN0cmluZ1RvSGNsVGVycmFmb3JtKHN0cnVjdCEudXBkYXRlKSxcbiAgICAgIGlzQmxvY2s6IGZhbHNlLFxuICAgICAgdHlwZTogXCJzaW1wbGVcIixcbiAgICAgIHN0b3JhZ2VDbGFzc1R5cGU6IFwic3RyaW5nXCIsXG4gICAgfSxcbiAgfTtcblxuICAvLyByZW1vdmUgdW5kZWZpbmVkIGF0dHJpYnV0ZXNcbiAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhhdHRycykuZmlsdGVyKChbXywgdmFsdWVdKSA9PiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlLnZhbHVlICE9PSB1bmRlZmluZWQpKTtcbn1cblxuZXhwb3J0IGNsYXNzIERhdGFMb3NzUHJldmVudGlvbkRlaWRlbnRpZnlUZW1wbGF0ZVRpbWVvdXRzT3V0cHV0UmVmZXJlbmNlIGV4dGVuZHMgY2RrdGYuQ29tcGxleE9iamVjdCB7XG4gIHByaXZhdGUgaXNFbXB0eU9iamVjdCA9IGZhbHNlO1xuICBwcml2YXRlIHJlc29sdmFibGVWYWx1ZT86IGNka3RmLklSZXNvbHZhYmxlO1xuXG4gIC8qKlxuICAqIEBwYXJhbSB0ZXJyYWZvcm1SZXNvdXJjZSBUaGUgcGFyZW50IHJlc291cmNlXG4gICogQHBhcmFtIHRlcnJhZm9ybUF0dHJpYnV0ZSBUaGUgYXR0cmlidXRlIG9uIHRoZSBwYXJlbnQgcmVzb3VyY2UgdGhpcyBjbGFzcyBpcyByZWZlcmVuY2luZ1xuICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IodGVycmFmb3JtUmVzb3VyY2U6IGNka3RmLklJbnRlcnBvbGF0aW5nUGFyZW50LCB0ZXJyYWZvcm1BdHRyaWJ1dGU6IHN0cmluZykge1xuICAgIHN1cGVyKHRlcnJhZm9ybVJlc291cmNlLCB0ZXJyYWZvcm1BdHRyaWJ1dGUsIGZhbHNlKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgaW50ZXJuYWxWYWx1ZSgpOiBEYXRhTG9zc1ByZXZlbnRpb25EZWlkZW50aWZ5VGVtcGxhdGVUaW1lb3V0cyB8IGNka3RmLklSZXNvbHZhYmxlIHwgdW5kZWZpbmVkIHtcbiAgICBpZiAodGhpcy5yZXNvbHZhYmxlVmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlc29sdmFibGVWYWx1ZTtcbiAgICB9XG4gICAgbGV0IGhhc0FueVZhbHVlcyA9IHRoaXMuaXNFbXB0eU9iamVjdDtcbiAgICBjb25zdCBpbnRlcm5hbFZhbHVlUmVzdWx0OiBhbnkgPSB7fTtcbiAgICBpZiAodGhpcy5fY3JlYXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0FueVZhbHVlcyA9IHRydWU7XG4gICAgICBpbnRlcm5hbFZhbHVlUmVzdWx0LmNyZWF0ZSA9IHRoaXMuX2NyZWF0ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2RlbGV0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNBbnlWYWx1ZXMgPSB0cnVlO1xuICAgICAgaW50ZXJuYWxWYWx1ZVJlc3VsdC5kZWxldGUgPSB0aGlzLl9kZWxldGU7XG4gICAgfVxuICAgIGlmICh0aGlzLl91cGRhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFzQW55VmFsdWVzID0gdHJ1ZTtcbiAgICAgIGludGVybmFsVmFsdWVSZXN1bHQudXBkYXRlID0gdGhpcy5fdXBkYXRlO1xuICAgIH1cbiAgICByZXR1cm4gaGFzQW55VmFsdWVzID8gaW50ZXJuYWxWYWx1ZVJlc3VsdCA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgaW50ZXJuYWxWYWx1ZSh2YWx1ZTogRGF0YUxvc3NQcmV2ZW50aW9uRGVpZGVudGlmeVRlbXBsYXRlVGltZW91dHMgfCBjZGt0Zi5JUmVzb2x2YWJsZSB8IHVuZGVmaW5lZCkge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmlzRW1wdHlPYmplY3QgPSBmYWxzZTtcbiAgICAgIHRoaXMucmVzb2x2YWJsZVZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fY3JlYXRlID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fZGVsZXRlID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fdXBkYXRlID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBlbHNlIGlmIChjZGt0Zi5Ub2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHZhbHVlKSkge1xuICAgICAgdGhpcy5pc0VtcHR5T2JqZWN0ID0gZmFsc2U7XG4gICAgICB0aGlzLnJlc29sdmFibGVWYWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuaXNFbXB0eU9iamVjdCA9IE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggPT09IDA7XG4gICAgICB0aGlzLnJlc29sdmFibGVWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2NyZWF0ZSA9IHZhbHVlLmNyZWF0ZTtcbiAgICAgIHRoaXMuX2RlbGV0ZSA9IHZhbHVlLmRlbGV0ZTtcbiAgICAgIHRoaXMuX3VwZGF0ZSA9IHZhbHVlLnVwZGF0ZTtcbiAgICB9XG4gIH1cblxuICAvLyBjcmVhdGUgLSBjb21wdXRlZDogZmFsc2UsIG9wdGlvbmFsOiB0cnVlLCByZXF1aXJlZDogZmFsc2VcbiAgcHJpdmF0ZSBfY3JlYXRlPzogc3RyaW5nOyBcbiAgcHVibGljIGdldCBjcmVhdGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nQXR0cmlidXRlKCdjcmVhdGUnKTtcbiAgfVxuICBwdWJsaWMgc2V0IGNyZWF0ZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fY3JlYXRlID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIHJlc2V0Q3JlYXRlKCkge1xuICAgIHRoaXMuX2NyZWF0ZSA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLyBUZW1wb3JhcmlseSBleHBvc2UgaW5wdXQgdmFsdWUuIFVzZSB3aXRoIGNhdXRpb24uXG4gIHB1YmxpYyBnZXQgY3JlYXRlSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZTtcbiAgfVxuXG4gIC8vIGRlbGV0ZSAtIGNvbXB1dGVkOiBmYWxzZSwgb3B0aW9uYWw6IHRydWUsIHJlcXVpcmVkOiBmYWxzZVxuICBwcml2YXRlIF9kZWxldGU/OiBzdHJpbmc7IFxuICBwdWJsaWMgZ2V0IGRlbGV0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmdBdHRyaWJ1dGUoJ2RlbGV0ZScpO1xuICB9XG4gIHB1YmxpYyBzZXQgZGVsZXRlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9kZWxldGUgPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgcmVzZXREZWxldGUoKSB7XG4gICAgdGhpcy5fZGVsZXRlID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vIFRlbXBvcmFyaWx5IGV4cG9zZSBpbnB1dCB2YWx1ZS4gVXNlIHdpdGggY2F1dGlvbi5cbiAgcHVibGljIGdldCBkZWxldGVJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGVsZXRlO1xuICB9XG5cbiAgLy8gdXBkYXRlIC0gY29tcHV0ZWQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSwgcmVxdWlyZWQ6IGZhbHNlXG4gIHByaXZhdGUgX3VwZGF0ZT86IHN0cmluZzsgXG4gIHB1YmxpYyBnZXQgdXBkYXRlKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZ0F0dHJpYnV0ZSgndXBkYXRlJyk7XG4gIH1cbiAgcHVibGljIHNldCB1cGRhdGUodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX3VwZGF0ZSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyByZXNldFVwZGF0ZSgpIHtcbiAgICB0aGlzLl91cGRhdGUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gVGVtcG9yYXJpbHkgZXhwb3NlIGlucHV0IHZhbHVlLiBVc2Ugd2l0aCBjYXV0aW9uLlxuICBwdWJsaWMgZ2V0IHVwZGF0ZUlucHV0KCkge1xuICAgIHJldHVybiB0aGlzLl91cGRhdGU7XG4gIH1cbn1cbiJdfQ==