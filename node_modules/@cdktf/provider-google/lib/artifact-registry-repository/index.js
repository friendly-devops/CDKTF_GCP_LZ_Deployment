"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
Object.defineProperty(exports, "__esModule", { value: true });
exports.artifactRegistryRepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsToTerraform = exports.ArtifactRegistryRepositoryRemoteRepositoryConfigPythonRepositoryOutputReference = exports.artifactRegistryRepositoryRemoteRepositoryConfigPythonRepositoryToHclTerraform = exports.artifactRegistryRepositoryRemoteRepositoryConfigPythonRepositoryToTerraform = exports.ArtifactRegistryRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutputReference = exports.artifactRegistryRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryToHclTerraform = exports.artifactRegistryRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryToTerraform = exports.ArtifactRegistryRepositoryRemoteRepositoryConfigNpmRepositoryOutputReference = exports.artifactRegistryRepositoryRemoteRepositoryConfigNpmRepositoryToHclTerraform = exports.artifactRegistryRepositoryRemoteRepositoryConfigNpmRepositoryToTerraform = exports.ArtifactRegistryRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutputReference = exports.artifactRegistryRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryToHclTerraform = exports.artifactRegistryRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryToTerraform = exports.ArtifactRegistryRepositoryRemoteRepositoryConfigMavenRepositoryOutputReference = exports.artifactRegistryRepositoryRemoteRepositoryConfigMavenRepositoryToHclTerraform = exports.artifactRegistryRepositoryRemoteRepositoryConfigMavenRepositoryToTerraform = exports.ArtifactRegistryRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutputReference = exports.artifactRegistryRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryToHclTerraform = exports.artifactRegistryRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryToTerraform = exports.ArtifactRegistryRepositoryRemoteRepositoryConfigDockerRepositoryOutputReference = exports.artifactRegistryRepositoryRemoteRepositoryConfigDockerRepositoryToHclTerraform = exports.artifactRegistryRepositoryRemoteRepositoryConfigDockerRepositoryToTerraform = exports.ArtifactRegistryRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutputReference = exports.artifactRegistryRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryToHclTerraform = exports.artifactRegistryRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryToTerraform = exports.ArtifactRegistryRepositoryRemoteRepositoryConfigCommonRepositoryOutputReference = exports.artifactRegistryRepositoryRemoteRepositoryConfigCommonRepositoryToHclTerraform = exports.artifactRegistryRepositoryRemoteRepositoryConfigCommonRepositoryToTerraform = exports.ArtifactRegistryRepositoryRemoteRepositoryConfigAptRepositoryOutputReference = exports.artifactRegistryRepositoryRemoteRepositoryConfigAptRepositoryToHclTerraform = exports.artifactRegistryRepositoryRemoteRepositoryConfigAptRepositoryToTerraform = exports.ArtifactRegistryRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutputReference = exports.artifactRegistryRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryToHclTerraform = exports.artifactRegistryRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryToTerraform = exports.ArtifactRegistryRepositoryMavenConfigOutputReference = exports.artifactRegistryRepositoryMavenConfigToHclTerraform = exports.artifactRegistryRepositoryMavenConfigToTerraform = exports.ArtifactRegistryRepositoryDockerConfigOutputReference = exports.artifactRegistryRepositoryDockerConfigToHclTerraform = exports.artifactRegistryRepositoryDockerConfigToTerraform = exports.ArtifactRegistryRepositoryCleanupPoliciesList = exports.ArtifactRegistryRepositoryCleanupPoliciesOutputReference = exports.artifactRegistryRepositoryCleanupPoliciesToHclTerraform = exports.artifactRegistryRepositoryCleanupPoliciesToTerraform = exports.ArtifactRegistryRepositoryCleanupPoliciesMostRecentVersionsOutputReference = exports.artifactRegistryRepositoryCleanupPoliciesMostRecentVersionsToHclTerraform = exports.artifactRegistryRepositoryCleanupPoliciesMostRecentVersionsToTerraform = exports.ArtifactRegistryRepositoryCleanupPoliciesConditionOutputReference = exports.artifactRegistryRepositoryCleanupPoliciesConditionToHclTerraform = exports.artifactRegistryRepositoryCleanupPoliciesConditionToTerraform = void 0;
exports.ArtifactRegistryRepository = exports.ArtifactRegistryRepositoryVirtualRepositoryConfigOutputReference = exports.artifactRegistryRepositoryVirtualRepositoryConfigToHclTerraform = exports.artifactRegistryRepositoryVirtualRepositoryConfigToTerraform = exports.ArtifactRegistryRepositoryVirtualRepositoryConfigUpstreamPoliciesList = exports.ArtifactRegistryRepositoryVirtualRepositoryConfigUpstreamPoliciesOutputReference = exports.artifactRegistryRepositoryVirtualRepositoryConfigUpstreamPoliciesToHclTerraform = exports.artifactRegistryRepositoryVirtualRepositoryConfigUpstreamPoliciesToTerraform = exports.ArtifactRegistryRepositoryTimeoutsOutputReference = exports.artifactRegistryRepositoryTimeoutsToHclTerraform = exports.artifactRegistryRepositoryTimeoutsToTerraform = exports.ArtifactRegistryRepositoryRemoteRepositoryConfigOutputReference = exports.artifactRegistryRepositoryRemoteRepositoryConfigToHclTerraform = exports.artifactRegistryRepositoryRemoteRepositoryConfigToTerraform = exports.ArtifactRegistryRepositoryRemoteRepositoryConfigYumRepositoryOutputReference = exports.artifactRegistryRepositoryRemoteRepositoryConfigYumRepositoryToHclTerraform = exports.artifactRegistryRepositoryRemoteRepositoryConfigYumRepositoryToTerraform = exports.ArtifactRegistryRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutputReference = exports.artifactRegistryRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryToHclTerraform = exports.artifactRegistryRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryToTerraform = exports.ArtifactRegistryRepositoryRemoteRepositoryConfigUpstreamCredentialsOutputReference = exports.artifactRegistryRepositoryRemoteRepositoryConfigUpstreamCredentialsToHclTerraform = exports.artifactRegistryRepositoryRemoteRepositoryConfigUpstreamCredentialsToTerraform = exports.ArtifactRegistryRepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsOutputReference = exports.artifactRegistryRepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsToHclTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function artifactRegistryRepositoryCleanupPoliciesConditionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        newer_than: cdktf.stringToTerraform(struct.newerThan),
        older_than: cdktf.stringToTerraform(struct.olderThan),
        package_name_prefixes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.packageNamePrefixes),
        tag_prefixes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.tagPrefixes),
        tag_state: cdktf.stringToTerraform(struct.tagState),
        version_name_prefixes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.versionNamePrefixes),
    };
}
exports.artifactRegistryRepositoryCleanupPoliciesConditionToTerraform = artifactRegistryRepositoryCleanupPoliciesConditionToTerraform;
function artifactRegistryRepositoryCleanupPoliciesConditionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        newer_than: {
            value: cdktf.stringToHclTerraform(struct.newerThan),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        older_than: {
            value: cdktf.stringToHclTerraform(struct.olderThan),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        package_name_prefixes: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.packageNamePrefixes),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        tag_prefixes: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.tagPrefixes),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        tag_state: {
            value: cdktf.stringToHclTerraform(struct.tagState),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        version_name_prefixes: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.versionNamePrefixes),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.artifactRegistryRepositoryCleanupPoliciesConditionToHclTerraform = artifactRegistryRepositoryCleanupPoliciesConditionToHclTerraform;
class ArtifactRegistryRepositoryCleanupPoliciesConditionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._newerThan !== undefined) {
            hasAnyValues = true;
            internalValueResult.newerThan = this._newerThan;
        }
        if (this._olderThan !== undefined) {
            hasAnyValues = true;
            internalValueResult.olderThan = this._olderThan;
        }
        if (this._packageNamePrefixes !== undefined) {
            hasAnyValues = true;
            internalValueResult.packageNamePrefixes = this._packageNamePrefixes;
        }
        if (this._tagPrefixes !== undefined) {
            hasAnyValues = true;
            internalValueResult.tagPrefixes = this._tagPrefixes;
        }
        if (this._tagState !== undefined) {
            hasAnyValues = true;
            internalValueResult.tagState = this._tagState;
        }
        if (this._versionNamePrefixes !== undefined) {
            hasAnyValues = true;
            internalValueResult.versionNamePrefixes = this._versionNamePrefixes;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._newerThan = undefined;
            this._olderThan = undefined;
            this._packageNamePrefixes = undefined;
            this._tagPrefixes = undefined;
            this._tagState = undefined;
            this._versionNamePrefixes = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._newerThan = value.newerThan;
            this._olderThan = value.olderThan;
            this._packageNamePrefixes = value.packageNamePrefixes;
            this._tagPrefixes = value.tagPrefixes;
            this._tagState = value.tagState;
            this._versionNamePrefixes = value.versionNamePrefixes;
        }
    }
    get newerThan() {
        return this.getStringAttribute('newer_than');
    }
    set newerThan(value) {
        this._newerThan = value;
    }
    resetNewerThan() {
        this._newerThan = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get newerThanInput() {
        return this._newerThan;
    }
    get olderThan() {
        return this.getStringAttribute('older_than');
    }
    set olderThan(value) {
        this._olderThan = value;
    }
    resetOlderThan() {
        this._olderThan = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get olderThanInput() {
        return this._olderThan;
    }
    get packageNamePrefixes() {
        return this.getListAttribute('package_name_prefixes');
    }
    set packageNamePrefixes(value) {
        this._packageNamePrefixes = value;
    }
    resetPackageNamePrefixes() {
        this._packageNamePrefixes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get packageNamePrefixesInput() {
        return this._packageNamePrefixes;
    }
    get tagPrefixes() {
        return this.getListAttribute('tag_prefixes');
    }
    set tagPrefixes(value) {
        this._tagPrefixes = value;
    }
    resetTagPrefixes() {
        this._tagPrefixes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagPrefixesInput() {
        return this._tagPrefixes;
    }
    get tagState() {
        return this.getStringAttribute('tag_state');
    }
    set tagState(value) {
        this._tagState = value;
    }
    resetTagState() {
        this._tagState = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagStateInput() {
        return this._tagState;
    }
    get versionNamePrefixes() {
        return this.getListAttribute('version_name_prefixes');
    }
    set versionNamePrefixes(value) {
        this._versionNamePrefixes = value;
    }
    resetVersionNamePrefixes() {
        this._versionNamePrefixes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get versionNamePrefixesInput() {
        return this._versionNamePrefixes;
    }
}
exports.ArtifactRegistryRepositoryCleanupPoliciesConditionOutputReference = ArtifactRegistryRepositoryCleanupPoliciesConditionOutputReference;
_a = JSII_RTTI_SYMBOL_1;
ArtifactRegistryRepositoryCleanupPoliciesConditionOutputReference[_a] = { fqn: "@cdktf/provider-google.artifactRegistryRepository.ArtifactRegistryRepositoryCleanupPoliciesConditionOutputReference", version: "14.13.1" };
function artifactRegistryRepositoryCleanupPoliciesMostRecentVersionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        keep_count: cdktf.numberToTerraform(struct.keepCount),
        package_name_prefixes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.packageNamePrefixes),
    };
}
exports.artifactRegistryRepositoryCleanupPoliciesMostRecentVersionsToTerraform = artifactRegistryRepositoryCleanupPoliciesMostRecentVersionsToTerraform;
function artifactRegistryRepositoryCleanupPoliciesMostRecentVersionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        keep_count: {
            value: cdktf.numberToHclTerraform(struct.keepCount),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        package_name_prefixes: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.packageNamePrefixes),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.artifactRegistryRepositoryCleanupPoliciesMostRecentVersionsToHclTerraform = artifactRegistryRepositoryCleanupPoliciesMostRecentVersionsToHclTerraform;
class ArtifactRegistryRepositoryCleanupPoliciesMostRecentVersionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._keepCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.keepCount = this._keepCount;
        }
        if (this._packageNamePrefixes !== undefined) {
            hasAnyValues = true;
            internalValueResult.packageNamePrefixes = this._packageNamePrefixes;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._keepCount = undefined;
            this._packageNamePrefixes = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._keepCount = value.keepCount;
            this._packageNamePrefixes = value.packageNamePrefixes;
        }
    }
    get keepCount() {
        return this.getNumberAttribute('keep_count');
    }
    set keepCount(value) {
        this._keepCount = value;
    }
    resetKeepCount() {
        this._keepCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keepCountInput() {
        return this._keepCount;
    }
    get packageNamePrefixes() {
        return this.getListAttribute('package_name_prefixes');
    }
    set packageNamePrefixes(value) {
        this._packageNamePrefixes = value;
    }
    resetPackageNamePrefixes() {
        this._packageNamePrefixes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get packageNamePrefixesInput() {
        return this._packageNamePrefixes;
    }
}
exports.ArtifactRegistryRepositoryCleanupPoliciesMostRecentVersionsOutputReference = ArtifactRegistryRepositoryCleanupPoliciesMostRecentVersionsOutputReference;
_b = JSII_RTTI_SYMBOL_1;
ArtifactRegistryRepositoryCleanupPoliciesMostRecentVersionsOutputReference[_b] = { fqn: "@cdktf/provider-google.artifactRegistryRepository.ArtifactRegistryRepositoryCleanupPoliciesMostRecentVersionsOutputReference", version: "14.13.1" };
function artifactRegistryRepositoryCleanupPoliciesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        action: cdktf.stringToTerraform(struct.action),
        id: cdktf.stringToTerraform(struct.id),
        condition: artifactRegistryRepositoryCleanupPoliciesConditionToTerraform(struct.condition),
        most_recent_versions: artifactRegistryRepositoryCleanupPoliciesMostRecentVersionsToTerraform(struct.mostRecentVersions),
    };
}
exports.artifactRegistryRepositoryCleanupPoliciesToTerraform = artifactRegistryRepositoryCleanupPoliciesToTerraform;
function artifactRegistryRepositoryCleanupPoliciesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        action: {
            value: cdktf.stringToHclTerraform(struct.action),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        id: {
            value: cdktf.stringToHclTerraform(struct.id),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        condition: {
            value: artifactRegistryRepositoryCleanupPoliciesConditionToHclTerraform(struct.condition),
            isBlock: true,
            type: "list",
            storageClassType: "ArtifactRegistryRepositoryCleanupPoliciesConditionList",
        },
        most_recent_versions: {
            value: artifactRegistryRepositoryCleanupPoliciesMostRecentVersionsToHclTerraform(struct.mostRecentVersions),
            isBlock: true,
            type: "list",
            storageClassType: "ArtifactRegistryRepositoryCleanupPoliciesMostRecentVersionsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.artifactRegistryRepositoryCleanupPoliciesToHclTerraform = artifactRegistryRepositoryCleanupPoliciesToHclTerraform;
class ArtifactRegistryRepositoryCleanupPoliciesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // condition - computed: false, optional: true, required: false
        this._condition = new ArtifactRegistryRepositoryCleanupPoliciesConditionOutputReference(this, "condition");
        // most_recent_versions - computed: false, optional: true, required: false
        this._mostRecentVersions = new ArtifactRegistryRepositoryCleanupPoliciesMostRecentVersionsOutputReference(this, "most_recent_versions");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._action !== undefined) {
            hasAnyValues = true;
            internalValueResult.action = this._action;
        }
        if (this._id !== undefined) {
            hasAnyValues = true;
            internalValueResult.id = this._id;
        }
        if (this._condition?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.condition = this._condition?.internalValue;
        }
        if (this._mostRecentVersions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mostRecentVersions = this._mostRecentVersions?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._action = undefined;
            this._id = undefined;
            this._condition.internalValue = undefined;
            this._mostRecentVersions.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._action = value.action;
            this._id = value.id;
            this._condition.internalValue = value.condition;
            this._mostRecentVersions.internalValue = value.mostRecentVersions;
        }
    }
    get action() {
        return this.getStringAttribute('action');
    }
    set action(value) {
        this._action = value;
    }
    resetAction() {
        this._action = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get actionInput() {
        return this._action;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get condition() {
        return this._condition;
    }
    putCondition(value) {
        this._condition.internalValue = value;
    }
    resetCondition() {
        this._condition.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get conditionInput() {
        return this._condition.internalValue;
    }
    get mostRecentVersions() {
        return this._mostRecentVersions;
    }
    putMostRecentVersions(value) {
        this._mostRecentVersions.internalValue = value;
    }
    resetMostRecentVersions() {
        this._mostRecentVersions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mostRecentVersionsInput() {
        return this._mostRecentVersions.internalValue;
    }
}
exports.ArtifactRegistryRepositoryCleanupPoliciesOutputReference = ArtifactRegistryRepositoryCleanupPoliciesOutputReference;
_c = JSII_RTTI_SYMBOL_1;
ArtifactRegistryRepositoryCleanupPoliciesOutputReference[_c] = { fqn: "@cdktf/provider-google.artifactRegistryRepository.ArtifactRegistryRepositoryCleanupPoliciesOutputReference", version: "14.13.1" };
class ArtifactRegistryRepositoryCleanupPoliciesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ArtifactRegistryRepositoryCleanupPoliciesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ArtifactRegistryRepositoryCleanupPoliciesList = ArtifactRegistryRepositoryCleanupPoliciesList;
_d = JSII_RTTI_SYMBOL_1;
ArtifactRegistryRepositoryCleanupPoliciesList[_d] = { fqn: "@cdktf/provider-google.artifactRegistryRepository.ArtifactRegistryRepositoryCleanupPoliciesList", version: "14.13.1" };
function artifactRegistryRepositoryDockerConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        immutable_tags: cdktf.booleanToTerraform(struct.immutableTags),
    };
}
exports.artifactRegistryRepositoryDockerConfigToTerraform = artifactRegistryRepositoryDockerConfigToTerraform;
function artifactRegistryRepositoryDockerConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        immutable_tags: {
            value: cdktf.booleanToHclTerraform(struct.immutableTags),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.artifactRegistryRepositoryDockerConfigToHclTerraform = artifactRegistryRepositoryDockerConfigToHclTerraform;
class ArtifactRegistryRepositoryDockerConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._immutableTags !== undefined) {
            hasAnyValues = true;
            internalValueResult.immutableTags = this._immutableTags;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._immutableTags = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._immutableTags = value.immutableTags;
        }
    }
    get immutableTags() {
        return this.getBooleanAttribute('immutable_tags');
    }
    set immutableTags(value) {
        this._immutableTags = value;
    }
    resetImmutableTags() {
        this._immutableTags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get immutableTagsInput() {
        return this._immutableTags;
    }
}
exports.ArtifactRegistryRepositoryDockerConfigOutputReference = ArtifactRegistryRepositoryDockerConfigOutputReference;
_e = JSII_RTTI_SYMBOL_1;
ArtifactRegistryRepositoryDockerConfigOutputReference[_e] = { fqn: "@cdktf/provider-google.artifactRegistryRepository.ArtifactRegistryRepositoryDockerConfigOutputReference", version: "14.13.1" };
function artifactRegistryRepositoryMavenConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allow_snapshot_overwrites: cdktf.booleanToTerraform(struct.allowSnapshotOverwrites),
        version_policy: cdktf.stringToTerraform(struct.versionPolicy),
    };
}
exports.artifactRegistryRepositoryMavenConfigToTerraform = artifactRegistryRepositoryMavenConfigToTerraform;
function artifactRegistryRepositoryMavenConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        allow_snapshot_overwrites: {
            value: cdktf.booleanToHclTerraform(struct.allowSnapshotOverwrites),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        version_policy: {
            value: cdktf.stringToHclTerraform(struct.versionPolicy),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.artifactRegistryRepositoryMavenConfigToHclTerraform = artifactRegistryRepositoryMavenConfigToHclTerraform;
class ArtifactRegistryRepositoryMavenConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowSnapshotOverwrites !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowSnapshotOverwrites = this._allowSnapshotOverwrites;
        }
        if (this._versionPolicy !== undefined) {
            hasAnyValues = true;
            internalValueResult.versionPolicy = this._versionPolicy;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowSnapshotOverwrites = undefined;
            this._versionPolicy = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowSnapshotOverwrites = value.allowSnapshotOverwrites;
            this._versionPolicy = value.versionPolicy;
        }
    }
    get allowSnapshotOverwrites() {
        return this.getBooleanAttribute('allow_snapshot_overwrites');
    }
    set allowSnapshotOverwrites(value) {
        this._allowSnapshotOverwrites = value;
    }
    resetAllowSnapshotOverwrites() {
        this._allowSnapshotOverwrites = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowSnapshotOverwritesInput() {
        return this._allowSnapshotOverwrites;
    }
    get versionPolicy() {
        return this.getStringAttribute('version_policy');
    }
    set versionPolicy(value) {
        this._versionPolicy = value;
    }
    resetVersionPolicy() {
        this._versionPolicy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get versionPolicyInput() {
        return this._versionPolicy;
    }
}
exports.ArtifactRegistryRepositoryMavenConfigOutputReference = ArtifactRegistryRepositoryMavenConfigOutputReference;
_f = JSII_RTTI_SYMBOL_1;
ArtifactRegistryRepositoryMavenConfigOutputReference[_f] = { fqn: "@cdktf/provider-google.artifactRegistryRepository.ArtifactRegistryRepositoryMavenConfigOutputReference", version: "14.13.1" };
function artifactRegistryRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        repository_base: cdktf.stringToTerraform(struct.repositoryBase),
        repository_path: cdktf.stringToTerraform(struct.repositoryPath),
    };
}
exports.artifactRegistryRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryToTerraform = artifactRegistryRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryToTerraform;
function artifactRegistryRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        repository_base: {
            value: cdktf.stringToHclTerraform(struct.repositoryBase),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        repository_path: {
            value: cdktf.stringToHclTerraform(struct.repositoryPath),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.artifactRegistryRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryToHclTerraform = artifactRegistryRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryToHclTerraform;
class ArtifactRegistryRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._repositoryBase !== undefined) {
            hasAnyValues = true;
            internalValueResult.repositoryBase = this._repositoryBase;
        }
        if (this._repositoryPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.repositoryPath = this._repositoryPath;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._repositoryBase = undefined;
            this._repositoryPath = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._repositoryBase = value.repositoryBase;
            this._repositoryPath = value.repositoryPath;
        }
    }
    get repositoryBase() {
        return this.getStringAttribute('repository_base');
    }
    set repositoryBase(value) {
        this._repositoryBase = value;
    }
    // Temporarily expose input value. Use with caution.
    get repositoryBaseInput() {
        return this._repositoryBase;
    }
    get repositoryPath() {
        return this.getStringAttribute('repository_path');
    }
    set repositoryPath(value) {
        this._repositoryPath = value;
    }
    // Temporarily expose input value. Use with caution.
    get repositoryPathInput() {
        return this._repositoryPath;
    }
}
exports.ArtifactRegistryRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutputReference = ArtifactRegistryRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutputReference;
_g = JSII_RTTI_SYMBOL_1;
ArtifactRegistryRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutputReference[_g] = { fqn: "@cdktf/provider-google.artifactRegistryRepository.ArtifactRegistryRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutputReference", version: "14.13.1" };
function artifactRegistryRepositoryRemoteRepositoryConfigAptRepositoryToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        public_repository: artifactRegistryRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryToTerraform(struct.publicRepository),
    };
}
exports.artifactRegistryRepositoryRemoteRepositoryConfigAptRepositoryToTerraform = artifactRegistryRepositoryRemoteRepositoryConfigAptRepositoryToTerraform;
function artifactRegistryRepositoryRemoteRepositoryConfigAptRepositoryToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        public_repository: {
            value: artifactRegistryRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryToHclTerraform(struct.publicRepository),
            isBlock: true,
            type: "list",
            storageClassType: "ArtifactRegistryRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.artifactRegistryRepositoryRemoteRepositoryConfigAptRepositoryToHclTerraform = artifactRegistryRepositoryRemoteRepositoryConfigAptRepositoryToHclTerraform;
class ArtifactRegistryRepositoryRemoteRepositoryConfigAptRepositoryOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // public_repository - computed: false, optional: true, required: false
        this._publicRepository = new ArtifactRegistryRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOutputReference(this, "public_repository");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._publicRepository?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.publicRepository = this._publicRepository?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._publicRepository.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._publicRepository.internalValue = value.publicRepository;
        }
    }
    get publicRepository() {
        return this._publicRepository;
    }
    putPublicRepository(value) {
        this._publicRepository.internalValue = value;
    }
    resetPublicRepository() {
        this._publicRepository.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get publicRepositoryInput() {
        return this._publicRepository.internalValue;
    }
}
exports.ArtifactRegistryRepositoryRemoteRepositoryConfigAptRepositoryOutputReference = ArtifactRegistryRepositoryRemoteRepositoryConfigAptRepositoryOutputReference;
_h = JSII_RTTI_SYMBOL_1;
ArtifactRegistryRepositoryRemoteRepositoryConfigAptRepositoryOutputReference[_h] = { fqn: "@cdktf/provider-google.artifactRegistryRepository.ArtifactRegistryRepositoryRemoteRepositoryConfigAptRepositoryOutputReference", version: "14.13.1" };
function artifactRegistryRepositoryRemoteRepositoryConfigCommonRepositoryToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        uri: cdktf.stringToTerraform(struct.uri),
    };
}
exports.artifactRegistryRepositoryRemoteRepositoryConfigCommonRepositoryToTerraform = artifactRegistryRepositoryRemoteRepositoryConfigCommonRepositoryToTerraform;
function artifactRegistryRepositoryRemoteRepositoryConfigCommonRepositoryToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        uri: {
            value: cdktf.stringToHclTerraform(struct.uri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.artifactRegistryRepositoryRemoteRepositoryConfigCommonRepositoryToHclTerraform = artifactRegistryRepositoryRemoteRepositoryConfigCommonRepositoryToHclTerraform;
class ArtifactRegistryRepositoryRemoteRepositoryConfigCommonRepositoryOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._uri !== undefined) {
            hasAnyValues = true;
            internalValueResult.uri = this._uri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._uri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._uri = value.uri;
        }
    }
    get uri() {
        return this.getStringAttribute('uri');
    }
    set uri(value) {
        this._uri = value;
    }
    // Temporarily expose input value. Use with caution.
    get uriInput() {
        return this._uri;
    }
}
exports.ArtifactRegistryRepositoryRemoteRepositoryConfigCommonRepositoryOutputReference = ArtifactRegistryRepositoryRemoteRepositoryConfigCommonRepositoryOutputReference;
_j = JSII_RTTI_SYMBOL_1;
ArtifactRegistryRepositoryRemoteRepositoryConfigCommonRepositoryOutputReference[_j] = { fqn: "@cdktf/provider-google.artifactRegistryRepository.ArtifactRegistryRepositoryRemoteRepositoryConfigCommonRepositoryOutputReference", version: "14.13.1" };
function artifactRegistryRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        uri: cdktf.stringToTerraform(struct.uri),
    };
}
exports.artifactRegistryRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryToTerraform = artifactRegistryRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryToTerraform;
function artifactRegistryRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        uri: {
            value: cdktf.stringToHclTerraform(struct.uri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.artifactRegistryRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryToHclTerraform = artifactRegistryRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryToHclTerraform;
class ArtifactRegistryRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._uri !== undefined) {
            hasAnyValues = true;
            internalValueResult.uri = this._uri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._uri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._uri = value.uri;
        }
    }
    get uri() {
        return this.getStringAttribute('uri');
    }
    set uri(value) {
        this._uri = value;
    }
    resetUri() {
        this._uri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get uriInput() {
        return this._uri;
    }
}
exports.ArtifactRegistryRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutputReference = ArtifactRegistryRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutputReference;
_k = JSII_RTTI_SYMBOL_1;
ArtifactRegistryRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutputReference[_k] = { fqn: "@cdktf/provider-google.artifactRegistryRepository.ArtifactRegistryRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutputReference", version: "14.13.1" };
function artifactRegistryRepositoryRemoteRepositoryConfigDockerRepositoryToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        public_repository: cdktf.stringToTerraform(struct.publicRepository),
        custom_repository: artifactRegistryRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryToTerraform(struct.customRepository),
    };
}
exports.artifactRegistryRepositoryRemoteRepositoryConfigDockerRepositoryToTerraform = artifactRegistryRepositoryRemoteRepositoryConfigDockerRepositoryToTerraform;
function artifactRegistryRepositoryRemoteRepositoryConfigDockerRepositoryToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        public_repository: {
            value: cdktf.stringToHclTerraform(struct.publicRepository),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        custom_repository: {
            value: artifactRegistryRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryToHclTerraform(struct.customRepository),
            isBlock: true,
            type: "list",
            storageClassType: "ArtifactRegistryRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.artifactRegistryRepositoryRemoteRepositoryConfigDockerRepositoryToHclTerraform = artifactRegistryRepositoryRemoteRepositoryConfigDockerRepositoryToHclTerraform;
class ArtifactRegistryRepositoryRemoteRepositoryConfigDockerRepositoryOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // custom_repository - computed: false, optional: true, required: false
        this._customRepository = new ArtifactRegistryRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryOutputReference(this, "custom_repository");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._publicRepository !== undefined) {
            hasAnyValues = true;
            internalValueResult.publicRepository = this._publicRepository;
        }
        if (this._customRepository?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customRepository = this._customRepository?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._publicRepository = undefined;
            this._customRepository.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._publicRepository = value.publicRepository;
            this._customRepository.internalValue = value.customRepository;
        }
    }
    get publicRepository() {
        return this.getStringAttribute('public_repository');
    }
    set publicRepository(value) {
        this._publicRepository = value;
    }
    resetPublicRepository() {
        this._publicRepository = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get publicRepositoryInput() {
        return this._publicRepository;
    }
    get customRepository() {
        return this._customRepository;
    }
    putCustomRepository(value) {
        this._customRepository.internalValue = value;
    }
    resetCustomRepository() {
        this._customRepository.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customRepositoryInput() {
        return this._customRepository.internalValue;
    }
}
exports.ArtifactRegistryRepositoryRemoteRepositoryConfigDockerRepositoryOutputReference = ArtifactRegistryRepositoryRemoteRepositoryConfigDockerRepositoryOutputReference;
_l = JSII_RTTI_SYMBOL_1;
ArtifactRegistryRepositoryRemoteRepositoryConfigDockerRepositoryOutputReference[_l] = { fqn: "@cdktf/provider-google.artifactRegistryRepository.ArtifactRegistryRepositoryRemoteRepositoryConfigDockerRepositoryOutputReference", version: "14.13.1" };
function artifactRegistryRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        uri: cdktf.stringToTerraform(struct.uri),
    };
}
exports.artifactRegistryRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryToTerraform = artifactRegistryRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryToTerraform;
function artifactRegistryRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        uri: {
            value: cdktf.stringToHclTerraform(struct.uri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.artifactRegistryRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryToHclTerraform = artifactRegistryRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryToHclTerraform;
class ArtifactRegistryRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._uri !== undefined) {
            hasAnyValues = true;
            internalValueResult.uri = this._uri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._uri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._uri = value.uri;
        }
    }
    get uri() {
        return this.getStringAttribute('uri');
    }
    set uri(value) {
        this._uri = value;
    }
    resetUri() {
        this._uri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get uriInput() {
        return this._uri;
    }
}
exports.ArtifactRegistryRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutputReference = ArtifactRegistryRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutputReference;
_m = JSII_RTTI_SYMBOL_1;
ArtifactRegistryRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutputReference[_m] = { fqn: "@cdktf/provider-google.artifactRegistryRepository.ArtifactRegistryRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutputReference", version: "14.13.1" };
function artifactRegistryRepositoryRemoteRepositoryConfigMavenRepositoryToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        public_repository: cdktf.stringToTerraform(struct.publicRepository),
        custom_repository: artifactRegistryRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryToTerraform(struct.customRepository),
    };
}
exports.artifactRegistryRepositoryRemoteRepositoryConfigMavenRepositoryToTerraform = artifactRegistryRepositoryRemoteRepositoryConfigMavenRepositoryToTerraform;
function artifactRegistryRepositoryRemoteRepositoryConfigMavenRepositoryToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        public_repository: {
            value: cdktf.stringToHclTerraform(struct.publicRepository),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        custom_repository: {
            value: artifactRegistryRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryToHclTerraform(struct.customRepository),
            isBlock: true,
            type: "list",
            storageClassType: "ArtifactRegistryRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.artifactRegistryRepositoryRemoteRepositoryConfigMavenRepositoryToHclTerraform = artifactRegistryRepositoryRemoteRepositoryConfigMavenRepositoryToHclTerraform;
class ArtifactRegistryRepositoryRemoteRepositoryConfigMavenRepositoryOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // custom_repository - computed: false, optional: true, required: false
        this._customRepository = new ArtifactRegistryRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryOutputReference(this, "custom_repository");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._publicRepository !== undefined) {
            hasAnyValues = true;
            internalValueResult.publicRepository = this._publicRepository;
        }
        if (this._customRepository?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customRepository = this._customRepository?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._publicRepository = undefined;
            this._customRepository.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._publicRepository = value.publicRepository;
            this._customRepository.internalValue = value.customRepository;
        }
    }
    get publicRepository() {
        return this.getStringAttribute('public_repository');
    }
    set publicRepository(value) {
        this._publicRepository = value;
    }
    resetPublicRepository() {
        this._publicRepository = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get publicRepositoryInput() {
        return this._publicRepository;
    }
    get customRepository() {
        return this._customRepository;
    }
    putCustomRepository(value) {
        this._customRepository.internalValue = value;
    }
    resetCustomRepository() {
        this._customRepository.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customRepositoryInput() {
        return this._customRepository.internalValue;
    }
}
exports.ArtifactRegistryRepositoryRemoteRepositoryConfigMavenRepositoryOutputReference = ArtifactRegistryRepositoryRemoteRepositoryConfigMavenRepositoryOutputReference;
_o = JSII_RTTI_SYMBOL_1;
ArtifactRegistryRepositoryRemoteRepositoryConfigMavenRepositoryOutputReference[_o] = { fqn: "@cdktf/provider-google.artifactRegistryRepository.ArtifactRegistryRepositoryRemoteRepositoryConfigMavenRepositoryOutputReference", version: "14.13.1" };
function artifactRegistryRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        uri: cdktf.stringToTerraform(struct.uri),
    };
}
exports.artifactRegistryRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryToTerraform = artifactRegistryRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryToTerraform;
function artifactRegistryRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        uri: {
            value: cdktf.stringToHclTerraform(struct.uri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.artifactRegistryRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryToHclTerraform = artifactRegistryRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryToHclTerraform;
class ArtifactRegistryRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._uri !== undefined) {
            hasAnyValues = true;
            internalValueResult.uri = this._uri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._uri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._uri = value.uri;
        }
    }
    get uri() {
        return this.getStringAttribute('uri');
    }
    set uri(value) {
        this._uri = value;
    }
    resetUri() {
        this._uri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get uriInput() {
        return this._uri;
    }
}
exports.ArtifactRegistryRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutputReference = ArtifactRegistryRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutputReference;
_p = JSII_RTTI_SYMBOL_1;
ArtifactRegistryRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutputReference[_p] = { fqn: "@cdktf/provider-google.artifactRegistryRepository.ArtifactRegistryRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutputReference", version: "14.13.1" };
function artifactRegistryRepositoryRemoteRepositoryConfigNpmRepositoryToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        public_repository: cdktf.stringToTerraform(struct.publicRepository),
        custom_repository: artifactRegistryRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryToTerraform(struct.customRepository),
    };
}
exports.artifactRegistryRepositoryRemoteRepositoryConfigNpmRepositoryToTerraform = artifactRegistryRepositoryRemoteRepositoryConfigNpmRepositoryToTerraform;
function artifactRegistryRepositoryRemoteRepositoryConfigNpmRepositoryToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        public_repository: {
            value: cdktf.stringToHclTerraform(struct.publicRepository),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        custom_repository: {
            value: artifactRegistryRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryToHclTerraform(struct.customRepository),
            isBlock: true,
            type: "list",
            storageClassType: "ArtifactRegistryRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.artifactRegistryRepositoryRemoteRepositoryConfigNpmRepositoryToHclTerraform = artifactRegistryRepositoryRemoteRepositoryConfigNpmRepositoryToHclTerraform;
class ArtifactRegistryRepositoryRemoteRepositoryConfigNpmRepositoryOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // custom_repository - computed: false, optional: true, required: false
        this._customRepository = new ArtifactRegistryRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryOutputReference(this, "custom_repository");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._publicRepository !== undefined) {
            hasAnyValues = true;
            internalValueResult.publicRepository = this._publicRepository;
        }
        if (this._customRepository?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customRepository = this._customRepository?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._publicRepository = undefined;
            this._customRepository.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._publicRepository = value.publicRepository;
            this._customRepository.internalValue = value.customRepository;
        }
    }
    get publicRepository() {
        return this.getStringAttribute('public_repository');
    }
    set publicRepository(value) {
        this._publicRepository = value;
    }
    resetPublicRepository() {
        this._publicRepository = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get publicRepositoryInput() {
        return this._publicRepository;
    }
    get customRepository() {
        return this._customRepository;
    }
    putCustomRepository(value) {
        this._customRepository.internalValue = value;
    }
    resetCustomRepository() {
        this._customRepository.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customRepositoryInput() {
        return this._customRepository.internalValue;
    }
}
exports.ArtifactRegistryRepositoryRemoteRepositoryConfigNpmRepositoryOutputReference = ArtifactRegistryRepositoryRemoteRepositoryConfigNpmRepositoryOutputReference;
_q = JSII_RTTI_SYMBOL_1;
ArtifactRegistryRepositoryRemoteRepositoryConfigNpmRepositoryOutputReference[_q] = { fqn: "@cdktf/provider-google.artifactRegistryRepository.ArtifactRegistryRepositoryRemoteRepositoryConfigNpmRepositoryOutputReference", version: "14.13.1" };
function artifactRegistryRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        uri: cdktf.stringToTerraform(struct.uri),
    };
}
exports.artifactRegistryRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryToTerraform = artifactRegistryRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryToTerraform;
function artifactRegistryRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        uri: {
            value: cdktf.stringToHclTerraform(struct.uri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.artifactRegistryRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryToHclTerraform = artifactRegistryRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryToHclTerraform;
class ArtifactRegistryRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._uri !== undefined) {
            hasAnyValues = true;
            internalValueResult.uri = this._uri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._uri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._uri = value.uri;
        }
    }
    get uri() {
        return this.getStringAttribute('uri');
    }
    set uri(value) {
        this._uri = value;
    }
    resetUri() {
        this._uri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get uriInput() {
        return this._uri;
    }
}
exports.ArtifactRegistryRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutputReference = ArtifactRegistryRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutputReference;
_r = JSII_RTTI_SYMBOL_1;
ArtifactRegistryRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutputReference[_r] = { fqn: "@cdktf/provider-google.artifactRegistryRepository.ArtifactRegistryRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutputReference", version: "14.13.1" };
function artifactRegistryRepositoryRemoteRepositoryConfigPythonRepositoryToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        public_repository: cdktf.stringToTerraform(struct.publicRepository),
        custom_repository: artifactRegistryRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryToTerraform(struct.customRepository),
    };
}
exports.artifactRegistryRepositoryRemoteRepositoryConfigPythonRepositoryToTerraform = artifactRegistryRepositoryRemoteRepositoryConfigPythonRepositoryToTerraform;
function artifactRegistryRepositoryRemoteRepositoryConfigPythonRepositoryToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        public_repository: {
            value: cdktf.stringToHclTerraform(struct.publicRepository),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        custom_repository: {
            value: artifactRegistryRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryToHclTerraform(struct.customRepository),
            isBlock: true,
            type: "list",
            storageClassType: "ArtifactRegistryRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.artifactRegistryRepositoryRemoteRepositoryConfigPythonRepositoryToHclTerraform = artifactRegistryRepositoryRemoteRepositoryConfigPythonRepositoryToHclTerraform;
class ArtifactRegistryRepositoryRemoteRepositoryConfigPythonRepositoryOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // custom_repository - computed: false, optional: true, required: false
        this._customRepository = new ArtifactRegistryRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryOutputReference(this, "custom_repository");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._publicRepository !== undefined) {
            hasAnyValues = true;
            internalValueResult.publicRepository = this._publicRepository;
        }
        if (this._customRepository?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customRepository = this._customRepository?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._publicRepository = undefined;
            this._customRepository.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._publicRepository = value.publicRepository;
            this._customRepository.internalValue = value.customRepository;
        }
    }
    get publicRepository() {
        return this.getStringAttribute('public_repository');
    }
    set publicRepository(value) {
        this._publicRepository = value;
    }
    resetPublicRepository() {
        this._publicRepository = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get publicRepositoryInput() {
        return this._publicRepository;
    }
    get customRepository() {
        return this._customRepository;
    }
    putCustomRepository(value) {
        this._customRepository.internalValue = value;
    }
    resetCustomRepository() {
        this._customRepository.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customRepositoryInput() {
        return this._customRepository.internalValue;
    }
}
exports.ArtifactRegistryRepositoryRemoteRepositoryConfigPythonRepositoryOutputReference = ArtifactRegistryRepositoryRemoteRepositoryConfigPythonRepositoryOutputReference;
_s = JSII_RTTI_SYMBOL_1;
ArtifactRegistryRepositoryRemoteRepositoryConfigPythonRepositoryOutputReference[_s] = { fqn: "@cdktf/provider-google.artifactRegistryRepository.ArtifactRegistryRepositoryRemoteRepositoryConfigPythonRepositoryOutputReference", version: "14.13.1" };
function artifactRegistryRepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        password_secret_version: cdktf.stringToTerraform(struct.passwordSecretVersion),
        username: cdktf.stringToTerraform(struct.username),
    };
}
exports.artifactRegistryRepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsToTerraform = artifactRegistryRepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsToTerraform;
function artifactRegistryRepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        password_secret_version: {
            value: cdktf.stringToHclTerraform(struct.passwordSecretVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        username: {
            value: cdktf.stringToHclTerraform(struct.username),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.artifactRegistryRepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsToHclTerraform = artifactRegistryRepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsToHclTerraform;
class ArtifactRegistryRepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._passwordSecretVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.passwordSecretVersion = this._passwordSecretVersion;
        }
        if (this._username !== undefined) {
            hasAnyValues = true;
            internalValueResult.username = this._username;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._passwordSecretVersion = undefined;
            this._username = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._passwordSecretVersion = value.passwordSecretVersion;
            this._username = value.username;
        }
    }
    get passwordSecretVersion() {
        return this.getStringAttribute('password_secret_version');
    }
    set passwordSecretVersion(value) {
        this._passwordSecretVersion = value;
    }
    resetPasswordSecretVersion() {
        this._passwordSecretVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get passwordSecretVersionInput() {
        return this._passwordSecretVersion;
    }
    get username() {
        return this.getStringAttribute('username');
    }
    set username(value) {
        this._username = value;
    }
    resetUsername() {
        this._username = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get usernameInput() {
        return this._username;
    }
}
exports.ArtifactRegistryRepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsOutputReference = ArtifactRegistryRepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsOutputReference;
_t = JSII_RTTI_SYMBOL_1;
ArtifactRegistryRepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsOutputReference[_t] = { fqn: "@cdktf/provider-google.artifactRegistryRepository.ArtifactRegistryRepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsOutputReference", version: "14.13.1" };
function artifactRegistryRepositoryRemoteRepositoryConfigUpstreamCredentialsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        username_password_credentials: artifactRegistryRepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsToTerraform(struct.usernamePasswordCredentials),
    };
}
exports.artifactRegistryRepositoryRemoteRepositoryConfigUpstreamCredentialsToTerraform = artifactRegistryRepositoryRemoteRepositoryConfigUpstreamCredentialsToTerraform;
function artifactRegistryRepositoryRemoteRepositoryConfigUpstreamCredentialsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        username_password_credentials: {
            value: artifactRegistryRepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsToHclTerraform(struct.usernamePasswordCredentials),
            isBlock: true,
            type: "list",
            storageClassType: "ArtifactRegistryRepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.artifactRegistryRepositoryRemoteRepositoryConfigUpstreamCredentialsToHclTerraform = artifactRegistryRepositoryRemoteRepositoryConfigUpstreamCredentialsToHclTerraform;
class ArtifactRegistryRepositoryRemoteRepositoryConfigUpstreamCredentialsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // username_password_credentials - computed: false, optional: true, required: false
        this._usernamePasswordCredentials = new ArtifactRegistryRepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsOutputReference(this, "username_password_credentials");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._usernamePasswordCredentials?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.usernamePasswordCredentials = this._usernamePasswordCredentials?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._usernamePasswordCredentials.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._usernamePasswordCredentials.internalValue = value.usernamePasswordCredentials;
        }
    }
    get usernamePasswordCredentials() {
        return this._usernamePasswordCredentials;
    }
    putUsernamePasswordCredentials(value) {
        this._usernamePasswordCredentials.internalValue = value;
    }
    resetUsernamePasswordCredentials() {
        this._usernamePasswordCredentials.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get usernamePasswordCredentialsInput() {
        return this._usernamePasswordCredentials.internalValue;
    }
}
exports.ArtifactRegistryRepositoryRemoteRepositoryConfigUpstreamCredentialsOutputReference = ArtifactRegistryRepositoryRemoteRepositoryConfigUpstreamCredentialsOutputReference;
_u = JSII_RTTI_SYMBOL_1;
ArtifactRegistryRepositoryRemoteRepositoryConfigUpstreamCredentialsOutputReference[_u] = { fqn: "@cdktf/provider-google.artifactRegistryRepository.ArtifactRegistryRepositoryRemoteRepositoryConfigUpstreamCredentialsOutputReference", version: "14.13.1" };
function artifactRegistryRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        repository_base: cdktf.stringToTerraform(struct.repositoryBase),
        repository_path: cdktf.stringToTerraform(struct.repositoryPath),
    };
}
exports.artifactRegistryRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryToTerraform = artifactRegistryRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryToTerraform;
function artifactRegistryRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        repository_base: {
            value: cdktf.stringToHclTerraform(struct.repositoryBase),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        repository_path: {
            value: cdktf.stringToHclTerraform(struct.repositoryPath),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.artifactRegistryRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryToHclTerraform = artifactRegistryRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryToHclTerraform;
class ArtifactRegistryRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._repositoryBase !== undefined) {
            hasAnyValues = true;
            internalValueResult.repositoryBase = this._repositoryBase;
        }
        if (this._repositoryPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.repositoryPath = this._repositoryPath;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._repositoryBase = undefined;
            this._repositoryPath = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._repositoryBase = value.repositoryBase;
            this._repositoryPath = value.repositoryPath;
        }
    }
    get repositoryBase() {
        return this.getStringAttribute('repository_base');
    }
    set repositoryBase(value) {
        this._repositoryBase = value;
    }
    // Temporarily expose input value. Use with caution.
    get repositoryBaseInput() {
        return this._repositoryBase;
    }
    get repositoryPath() {
        return this.getStringAttribute('repository_path');
    }
    set repositoryPath(value) {
        this._repositoryPath = value;
    }
    // Temporarily expose input value. Use with caution.
    get repositoryPathInput() {
        return this._repositoryPath;
    }
}
exports.ArtifactRegistryRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutputReference = ArtifactRegistryRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutputReference;
_v = JSII_RTTI_SYMBOL_1;
ArtifactRegistryRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutputReference[_v] = { fqn: "@cdktf/provider-google.artifactRegistryRepository.ArtifactRegistryRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutputReference", version: "14.13.1" };
function artifactRegistryRepositoryRemoteRepositoryConfigYumRepositoryToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        public_repository: artifactRegistryRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryToTerraform(struct.publicRepository),
    };
}
exports.artifactRegistryRepositoryRemoteRepositoryConfigYumRepositoryToTerraform = artifactRegistryRepositoryRemoteRepositoryConfigYumRepositoryToTerraform;
function artifactRegistryRepositoryRemoteRepositoryConfigYumRepositoryToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        public_repository: {
            value: artifactRegistryRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryToHclTerraform(struct.publicRepository),
            isBlock: true,
            type: "list",
            storageClassType: "ArtifactRegistryRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.artifactRegistryRepositoryRemoteRepositoryConfigYumRepositoryToHclTerraform = artifactRegistryRepositoryRemoteRepositoryConfigYumRepositoryToHclTerraform;
class ArtifactRegistryRepositoryRemoteRepositoryConfigYumRepositoryOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // public_repository - computed: false, optional: true, required: false
        this._publicRepository = new ArtifactRegistryRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOutputReference(this, "public_repository");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._publicRepository?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.publicRepository = this._publicRepository?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._publicRepository.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._publicRepository.internalValue = value.publicRepository;
        }
    }
    get publicRepository() {
        return this._publicRepository;
    }
    putPublicRepository(value) {
        this._publicRepository.internalValue = value;
    }
    resetPublicRepository() {
        this._publicRepository.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get publicRepositoryInput() {
        return this._publicRepository.internalValue;
    }
}
exports.ArtifactRegistryRepositoryRemoteRepositoryConfigYumRepositoryOutputReference = ArtifactRegistryRepositoryRemoteRepositoryConfigYumRepositoryOutputReference;
_w = JSII_RTTI_SYMBOL_1;
ArtifactRegistryRepositoryRemoteRepositoryConfigYumRepositoryOutputReference[_w] = { fqn: "@cdktf/provider-google.artifactRegistryRepository.ArtifactRegistryRepositoryRemoteRepositoryConfigYumRepositoryOutputReference", version: "14.13.1" };
function artifactRegistryRepositoryRemoteRepositoryConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        description: cdktf.stringToTerraform(struct.description),
        disable_upstream_validation: cdktf.booleanToTerraform(struct.disableUpstreamValidation),
        apt_repository: artifactRegistryRepositoryRemoteRepositoryConfigAptRepositoryToTerraform(struct.aptRepository),
        common_repository: artifactRegistryRepositoryRemoteRepositoryConfigCommonRepositoryToTerraform(struct.commonRepository),
        docker_repository: artifactRegistryRepositoryRemoteRepositoryConfigDockerRepositoryToTerraform(struct.dockerRepository),
        maven_repository: artifactRegistryRepositoryRemoteRepositoryConfigMavenRepositoryToTerraform(struct.mavenRepository),
        npm_repository: artifactRegistryRepositoryRemoteRepositoryConfigNpmRepositoryToTerraform(struct.npmRepository),
        python_repository: artifactRegistryRepositoryRemoteRepositoryConfigPythonRepositoryToTerraform(struct.pythonRepository),
        upstream_credentials: artifactRegistryRepositoryRemoteRepositoryConfigUpstreamCredentialsToTerraform(struct.upstreamCredentials),
        yum_repository: artifactRegistryRepositoryRemoteRepositoryConfigYumRepositoryToTerraform(struct.yumRepository),
    };
}
exports.artifactRegistryRepositoryRemoteRepositoryConfigToTerraform = artifactRegistryRepositoryRemoteRepositoryConfigToTerraform;
function artifactRegistryRepositoryRemoteRepositoryConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        description: {
            value: cdktf.stringToHclTerraform(struct.description),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        disable_upstream_validation: {
            value: cdktf.booleanToHclTerraform(struct.disableUpstreamValidation),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        apt_repository: {
            value: artifactRegistryRepositoryRemoteRepositoryConfigAptRepositoryToHclTerraform(struct.aptRepository),
            isBlock: true,
            type: "list",
            storageClassType: "ArtifactRegistryRepositoryRemoteRepositoryConfigAptRepositoryList",
        },
        common_repository: {
            value: artifactRegistryRepositoryRemoteRepositoryConfigCommonRepositoryToHclTerraform(struct.commonRepository),
            isBlock: true,
            type: "list",
            storageClassType: "ArtifactRegistryRepositoryRemoteRepositoryConfigCommonRepositoryList",
        },
        docker_repository: {
            value: artifactRegistryRepositoryRemoteRepositoryConfigDockerRepositoryToHclTerraform(struct.dockerRepository),
            isBlock: true,
            type: "list",
            storageClassType: "ArtifactRegistryRepositoryRemoteRepositoryConfigDockerRepositoryList",
        },
        maven_repository: {
            value: artifactRegistryRepositoryRemoteRepositoryConfigMavenRepositoryToHclTerraform(struct.mavenRepository),
            isBlock: true,
            type: "list",
            storageClassType: "ArtifactRegistryRepositoryRemoteRepositoryConfigMavenRepositoryList",
        },
        npm_repository: {
            value: artifactRegistryRepositoryRemoteRepositoryConfigNpmRepositoryToHclTerraform(struct.npmRepository),
            isBlock: true,
            type: "list",
            storageClassType: "ArtifactRegistryRepositoryRemoteRepositoryConfigNpmRepositoryList",
        },
        python_repository: {
            value: artifactRegistryRepositoryRemoteRepositoryConfigPythonRepositoryToHclTerraform(struct.pythonRepository),
            isBlock: true,
            type: "list",
            storageClassType: "ArtifactRegistryRepositoryRemoteRepositoryConfigPythonRepositoryList",
        },
        upstream_credentials: {
            value: artifactRegistryRepositoryRemoteRepositoryConfigUpstreamCredentialsToHclTerraform(struct.upstreamCredentials),
            isBlock: true,
            type: "list",
            storageClassType: "ArtifactRegistryRepositoryRemoteRepositoryConfigUpstreamCredentialsList",
        },
        yum_repository: {
            value: artifactRegistryRepositoryRemoteRepositoryConfigYumRepositoryToHclTerraform(struct.yumRepository),
            isBlock: true,
            type: "list",
            storageClassType: "ArtifactRegistryRepositoryRemoteRepositoryConfigYumRepositoryList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.artifactRegistryRepositoryRemoteRepositoryConfigToHclTerraform = artifactRegistryRepositoryRemoteRepositoryConfigToHclTerraform;
class ArtifactRegistryRepositoryRemoteRepositoryConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // apt_repository - computed: false, optional: true, required: false
        this._aptRepository = new ArtifactRegistryRepositoryRemoteRepositoryConfigAptRepositoryOutputReference(this, "apt_repository");
        // common_repository - computed: false, optional: true, required: false
        this._commonRepository = new ArtifactRegistryRepositoryRemoteRepositoryConfigCommonRepositoryOutputReference(this, "common_repository");
        // docker_repository - computed: false, optional: true, required: false
        this._dockerRepository = new ArtifactRegistryRepositoryRemoteRepositoryConfigDockerRepositoryOutputReference(this, "docker_repository");
        // maven_repository - computed: false, optional: true, required: false
        this._mavenRepository = new ArtifactRegistryRepositoryRemoteRepositoryConfigMavenRepositoryOutputReference(this, "maven_repository");
        // npm_repository - computed: false, optional: true, required: false
        this._npmRepository = new ArtifactRegistryRepositoryRemoteRepositoryConfigNpmRepositoryOutputReference(this, "npm_repository");
        // python_repository - computed: false, optional: true, required: false
        this._pythonRepository = new ArtifactRegistryRepositoryRemoteRepositoryConfigPythonRepositoryOutputReference(this, "python_repository");
        // upstream_credentials - computed: false, optional: true, required: false
        this._upstreamCredentials = new ArtifactRegistryRepositoryRemoteRepositoryConfigUpstreamCredentialsOutputReference(this, "upstream_credentials");
        // yum_repository - computed: false, optional: true, required: false
        this._yumRepository = new ArtifactRegistryRepositoryRemoteRepositoryConfigYumRepositoryOutputReference(this, "yum_repository");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._description !== undefined) {
            hasAnyValues = true;
            internalValueResult.description = this._description;
        }
        if (this._disableUpstreamValidation !== undefined) {
            hasAnyValues = true;
            internalValueResult.disableUpstreamValidation = this._disableUpstreamValidation;
        }
        if (this._aptRepository?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.aptRepository = this._aptRepository?.internalValue;
        }
        if (this._commonRepository?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.commonRepository = this._commonRepository?.internalValue;
        }
        if (this._dockerRepository?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dockerRepository = this._dockerRepository?.internalValue;
        }
        if (this._mavenRepository?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mavenRepository = this._mavenRepository?.internalValue;
        }
        if (this._npmRepository?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.npmRepository = this._npmRepository?.internalValue;
        }
        if (this._pythonRepository?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.pythonRepository = this._pythonRepository?.internalValue;
        }
        if (this._upstreamCredentials?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.upstreamCredentials = this._upstreamCredentials?.internalValue;
        }
        if (this._yumRepository?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.yumRepository = this._yumRepository?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._description = undefined;
            this._disableUpstreamValidation = undefined;
            this._aptRepository.internalValue = undefined;
            this._commonRepository.internalValue = undefined;
            this._dockerRepository.internalValue = undefined;
            this._mavenRepository.internalValue = undefined;
            this._npmRepository.internalValue = undefined;
            this._pythonRepository.internalValue = undefined;
            this._upstreamCredentials.internalValue = undefined;
            this._yumRepository.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._description = value.description;
            this._disableUpstreamValidation = value.disableUpstreamValidation;
            this._aptRepository.internalValue = value.aptRepository;
            this._commonRepository.internalValue = value.commonRepository;
            this._dockerRepository.internalValue = value.dockerRepository;
            this._mavenRepository.internalValue = value.mavenRepository;
            this._npmRepository.internalValue = value.npmRepository;
            this._pythonRepository.internalValue = value.pythonRepository;
            this._upstreamCredentials.internalValue = value.upstreamCredentials;
            this._yumRepository.internalValue = value.yumRepository;
        }
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get disableUpstreamValidation() {
        return this.getBooleanAttribute('disable_upstream_validation');
    }
    set disableUpstreamValidation(value) {
        this._disableUpstreamValidation = value;
    }
    resetDisableUpstreamValidation() {
        this._disableUpstreamValidation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get disableUpstreamValidationInput() {
        return this._disableUpstreamValidation;
    }
    get aptRepository() {
        return this._aptRepository;
    }
    putAptRepository(value) {
        this._aptRepository.internalValue = value;
    }
    resetAptRepository() {
        this._aptRepository.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get aptRepositoryInput() {
        return this._aptRepository.internalValue;
    }
    get commonRepository() {
        return this._commonRepository;
    }
    putCommonRepository(value) {
        this._commonRepository.internalValue = value;
    }
    resetCommonRepository() {
        this._commonRepository.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get commonRepositoryInput() {
        return this._commonRepository.internalValue;
    }
    get dockerRepository() {
        return this._dockerRepository;
    }
    putDockerRepository(value) {
        this._dockerRepository.internalValue = value;
    }
    resetDockerRepository() {
        this._dockerRepository.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dockerRepositoryInput() {
        return this._dockerRepository.internalValue;
    }
    get mavenRepository() {
        return this._mavenRepository;
    }
    putMavenRepository(value) {
        this._mavenRepository.internalValue = value;
    }
    resetMavenRepository() {
        this._mavenRepository.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mavenRepositoryInput() {
        return this._mavenRepository.internalValue;
    }
    get npmRepository() {
        return this._npmRepository;
    }
    putNpmRepository(value) {
        this._npmRepository.internalValue = value;
    }
    resetNpmRepository() {
        this._npmRepository.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get npmRepositoryInput() {
        return this._npmRepository.internalValue;
    }
    get pythonRepository() {
        return this._pythonRepository;
    }
    putPythonRepository(value) {
        this._pythonRepository.internalValue = value;
    }
    resetPythonRepository() {
        this._pythonRepository.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pythonRepositoryInput() {
        return this._pythonRepository.internalValue;
    }
    get upstreamCredentials() {
        return this._upstreamCredentials;
    }
    putUpstreamCredentials(value) {
        this._upstreamCredentials.internalValue = value;
    }
    resetUpstreamCredentials() {
        this._upstreamCredentials.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get upstreamCredentialsInput() {
        return this._upstreamCredentials.internalValue;
    }
    get yumRepository() {
        return this._yumRepository;
    }
    putYumRepository(value) {
        this._yumRepository.internalValue = value;
    }
    resetYumRepository() {
        this._yumRepository.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get yumRepositoryInput() {
        return this._yumRepository.internalValue;
    }
}
exports.ArtifactRegistryRepositoryRemoteRepositoryConfigOutputReference = ArtifactRegistryRepositoryRemoteRepositoryConfigOutputReference;
_x = JSII_RTTI_SYMBOL_1;
ArtifactRegistryRepositoryRemoteRepositoryConfigOutputReference[_x] = { fqn: "@cdktf/provider-google.artifactRegistryRepository.ArtifactRegistryRepositoryRemoteRepositoryConfigOutputReference", version: "14.13.1" };
function artifactRegistryRepositoryTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.artifactRegistryRepositoryTimeoutsToTerraform = artifactRegistryRepositoryTimeoutsToTerraform;
function artifactRegistryRepositoryTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.artifactRegistryRepositoryTimeoutsToHclTerraform = artifactRegistryRepositoryTimeoutsToHclTerraform;
class ArtifactRegistryRepositoryTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.ArtifactRegistryRepositoryTimeoutsOutputReference = ArtifactRegistryRepositoryTimeoutsOutputReference;
_y = JSII_RTTI_SYMBOL_1;
ArtifactRegistryRepositoryTimeoutsOutputReference[_y] = { fqn: "@cdktf/provider-google.artifactRegistryRepository.ArtifactRegistryRepositoryTimeoutsOutputReference", version: "14.13.1" };
function artifactRegistryRepositoryVirtualRepositoryConfigUpstreamPoliciesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        id: cdktf.stringToTerraform(struct.id),
        priority: cdktf.numberToTerraform(struct.priority),
        repository: cdktf.stringToTerraform(struct.repository),
    };
}
exports.artifactRegistryRepositoryVirtualRepositoryConfigUpstreamPoliciesToTerraform = artifactRegistryRepositoryVirtualRepositoryConfigUpstreamPoliciesToTerraform;
function artifactRegistryRepositoryVirtualRepositoryConfigUpstreamPoliciesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        id: {
            value: cdktf.stringToHclTerraform(struct.id),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        priority: {
            value: cdktf.numberToHclTerraform(struct.priority),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        repository: {
            value: cdktf.stringToHclTerraform(struct.repository),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.artifactRegistryRepositoryVirtualRepositoryConfigUpstreamPoliciesToHclTerraform = artifactRegistryRepositoryVirtualRepositoryConfigUpstreamPoliciesToHclTerraform;
class ArtifactRegistryRepositoryVirtualRepositoryConfigUpstreamPoliciesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._id !== undefined) {
            hasAnyValues = true;
            internalValueResult.id = this._id;
        }
        if (this._priority !== undefined) {
            hasAnyValues = true;
            internalValueResult.priority = this._priority;
        }
        if (this._repository !== undefined) {
            hasAnyValues = true;
            internalValueResult.repository = this._repository;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._id = undefined;
            this._priority = undefined;
            this._repository = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._id = value.id;
            this._priority = value.priority;
            this._repository = value.repository;
        }
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get priority() {
        return this.getNumberAttribute('priority');
    }
    set priority(value) {
        this._priority = value;
    }
    resetPriority() {
        this._priority = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get priorityInput() {
        return this._priority;
    }
    get repository() {
        return this.getStringAttribute('repository');
    }
    set repository(value) {
        this._repository = value;
    }
    resetRepository() {
        this._repository = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get repositoryInput() {
        return this._repository;
    }
}
exports.ArtifactRegistryRepositoryVirtualRepositoryConfigUpstreamPoliciesOutputReference = ArtifactRegistryRepositoryVirtualRepositoryConfigUpstreamPoliciesOutputReference;
_z = JSII_RTTI_SYMBOL_1;
ArtifactRegistryRepositoryVirtualRepositoryConfigUpstreamPoliciesOutputReference[_z] = { fqn: "@cdktf/provider-google.artifactRegistryRepository.ArtifactRegistryRepositoryVirtualRepositoryConfigUpstreamPoliciesOutputReference", version: "14.13.1" };
class ArtifactRegistryRepositoryVirtualRepositoryConfigUpstreamPoliciesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ArtifactRegistryRepositoryVirtualRepositoryConfigUpstreamPoliciesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ArtifactRegistryRepositoryVirtualRepositoryConfigUpstreamPoliciesList = ArtifactRegistryRepositoryVirtualRepositoryConfigUpstreamPoliciesList;
_0 = JSII_RTTI_SYMBOL_1;
ArtifactRegistryRepositoryVirtualRepositoryConfigUpstreamPoliciesList[_0] = { fqn: "@cdktf/provider-google.artifactRegistryRepository.ArtifactRegistryRepositoryVirtualRepositoryConfigUpstreamPoliciesList", version: "14.13.1" };
function artifactRegistryRepositoryVirtualRepositoryConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        upstream_policies: cdktf.listMapper(artifactRegistryRepositoryVirtualRepositoryConfigUpstreamPoliciesToTerraform, true)(struct.upstreamPolicies),
    };
}
exports.artifactRegistryRepositoryVirtualRepositoryConfigToTerraform = artifactRegistryRepositoryVirtualRepositoryConfigToTerraform;
function artifactRegistryRepositoryVirtualRepositoryConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        upstream_policies: {
            value: cdktf.listMapperHcl(artifactRegistryRepositoryVirtualRepositoryConfigUpstreamPoliciesToHclTerraform, true)(struct.upstreamPolicies),
            isBlock: true,
            type: "list",
            storageClassType: "ArtifactRegistryRepositoryVirtualRepositoryConfigUpstreamPoliciesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.artifactRegistryRepositoryVirtualRepositoryConfigToHclTerraform = artifactRegistryRepositoryVirtualRepositoryConfigToHclTerraform;
class ArtifactRegistryRepositoryVirtualRepositoryConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // upstream_policies - computed: false, optional: true, required: false
        this._upstreamPolicies = new ArtifactRegistryRepositoryVirtualRepositoryConfigUpstreamPoliciesList(this, "upstream_policies", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._upstreamPolicies?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.upstreamPolicies = this._upstreamPolicies?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._upstreamPolicies.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._upstreamPolicies.internalValue = value.upstreamPolicies;
        }
    }
    get upstreamPolicies() {
        return this._upstreamPolicies;
    }
    putUpstreamPolicies(value) {
        this._upstreamPolicies.internalValue = value;
    }
    resetUpstreamPolicies() {
        this._upstreamPolicies.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get upstreamPoliciesInput() {
        return this._upstreamPolicies.internalValue;
    }
}
exports.ArtifactRegistryRepositoryVirtualRepositoryConfigOutputReference = ArtifactRegistryRepositoryVirtualRepositoryConfigOutputReference;
_1 = JSII_RTTI_SYMBOL_1;
ArtifactRegistryRepositoryVirtualRepositoryConfigOutputReference[_1] = { fqn: "@cdktf/provider-google.artifactRegistryRepository.ArtifactRegistryRepositoryVirtualRepositoryConfigOutputReference", version: "14.13.1" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/artifact_registry_repository google_artifact_registry_repository}
*/
class ArtifactRegistryRepository extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a ArtifactRegistryRepository resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the ArtifactRegistryRepository to import
    * @param importFromId The id of the existing ArtifactRegistryRepository that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/artifact_registry_repository#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the ArtifactRegistryRepository to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_artifact_registry_repository", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/artifact_registry_repository google_artifact_registry_repository} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ArtifactRegistryRepositoryConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_artifact_registry_repository',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // effective_labels - computed: true, optional: false, required: false
        this._effectiveLabels = new cdktf.StringMap(this, "effective_labels");
        // terraform_labels - computed: true, optional: false, required: false
        this._terraformLabels = new cdktf.StringMap(this, "terraform_labels");
        // cleanup_policies - computed: false, optional: true, required: false
        this._cleanupPolicies = new ArtifactRegistryRepositoryCleanupPoliciesList(this, "cleanup_policies", true);
        // docker_config - computed: false, optional: true, required: false
        this._dockerConfig = new ArtifactRegistryRepositoryDockerConfigOutputReference(this, "docker_config");
        // maven_config - computed: false, optional: true, required: false
        this._mavenConfig = new ArtifactRegistryRepositoryMavenConfigOutputReference(this, "maven_config");
        // remote_repository_config - computed: false, optional: true, required: false
        this._remoteRepositoryConfig = new ArtifactRegistryRepositoryRemoteRepositoryConfigOutputReference(this, "remote_repository_config");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new ArtifactRegistryRepositoryTimeoutsOutputReference(this, "timeouts");
        // virtual_repository_config - computed: false, optional: true, required: false
        this._virtualRepositoryConfig = new ArtifactRegistryRepositoryVirtualRepositoryConfigOutputReference(this, "virtual_repository_config");
        this._cleanupPolicyDryRun = config.cleanupPolicyDryRun;
        this._description = config.description;
        this._format = config.format;
        this._id = config.id;
        this._kmsKeyName = config.kmsKeyName;
        this._labels = config.labels;
        this._location = config.location;
        this._mode = config.mode;
        this._project = config.project;
        this._repositoryId = config.repositoryId;
        this._cleanupPolicies.internalValue = config.cleanupPolicies;
        this._dockerConfig.internalValue = config.dockerConfig;
        this._mavenConfig.internalValue = config.mavenConfig;
        this._remoteRepositoryConfig.internalValue = config.remoteRepositoryConfig;
        this._timeouts.internalValue = config.timeouts;
        this._virtualRepositoryConfig.internalValue = config.virtualRepositoryConfig;
    }
    get cleanupPolicyDryRun() {
        return this.getBooleanAttribute('cleanup_policy_dry_run');
    }
    set cleanupPolicyDryRun(value) {
        this._cleanupPolicyDryRun = value;
    }
    resetCleanupPolicyDryRun() {
        this._cleanupPolicyDryRun = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cleanupPolicyDryRunInput() {
        return this._cleanupPolicyDryRun;
    }
    // create_time - computed: true, optional: false, required: false
    get createTime() {
        return this.getStringAttribute('create_time');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get effectiveLabels() {
        return this._effectiveLabels;
    }
    get format() {
        return this.getStringAttribute('format');
    }
    set format(value) {
        this._format = value;
    }
    // Temporarily expose input value. Use with caution.
    get formatInput() {
        return this._format;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get kmsKeyName() {
        return this.getStringAttribute('kms_key_name');
    }
    set kmsKeyName(value) {
        this._kmsKeyName = value;
    }
    resetKmsKeyName() {
        this._kmsKeyName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyNameInput() {
        return this._kmsKeyName;
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    resetLocation() {
        this._location = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    get mode() {
        return this.getStringAttribute('mode');
    }
    set mode(value) {
        this._mode = value;
    }
    resetMode() {
        this._mode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get modeInput() {
        return this._mode;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get repositoryId() {
        return this.getStringAttribute('repository_id');
    }
    set repositoryId(value) {
        this._repositoryId = value;
    }
    // Temporarily expose input value. Use with caution.
    get repositoryIdInput() {
        return this._repositoryId;
    }
    get terraformLabels() {
        return this._terraformLabels;
    }
    // update_time - computed: true, optional: false, required: false
    get updateTime() {
        return this.getStringAttribute('update_time');
    }
    get cleanupPolicies() {
        return this._cleanupPolicies;
    }
    putCleanupPolicies(value) {
        this._cleanupPolicies.internalValue = value;
    }
    resetCleanupPolicies() {
        this._cleanupPolicies.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cleanupPoliciesInput() {
        return this._cleanupPolicies.internalValue;
    }
    get dockerConfig() {
        return this._dockerConfig;
    }
    putDockerConfig(value) {
        this._dockerConfig.internalValue = value;
    }
    resetDockerConfig() {
        this._dockerConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dockerConfigInput() {
        return this._dockerConfig.internalValue;
    }
    get mavenConfig() {
        return this._mavenConfig;
    }
    putMavenConfig(value) {
        this._mavenConfig.internalValue = value;
    }
    resetMavenConfig() {
        this._mavenConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mavenConfigInput() {
        return this._mavenConfig.internalValue;
    }
    get remoteRepositoryConfig() {
        return this._remoteRepositoryConfig;
    }
    putRemoteRepositoryConfig(value) {
        this._remoteRepositoryConfig.internalValue = value;
    }
    resetRemoteRepositoryConfig() {
        this._remoteRepositoryConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get remoteRepositoryConfigInput() {
        return this._remoteRepositoryConfig.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    get virtualRepositoryConfig() {
        return this._virtualRepositoryConfig;
    }
    putVirtualRepositoryConfig(value) {
        this._virtualRepositoryConfig.internalValue = value;
    }
    resetVirtualRepositoryConfig() {
        this._virtualRepositoryConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get virtualRepositoryConfigInput() {
        return this._virtualRepositoryConfig.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            cleanup_policy_dry_run: cdktf.booleanToTerraform(this._cleanupPolicyDryRun),
            description: cdktf.stringToTerraform(this._description),
            format: cdktf.stringToTerraform(this._format),
            id: cdktf.stringToTerraform(this._id),
            kms_key_name: cdktf.stringToTerraform(this._kmsKeyName),
            labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._labels),
            location: cdktf.stringToTerraform(this._location),
            mode: cdktf.stringToTerraform(this._mode),
            project: cdktf.stringToTerraform(this._project),
            repository_id: cdktf.stringToTerraform(this._repositoryId),
            cleanup_policies: cdktf.listMapper(artifactRegistryRepositoryCleanupPoliciesToTerraform, true)(this._cleanupPolicies.internalValue),
            docker_config: artifactRegistryRepositoryDockerConfigToTerraform(this._dockerConfig.internalValue),
            maven_config: artifactRegistryRepositoryMavenConfigToTerraform(this._mavenConfig.internalValue),
            remote_repository_config: artifactRegistryRepositoryRemoteRepositoryConfigToTerraform(this._remoteRepositoryConfig.internalValue),
            timeouts: artifactRegistryRepositoryTimeoutsToTerraform(this._timeouts.internalValue),
            virtual_repository_config: artifactRegistryRepositoryVirtualRepositoryConfigToTerraform(this._virtualRepositoryConfig.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            cleanup_policy_dry_run: {
                value: cdktf.booleanToHclTerraform(this._cleanupPolicyDryRun),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            description: {
                value: cdktf.stringToHclTerraform(this._description),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            format: {
                value: cdktf.stringToHclTerraform(this._format),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            kms_key_name: {
                value: cdktf.stringToHclTerraform(this._kmsKeyName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            labels: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._labels),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            location: {
                value: cdktf.stringToHclTerraform(this._location),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            mode: {
                value: cdktf.stringToHclTerraform(this._mode),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            project: {
                value: cdktf.stringToHclTerraform(this._project),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            repository_id: {
                value: cdktf.stringToHclTerraform(this._repositoryId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            cleanup_policies: {
                value: cdktf.listMapperHcl(artifactRegistryRepositoryCleanupPoliciesToHclTerraform, true)(this._cleanupPolicies.internalValue),
                isBlock: true,
                type: "set",
                storageClassType: "ArtifactRegistryRepositoryCleanupPoliciesList",
            },
            docker_config: {
                value: artifactRegistryRepositoryDockerConfigToHclTerraform(this._dockerConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ArtifactRegistryRepositoryDockerConfigList",
            },
            maven_config: {
                value: artifactRegistryRepositoryMavenConfigToHclTerraform(this._mavenConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ArtifactRegistryRepositoryMavenConfigList",
            },
            remote_repository_config: {
                value: artifactRegistryRepositoryRemoteRepositoryConfigToHclTerraform(this._remoteRepositoryConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ArtifactRegistryRepositoryRemoteRepositoryConfigList",
            },
            timeouts: {
                value: artifactRegistryRepositoryTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "ArtifactRegistryRepositoryTimeouts",
            },
            virtual_repository_config: {
                value: artifactRegistryRepositoryVirtualRepositoryConfigToHclTerraform(this._virtualRepositoryConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ArtifactRegistryRepositoryVirtualRepositoryConfigList",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.ArtifactRegistryRepository = ArtifactRegistryRepository;
_2 = JSII_RTTI_SYMBOL_1;
ArtifactRegistryRepository[_2] = { fqn: "@cdktf/provider-google.artifactRegistryRepository.ArtifactRegistryRepository", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
ArtifactRegistryRepository.tfResourceType = "google_artifact_registry_repository";
//# sourceMappingURL=data:application/json;base64,