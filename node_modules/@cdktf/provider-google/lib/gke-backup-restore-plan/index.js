"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
Object.defineProperty(exports, "__esModule", { value: true });
exports.gkeBackupRestorePlanRestoreConfigTransformationRulesToHclTerraform = exports.gkeBackupRestorePlanRestoreConfigTransformationRulesToTerraform = exports.GkeBackupRestorePlanRestoreConfigTransformationRulesResourceFilterOutputReference = exports.gkeBackupRestorePlanRestoreConfigTransformationRulesResourceFilterToHclTerraform = exports.gkeBackupRestorePlanRestoreConfigTransformationRulesResourceFilterToTerraform = exports.GkeBackupRestorePlanRestoreConfigTransformationRulesResourceFilterGroupKindsList = exports.GkeBackupRestorePlanRestoreConfigTransformationRulesResourceFilterGroupKindsOutputReference = exports.gkeBackupRestorePlanRestoreConfigTransformationRulesResourceFilterGroupKindsToHclTerraform = exports.gkeBackupRestorePlanRestoreConfigTransformationRulesResourceFilterGroupKindsToTerraform = exports.GkeBackupRestorePlanRestoreConfigTransformationRulesFieldActionsList = exports.GkeBackupRestorePlanRestoreConfigTransformationRulesFieldActionsOutputReference = exports.gkeBackupRestorePlanRestoreConfigTransformationRulesFieldActionsToHclTerraform = exports.gkeBackupRestorePlanRestoreConfigTransformationRulesFieldActionsToTerraform = exports.GkeBackupRestorePlanRestoreConfigSelectedNamespacesOutputReference = exports.gkeBackupRestorePlanRestoreConfigSelectedNamespacesToHclTerraform = exports.gkeBackupRestorePlanRestoreConfigSelectedNamespacesToTerraform = exports.GkeBackupRestorePlanRestoreConfigSelectedApplicationsOutputReference = exports.gkeBackupRestorePlanRestoreConfigSelectedApplicationsToHclTerraform = exports.gkeBackupRestorePlanRestoreConfigSelectedApplicationsToTerraform = exports.GkeBackupRestorePlanRestoreConfigSelectedApplicationsNamespacedNamesList = exports.GkeBackupRestorePlanRestoreConfigSelectedApplicationsNamespacedNamesOutputReference = exports.gkeBackupRestorePlanRestoreConfigSelectedApplicationsNamespacedNamesToHclTerraform = exports.gkeBackupRestorePlanRestoreConfigSelectedApplicationsNamespacedNamesToTerraform = exports.GkeBackupRestorePlanRestoreConfigRestoreOrderOutputReference = exports.gkeBackupRestorePlanRestoreConfigRestoreOrderToHclTerraform = exports.gkeBackupRestorePlanRestoreConfigRestoreOrderToTerraform = exports.GkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesList = exports.GkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesOutputReference = exports.gkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesToHclTerraform = exports.gkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesToTerraform = exports.GkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesSatisfyingOutputReference = exports.gkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesSatisfyingToHclTerraform = exports.gkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesSatisfyingToTerraform = exports.GkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesRequiringOutputReference = exports.gkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesRequiringToHclTerraform = exports.gkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesRequiringToTerraform = exports.GkeBackupRestorePlanRestoreConfigExcludedNamespacesOutputReference = exports.gkeBackupRestorePlanRestoreConfigExcludedNamespacesToHclTerraform = exports.gkeBackupRestorePlanRestoreConfigExcludedNamespacesToTerraform = exports.GkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeOutputReference = exports.gkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeToHclTerraform = exports.gkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeToTerraform = exports.GkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeSelectedGroupKindsList = exports.GkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeSelectedGroupKindsOutputReference = exports.gkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeSelectedGroupKindsToHclTerraform = exports.gkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeSelectedGroupKindsToTerraform = exports.GkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeExcludedGroupKindsList = exports.GkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeExcludedGroupKindsOutputReference = exports.gkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeExcludedGroupKindsToHclTerraform = exports.gkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeExcludedGroupKindsToTerraform = void 0;
exports.GkeBackupRestorePlan = exports.GkeBackupRestorePlanTimeoutsOutputReference = exports.gkeBackupRestorePlanTimeoutsToHclTerraform = exports.gkeBackupRestorePlanTimeoutsToTerraform = exports.GkeBackupRestorePlanRestoreConfigOutputReference = exports.gkeBackupRestorePlanRestoreConfigToHclTerraform = exports.gkeBackupRestorePlanRestoreConfigToTerraform = exports.GkeBackupRestorePlanRestoreConfigVolumeDataRestorePolicyBindingsList = exports.GkeBackupRestorePlanRestoreConfigVolumeDataRestorePolicyBindingsOutputReference = exports.gkeBackupRestorePlanRestoreConfigVolumeDataRestorePolicyBindingsToHclTerraform = exports.gkeBackupRestorePlanRestoreConfigVolumeDataRestorePolicyBindingsToTerraform = exports.GkeBackupRestorePlanRestoreConfigTransformationRulesList = exports.GkeBackupRestorePlanRestoreConfigTransformationRulesOutputReference = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function gkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeExcludedGroupKindsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        resource_group: cdktf.stringToTerraform(struct.resourceGroup),
        resource_kind: cdktf.stringToTerraform(struct.resourceKind),
    };
}
exports.gkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeExcludedGroupKindsToTerraform = gkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeExcludedGroupKindsToTerraform;
function gkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeExcludedGroupKindsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        resource_group: {
            value: cdktf.stringToHclTerraform(struct.resourceGroup),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        resource_kind: {
            value: cdktf.stringToHclTerraform(struct.resourceKind),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeExcludedGroupKindsToHclTerraform = gkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeExcludedGroupKindsToHclTerraform;
class GkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeExcludedGroupKindsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._resourceGroup !== undefined) {
            hasAnyValues = true;
            internalValueResult.resourceGroup = this._resourceGroup;
        }
        if (this._resourceKind !== undefined) {
            hasAnyValues = true;
            internalValueResult.resourceKind = this._resourceKind;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._resourceGroup = undefined;
            this._resourceKind = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._resourceGroup = value.resourceGroup;
            this._resourceKind = value.resourceKind;
        }
    }
    get resourceGroup() {
        return this.getStringAttribute('resource_group');
    }
    set resourceGroup(value) {
        this._resourceGroup = value;
    }
    resetResourceGroup() {
        this._resourceGroup = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceGroupInput() {
        return this._resourceGroup;
    }
    get resourceKind() {
        return this.getStringAttribute('resource_kind');
    }
    set resourceKind(value) {
        this._resourceKind = value;
    }
    resetResourceKind() {
        this._resourceKind = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceKindInput() {
        return this._resourceKind;
    }
}
exports.GkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeExcludedGroupKindsOutputReference = GkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeExcludedGroupKindsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
GkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeExcludedGroupKindsOutputReference[_a] = { fqn: "@cdktf/provider-google.gkeBackupRestorePlan.GkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeExcludedGroupKindsOutputReference", version: "14.13.1" };
class GkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeExcludedGroupKindsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new GkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeExcludedGroupKindsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.GkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeExcludedGroupKindsList = GkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeExcludedGroupKindsList;
_b = JSII_RTTI_SYMBOL_1;
GkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeExcludedGroupKindsList[_b] = { fqn: "@cdktf/provider-google.gkeBackupRestorePlan.GkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeExcludedGroupKindsList", version: "14.13.1" };
function gkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeSelectedGroupKindsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        resource_group: cdktf.stringToTerraform(struct.resourceGroup),
        resource_kind: cdktf.stringToTerraform(struct.resourceKind),
    };
}
exports.gkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeSelectedGroupKindsToTerraform = gkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeSelectedGroupKindsToTerraform;
function gkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeSelectedGroupKindsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        resource_group: {
            value: cdktf.stringToHclTerraform(struct.resourceGroup),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        resource_kind: {
            value: cdktf.stringToHclTerraform(struct.resourceKind),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeSelectedGroupKindsToHclTerraform = gkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeSelectedGroupKindsToHclTerraform;
class GkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeSelectedGroupKindsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._resourceGroup !== undefined) {
            hasAnyValues = true;
            internalValueResult.resourceGroup = this._resourceGroup;
        }
        if (this._resourceKind !== undefined) {
            hasAnyValues = true;
            internalValueResult.resourceKind = this._resourceKind;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._resourceGroup = undefined;
            this._resourceKind = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._resourceGroup = value.resourceGroup;
            this._resourceKind = value.resourceKind;
        }
    }
    get resourceGroup() {
        return this.getStringAttribute('resource_group');
    }
    set resourceGroup(value) {
        this._resourceGroup = value;
    }
    resetResourceGroup() {
        this._resourceGroup = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceGroupInput() {
        return this._resourceGroup;
    }
    get resourceKind() {
        return this.getStringAttribute('resource_kind');
    }
    set resourceKind(value) {
        this._resourceKind = value;
    }
    resetResourceKind() {
        this._resourceKind = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceKindInput() {
        return this._resourceKind;
    }
}
exports.GkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeSelectedGroupKindsOutputReference = GkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeSelectedGroupKindsOutputReference;
_c = JSII_RTTI_SYMBOL_1;
GkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeSelectedGroupKindsOutputReference[_c] = { fqn: "@cdktf/provider-google.gkeBackupRestorePlan.GkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeSelectedGroupKindsOutputReference", version: "14.13.1" };
class GkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeSelectedGroupKindsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new GkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeSelectedGroupKindsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.GkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeSelectedGroupKindsList = GkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeSelectedGroupKindsList;
_d = JSII_RTTI_SYMBOL_1;
GkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeSelectedGroupKindsList[_d] = { fqn: "@cdktf/provider-google.gkeBackupRestorePlan.GkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeSelectedGroupKindsList", version: "14.13.1" };
function gkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        all_group_kinds: cdktf.booleanToTerraform(struct.allGroupKinds),
        no_group_kinds: cdktf.booleanToTerraform(struct.noGroupKinds),
        excluded_group_kinds: cdktf.listMapper(gkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeExcludedGroupKindsToTerraform, true)(struct.excludedGroupKinds),
        selected_group_kinds: cdktf.listMapper(gkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeSelectedGroupKindsToTerraform, true)(struct.selectedGroupKinds),
    };
}
exports.gkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeToTerraform = gkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeToTerraform;
function gkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        all_group_kinds: {
            value: cdktf.booleanToHclTerraform(struct.allGroupKinds),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        no_group_kinds: {
            value: cdktf.booleanToHclTerraform(struct.noGroupKinds),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        excluded_group_kinds: {
            value: cdktf.listMapperHcl(gkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeExcludedGroupKindsToHclTerraform, true)(struct.excludedGroupKinds),
            isBlock: true,
            type: "list",
            storageClassType: "GkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeExcludedGroupKindsList",
        },
        selected_group_kinds: {
            value: cdktf.listMapperHcl(gkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeSelectedGroupKindsToHclTerraform, true)(struct.selectedGroupKinds),
            isBlock: true,
            type: "list",
            storageClassType: "GkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeSelectedGroupKindsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeToHclTerraform = gkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeToHclTerraform;
class GkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // excluded_group_kinds - computed: false, optional: true, required: false
        this._excludedGroupKinds = new GkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeExcludedGroupKindsList(this, "excluded_group_kinds", false);
        // selected_group_kinds - computed: false, optional: true, required: false
        this._selectedGroupKinds = new GkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeSelectedGroupKindsList(this, "selected_group_kinds", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allGroupKinds !== undefined) {
            hasAnyValues = true;
            internalValueResult.allGroupKinds = this._allGroupKinds;
        }
        if (this._noGroupKinds !== undefined) {
            hasAnyValues = true;
            internalValueResult.noGroupKinds = this._noGroupKinds;
        }
        if (this._excludedGroupKinds?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.excludedGroupKinds = this._excludedGroupKinds?.internalValue;
        }
        if (this._selectedGroupKinds?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.selectedGroupKinds = this._selectedGroupKinds?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allGroupKinds = undefined;
            this._noGroupKinds = undefined;
            this._excludedGroupKinds.internalValue = undefined;
            this._selectedGroupKinds.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allGroupKinds = value.allGroupKinds;
            this._noGroupKinds = value.noGroupKinds;
            this._excludedGroupKinds.internalValue = value.excludedGroupKinds;
            this._selectedGroupKinds.internalValue = value.selectedGroupKinds;
        }
    }
    get allGroupKinds() {
        return this.getBooleanAttribute('all_group_kinds');
    }
    set allGroupKinds(value) {
        this._allGroupKinds = value;
    }
    resetAllGroupKinds() {
        this._allGroupKinds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allGroupKindsInput() {
        return this._allGroupKinds;
    }
    get noGroupKinds() {
        return this.getBooleanAttribute('no_group_kinds');
    }
    set noGroupKinds(value) {
        this._noGroupKinds = value;
    }
    resetNoGroupKinds() {
        this._noGroupKinds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get noGroupKindsInput() {
        return this._noGroupKinds;
    }
    get excludedGroupKinds() {
        return this._excludedGroupKinds;
    }
    putExcludedGroupKinds(value) {
        this._excludedGroupKinds.internalValue = value;
    }
    resetExcludedGroupKinds() {
        this._excludedGroupKinds.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludedGroupKindsInput() {
        return this._excludedGroupKinds.internalValue;
    }
    get selectedGroupKinds() {
        return this._selectedGroupKinds;
    }
    putSelectedGroupKinds(value) {
        this._selectedGroupKinds.internalValue = value;
    }
    resetSelectedGroupKinds() {
        this._selectedGroupKinds.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get selectedGroupKindsInput() {
        return this._selectedGroupKinds.internalValue;
    }
}
exports.GkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeOutputReference = GkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeOutputReference;
_e = JSII_RTTI_SYMBOL_1;
GkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeOutputReference[_e] = { fqn: "@cdktf/provider-google.gkeBackupRestorePlan.GkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeOutputReference", version: "14.13.1" };
function gkeBackupRestorePlanRestoreConfigExcludedNamespacesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        namespaces: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.namespaces),
    };
}
exports.gkeBackupRestorePlanRestoreConfigExcludedNamespacesToTerraform = gkeBackupRestorePlanRestoreConfigExcludedNamespacesToTerraform;
function gkeBackupRestorePlanRestoreConfigExcludedNamespacesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        namespaces: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.namespaces),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeBackupRestorePlanRestoreConfigExcludedNamespacesToHclTerraform = gkeBackupRestorePlanRestoreConfigExcludedNamespacesToHclTerraform;
class GkeBackupRestorePlanRestoreConfigExcludedNamespacesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._namespaces !== undefined) {
            hasAnyValues = true;
            internalValueResult.namespaces = this._namespaces;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._namespaces = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._namespaces = value.namespaces;
        }
    }
    get namespaces() {
        return this.getListAttribute('namespaces');
    }
    set namespaces(value) {
        this._namespaces = value;
    }
    // Temporarily expose input value. Use with caution.
    get namespacesInput() {
        return this._namespaces;
    }
}
exports.GkeBackupRestorePlanRestoreConfigExcludedNamespacesOutputReference = GkeBackupRestorePlanRestoreConfigExcludedNamespacesOutputReference;
_f = JSII_RTTI_SYMBOL_1;
GkeBackupRestorePlanRestoreConfigExcludedNamespacesOutputReference[_f] = { fqn: "@cdktf/provider-google.gkeBackupRestorePlan.GkeBackupRestorePlanRestoreConfigExcludedNamespacesOutputReference", version: "14.13.1" };
function gkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesRequiringToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        resource_group: cdktf.stringToTerraform(struct.resourceGroup),
        resource_kind: cdktf.stringToTerraform(struct.resourceKind),
    };
}
exports.gkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesRequiringToTerraform = gkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesRequiringToTerraform;
function gkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesRequiringToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        resource_group: {
            value: cdktf.stringToHclTerraform(struct.resourceGroup),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        resource_kind: {
            value: cdktf.stringToHclTerraform(struct.resourceKind),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesRequiringToHclTerraform = gkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesRequiringToHclTerraform;
class GkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesRequiringOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._resourceGroup !== undefined) {
            hasAnyValues = true;
            internalValueResult.resourceGroup = this._resourceGroup;
        }
        if (this._resourceKind !== undefined) {
            hasAnyValues = true;
            internalValueResult.resourceKind = this._resourceKind;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._resourceGroup = undefined;
            this._resourceKind = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._resourceGroup = value.resourceGroup;
            this._resourceKind = value.resourceKind;
        }
    }
    get resourceGroup() {
        return this.getStringAttribute('resource_group');
    }
    set resourceGroup(value) {
        this._resourceGroup = value;
    }
    resetResourceGroup() {
        this._resourceGroup = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceGroupInput() {
        return this._resourceGroup;
    }
    get resourceKind() {
        return this.getStringAttribute('resource_kind');
    }
    set resourceKind(value) {
        this._resourceKind = value;
    }
    resetResourceKind() {
        this._resourceKind = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceKindInput() {
        return this._resourceKind;
    }
}
exports.GkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesRequiringOutputReference = GkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesRequiringOutputReference;
_g = JSII_RTTI_SYMBOL_1;
GkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesRequiringOutputReference[_g] = { fqn: "@cdktf/provider-google.gkeBackupRestorePlan.GkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesRequiringOutputReference", version: "14.13.1" };
function gkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesSatisfyingToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        resource_group: cdktf.stringToTerraform(struct.resourceGroup),
        resource_kind: cdktf.stringToTerraform(struct.resourceKind),
    };
}
exports.gkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesSatisfyingToTerraform = gkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesSatisfyingToTerraform;
function gkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesSatisfyingToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        resource_group: {
            value: cdktf.stringToHclTerraform(struct.resourceGroup),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        resource_kind: {
            value: cdktf.stringToHclTerraform(struct.resourceKind),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesSatisfyingToHclTerraform = gkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesSatisfyingToHclTerraform;
class GkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesSatisfyingOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._resourceGroup !== undefined) {
            hasAnyValues = true;
            internalValueResult.resourceGroup = this._resourceGroup;
        }
        if (this._resourceKind !== undefined) {
            hasAnyValues = true;
            internalValueResult.resourceKind = this._resourceKind;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._resourceGroup = undefined;
            this._resourceKind = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._resourceGroup = value.resourceGroup;
            this._resourceKind = value.resourceKind;
        }
    }
    get resourceGroup() {
        return this.getStringAttribute('resource_group');
    }
    set resourceGroup(value) {
        this._resourceGroup = value;
    }
    resetResourceGroup() {
        this._resourceGroup = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceGroupInput() {
        return this._resourceGroup;
    }
    get resourceKind() {
        return this.getStringAttribute('resource_kind');
    }
    set resourceKind(value) {
        this._resourceKind = value;
    }
    resetResourceKind() {
        this._resourceKind = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceKindInput() {
        return this._resourceKind;
    }
}
exports.GkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesSatisfyingOutputReference = GkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesSatisfyingOutputReference;
_h = JSII_RTTI_SYMBOL_1;
GkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesSatisfyingOutputReference[_h] = { fqn: "@cdktf/provider-google.gkeBackupRestorePlan.GkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesSatisfyingOutputReference", version: "14.13.1" };
function gkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        requiring: gkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesRequiringToTerraform(struct.requiring),
        satisfying: gkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesSatisfyingToTerraform(struct.satisfying),
    };
}
exports.gkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesToTerraform = gkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesToTerraform;
function gkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        requiring: {
            value: gkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesRequiringToHclTerraform(struct.requiring),
            isBlock: true,
            type: "list",
            storageClassType: "GkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesRequiringList",
        },
        satisfying: {
            value: gkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesSatisfyingToHclTerraform(struct.satisfying),
            isBlock: true,
            type: "list",
            storageClassType: "GkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesSatisfyingList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesToHclTerraform = gkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesToHclTerraform;
class GkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // requiring - computed: false, optional: false, required: true
        this._requiring = new GkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesRequiringOutputReference(this, "requiring");
        // satisfying - computed: false, optional: false, required: true
        this._satisfying = new GkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesSatisfyingOutputReference(this, "satisfying");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._requiring?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.requiring = this._requiring?.internalValue;
        }
        if (this._satisfying?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.satisfying = this._satisfying?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._requiring.internalValue = undefined;
            this._satisfying.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._requiring.internalValue = value.requiring;
            this._satisfying.internalValue = value.satisfying;
        }
    }
    get requiring() {
        return this._requiring;
    }
    putRequiring(value) {
        this._requiring.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get requiringInput() {
        return this._requiring.internalValue;
    }
    get satisfying() {
        return this._satisfying;
    }
    putSatisfying(value) {
        this._satisfying.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get satisfyingInput() {
        return this._satisfying.internalValue;
    }
}
exports.GkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesOutputReference = GkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesOutputReference;
_j = JSII_RTTI_SYMBOL_1;
GkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesOutputReference[_j] = { fqn: "@cdktf/provider-google.gkeBackupRestorePlan.GkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesOutputReference", version: "14.13.1" };
class GkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new GkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.GkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesList = GkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesList;
_k = JSII_RTTI_SYMBOL_1;
GkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesList[_k] = { fqn: "@cdktf/provider-google.gkeBackupRestorePlan.GkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesList", version: "14.13.1" };
function gkeBackupRestorePlanRestoreConfigRestoreOrderToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        group_kind_dependencies: cdktf.listMapper(gkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesToTerraform, true)(struct.groupKindDependencies),
    };
}
exports.gkeBackupRestorePlanRestoreConfigRestoreOrderToTerraform = gkeBackupRestorePlanRestoreConfigRestoreOrderToTerraform;
function gkeBackupRestorePlanRestoreConfigRestoreOrderToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        group_kind_dependencies: {
            value: cdktf.listMapperHcl(gkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesToHclTerraform, true)(struct.groupKindDependencies),
            isBlock: true,
            type: "list",
            storageClassType: "GkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeBackupRestorePlanRestoreConfigRestoreOrderToHclTerraform = gkeBackupRestorePlanRestoreConfigRestoreOrderToHclTerraform;
class GkeBackupRestorePlanRestoreConfigRestoreOrderOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // group_kind_dependencies - computed: false, optional: false, required: true
        this._groupKindDependencies = new GkeBackupRestorePlanRestoreConfigRestoreOrderGroupKindDependenciesList(this, "group_kind_dependencies", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._groupKindDependencies?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.groupKindDependencies = this._groupKindDependencies?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._groupKindDependencies.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._groupKindDependencies.internalValue = value.groupKindDependencies;
        }
    }
    get groupKindDependencies() {
        return this._groupKindDependencies;
    }
    putGroupKindDependencies(value) {
        this._groupKindDependencies.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get groupKindDependenciesInput() {
        return this._groupKindDependencies.internalValue;
    }
}
exports.GkeBackupRestorePlanRestoreConfigRestoreOrderOutputReference = GkeBackupRestorePlanRestoreConfigRestoreOrderOutputReference;
_l = JSII_RTTI_SYMBOL_1;
GkeBackupRestorePlanRestoreConfigRestoreOrderOutputReference[_l] = { fqn: "@cdktf/provider-google.gkeBackupRestorePlan.GkeBackupRestorePlanRestoreConfigRestoreOrderOutputReference", version: "14.13.1" };
function gkeBackupRestorePlanRestoreConfigSelectedApplicationsNamespacedNamesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        namespace: cdktf.stringToTerraform(struct.namespace),
    };
}
exports.gkeBackupRestorePlanRestoreConfigSelectedApplicationsNamespacedNamesToTerraform = gkeBackupRestorePlanRestoreConfigSelectedApplicationsNamespacedNamesToTerraform;
function gkeBackupRestorePlanRestoreConfigSelectedApplicationsNamespacedNamesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        namespace: {
            value: cdktf.stringToHclTerraform(struct.namespace),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeBackupRestorePlanRestoreConfigSelectedApplicationsNamespacedNamesToHclTerraform = gkeBackupRestorePlanRestoreConfigSelectedApplicationsNamespacedNamesToHclTerraform;
class GkeBackupRestorePlanRestoreConfigSelectedApplicationsNamespacedNamesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._namespace !== undefined) {
            hasAnyValues = true;
            internalValueResult.namespace = this._namespace;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
            this._namespace = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
            this._namespace = value.namespace;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get namespace() {
        return this.getStringAttribute('namespace');
    }
    set namespace(value) {
        this._namespace = value;
    }
    // Temporarily expose input value. Use with caution.
    get namespaceInput() {
        return this._namespace;
    }
}
exports.GkeBackupRestorePlanRestoreConfigSelectedApplicationsNamespacedNamesOutputReference = GkeBackupRestorePlanRestoreConfigSelectedApplicationsNamespacedNamesOutputReference;
_m = JSII_RTTI_SYMBOL_1;
GkeBackupRestorePlanRestoreConfigSelectedApplicationsNamespacedNamesOutputReference[_m] = { fqn: "@cdktf/provider-google.gkeBackupRestorePlan.GkeBackupRestorePlanRestoreConfigSelectedApplicationsNamespacedNamesOutputReference", version: "14.13.1" };
class GkeBackupRestorePlanRestoreConfigSelectedApplicationsNamespacedNamesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new GkeBackupRestorePlanRestoreConfigSelectedApplicationsNamespacedNamesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.GkeBackupRestorePlanRestoreConfigSelectedApplicationsNamespacedNamesList = GkeBackupRestorePlanRestoreConfigSelectedApplicationsNamespacedNamesList;
_o = JSII_RTTI_SYMBOL_1;
GkeBackupRestorePlanRestoreConfigSelectedApplicationsNamespacedNamesList[_o] = { fqn: "@cdktf/provider-google.gkeBackupRestorePlan.GkeBackupRestorePlanRestoreConfigSelectedApplicationsNamespacedNamesList", version: "14.13.1" };
function gkeBackupRestorePlanRestoreConfigSelectedApplicationsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        namespaced_names: cdktf.listMapper(gkeBackupRestorePlanRestoreConfigSelectedApplicationsNamespacedNamesToTerraform, true)(struct.namespacedNames),
    };
}
exports.gkeBackupRestorePlanRestoreConfigSelectedApplicationsToTerraform = gkeBackupRestorePlanRestoreConfigSelectedApplicationsToTerraform;
function gkeBackupRestorePlanRestoreConfigSelectedApplicationsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        namespaced_names: {
            value: cdktf.listMapperHcl(gkeBackupRestorePlanRestoreConfigSelectedApplicationsNamespacedNamesToHclTerraform, true)(struct.namespacedNames),
            isBlock: true,
            type: "list",
            storageClassType: "GkeBackupRestorePlanRestoreConfigSelectedApplicationsNamespacedNamesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeBackupRestorePlanRestoreConfigSelectedApplicationsToHclTerraform = gkeBackupRestorePlanRestoreConfigSelectedApplicationsToHclTerraform;
class GkeBackupRestorePlanRestoreConfigSelectedApplicationsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // namespaced_names - computed: false, optional: false, required: true
        this._namespacedNames = new GkeBackupRestorePlanRestoreConfigSelectedApplicationsNamespacedNamesList(this, "namespaced_names", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._namespacedNames?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.namespacedNames = this._namespacedNames?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._namespacedNames.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._namespacedNames.internalValue = value.namespacedNames;
        }
    }
    get namespacedNames() {
        return this._namespacedNames;
    }
    putNamespacedNames(value) {
        this._namespacedNames.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get namespacedNamesInput() {
        return this._namespacedNames.internalValue;
    }
}
exports.GkeBackupRestorePlanRestoreConfigSelectedApplicationsOutputReference = GkeBackupRestorePlanRestoreConfigSelectedApplicationsOutputReference;
_p = JSII_RTTI_SYMBOL_1;
GkeBackupRestorePlanRestoreConfigSelectedApplicationsOutputReference[_p] = { fqn: "@cdktf/provider-google.gkeBackupRestorePlan.GkeBackupRestorePlanRestoreConfigSelectedApplicationsOutputReference", version: "14.13.1" };
function gkeBackupRestorePlanRestoreConfigSelectedNamespacesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        namespaces: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.namespaces),
    };
}
exports.gkeBackupRestorePlanRestoreConfigSelectedNamespacesToTerraform = gkeBackupRestorePlanRestoreConfigSelectedNamespacesToTerraform;
function gkeBackupRestorePlanRestoreConfigSelectedNamespacesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        namespaces: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.namespaces),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeBackupRestorePlanRestoreConfigSelectedNamespacesToHclTerraform = gkeBackupRestorePlanRestoreConfigSelectedNamespacesToHclTerraform;
class GkeBackupRestorePlanRestoreConfigSelectedNamespacesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._namespaces !== undefined) {
            hasAnyValues = true;
            internalValueResult.namespaces = this._namespaces;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._namespaces = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._namespaces = value.namespaces;
        }
    }
    get namespaces() {
        return this.getListAttribute('namespaces');
    }
    set namespaces(value) {
        this._namespaces = value;
    }
    // Temporarily expose input value. Use with caution.
    get namespacesInput() {
        return this._namespaces;
    }
}
exports.GkeBackupRestorePlanRestoreConfigSelectedNamespacesOutputReference = GkeBackupRestorePlanRestoreConfigSelectedNamespacesOutputReference;
_q = JSII_RTTI_SYMBOL_1;
GkeBackupRestorePlanRestoreConfigSelectedNamespacesOutputReference[_q] = { fqn: "@cdktf/provider-google.gkeBackupRestorePlan.GkeBackupRestorePlanRestoreConfigSelectedNamespacesOutputReference", version: "14.13.1" };
function gkeBackupRestorePlanRestoreConfigTransformationRulesFieldActionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        from_path: cdktf.stringToTerraform(struct.fromPath),
        op: cdktf.stringToTerraform(struct.op),
        path: cdktf.stringToTerraform(struct.path),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.gkeBackupRestorePlanRestoreConfigTransformationRulesFieldActionsToTerraform = gkeBackupRestorePlanRestoreConfigTransformationRulesFieldActionsToTerraform;
function gkeBackupRestorePlanRestoreConfigTransformationRulesFieldActionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        from_path: {
            value: cdktf.stringToHclTerraform(struct.fromPath),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        op: {
            value: cdktf.stringToHclTerraform(struct.op),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        path: {
            value: cdktf.stringToHclTerraform(struct.path),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeBackupRestorePlanRestoreConfigTransformationRulesFieldActionsToHclTerraform = gkeBackupRestorePlanRestoreConfigTransformationRulesFieldActionsToHclTerraform;
class GkeBackupRestorePlanRestoreConfigTransformationRulesFieldActionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._fromPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.fromPath = this._fromPath;
        }
        if (this._op !== undefined) {
            hasAnyValues = true;
            internalValueResult.op = this._op;
        }
        if (this._path !== undefined) {
            hasAnyValues = true;
            internalValueResult.path = this._path;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._fromPath = undefined;
            this._op = undefined;
            this._path = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._fromPath = value.fromPath;
            this._op = value.op;
            this._path = value.path;
            this._value = value.value;
        }
    }
    get fromPath() {
        return this.getStringAttribute('from_path');
    }
    set fromPath(value) {
        this._fromPath = value;
    }
    resetFromPath() {
        this._fromPath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fromPathInput() {
        return this._fromPath;
    }
    get op() {
        return this.getStringAttribute('op');
    }
    set op(value) {
        this._op = value;
    }
    // Temporarily expose input value. Use with caution.
    get opInput() {
        return this._op;
    }
    get path() {
        return this.getStringAttribute('path');
    }
    set path(value) {
        this._path = value;
    }
    resetPath() {
        this._path = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pathInput() {
        return this._path;
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    resetValue() {
        this._value = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.GkeBackupRestorePlanRestoreConfigTransformationRulesFieldActionsOutputReference = GkeBackupRestorePlanRestoreConfigTransformationRulesFieldActionsOutputReference;
_r = JSII_RTTI_SYMBOL_1;
GkeBackupRestorePlanRestoreConfigTransformationRulesFieldActionsOutputReference[_r] = { fqn: "@cdktf/provider-google.gkeBackupRestorePlan.GkeBackupRestorePlanRestoreConfigTransformationRulesFieldActionsOutputReference", version: "14.13.1" };
class GkeBackupRestorePlanRestoreConfigTransformationRulesFieldActionsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new GkeBackupRestorePlanRestoreConfigTransformationRulesFieldActionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.GkeBackupRestorePlanRestoreConfigTransformationRulesFieldActionsList = GkeBackupRestorePlanRestoreConfigTransformationRulesFieldActionsList;
_s = JSII_RTTI_SYMBOL_1;
GkeBackupRestorePlanRestoreConfigTransformationRulesFieldActionsList[_s] = { fqn: "@cdktf/provider-google.gkeBackupRestorePlan.GkeBackupRestorePlanRestoreConfigTransformationRulesFieldActionsList", version: "14.13.1" };
function gkeBackupRestorePlanRestoreConfigTransformationRulesResourceFilterGroupKindsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        resource_group: cdktf.stringToTerraform(struct.resourceGroup),
        resource_kind: cdktf.stringToTerraform(struct.resourceKind),
    };
}
exports.gkeBackupRestorePlanRestoreConfigTransformationRulesResourceFilterGroupKindsToTerraform = gkeBackupRestorePlanRestoreConfigTransformationRulesResourceFilterGroupKindsToTerraform;
function gkeBackupRestorePlanRestoreConfigTransformationRulesResourceFilterGroupKindsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        resource_group: {
            value: cdktf.stringToHclTerraform(struct.resourceGroup),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        resource_kind: {
            value: cdktf.stringToHclTerraform(struct.resourceKind),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeBackupRestorePlanRestoreConfigTransformationRulesResourceFilterGroupKindsToHclTerraform = gkeBackupRestorePlanRestoreConfigTransformationRulesResourceFilterGroupKindsToHclTerraform;
class GkeBackupRestorePlanRestoreConfigTransformationRulesResourceFilterGroupKindsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._resourceGroup !== undefined) {
            hasAnyValues = true;
            internalValueResult.resourceGroup = this._resourceGroup;
        }
        if (this._resourceKind !== undefined) {
            hasAnyValues = true;
            internalValueResult.resourceKind = this._resourceKind;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._resourceGroup = undefined;
            this._resourceKind = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._resourceGroup = value.resourceGroup;
            this._resourceKind = value.resourceKind;
        }
    }
    get resourceGroup() {
        return this.getStringAttribute('resource_group');
    }
    set resourceGroup(value) {
        this._resourceGroup = value;
    }
    resetResourceGroup() {
        this._resourceGroup = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceGroupInput() {
        return this._resourceGroup;
    }
    get resourceKind() {
        return this.getStringAttribute('resource_kind');
    }
    set resourceKind(value) {
        this._resourceKind = value;
    }
    resetResourceKind() {
        this._resourceKind = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceKindInput() {
        return this._resourceKind;
    }
}
exports.GkeBackupRestorePlanRestoreConfigTransformationRulesResourceFilterGroupKindsOutputReference = GkeBackupRestorePlanRestoreConfigTransformationRulesResourceFilterGroupKindsOutputReference;
_t = JSII_RTTI_SYMBOL_1;
GkeBackupRestorePlanRestoreConfigTransformationRulesResourceFilterGroupKindsOutputReference[_t] = { fqn: "@cdktf/provider-google.gkeBackupRestorePlan.GkeBackupRestorePlanRestoreConfigTransformationRulesResourceFilterGroupKindsOutputReference", version: "14.13.1" };
class GkeBackupRestorePlanRestoreConfigTransformationRulesResourceFilterGroupKindsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new GkeBackupRestorePlanRestoreConfigTransformationRulesResourceFilterGroupKindsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.GkeBackupRestorePlanRestoreConfigTransformationRulesResourceFilterGroupKindsList = GkeBackupRestorePlanRestoreConfigTransformationRulesResourceFilterGroupKindsList;
_u = JSII_RTTI_SYMBOL_1;
GkeBackupRestorePlanRestoreConfigTransformationRulesResourceFilterGroupKindsList[_u] = { fqn: "@cdktf/provider-google.gkeBackupRestorePlan.GkeBackupRestorePlanRestoreConfigTransformationRulesResourceFilterGroupKindsList", version: "14.13.1" };
function gkeBackupRestorePlanRestoreConfigTransformationRulesResourceFilterToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        json_path: cdktf.stringToTerraform(struct.jsonPath),
        namespaces: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.namespaces),
        group_kinds: cdktf.listMapper(gkeBackupRestorePlanRestoreConfigTransformationRulesResourceFilterGroupKindsToTerraform, true)(struct.groupKinds),
    };
}
exports.gkeBackupRestorePlanRestoreConfigTransformationRulesResourceFilterToTerraform = gkeBackupRestorePlanRestoreConfigTransformationRulesResourceFilterToTerraform;
function gkeBackupRestorePlanRestoreConfigTransformationRulesResourceFilterToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        json_path: {
            value: cdktf.stringToHclTerraform(struct.jsonPath),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        namespaces: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.namespaces),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        group_kinds: {
            value: cdktf.listMapperHcl(gkeBackupRestorePlanRestoreConfigTransformationRulesResourceFilterGroupKindsToHclTerraform, true)(struct.groupKinds),
            isBlock: true,
            type: "list",
            storageClassType: "GkeBackupRestorePlanRestoreConfigTransformationRulesResourceFilterGroupKindsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeBackupRestorePlanRestoreConfigTransformationRulesResourceFilterToHclTerraform = gkeBackupRestorePlanRestoreConfigTransformationRulesResourceFilterToHclTerraform;
class GkeBackupRestorePlanRestoreConfigTransformationRulesResourceFilterOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // group_kinds - computed: false, optional: true, required: false
        this._groupKinds = new GkeBackupRestorePlanRestoreConfigTransformationRulesResourceFilterGroupKindsList(this, "group_kinds", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._jsonPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.jsonPath = this._jsonPath;
        }
        if (this._namespaces !== undefined) {
            hasAnyValues = true;
            internalValueResult.namespaces = this._namespaces;
        }
        if (this._groupKinds?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.groupKinds = this._groupKinds?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._jsonPath = undefined;
            this._namespaces = undefined;
            this._groupKinds.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._jsonPath = value.jsonPath;
            this._namespaces = value.namespaces;
            this._groupKinds.internalValue = value.groupKinds;
        }
    }
    get jsonPath() {
        return this.getStringAttribute('json_path');
    }
    set jsonPath(value) {
        this._jsonPath = value;
    }
    resetJsonPath() {
        this._jsonPath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jsonPathInput() {
        return this._jsonPath;
    }
    get namespaces() {
        return this.getListAttribute('namespaces');
    }
    set namespaces(value) {
        this._namespaces = value;
    }
    resetNamespaces() {
        this._namespaces = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get namespacesInput() {
        return this._namespaces;
    }
    get groupKinds() {
        return this._groupKinds;
    }
    putGroupKinds(value) {
        this._groupKinds.internalValue = value;
    }
    resetGroupKinds() {
        this._groupKinds.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get groupKindsInput() {
        return this._groupKinds.internalValue;
    }
}
exports.GkeBackupRestorePlanRestoreConfigTransformationRulesResourceFilterOutputReference = GkeBackupRestorePlanRestoreConfigTransformationRulesResourceFilterOutputReference;
_v = JSII_RTTI_SYMBOL_1;
GkeBackupRestorePlanRestoreConfigTransformationRulesResourceFilterOutputReference[_v] = { fqn: "@cdktf/provider-google.gkeBackupRestorePlan.GkeBackupRestorePlanRestoreConfigTransformationRulesResourceFilterOutputReference", version: "14.13.1" };
function gkeBackupRestorePlanRestoreConfigTransformationRulesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        description: cdktf.stringToTerraform(struct.description),
        field_actions: cdktf.listMapper(gkeBackupRestorePlanRestoreConfigTransformationRulesFieldActionsToTerraform, true)(struct.fieldActions),
        resource_filter: gkeBackupRestorePlanRestoreConfigTransformationRulesResourceFilterToTerraform(struct.resourceFilter),
    };
}
exports.gkeBackupRestorePlanRestoreConfigTransformationRulesToTerraform = gkeBackupRestorePlanRestoreConfigTransformationRulesToTerraform;
function gkeBackupRestorePlanRestoreConfigTransformationRulesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        description: {
            value: cdktf.stringToHclTerraform(struct.description),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        field_actions: {
            value: cdktf.listMapperHcl(gkeBackupRestorePlanRestoreConfigTransformationRulesFieldActionsToHclTerraform, true)(struct.fieldActions),
            isBlock: true,
            type: "list",
            storageClassType: "GkeBackupRestorePlanRestoreConfigTransformationRulesFieldActionsList",
        },
        resource_filter: {
            value: gkeBackupRestorePlanRestoreConfigTransformationRulesResourceFilterToHclTerraform(struct.resourceFilter),
            isBlock: true,
            type: "list",
            storageClassType: "GkeBackupRestorePlanRestoreConfigTransformationRulesResourceFilterList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeBackupRestorePlanRestoreConfigTransformationRulesToHclTerraform = gkeBackupRestorePlanRestoreConfigTransformationRulesToHclTerraform;
class GkeBackupRestorePlanRestoreConfigTransformationRulesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // field_actions - computed: false, optional: false, required: true
        this._fieldActions = new GkeBackupRestorePlanRestoreConfigTransformationRulesFieldActionsList(this, "field_actions", false);
        // resource_filter - computed: false, optional: true, required: false
        this._resourceFilter = new GkeBackupRestorePlanRestoreConfigTransformationRulesResourceFilterOutputReference(this, "resource_filter");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._description !== undefined) {
            hasAnyValues = true;
            internalValueResult.description = this._description;
        }
        if (this._fieldActions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.fieldActions = this._fieldActions?.internalValue;
        }
        if (this._resourceFilter?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.resourceFilter = this._resourceFilter?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._description = undefined;
            this._fieldActions.internalValue = undefined;
            this._resourceFilter.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._description = value.description;
            this._fieldActions.internalValue = value.fieldActions;
            this._resourceFilter.internalValue = value.resourceFilter;
        }
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get fieldActions() {
        return this._fieldActions;
    }
    putFieldActions(value) {
        this._fieldActions.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get fieldActionsInput() {
        return this._fieldActions.internalValue;
    }
    get resourceFilter() {
        return this._resourceFilter;
    }
    putResourceFilter(value) {
        this._resourceFilter.internalValue = value;
    }
    resetResourceFilter() {
        this._resourceFilter.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceFilterInput() {
        return this._resourceFilter.internalValue;
    }
}
exports.GkeBackupRestorePlanRestoreConfigTransformationRulesOutputReference = GkeBackupRestorePlanRestoreConfigTransformationRulesOutputReference;
_w = JSII_RTTI_SYMBOL_1;
GkeBackupRestorePlanRestoreConfigTransformationRulesOutputReference[_w] = { fqn: "@cdktf/provider-google.gkeBackupRestorePlan.GkeBackupRestorePlanRestoreConfigTransformationRulesOutputReference", version: "14.13.1" };
class GkeBackupRestorePlanRestoreConfigTransformationRulesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new GkeBackupRestorePlanRestoreConfigTransformationRulesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.GkeBackupRestorePlanRestoreConfigTransformationRulesList = GkeBackupRestorePlanRestoreConfigTransformationRulesList;
_x = JSII_RTTI_SYMBOL_1;
GkeBackupRestorePlanRestoreConfigTransformationRulesList[_x] = { fqn: "@cdktf/provider-google.gkeBackupRestorePlan.GkeBackupRestorePlanRestoreConfigTransformationRulesList", version: "14.13.1" };
function gkeBackupRestorePlanRestoreConfigVolumeDataRestorePolicyBindingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        policy: cdktf.stringToTerraform(struct.policy),
        volume_type: cdktf.stringToTerraform(struct.volumeType),
    };
}
exports.gkeBackupRestorePlanRestoreConfigVolumeDataRestorePolicyBindingsToTerraform = gkeBackupRestorePlanRestoreConfigVolumeDataRestorePolicyBindingsToTerraform;
function gkeBackupRestorePlanRestoreConfigVolumeDataRestorePolicyBindingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        policy: {
            value: cdktf.stringToHclTerraform(struct.policy),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        volume_type: {
            value: cdktf.stringToHclTerraform(struct.volumeType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeBackupRestorePlanRestoreConfigVolumeDataRestorePolicyBindingsToHclTerraform = gkeBackupRestorePlanRestoreConfigVolumeDataRestorePolicyBindingsToHclTerraform;
class GkeBackupRestorePlanRestoreConfigVolumeDataRestorePolicyBindingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._policy !== undefined) {
            hasAnyValues = true;
            internalValueResult.policy = this._policy;
        }
        if (this._volumeType !== undefined) {
            hasAnyValues = true;
            internalValueResult.volumeType = this._volumeType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._policy = undefined;
            this._volumeType = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._policy = value.policy;
            this._volumeType = value.volumeType;
        }
    }
    get policy() {
        return this.getStringAttribute('policy');
    }
    set policy(value) {
        this._policy = value;
    }
    // Temporarily expose input value. Use with caution.
    get policyInput() {
        return this._policy;
    }
    get volumeType() {
        return this.getStringAttribute('volume_type');
    }
    set volumeType(value) {
        this._volumeType = value;
    }
    // Temporarily expose input value. Use with caution.
    get volumeTypeInput() {
        return this._volumeType;
    }
}
exports.GkeBackupRestorePlanRestoreConfigVolumeDataRestorePolicyBindingsOutputReference = GkeBackupRestorePlanRestoreConfigVolumeDataRestorePolicyBindingsOutputReference;
_y = JSII_RTTI_SYMBOL_1;
GkeBackupRestorePlanRestoreConfigVolumeDataRestorePolicyBindingsOutputReference[_y] = { fqn: "@cdktf/provider-google.gkeBackupRestorePlan.GkeBackupRestorePlanRestoreConfigVolumeDataRestorePolicyBindingsOutputReference", version: "14.13.1" };
class GkeBackupRestorePlanRestoreConfigVolumeDataRestorePolicyBindingsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new GkeBackupRestorePlanRestoreConfigVolumeDataRestorePolicyBindingsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.GkeBackupRestorePlanRestoreConfigVolumeDataRestorePolicyBindingsList = GkeBackupRestorePlanRestoreConfigVolumeDataRestorePolicyBindingsList;
_z = JSII_RTTI_SYMBOL_1;
GkeBackupRestorePlanRestoreConfigVolumeDataRestorePolicyBindingsList[_z] = { fqn: "@cdktf/provider-google.gkeBackupRestorePlan.GkeBackupRestorePlanRestoreConfigVolumeDataRestorePolicyBindingsList", version: "14.13.1" };
function gkeBackupRestorePlanRestoreConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        all_namespaces: cdktf.booleanToTerraform(struct.allNamespaces),
        cluster_resource_conflict_policy: cdktf.stringToTerraform(struct.clusterResourceConflictPolicy),
        namespaced_resource_restore_mode: cdktf.stringToTerraform(struct.namespacedResourceRestoreMode),
        no_namespaces: cdktf.booleanToTerraform(struct.noNamespaces),
        volume_data_restore_policy: cdktf.stringToTerraform(struct.volumeDataRestorePolicy),
        cluster_resource_restore_scope: gkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeToTerraform(struct.clusterResourceRestoreScope),
        excluded_namespaces: gkeBackupRestorePlanRestoreConfigExcludedNamespacesToTerraform(struct.excludedNamespaces),
        restore_order: gkeBackupRestorePlanRestoreConfigRestoreOrderToTerraform(struct.restoreOrder),
        selected_applications: gkeBackupRestorePlanRestoreConfigSelectedApplicationsToTerraform(struct.selectedApplications),
        selected_namespaces: gkeBackupRestorePlanRestoreConfigSelectedNamespacesToTerraform(struct.selectedNamespaces),
        transformation_rules: cdktf.listMapper(gkeBackupRestorePlanRestoreConfigTransformationRulesToTerraform, true)(struct.transformationRules),
        volume_data_restore_policy_bindings: cdktf.listMapper(gkeBackupRestorePlanRestoreConfigVolumeDataRestorePolicyBindingsToTerraform, true)(struct.volumeDataRestorePolicyBindings),
    };
}
exports.gkeBackupRestorePlanRestoreConfigToTerraform = gkeBackupRestorePlanRestoreConfigToTerraform;
function gkeBackupRestorePlanRestoreConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        all_namespaces: {
            value: cdktf.booleanToHclTerraform(struct.allNamespaces),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        cluster_resource_conflict_policy: {
            value: cdktf.stringToHclTerraform(struct.clusterResourceConflictPolicy),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        namespaced_resource_restore_mode: {
            value: cdktf.stringToHclTerraform(struct.namespacedResourceRestoreMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        no_namespaces: {
            value: cdktf.booleanToHclTerraform(struct.noNamespaces),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        volume_data_restore_policy: {
            value: cdktf.stringToHclTerraform(struct.volumeDataRestorePolicy),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cluster_resource_restore_scope: {
            value: gkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeToHclTerraform(struct.clusterResourceRestoreScope),
            isBlock: true,
            type: "list",
            storageClassType: "GkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeList",
        },
        excluded_namespaces: {
            value: gkeBackupRestorePlanRestoreConfigExcludedNamespacesToHclTerraform(struct.excludedNamespaces),
            isBlock: true,
            type: "list",
            storageClassType: "GkeBackupRestorePlanRestoreConfigExcludedNamespacesList",
        },
        restore_order: {
            value: gkeBackupRestorePlanRestoreConfigRestoreOrderToHclTerraform(struct.restoreOrder),
            isBlock: true,
            type: "list",
            storageClassType: "GkeBackupRestorePlanRestoreConfigRestoreOrderList",
        },
        selected_applications: {
            value: gkeBackupRestorePlanRestoreConfigSelectedApplicationsToHclTerraform(struct.selectedApplications),
            isBlock: true,
            type: "list",
            storageClassType: "GkeBackupRestorePlanRestoreConfigSelectedApplicationsList",
        },
        selected_namespaces: {
            value: gkeBackupRestorePlanRestoreConfigSelectedNamespacesToHclTerraform(struct.selectedNamespaces),
            isBlock: true,
            type: "list",
            storageClassType: "GkeBackupRestorePlanRestoreConfigSelectedNamespacesList",
        },
        transformation_rules: {
            value: cdktf.listMapperHcl(gkeBackupRestorePlanRestoreConfigTransformationRulesToHclTerraform, true)(struct.transformationRules),
            isBlock: true,
            type: "list",
            storageClassType: "GkeBackupRestorePlanRestoreConfigTransformationRulesList",
        },
        volume_data_restore_policy_bindings: {
            value: cdktf.listMapperHcl(gkeBackupRestorePlanRestoreConfigVolumeDataRestorePolicyBindingsToHclTerraform, true)(struct.volumeDataRestorePolicyBindings),
            isBlock: true,
            type: "list",
            storageClassType: "GkeBackupRestorePlanRestoreConfigVolumeDataRestorePolicyBindingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeBackupRestorePlanRestoreConfigToHclTerraform = gkeBackupRestorePlanRestoreConfigToHclTerraform;
class GkeBackupRestorePlanRestoreConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cluster_resource_restore_scope - computed: false, optional: true, required: false
        this._clusterResourceRestoreScope = new GkeBackupRestorePlanRestoreConfigClusterResourceRestoreScopeOutputReference(this, "cluster_resource_restore_scope");
        // excluded_namespaces - computed: false, optional: true, required: false
        this._excludedNamespaces = new GkeBackupRestorePlanRestoreConfigExcludedNamespacesOutputReference(this, "excluded_namespaces");
        // restore_order - computed: false, optional: true, required: false
        this._restoreOrder = new GkeBackupRestorePlanRestoreConfigRestoreOrderOutputReference(this, "restore_order");
        // selected_applications - computed: false, optional: true, required: false
        this._selectedApplications = new GkeBackupRestorePlanRestoreConfigSelectedApplicationsOutputReference(this, "selected_applications");
        // selected_namespaces - computed: false, optional: true, required: false
        this._selectedNamespaces = new GkeBackupRestorePlanRestoreConfigSelectedNamespacesOutputReference(this, "selected_namespaces");
        // transformation_rules - computed: false, optional: true, required: false
        this._transformationRules = new GkeBackupRestorePlanRestoreConfigTransformationRulesList(this, "transformation_rules", false);
        // volume_data_restore_policy_bindings - computed: false, optional: true, required: false
        this._volumeDataRestorePolicyBindings = new GkeBackupRestorePlanRestoreConfigVolumeDataRestorePolicyBindingsList(this, "volume_data_restore_policy_bindings", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allNamespaces !== undefined) {
            hasAnyValues = true;
            internalValueResult.allNamespaces = this._allNamespaces;
        }
        if (this._clusterResourceConflictPolicy !== undefined) {
            hasAnyValues = true;
            internalValueResult.clusterResourceConflictPolicy = this._clusterResourceConflictPolicy;
        }
        if (this._namespacedResourceRestoreMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.namespacedResourceRestoreMode = this._namespacedResourceRestoreMode;
        }
        if (this._noNamespaces !== undefined) {
            hasAnyValues = true;
            internalValueResult.noNamespaces = this._noNamespaces;
        }
        if (this._volumeDataRestorePolicy !== undefined) {
            hasAnyValues = true;
            internalValueResult.volumeDataRestorePolicy = this._volumeDataRestorePolicy;
        }
        if (this._clusterResourceRestoreScope?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.clusterResourceRestoreScope = this._clusterResourceRestoreScope?.internalValue;
        }
        if (this._excludedNamespaces?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.excludedNamespaces = this._excludedNamespaces?.internalValue;
        }
        if (this._restoreOrder?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.restoreOrder = this._restoreOrder?.internalValue;
        }
        if (this._selectedApplications?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.selectedApplications = this._selectedApplications?.internalValue;
        }
        if (this._selectedNamespaces?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.selectedNamespaces = this._selectedNamespaces?.internalValue;
        }
        if (this._transformationRules?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.transformationRules = this._transformationRules?.internalValue;
        }
        if (this._volumeDataRestorePolicyBindings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.volumeDataRestorePolicyBindings = this._volumeDataRestorePolicyBindings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allNamespaces = undefined;
            this._clusterResourceConflictPolicy = undefined;
            this._namespacedResourceRestoreMode = undefined;
            this._noNamespaces = undefined;
            this._volumeDataRestorePolicy = undefined;
            this._clusterResourceRestoreScope.internalValue = undefined;
            this._excludedNamespaces.internalValue = undefined;
            this._restoreOrder.internalValue = undefined;
            this._selectedApplications.internalValue = undefined;
            this._selectedNamespaces.internalValue = undefined;
            this._transformationRules.internalValue = undefined;
            this._volumeDataRestorePolicyBindings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allNamespaces = value.allNamespaces;
            this._clusterResourceConflictPolicy = value.clusterResourceConflictPolicy;
            this._namespacedResourceRestoreMode = value.namespacedResourceRestoreMode;
            this._noNamespaces = value.noNamespaces;
            this._volumeDataRestorePolicy = value.volumeDataRestorePolicy;
            this._clusterResourceRestoreScope.internalValue = value.clusterResourceRestoreScope;
            this._excludedNamespaces.internalValue = value.excludedNamespaces;
            this._restoreOrder.internalValue = value.restoreOrder;
            this._selectedApplications.internalValue = value.selectedApplications;
            this._selectedNamespaces.internalValue = value.selectedNamespaces;
            this._transformationRules.internalValue = value.transformationRules;
            this._volumeDataRestorePolicyBindings.internalValue = value.volumeDataRestorePolicyBindings;
        }
    }
    get allNamespaces() {
        return this.getBooleanAttribute('all_namespaces');
    }
    set allNamespaces(value) {
        this._allNamespaces = value;
    }
    resetAllNamespaces() {
        this._allNamespaces = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allNamespacesInput() {
        return this._allNamespaces;
    }
    get clusterResourceConflictPolicy() {
        return this.getStringAttribute('cluster_resource_conflict_policy');
    }
    set clusterResourceConflictPolicy(value) {
        this._clusterResourceConflictPolicy = value;
    }
    resetClusterResourceConflictPolicy() {
        this._clusterResourceConflictPolicy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clusterResourceConflictPolicyInput() {
        return this._clusterResourceConflictPolicy;
    }
    get namespacedResourceRestoreMode() {
        return this.getStringAttribute('namespaced_resource_restore_mode');
    }
    set namespacedResourceRestoreMode(value) {
        this._namespacedResourceRestoreMode = value;
    }
    resetNamespacedResourceRestoreMode() {
        this._namespacedResourceRestoreMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get namespacedResourceRestoreModeInput() {
        return this._namespacedResourceRestoreMode;
    }
    get noNamespaces() {
        return this.getBooleanAttribute('no_namespaces');
    }
    set noNamespaces(value) {
        this._noNamespaces = value;
    }
    resetNoNamespaces() {
        this._noNamespaces = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get noNamespacesInput() {
        return this._noNamespaces;
    }
    get volumeDataRestorePolicy() {
        return this.getStringAttribute('volume_data_restore_policy');
    }
    set volumeDataRestorePolicy(value) {
        this._volumeDataRestorePolicy = value;
    }
    resetVolumeDataRestorePolicy() {
        this._volumeDataRestorePolicy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get volumeDataRestorePolicyInput() {
        return this._volumeDataRestorePolicy;
    }
    get clusterResourceRestoreScope() {
        return this._clusterResourceRestoreScope;
    }
    putClusterResourceRestoreScope(value) {
        this._clusterResourceRestoreScope.internalValue = value;
    }
    resetClusterResourceRestoreScope() {
        this._clusterResourceRestoreScope.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clusterResourceRestoreScopeInput() {
        return this._clusterResourceRestoreScope.internalValue;
    }
    get excludedNamespaces() {
        return this._excludedNamespaces;
    }
    putExcludedNamespaces(value) {
        this._excludedNamespaces.internalValue = value;
    }
    resetExcludedNamespaces() {
        this._excludedNamespaces.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludedNamespacesInput() {
        return this._excludedNamespaces.internalValue;
    }
    get restoreOrder() {
        return this._restoreOrder;
    }
    putRestoreOrder(value) {
        this._restoreOrder.internalValue = value;
    }
    resetRestoreOrder() {
        this._restoreOrder.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get restoreOrderInput() {
        return this._restoreOrder.internalValue;
    }
    get selectedApplications() {
        return this._selectedApplications;
    }
    putSelectedApplications(value) {
        this._selectedApplications.internalValue = value;
    }
    resetSelectedApplications() {
        this._selectedApplications.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get selectedApplicationsInput() {
        return this._selectedApplications.internalValue;
    }
    get selectedNamespaces() {
        return this._selectedNamespaces;
    }
    putSelectedNamespaces(value) {
        this._selectedNamespaces.internalValue = value;
    }
    resetSelectedNamespaces() {
        this._selectedNamespaces.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get selectedNamespacesInput() {
        return this._selectedNamespaces.internalValue;
    }
    get transformationRules() {
        return this._transformationRules;
    }
    putTransformationRules(value) {
        this._transformationRules.internalValue = value;
    }
    resetTransformationRules() {
        this._transformationRules.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get transformationRulesInput() {
        return this._transformationRules.internalValue;
    }
    get volumeDataRestorePolicyBindings() {
        return this._volumeDataRestorePolicyBindings;
    }
    putVolumeDataRestorePolicyBindings(value) {
        this._volumeDataRestorePolicyBindings.internalValue = value;
    }
    resetVolumeDataRestorePolicyBindings() {
        this._volumeDataRestorePolicyBindings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get volumeDataRestorePolicyBindingsInput() {
        return this._volumeDataRestorePolicyBindings.internalValue;
    }
}
exports.GkeBackupRestorePlanRestoreConfigOutputReference = GkeBackupRestorePlanRestoreConfigOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
GkeBackupRestorePlanRestoreConfigOutputReference[_0] = { fqn: "@cdktf/provider-google.gkeBackupRestorePlan.GkeBackupRestorePlanRestoreConfigOutputReference", version: "14.13.1" };
function gkeBackupRestorePlanTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.gkeBackupRestorePlanTimeoutsToTerraform = gkeBackupRestorePlanTimeoutsToTerraform;
function gkeBackupRestorePlanTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeBackupRestorePlanTimeoutsToHclTerraform = gkeBackupRestorePlanTimeoutsToHclTerraform;
class GkeBackupRestorePlanTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.GkeBackupRestorePlanTimeoutsOutputReference = GkeBackupRestorePlanTimeoutsOutputReference;
_1 = JSII_RTTI_SYMBOL_1;
GkeBackupRestorePlanTimeoutsOutputReference[_1] = { fqn: "@cdktf/provider-google.gkeBackupRestorePlan.GkeBackupRestorePlanTimeoutsOutputReference", version: "14.13.1" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/gke_backup_restore_plan google_gke_backup_restore_plan}
*/
class GkeBackupRestorePlan extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a GkeBackupRestorePlan resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the GkeBackupRestorePlan to import
    * @param importFromId The id of the existing GkeBackupRestorePlan that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/gke_backup_restore_plan#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the GkeBackupRestorePlan to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_gke_backup_restore_plan", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/gke_backup_restore_plan google_gke_backup_restore_plan} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options GkeBackupRestorePlanConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_gke_backup_restore_plan',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // effective_labels - computed: true, optional: false, required: false
        this._effectiveLabels = new cdktf.StringMap(this, "effective_labels");
        // terraform_labels - computed: true, optional: false, required: false
        this._terraformLabels = new cdktf.StringMap(this, "terraform_labels");
        // restore_config - computed: false, optional: false, required: true
        this._restoreConfig = new GkeBackupRestorePlanRestoreConfigOutputReference(this, "restore_config");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new GkeBackupRestorePlanTimeoutsOutputReference(this, "timeouts");
        this._backupPlan = config.backupPlan;
        this._cluster = config.cluster;
        this._description = config.description;
        this._id = config.id;
        this._labels = config.labels;
        this._location = config.location;
        this._name = config.name;
        this._project = config.project;
        this._restoreConfig.internalValue = config.restoreConfig;
        this._timeouts.internalValue = config.timeouts;
    }
    get backupPlan() {
        return this.getStringAttribute('backup_plan');
    }
    set backupPlan(value) {
        this._backupPlan = value;
    }
    // Temporarily expose input value. Use with caution.
    get backupPlanInput() {
        return this._backupPlan;
    }
    get cluster() {
        return this.getStringAttribute('cluster');
    }
    set cluster(value) {
        this._cluster = value;
    }
    // Temporarily expose input value. Use with caution.
    get clusterInput() {
        return this._cluster;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get effectiveLabels() {
        return this._effectiveLabels;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    // state - computed: true, optional: false, required: false
    get state() {
        return this.getStringAttribute('state');
    }
    // state_reason - computed: true, optional: false, required: false
    get stateReason() {
        return this.getStringAttribute('state_reason');
    }
    get terraformLabels() {
        return this._terraformLabels;
    }
    // uid - computed: true, optional: false, required: false
    get uid() {
        return this.getStringAttribute('uid');
    }
    get restoreConfig() {
        return this._restoreConfig;
    }
    putRestoreConfig(value) {
        this._restoreConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get restoreConfigInput() {
        return this._restoreConfig.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            backup_plan: cdktf.stringToTerraform(this._backupPlan),
            cluster: cdktf.stringToTerraform(this._cluster),
            description: cdktf.stringToTerraform(this._description),
            id: cdktf.stringToTerraform(this._id),
            labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._labels),
            location: cdktf.stringToTerraform(this._location),
            name: cdktf.stringToTerraform(this._name),
            project: cdktf.stringToTerraform(this._project),
            restore_config: gkeBackupRestorePlanRestoreConfigToTerraform(this._restoreConfig.internalValue),
            timeouts: gkeBackupRestorePlanTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            backup_plan: {
                value: cdktf.stringToHclTerraform(this._backupPlan),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            cluster: {
                value: cdktf.stringToHclTerraform(this._cluster),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            description: {
                value: cdktf.stringToHclTerraform(this._description),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            labels: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._labels),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            location: {
                value: cdktf.stringToHclTerraform(this._location),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            name: {
                value: cdktf.stringToHclTerraform(this._name),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            project: {
                value: cdktf.stringToHclTerraform(this._project),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            restore_config: {
                value: gkeBackupRestorePlanRestoreConfigToHclTerraform(this._restoreConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "GkeBackupRestorePlanRestoreConfigList",
            },
            timeouts: {
                value: gkeBackupRestorePlanTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "GkeBackupRestorePlanTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.GkeBackupRestorePlan = GkeBackupRestorePlan;
_2 = JSII_RTTI_SYMBOL_1;
GkeBackupRestorePlan[_2] = { fqn: "@cdktf/provider-google.gkeBackupRestorePlan.GkeBackupRestorePlan", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
GkeBackupRestorePlan.tfResourceType = "google_gke_backup_restore_plan";
//# sourceMappingURL=data:application/json;base64,