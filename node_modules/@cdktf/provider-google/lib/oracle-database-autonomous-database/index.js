"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OracleDatabaseAutonomousDatabase = exports.OracleDatabaseAutonomousDatabaseTimeoutsOutputReference = exports.oracleDatabaseAutonomousDatabaseTimeoutsToHclTerraform = exports.oracleDatabaseAutonomousDatabaseTimeoutsToTerraform = exports.OracleDatabaseAutonomousDatabasePropertiesOutputReference = exports.oracleDatabaseAutonomousDatabasePropertiesToHclTerraform = exports.oracleDatabaseAutonomousDatabasePropertiesToTerraform = exports.OracleDatabaseAutonomousDatabasePropertiesCustomerContactsList = exports.OracleDatabaseAutonomousDatabasePropertiesCustomerContactsOutputReference = exports.oracleDatabaseAutonomousDatabasePropertiesCustomerContactsToHclTerraform = exports.oracleDatabaseAutonomousDatabasePropertiesCustomerContactsToTerraform = exports.OracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsList = exports.OracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsOutputReference = exports.oracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsToHclTerraform = exports.oracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsToTerraform = exports.OracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTimeList = exports.OracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTimeOutputReference = exports.oracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTimeToHclTerraform = exports.oracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTimeToTerraform = exports.OracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTimeList = exports.OracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTimeOutputReference = exports.oracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTimeToHclTerraform = exports.oracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTimeToTerraform = exports.OracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbList = exports.OracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbOutputReference = exports.oracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbToHclTerraform = exports.oracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbToTerraform = exports.OracleDatabaseAutonomousDatabasePropertiesConnectionUrlsList = exports.OracleDatabaseAutonomousDatabasePropertiesConnectionUrlsOutputReference = exports.oracleDatabaseAutonomousDatabasePropertiesConnectionUrlsToHclTerraform = exports.oracleDatabaseAutonomousDatabasePropertiesConnectionUrlsToTerraform = exports.OracleDatabaseAutonomousDatabasePropertiesConnectionStringsList = exports.OracleDatabaseAutonomousDatabasePropertiesConnectionStringsOutputReference = exports.oracleDatabaseAutonomousDatabasePropertiesConnectionStringsToHclTerraform = exports.oracleDatabaseAutonomousDatabasePropertiesConnectionStringsToTerraform = exports.OracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesList = exports.OracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesOutputReference = exports.oracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesToHclTerraform = exports.oracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesToTerraform = exports.OracleDatabaseAutonomousDatabasePropertiesConnectionStringsAllConnectionStringsList = exports.OracleDatabaseAutonomousDatabasePropertiesConnectionStringsAllConnectionStringsOutputReference = exports.oracleDatabaseAutonomousDatabasePropertiesConnectionStringsAllConnectionStringsToHclTerraform = exports.oracleDatabaseAutonomousDatabasePropertiesConnectionStringsAllConnectionStringsToTerraform = exports.OracleDatabaseAutonomousDatabasePropertiesApexDetailsList = exports.OracleDatabaseAutonomousDatabasePropertiesApexDetailsOutputReference = exports.oracleDatabaseAutonomousDatabasePropertiesApexDetailsToHclTerraform = exports.oracleDatabaseAutonomousDatabasePropertiesApexDetailsToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function oracleDatabaseAutonomousDatabasePropertiesApexDetailsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.oracleDatabaseAutonomousDatabasePropertiesApexDetailsToTerraform = oracleDatabaseAutonomousDatabasePropertiesApexDetailsToTerraform;
function oracleDatabaseAutonomousDatabasePropertiesApexDetailsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.oracleDatabaseAutonomousDatabasePropertiesApexDetailsToHclTerraform = oracleDatabaseAutonomousDatabasePropertiesApexDetailsToHclTerraform;
class OracleDatabaseAutonomousDatabasePropertiesApexDetailsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // apex_version - computed: true, optional: false, required: false
    get apexVersion() {
        return this.getStringAttribute('apex_version');
    }
    // ords_version - computed: true, optional: false, required: false
    get ordsVersion() {
        return this.getStringAttribute('ords_version');
    }
}
exports.OracleDatabaseAutonomousDatabasePropertiesApexDetailsOutputReference = OracleDatabaseAutonomousDatabasePropertiesApexDetailsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
OracleDatabaseAutonomousDatabasePropertiesApexDetailsOutputReference[_a] = { fqn: "@cdktf/provider-google.oracleDatabaseAutonomousDatabase.OracleDatabaseAutonomousDatabasePropertiesApexDetailsOutputReference", version: "14.13.1" };
class OracleDatabaseAutonomousDatabasePropertiesApexDetailsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new OracleDatabaseAutonomousDatabasePropertiesApexDetailsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.OracleDatabaseAutonomousDatabasePropertiesApexDetailsList = OracleDatabaseAutonomousDatabasePropertiesApexDetailsList;
_b = JSII_RTTI_SYMBOL_1;
OracleDatabaseAutonomousDatabasePropertiesApexDetailsList[_b] = { fqn: "@cdktf/provider-google.oracleDatabaseAutonomousDatabase.OracleDatabaseAutonomousDatabasePropertiesApexDetailsList", version: "14.13.1" };
function oracleDatabaseAutonomousDatabasePropertiesConnectionStringsAllConnectionStringsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.oracleDatabaseAutonomousDatabasePropertiesConnectionStringsAllConnectionStringsToTerraform = oracleDatabaseAutonomousDatabasePropertiesConnectionStringsAllConnectionStringsToTerraform;
function oracleDatabaseAutonomousDatabasePropertiesConnectionStringsAllConnectionStringsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.oracleDatabaseAutonomousDatabasePropertiesConnectionStringsAllConnectionStringsToHclTerraform = oracleDatabaseAutonomousDatabasePropertiesConnectionStringsAllConnectionStringsToHclTerraform;
class OracleDatabaseAutonomousDatabasePropertiesConnectionStringsAllConnectionStringsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // high - computed: true, optional: false, required: false
    get high() {
        return this.getStringAttribute('high');
    }
    // low - computed: true, optional: false, required: false
    get low() {
        return this.getStringAttribute('low');
    }
    // medium - computed: true, optional: false, required: false
    get medium() {
        return this.getStringAttribute('medium');
    }
}
exports.OracleDatabaseAutonomousDatabasePropertiesConnectionStringsAllConnectionStringsOutputReference = OracleDatabaseAutonomousDatabasePropertiesConnectionStringsAllConnectionStringsOutputReference;
_c = JSII_RTTI_SYMBOL_1;
OracleDatabaseAutonomousDatabasePropertiesConnectionStringsAllConnectionStringsOutputReference[_c] = { fqn: "@cdktf/provider-google.oracleDatabaseAutonomousDatabase.OracleDatabaseAutonomousDatabasePropertiesConnectionStringsAllConnectionStringsOutputReference", version: "14.13.1" };
class OracleDatabaseAutonomousDatabasePropertiesConnectionStringsAllConnectionStringsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new OracleDatabaseAutonomousDatabasePropertiesConnectionStringsAllConnectionStringsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.OracleDatabaseAutonomousDatabasePropertiesConnectionStringsAllConnectionStringsList = OracleDatabaseAutonomousDatabasePropertiesConnectionStringsAllConnectionStringsList;
_d = JSII_RTTI_SYMBOL_1;
OracleDatabaseAutonomousDatabasePropertiesConnectionStringsAllConnectionStringsList[_d] = { fqn: "@cdktf/provider-google.oracleDatabaseAutonomousDatabase.OracleDatabaseAutonomousDatabasePropertiesConnectionStringsAllConnectionStringsList", version: "14.13.1" };
function oracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.oracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesToTerraform = oracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesToTerraform;
function oracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.oracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesToHclTerraform = oracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesToHclTerraform;
class OracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // consumer_group - computed: true, optional: false, required: false
    get consumerGroup() {
        return this.getStringAttribute('consumer_group');
    }
    // display_name - computed: true, optional: false, required: false
    get displayName() {
        return this.getStringAttribute('display_name');
    }
    // host_format - computed: true, optional: false, required: false
    get hostFormat() {
        return this.getStringAttribute('host_format');
    }
    // is_regional - computed: true, optional: false, required: false
    get isRegional() {
        return this.getBooleanAttribute('is_regional');
    }
    // protocol - computed: true, optional: false, required: false
    get protocol() {
        return this.getStringAttribute('protocol');
    }
    // session_mode - computed: true, optional: false, required: false
    get sessionMode() {
        return this.getStringAttribute('session_mode');
    }
    // syntax_format - computed: true, optional: false, required: false
    get syntaxFormat() {
        return this.getStringAttribute('syntax_format');
    }
    // tls_authentication - computed: true, optional: false, required: false
    get tlsAuthentication() {
        return this.getStringAttribute('tls_authentication');
    }
    // value - computed: true, optional: false, required: false
    get value() {
        return this.getStringAttribute('value');
    }
}
exports.OracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesOutputReference = OracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesOutputReference;
_e = JSII_RTTI_SYMBOL_1;
OracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesOutputReference[_e] = { fqn: "@cdktf/provider-google.oracleDatabaseAutonomousDatabase.OracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesOutputReference", version: "14.13.1" };
class OracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new OracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.OracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesList = OracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesList;
_f = JSII_RTTI_SYMBOL_1;
OracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesList[_f] = { fqn: "@cdktf/provider-google.oracleDatabaseAutonomousDatabase.OracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesList", version: "14.13.1" };
function oracleDatabaseAutonomousDatabasePropertiesConnectionStringsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.oracleDatabaseAutonomousDatabasePropertiesConnectionStringsToTerraform = oracleDatabaseAutonomousDatabasePropertiesConnectionStringsToTerraform;
function oracleDatabaseAutonomousDatabasePropertiesConnectionStringsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.oracleDatabaseAutonomousDatabasePropertiesConnectionStringsToHclTerraform = oracleDatabaseAutonomousDatabasePropertiesConnectionStringsToHclTerraform;
class OracleDatabaseAutonomousDatabasePropertiesConnectionStringsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // all_connection_strings - computed: true, optional: false, required: false
        this._allConnectionStrings = new OracleDatabaseAutonomousDatabasePropertiesConnectionStringsAllConnectionStringsList(this, "all_connection_strings", false);
        // profiles - computed: true, optional: false, required: false
        this._profiles = new OracleDatabaseAutonomousDatabasePropertiesConnectionStringsProfilesList(this, "profiles", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    get allConnectionStrings() {
        return this._allConnectionStrings;
    }
    // dedicated - computed: true, optional: false, required: false
    get dedicated() {
        return this.getStringAttribute('dedicated');
    }
    // high - computed: true, optional: false, required: false
    get high() {
        return this.getStringAttribute('high');
    }
    // low - computed: true, optional: false, required: false
    get low() {
        return this.getStringAttribute('low');
    }
    // medium - computed: true, optional: false, required: false
    get medium() {
        return this.getStringAttribute('medium');
    }
    get profiles() {
        return this._profiles;
    }
}
exports.OracleDatabaseAutonomousDatabasePropertiesConnectionStringsOutputReference = OracleDatabaseAutonomousDatabasePropertiesConnectionStringsOutputReference;
_g = JSII_RTTI_SYMBOL_1;
OracleDatabaseAutonomousDatabasePropertiesConnectionStringsOutputReference[_g] = { fqn: "@cdktf/provider-google.oracleDatabaseAutonomousDatabase.OracleDatabaseAutonomousDatabasePropertiesConnectionStringsOutputReference", version: "14.13.1" };
class OracleDatabaseAutonomousDatabasePropertiesConnectionStringsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new OracleDatabaseAutonomousDatabasePropertiesConnectionStringsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.OracleDatabaseAutonomousDatabasePropertiesConnectionStringsList = OracleDatabaseAutonomousDatabasePropertiesConnectionStringsList;
_h = JSII_RTTI_SYMBOL_1;
OracleDatabaseAutonomousDatabasePropertiesConnectionStringsList[_h] = { fqn: "@cdktf/provider-google.oracleDatabaseAutonomousDatabase.OracleDatabaseAutonomousDatabasePropertiesConnectionStringsList", version: "14.13.1" };
function oracleDatabaseAutonomousDatabasePropertiesConnectionUrlsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.oracleDatabaseAutonomousDatabasePropertiesConnectionUrlsToTerraform = oracleDatabaseAutonomousDatabasePropertiesConnectionUrlsToTerraform;
function oracleDatabaseAutonomousDatabasePropertiesConnectionUrlsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.oracleDatabaseAutonomousDatabasePropertiesConnectionUrlsToHclTerraform = oracleDatabaseAutonomousDatabasePropertiesConnectionUrlsToHclTerraform;
class OracleDatabaseAutonomousDatabasePropertiesConnectionUrlsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // apex_uri - computed: true, optional: false, required: false
    get apexUri() {
        return this.getStringAttribute('apex_uri');
    }
    // database_transforms_uri - computed: true, optional: false, required: false
    get databaseTransformsUri() {
        return this.getStringAttribute('database_transforms_uri');
    }
    // graph_studio_uri - computed: true, optional: false, required: false
    get graphStudioUri() {
        return this.getStringAttribute('graph_studio_uri');
    }
    // machine_learning_notebook_uri - computed: true, optional: false, required: false
    get machineLearningNotebookUri() {
        return this.getStringAttribute('machine_learning_notebook_uri');
    }
    // machine_learning_user_management_uri - computed: true, optional: false, required: false
    get machineLearningUserManagementUri() {
        return this.getStringAttribute('machine_learning_user_management_uri');
    }
    // mongo_db_uri - computed: true, optional: false, required: false
    get mongoDbUri() {
        return this.getStringAttribute('mongo_db_uri');
    }
    // ords_uri - computed: true, optional: false, required: false
    get ordsUri() {
        return this.getStringAttribute('ords_uri');
    }
    // sql_dev_web_uri - computed: true, optional: false, required: false
    get sqlDevWebUri() {
        return this.getStringAttribute('sql_dev_web_uri');
    }
}
exports.OracleDatabaseAutonomousDatabasePropertiesConnectionUrlsOutputReference = OracleDatabaseAutonomousDatabasePropertiesConnectionUrlsOutputReference;
_j = JSII_RTTI_SYMBOL_1;
OracleDatabaseAutonomousDatabasePropertiesConnectionUrlsOutputReference[_j] = { fqn: "@cdktf/provider-google.oracleDatabaseAutonomousDatabase.OracleDatabaseAutonomousDatabasePropertiesConnectionUrlsOutputReference", version: "14.13.1" };
class OracleDatabaseAutonomousDatabasePropertiesConnectionUrlsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new OracleDatabaseAutonomousDatabasePropertiesConnectionUrlsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.OracleDatabaseAutonomousDatabasePropertiesConnectionUrlsList = OracleDatabaseAutonomousDatabasePropertiesConnectionUrlsList;
_k = JSII_RTTI_SYMBOL_1;
OracleDatabaseAutonomousDatabasePropertiesConnectionUrlsList[_k] = { fqn: "@cdktf/provider-google.oracleDatabaseAutonomousDatabase.OracleDatabaseAutonomousDatabasePropertiesConnectionUrlsList", version: "14.13.1" };
function oracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.oracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbToTerraform = oracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbToTerraform;
function oracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.oracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbToHclTerraform = oracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbToHclTerraform;
class OracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // data_guard_role_changed_time - computed: true, optional: false, required: false
    get dataGuardRoleChangedTime() {
        return this.getStringAttribute('data_guard_role_changed_time');
    }
    // disaster_recovery_role_changed_time - computed: true, optional: false, required: false
    get disasterRecoveryRoleChangedTime() {
        return this.getStringAttribute('disaster_recovery_role_changed_time');
    }
    // lag_time_duration - computed: true, optional: false, required: false
    get lagTimeDuration() {
        return this.getStringAttribute('lag_time_duration');
    }
    // lifecycle_details - computed: true, optional: false, required: false
    get lifecycleDetails() {
        return this.getStringAttribute('lifecycle_details');
    }
    // state - computed: true, optional: false, required: false
    get state() {
        return this.getStringAttribute('state');
    }
}
exports.OracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbOutputReference = OracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbOutputReference;
_l = JSII_RTTI_SYMBOL_1;
OracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbOutputReference[_l] = { fqn: "@cdktf/provider-google.oracleDatabaseAutonomousDatabase.OracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbOutputReference", version: "14.13.1" };
class OracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new OracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.OracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbList = OracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbList;
_m = JSII_RTTI_SYMBOL_1;
OracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbList[_m] = { fqn: "@cdktf/provider-google.oracleDatabaseAutonomousDatabase.OracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbList", version: "14.13.1" };
function oracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTimeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.oracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTimeToTerraform = oracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTimeToTerraform;
function oracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTimeToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.oracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTimeToHclTerraform = oracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTimeToHclTerraform;
class OracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTimeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // hours - computed: true, optional: false, required: false
    get hours() {
        return this.getNumberAttribute('hours');
    }
    // minutes - computed: true, optional: false, required: false
    get minutes() {
        return this.getNumberAttribute('minutes');
    }
    // nanos - computed: true, optional: false, required: false
    get nanos() {
        return this.getNumberAttribute('nanos');
    }
    // seconds - computed: true, optional: false, required: false
    get seconds() {
        return this.getNumberAttribute('seconds');
    }
}
exports.OracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTimeOutputReference = OracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTimeOutputReference;
_o = JSII_RTTI_SYMBOL_1;
OracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTimeOutputReference[_o] = { fqn: "@cdktf/provider-google.oracleDatabaseAutonomousDatabase.OracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTimeOutputReference", version: "14.13.1" };
class OracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTimeList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new OracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTimeOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.OracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTimeList = OracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTimeList;
_p = JSII_RTTI_SYMBOL_1;
OracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTimeList[_p] = { fqn: "@cdktf/provider-google.oracleDatabaseAutonomousDatabase.OracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTimeList", version: "14.13.1" };
function oracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTimeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.oracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTimeToTerraform = oracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTimeToTerraform;
function oracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTimeToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.oracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTimeToHclTerraform = oracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTimeToHclTerraform;
class OracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTimeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // hours - computed: true, optional: false, required: false
    get hours() {
        return this.getNumberAttribute('hours');
    }
    // minutes - computed: true, optional: false, required: false
    get minutes() {
        return this.getNumberAttribute('minutes');
    }
    // nanos - computed: true, optional: false, required: false
    get nanos() {
        return this.getNumberAttribute('nanos');
    }
    // seconds - computed: true, optional: false, required: false
    get seconds() {
        return this.getNumberAttribute('seconds');
    }
}
exports.OracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTimeOutputReference = OracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTimeOutputReference;
_q = JSII_RTTI_SYMBOL_1;
OracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTimeOutputReference[_q] = { fqn: "@cdktf/provider-google.oracleDatabaseAutonomousDatabase.OracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTimeOutputReference", version: "14.13.1" };
class OracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTimeList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new OracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTimeOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.OracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTimeList = OracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTimeList;
_r = JSII_RTTI_SYMBOL_1;
OracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTimeList[_r] = { fqn: "@cdktf/provider-google.oracleDatabaseAutonomousDatabase.OracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTimeList", version: "14.13.1" };
function oracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.oracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsToTerraform = oracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsToTerraform;
function oracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.oracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsToHclTerraform = oracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsToHclTerraform;
class OracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // start_time - computed: true, optional: false, required: false
        this._startTime = new OracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStartTimeList(this, "start_time", false);
        // stop_time - computed: true, optional: false, required: false
        this._stopTime = new OracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsStopTimeList(this, "stop_time", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // day_of_week - computed: true, optional: false, required: false
    get dayOfWeek() {
        return this.getStringAttribute('day_of_week');
    }
    get startTime() {
        return this._startTime;
    }
    get stopTime() {
        return this._stopTime;
    }
}
exports.OracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsOutputReference = OracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsOutputReference;
_s = JSII_RTTI_SYMBOL_1;
OracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsOutputReference[_s] = { fqn: "@cdktf/provider-google.oracleDatabaseAutonomousDatabase.OracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsOutputReference", version: "14.13.1" };
class OracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new OracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.OracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsList = OracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsList;
_t = JSII_RTTI_SYMBOL_1;
OracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsList[_t] = { fqn: "@cdktf/provider-google.oracleDatabaseAutonomousDatabase.OracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsList", version: "14.13.1" };
function oracleDatabaseAutonomousDatabasePropertiesCustomerContactsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        email: cdktf.stringToTerraform(struct.email),
    };
}
exports.oracleDatabaseAutonomousDatabasePropertiesCustomerContactsToTerraform = oracleDatabaseAutonomousDatabasePropertiesCustomerContactsToTerraform;
function oracleDatabaseAutonomousDatabasePropertiesCustomerContactsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        email: {
            value: cdktf.stringToHclTerraform(struct.email),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.oracleDatabaseAutonomousDatabasePropertiesCustomerContactsToHclTerraform = oracleDatabaseAutonomousDatabasePropertiesCustomerContactsToHclTerraform;
class OracleDatabaseAutonomousDatabasePropertiesCustomerContactsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._email !== undefined) {
            hasAnyValues = true;
            internalValueResult.email = this._email;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._email = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._email = value.email;
        }
    }
    get email() {
        return this.getStringAttribute('email');
    }
    set email(value) {
        this._email = value;
    }
    // Temporarily expose input value. Use with caution.
    get emailInput() {
        return this._email;
    }
}
exports.OracleDatabaseAutonomousDatabasePropertiesCustomerContactsOutputReference = OracleDatabaseAutonomousDatabasePropertiesCustomerContactsOutputReference;
_u = JSII_RTTI_SYMBOL_1;
OracleDatabaseAutonomousDatabasePropertiesCustomerContactsOutputReference[_u] = { fqn: "@cdktf/provider-google.oracleDatabaseAutonomousDatabase.OracleDatabaseAutonomousDatabasePropertiesCustomerContactsOutputReference", version: "14.13.1" };
class OracleDatabaseAutonomousDatabasePropertiesCustomerContactsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new OracleDatabaseAutonomousDatabasePropertiesCustomerContactsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.OracleDatabaseAutonomousDatabasePropertiesCustomerContactsList = OracleDatabaseAutonomousDatabasePropertiesCustomerContactsList;
_v = JSII_RTTI_SYMBOL_1;
OracleDatabaseAutonomousDatabasePropertiesCustomerContactsList[_v] = { fqn: "@cdktf/provider-google.oracleDatabaseAutonomousDatabase.OracleDatabaseAutonomousDatabasePropertiesCustomerContactsList", version: "14.13.1" };
function oracleDatabaseAutonomousDatabasePropertiesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        backup_retention_period_days: cdktf.numberToTerraform(struct.backupRetentionPeriodDays),
        character_set: cdktf.stringToTerraform(struct.characterSet),
        compute_count: cdktf.numberToTerraform(struct.computeCount),
        data_storage_size_gb: cdktf.numberToTerraform(struct.dataStorageSizeGb),
        data_storage_size_tb: cdktf.numberToTerraform(struct.dataStorageSizeTb),
        db_edition: cdktf.stringToTerraform(struct.dbEdition),
        db_version: cdktf.stringToTerraform(struct.dbVersion),
        db_workload: cdktf.stringToTerraform(struct.dbWorkload),
        is_auto_scaling_enabled: cdktf.booleanToTerraform(struct.isAutoScalingEnabled),
        is_storage_auto_scaling_enabled: cdktf.booleanToTerraform(struct.isStorageAutoScalingEnabled),
        license_type: cdktf.stringToTerraform(struct.licenseType),
        maintenance_schedule_type: cdktf.stringToTerraform(struct.maintenanceScheduleType),
        mtls_connection_required: cdktf.booleanToTerraform(struct.mtlsConnectionRequired),
        n_character_set: cdktf.stringToTerraform(struct.nCharacterSet),
        operations_insights_state: cdktf.stringToTerraform(struct.operationsInsightsState),
        private_endpoint_ip: cdktf.stringToTerraform(struct.privateEndpointIp),
        private_endpoint_label: cdktf.stringToTerraform(struct.privateEndpointLabel),
        customer_contacts: cdktf.listMapper(oracleDatabaseAutonomousDatabasePropertiesCustomerContactsToTerraform, true)(struct.customerContacts),
    };
}
exports.oracleDatabaseAutonomousDatabasePropertiesToTerraform = oracleDatabaseAutonomousDatabasePropertiesToTerraform;
function oracleDatabaseAutonomousDatabasePropertiesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        backup_retention_period_days: {
            value: cdktf.numberToHclTerraform(struct.backupRetentionPeriodDays),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        character_set: {
            value: cdktf.stringToHclTerraform(struct.characterSet),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        compute_count: {
            value: cdktf.numberToHclTerraform(struct.computeCount),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        data_storage_size_gb: {
            value: cdktf.numberToHclTerraform(struct.dataStorageSizeGb),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        data_storage_size_tb: {
            value: cdktf.numberToHclTerraform(struct.dataStorageSizeTb),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        db_edition: {
            value: cdktf.stringToHclTerraform(struct.dbEdition),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        db_version: {
            value: cdktf.stringToHclTerraform(struct.dbVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        db_workload: {
            value: cdktf.stringToHclTerraform(struct.dbWorkload),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        is_auto_scaling_enabled: {
            value: cdktf.booleanToHclTerraform(struct.isAutoScalingEnabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        is_storage_auto_scaling_enabled: {
            value: cdktf.booleanToHclTerraform(struct.isStorageAutoScalingEnabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        license_type: {
            value: cdktf.stringToHclTerraform(struct.licenseType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        maintenance_schedule_type: {
            value: cdktf.stringToHclTerraform(struct.maintenanceScheduleType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        mtls_connection_required: {
            value: cdktf.booleanToHclTerraform(struct.mtlsConnectionRequired),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        n_character_set: {
            value: cdktf.stringToHclTerraform(struct.nCharacterSet),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        operations_insights_state: {
            value: cdktf.stringToHclTerraform(struct.operationsInsightsState),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        private_endpoint_ip: {
            value: cdktf.stringToHclTerraform(struct.privateEndpointIp),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        private_endpoint_label: {
            value: cdktf.stringToHclTerraform(struct.privateEndpointLabel),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        customer_contacts: {
            value: cdktf.listMapperHcl(oracleDatabaseAutonomousDatabasePropertiesCustomerContactsToHclTerraform, true)(struct.customerContacts),
            isBlock: true,
            type: "list",
            storageClassType: "OracleDatabaseAutonomousDatabasePropertiesCustomerContactsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.oracleDatabaseAutonomousDatabasePropertiesToHclTerraform = oracleDatabaseAutonomousDatabasePropertiesToHclTerraform;
class OracleDatabaseAutonomousDatabasePropertiesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // apex_details - computed: true, optional: false, required: false
        this._apexDetails = new OracleDatabaseAutonomousDatabasePropertiesApexDetailsList(this, "apex_details", false);
        // connection_strings - computed: true, optional: false, required: false
        this._connectionStrings = new OracleDatabaseAutonomousDatabasePropertiesConnectionStringsList(this, "connection_strings", false);
        // connection_urls - computed: true, optional: false, required: false
        this._connectionUrls = new OracleDatabaseAutonomousDatabasePropertiesConnectionUrlsList(this, "connection_urls", false);
        // local_standby_db - computed: true, optional: false, required: false
        this._localStandbyDb = new OracleDatabaseAutonomousDatabasePropertiesLocalStandbyDbList(this, "local_standby_db", false);
        // scheduled_operation_details - computed: true, optional: false, required: false
        this._scheduledOperationDetails = new OracleDatabaseAutonomousDatabasePropertiesScheduledOperationDetailsList(this, "scheduled_operation_details", false);
        // customer_contacts - computed: false, optional: true, required: false
        this._customerContacts = new OracleDatabaseAutonomousDatabasePropertiesCustomerContactsList(this, "customer_contacts", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._backupRetentionPeriodDays !== undefined) {
            hasAnyValues = true;
            internalValueResult.backupRetentionPeriodDays = this._backupRetentionPeriodDays;
        }
        if (this._characterSet !== undefined) {
            hasAnyValues = true;
            internalValueResult.characterSet = this._characterSet;
        }
        if (this._computeCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.computeCount = this._computeCount;
        }
        if (this._dataStorageSizeGb !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataStorageSizeGb = this._dataStorageSizeGb;
        }
        if (this._dataStorageSizeTb !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataStorageSizeTb = this._dataStorageSizeTb;
        }
        if (this._dbEdition !== undefined) {
            hasAnyValues = true;
            internalValueResult.dbEdition = this._dbEdition;
        }
        if (this._dbVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.dbVersion = this._dbVersion;
        }
        if (this._dbWorkload !== undefined) {
            hasAnyValues = true;
            internalValueResult.dbWorkload = this._dbWorkload;
        }
        if (this._isAutoScalingEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.isAutoScalingEnabled = this._isAutoScalingEnabled;
        }
        if (this._isStorageAutoScalingEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.isStorageAutoScalingEnabled = this._isStorageAutoScalingEnabled;
        }
        if (this._licenseType !== undefined) {
            hasAnyValues = true;
            internalValueResult.licenseType = this._licenseType;
        }
        if (this._maintenanceScheduleType !== undefined) {
            hasAnyValues = true;
            internalValueResult.maintenanceScheduleType = this._maintenanceScheduleType;
        }
        if (this._mtlsConnectionRequired !== undefined) {
            hasAnyValues = true;
            internalValueResult.mtlsConnectionRequired = this._mtlsConnectionRequired;
        }
        if (this._nCharacterSet !== undefined) {
            hasAnyValues = true;
            internalValueResult.nCharacterSet = this._nCharacterSet;
        }
        if (this._operationsInsightsState !== undefined) {
            hasAnyValues = true;
            internalValueResult.operationsInsightsState = this._operationsInsightsState;
        }
        if (this._privateEndpointIp !== undefined) {
            hasAnyValues = true;
            internalValueResult.privateEndpointIp = this._privateEndpointIp;
        }
        if (this._privateEndpointLabel !== undefined) {
            hasAnyValues = true;
            internalValueResult.privateEndpointLabel = this._privateEndpointLabel;
        }
        if (this._customerContacts?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customerContacts = this._customerContacts?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._backupRetentionPeriodDays = undefined;
            this._characterSet = undefined;
            this._computeCount = undefined;
            this._dataStorageSizeGb = undefined;
            this._dataStorageSizeTb = undefined;
            this._dbEdition = undefined;
            this._dbVersion = undefined;
            this._dbWorkload = undefined;
            this._isAutoScalingEnabled = undefined;
            this._isStorageAutoScalingEnabled = undefined;
            this._licenseType = undefined;
            this._maintenanceScheduleType = undefined;
            this._mtlsConnectionRequired = undefined;
            this._nCharacterSet = undefined;
            this._operationsInsightsState = undefined;
            this._privateEndpointIp = undefined;
            this._privateEndpointLabel = undefined;
            this._customerContacts.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._backupRetentionPeriodDays = value.backupRetentionPeriodDays;
            this._characterSet = value.characterSet;
            this._computeCount = value.computeCount;
            this._dataStorageSizeGb = value.dataStorageSizeGb;
            this._dataStorageSizeTb = value.dataStorageSizeTb;
            this._dbEdition = value.dbEdition;
            this._dbVersion = value.dbVersion;
            this._dbWorkload = value.dbWorkload;
            this._isAutoScalingEnabled = value.isAutoScalingEnabled;
            this._isStorageAutoScalingEnabled = value.isStorageAutoScalingEnabled;
            this._licenseType = value.licenseType;
            this._maintenanceScheduleType = value.maintenanceScheduleType;
            this._mtlsConnectionRequired = value.mtlsConnectionRequired;
            this._nCharacterSet = value.nCharacterSet;
            this._operationsInsightsState = value.operationsInsightsState;
            this._privateEndpointIp = value.privateEndpointIp;
            this._privateEndpointLabel = value.privateEndpointLabel;
            this._customerContacts.internalValue = value.customerContacts;
        }
    }
    // actual_used_data_storage_size_tb - computed: true, optional: false, required: false
    get actualUsedDataStorageSizeTb() {
        return this.getNumberAttribute('actual_used_data_storage_size_tb');
    }
    // allocated_storage_size_tb - computed: true, optional: false, required: false
    get allocatedStorageSizeTb() {
        return this.getNumberAttribute('allocated_storage_size_tb');
    }
    get apexDetails() {
        return this._apexDetails;
    }
    // are_primary_allowlisted_ips_used - computed: true, optional: false, required: false
    get arePrimaryAllowlistedIpsUsed() {
        return this.getBooleanAttribute('are_primary_allowlisted_ips_used');
    }
    // autonomous_container_database_id - computed: true, optional: false, required: false
    get autonomousContainerDatabaseId() {
        return this.getStringAttribute('autonomous_container_database_id');
    }
    // available_upgrade_versions - computed: true, optional: false, required: false
    get availableUpgradeVersions() {
        return this.getListAttribute('available_upgrade_versions');
    }
    get backupRetentionPeriodDays() {
        return this.getNumberAttribute('backup_retention_period_days');
    }
    set backupRetentionPeriodDays(value) {
        this._backupRetentionPeriodDays = value;
    }
    resetBackupRetentionPeriodDays() {
        this._backupRetentionPeriodDays = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get backupRetentionPeriodDaysInput() {
        return this._backupRetentionPeriodDays;
    }
    get characterSet() {
        return this.getStringAttribute('character_set');
    }
    set characterSet(value) {
        this._characterSet = value;
    }
    resetCharacterSet() {
        this._characterSet = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get characterSetInput() {
        return this._characterSet;
    }
    get computeCount() {
        return this.getNumberAttribute('compute_count');
    }
    set computeCount(value) {
        this._computeCount = value;
    }
    resetComputeCount() {
        this._computeCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get computeCountInput() {
        return this._computeCount;
    }
    get connectionStrings() {
        return this._connectionStrings;
    }
    get connectionUrls() {
        return this._connectionUrls;
    }
    // data_safe_state - computed: true, optional: false, required: false
    get dataSafeState() {
        return this.getStringAttribute('data_safe_state');
    }
    get dataStorageSizeGb() {
        return this.getNumberAttribute('data_storage_size_gb');
    }
    set dataStorageSizeGb(value) {
        this._dataStorageSizeGb = value;
    }
    resetDataStorageSizeGb() {
        this._dataStorageSizeGb = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataStorageSizeGbInput() {
        return this._dataStorageSizeGb;
    }
    get dataStorageSizeTb() {
        return this.getNumberAttribute('data_storage_size_tb');
    }
    set dataStorageSizeTb(value) {
        this._dataStorageSizeTb = value;
    }
    resetDataStorageSizeTb() {
        this._dataStorageSizeTb = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataStorageSizeTbInput() {
        return this._dataStorageSizeTb;
    }
    // database_management_state - computed: true, optional: false, required: false
    get databaseManagementState() {
        return this.getStringAttribute('database_management_state');
    }
    get dbEdition() {
        return this.getStringAttribute('db_edition');
    }
    set dbEdition(value) {
        this._dbEdition = value;
    }
    resetDbEdition() {
        this._dbEdition = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dbEditionInput() {
        return this._dbEdition;
    }
    get dbVersion() {
        return this.getStringAttribute('db_version');
    }
    set dbVersion(value) {
        this._dbVersion = value;
    }
    resetDbVersion() {
        this._dbVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dbVersionInput() {
        return this._dbVersion;
    }
    get dbWorkload() {
        return this.getStringAttribute('db_workload');
    }
    set dbWorkload(value) {
        this._dbWorkload = value;
    }
    // Temporarily expose input value. Use with caution.
    get dbWorkloadInput() {
        return this._dbWorkload;
    }
    // failed_data_recovery_duration - computed: true, optional: false, required: false
    get failedDataRecoveryDuration() {
        return this.getStringAttribute('failed_data_recovery_duration');
    }
    get isAutoScalingEnabled() {
        return this.getBooleanAttribute('is_auto_scaling_enabled');
    }
    set isAutoScalingEnabled(value) {
        this._isAutoScalingEnabled = value;
    }
    resetIsAutoScalingEnabled() {
        this._isAutoScalingEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get isAutoScalingEnabledInput() {
        return this._isAutoScalingEnabled;
    }
    // is_local_data_guard_enabled - computed: true, optional: false, required: false
    get isLocalDataGuardEnabled() {
        return this.getBooleanAttribute('is_local_data_guard_enabled');
    }
    get isStorageAutoScalingEnabled() {
        return this.getBooleanAttribute('is_storage_auto_scaling_enabled');
    }
    set isStorageAutoScalingEnabled(value) {
        this._isStorageAutoScalingEnabled = value;
    }
    resetIsStorageAutoScalingEnabled() {
        this._isStorageAutoScalingEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get isStorageAutoScalingEnabledInput() {
        return this._isStorageAutoScalingEnabled;
    }
    get licenseType() {
        return this.getStringAttribute('license_type');
    }
    set licenseType(value) {
        this._licenseType = value;
    }
    // Temporarily expose input value. Use with caution.
    get licenseTypeInput() {
        return this._licenseType;
    }
    // lifecycle_details - computed: true, optional: false, required: false
    get lifecycleDetails() {
        return this.getStringAttribute('lifecycle_details');
    }
    // local_adg_auto_failover_max_data_loss_limit - computed: true, optional: false, required: false
    get localAdgAutoFailoverMaxDataLossLimit() {
        return this.getNumberAttribute('local_adg_auto_failover_max_data_loss_limit');
    }
    // local_disaster_recovery_type - computed: true, optional: false, required: false
    get localDisasterRecoveryType() {
        return this.getStringAttribute('local_disaster_recovery_type');
    }
    get localStandbyDb() {
        return this._localStandbyDb;
    }
    // maintenance_begin_time - computed: true, optional: false, required: false
    get maintenanceBeginTime() {
        return this.getStringAttribute('maintenance_begin_time');
    }
    // maintenance_end_time - computed: true, optional: false, required: false
    get maintenanceEndTime() {
        return this.getStringAttribute('maintenance_end_time');
    }
    get maintenanceScheduleType() {
        return this.getStringAttribute('maintenance_schedule_type');
    }
    set maintenanceScheduleType(value) {
        this._maintenanceScheduleType = value;
    }
    resetMaintenanceScheduleType() {
        this._maintenanceScheduleType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maintenanceScheduleTypeInput() {
        return this._maintenanceScheduleType;
    }
    // memory_per_oracle_compute_unit_gbs - computed: true, optional: false, required: false
    get memoryPerOracleComputeUnitGbs() {
        return this.getNumberAttribute('memory_per_oracle_compute_unit_gbs');
    }
    // memory_table_gbs - computed: true, optional: false, required: false
    get memoryTableGbs() {
        return this.getNumberAttribute('memory_table_gbs');
    }
    get mtlsConnectionRequired() {
        return this.getBooleanAttribute('mtls_connection_required');
    }
    set mtlsConnectionRequired(value) {
        this._mtlsConnectionRequired = value;
    }
    resetMtlsConnectionRequired() {
        this._mtlsConnectionRequired = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mtlsConnectionRequiredInput() {
        return this._mtlsConnectionRequired;
    }
    get nCharacterSet() {
        return this.getStringAttribute('n_character_set');
    }
    set nCharacterSet(value) {
        this._nCharacterSet = value;
    }
    resetNCharacterSet() {
        this._nCharacterSet = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nCharacterSetInput() {
        return this._nCharacterSet;
    }
    // next_long_term_backup_time - computed: true, optional: false, required: false
    get nextLongTermBackupTime() {
        return this.getStringAttribute('next_long_term_backup_time');
    }
    // oci_url - computed: true, optional: false, required: false
    get ociUrl() {
        return this.getStringAttribute('oci_url');
    }
    // ocid - computed: true, optional: false, required: false
    get ocid() {
        return this.getStringAttribute('ocid');
    }
    // open_mode - computed: true, optional: false, required: false
    get openMode() {
        return this.getStringAttribute('open_mode');
    }
    get operationsInsightsState() {
        return this.getStringAttribute('operations_insights_state');
    }
    set operationsInsightsState(value) {
        this._operationsInsightsState = value;
    }
    resetOperationsInsightsState() {
        this._operationsInsightsState = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get operationsInsightsStateInput() {
        return this._operationsInsightsState;
    }
    // peer_db_ids - computed: true, optional: false, required: false
    get peerDbIds() {
        return this.getListAttribute('peer_db_ids');
    }
    // permission_level - computed: true, optional: false, required: false
    get permissionLevel() {
        return this.getStringAttribute('permission_level');
    }
    // private_endpoint - computed: true, optional: false, required: false
    get privateEndpoint() {
        return this.getStringAttribute('private_endpoint');
    }
    get privateEndpointIp() {
        return this.getStringAttribute('private_endpoint_ip');
    }
    set privateEndpointIp(value) {
        this._privateEndpointIp = value;
    }
    resetPrivateEndpointIp() {
        this._privateEndpointIp = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get privateEndpointIpInput() {
        return this._privateEndpointIp;
    }
    get privateEndpointLabel() {
        return this.getStringAttribute('private_endpoint_label');
    }
    set privateEndpointLabel(value) {
        this._privateEndpointLabel = value;
    }
    resetPrivateEndpointLabel() {
        this._privateEndpointLabel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get privateEndpointLabelInput() {
        return this._privateEndpointLabel;
    }
    // refreshable_mode - computed: true, optional: false, required: false
    get refreshableMode() {
        return this.getStringAttribute('refreshable_mode');
    }
    // refreshable_state - computed: true, optional: false, required: false
    get refreshableState() {
        return this.getStringAttribute('refreshable_state');
    }
    // role - computed: true, optional: false, required: false
    get role() {
        return this.getStringAttribute('role');
    }
    get scheduledOperationDetails() {
        return this._scheduledOperationDetails;
    }
    // sql_web_developer_url - computed: true, optional: false, required: false
    get sqlWebDeveloperUrl() {
        return this.getStringAttribute('sql_web_developer_url');
    }
    // state - computed: true, optional: false, required: false
    get state() {
        return this.getStringAttribute('state');
    }
    // supported_clone_regions - computed: true, optional: false, required: false
    get supportedCloneRegions() {
        return this.getListAttribute('supported_clone_regions');
    }
    // total_auto_backup_storage_size_gbs - computed: true, optional: false, required: false
    get totalAutoBackupStorageSizeGbs() {
        return this.getNumberAttribute('total_auto_backup_storage_size_gbs');
    }
    // used_data_storage_size_tbs - computed: true, optional: false, required: false
    get usedDataStorageSizeTbs() {
        return this.getNumberAttribute('used_data_storage_size_tbs');
    }
    get customerContacts() {
        return this._customerContacts;
    }
    putCustomerContacts(value) {
        this._customerContacts.internalValue = value;
    }
    resetCustomerContacts() {
        this._customerContacts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customerContactsInput() {
        return this._customerContacts.internalValue;
    }
}
exports.OracleDatabaseAutonomousDatabasePropertiesOutputReference = OracleDatabaseAutonomousDatabasePropertiesOutputReference;
_w = JSII_RTTI_SYMBOL_1;
OracleDatabaseAutonomousDatabasePropertiesOutputReference[_w] = { fqn: "@cdktf/provider-google.oracleDatabaseAutonomousDatabase.OracleDatabaseAutonomousDatabasePropertiesOutputReference", version: "14.13.1" };
function oracleDatabaseAutonomousDatabaseTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.oracleDatabaseAutonomousDatabaseTimeoutsToTerraform = oracleDatabaseAutonomousDatabaseTimeoutsToTerraform;
function oracleDatabaseAutonomousDatabaseTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.oracleDatabaseAutonomousDatabaseTimeoutsToHclTerraform = oracleDatabaseAutonomousDatabaseTimeoutsToHclTerraform;
class OracleDatabaseAutonomousDatabaseTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.OracleDatabaseAutonomousDatabaseTimeoutsOutputReference = OracleDatabaseAutonomousDatabaseTimeoutsOutputReference;
_x = JSII_RTTI_SYMBOL_1;
OracleDatabaseAutonomousDatabaseTimeoutsOutputReference[_x] = { fqn: "@cdktf/provider-google.oracleDatabaseAutonomousDatabase.OracleDatabaseAutonomousDatabaseTimeoutsOutputReference", version: "14.13.1" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/oracle_database_autonomous_database google_oracle_database_autonomous_database}
*/
class OracleDatabaseAutonomousDatabase extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a OracleDatabaseAutonomousDatabase resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the OracleDatabaseAutonomousDatabase to import
    * @param importFromId The id of the existing OracleDatabaseAutonomousDatabase that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/oracle_database_autonomous_database#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the OracleDatabaseAutonomousDatabase to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_oracle_database_autonomous_database", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/oracle_database_autonomous_database google_oracle_database_autonomous_database} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options OracleDatabaseAutonomousDatabaseConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_oracle_database_autonomous_database',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // effective_labels - computed: true, optional: false, required: false
        this._effectiveLabels = new cdktf.StringMap(this, "effective_labels");
        // terraform_labels - computed: true, optional: false, required: false
        this._terraformLabels = new cdktf.StringMap(this, "terraform_labels");
        // properties - computed: false, optional: false, required: true
        this._properties = new OracleDatabaseAutonomousDatabasePropertiesOutputReference(this, "properties");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new OracleDatabaseAutonomousDatabaseTimeoutsOutputReference(this, "timeouts");
        this._adminPassword = config.adminPassword;
        this._autonomousDatabaseId = config.autonomousDatabaseId;
        this._cidr = config.cidr;
        this._database = config.database;
        this._deletionProtection = config.deletionProtection;
        this._displayName = config.displayName;
        this._id = config.id;
        this._labels = config.labels;
        this._location = config.location;
        this._network = config.network;
        this._project = config.project;
        this._properties.internalValue = config.properties;
        this._timeouts.internalValue = config.timeouts;
    }
    get adminPassword() {
        return this.getStringAttribute('admin_password');
    }
    set adminPassword(value) {
        this._adminPassword = value;
    }
    resetAdminPassword() {
        this._adminPassword = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get adminPasswordInput() {
        return this._adminPassword;
    }
    get autonomousDatabaseId() {
        return this.getStringAttribute('autonomous_database_id');
    }
    set autonomousDatabaseId(value) {
        this._autonomousDatabaseId = value;
    }
    // Temporarily expose input value. Use with caution.
    get autonomousDatabaseIdInput() {
        return this._autonomousDatabaseId;
    }
    get cidr() {
        return this.getStringAttribute('cidr');
    }
    set cidr(value) {
        this._cidr = value;
    }
    // Temporarily expose input value. Use with caution.
    get cidrInput() {
        return this._cidr;
    }
    // create_time - computed: true, optional: false, required: false
    get createTime() {
        return this.getStringAttribute('create_time');
    }
    get database() {
        return this.getStringAttribute('database');
    }
    set database(value) {
        this._database = value;
    }
    // Temporarily expose input value. Use with caution.
    get databaseInput() {
        return this._database;
    }
    get deletionProtection() {
        return this.getBooleanAttribute('deletion_protection');
    }
    set deletionProtection(value) {
        this._deletionProtection = value;
    }
    resetDeletionProtection() {
        this._deletionProtection = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deletionProtectionInput() {
        return this._deletionProtection;
    }
    get displayName() {
        return this.getStringAttribute('display_name');
    }
    set displayName(value) {
        this._displayName = value;
    }
    resetDisplayName() {
        this._displayName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get displayNameInput() {
        return this._displayName;
    }
    get effectiveLabels() {
        return this._effectiveLabels;
    }
    // entitlement_id - computed: true, optional: false, required: false
    get entitlementId() {
        return this.getStringAttribute('entitlement_id');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get network() {
        return this.getStringAttribute('network');
    }
    set network(value) {
        this._network = value;
    }
    // Temporarily expose input value. Use with caution.
    get networkInput() {
        return this._network;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get terraformLabels() {
        return this._terraformLabels;
    }
    get properties() {
        return this._properties;
    }
    putProperties(value) {
        this._properties.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get propertiesInput() {
        return this._properties.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            admin_password: cdktf.stringToTerraform(this._adminPassword),
            autonomous_database_id: cdktf.stringToTerraform(this._autonomousDatabaseId),
            cidr: cdktf.stringToTerraform(this._cidr),
            database: cdktf.stringToTerraform(this._database),
            deletion_protection: cdktf.booleanToTerraform(this._deletionProtection),
            display_name: cdktf.stringToTerraform(this._displayName),
            id: cdktf.stringToTerraform(this._id),
            labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._labels),
            location: cdktf.stringToTerraform(this._location),
            network: cdktf.stringToTerraform(this._network),
            project: cdktf.stringToTerraform(this._project),
            properties: oracleDatabaseAutonomousDatabasePropertiesToTerraform(this._properties.internalValue),
            timeouts: oracleDatabaseAutonomousDatabaseTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            admin_password: {
                value: cdktf.stringToHclTerraform(this._adminPassword),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            autonomous_database_id: {
                value: cdktf.stringToHclTerraform(this._autonomousDatabaseId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            cidr: {
                value: cdktf.stringToHclTerraform(this._cidr),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            database: {
                value: cdktf.stringToHclTerraform(this._database),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            deletion_protection: {
                value: cdktf.booleanToHclTerraform(this._deletionProtection),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            display_name: {
                value: cdktf.stringToHclTerraform(this._displayName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            labels: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._labels),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            location: {
                value: cdktf.stringToHclTerraform(this._location),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            network: {
                value: cdktf.stringToHclTerraform(this._network),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            project: {
                value: cdktf.stringToHclTerraform(this._project),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            properties: {
                value: oracleDatabaseAutonomousDatabasePropertiesToHclTerraform(this._properties.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "OracleDatabaseAutonomousDatabasePropertiesList",
            },
            timeouts: {
                value: oracleDatabaseAutonomousDatabaseTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "OracleDatabaseAutonomousDatabaseTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.OracleDatabaseAutonomousDatabase = OracleDatabaseAutonomousDatabase;
_y = JSII_RTTI_SYMBOL_1;
OracleDatabaseAutonomousDatabase[_y] = { fqn: "@cdktf/provider-google.oracleDatabaseAutonomousDatabase.OracleDatabaseAutonomousDatabase", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
OracleDatabaseAutonomousDatabase.tfResourceType = "google_oracle_database_autonomous_database";
//# sourceMappingURL=data:application/json;base64,