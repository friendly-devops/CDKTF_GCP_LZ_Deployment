"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20;
Object.defineProperty(exports, "__esModule", { value: true });
exports.dataLossPreventionInspectTemplateInspectConfigLimitsToHclTerraform = exports.dataLossPreventionInspectTemplateInspectConfigLimitsToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeList = exports.DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeToHclTerraform = exports.dataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeToHclTerraform = exports.dataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeSensitivityScoreOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeSensitivityScoreToHclTerraform = exports.dataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeSensitivityScoreToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigInfoTypesList = exports.DataLossPreventionInspectTemplateInspectConfigInfoTypesOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigInfoTypesToHclTerraform = exports.dataLossPreventionInspectTemplateInspectConfigInfoTypesToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigInfoTypesSensitivityScoreOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigInfoTypesSensitivityScoreToHclTerraform = exports.dataLossPreventionInspectTemplateInspectConfigInfoTypesSensitivityScoreToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesList = exports.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesToHclTerraform = exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesSurrogateTypeOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesSurrogateTypeToHclTerraform = exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesSurrogateTypeToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesStoredTypeOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesStoredTypeToHclTerraform = exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesStoredTypeToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesSensitivityScoreOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesSensitivityScoreToHclTerraform = exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesSensitivityScoreToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesRegexOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesRegexToHclTerraform = exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesRegexToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeToHclTerraform = exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeSensitivityScoreOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeSensitivityScoreToHclTerraform = exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeSensitivityScoreToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryToHclTerraform = exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryWordListStructOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryWordListStructToHclTerraform = exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryWordListStructToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryCloudStoragePathOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryCloudStoragePathToHclTerraform = exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryCloudStoragePathToTerraform = void 0;
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleProximityToHclTerraform = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleProximityToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentToHclTerraform = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleHotwordRegexOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleHotwordRegexToHclTerraform = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleHotwordRegexToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleToHclTerraform = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleRegexOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleRegexToHclTerraform = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleRegexToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesToHclTerraform = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesList = exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesToHclTerraform = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesSensitivityScoreOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesSensitivityScoreToHclTerraform = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesSensitivityScoreToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordToHclTerraform = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordProximityOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordProximityToHclTerraform = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordProximityToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordHotwordRegexOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordHotwordRegexToHclTerraform = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordHotwordRegexToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryToHclTerraform = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryWordListStructOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryWordListStructToHclTerraform = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryWordListStructToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathToHclTerraform = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesList = exports.DataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesToHclTerraform = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesSensitivityScoreOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesSensitivityScoreToHclTerraform = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesSensitivityScoreToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigLimitsOutputReference = void 0;
exports.DataLossPreventionInspectTemplate = exports.DataLossPreventionInspectTemplateTimeoutsOutputReference = exports.dataLossPreventionInspectTemplateTimeoutsToHclTerraform = exports.dataLossPreventionInspectTemplateTimeoutsToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigToHclTerraform = exports.dataLossPreventionInspectTemplateInspectConfigToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigRuleSetList = exports.DataLossPreventionInspectTemplateInspectConfigRuleSetOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetToHclTerraform = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesList = exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesToHclTerraform = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleOutputReference = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleToHclTerraform = exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleToTerraform = exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleProximityOutputReference = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryCloudStoragePathToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        path: cdktf.stringToTerraform(struct.path),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryCloudStoragePathToTerraform = dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryCloudStoragePathToTerraform;
function dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryCloudStoragePathToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        path: {
            value: cdktf.stringToHclTerraform(struct.path),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryCloudStoragePathToHclTerraform = dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryCloudStoragePathToHclTerraform;
class DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryCloudStoragePathOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._path !== undefined) {
            hasAnyValues = true;
            internalValueResult.path = this._path;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._path = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._path = value.path;
        }
    }
    get path() {
        return this.getStringAttribute('path');
    }
    set path(value) {
        this._path = value;
    }
    // Temporarily expose input value. Use with caution.
    get pathInput() {
        return this._path;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryCloudStoragePathOutputReference = DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryCloudStoragePathOutputReference;
_a = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryCloudStoragePathOutputReference[_a] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryCloudStoragePathOutputReference", version: "14.13.1" };
function dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryWordListStructToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        words: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.words),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryWordListStructToTerraform = dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryWordListStructToTerraform;
function dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryWordListStructToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        words: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.words),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryWordListStructToHclTerraform = dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryWordListStructToHclTerraform;
class DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryWordListStructOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._words !== undefined) {
            hasAnyValues = true;
            internalValueResult.words = this._words;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._words = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._words = value.words;
        }
    }
    get words() {
        return this.getListAttribute('words');
    }
    set words(value) {
        this._words = value;
    }
    // Temporarily expose input value. Use with caution.
    get wordsInput() {
        return this._words;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryWordListStructOutputReference = DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryWordListStructOutputReference;
_b = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryWordListStructOutputReference[_b] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryWordListStructOutputReference", version: "14.13.1" };
function dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cloud_storage_path: dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryCloudStoragePathToTerraform(struct.cloudStoragePath),
        word_list: dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryWordListStructToTerraform(struct.wordList),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryToTerraform = dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryToTerraform;
function dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cloud_storage_path: {
            value: dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryCloudStoragePathToHclTerraform(struct.cloudStoragePath),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryCloudStoragePathList",
        },
        word_list: {
            value: dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryWordListStructToHclTerraform(struct.wordList),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryWordListStructList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryToHclTerraform = dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryToHclTerraform;
class DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cloud_storage_path - computed: false, optional: true, required: false
        this._cloudStoragePath = new DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryCloudStoragePathOutputReference(this, "cloud_storage_path");
        // word_list - computed: false, optional: true, required: false
        this._wordList = new DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryWordListStructOutputReference(this, "word_list");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cloudStoragePath?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudStoragePath = this._cloudStoragePath?.internalValue;
        }
        if (this._wordList?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.wordList = this._wordList?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cloudStoragePath.internalValue = undefined;
            this._wordList.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cloudStoragePath.internalValue = value.cloudStoragePath;
            this._wordList.internalValue = value.wordList;
        }
    }
    get cloudStoragePath() {
        return this._cloudStoragePath;
    }
    putCloudStoragePath(value) {
        this._cloudStoragePath.internalValue = value;
    }
    resetCloudStoragePath() {
        this._cloudStoragePath.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudStoragePathInput() {
        return this._cloudStoragePath.internalValue;
    }
    get wordList() {
        return this._wordList;
    }
    putWordList(value) {
        this._wordList.internalValue = value;
    }
    resetWordList() {
        this._wordList.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get wordListInput() {
        return this._wordList.internalValue;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryOutputReference = DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryOutputReference;
_c = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryOutputReference[_c] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryOutputReference", version: "14.13.1" };
function dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeSensitivityScoreToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        score: cdktf.stringToTerraform(struct.score),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeSensitivityScoreToTerraform = dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeSensitivityScoreToTerraform;
function dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeSensitivityScoreToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        score: {
            value: cdktf.stringToHclTerraform(struct.score),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeSensitivityScoreToHclTerraform = dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeSensitivityScoreToHclTerraform;
class DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeSensitivityScoreOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._score !== undefined) {
            hasAnyValues = true;
            internalValueResult.score = this._score;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._score = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._score = value.score;
        }
    }
    get score() {
        return this.getStringAttribute('score');
    }
    set score(value) {
        this._score = value;
    }
    // Temporarily expose input value. Use with caution.
    get scoreInput() {
        return this._score;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeSensitivityScoreOutputReference = DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeSensitivityScoreOutputReference;
_d = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeSensitivityScoreOutputReference[_d] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeSensitivityScoreOutputReference", version: "14.13.1" };
function dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        version: cdktf.stringToTerraform(struct.version),
        sensitivity_score: dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeSensitivityScoreToTerraform(struct.sensitivityScore),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeToTerraform = dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeToTerraform;
function dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        version: {
            value: cdktf.stringToHclTerraform(struct.version),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sensitivity_score: {
            value: dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeSensitivityScoreToHclTerraform(struct.sensitivityScore),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeSensitivityScoreList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeToHclTerraform = dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeToHclTerraform;
class DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // sensitivity_score - computed: false, optional: true, required: false
        this._sensitivityScore = new DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeSensitivityScoreOutputReference(this, "sensitivity_score");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._version !== undefined) {
            hasAnyValues = true;
            internalValueResult.version = this._version;
        }
        if (this._sensitivityScore?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sensitivityScore = this._sensitivityScore?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._name = undefined;
            this._version = undefined;
            this._sensitivityScore.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._name = value.name;
            this._version = value.version;
            this._sensitivityScore.internalValue = value.sensitivityScore;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get version() {
        return this.getStringAttribute('version');
    }
    set version(value) {
        this._version = value;
    }
    resetVersion() {
        this._version = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get versionInput() {
        return this._version;
    }
    get sensitivityScore() {
        return this._sensitivityScore;
    }
    putSensitivityScore(value) {
        this._sensitivityScore.internalValue = value;
    }
    resetSensitivityScore() {
        this._sensitivityScore.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sensitivityScoreInput() {
        return this._sensitivityScore.internalValue;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeOutputReference = DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeOutputReference;
_e = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeOutputReference[_e] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeOutputReference", version: "14.13.1" };
function dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesRegexToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        group_indexes: cdktf.listMapper(cdktf.numberToTerraform, false)(struct.groupIndexes),
        pattern: cdktf.stringToTerraform(struct.pattern),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesRegexToTerraform = dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesRegexToTerraform;
function dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesRegexToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        group_indexes: {
            value: cdktf.listMapperHcl(cdktf.numberToHclTerraform, false)(struct.groupIndexes),
            isBlock: false,
            type: "list",
            storageClassType: "numberList",
        },
        pattern: {
            value: cdktf.stringToHclTerraform(struct.pattern),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesRegexToHclTerraform = dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesRegexToHclTerraform;
class DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesRegexOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._groupIndexes !== undefined) {
            hasAnyValues = true;
            internalValueResult.groupIndexes = this._groupIndexes;
        }
        if (this._pattern !== undefined) {
            hasAnyValues = true;
            internalValueResult.pattern = this._pattern;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._groupIndexes = undefined;
            this._pattern = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._groupIndexes = value.groupIndexes;
            this._pattern = value.pattern;
        }
    }
    get groupIndexes() {
        return this.getNumberListAttribute('group_indexes');
    }
    set groupIndexes(value) {
        this._groupIndexes = value;
    }
    resetGroupIndexes() {
        this._groupIndexes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get groupIndexesInput() {
        return this._groupIndexes;
    }
    get pattern() {
        return this.getStringAttribute('pattern');
    }
    set pattern(value) {
        this._pattern = value;
    }
    // Temporarily expose input value. Use with caution.
    get patternInput() {
        return this._pattern;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesRegexOutputReference = DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesRegexOutputReference;
_f = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesRegexOutputReference[_f] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesRegexOutputReference", version: "14.13.1" };
function dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesSensitivityScoreToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        score: cdktf.stringToTerraform(struct.score),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesSensitivityScoreToTerraform = dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesSensitivityScoreToTerraform;
function dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesSensitivityScoreToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        score: {
            value: cdktf.stringToHclTerraform(struct.score),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesSensitivityScoreToHclTerraform = dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesSensitivityScoreToHclTerraform;
class DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesSensitivityScoreOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._score !== undefined) {
            hasAnyValues = true;
            internalValueResult.score = this._score;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._score = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._score = value.score;
        }
    }
    get score() {
        return this.getStringAttribute('score');
    }
    set score(value) {
        this._score = value;
    }
    // Temporarily expose input value. Use with caution.
    get scoreInput() {
        return this._score;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesSensitivityScoreOutputReference = DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesSensitivityScoreOutputReference;
_g = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesSensitivityScoreOutputReference[_g] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesSensitivityScoreOutputReference", version: "14.13.1" };
function dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesStoredTypeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesStoredTypeToTerraform = dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesStoredTypeToTerraform;
function dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesStoredTypeToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesStoredTypeToHclTerraform = dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesStoredTypeToHclTerraform;
class DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesStoredTypeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._name = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._name = value.name;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesStoredTypeOutputReference = DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesStoredTypeOutputReference;
_h = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesStoredTypeOutputReference[_h] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesStoredTypeOutputReference", version: "14.13.1" };
function dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesSurrogateTypeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesSurrogateTypeToTerraform = dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesSurrogateTypeToTerraform;
function dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesSurrogateTypeToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesSurrogateTypeToHclTerraform = dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesSurrogateTypeToHclTerraform;
class DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesSurrogateTypeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesSurrogateTypeOutputReference = DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesSurrogateTypeOutputReference;
_j = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesSurrogateTypeOutputReference[_j] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesSurrogateTypeOutputReference", version: "14.13.1" };
function dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        exclusion_type: cdktf.stringToTerraform(struct.exclusionType),
        likelihood: cdktf.stringToTerraform(struct.likelihood),
        dictionary: dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryToTerraform(struct.dictionary),
        info_type: dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeToTerraform(struct.infoType),
        regex: dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesRegexToTerraform(struct.regex),
        sensitivity_score: dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesSensitivityScoreToTerraform(struct.sensitivityScore),
        stored_type: dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesStoredTypeToTerraform(struct.storedType),
        surrogate_type: dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesSurrogateTypeToTerraform(struct.surrogateType),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesToTerraform = dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesToTerraform;
function dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        exclusion_type: {
            value: cdktf.stringToHclTerraform(struct.exclusionType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        likelihood: {
            value: cdktf.stringToHclTerraform(struct.likelihood),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        dictionary: {
            value: dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryToHclTerraform(struct.dictionary),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryList",
        },
        info_type: {
            value: dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeToHclTerraform(struct.infoType),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeList",
        },
        regex: {
            value: dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesRegexToHclTerraform(struct.regex),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesRegexList",
        },
        sensitivity_score: {
            value: dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesSensitivityScoreToHclTerraform(struct.sensitivityScore),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesSensitivityScoreList",
        },
        stored_type: {
            value: dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesStoredTypeToHclTerraform(struct.storedType),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesStoredTypeList",
        },
        surrogate_type: {
            value: dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesSurrogateTypeToHclTerraform(struct.surrogateType),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesSurrogateTypeList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesToHclTerraform = dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesToHclTerraform;
class DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // dictionary - computed: false, optional: true, required: false
        this._dictionary = new DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesDictionaryOutputReference(this, "dictionary");
        // info_type - computed: false, optional: false, required: true
        this._infoType = new DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesInfoTypeOutputReference(this, "info_type");
        // regex - computed: false, optional: true, required: false
        this._regex = new DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesRegexOutputReference(this, "regex");
        // sensitivity_score - computed: false, optional: true, required: false
        this._sensitivityScore = new DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesSensitivityScoreOutputReference(this, "sensitivity_score");
        // stored_type - computed: false, optional: true, required: false
        this._storedType = new DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesStoredTypeOutputReference(this, "stored_type");
        // surrogate_type - computed: false, optional: true, required: false
        this._surrogateType = new DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesSurrogateTypeOutputReference(this, "surrogate_type");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._exclusionType !== undefined) {
            hasAnyValues = true;
            internalValueResult.exclusionType = this._exclusionType;
        }
        if (this._likelihood !== undefined) {
            hasAnyValues = true;
            internalValueResult.likelihood = this._likelihood;
        }
        if (this._dictionary?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dictionary = this._dictionary?.internalValue;
        }
        if (this._infoType?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.infoType = this._infoType?.internalValue;
        }
        if (this._regex?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.regex = this._regex?.internalValue;
        }
        if (this._sensitivityScore?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sensitivityScore = this._sensitivityScore?.internalValue;
        }
        if (this._storedType?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.storedType = this._storedType?.internalValue;
        }
        if (this._surrogateType?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.surrogateType = this._surrogateType?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._exclusionType = undefined;
            this._likelihood = undefined;
            this._dictionary.internalValue = undefined;
            this._infoType.internalValue = undefined;
            this._regex.internalValue = undefined;
            this._sensitivityScore.internalValue = undefined;
            this._storedType.internalValue = undefined;
            this._surrogateType.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._exclusionType = value.exclusionType;
            this._likelihood = value.likelihood;
            this._dictionary.internalValue = value.dictionary;
            this._infoType.internalValue = value.infoType;
            this._regex.internalValue = value.regex;
            this._sensitivityScore.internalValue = value.sensitivityScore;
            this._storedType.internalValue = value.storedType;
            this._surrogateType.internalValue = value.surrogateType;
        }
    }
    get exclusionType() {
        return this.getStringAttribute('exclusion_type');
    }
    set exclusionType(value) {
        this._exclusionType = value;
    }
    resetExclusionType() {
        this._exclusionType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get exclusionTypeInput() {
        return this._exclusionType;
    }
    get likelihood() {
        return this.getStringAttribute('likelihood');
    }
    set likelihood(value) {
        this._likelihood = value;
    }
    resetLikelihood() {
        this._likelihood = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get likelihoodInput() {
        return this._likelihood;
    }
    get dictionary() {
        return this._dictionary;
    }
    putDictionary(value) {
        this._dictionary.internalValue = value;
    }
    resetDictionary() {
        this._dictionary.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dictionaryInput() {
        return this._dictionary.internalValue;
    }
    get infoType() {
        return this._infoType;
    }
    putInfoType(value) {
        this._infoType.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get infoTypeInput() {
        return this._infoType.internalValue;
    }
    get regex() {
        return this._regex;
    }
    putRegex(value) {
        this._regex.internalValue = value;
    }
    resetRegex() {
        this._regex.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get regexInput() {
        return this._regex.internalValue;
    }
    get sensitivityScore() {
        return this._sensitivityScore;
    }
    putSensitivityScore(value) {
        this._sensitivityScore.internalValue = value;
    }
    resetSensitivityScore() {
        this._sensitivityScore.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sensitivityScoreInput() {
        return this._sensitivityScore.internalValue;
    }
    get storedType() {
        return this._storedType;
    }
    putStoredType(value) {
        this._storedType.internalValue = value;
    }
    resetStoredType() {
        this._storedType.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get storedTypeInput() {
        return this._storedType.internalValue;
    }
    get surrogateType() {
        return this._surrogateType;
    }
    putSurrogateType(value) {
        this._surrogateType.internalValue = value;
    }
    resetSurrogateType() {
        this._surrogateType.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get surrogateTypeInput() {
        return this._surrogateType.internalValue;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesOutputReference = DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesOutputReference;
_k = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesOutputReference[_k] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesOutputReference", version: "14.13.1" };
class DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesList = DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesList;
_l = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesList[_l] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesList", version: "14.13.1" };
function dataLossPreventionInspectTemplateInspectConfigInfoTypesSensitivityScoreToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        score: cdktf.stringToTerraform(struct.score),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigInfoTypesSensitivityScoreToTerraform = dataLossPreventionInspectTemplateInspectConfigInfoTypesSensitivityScoreToTerraform;
function dataLossPreventionInspectTemplateInspectConfigInfoTypesSensitivityScoreToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        score: {
            value: cdktf.stringToHclTerraform(struct.score),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionInspectTemplateInspectConfigInfoTypesSensitivityScoreToHclTerraform = dataLossPreventionInspectTemplateInspectConfigInfoTypesSensitivityScoreToHclTerraform;
class DataLossPreventionInspectTemplateInspectConfigInfoTypesSensitivityScoreOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._score !== undefined) {
            hasAnyValues = true;
            internalValueResult.score = this._score;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._score = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._score = value.score;
        }
    }
    get score() {
        return this.getStringAttribute('score');
    }
    set score(value) {
        this._score = value;
    }
    // Temporarily expose input value. Use with caution.
    get scoreInput() {
        return this._score;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigInfoTypesSensitivityScoreOutputReference = DataLossPreventionInspectTemplateInspectConfigInfoTypesSensitivityScoreOutputReference;
_m = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigInfoTypesSensitivityScoreOutputReference[_m] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigInfoTypesSensitivityScoreOutputReference", version: "14.13.1" };
function dataLossPreventionInspectTemplateInspectConfigInfoTypesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        version: cdktf.stringToTerraform(struct.version),
        sensitivity_score: dataLossPreventionInspectTemplateInspectConfigInfoTypesSensitivityScoreToTerraform(struct.sensitivityScore),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigInfoTypesToTerraform = dataLossPreventionInspectTemplateInspectConfigInfoTypesToTerraform;
function dataLossPreventionInspectTemplateInspectConfigInfoTypesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        version: {
            value: cdktf.stringToHclTerraform(struct.version),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sensitivity_score: {
            value: dataLossPreventionInspectTemplateInspectConfigInfoTypesSensitivityScoreToHclTerraform(struct.sensitivityScore),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionInspectTemplateInspectConfigInfoTypesSensitivityScoreList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionInspectTemplateInspectConfigInfoTypesToHclTerraform = dataLossPreventionInspectTemplateInspectConfigInfoTypesToHclTerraform;
class DataLossPreventionInspectTemplateInspectConfigInfoTypesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // sensitivity_score - computed: false, optional: true, required: false
        this._sensitivityScore = new DataLossPreventionInspectTemplateInspectConfigInfoTypesSensitivityScoreOutputReference(this, "sensitivity_score");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._version !== undefined) {
            hasAnyValues = true;
            internalValueResult.version = this._version;
        }
        if (this._sensitivityScore?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sensitivityScore = this._sensitivityScore?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
            this._version = undefined;
            this._sensitivityScore.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
            this._version = value.version;
            this._sensitivityScore.internalValue = value.sensitivityScore;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get version() {
        return this.getStringAttribute('version');
    }
    set version(value) {
        this._version = value;
    }
    resetVersion() {
        this._version = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get versionInput() {
        return this._version;
    }
    get sensitivityScore() {
        return this._sensitivityScore;
    }
    putSensitivityScore(value) {
        this._sensitivityScore.internalValue = value;
    }
    resetSensitivityScore() {
        this._sensitivityScore.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sensitivityScoreInput() {
        return this._sensitivityScore.internalValue;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigInfoTypesOutputReference = DataLossPreventionInspectTemplateInspectConfigInfoTypesOutputReference;
_o = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigInfoTypesOutputReference[_o] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigInfoTypesOutputReference", version: "14.13.1" };
class DataLossPreventionInspectTemplateInspectConfigInfoTypesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataLossPreventionInspectTemplateInspectConfigInfoTypesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigInfoTypesList = DataLossPreventionInspectTemplateInspectConfigInfoTypesList;
_p = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigInfoTypesList[_p] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigInfoTypesList", version: "14.13.1" };
function dataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeSensitivityScoreToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        score: cdktf.stringToTerraform(struct.score),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeSensitivityScoreToTerraform = dataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeSensitivityScoreToTerraform;
function dataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeSensitivityScoreToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        score: {
            value: cdktf.stringToHclTerraform(struct.score),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeSensitivityScoreToHclTerraform = dataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeSensitivityScoreToHclTerraform;
class DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeSensitivityScoreOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._score !== undefined) {
            hasAnyValues = true;
            internalValueResult.score = this._score;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._score = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._score = value.score;
        }
    }
    get score() {
        return this.getStringAttribute('score');
    }
    set score(value) {
        this._score = value;
    }
    // Temporarily expose input value. Use with caution.
    get scoreInput() {
        return this._score;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeSensitivityScoreOutputReference = DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeSensitivityScoreOutputReference;
_q = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeSensitivityScoreOutputReference[_q] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeSensitivityScoreOutputReference", version: "14.13.1" };
function dataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        version: cdktf.stringToTerraform(struct.version),
        sensitivity_score: dataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeSensitivityScoreToTerraform(struct.sensitivityScore),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeToTerraform = dataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeToTerraform;
function dataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        version: {
            value: cdktf.stringToHclTerraform(struct.version),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sensitivity_score: {
            value: dataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeSensitivityScoreToHclTerraform(struct.sensitivityScore),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeSensitivityScoreList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeToHclTerraform = dataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeToHclTerraform;
class DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // sensitivity_score - computed: false, optional: true, required: false
        this._sensitivityScore = new DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeSensitivityScoreOutputReference(this, "sensitivity_score");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._version !== undefined) {
            hasAnyValues = true;
            internalValueResult.version = this._version;
        }
        if (this._sensitivityScore?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sensitivityScore = this._sensitivityScore?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._name = undefined;
            this._version = undefined;
            this._sensitivityScore.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._name = value.name;
            this._version = value.version;
            this._sensitivityScore.internalValue = value.sensitivityScore;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get version() {
        return this.getStringAttribute('version');
    }
    set version(value) {
        this._version = value;
    }
    resetVersion() {
        this._version = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get versionInput() {
        return this._version;
    }
    get sensitivityScore() {
        return this._sensitivityScore;
    }
    putSensitivityScore(value) {
        this._sensitivityScore.internalValue = value;
    }
    resetSensitivityScore() {
        this._sensitivityScore.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sensitivityScoreInput() {
        return this._sensitivityScore.internalValue;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeOutputReference = DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeOutputReference;
_r = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeOutputReference[_r] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeOutputReference", version: "14.13.1" };
function dataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max_findings: cdktf.numberToTerraform(struct.maxFindings),
        info_type: dataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeToTerraform(struct.infoType),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeToTerraform = dataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeToTerraform;
function dataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        max_findings: {
            value: cdktf.numberToHclTerraform(struct.maxFindings),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        info_type: {
            value: dataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeToHclTerraform(struct.infoType),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeToHclTerraform = dataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeToHclTerraform;
class DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // info_type - computed: false, optional: true, required: false
        this._infoType = new DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeOutputReference(this, "info_type");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._maxFindings !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxFindings = this._maxFindings;
        }
        if (this._infoType?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.infoType = this._infoType?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._maxFindings = undefined;
            this._infoType.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._maxFindings = value.maxFindings;
            this._infoType.internalValue = value.infoType;
        }
    }
    get maxFindings() {
        return this.getNumberAttribute('max_findings');
    }
    set maxFindings(value) {
        this._maxFindings = value;
    }
    // Temporarily expose input value. Use with caution.
    get maxFindingsInput() {
        return this._maxFindings;
    }
    get infoType() {
        return this._infoType;
    }
    putInfoType(value) {
        this._infoType.internalValue = value;
    }
    resetInfoType() {
        this._infoType.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get infoTypeInput() {
        return this._infoType.internalValue;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeOutputReference = DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeOutputReference;
_s = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeOutputReference[_s] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeOutputReference", version: "14.13.1" };
class DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeList = DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeList;
_t = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeList[_t] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeList", version: "14.13.1" };
function dataLossPreventionInspectTemplateInspectConfigLimitsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max_findings_per_item: cdktf.numberToTerraform(struct.maxFindingsPerItem),
        max_findings_per_request: cdktf.numberToTerraform(struct.maxFindingsPerRequest),
        max_findings_per_info_type: cdktf.listMapper(dataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeToTerraform, true)(struct.maxFindingsPerInfoType),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigLimitsToTerraform = dataLossPreventionInspectTemplateInspectConfigLimitsToTerraform;
function dataLossPreventionInspectTemplateInspectConfigLimitsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        max_findings_per_item: {
            value: cdktf.numberToHclTerraform(struct.maxFindingsPerItem),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        max_findings_per_request: {
            value: cdktf.numberToHclTerraform(struct.maxFindingsPerRequest),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        max_findings_per_info_type: {
            value: cdktf.listMapperHcl(dataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeToHclTerraform, true)(struct.maxFindingsPerInfoType),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionInspectTemplateInspectConfigLimitsToHclTerraform = dataLossPreventionInspectTemplateInspectConfigLimitsToHclTerraform;
class DataLossPreventionInspectTemplateInspectConfigLimitsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // max_findings_per_info_type - computed: false, optional: true, required: false
        this._maxFindingsPerInfoType = new DataLossPreventionInspectTemplateInspectConfigLimitsMaxFindingsPerInfoTypeList(this, "max_findings_per_info_type", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._maxFindingsPerItem !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxFindingsPerItem = this._maxFindingsPerItem;
        }
        if (this._maxFindingsPerRequest !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxFindingsPerRequest = this._maxFindingsPerRequest;
        }
        if (this._maxFindingsPerInfoType?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxFindingsPerInfoType = this._maxFindingsPerInfoType?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._maxFindingsPerItem = undefined;
            this._maxFindingsPerRequest = undefined;
            this._maxFindingsPerInfoType.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._maxFindingsPerItem = value.maxFindingsPerItem;
            this._maxFindingsPerRequest = value.maxFindingsPerRequest;
            this._maxFindingsPerInfoType.internalValue = value.maxFindingsPerInfoType;
        }
    }
    get maxFindingsPerItem() {
        return this.getNumberAttribute('max_findings_per_item');
    }
    set maxFindingsPerItem(value) {
        this._maxFindingsPerItem = value;
    }
    // Temporarily expose input value. Use with caution.
    get maxFindingsPerItemInput() {
        return this._maxFindingsPerItem;
    }
    get maxFindingsPerRequest() {
        return this.getNumberAttribute('max_findings_per_request');
    }
    set maxFindingsPerRequest(value) {
        this._maxFindingsPerRequest = value;
    }
    // Temporarily expose input value. Use with caution.
    get maxFindingsPerRequestInput() {
        return this._maxFindingsPerRequest;
    }
    get maxFindingsPerInfoType() {
        return this._maxFindingsPerInfoType;
    }
    putMaxFindingsPerInfoType(value) {
        this._maxFindingsPerInfoType.internalValue = value;
    }
    resetMaxFindingsPerInfoType() {
        this._maxFindingsPerInfoType.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxFindingsPerInfoTypeInput() {
        return this._maxFindingsPerInfoType.internalValue;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigLimitsOutputReference = DataLossPreventionInspectTemplateInspectConfigLimitsOutputReference;
_u = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigLimitsOutputReference[_u] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigLimitsOutputReference", version: "14.13.1" };
function dataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesSensitivityScoreToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        score: cdktf.stringToTerraform(struct.score),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesSensitivityScoreToTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesSensitivityScoreToTerraform;
function dataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesSensitivityScoreToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        score: {
            value: cdktf.stringToHclTerraform(struct.score),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesSensitivityScoreToHclTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesSensitivityScoreToHclTerraform;
class DataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesSensitivityScoreOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._score !== undefined) {
            hasAnyValues = true;
            internalValueResult.score = this._score;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._score = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._score = value.score;
        }
    }
    get score() {
        return this.getStringAttribute('score');
    }
    set score(value) {
        this._score = value;
    }
    // Temporarily expose input value. Use with caution.
    get scoreInput() {
        return this._score;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesSensitivityScoreOutputReference = DataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesSensitivityScoreOutputReference;
_v = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesSensitivityScoreOutputReference[_v] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesSensitivityScoreOutputReference", version: "14.13.1" };
function dataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        version: cdktf.stringToTerraform(struct.version),
        sensitivity_score: dataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesSensitivityScoreToTerraform(struct.sensitivityScore),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesToTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesToTerraform;
function dataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        version: {
            value: cdktf.stringToHclTerraform(struct.version),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sensitivity_score: {
            value: dataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesSensitivityScoreToHclTerraform(struct.sensitivityScore),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesSensitivityScoreList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesToHclTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesToHclTerraform;
class DataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // sensitivity_score - computed: false, optional: true, required: false
        this._sensitivityScore = new DataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesSensitivityScoreOutputReference(this, "sensitivity_score");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._version !== undefined) {
            hasAnyValues = true;
            internalValueResult.version = this._version;
        }
        if (this._sensitivityScore?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sensitivityScore = this._sensitivityScore?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
            this._version = undefined;
            this._sensitivityScore.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
            this._version = value.version;
            this._sensitivityScore.internalValue = value.sensitivityScore;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get version() {
        return this.getStringAttribute('version');
    }
    set version(value) {
        this._version = value;
    }
    resetVersion() {
        this._version = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get versionInput() {
        return this._version;
    }
    get sensitivityScore() {
        return this._sensitivityScore;
    }
    putSensitivityScore(value) {
        this._sensitivityScore.internalValue = value;
    }
    resetSensitivityScore() {
        this._sensitivityScore.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sensitivityScoreInput() {
        return this._sensitivityScore.internalValue;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesOutputReference = DataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesOutputReference;
_w = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesOutputReference[_w] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesOutputReference", version: "14.13.1" };
class DataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesList = DataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesList;
_x = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesList[_x] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesList", version: "14.13.1" };
function dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        path: cdktf.stringToTerraform(struct.path),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathToTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathToTerraform;
function dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        path: {
            value: cdktf.stringToHclTerraform(struct.path),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathToHclTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathToHclTerraform;
class DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._path !== undefined) {
            hasAnyValues = true;
            internalValueResult.path = this._path;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._path = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._path = value.path;
        }
    }
    get path() {
        return this.getStringAttribute('path');
    }
    set path(value) {
        this._path = value;
    }
    // Temporarily expose input value. Use with caution.
    get pathInput() {
        return this._path;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathOutputReference = DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathOutputReference;
_y = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathOutputReference[_y] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathOutputReference", version: "14.13.1" };
function dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryWordListStructToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        words: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.words),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryWordListStructToTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryWordListStructToTerraform;
function dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryWordListStructToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        words: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.words),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryWordListStructToHclTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryWordListStructToHclTerraform;
class DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryWordListStructOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._words !== undefined) {
            hasAnyValues = true;
            internalValueResult.words = this._words;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._words = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._words = value.words;
        }
    }
    get words() {
        return this.getListAttribute('words');
    }
    set words(value) {
        this._words = value;
    }
    // Temporarily expose input value. Use with caution.
    get wordsInput() {
        return this._words;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryWordListStructOutputReference = DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryWordListStructOutputReference;
_z = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryWordListStructOutputReference[_z] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryWordListStructOutputReference", version: "14.13.1" };
function dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cloud_storage_path: dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathToTerraform(struct.cloudStoragePath),
        word_list: dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryWordListStructToTerraform(struct.wordList),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryToTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryToTerraform;
function dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cloud_storage_path: {
            value: dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathToHclTerraform(struct.cloudStoragePath),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathList",
        },
        word_list: {
            value: dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryWordListStructToHclTerraform(struct.wordList),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryWordListStructList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryToHclTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryToHclTerraform;
class DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cloud_storage_path - computed: false, optional: true, required: false
        this._cloudStoragePath = new DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathOutputReference(this, "cloud_storage_path");
        // word_list - computed: false, optional: true, required: false
        this._wordList = new DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryWordListStructOutputReference(this, "word_list");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cloudStoragePath?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudStoragePath = this._cloudStoragePath?.internalValue;
        }
        if (this._wordList?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.wordList = this._wordList?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cloudStoragePath.internalValue = undefined;
            this._wordList.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cloudStoragePath.internalValue = value.cloudStoragePath;
            this._wordList.internalValue = value.wordList;
        }
    }
    get cloudStoragePath() {
        return this._cloudStoragePath;
    }
    putCloudStoragePath(value) {
        this._cloudStoragePath.internalValue = value;
    }
    resetCloudStoragePath() {
        this._cloudStoragePath.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudStoragePathInput() {
        return this._cloudStoragePath.internalValue;
    }
    get wordList() {
        return this._wordList;
    }
    putWordList(value) {
        this._wordList.internalValue = value;
    }
    resetWordList() {
        this._wordList.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get wordListInput() {
        return this._wordList.internalValue;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryOutputReference = DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryOutputReference[_0] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryOutputReference", version: "14.13.1" };
function dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordHotwordRegexToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        group_indexes: cdktf.listMapper(cdktf.numberToTerraform, false)(struct.groupIndexes),
        pattern: cdktf.stringToTerraform(struct.pattern),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordHotwordRegexToTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordHotwordRegexToTerraform;
function dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordHotwordRegexToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        group_indexes: {
            value: cdktf.listMapperHcl(cdktf.numberToHclTerraform, false)(struct.groupIndexes),
            isBlock: false,
            type: "list",
            storageClassType: "numberList",
        },
        pattern: {
            value: cdktf.stringToHclTerraform(struct.pattern),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordHotwordRegexToHclTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordHotwordRegexToHclTerraform;
class DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordHotwordRegexOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._groupIndexes !== undefined) {
            hasAnyValues = true;
            internalValueResult.groupIndexes = this._groupIndexes;
        }
        if (this._pattern !== undefined) {
            hasAnyValues = true;
            internalValueResult.pattern = this._pattern;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._groupIndexes = undefined;
            this._pattern = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._groupIndexes = value.groupIndexes;
            this._pattern = value.pattern;
        }
    }
    get groupIndexes() {
        return this.getNumberListAttribute('group_indexes');
    }
    set groupIndexes(value) {
        this._groupIndexes = value;
    }
    resetGroupIndexes() {
        this._groupIndexes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get groupIndexesInput() {
        return this._groupIndexes;
    }
    get pattern() {
        return this.getStringAttribute('pattern');
    }
    set pattern(value) {
        this._pattern = value;
    }
    // Temporarily expose input value. Use with caution.
    get patternInput() {
        return this._pattern;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordHotwordRegexOutputReference = DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordHotwordRegexOutputReference;
_1 = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordHotwordRegexOutputReference[_1] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordHotwordRegexOutputReference", version: "14.13.1" };
function dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordProximityToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        window_after: cdktf.numberToTerraform(struct.windowAfter),
        window_before: cdktf.numberToTerraform(struct.windowBefore),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordProximityToTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordProximityToTerraform;
function dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordProximityToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        window_after: {
            value: cdktf.numberToHclTerraform(struct.windowAfter),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        window_before: {
            value: cdktf.numberToHclTerraform(struct.windowBefore),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordProximityToHclTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordProximityToHclTerraform;
class DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordProximityOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._windowAfter !== undefined) {
            hasAnyValues = true;
            internalValueResult.windowAfter = this._windowAfter;
        }
        if (this._windowBefore !== undefined) {
            hasAnyValues = true;
            internalValueResult.windowBefore = this._windowBefore;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._windowAfter = undefined;
            this._windowBefore = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._windowAfter = value.windowAfter;
            this._windowBefore = value.windowBefore;
        }
    }
    get windowAfter() {
        return this.getNumberAttribute('window_after');
    }
    set windowAfter(value) {
        this._windowAfter = value;
    }
    resetWindowAfter() {
        this._windowAfter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get windowAfterInput() {
        return this._windowAfter;
    }
    get windowBefore() {
        return this.getNumberAttribute('window_before');
    }
    set windowBefore(value) {
        this._windowBefore = value;
    }
    resetWindowBefore() {
        this._windowBefore = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get windowBeforeInput() {
        return this._windowBefore;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordProximityOutputReference = DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordProximityOutputReference;
_2 = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordProximityOutputReference[_2] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordProximityOutputReference", version: "14.13.1" };
function dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        hotword_regex: dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordHotwordRegexToTerraform(struct.hotwordRegex),
        proximity: dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordProximityToTerraform(struct.proximity),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordToTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordToTerraform;
function dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        hotword_regex: {
            value: dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordHotwordRegexToHclTerraform(struct.hotwordRegex),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordHotwordRegexList",
        },
        proximity: {
            value: dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordProximityToHclTerraform(struct.proximity),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordProximityList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordToHclTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordToHclTerraform;
class DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // hotword_regex - computed: false, optional: false, required: true
        this._hotwordRegex = new DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordHotwordRegexOutputReference(this, "hotword_regex");
        // proximity - computed: false, optional: false, required: true
        this._proximity = new DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordProximityOutputReference(this, "proximity");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hotwordRegex?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.hotwordRegex = this._hotwordRegex?.internalValue;
        }
        if (this._proximity?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.proximity = this._proximity?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hotwordRegex.internalValue = undefined;
            this._proximity.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hotwordRegex.internalValue = value.hotwordRegex;
            this._proximity.internalValue = value.proximity;
        }
    }
    get hotwordRegex() {
        return this._hotwordRegex;
    }
    putHotwordRegex(value) {
        this._hotwordRegex.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get hotwordRegexInput() {
        return this._hotwordRegex.internalValue;
    }
    get proximity() {
        return this._proximity;
    }
    putProximity(value) {
        this._proximity.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get proximityInput() {
        return this._proximity.internalValue;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordOutputReference = DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordOutputReference;
_3 = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordOutputReference[_3] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordOutputReference", version: "14.13.1" };
function dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesSensitivityScoreToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        score: cdktf.stringToTerraform(struct.score),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesSensitivityScoreToTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesSensitivityScoreToTerraform;
function dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesSensitivityScoreToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        score: {
            value: cdktf.stringToHclTerraform(struct.score),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesSensitivityScoreToHclTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesSensitivityScoreToHclTerraform;
class DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesSensitivityScoreOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._score !== undefined) {
            hasAnyValues = true;
            internalValueResult.score = this._score;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._score = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._score = value.score;
        }
    }
    get score() {
        return this.getStringAttribute('score');
    }
    set score(value) {
        this._score = value;
    }
    // Temporarily expose input value. Use with caution.
    get scoreInput() {
        return this._score;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesSensitivityScoreOutputReference = DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesSensitivityScoreOutputReference;
_4 = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesSensitivityScoreOutputReference[_4] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesSensitivityScoreOutputReference", version: "14.13.1" };
function dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        version: cdktf.stringToTerraform(struct.version),
        sensitivity_score: dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesSensitivityScoreToTerraform(struct.sensitivityScore),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesToTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesToTerraform;
function dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        version: {
            value: cdktf.stringToHclTerraform(struct.version),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sensitivity_score: {
            value: dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesSensitivityScoreToHclTerraform(struct.sensitivityScore),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesSensitivityScoreList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesToHclTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesToHclTerraform;
class DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // sensitivity_score - computed: false, optional: true, required: false
        this._sensitivityScore = new DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesSensitivityScoreOutputReference(this, "sensitivity_score");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._version !== undefined) {
            hasAnyValues = true;
            internalValueResult.version = this._version;
        }
        if (this._sensitivityScore?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sensitivityScore = this._sensitivityScore?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
            this._version = undefined;
            this._sensitivityScore.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
            this._version = value.version;
            this._sensitivityScore.internalValue = value.sensitivityScore;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get version() {
        return this.getStringAttribute('version');
    }
    set version(value) {
        this._version = value;
    }
    resetVersion() {
        this._version = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get versionInput() {
        return this._version;
    }
    get sensitivityScore() {
        return this._sensitivityScore;
    }
    putSensitivityScore(value) {
        this._sensitivityScore.internalValue = value;
    }
    resetSensitivityScore() {
        this._sensitivityScore.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sensitivityScoreInput() {
        return this._sensitivityScore.internalValue;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesOutputReference = DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesOutputReference;
_5 = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesOutputReference[_5] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesOutputReference", version: "14.13.1" };
class DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesList = DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesList;
_6 = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesList[_6] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesList", version: "14.13.1" };
function dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        info_types: cdktf.listMapper(dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesToTerraform, true)(struct.infoTypes),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesToTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesToTerraform;
function dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        info_types: {
            value: cdktf.listMapperHcl(dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesToHclTerraform, true)(struct.infoTypes),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesToHclTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesToHclTerraform;
class DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // info_types - computed: false, optional: false, required: true
        this._infoTypes = new DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesList(this, "info_types", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._infoTypes?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.infoTypes = this._infoTypes?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._infoTypes.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._infoTypes.internalValue = value.infoTypes;
        }
    }
    get infoTypes() {
        return this._infoTypes;
    }
    putInfoTypes(value) {
        this._infoTypes.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get infoTypesInput() {
        return this._infoTypes.internalValue;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesOutputReference = DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesOutputReference;
_7 = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesOutputReference[_7] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesOutputReference", version: "14.13.1" };
function dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleRegexToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        group_indexes: cdktf.listMapper(cdktf.numberToTerraform, false)(struct.groupIndexes),
        pattern: cdktf.stringToTerraform(struct.pattern),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleRegexToTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleRegexToTerraform;
function dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleRegexToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        group_indexes: {
            value: cdktf.listMapperHcl(cdktf.numberToHclTerraform, false)(struct.groupIndexes),
            isBlock: false,
            type: "list",
            storageClassType: "numberList",
        },
        pattern: {
            value: cdktf.stringToHclTerraform(struct.pattern),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleRegexToHclTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleRegexToHclTerraform;
class DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleRegexOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._groupIndexes !== undefined) {
            hasAnyValues = true;
            internalValueResult.groupIndexes = this._groupIndexes;
        }
        if (this._pattern !== undefined) {
            hasAnyValues = true;
            internalValueResult.pattern = this._pattern;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._groupIndexes = undefined;
            this._pattern = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._groupIndexes = value.groupIndexes;
            this._pattern = value.pattern;
        }
    }
    get groupIndexes() {
        return this.getNumberListAttribute('group_indexes');
    }
    set groupIndexes(value) {
        this._groupIndexes = value;
    }
    resetGroupIndexes() {
        this._groupIndexes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get groupIndexesInput() {
        return this._groupIndexes;
    }
    get pattern() {
        return this.getStringAttribute('pattern');
    }
    set pattern(value) {
        this._pattern = value;
    }
    // Temporarily expose input value. Use with caution.
    get patternInput() {
        return this._pattern;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleRegexOutputReference = DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleRegexOutputReference;
_8 = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleRegexOutputReference[_8] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleRegexOutputReference", version: "14.13.1" };
function dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        matching_type: cdktf.stringToTerraform(struct.matchingType),
        dictionary: dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryToTerraform(struct.dictionary),
        exclude_by_hotword: dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordToTerraform(struct.excludeByHotword),
        exclude_info_types: dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesToTerraform(struct.excludeInfoTypes),
        regex: dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleRegexToTerraform(struct.regex),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleToTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleToTerraform;
function dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        matching_type: {
            value: cdktf.stringToHclTerraform(struct.matchingType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        dictionary: {
            value: dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryToHclTerraform(struct.dictionary),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryList",
        },
        exclude_by_hotword: {
            value: dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordToHclTerraform(struct.excludeByHotword),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordList",
        },
        exclude_info_types: {
            value: dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesToHclTerraform(struct.excludeInfoTypes),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesList",
        },
        regex: {
            value: dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleRegexToHclTerraform(struct.regex),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleRegexList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleToHclTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleToHclTerraform;
class DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // dictionary - computed: false, optional: true, required: false
        this._dictionary = new DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleDictionaryOutputReference(this, "dictionary");
        // exclude_by_hotword - computed: false, optional: true, required: false
        this._excludeByHotword = new DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordOutputReference(this, "exclude_by_hotword");
        // exclude_info_types - computed: false, optional: true, required: false
        this._excludeInfoTypes = new DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesOutputReference(this, "exclude_info_types");
        // regex - computed: false, optional: true, required: false
        this._regex = new DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleRegexOutputReference(this, "regex");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._matchingType !== undefined) {
            hasAnyValues = true;
            internalValueResult.matchingType = this._matchingType;
        }
        if (this._dictionary?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dictionary = this._dictionary?.internalValue;
        }
        if (this._excludeByHotword?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.excludeByHotword = this._excludeByHotword?.internalValue;
        }
        if (this._excludeInfoTypes?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.excludeInfoTypes = this._excludeInfoTypes?.internalValue;
        }
        if (this._regex?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.regex = this._regex?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._matchingType = undefined;
            this._dictionary.internalValue = undefined;
            this._excludeByHotword.internalValue = undefined;
            this._excludeInfoTypes.internalValue = undefined;
            this._regex.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._matchingType = value.matchingType;
            this._dictionary.internalValue = value.dictionary;
            this._excludeByHotword.internalValue = value.excludeByHotword;
            this._excludeInfoTypes.internalValue = value.excludeInfoTypes;
            this._regex.internalValue = value.regex;
        }
    }
    get matchingType() {
        return this.getStringAttribute('matching_type');
    }
    set matchingType(value) {
        this._matchingType = value;
    }
    // Temporarily expose input value. Use with caution.
    get matchingTypeInput() {
        return this._matchingType;
    }
    get dictionary() {
        return this._dictionary;
    }
    putDictionary(value) {
        this._dictionary.internalValue = value;
    }
    resetDictionary() {
        this._dictionary.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dictionaryInput() {
        return this._dictionary.internalValue;
    }
    get excludeByHotword() {
        return this._excludeByHotword;
    }
    putExcludeByHotword(value) {
        this._excludeByHotword.internalValue = value;
    }
    resetExcludeByHotword() {
        this._excludeByHotword.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludeByHotwordInput() {
        return this._excludeByHotword.internalValue;
    }
    get excludeInfoTypes() {
        return this._excludeInfoTypes;
    }
    putExcludeInfoTypes(value) {
        this._excludeInfoTypes.internalValue = value;
    }
    resetExcludeInfoTypes() {
        this._excludeInfoTypes.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludeInfoTypesInput() {
        return this._excludeInfoTypes.internalValue;
    }
    get regex() {
        return this._regex;
    }
    putRegex(value) {
        this._regex.internalValue = value;
    }
    resetRegex() {
        this._regex.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get regexInput() {
        return this._regex.internalValue;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleOutputReference = DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleOutputReference;
_9 = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleOutputReference[_9] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleOutputReference", version: "14.13.1" };
function dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleHotwordRegexToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        group_indexes: cdktf.listMapper(cdktf.numberToTerraform, false)(struct.groupIndexes),
        pattern: cdktf.stringToTerraform(struct.pattern),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleHotwordRegexToTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleHotwordRegexToTerraform;
function dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleHotwordRegexToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        group_indexes: {
            value: cdktf.listMapperHcl(cdktf.numberToHclTerraform, false)(struct.groupIndexes),
            isBlock: false,
            type: "list",
            storageClassType: "numberList",
        },
        pattern: {
            value: cdktf.stringToHclTerraform(struct.pattern),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleHotwordRegexToHclTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleHotwordRegexToHclTerraform;
class DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleHotwordRegexOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._groupIndexes !== undefined) {
            hasAnyValues = true;
            internalValueResult.groupIndexes = this._groupIndexes;
        }
        if (this._pattern !== undefined) {
            hasAnyValues = true;
            internalValueResult.pattern = this._pattern;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._groupIndexes = undefined;
            this._pattern = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._groupIndexes = value.groupIndexes;
            this._pattern = value.pattern;
        }
    }
    get groupIndexes() {
        return this.getNumberListAttribute('group_indexes');
    }
    set groupIndexes(value) {
        this._groupIndexes = value;
    }
    resetGroupIndexes() {
        this._groupIndexes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get groupIndexesInput() {
        return this._groupIndexes;
    }
    get pattern() {
        return this.getStringAttribute('pattern');
    }
    set pattern(value) {
        this._pattern = value;
    }
    // Temporarily expose input value. Use with caution.
    get patternInput() {
        return this._pattern;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleHotwordRegexOutputReference = DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleHotwordRegexOutputReference;
_10 = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleHotwordRegexOutputReference[_10] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleHotwordRegexOutputReference", version: "14.13.1" };
function dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        fixed_likelihood: cdktf.stringToTerraform(struct.fixedLikelihood),
        relative_likelihood: cdktf.numberToTerraform(struct.relativeLikelihood),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentToTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentToTerraform;
function dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        fixed_likelihood: {
            value: cdktf.stringToHclTerraform(struct.fixedLikelihood),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        relative_likelihood: {
            value: cdktf.numberToHclTerraform(struct.relativeLikelihood),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentToHclTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentToHclTerraform;
class DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._fixedLikelihood !== undefined) {
            hasAnyValues = true;
            internalValueResult.fixedLikelihood = this._fixedLikelihood;
        }
        if (this._relativeLikelihood !== undefined) {
            hasAnyValues = true;
            internalValueResult.relativeLikelihood = this._relativeLikelihood;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._fixedLikelihood = undefined;
            this._relativeLikelihood = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._fixedLikelihood = value.fixedLikelihood;
            this._relativeLikelihood = value.relativeLikelihood;
        }
    }
    get fixedLikelihood() {
        return this.getStringAttribute('fixed_likelihood');
    }
    set fixedLikelihood(value) {
        this._fixedLikelihood = value;
    }
    resetFixedLikelihood() {
        this._fixedLikelihood = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fixedLikelihoodInput() {
        return this._fixedLikelihood;
    }
    get relativeLikelihood() {
        return this.getNumberAttribute('relative_likelihood');
    }
    set relativeLikelihood(value) {
        this._relativeLikelihood = value;
    }
    resetRelativeLikelihood() {
        this._relativeLikelihood = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get relativeLikelihoodInput() {
        return this._relativeLikelihood;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentOutputReference = DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentOutputReference;
_11 = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentOutputReference[_11] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentOutputReference", version: "14.13.1" };
function dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleProximityToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        window_after: cdktf.numberToTerraform(struct.windowAfter),
        window_before: cdktf.numberToTerraform(struct.windowBefore),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleProximityToTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleProximityToTerraform;
function dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleProximityToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        window_after: {
            value: cdktf.numberToHclTerraform(struct.windowAfter),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        window_before: {
            value: cdktf.numberToHclTerraform(struct.windowBefore),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleProximityToHclTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleProximityToHclTerraform;
class DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleProximityOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._windowAfter !== undefined) {
            hasAnyValues = true;
            internalValueResult.windowAfter = this._windowAfter;
        }
        if (this._windowBefore !== undefined) {
            hasAnyValues = true;
            internalValueResult.windowBefore = this._windowBefore;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._windowAfter = undefined;
            this._windowBefore = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._windowAfter = value.windowAfter;
            this._windowBefore = value.windowBefore;
        }
    }
    get windowAfter() {
        return this.getNumberAttribute('window_after');
    }
    set windowAfter(value) {
        this._windowAfter = value;
    }
    resetWindowAfter() {
        this._windowAfter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get windowAfterInput() {
        return this._windowAfter;
    }
    get windowBefore() {
        return this.getNumberAttribute('window_before');
    }
    set windowBefore(value) {
        this._windowBefore = value;
    }
    resetWindowBefore() {
        this._windowBefore = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get windowBeforeInput() {
        return this._windowBefore;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleProximityOutputReference = DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleProximityOutputReference;
_12 = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleProximityOutputReference[_12] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleProximityOutputReference", version: "14.13.1" };
function dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        hotword_regex: dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleHotwordRegexToTerraform(struct.hotwordRegex),
        likelihood_adjustment: dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentToTerraform(struct.likelihoodAdjustment),
        proximity: dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleProximityToTerraform(struct.proximity),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleToTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleToTerraform;
function dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        hotword_regex: {
            value: dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleHotwordRegexToHclTerraform(struct.hotwordRegex),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleHotwordRegexList",
        },
        likelihood_adjustment: {
            value: dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentToHclTerraform(struct.likelihoodAdjustment),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentList",
        },
        proximity: {
            value: dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleProximityToHclTerraform(struct.proximity),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleProximityList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleToHclTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleToHclTerraform;
class DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // hotword_regex - computed: false, optional: false, required: true
        this._hotwordRegex = new DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleHotwordRegexOutputReference(this, "hotword_regex");
        // likelihood_adjustment - computed: false, optional: false, required: true
        this._likelihoodAdjustment = new DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentOutputReference(this, "likelihood_adjustment");
        // proximity - computed: false, optional: false, required: true
        this._proximity = new DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleProximityOutputReference(this, "proximity");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hotwordRegex?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.hotwordRegex = this._hotwordRegex?.internalValue;
        }
        if (this._likelihoodAdjustment?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.likelihoodAdjustment = this._likelihoodAdjustment?.internalValue;
        }
        if (this._proximity?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.proximity = this._proximity?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hotwordRegex.internalValue = undefined;
            this._likelihoodAdjustment.internalValue = undefined;
            this._proximity.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hotwordRegex.internalValue = value.hotwordRegex;
            this._likelihoodAdjustment.internalValue = value.likelihoodAdjustment;
            this._proximity.internalValue = value.proximity;
        }
    }
    get hotwordRegex() {
        return this._hotwordRegex;
    }
    putHotwordRegex(value) {
        this._hotwordRegex.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get hotwordRegexInput() {
        return this._hotwordRegex.internalValue;
    }
    get likelihoodAdjustment() {
        return this._likelihoodAdjustment;
    }
    putLikelihoodAdjustment(value) {
        this._likelihoodAdjustment.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get likelihoodAdjustmentInput() {
        return this._likelihoodAdjustment.internalValue;
    }
    get proximity() {
        return this._proximity;
    }
    putProximity(value) {
        this._proximity.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get proximityInput() {
        return this._proximity.internalValue;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleOutputReference = DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleOutputReference;
_13 = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleOutputReference[_13] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleOutputReference", version: "14.13.1" };
function dataLossPreventionInspectTemplateInspectConfigRuleSetRulesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        exclusion_rule: dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleToTerraform(struct.exclusionRule),
        hotword_rule: dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleToTerraform(struct.hotwordRule),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesToTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetRulesToTerraform;
function dataLossPreventionInspectTemplateInspectConfigRuleSetRulesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        exclusion_rule: {
            value: dataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleToHclTerraform(struct.exclusionRule),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleList",
        },
        hotword_rule: {
            value: dataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleToHclTerraform(struct.hotwordRule),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetRulesToHclTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetRulesToHclTerraform;
class DataLossPreventionInspectTemplateInspectConfigRuleSetRulesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // exclusion_rule - computed: false, optional: true, required: false
        this._exclusionRule = new DataLossPreventionInspectTemplateInspectConfigRuleSetRulesExclusionRuleOutputReference(this, "exclusion_rule");
        // hotword_rule - computed: false, optional: true, required: false
        this._hotwordRule = new DataLossPreventionInspectTemplateInspectConfigRuleSetRulesHotwordRuleOutputReference(this, "hotword_rule");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._exclusionRule?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.exclusionRule = this._exclusionRule?.internalValue;
        }
        if (this._hotwordRule?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.hotwordRule = this._hotwordRule?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._exclusionRule.internalValue = undefined;
            this._hotwordRule.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._exclusionRule.internalValue = value.exclusionRule;
            this._hotwordRule.internalValue = value.hotwordRule;
        }
    }
    get exclusionRule() {
        return this._exclusionRule;
    }
    putExclusionRule(value) {
        this._exclusionRule.internalValue = value;
    }
    resetExclusionRule() {
        this._exclusionRule.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get exclusionRuleInput() {
        return this._exclusionRule.internalValue;
    }
    get hotwordRule() {
        return this._hotwordRule;
    }
    putHotwordRule(value) {
        this._hotwordRule.internalValue = value;
    }
    resetHotwordRule() {
        this._hotwordRule.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hotwordRuleInput() {
        return this._hotwordRule.internalValue;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesOutputReference = DataLossPreventionInspectTemplateInspectConfigRuleSetRulesOutputReference;
_14 = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigRuleSetRulesOutputReference[_14] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesOutputReference", version: "14.13.1" };
class DataLossPreventionInspectTemplateInspectConfigRuleSetRulesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataLossPreventionInspectTemplateInspectConfigRuleSetRulesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesList = DataLossPreventionInspectTemplateInspectConfigRuleSetRulesList;
_15 = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigRuleSetRulesList[_15] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigRuleSetRulesList", version: "14.13.1" };
function dataLossPreventionInspectTemplateInspectConfigRuleSetToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        info_types: cdktf.listMapper(dataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesToTerraform, true)(struct.infoTypes),
        rules: cdktf.listMapper(dataLossPreventionInspectTemplateInspectConfigRuleSetRulesToTerraform, true)(struct.rules),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetToTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetToTerraform;
function dataLossPreventionInspectTemplateInspectConfigRuleSetToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        info_types: {
            value: cdktf.listMapperHcl(dataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesToHclTerraform, true)(struct.infoTypes),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesList",
        },
        rules: {
            value: cdktf.listMapperHcl(dataLossPreventionInspectTemplateInspectConfigRuleSetRulesToHclTerraform, true)(struct.rules),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionInspectTemplateInspectConfigRuleSetRulesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionInspectTemplateInspectConfigRuleSetToHclTerraform = dataLossPreventionInspectTemplateInspectConfigRuleSetToHclTerraform;
class DataLossPreventionInspectTemplateInspectConfigRuleSetOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // info_types - computed: false, optional: false, required: true
        this._infoTypes = new DataLossPreventionInspectTemplateInspectConfigRuleSetInfoTypesList(this, "info_types", false);
        // rules - computed: false, optional: false, required: true
        this._rules = new DataLossPreventionInspectTemplateInspectConfigRuleSetRulesList(this, "rules", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._infoTypes?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.infoTypes = this._infoTypes?.internalValue;
        }
        if (this._rules?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.rules = this._rules?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._infoTypes.internalValue = undefined;
            this._rules.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._infoTypes.internalValue = value.infoTypes;
            this._rules.internalValue = value.rules;
        }
    }
    get infoTypes() {
        return this._infoTypes;
    }
    putInfoTypes(value) {
        this._infoTypes.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get infoTypesInput() {
        return this._infoTypes.internalValue;
    }
    get rules() {
        return this._rules;
    }
    putRules(value) {
        this._rules.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get rulesInput() {
        return this._rules.internalValue;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigRuleSetOutputReference = DataLossPreventionInspectTemplateInspectConfigRuleSetOutputReference;
_16 = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigRuleSetOutputReference[_16] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigRuleSetOutputReference", version: "14.13.1" };
class DataLossPreventionInspectTemplateInspectConfigRuleSetList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataLossPreventionInspectTemplateInspectConfigRuleSetOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigRuleSetList = DataLossPreventionInspectTemplateInspectConfigRuleSetList;
_17 = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigRuleSetList[_17] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigRuleSetList", version: "14.13.1" };
function dataLossPreventionInspectTemplateInspectConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        content_options: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.contentOptions),
        exclude_info_types: cdktf.booleanToTerraform(struct.excludeInfoTypes),
        include_quote: cdktf.booleanToTerraform(struct.includeQuote),
        min_likelihood: cdktf.stringToTerraform(struct.minLikelihood),
        custom_info_types: cdktf.listMapper(dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesToTerraform, true)(struct.customInfoTypes),
        info_types: cdktf.listMapper(dataLossPreventionInspectTemplateInspectConfigInfoTypesToTerraform, true)(struct.infoTypes),
        limits: dataLossPreventionInspectTemplateInspectConfigLimitsToTerraform(struct.limits),
        rule_set: cdktf.listMapper(dataLossPreventionInspectTemplateInspectConfigRuleSetToTerraform, true)(struct.ruleSet),
    };
}
exports.dataLossPreventionInspectTemplateInspectConfigToTerraform = dataLossPreventionInspectTemplateInspectConfigToTerraform;
function dataLossPreventionInspectTemplateInspectConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        content_options: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.contentOptions),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        exclude_info_types: {
            value: cdktf.booleanToHclTerraform(struct.excludeInfoTypes),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        include_quote: {
            value: cdktf.booleanToHclTerraform(struct.includeQuote),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        min_likelihood: {
            value: cdktf.stringToHclTerraform(struct.minLikelihood),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        custom_info_types: {
            value: cdktf.listMapperHcl(dataLossPreventionInspectTemplateInspectConfigCustomInfoTypesToHclTerraform, true)(struct.customInfoTypes),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesList",
        },
        info_types: {
            value: cdktf.listMapperHcl(dataLossPreventionInspectTemplateInspectConfigInfoTypesToHclTerraform, true)(struct.infoTypes),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionInspectTemplateInspectConfigInfoTypesList",
        },
        limits: {
            value: dataLossPreventionInspectTemplateInspectConfigLimitsToHclTerraform(struct.limits),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionInspectTemplateInspectConfigLimitsList",
        },
        rule_set: {
            value: cdktf.listMapperHcl(dataLossPreventionInspectTemplateInspectConfigRuleSetToHclTerraform, true)(struct.ruleSet),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionInspectTemplateInspectConfigRuleSetList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionInspectTemplateInspectConfigToHclTerraform = dataLossPreventionInspectTemplateInspectConfigToHclTerraform;
class DataLossPreventionInspectTemplateInspectConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // custom_info_types - computed: false, optional: true, required: false
        this._customInfoTypes = new DataLossPreventionInspectTemplateInspectConfigCustomInfoTypesList(this, "custom_info_types", false);
        // info_types - computed: false, optional: true, required: false
        this._infoTypes = new DataLossPreventionInspectTemplateInspectConfigInfoTypesList(this, "info_types", false);
        // limits - computed: false, optional: true, required: false
        this._limits = new DataLossPreventionInspectTemplateInspectConfigLimitsOutputReference(this, "limits");
        // rule_set - computed: false, optional: true, required: false
        this._ruleSet = new DataLossPreventionInspectTemplateInspectConfigRuleSetList(this, "rule_set", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._contentOptions !== undefined) {
            hasAnyValues = true;
            internalValueResult.contentOptions = this._contentOptions;
        }
        if (this._excludeInfoTypes !== undefined) {
            hasAnyValues = true;
            internalValueResult.excludeInfoTypes = this._excludeInfoTypes;
        }
        if (this._includeQuote !== undefined) {
            hasAnyValues = true;
            internalValueResult.includeQuote = this._includeQuote;
        }
        if (this._minLikelihood !== undefined) {
            hasAnyValues = true;
            internalValueResult.minLikelihood = this._minLikelihood;
        }
        if (this._customInfoTypes?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customInfoTypes = this._customInfoTypes?.internalValue;
        }
        if (this._infoTypes?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.infoTypes = this._infoTypes?.internalValue;
        }
        if (this._limits?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.limits = this._limits?.internalValue;
        }
        if (this._ruleSet?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ruleSet = this._ruleSet?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._contentOptions = undefined;
            this._excludeInfoTypes = undefined;
            this._includeQuote = undefined;
            this._minLikelihood = undefined;
            this._customInfoTypes.internalValue = undefined;
            this._infoTypes.internalValue = undefined;
            this._limits.internalValue = undefined;
            this._ruleSet.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._contentOptions = value.contentOptions;
            this._excludeInfoTypes = value.excludeInfoTypes;
            this._includeQuote = value.includeQuote;
            this._minLikelihood = value.minLikelihood;
            this._customInfoTypes.internalValue = value.customInfoTypes;
            this._infoTypes.internalValue = value.infoTypes;
            this._limits.internalValue = value.limits;
            this._ruleSet.internalValue = value.ruleSet;
        }
    }
    get contentOptions() {
        return this.getListAttribute('content_options');
    }
    set contentOptions(value) {
        this._contentOptions = value;
    }
    resetContentOptions() {
        this._contentOptions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get contentOptionsInput() {
        return this._contentOptions;
    }
    get excludeInfoTypes() {
        return this.getBooleanAttribute('exclude_info_types');
    }
    set excludeInfoTypes(value) {
        this._excludeInfoTypes = value;
    }
    resetExcludeInfoTypes() {
        this._excludeInfoTypes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludeInfoTypesInput() {
        return this._excludeInfoTypes;
    }
    get includeQuote() {
        return this.getBooleanAttribute('include_quote');
    }
    set includeQuote(value) {
        this._includeQuote = value;
    }
    resetIncludeQuote() {
        this._includeQuote = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeQuoteInput() {
        return this._includeQuote;
    }
    get minLikelihood() {
        return this.getStringAttribute('min_likelihood');
    }
    set minLikelihood(value) {
        this._minLikelihood = value;
    }
    resetMinLikelihood() {
        this._minLikelihood = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minLikelihoodInput() {
        return this._minLikelihood;
    }
    get customInfoTypes() {
        return this._customInfoTypes;
    }
    putCustomInfoTypes(value) {
        this._customInfoTypes.internalValue = value;
    }
    resetCustomInfoTypes() {
        this._customInfoTypes.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customInfoTypesInput() {
        return this._customInfoTypes.internalValue;
    }
    get infoTypes() {
        return this._infoTypes;
    }
    putInfoTypes(value) {
        this._infoTypes.internalValue = value;
    }
    resetInfoTypes() {
        this._infoTypes.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get infoTypesInput() {
        return this._infoTypes.internalValue;
    }
    get limits() {
        return this._limits;
    }
    putLimits(value) {
        this._limits.internalValue = value;
    }
    resetLimits() {
        this._limits.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get limitsInput() {
        return this._limits.internalValue;
    }
    get ruleSet() {
        return this._ruleSet;
    }
    putRuleSet(value) {
        this._ruleSet.internalValue = value;
    }
    resetRuleSet() {
        this._ruleSet.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ruleSetInput() {
        return this._ruleSet.internalValue;
    }
}
exports.DataLossPreventionInspectTemplateInspectConfigOutputReference = DataLossPreventionInspectTemplateInspectConfigOutputReference;
_18 = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateInspectConfigOutputReference[_18] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateInspectConfigOutputReference", version: "14.13.1" };
function dataLossPreventionInspectTemplateTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.dataLossPreventionInspectTemplateTimeoutsToTerraform = dataLossPreventionInspectTemplateTimeoutsToTerraform;
function dataLossPreventionInspectTemplateTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionInspectTemplateTimeoutsToHclTerraform = dataLossPreventionInspectTemplateTimeoutsToHclTerraform;
class DataLossPreventionInspectTemplateTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.DataLossPreventionInspectTemplateTimeoutsOutputReference = DataLossPreventionInspectTemplateTimeoutsOutputReference;
_19 = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplateTimeoutsOutputReference[_19] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplateTimeoutsOutputReference", version: "14.13.1" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/data_loss_prevention_inspect_template google_data_loss_prevention_inspect_template}
*/
class DataLossPreventionInspectTemplate extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a DataLossPreventionInspectTemplate resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the DataLossPreventionInspectTemplate to import
    * @param importFromId The id of the existing DataLossPreventionInspectTemplate that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/data_loss_prevention_inspect_template#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the DataLossPreventionInspectTemplate to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_data_loss_prevention_inspect_template", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/data_loss_prevention_inspect_template google_data_loss_prevention_inspect_template} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataLossPreventionInspectTemplateConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_data_loss_prevention_inspect_template',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // inspect_config - computed: false, optional: true, required: false
        this._inspectConfig = new DataLossPreventionInspectTemplateInspectConfigOutputReference(this, "inspect_config");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new DataLossPreventionInspectTemplateTimeoutsOutputReference(this, "timeouts");
        this._description = config.description;
        this._displayName = config.displayName;
        this._id = config.id;
        this._parent = config.parent;
        this._templateId = config.templateId;
        this._inspectConfig.internalValue = config.inspectConfig;
        this._timeouts.internalValue = config.timeouts;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get displayName() {
        return this.getStringAttribute('display_name');
    }
    set displayName(value) {
        this._displayName = value;
    }
    resetDisplayName() {
        this._displayName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get displayNameInput() {
        return this._displayName;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get parent() {
        return this.getStringAttribute('parent');
    }
    set parent(value) {
        this._parent = value;
    }
    // Temporarily expose input value. Use with caution.
    get parentInput() {
        return this._parent;
    }
    get templateId() {
        return this.getStringAttribute('template_id');
    }
    set templateId(value) {
        this._templateId = value;
    }
    resetTemplateId() {
        this._templateId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get templateIdInput() {
        return this._templateId;
    }
    get inspectConfig() {
        return this._inspectConfig;
    }
    putInspectConfig(value) {
        this._inspectConfig.internalValue = value;
    }
    resetInspectConfig() {
        this._inspectConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inspectConfigInput() {
        return this._inspectConfig.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            description: cdktf.stringToTerraform(this._description),
            display_name: cdktf.stringToTerraform(this._displayName),
            id: cdktf.stringToTerraform(this._id),
            parent: cdktf.stringToTerraform(this._parent),
            template_id: cdktf.stringToTerraform(this._templateId),
            inspect_config: dataLossPreventionInspectTemplateInspectConfigToTerraform(this._inspectConfig.internalValue),
            timeouts: dataLossPreventionInspectTemplateTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            description: {
                value: cdktf.stringToHclTerraform(this._description),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            display_name: {
                value: cdktf.stringToHclTerraform(this._displayName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            parent: {
                value: cdktf.stringToHclTerraform(this._parent),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            template_id: {
                value: cdktf.stringToHclTerraform(this._templateId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            inspect_config: {
                value: dataLossPreventionInspectTemplateInspectConfigToHclTerraform(this._inspectConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "DataLossPreventionInspectTemplateInspectConfigList",
            },
            timeouts: {
                value: dataLossPreventionInspectTemplateTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "DataLossPreventionInspectTemplateTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.DataLossPreventionInspectTemplate = DataLossPreventionInspectTemplate;
_20 = JSII_RTTI_SYMBOL_1;
DataLossPreventionInspectTemplate[_20] = { fqn: "@cdktf/provider-google.dataLossPreventionInspectTemplate.DataLossPreventionInspectTemplate", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
DataLossPreventionInspectTemplate.tfResourceType = "google_data_loss_prevention_inspect_template";
//# sourceMappingURL=data:application/json;base64,