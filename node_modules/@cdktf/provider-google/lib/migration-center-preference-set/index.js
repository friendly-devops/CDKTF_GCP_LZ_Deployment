"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MigrationCenterPreferenceSet = exports.MigrationCenterPreferenceSetVirtualMachinePreferencesOutputReference = exports.migrationCenterPreferenceSetVirtualMachinePreferencesToHclTerraform = exports.migrationCenterPreferenceSetVirtualMachinePreferencesToTerraform = exports.MigrationCenterPreferenceSetVirtualMachinePreferencesVmwareEnginePreferencesOutputReference = exports.migrationCenterPreferenceSetVirtualMachinePreferencesVmwareEnginePreferencesToHclTerraform = exports.migrationCenterPreferenceSetVirtualMachinePreferencesVmwareEnginePreferencesToTerraform = exports.MigrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesOutputReference = exports.migrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesToHclTerraform = exports.migrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesToTerraform = exports.MigrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesNodeTypesList = exports.MigrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesNodeTypesOutputReference = exports.migrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesNodeTypesToHclTerraform = exports.migrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesNodeTypesToTerraform = exports.MigrationCenterPreferenceSetVirtualMachinePreferencesRegionPreferencesOutputReference = exports.migrationCenterPreferenceSetVirtualMachinePreferencesRegionPreferencesToHclTerraform = exports.migrationCenterPreferenceSetVirtualMachinePreferencesRegionPreferencesToTerraform = exports.MigrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesOutputReference = exports.migrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesToHclTerraform = exports.migrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesToTerraform = exports.MigrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesOutputReference = exports.migrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesToHclTerraform = exports.migrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesToTerraform = exports.MigrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAllowedMachineSeriesList = exports.MigrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAllowedMachineSeriesOutputReference = exports.migrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAllowedMachineSeriesToHclTerraform = exports.migrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAllowedMachineSeriesToTerraform = exports.MigrationCenterPreferenceSetTimeoutsOutputReference = exports.migrationCenterPreferenceSetTimeoutsToHclTerraform = exports.migrationCenterPreferenceSetTimeoutsToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function migrationCenterPreferenceSetTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.migrationCenterPreferenceSetTimeoutsToTerraform = migrationCenterPreferenceSetTimeoutsToTerraform;
function migrationCenterPreferenceSetTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.migrationCenterPreferenceSetTimeoutsToHclTerraform = migrationCenterPreferenceSetTimeoutsToHclTerraform;
class MigrationCenterPreferenceSetTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.MigrationCenterPreferenceSetTimeoutsOutputReference = MigrationCenterPreferenceSetTimeoutsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
MigrationCenterPreferenceSetTimeoutsOutputReference[_a] = { fqn: "@cdktf/provider-google.migrationCenterPreferenceSet.MigrationCenterPreferenceSetTimeoutsOutputReference", version: "14.13.1" };
function migrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAllowedMachineSeriesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        code: cdktf.stringToTerraform(struct.code),
    };
}
exports.migrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAllowedMachineSeriesToTerraform = migrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAllowedMachineSeriesToTerraform;
function migrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAllowedMachineSeriesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        code: {
            value: cdktf.stringToHclTerraform(struct.code),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.migrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAllowedMachineSeriesToHclTerraform = migrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAllowedMachineSeriesToHclTerraform;
class MigrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAllowedMachineSeriesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._code !== undefined) {
            hasAnyValues = true;
            internalValueResult.code = this._code;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._code = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._code = value.code;
        }
    }
    get code() {
        return this.getStringAttribute('code');
    }
    set code(value) {
        this._code = value;
    }
    resetCode() {
        this._code = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get codeInput() {
        return this._code;
    }
}
exports.MigrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAllowedMachineSeriesOutputReference = MigrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAllowedMachineSeriesOutputReference;
_b = JSII_RTTI_SYMBOL_1;
MigrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAllowedMachineSeriesOutputReference[_b] = { fqn: "@cdktf/provider-google.migrationCenterPreferenceSet.MigrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAllowedMachineSeriesOutputReference", version: "14.13.1" };
class MigrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAllowedMachineSeriesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MigrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAllowedMachineSeriesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MigrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAllowedMachineSeriesList = MigrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAllowedMachineSeriesList;
_c = JSII_RTTI_SYMBOL_1;
MigrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAllowedMachineSeriesList[_c] = { fqn: "@cdktf/provider-google.migrationCenterPreferenceSet.MigrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAllowedMachineSeriesList", version: "14.13.1" };
function migrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allowed_machine_series: cdktf.listMapper(migrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAllowedMachineSeriesToTerraform, true)(struct.allowedMachineSeries),
    };
}
exports.migrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesToTerraform = migrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesToTerraform;
function migrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        allowed_machine_series: {
            value: cdktf.listMapperHcl(migrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAllowedMachineSeriesToHclTerraform, true)(struct.allowedMachineSeries),
            isBlock: true,
            type: "list",
            storageClassType: "MigrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAllowedMachineSeriesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.migrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesToHclTerraform = migrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesToHclTerraform;
class MigrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // allowed_machine_series - computed: false, optional: true, required: false
        this._allowedMachineSeries = new MigrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesAllowedMachineSeriesList(this, "allowed_machine_series", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowedMachineSeries?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowedMachineSeries = this._allowedMachineSeries?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowedMachineSeries.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowedMachineSeries.internalValue = value.allowedMachineSeries;
        }
    }
    get allowedMachineSeries() {
        return this._allowedMachineSeries;
    }
    putAllowedMachineSeries(value) {
        this._allowedMachineSeries.internalValue = value;
    }
    resetAllowedMachineSeries() {
        this._allowedMachineSeries.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowedMachineSeriesInput() {
        return this._allowedMachineSeries.internalValue;
    }
}
exports.MigrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesOutputReference = MigrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesOutputReference;
_d = JSII_RTTI_SYMBOL_1;
MigrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesOutputReference[_d] = { fqn: "@cdktf/provider-google.migrationCenterPreferenceSet.MigrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesOutputReference", version: "14.13.1" };
function migrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        license_type: cdktf.stringToTerraform(struct.licenseType),
        machine_preferences: migrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesToTerraform(struct.machinePreferences),
    };
}
exports.migrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesToTerraform = migrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesToTerraform;
function migrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        license_type: {
            value: cdktf.stringToHclTerraform(struct.licenseType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        machine_preferences: {
            value: migrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesToHclTerraform(struct.machinePreferences),
            isBlock: true,
            type: "list",
            storageClassType: "MigrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.migrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesToHclTerraform = migrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesToHclTerraform;
class MigrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // machine_preferences - computed: false, optional: true, required: false
        this._machinePreferences = new MigrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesMachinePreferencesOutputReference(this, "machine_preferences");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._licenseType !== undefined) {
            hasAnyValues = true;
            internalValueResult.licenseType = this._licenseType;
        }
        if (this._machinePreferences?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.machinePreferences = this._machinePreferences?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._licenseType = undefined;
            this._machinePreferences.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._licenseType = value.licenseType;
            this._machinePreferences.internalValue = value.machinePreferences;
        }
    }
    get licenseType() {
        return this.getStringAttribute('license_type');
    }
    set licenseType(value) {
        this._licenseType = value;
    }
    resetLicenseType() {
        this._licenseType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get licenseTypeInput() {
        return this._licenseType;
    }
    get machinePreferences() {
        return this._machinePreferences;
    }
    putMachinePreferences(value) {
        this._machinePreferences.internalValue = value;
    }
    resetMachinePreferences() {
        this._machinePreferences.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get machinePreferencesInput() {
        return this._machinePreferences.internalValue;
    }
}
exports.MigrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesOutputReference = MigrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesOutputReference;
_e = JSII_RTTI_SYMBOL_1;
MigrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesOutputReference[_e] = { fqn: "@cdktf/provider-google.migrationCenterPreferenceSet.MigrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesOutputReference", version: "14.13.1" };
function migrationCenterPreferenceSetVirtualMachinePreferencesRegionPreferencesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        preferred_regions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.preferredRegions),
    };
}
exports.migrationCenterPreferenceSetVirtualMachinePreferencesRegionPreferencesToTerraform = migrationCenterPreferenceSetVirtualMachinePreferencesRegionPreferencesToTerraform;
function migrationCenterPreferenceSetVirtualMachinePreferencesRegionPreferencesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        preferred_regions: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.preferredRegions),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.migrationCenterPreferenceSetVirtualMachinePreferencesRegionPreferencesToHclTerraform = migrationCenterPreferenceSetVirtualMachinePreferencesRegionPreferencesToHclTerraform;
class MigrationCenterPreferenceSetVirtualMachinePreferencesRegionPreferencesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._preferredRegions !== undefined) {
            hasAnyValues = true;
            internalValueResult.preferredRegions = this._preferredRegions;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._preferredRegions = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._preferredRegions = value.preferredRegions;
        }
    }
    get preferredRegions() {
        return this.getListAttribute('preferred_regions');
    }
    set preferredRegions(value) {
        this._preferredRegions = value;
    }
    resetPreferredRegions() {
        this._preferredRegions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get preferredRegionsInput() {
        return this._preferredRegions;
    }
}
exports.MigrationCenterPreferenceSetVirtualMachinePreferencesRegionPreferencesOutputReference = MigrationCenterPreferenceSetVirtualMachinePreferencesRegionPreferencesOutputReference;
_f = JSII_RTTI_SYMBOL_1;
MigrationCenterPreferenceSetVirtualMachinePreferencesRegionPreferencesOutputReference[_f] = { fqn: "@cdktf/provider-google.migrationCenterPreferenceSet.MigrationCenterPreferenceSetVirtualMachinePreferencesRegionPreferencesOutputReference", version: "14.13.1" };
function migrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesNodeTypesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        node_name: cdktf.stringToTerraform(struct.nodeName),
    };
}
exports.migrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesNodeTypesToTerraform = migrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesNodeTypesToTerraform;
function migrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesNodeTypesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        node_name: {
            value: cdktf.stringToHclTerraform(struct.nodeName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.migrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesNodeTypesToHclTerraform = migrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesNodeTypesToHclTerraform;
class MigrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesNodeTypesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._nodeName !== undefined) {
            hasAnyValues = true;
            internalValueResult.nodeName = this._nodeName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._nodeName = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._nodeName = value.nodeName;
        }
    }
    get nodeName() {
        return this.getStringAttribute('node_name');
    }
    set nodeName(value) {
        this._nodeName = value;
    }
    resetNodeName() {
        this._nodeName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nodeNameInput() {
        return this._nodeName;
    }
}
exports.MigrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesNodeTypesOutputReference = MigrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesNodeTypesOutputReference;
_g = JSII_RTTI_SYMBOL_1;
MigrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesNodeTypesOutputReference[_g] = { fqn: "@cdktf/provider-google.migrationCenterPreferenceSet.MigrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesNodeTypesOutputReference", version: "14.13.1" };
class MigrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesNodeTypesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MigrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesNodeTypesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MigrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesNodeTypesList = MigrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesNodeTypesList;
_h = JSII_RTTI_SYMBOL_1;
MigrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesNodeTypesList[_h] = { fqn: "@cdktf/provider-google.migrationCenterPreferenceSet.MigrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesNodeTypesList", version: "14.13.1" };
function migrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        commitment_plan: cdktf.stringToTerraform(struct.commitmentPlan),
        cpu_overcommit_ratio: cdktf.numberToTerraform(struct.cpuOvercommitRatio),
        host_maintenance_policy: cdktf.stringToTerraform(struct.hostMaintenancePolicy),
        node_types: cdktf.listMapper(migrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesNodeTypesToTerraform, true)(struct.nodeTypes),
    };
}
exports.migrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesToTerraform = migrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesToTerraform;
function migrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        commitment_plan: {
            value: cdktf.stringToHclTerraform(struct.commitmentPlan),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cpu_overcommit_ratio: {
            value: cdktf.numberToHclTerraform(struct.cpuOvercommitRatio),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        host_maintenance_policy: {
            value: cdktf.stringToHclTerraform(struct.hostMaintenancePolicy),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        node_types: {
            value: cdktf.listMapperHcl(migrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesNodeTypesToHclTerraform, true)(struct.nodeTypes),
            isBlock: true,
            type: "list",
            storageClassType: "MigrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesNodeTypesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.migrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesToHclTerraform = migrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesToHclTerraform;
class MigrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // node_types - computed: false, optional: true, required: false
        this._nodeTypes = new MigrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesNodeTypesList(this, "node_types", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._commitmentPlan !== undefined) {
            hasAnyValues = true;
            internalValueResult.commitmentPlan = this._commitmentPlan;
        }
        if (this._cpuOvercommitRatio !== undefined) {
            hasAnyValues = true;
            internalValueResult.cpuOvercommitRatio = this._cpuOvercommitRatio;
        }
        if (this._hostMaintenancePolicy !== undefined) {
            hasAnyValues = true;
            internalValueResult.hostMaintenancePolicy = this._hostMaintenancePolicy;
        }
        if (this._nodeTypes?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.nodeTypes = this._nodeTypes?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._commitmentPlan = undefined;
            this._cpuOvercommitRatio = undefined;
            this._hostMaintenancePolicy = undefined;
            this._nodeTypes.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._commitmentPlan = value.commitmentPlan;
            this._cpuOvercommitRatio = value.cpuOvercommitRatio;
            this._hostMaintenancePolicy = value.hostMaintenancePolicy;
            this._nodeTypes.internalValue = value.nodeTypes;
        }
    }
    get commitmentPlan() {
        return this.getStringAttribute('commitment_plan');
    }
    set commitmentPlan(value) {
        this._commitmentPlan = value;
    }
    resetCommitmentPlan() {
        this._commitmentPlan = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get commitmentPlanInput() {
        return this._commitmentPlan;
    }
    get cpuOvercommitRatio() {
        return this.getNumberAttribute('cpu_overcommit_ratio');
    }
    set cpuOvercommitRatio(value) {
        this._cpuOvercommitRatio = value;
    }
    resetCpuOvercommitRatio() {
        this._cpuOvercommitRatio = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cpuOvercommitRatioInput() {
        return this._cpuOvercommitRatio;
    }
    get hostMaintenancePolicy() {
        return this.getStringAttribute('host_maintenance_policy');
    }
    set hostMaintenancePolicy(value) {
        this._hostMaintenancePolicy = value;
    }
    resetHostMaintenancePolicy() {
        this._hostMaintenancePolicy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostMaintenancePolicyInput() {
        return this._hostMaintenancePolicy;
    }
    get nodeTypes() {
        return this._nodeTypes;
    }
    putNodeTypes(value) {
        this._nodeTypes.internalValue = value;
    }
    resetNodeTypes() {
        this._nodeTypes.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nodeTypesInput() {
        return this._nodeTypes.internalValue;
    }
}
exports.MigrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesOutputReference = MigrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesOutputReference;
_j = JSII_RTTI_SYMBOL_1;
MigrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesOutputReference[_j] = { fqn: "@cdktf/provider-google.migrationCenterPreferenceSet.MigrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesOutputReference", version: "14.13.1" };
function migrationCenterPreferenceSetVirtualMachinePreferencesVmwareEnginePreferencesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        commitment_plan: cdktf.stringToTerraform(struct.commitmentPlan),
        cpu_overcommit_ratio: cdktf.numberToTerraform(struct.cpuOvercommitRatio),
        memory_overcommit_ratio: cdktf.numberToTerraform(struct.memoryOvercommitRatio),
        storage_deduplication_compression_ratio: cdktf.numberToTerraform(struct.storageDeduplicationCompressionRatio),
    };
}
exports.migrationCenterPreferenceSetVirtualMachinePreferencesVmwareEnginePreferencesToTerraform = migrationCenterPreferenceSetVirtualMachinePreferencesVmwareEnginePreferencesToTerraform;
function migrationCenterPreferenceSetVirtualMachinePreferencesVmwareEnginePreferencesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        commitment_plan: {
            value: cdktf.stringToHclTerraform(struct.commitmentPlan),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cpu_overcommit_ratio: {
            value: cdktf.numberToHclTerraform(struct.cpuOvercommitRatio),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        memory_overcommit_ratio: {
            value: cdktf.numberToHclTerraform(struct.memoryOvercommitRatio),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        storage_deduplication_compression_ratio: {
            value: cdktf.numberToHclTerraform(struct.storageDeduplicationCompressionRatio),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.migrationCenterPreferenceSetVirtualMachinePreferencesVmwareEnginePreferencesToHclTerraform = migrationCenterPreferenceSetVirtualMachinePreferencesVmwareEnginePreferencesToHclTerraform;
class MigrationCenterPreferenceSetVirtualMachinePreferencesVmwareEnginePreferencesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._commitmentPlan !== undefined) {
            hasAnyValues = true;
            internalValueResult.commitmentPlan = this._commitmentPlan;
        }
        if (this._cpuOvercommitRatio !== undefined) {
            hasAnyValues = true;
            internalValueResult.cpuOvercommitRatio = this._cpuOvercommitRatio;
        }
        if (this._memoryOvercommitRatio !== undefined) {
            hasAnyValues = true;
            internalValueResult.memoryOvercommitRatio = this._memoryOvercommitRatio;
        }
        if (this._storageDeduplicationCompressionRatio !== undefined) {
            hasAnyValues = true;
            internalValueResult.storageDeduplicationCompressionRatio = this._storageDeduplicationCompressionRatio;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._commitmentPlan = undefined;
            this._cpuOvercommitRatio = undefined;
            this._memoryOvercommitRatio = undefined;
            this._storageDeduplicationCompressionRatio = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._commitmentPlan = value.commitmentPlan;
            this._cpuOvercommitRatio = value.cpuOvercommitRatio;
            this._memoryOvercommitRatio = value.memoryOvercommitRatio;
            this._storageDeduplicationCompressionRatio = value.storageDeduplicationCompressionRatio;
        }
    }
    get commitmentPlan() {
        return this.getStringAttribute('commitment_plan');
    }
    set commitmentPlan(value) {
        this._commitmentPlan = value;
    }
    resetCommitmentPlan() {
        this._commitmentPlan = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get commitmentPlanInput() {
        return this._commitmentPlan;
    }
    get cpuOvercommitRatio() {
        return this.getNumberAttribute('cpu_overcommit_ratio');
    }
    set cpuOvercommitRatio(value) {
        this._cpuOvercommitRatio = value;
    }
    resetCpuOvercommitRatio() {
        this._cpuOvercommitRatio = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cpuOvercommitRatioInput() {
        return this._cpuOvercommitRatio;
    }
    get memoryOvercommitRatio() {
        return this.getNumberAttribute('memory_overcommit_ratio');
    }
    set memoryOvercommitRatio(value) {
        this._memoryOvercommitRatio = value;
    }
    resetMemoryOvercommitRatio() {
        this._memoryOvercommitRatio = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get memoryOvercommitRatioInput() {
        return this._memoryOvercommitRatio;
    }
    get storageDeduplicationCompressionRatio() {
        return this.getNumberAttribute('storage_deduplication_compression_ratio');
    }
    set storageDeduplicationCompressionRatio(value) {
        this._storageDeduplicationCompressionRatio = value;
    }
    resetStorageDeduplicationCompressionRatio() {
        this._storageDeduplicationCompressionRatio = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get storageDeduplicationCompressionRatioInput() {
        return this._storageDeduplicationCompressionRatio;
    }
}
exports.MigrationCenterPreferenceSetVirtualMachinePreferencesVmwareEnginePreferencesOutputReference = MigrationCenterPreferenceSetVirtualMachinePreferencesVmwareEnginePreferencesOutputReference;
_k = JSII_RTTI_SYMBOL_1;
MigrationCenterPreferenceSetVirtualMachinePreferencesVmwareEnginePreferencesOutputReference[_k] = { fqn: "@cdktf/provider-google.migrationCenterPreferenceSet.MigrationCenterPreferenceSetVirtualMachinePreferencesVmwareEnginePreferencesOutputReference", version: "14.13.1" };
function migrationCenterPreferenceSetVirtualMachinePreferencesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        commitment_plan: cdktf.stringToTerraform(struct.commitmentPlan),
        sizing_optimization_strategy: cdktf.stringToTerraform(struct.sizingOptimizationStrategy),
        target_product: cdktf.stringToTerraform(struct.targetProduct),
        compute_engine_preferences: migrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesToTerraform(struct.computeEnginePreferences),
        region_preferences: migrationCenterPreferenceSetVirtualMachinePreferencesRegionPreferencesToTerraform(struct.regionPreferences),
        sole_tenancy_preferences: migrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesToTerraform(struct.soleTenancyPreferences),
        vmware_engine_preferences: migrationCenterPreferenceSetVirtualMachinePreferencesVmwareEnginePreferencesToTerraform(struct.vmwareEnginePreferences),
    };
}
exports.migrationCenterPreferenceSetVirtualMachinePreferencesToTerraform = migrationCenterPreferenceSetVirtualMachinePreferencesToTerraform;
function migrationCenterPreferenceSetVirtualMachinePreferencesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        commitment_plan: {
            value: cdktf.stringToHclTerraform(struct.commitmentPlan),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sizing_optimization_strategy: {
            value: cdktf.stringToHclTerraform(struct.sizingOptimizationStrategy),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        target_product: {
            value: cdktf.stringToHclTerraform(struct.targetProduct),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        compute_engine_preferences: {
            value: migrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesToHclTerraform(struct.computeEnginePreferences),
            isBlock: true,
            type: "list",
            storageClassType: "MigrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesList",
        },
        region_preferences: {
            value: migrationCenterPreferenceSetVirtualMachinePreferencesRegionPreferencesToHclTerraform(struct.regionPreferences),
            isBlock: true,
            type: "list",
            storageClassType: "MigrationCenterPreferenceSetVirtualMachinePreferencesRegionPreferencesList",
        },
        sole_tenancy_preferences: {
            value: migrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesToHclTerraform(struct.soleTenancyPreferences),
            isBlock: true,
            type: "list",
            storageClassType: "MigrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesList",
        },
        vmware_engine_preferences: {
            value: migrationCenterPreferenceSetVirtualMachinePreferencesVmwareEnginePreferencesToHclTerraform(struct.vmwareEnginePreferences),
            isBlock: true,
            type: "list",
            storageClassType: "MigrationCenterPreferenceSetVirtualMachinePreferencesVmwareEnginePreferencesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.migrationCenterPreferenceSetVirtualMachinePreferencesToHclTerraform = migrationCenterPreferenceSetVirtualMachinePreferencesToHclTerraform;
class MigrationCenterPreferenceSetVirtualMachinePreferencesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // compute_engine_preferences - computed: false, optional: true, required: false
        this._computeEnginePreferences = new MigrationCenterPreferenceSetVirtualMachinePreferencesComputeEnginePreferencesOutputReference(this, "compute_engine_preferences");
        // region_preferences - computed: false, optional: true, required: false
        this._regionPreferences = new MigrationCenterPreferenceSetVirtualMachinePreferencesRegionPreferencesOutputReference(this, "region_preferences");
        // sole_tenancy_preferences - computed: false, optional: true, required: false
        this._soleTenancyPreferences = new MigrationCenterPreferenceSetVirtualMachinePreferencesSoleTenancyPreferencesOutputReference(this, "sole_tenancy_preferences");
        // vmware_engine_preferences - computed: false, optional: true, required: false
        this._vmwareEnginePreferences = new MigrationCenterPreferenceSetVirtualMachinePreferencesVmwareEnginePreferencesOutputReference(this, "vmware_engine_preferences");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._commitmentPlan !== undefined) {
            hasAnyValues = true;
            internalValueResult.commitmentPlan = this._commitmentPlan;
        }
        if (this._sizingOptimizationStrategy !== undefined) {
            hasAnyValues = true;
            internalValueResult.sizingOptimizationStrategy = this._sizingOptimizationStrategy;
        }
        if (this._targetProduct !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetProduct = this._targetProduct;
        }
        if (this._computeEnginePreferences?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.computeEnginePreferences = this._computeEnginePreferences?.internalValue;
        }
        if (this._regionPreferences?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.regionPreferences = this._regionPreferences?.internalValue;
        }
        if (this._soleTenancyPreferences?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.soleTenancyPreferences = this._soleTenancyPreferences?.internalValue;
        }
        if (this._vmwareEnginePreferences?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.vmwareEnginePreferences = this._vmwareEnginePreferences?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._commitmentPlan = undefined;
            this._sizingOptimizationStrategy = undefined;
            this._targetProduct = undefined;
            this._computeEnginePreferences.internalValue = undefined;
            this._regionPreferences.internalValue = undefined;
            this._soleTenancyPreferences.internalValue = undefined;
            this._vmwareEnginePreferences.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._commitmentPlan = value.commitmentPlan;
            this._sizingOptimizationStrategy = value.sizingOptimizationStrategy;
            this._targetProduct = value.targetProduct;
            this._computeEnginePreferences.internalValue = value.computeEnginePreferences;
            this._regionPreferences.internalValue = value.regionPreferences;
            this._soleTenancyPreferences.internalValue = value.soleTenancyPreferences;
            this._vmwareEnginePreferences.internalValue = value.vmwareEnginePreferences;
        }
    }
    get commitmentPlan() {
        return this.getStringAttribute('commitment_plan');
    }
    set commitmentPlan(value) {
        this._commitmentPlan = value;
    }
    resetCommitmentPlan() {
        this._commitmentPlan = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get commitmentPlanInput() {
        return this._commitmentPlan;
    }
    get sizingOptimizationStrategy() {
        return this.getStringAttribute('sizing_optimization_strategy');
    }
    set sizingOptimizationStrategy(value) {
        this._sizingOptimizationStrategy = value;
    }
    resetSizingOptimizationStrategy() {
        this._sizingOptimizationStrategy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sizingOptimizationStrategyInput() {
        return this._sizingOptimizationStrategy;
    }
    get targetProduct() {
        return this.getStringAttribute('target_product');
    }
    set targetProduct(value) {
        this._targetProduct = value;
    }
    resetTargetProduct() {
        this._targetProduct = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetProductInput() {
        return this._targetProduct;
    }
    get computeEnginePreferences() {
        return this._computeEnginePreferences;
    }
    putComputeEnginePreferences(value) {
        this._computeEnginePreferences.internalValue = value;
    }
    resetComputeEnginePreferences() {
        this._computeEnginePreferences.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get computeEnginePreferencesInput() {
        return this._computeEnginePreferences.internalValue;
    }
    get regionPreferences() {
        return this._regionPreferences;
    }
    putRegionPreferences(value) {
        this._regionPreferences.internalValue = value;
    }
    resetRegionPreferences() {
        this._regionPreferences.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get regionPreferencesInput() {
        return this._regionPreferences.internalValue;
    }
    get soleTenancyPreferences() {
        return this._soleTenancyPreferences;
    }
    putSoleTenancyPreferences(value) {
        this._soleTenancyPreferences.internalValue = value;
    }
    resetSoleTenancyPreferences() {
        this._soleTenancyPreferences.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get soleTenancyPreferencesInput() {
        return this._soleTenancyPreferences.internalValue;
    }
    get vmwareEnginePreferences() {
        return this._vmwareEnginePreferences;
    }
    putVmwareEnginePreferences(value) {
        this._vmwareEnginePreferences.internalValue = value;
    }
    resetVmwareEnginePreferences() {
        this._vmwareEnginePreferences.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vmwareEnginePreferencesInput() {
        return this._vmwareEnginePreferences.internalValue;
    }
}
exports.MigrationCenterPreferenceSetVirtualMachinePreferencesOutputReference = MigrationCenterPreferenceSetVirtualMachinePreferencesOutputReference;
_l = JSII_RTTI_SYMBOL_1;
MigrationCenterPreferenceSetVirtualMachinePreferencesOutputReference[_l] = { fqn: "@cdktf/provider-google.migrationCenterPreferenceSet.MigrationCenterPreferenceSetVirtualMachinePreferencesOutputReference", version: "14.13.1" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/migration_center_preference_set google_migration_center_preference_set}
*/
class MigrationCenterPreferenceSet extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a MigrationCenterPreferenceSet resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the MigrationCenterPreferenceSet to import
    * @param importFromId The id of the existing MigrationCenterPreferenceSet that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/migration_center_preference_set#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the MigrationCenterPreferenceSet to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_migration_center_preference_set", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/migration_center_preference_set google_migration_center_preference_set} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options MigrationCenterPreferenceSetConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_migration_center_preference_set',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new MigrationCenterPreferenceSetTimeoutsOutputReference(this, "timeouts");
        // virtual_machine_preferences - computed: false, optional: true, required: false
        this._virtualMachinePreferences = new MigrationCenterPreferenceSetVirtualMachinePreferencesOutputReference(this, "virtual_machine_preferences");
        this._description = config.description;
        this._displayName = config.displayName;
        this._id = config.id;
        this._location = config.location;
        this._preferenceSetId = config.preferenceSetId;
        this._project = config.project;
        this._timeouts.internalValue = config.timeouts;
        this._virtualMachinePreferences.internalValue = config.virtualMachinePreferences;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // create_time - computed: true, optional: false, required: false
    get createTime() {
        return this.getStringAttribute('create_time');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get displayName() {
        return this.getStringAttribute('display_name');
    }
    set displayName(value) {
        this._displayName = value;
    }
    resetDisplayName() {
        this._displayName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get displayNameInput() {
        return this._displayName;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get preferenceSetId() {
        return this.getStringAttribute('preference_set_id');
    }
    set preferenceSetId(value) {
        this._preferenceSetId = value;
    }
    // Temporarily expose input value. Use with caution.
    get preferenceSetIdInput() {
        return this._preferenceSetId;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    // update_time - computed: true, optional: false, required: false
    get updateTime() {
        return this.getStringAttribute('update_time');
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    get virtualMachinePreferences() {
        return this._virtualMachinePreferences;
    }
    putVirtualMachinePreferences(value) {
        this._virtualMachinePreferences.internalValue = value;
    }
    resetVirtualMachinePreferences() {
        this._virtualMachinePreferences.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get virtualMachinePreferencesInput() {
        return this._virtualMachinePreferences.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            description: cdktf.stringToTerraform(this._description),
            display_name: cdktf.stringToTerraform(this._displayName),
            id: cdktf.stringToTerraform(this._id),
            location: cdktf.stringToTerraform(this._location),
            preference_set_id: cdktf.stringToTerraform(this._preferenceSetId),
            project: cdktf.stringToTerraform(this._project),
            timeouts: migrationCenterPreferenceSetTimeoutsToTerraform(this._timeouts.internalValue),
            virtual_machine_preferences: migrationCenterPreferenceSetVirtualMachinePreferencesToTerraform(this._virtualMachinePreferences.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            description: {
                value: cdktf.stringToHclTerraform(this._description),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            display_name: {
                value: cdktf.stringToHclTerraform(this._displayName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            location: {
                value: cdktf.stringToHclTerraform(this._location),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            preference_set_id: {
                value: cdktf.stringToHclTerraform(this._preferenceSetId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            project: {
                value: cdktf.stringToHclTerraform(this._project),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            timeouts: {
                value: migrationCenterPreferenceSetTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "MigrationCenterPreferenceSetTimeouts",
            },
            virtual_machine_preferences: {
                value: migrationCenterPreferenceSetVirtualMachinePreferencesToHclTerraform(this._virtualMachinePreferences.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "MigrationCenterPreferenceSetVirtualMachinePreferencesList",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.MigrationCenterPreferenceSet = MigrationCenterPreferenceSet;
_m = JSII_RTTI_SYMBOL_1;
MigrationCenterPreferenceSet[_m] = { fqn: "@cdktf/provider-google.migrationCenterPreferenceSet.MigrationCenterPreferenceSet", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
MigrationCenterPreferenceSet.tfResourceType = "google_migration_center_preference_set";
//# sourceMappingURL=data:application/json;base64,