"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60;
Object.defineProperty(exports, "__esModule", { value: true });
exports.dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesInfoTypeSensitivityScoreToTerraform = exports.DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryOutputReference = exports.dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryToTerraform = exports.DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryWordListStructOutputReference = exports.dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryWordListStructToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryWordListStructToTerraform = exports.DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryCloudStoragePathOutputReference = exports.dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryCloudStoragePathToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryCloudStoragePathToTerraform = exports.DataLossPreventionJobTriggerInspectJobActionsList = exports.DataLossPreventionJobTriggerInspectJobActionsOutputReference = exports.dataLossPreventionJobTriggerInspectJobActionsToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobActionsToTerraform = exports.DataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputReference = exports.dataLossPreventionJobTriggerInspectJobActionsSaveFindingsToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobActionsSaveFindingsToTerraform = exports.DataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigOutputReference = exports.dataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigToTerraform = exports.DataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigTableOutputReference = exports.dataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigTableToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigTableToTerraform = exports.DataLossPreventionJobTriggerInspectJobActionsPublishToStackdriverOutputReference = exports.dataLossPreventionJobTriggerInspectJobActionsPublishToStackdriverToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobActionsPublishToStackdriverToTerraform = exports.DataLossPreventionJobTriggerInspectJobActionsPublishSummaryToCsccOutputReference = exports.dataLossPreventionJobTriggerInspectJobActionsPublishSummaryToCsccToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobActionsPublishSummaryToCsccToTerraform = exports.DataLossPreventionJobTriggerInspectJobActionsPublishFindingsToCloudDataCatalogOutputReference = exports.dataLossPreventionJobTriggerInspectJobActionsPublishFindingsToCloudDataCatalogToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobActionsPublishFindingsToCloudDataCatalogToTerraform = exports.DataLossPreventionJobTriggerInspectJobActionsPubSubOutputReference = exports.dataLossPreventionJobTriggerInspectJobActionsPubSubToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobActionsPubSubToTerraform = exports.DataLossPreventionJobTriggerInspectJobActionsJobNotificationEmailsOutputReference = exports.dataLossPreventionJobTriggerInspectJobActionsJobNotificationEmailsToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobActionsJobNotificationEmailsToTerraform = exports.DataLossPreventionJobTriggerInspectJobActionsDeidentifyOutputReference = exports.dataLossPreventionJobTriggerInspectJobActionsDeidentifyToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobActionsDeidentifyToTerraform = exports.DataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationDetailsStorageConfigOutputReference = exports.dataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationDetailsStorageConfigToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationDetailsStorageConfigToTerraform = exports.DataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationDetailsStorageConfigTableOutputReference = exports.dataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationDetailsStorageConfigTableToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationDetailsStorageConfigTableToTerraform = exports.DataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationConfigOutputReference = exports.dataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationConfigToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationConfigToTerraform = void 0;
exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathToTerraform = exports.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetInfoTypesList = exports.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetInfoTypesOutputReference = exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetInfoTypesToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetInfoTypesToTerraform = exports.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetInfoTypesSensitivityScoreOutputReference = exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetInfoTypesSensitivityScoreToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetInfoTypesSensitivityScoreToTerraform = exports.DataLossPreventionJobTriggerInspectJobInspectConfigLimitsOutputReference = exports.dataLossPreventionJobTriggerInspectJobInspectConfigLimitsToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobInspectConfigLimitsToTerraform = exports.DataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeList = exports.DataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeOutputReference = exports.dataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeToTerraform = exports.DataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeOutputReference = exports.dataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeToTerraform = exports.DataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeSensitivityScoreOutputReference = exports.dataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeSensitivityScoreToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeSensitivityScoreToTerraform = exports.DataLossPreventionJobTriggerInspectJobInspectConfigInfoTypesList = exports.DataLossPreventionJobTriggerInspectJobInspectConfigInfoTypesOutputReference = exports.dataLossPreventionJobTriggerInspectJobInspectConfigInfoTypesToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobInspectConfigInfoTypesToTerraform = exports.DataLossPreventionJobTriggerInspectJobInspectConfigInfoTypesSensitivityScoreOutputReference = exports.dataLossPreventionJobTriggerInspectJobInspectConfigInfoTypesSensitivityScoreToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobInspectConfigInfoTypesSensitivityScoreToTerraform = exports.DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesList = exports.DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesOutputReference = exports.dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesToTerraform = exports.DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesSurrogateTypeOutputReference = exports.dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesSurrogateTypeToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesSurrogateTypeToTerraform = exports.DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesStoredTypeOutputReference = exports.dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesStoredTypeToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesStoredTypeToTerraform = exports.DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesSensitivityScoreOutputReference = exports.dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesSensitivityScoreToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesSensitivityScoreToTerraform = exports.DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesRegexOutputReference = exports.dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesRegexToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesRegexToTerraform = exports.DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesInfoTypeOutputReference = exports.dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesInfoTypeToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesInfoTypeToTerraform = exports.DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesInfoTypeSensitivityScoreOutputReference = exports.dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesInfoTypeSensitivityScoreToHclTerraform = void 0;
exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetToTerraform = exports.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesList = exports.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesOutputReference = exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesToTerraform = exports.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleOutputReference = exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleToTerraform = exports.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleProximityOutputReference = exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleProximityToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleProximityToTerraform = exports.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentOutputReference = exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentToTerraform = exports.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleHotwordRegexOutputReference = exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleHotwordRegexToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleHotwordRegexToTerraform = exports.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleOutputReference = exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleToTerraform = exports.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleRegexOutputReference = exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleRegexToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleRegexToTerraform = exports.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesOutputReference = exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesToTerraform = exports.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesList = exports.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesOutputReference = exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesToTerraform = exports.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesSensitivityScoreOutputReference = exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesSensitivityScoreToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesSensitivityScoreToTerraform = exports.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordOutputReference = exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordToTerraform = exports.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordProximityOutputReference = exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordProximityToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordProximityToTerraform = exports.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordHotwordRegexOutputReference = exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordHotwordRegexToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordHotwordRegexToTerraform = exports.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryOutputReference = exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryToTerraform = exports.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryWordListStructOutputReference = exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryWordListStructToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryWordListStructToTerraform = exports.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathOutputReference = void 0;
exports.dataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsToTerraform = exports.DataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsTableOptionsOutputReference = exports.dataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsTableOptionsToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsTableOptionsToTerraform = exports.DataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsTableOptionsIdentifyingFieldsList = exports.DataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsTableOptionsIdentifyingFieldsOutputReference = exports.dataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsTableOptionsIdentifyingFieldsToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsTableOptionsIdentifyingFieldsToTerraform = exports.DataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsOutputReference = exports.dataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsToTerraform = exports.DataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsPartitionIdOutputReference = exports.dataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsPartitionIdToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsPartitionIdToTerraform = exports.DataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsKindOutputReference = exports.dataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsKindToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsKindToTerraform = exports.DataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsOutputReference = exports.dataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsToTerraform = exports.DataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetOutputReference = exports.dataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetToTerraform = exports.DataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetRegexFileSetOutputReference = exports.dataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetRegexFileSetToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetRegexFileSetToTerraform = exports.DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsOutputReference = exports.dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsToTerraform = exports.DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsTableReferenceOutputReference = exports.dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsTableReferenceToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsTableReferenceToTerraform = exports.DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIncludedFieldsList = exports.DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIncludedFieldsOutputReference = exports.dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIncludedFieldsToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIncludedFieldsToTerraform = exports.DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIdentifyingFieldsList = exports.DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIdentifyingFieldsOutputReference = exports.dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIdentifyingFieldsToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIdentifyingFieldsToTerraform = exports.DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsExcludedFieldsList = exports.DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsExcludedFieldsOutputReference = exports.dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsExcludedFieldsToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsExcludedFieldsToTerraform = exports.DataLossPreventionJobTriggerInspectJobInspectConfigOutputReference = exports.dataLossPreventionJobTriggerInspectJobInspectConfigToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobInspectConfigToTerraform = exports.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetList = exports.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetOutputReference = void 0;
exports.DataLossPreventionJobTrigger = exports.DataLossPreventionJobTriggerTriggersList = exports.DataLossPreventionJobTriggerTriggersOutputReference = exports.dataLossPreventionJobTriggerTriggersToHclTerraform = exports.dataLossPreventionJobTriggerTriggersToTerraform = exports.DataLossPreventionJobTriggerTriggersScheduleOutputReference = exports.dataLossPreventionJobTriggerTriggersScheduleToHclTerraform = exports.dataLossPreventionJobTriggerTriggersScheduleToTerraform = exports.DataLossPreventionJobTriggerTriggersManualOutputReference = exports.dataLossPreventionJobTriggerTriggersManualToHclTerraform = exports.dataLossPreventionJobTriggerTriggersManualToTerraform = exports.DataLossPreventionJobTriggerTimeoutsOutputReference = exports.dataLossPreventionJobTriggerTimeoutsToHclTerraform = exports.dataLossPreventionJobTriggerTimeoutsToTerraform = exports.DataLossPreventionJobTriggerInspectJobOutputReference = exports.dataLossPreventionJobTriggerInspectJobToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobToTerraform = exports.DataLossPreventionJobTriggerInspectJobStorageConfigOutputReference = exports.dataLossPreventionJobTriggerInspectJobStorageConfigToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobStorageConfigToTerraform = exports.DataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigOutputReference = exports.dataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigToTerraform = exports.DataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigTimestampFieldOutputReference = exports.dataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigTimestampFieldToHclTerraform = exports.dataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigTimestampFieldToTerraform = exports.DataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsOutputReference = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function dataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        deidentify_template: cdktf.stringToTerraform(struct.deidentifyTemplate),
        image_redact_template: cdktf.stringToTerraform(struct.imageRedactTemplate),
        structured_deidentify_template: cdktf.stringToTerraform(struct.structuredDeidentifyTemplate),
    };
}
exports.dataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationConfigToTerraform = dataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationConfigToTerraform;
function dataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        deidentify_template: {
            value: cdktf.stringToHclTerraform(struct.deidentifyTemplate),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        image_redact_template: {
            value: cdktf.stringToHclTerraform(struct.imageRedactTemplate),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        structured_deidentify_template: {
            value: cdktf.stringToHclTerraform(struct.structuredDeidentifyTemplate),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationConfigToHclTerraform = dataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationConfigToHclTerraform;
class DataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._deidentifyTemplate !== undefined) {
            hasAnyValues = true;
            internalValueResult.deidentifyTemplate = this._deidentifyTemplate;
        }
        if (this._imageRedactTemplate !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageRedactTemplate = this._imageRedactTemplate;
        }
        if (this._structuredDeidentifyTemplate !== undefined) {
            hasAnyValues = true;
            internalValueResult.structuredDeidentifyTemplate = this._structuredDeidentifyTemplate;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._deidentifyTemplate = undefined;
            this._imageRedactTemplate = undefined;
            this._structuredDeidentifyTemplate = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._deidentifyTemplate = value.deidentifyTemplate;
            this._imageRedactTemplate = value.imageRedactTemplate;
            this._structuredDeidentifyTemplate = value.structuredDeidentifyTemplate;
        }
    }
    get deidentifyTemplate() {
        return this.getStringAttribute('deidentify_template');
    }
    set deidentifyTemplate(value) {
        this._deidentifyTemplate = value;
    }
    resetDeidentifyTemplate() {
        this._deidentifyTemplate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deidentifyTemplateInput() {
        return this._deidentifyTemplate;
    }
    get imageRedactTemplate() {
        return this.getStringAttribute('image_redact_template');
    }
    set imageRedactTemplate(value) {
        this._imageRedactTemplate = value;
    }
    resetImageRedactTemplate() {
        this._imageRedactTemplate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageRedactTemplateInput() {
        return this._imageRedactTemplate;
    }
    get structuredDeidentifyTemplate() {
        return this.getStringAttribute('structured_deidentify_template');
    }
    set structuredDeidentifyTemplate(value) {
        this._structuredDeidentifyTemplate = value;
    }
    resetStructuredDeidentifyTemplate() {
        this._structuredDeidentifyTemplate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get structuredDeidentifyTemplateInput() {
        return this._structuredDeidentifyTemplate;
    }
}
exports.DataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationConfigOutputReference = DataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationConfigOutputReference;
_a = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationConfigOutputReference[_a] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationConfigOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationDetailsStorageConfigTableToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        dataset_id: cdktf.stringToTerraform(struct.datasetId),
        project_id: cdktf.stringToTerraform(struct.projectId),
        table_id: cdktf.stringToTerraform(struct.tableId),
    };
}
exports.dataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationDetailsStorageConfigTableToTerraform = dataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationDetailsStorageConfigTableToTerraform;
function dataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationDetailsStorageConfigTableToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        dataset_id: {
            value: cdktf.stringToHclTerraform(struct.datasetId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        project_id: {
            value: cdktf.stringToHclTerraform(struct.projectId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        table_id: {
            value: cdktf.stringToHclTerraform(struct.tableId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationDetailsStorageConfigTableToHclTerraform = dataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationDetailsStorageConfigTableToHclTerraform;
class DataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationDetailsStorageConfigTableOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._datasetId !== undefined) {
            hasAnyValues = true;
            internalValueResult.datasetId = this._datasetId;
        }
        if (this._projectId !== undefined) {
            hasAnyValues = true;
            internalValueResult.projectId = this._projectId;
        }
        if (this._tableId !== undefined) {
            hasAnyValues = true;
            internalValueResult.tableId = this._tableId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._datasetId = undefined;
            this._projectId = undefined;
            this._tableId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._datasetId = value.datasetId;
            this._projectId = value.projectId;
            this._tableId = value.tableId;
        }
    }
    get datasetId() {
        return this.getStringAttribute('dataset_id');
    }
    set datasetId(value) {
        this._datasetId = value;
    }
    // Temporarily expose input value. Use with caution.
    get datasetIdInput() {
        return this._datasetId;
    }
    get projectId() {
        return this.getStringAttribute('project_id');
    }
    set projectId(value) {
        this._projectId = value;
    }
    // Temporarily expose input value. Use with caution.
    get projectIdInput() {
        return this._projectId;
    }
    get tableId() {
        return this.getStringAttribute('table_id');
    }
    set tableId(value) {
        this._tableId = value;
    }
    resetTableId() {
        this._tableId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tableIdInput() {
        return this._tableId;
    }
}
exports.DataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationDetailsStorageConfigTableOutputReference = DataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationDetailsStorageConfigTableOutputReference;
_b = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationDetailsStorageConfigTableOutputReference[_b] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationDetailsStorageConfigTableOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationDetailsStorageConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        table: dataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationDetailsStorageConfigTableToTerraform(struct.table),
    };
}
exports.dataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationDetailsStorageConfigToTerraform = dataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationDetailsStorageConfigToTerraform;
function dataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationDetailsStorageConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        table: {
            value: dataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationDetailsStorageConfigTableToHclTerraform(struct.table),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationDetailsStorageConfigTableList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationDetailsStorageConfigToHclTerraform = dataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationDetailsStorageConfigToHclTerraform;
class DataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationDetailsStorageConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // table - computed: false, optional: false, required: true
        this._table = new DataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationDetailsStorageConfigTableOutputReference(this, "table");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._table?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.table = this._table?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._table.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._table.internalValue = value.table;
        }
    }
    get table() {
        return this._table;
    }
    putTable(value) {
        this._table.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get tableInput() {
        return this._table.internalValue;
    }
}
exports.DataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationDetailsStorageConfigOutputReference = DataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationDetailsStorageConfigOutputReference;
_c = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationDetailsStorageConfigOutputReference[_c] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationDetailsStorageConfigOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobActionsDeidentifyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cloud_storage_output: cdktf.stringToTerraform(struct.cloudStorageOutput),
        file_types_to_transform: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.fileTypesToTransform),
        transformation_config: dataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationConfigToTerraform(struct.transformationConfig),
        transformation_details_storage_config: dataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationDetailsStorageConfigToTerraform(struct.transformationDetailsStorageConfig),
    };
}
exports.dataLossPreventionJobTriggerInspectJobActionsDeidentifyToTerraform = dataLossPreventionJobTriggerInspectJobActionsDeidentifyToTerraform;
function dataLossPreventionJobTriggerInspectJobActionsDeidentifyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cloud_storage_output: {
            value: cdktf.stringToHclTerraform(struct.cloudStorageOutput),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        file_types_to_transform: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.fileTypesToTransform),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        transformation_config: {
            value: dataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationConfigToHclTerraform(struct.transformationConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationConfigList",
        },
        transformation_details_storage_config: {
            value: dataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationDetailsStorageConfigToHclTerraform(struct.transformationDetailsStorageConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationDetailsStorageConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobActionsDeidentifyToHclTerraform = dataLossPreventionJobTriggerInspectJobActionsDeidentifyToHclTerraform;
class DataLossPreventionJobTriggerInspectJobActionsDeidentifyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // transformation_config - computed: false, optional: true, required: false
        this._transformationConfig = new DataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationConfigOutputReference(this, "transformation_config");
        // transformation_details_storage_config - computed: false, optional: true, required: false
        this._transformationDetailsStorageConfig = new DataLossPreventionJobTriggerInspectJobActionsDeidentifyTransformationDetailsStorageConfigOutputReference(this, "transformation_details_storage_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cloudStorageOutput !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudStorageOutput = this._cloudStorageOutput;
        }
        if (this._fileTypesToTransform !== undefined) {
            hasAnyValues = true;
            internalValueResult.fileTypesToTransform = this._fileTypesToTransform;
        }
        if (this._transformationConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.transformationConfig = this._transformationConfig?.internalValue;
        }
        if (this._transformationDetailsStorageConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.transformationDetailsStorageConfig = this._transformationDetailsStorageConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cloudStorageOutput = undefined;
            this._fileTypesToTransform = undefined;
            this._transformationConfig.internalValue = undefined;
            this._transformationDetailsStorageConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cloudStorageOutput = value.cloudStorageOutput;
            this._fileTypesToTransform = value.fileTypesToTransform;
            this._transformationConfig.internalValue = value.transformationConfig;
            this._transformationDetailsStorageConfig.internalValue = value.transformationDetailsStorageConfig;
        }
    }
    get cloudStorageOutput() {
        return this.getStringAttribute('cloud_storage_output');
    }
    set cloudStorageOutput(value) {
        this._cloudStorageOutput = value;
    }
    // Temporarily expose input value. Use with caution.
    get cloudStorageOutputInput() {
        return this._cloudStorageOutput;
    }
    get fileTypesToTransform() {
        return this.getListAttribute('file_types_to_transform');
    }
    set fileTypesToTransform(value) {
        this._fileTypesToTransform = value;
    }
    resetFileTypesToTransform() {
        this._fileTypesToTransform = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fileTypesToTransformInput() {
        return this._fileTypesToTransform;
    }
    get transformationConfig() {
        return this._transformationConfig;
    }
    putTransformationConfig(value) {
        this._transformationConfig.internalValue = value;
    }
    resetTransformationConfig() {
        this._transformationConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get transformationConfigInput() {
        return this._transformationConfig.internalValue;
    }
    get transformationDetailsStorageConfig() {
        return this._transformationDetailsStorageConfig;
    }
    putTransformationDetailsStorageConfig(value) {
        this._transformationDetailsStorageConfig.internalValue = value;
    }
    resetTransformationDetailsStorageConfig() {
        this._transformationDetailsStorageConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get transformationDetailsStorageConfigInput() {
        return this._transformationDetailsStorageConfig.internalValue;
    }
}
exports.DataLossPreventionJobTriggerInspectJobActionsDeidentifyOutputReference = DataLossPreventionJobTriggerInspectJobActionsDeidentifyOutputReference;
_d = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobActionsDeidentifyOutputReference[_d] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobActionsDeidentifyOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobActionsJobNotificationEmailsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.dataLossPreventionJobTriggerInspectJobActionsJobNotificationEmailsToTerraform = dataLossPreventionJobTriggerInspectJobActionsJobNotificationEmailsToTerraform;
function dataLossPreventionJobTriggerInspectJobActionsJobNotificationEmailsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.dataLossPreventionJobTriggerInspectJobActionsJobNotificationEmailsToHclTerraform = dataLossPreventionJobTriggerInspectJobActionsJobNotificationEmailsToHclTerraform;
class DataLossPreventionJobTriggerInspectJobActionsJobNotificationEmailsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DataLossPreventionJobTriggerInspectJobActionsJobNotificationEmailsOutputReference = DataLossPreventionJobTriggerInspectJobActionsJobNotificationEmailsOutputReference;
_e = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobActionsJobNotificationEmailsOutputReference[_e] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobActionsJobNotificationEmailsOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobActionsPubSubToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        topic: cdktf.stringToTerraform(struct.topic),
    };
}
exports.dataLossPreventionJobTriggerInspectJobActionsPubSubToTerraform = dataLossPreventionJobTriggerInspectJobActionsPubSubToTerraform;
function dataLossPreventionJobTriggerInspectJobActionsPubSubToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        topic: {
            value: cdktf.stringToHclTerraform(struct.topic),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobActionsPubSubToHclTerraform = dataLossPreventionJobTriggerInspectJobActionsPubSubToHclTerraform;
class DataLossPreventionJobTriggerInspectJobActionsPubSubOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._topic !== undefined) {
            hasAnyValues = true;
            internalValueResult.topic = this._topic;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._topic = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._topic = value.topic;
        }
    }
    get topic() {
        return this.getStringAttribute('topic');
    }
    set topic(value) {
        this._topic = value;
    }
    // Temporarily expose input value. Use with caution.
    get topicInput() {
        return this._topic;
    }
}
exports.DataLossPreventionJobTriggerInspectJobActionsPubSubOutputReference = DataLossPreventionJobTriggerInspectJobActionsPubSubOutputReference;
_f = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobActionsPubSubOutputReference[_f] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobActionsPubSubOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobActionsPublishFindingsToCloudDataCatalogToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.dataLossPreventionJobTriggerInspectJobActionsPublishFindingsToCloudDataCatalogToTerraform = dataLossPreventionJobTriggerInspectJobActionsPublishFindingsToCloudDataCatalogToTerraform;
function dataLossPreventionJobTriggerInspectJobActionsPublishFindingsToCloudDataCatalogToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.dataLossPreventionJobTriggerInspectJobActionsPublishFindingsToCloudDataCatalogToHclTerraform = dataLossPreventionJobTriggerInspectJobActionsPublishFindingsToCloudDataCatalogToHclTerraform;
class DataLossPreventionJobTriggerInspectJobActionsPublishFindingsToCloudDataCatalogOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DataLossPreventionJobTriggerInspectJobActionsPublishFindingsToCloudDataCatalogOutputReference = DataLossPreventionJobTriggerInspectJobActionsPublishFindingsToCloudDataCatalogOutputReference;
_g = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobActionsPublishFindingsToCloudDataCatalogOutputReference[_g] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobActionsPublishFindingsToCloudDataCatalogOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobActionsPublishSummaryToCsccToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.dataLossPreventionJobTriggerInspectJobActionsPublishSummaryToCsccToTerraform = dataLossPreventionJobTriggerInspectJobActionsPublishSummaryToCsccToTerraform;
function dataLossPreventionJobTriggerInspectJobActionsPublishSummaryToCsccToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.dataLossPreventionJobTriggerInspectJobActionsPublishSummaryToCsccToHclTerraform = dataLossPreventionJobTriggerInspectJobActionsPublishSummaryToCsccToHclTerraform;
class DataLossPreventionJobTriggerInspectJobActionsPublishSummaryToCsccOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DataLossPreventionJobTriggerInspectJobActionsPublishSummaryToCsccOutputReference = DataLossPreventionJobTriggerInspectJobActionsPublishSummaryToCsccOutputReference;
_h = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobActionsPublishSummaryToCsccOutputReference[_h] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobActionsPublishSummaryToCsccOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobActionsPublishToStackdriverToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.dataLossPreventionJobTriggerInspectJobActionsPublishToStackdriverToTerraform = dataLossPreventionJobTriggerInspectJobActionsPublishToStackdriverToTerraform;
function dataLossPreventionJobTriggerInspectJobActionsPublishToStackdriverToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.dataLossPreventionJobTriggerInspectJobActionsPublishToStackdriverToHclTerraform = dataLossPreventionJobTriggerInspectJobActionsPublishToStackdriverToHclTerraform;
class DataLossPreventionJobTriggerInspectJobActionsPublishToStackdriverOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DataLossPreventionJobTriggerInspectJobActionsPublishToStackdriverOutputReference = DataLossPreventionJobTriggerInspectJobActionsPublishToStackdriverOutputReference;
_j = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobActionsPublishToStackdriverOutputReference[_j] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobActionsPublishToStackdriverOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigTableToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        dataset_id: cdktf.stringToTerraform(struct.datasetId),
        project_id: cdktf.stringToTerraform(struct.projectId),
        table_id: cdktf.stringToTerraform(struct.tableId),
    };
}
exports.dataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigTableToTerraform = dataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigTableToTerraform;
function dataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigTableToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        dataset_id: {
            value: cdktf.stringToHclTerraform(struct.datasetId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        project_id: {
            value: cdktf.stringToHclTerraform(struct.projectId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        table_id: {
            value: cdktf.stringToHclTerraform(struct.tableId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigTableToHclTerraform = dataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigTableToHclTerraform;
class DataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigTableOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._datasetId !== undefined) {
            hasAnyValues = true;
            internalValueResult.datasetId = this._datasetId;
        }
        if (this._projectId !== undefined) {
            hasAnyValues = true;
            internalValueResult.projectId = this._projectId;
        }
        if (this._tableId !== undefined) {
            hasAnyValues = true;
            internalValueResult.tableId = this._tableId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._datasetId = undefined;
            this._projectId = undefined;
            this._tableId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._datasetId = value.datasetId;
            this._projectId = value.projectId;
            this._tableId = value.tableId;
        }
    }
    get datasetId() {
        return this.getStringAttribute('dataset_id');
    }
    set datasetId(value) {
        this._datasetId = value;
    }
    // Temporarily expose input value. Use with caution.
    get datasetIdInput() {
        return this._datasetId;
    }
    get projectId() {
        return this.getStringAttribute('project_id');
    }
    set projectId(value) {
        this._projectId = value;
    }
    // Temporarily expose input value. Use with caution.
    get projectIdInput() {
        return this._projectId;
    }
    get tableId() {
        return this.getStringAttribute('table_id');
    }
    set tableId(value) {
        this._tableId = value;
    }
    resetTableId() {
        this._tableId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tableIdInput() {
        return this._tableId;
    }
}
exports.DataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigTableOutputReference = DataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigTableOutputReference;
_k = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigTableOutputReference[_k] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigTableOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        output_schema: cdktf.stringToTerraform(struct.outputSchema),
        table: dataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigTableToTerraform(struct.table),
    };
}
exports.dataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigToTerraform = dataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigToTerraform;
function dataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        output_schema: {
            value: cdktf.stringToHclTerraform(struct.outputSchema),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        table: {
            value: dataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigTableToHclTerraform(struct.table),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigTableList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigToHclTerraform = dataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigToHclTerraform;
class DataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // table - computed: false, optional: false, required: true
        this._table = new DataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigTableOutputReference(this, "table");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._outputSchema !== undefined) {
            hasAnyValues = true;
            internalValueResult.outputSchema = this._outputSchema;
        }
        if (this._table?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.table = this._table?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._outputSchema = undefined;
            this._table.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._outputSchema = value.outputSchema;
            this._table.internalValue = value.table;
        }
    }
    get outputSchema() {
        return this.getStringAttribute('output_schema');
    }
    set outputSchema(value) {
        this._outputSchema = value;
    }
    resetOutputSchema() {
        this._outputSchema = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get outputSchemaInput() {
        return this._outputSchema;
    }
    get table() {
        return this._table;
    }
    putTable(value) {
        this._table.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get tableInput() {
        return this._table.internalValue;
    }
}
exports.DataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigOutputReference = DataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigOutputReference;
_l = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigOutputReference[_l] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobActionsSaveFindingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        output_config: dataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigToTerraform(struct.outputConfig),
    };
}
exports.dataLossPreventionJobTriggerInspectJobActionsSaveFindingsToTerraform = dataLossPreventionJobTriggerInspectJobActionsSaveFindingsToTerraform;
function dataLossPreventionJobTriggerInspectJobActionsSaveFindingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        output_config: {
            value: dataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigToHclTerraform(struct.outputConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobActionsSaveFindingsToHclTerraform = dataLossPreventionJobTriggerInspectJobActionsSaveFindingsToHclTerraform;
class DataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // output_config - computed: false, optional: false, required: true
        this._outputConfig = new DataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputConfigOutputReference(this, "output_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._outputConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.outputConfig = this._outputConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._outputConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._outputConfig.internalValue = value.outputConfig;
        }
    }
    get outputConfig() {
        return this._outputConfig;
    }
    putOutputConfig(value) {
        this._outputConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get outputConfigInput() {
        return this._outputConfig.internalValue;
    }
}
exports.DataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputReference = DataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputReference;
_m = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputReference[_m] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobActionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        deidentify: dataLossPreventionJobTriggerInspectJobActionsDeidentifyToTerraform(struct.deidentify),
        job_notification_emails: dataLossPreventionJobTriggerInspectJobActionsJobNotificationEmailsToTerraform(struct.jobNotificationEmails),
        pub_sub: dataLossPreventionJobTriggerInspectJobActionsPubSubToTerraform(struct.pubSub),
        publish_findings_to_cloud_data_catalog: dataLossPreventionJobTriggerInspectJobActionsPublishFindingsToCloudDataCatalogToTerraform(struct.publishFindingsToCloudDataCatalog),
        publish_summary_to_cscc: dataLossPreventionJobTriggerInspectJobActionsPublishSummaryToCsccToTerraform(struct.publishSummaryToCscc),
        publish_to_stackdriver: dataLossPreventionJobTriggerInspectJobActionsPublishToStackdriverToTerraform(struct.publishToStackdriver),
        save_findings: dataLossPreventionJobTriggerInspectJobActionsSaveFindingsToTerraform(struct.saveFindings),
    };
}
exports.dataLossPreventionJobTriggerInspectJobActionsToTerraform = dataLossPreventionJobTriggerInspectJobActionsToTerraform;
function dataLossPreventionJobTriggerInspectJobActionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        deidentify: {
            value: dataLossPreventionJobTriggerInspectJobActionsDeidentifyToHclTerraform(struct.deidentify),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobActionsDeidentifyList",
        },
        job_notification_emails: {
            value: dataLossPreventionJobTriggerInspectJobActionsJobNotificationEmailsToHclTerraform(struct.jobNotificationEmails),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobActionsJobNotificationEmailsList",
        },
        pub_sub: {
            value: dataLossPreventionJobTriggerInspectJobActionsPubSubToHclTerraform(struct.pubSub),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobActionsPubSubList",
        },
        publish_findings_to_cloud_data_catalog: {
            value: dataLossPreventionJobTriggerInspectJobActionsPublishFindingsToCloudDataCatalogToHclTerraform(struct.publishFindingsToCloudDataCatalog),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobActionsPublishFindingsToCloudDataCatalogList",
        },
        publish_summary_to_cscc: {
            value: dataLossPreventionJobTriggerInspectJobActionsPublishSummaryToCsccToHclTerraform(struct.publishSummaryToCscc),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobActionsPublishSummaryToCsccList",
        },
        publish_to_stackdriver: {
            value: dataLossPreventionJobTriggerInspectJobActionsPublishToStackdriverToHclTerraform(struct.publishToStackdriver),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobActionsPublishToStackdriverList",
        },
        save_findings: {
            value: dataLossPreventionJobTriggerInspectJobActionsSaveFindingsToHclTerraform(struct.saveFindings),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobActionsSaveFindingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobActionsToHclTerraform = dataLossPreventionJobTriggerInspectJobActionsToHclTerraform;
class DataLossPreventionJobTriggerInspectJobActionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // deidentify - computed: false, optional: true, required: false
        this._deidentify = new DataLossPreventionJobTriggerInspectJobActionsDeidentifyOutputReference(this, "deidentify");
        // job_notification_emails - computed: false, optional: true, required: false
        this._jobNotificationEmails = new DataLossPreventionJobTriggerInspectJobActionsJobNotificationEmailsOutputReference(this, "job_notification_emails");
        // pub_sub - computed: false, optional: true, required: false
        this._pubSub = new DataLossPreventionJobTriggerInspectJobActionsPubSubOutputReference(this, "pub_sub");
        // publish_findings_to_cloud_data_catalog - computed: false, optional: true, required: false
        this._publishFindingsToCloudDataCatalog = new DataLossPreventionJobTriggerInspectJobActionsPublishFindingsToCloudDataCatalogOutputReference(this, "publish_findings_to_cloud_data_catalog");
        // publish_summary_to_cscc - computed: false, optional: true, required: false
        this._publishSummaryToCscc = new DataLossPreventionJobTriggerInspectJobActionsPublishSummaryToCsccOutputReference(this, "publish_summary_to_cscc");
        // publish_to_stackdriver - computed: false, optional: true, required: false
        this._publishToStackdriver = new DataLossPreventionJobTriggerInspectJobActionsPublishToStackdriverOutputReference(this, "publish_to_stackdriver");
        // save_findings - computed: false, optional: true, required: false
        this._saveFindings = new DataLossPreventionJobTriggerInspectJobActionsSaveFindingsOutputReference(this, "save_findings");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._deidentify?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.deidentify = this._deidentify?.internalValue;
        }
        if (this._jobNotificationEmails?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.jobNotificationEmails = this._jobNotificationEmails?.internalValue;
        }
        if (this._pubSub?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.pubSub = this._pubSub?.internalValue;
        }
        if (this._publishFindingsToCloudDataCatalog?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.publishFindingsToCloudDataCatalog = this._publishFindingsToCloudDataCatalog?.internalValue;
        }
        if (this._publishSummaryToCscc?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.publishSummaryToCscc = this._publishSummaryToCscc?.internalValue;
        }
        if (this._publishToStackdriver?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.publishToStackdriver = this._publishToStackdriver?.internalValue;
        }
        if (this._saveFindings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.saveFindings = this._saveFindings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._deidentify.internalValue = undefined;
            this._jobNotificationEmails.internalValue = undefined;
            this._pubSub.internalValue = undefined;
            this._publishFindingsToCloudDataCatalog.internalValue = undefined;
            this._publishSummaryToCscc.internalValue = undefined;
            this._publishToStackdriver.internalValue = undefined;
            this._saveFindings.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._deidentify.internalValue = value.deidentify;
            this._jobNotificationEmails.internalValue = value.jobNotificationEmails;
            this._pubSub.internalValue = value.pubSub;
            this._publishFindingsToCloudDataCatalog.internalValue = value.publishFindingsToCloudDataCatalog;
            this._publishSummaryToCscc.internalValue = value.publishSummaryToCscc;
            this._publishToStackdriver.internalValue = value.publishToStackdriver;
            this._saveFindings.internalValue = value.saveFindings;
        }
    }
    get deidentify() {
        return this._deidentify;
    }
    putDeidentify(value) {
        this._deidentify.internalValue = value;
    }
    resetDeidentify() {
        this._deidentify.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deidentifyInput() {
        return this._deidentify.internalValue;
    }
    get jobNotificationEmails() {
        return this._jobNotificationEmails;
    }
    putJobNotificationEmails(value) {
        this._jobNotificationEmails.internalValue = value;
    }
    resetJobNotificationEmails() {
        this._jobNotificationEmails.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jobNotificationEmailsInput() {
        return this._jobNotificationEmails.internalValue;
    }
    get pubSub() {
        return this._pubSub;
    }
    putPubSub(value) {
        this._pubSub.internalValue = value;
    }
    resetPubSub() {
        this._pubSub.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pubSubInput() {
        return this._pubSub.internalValue;
    }
    get publishFindingsToCloudDataCatalog() {
        return this._publishFindingsToCloudDataCatalog;
    }
    putPublishFindingsToCloudDataCatalog(value) {
        this._publishFindingsToCloudDataCatalog.internalValue = value;
    }
    resetPublishFindingsToCloudDataCatalog() {
        this._publishFindingsToCloudDataCatalog.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get publishFindingsToCloudDataCatalogInput() {
        return this._publishFindingsToCloudDataCatalog.internalValue;
    }
    get publishSummaryToCscc() {
        return this._publishSummaryToCscc;
    }
    putPublishSummaryToCscc(value) {
        this._publishSummaryToCscc.internalValue = value;
    }
    resetPublishSummaryToCscc() {
        this._publishSummaryToCscc.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get publishSummaryToCsccInput() {
        return this._publishSummaryToCscc.internalValue;
    }
    get publishToStackdriver() {
        return this._publishToStackdriver;
    }
    putPublishToStackdriver(value) {
        this._publishToStackdriver.internalValue = value;
    }
    resetPublishToStackdriver() {
        this._publishToStackdriver.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get publishToStackdriverInput() {
        return this._publishToStackdriver.internalValue;
    }
    get saveFindings() {
        return this._saveFindings;
    }
    putSaveFindings(value) {
        this._saveFindings.internalValue = value;
    }
    resetSaveFindings() {
        this._saveFindings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get saveFindingsInput() {
        return this._saveFindings.internalValue;
    }
}
exports.DataLossPreventionJobTriggerInspectJobActionsOutputReference = DataLossPreventionJobTriggerInspectJobActionsOutputReference;
_o = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobActionsOutputReference[_o] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobActionsOutputReference", version: "14.13.1" };
class DataLossPreventionJobTriggerInspectJobActionsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataLossPreventionJobTriggerInspectJobActionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataLossPreventionJobTriggerInspectJobActionsList = DataLossPreventionJobTriggerInspectJobActionsList;
_p = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobActionsList[_p] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobActionsList", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryCloudStoragePathToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        path: cdktf.stringToTerraform(struct.path),
    };
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryCloudStoragePathToTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryCloudStoragePathToTerraform;
function dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryCloudStoragePathToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        path: {
            value: cdktf.stringToHclTerraform(struct.path),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryCloudStoragePathToHclTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryCloudStoragePathToHclTerraform;
class DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryCloudStoragePathOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._path !== undefined) {
            hasAnyValues = true;
            internalValueResult.path = this._path;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._path = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._path = value.path;
        }
    }
    get path() {
        return this.getStringAttribute('path');
    }
    set path(value) {
        this._path = value;
    }
    // Temporarily expose input value. Use with caution.
    get pathInput() {
        return this._path;
    }
}
exports.DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryCloudStoragePathOutputReference = DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryCloudStoragePathOutputReference;
_q = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryCloudStoragePathOutputReference[_q] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryCloudStoragePathOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryWordListStructToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        words: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.words),
    };
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryWordListStructToTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryWordListStructToTerraform;
function dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryWordListStructToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        words: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.words),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryWordListStructToHclTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryWordListStructToHclTerraform;
class DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryWordListStructOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._words !== undefined) {
            hasAnyValues = true;
            internalValueResult.words = this._words;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._words = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._words = value.words;
        }
    }
    get words() {
        return this.getListAttribute('words');
    }
    set words(value) {
        this._words = value;
    }
    // Temporarily expose input value. Use with caution.
    get wordsInput() {
        return this._words;
    }
}
exports.DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryWordListStructOutputReference = DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryWordListStructOutputReference;
_r = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryWordListStructOutputReference[_r] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryWordListStructOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cloud_storage_path: dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryCloudStoragePathToTerraform(struct.cloudStoragePath),
        word_list: dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryWordListStructToTerraform(struct.wordList),
    };
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryToTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryToTerraform;
function dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cloud_storage_path: {
            value: dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryCloudStoragePathToHclTerraform(struct.cloudStoragePath),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryCloudStoragePathList",
        },
        word_list: {
            value: dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryWordListStructToHclTerraform(struct.wordList),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryWordListStructList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryToHclTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryToHclTerraform;
class DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cloud_storage_path - computed: false, optional: true, required: false
        this._cloudStoragePath = new DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryCloudStoragePathOutputReference(this, "cloud_storage_path");
        // word_list - computed: false, optional: true, required: false
        this._wordList = new DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryWordListStructOutputReference(this, "word_list");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cloudStoragePath?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudStoragePath = this._cloudStoragePath?.internalValue;
        }
        if (this._wordList?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.wordList = this._wordList?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cloudStoragePath.internalValue = undefined;
            this._wordList.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cloudStoragePath.internalValue = value.cloudStoragePath;
            this._wordList.internalValue = value.wordList;
        }
    }
    get cloudStoragePath() {
        return this._cloudStoragePath;
    }
    putCloudStoragePath(value) {
        this._cloudStoragePath.internalValue = value;
    }
    resetCloudStoragePath() {
        this._cloudStoragePath.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudStoragePathInput() {
        return this._cloudStoragePath.internalValue;
    }
    get wordList() {
        return this._wordList;
    }
    putWordList(value) {
        this._wordList.internalValue = value;
    }
    resetWordList() {
        this._wordList.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get wordListInput() {
        return this._wordList.internalValue;
    }
}
exports.DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryOutputReference = DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryOutputReference;
_s = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryOutputReference[_s] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesInfoTypeSensitivityScoreToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        score: cdktf.stringToTerraform(struct.score),
    };
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesInfoTypeSensitivityScoreToTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesInfoTypeSensitivityScoreToTerraform;
function dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesInfoTypeSensitivityScoreToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        score: {
            value: cdktf.stringToHclTerraform(struct.score),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesInfoTypeSensitivityScoreToHclTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesInfoTypeSensitivityScoreToHclTerraform;
class DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesInfoTypeSensitivityScoreOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._score !== undefined) {
            hasAnyValues = true;
            internalValueResult.score = this._score;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._score = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._score = value.score;
        }
    }
    get score() {
        return this.getStringAttribute('score');
    }
    set score(value) {
        this._score = value;
    }
    // Temporarily expose input value. Use with caution.
    get scoreInput() {
        return this._score;
    }
}
exports.DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesInfoTypeSensitivityScoreOutputReference = DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesInfoTypeSensitivityScoreOutputReference;
_t = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesInfoTypeSensitivityScoreOutputReference[_t] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesInfoTypeSensitivityScoreOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesInfoTypeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        version: cdktf.stringToTerraform(struct.version),
        sensitivity_score: dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesInfoTypeSensitivityScoreToTerraform(struct.sensitivityScore),
    };
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesInfoTypeToTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesInfoTypeToTerraform;
function dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesInfoTypeToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        version: {
            value: cdktf.stringToHclTerraform(struct.version),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sensitivity_score: {
            value: dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesInfoTypeSensitivityScoreToHclTerraform(struct.sensitivityScore),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesInfoTypeSensitivityScoreList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesInfoTypeToHclTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesInfoTypeToHclTerraform;
class DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesInfoTypeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // sensitivity_score - computed: false, optional: true, required: false
        this._sensitivityScore = new DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesInfoTypeSensitivityScoreOutputReference(this, "sensitivity_score");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._version !== undefined) {
            hasAnyValues = true;
            internalValueResult.version = this._version;
        }
        if (this._sensitivityScore?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sensitivityScore = this._sensitivityScore?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._name = undefined;
            this._version = undefined;
            this._sensitivityScore.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._name = value.name;
            this._version = value.version;
            this._sensitivityScore.internalValue = value.sensitivityScore;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get version() {
        return this.getStringAttribute('version');
    }
    set version(value) {
        this._version = value;
    }
    resetVersion() {
        this._version = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get versionInput() {
        return this._version;
    }
    get sensitivityScore() {
        return this._sensitivityScore;
    }
    putSensitivityScore(value) {
        this._sensitivityScore.internalValue = value;
    }
    resetSensitivityScore() {
        this._sensitivityScore.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sensitivityScoreInput() {
        return this._sensitivityScore.internalValue;
    }
}
exports.DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesInfoTypeOutputReference = DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesInfoTypeOutputReference;
_u = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesInfoTypeOutputReference[_u] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesInfoTypeOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesRegexToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        group_indexes: cdktf.listMapper(cdktf.numberToTerraform, false)(struct.groupIndexes),
        pattern: cdktf.stringToTerraform(struct.pattern),
    };
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesRegexToTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesRegexToTerraform;
function dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesRegexToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        group_indexes: {
            value: cdktf.listMapperHcl(cdktf.numberToHclTerraform, false)(struct.groupIndexes),
            isBlock: false,
            type: "list",
            storageClassType: "numberList",
        },
        pattern: {
            value: cdktf.stringToHclTerraform(struct.pattern),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesRegexToHclTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesRegexToHclTerraform;
class DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesRegexOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._groupIndexes !== undefined) {
            hasAnyValues = true;
            internalValueResult.groupIndexes = this._groupIndexes;
        }
        if (this._pattern !== undefined) {
            hasAnyValues = true;
            internalValueResult.pattern = this._pattern;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._groupIndexes = undefined;
            this._pattern = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._groupIndexes = value.groupIndexes;
            this._pattern = value.pattern;
        }
    }
    get groupIndexes() {
        return this.getNumberListAttribute('group_indexes');
    }
    set groupIndexes(value) {
        this._groupIndexes = value;
    }
    resetGroupIndexes() {
        this._groupIndexes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get groupIndexesInput() {
        return this._groupIndexes;
    }
    get pattern() {
        return this.getStringAttribute('pattern');
    }
    set pattern(value) {
        this._pattern = value;
    }
    // Temporarily expose input value. Use with caution.
    get patternInput() {
        return this._pattern;
    }
}
exports.DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesRegexOutputReference = DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesRegexOutputReference;
_v = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesRegexOutputReference[_v] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesRegexOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesSensitivityScoreToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        score: cdktf.stringToTerraform(struct.score),
    };
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesSensitivityScoreToTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesSensitivityScoreToTerraform;
function dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesSensitivityScoreToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        score: {
            value: cdktf.stringToHclTerraform(struct.score),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesSensitivityScoreToHclTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesSensitivityScoreToHclTerraform;
class DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesSensitivityScoreOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._score !== undefined) {
            hasAnyValues = true;
            internalValueResult.score = this._score;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._score = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._score = value.score;
        }
    }
    get score() {
        return this.getStringAttribute('score');
    }
    set score(value) {
        this._score = value;
    }
    // Temporarily expose input value. Use with caution.
    get scoreInput() {
        return this._score;
    }
}
exports.DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesSensitivityScoreOutputReference = DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesSensitivityScoreOutputReference;
_w = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesSensitivityScoreOutputReference[_w] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesSensitivityScoreOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesStoredTypeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesStoredTypeToTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesStoredTypeToTerraform;
function dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesStoredTypeToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesStoredTypeToHclTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesStoredTypeToHclTerraform;
class DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesStoredTypeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._name = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._name = value.name;
        }
    }
    // create_time - computed: true, optional: false, required: false
    get createTime() {
        return this.getStringAttribute('create_time');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
}
exports.DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesStoredTypeOutputReference = DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesStoredTypeOutputReference;
_x = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesStoredTypeOutputReference[_x] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesStoredTypeOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesSurrogateTypeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesSurrogateTypeToTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesSurrogateTypeToTerraform;
function dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesSurrogateTypeToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesSurrogateTypeToHclTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesSurrogateTypeToHclTerraform;
class DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesSurrogateTypeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesSurrogateTypeOutputReference = DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesSurrogateTypeOutputReference;
_y = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesSurrogateTypeOutputReference[_y] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesSurrogateTypeOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        exclusion_type: cdktf.stringToTerraform(struct.exclusionType),
        likelihood: cdktf.stringToTerraform(struct.likelihood),
        dictionary: dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryToTerraform(struct.dictionary),
        info_type: dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesInfoTypeToTerraform(struct.infoType),
        regex: dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesRegexToTerraform(struct.regex),
        sensitivity_score: dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesSensitivityScoreToTerraform(struct.sensitivityScore),
        stored_type: dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesStoredTypeToTerraform(struct.storedType),
        surrogate_type: dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesSurrogateTypeToTerraform(struct.surrogateType),
    };
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesToTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesToTerraform;
function dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        exclusion_type: {
            value: cdktf.stringToHclTerraform(struct.exclusionType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        likelihood: {
            value: cdktf.stringToHclTerraform(struct.likelihood),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        dictionary: {
            value: dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryToHclTerraform(struct.dictionary),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryList",
        },
        info_type: {
            value: dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesInfoTypeToHclTerraform(struct.infoType),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesInfoTypeList",
        },
        regex: {
            value: dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesRegexToHclTerraform(struct.regex),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesRegexList",
        },
        sensitivity_score: {
            value: dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesSensitivityScoreToHclTerraform(struct.sensitivityScore),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesSensitivityScoreList",
        },
        stored_type: {
            value: dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesStoredTypeToHclTerraform(struct.storedType),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesStoredTypeList",
        },
        surrogate_type: {
            value: dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesSurrogateTypeToHclTerraform(struct.surrogateType),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesSurrogateTypeList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesToHclTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesToHclTerraform;
class DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // dictionary - computed: false, optional: true, required: false
        this._dictionary = new DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesDictionaryOutputReference(this, "dictionary");
        // info_type - computed: false, optional: false, required: true
        this._infoType = new DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesInfoTypeOutputReference(this, "info_type");
        // regex - computed: false, optional: true, required: false
        this._regex = new DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesRegexOutputReference(this, "regex");
        // sensitivity_score - computed: false, optional: true, required: false
        this._sensitivityScore = new DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesSensitivityScoreOutputReference(this, "sensitivity_score");
        // stored_type - computed: false, optional: true, required: false
        this._storedType = new DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesStoredTypeOutputReference(this, "stored_type");
        // surrogate_type - computed: false, optional: true, required: false
        this._surrogateType = new DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesSurrogateTypeOutputReference(this, "surrogate_type");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._exclusionType !== undefined) {
            hasAnyValues = true;
            internalValueResult.exclusionType = this._exclusionType;
        }
        if (this._likelihood !== undefined) {
            hasAnyValues = true;
            internalValueResult.likelihood = this._likelihood;
        }
        if (this._dictionary?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dictionary = this._dictionary?.internalValue;
        }
        if (this._infoType?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.infoType = this._infoType?.internalValue;
        }
        if (this._regex?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.regex = this._regex?.internalValue;
        }
        if (this._sensitivityScore?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sensitivityScore = this._sensitivityScore?.internalValue;
        }
        if (this._storedType?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.storedType = this._storedType?.internalValue;
        }
        if (this._surrogateType?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.surrogateType = this._surrogateType?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._exclusionType = undefined;
            this._likelihood = undefined;
            this._dictionary.internalValue = undefined;
            this._infoType.internalValue = undefined;
            this._regex.internalValue = undefined;
            this._sensitivityScore.internalValue = undefined;
            this._storedType.internalValue = undefined;
            this._surrogateType.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._exclusionType = value.exclusionType;
            this._likelihood = value.likelihood;
            this._dictionary.internalValue = value.dictionary;
            this._infoType.internalValue = value.infoType;
            this._regex.internalValue = value.regex;
            this._sensitivityScore.internalValue = value.sensitivityScore;
            this._storedType.internalValue = value.storedType;
            this._surrogateType.internalValue = value.surrogateType;
        }
    }
    get exclusionType() {
        return this.getStringAttribute('exclusion_type');
    }
    set exclusionType(value) {
        this._exclusionType = value;
    }
    resetExclusionType() {
        this._exclusionType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get exclusionTypeInput() {
        return this._exclusionType;
    }
    get likelihood() {
        return this.getStringAttribute('likelihood');
    }
    set likelihood(value) {
        this._likelihood = value;
    }
    resetLikelihood() {
        this._likelihood = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get likelihoodInput() {
        return this._likelihood;
    }
    get dictionary() {
        return this._dictionary;
    }
    putDictionary(value) {
        this._dictionary.internalValue = value;
    }
    resetDictionary() {
        this._dictionary.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dictionaryInput() {
        return this._dictionary.internalValue;
    }
    get infoType() {
        return this._infoType;
    }
    putInfoType(value) {
        this._infoType.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get infoTypeInput() {
        return this._infoType.internalValue;
    }
    get regex() {
        return this._regex;
    }
    putRegex(value) {
        this._regex.internalValue = value;
    }
    resetRegex() {
        this._regex.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get regexInput() {
        return this._regex.internalValue;
    }
    get sensitivityScore() {
        return this._sensitivityScore;
    }
    putSensitivityScore(value) {
        this._sensitivityScore.internalValue = value;
    }
    resetSensitivityScore() {
        this._sensitivityScore.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sensitivityScoreInput() {
        return this._sensitivityScore.internalValue;
    }
    get storedType() {
        return this._storedType;
    }
    putStoredType(value) {
        this._storedType.internalValue = value;
    }
    resetStoredType() {
        this._storedType.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get storedTypeInput() {
        return this._storedType.internalValue;
    }
    get surrogateType() {
        return this._surrogateType;
    }
    putSurrogateType(value) {
        this._surrogateType.internalValue = value;
    }
    resetSurrogateType() {
        this._surrogateType.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get surrogateTypeInput() {
        return this._surrogateType.internalValue;
    }
}
exports.DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesOutputReference = DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesOutputReference;
_z = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesOutputReference[_z] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesOutputReference", version: "14.13.1" };
class DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesList = DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesList;
_0 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesList[_0] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesList", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobInspectConfigInfoTypesSensitivityScoreToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        score: cdktf.stringToTerraform(struct.score),
    };
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigInfoTypesSensitivityScoreToTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigInfoTypesSensitivityScoreToTerraform;
function dataLossPreventionJobTriggerInspectJobInspectConfigInfoTypesSensitivityScoreToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        score: {
            value: cdktf.stringToHclTerraform(struct.score),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigInfoTypesSensitivityScoreToHclTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigInfoTypesSensitivityScoreToHclTerraform;
class DataLossPreventionJobTriggerInspectJobInspectConfigInfoTypesSensitivityScoreOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._score !== undefined) {
            hasAnyValues = true;
            internalValueResult.score = this._score;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._score = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._score = value.score;
        }
    }
    get score() {
        return this.getStringAttribute('score');
    }
    set score(value) {
        this._score = value;
    }
    // Temporarily expose input value. Use with caution.
    get scoreInput() {
        return this._score;
    }
}
exports.DataLossPreventionJobTriggerInspectJobInspectConfigInfoTypesSensitivityScoreOutputReference = DataLossPreventionJobTriggerInspectJobInspectConfigInfoTypesSensitivityScoreOutputReference;
_1 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobInspectConfigInfoTypesSensitivityScoreOutputReference[_1] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobInspectConfigInfoTypesSensitivityScoreOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobInspectConfigInfoTypesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        version: cdktf.stringToTerraform(struct.version),
        sensitivity_score: dataLossPreventionJobTriggerInspectJobInspectConfigInfoTypesSensitivityScoreToTerraform(struct.sensitivityScore),
    };
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigInfoTypesToTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigInfoTypesToTerraform;
function dataLossPreventionJobTriggerInspectJobInspectConfigInfoTypesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        version: {
            value: cdktf.stringToHclTerraform(struct.version),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sensitivity_score: {
            value: dataLossPreventionJobTriggerInspectJobInspectConfigInfoTypesSensitivityScoreToHclTerraform(struct.sensitivityScore),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobInspectConfigInfoTypesSensitivityScoreList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigInfoTypesToHclTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigInfoTypesToHclTerraform;
class DataLossPreventionJobTriggerInspectJobInspectConfigInfoTypesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // sensitivity_score - computed: false, optional: true, required: false
        this._sensitivityScore = new DataLossPreventionJobTriggerInspectJobInspectConfigInfoTypesSensitivityScoreOutputReference(this, "sensitivity_score");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._version !== undefined) {
            hasAnyValues = true;
            internalValueResult.version = this._version;
        }
        if (this._sensitivityScore?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sensitivityScore = this._sensitivityScore?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
            this._version = undefined;
            this._sensitivityScore.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
            this._version = value.version;
            this._sensitivityScore.internalValue = value.sensitivityScore;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get version() {
        return this.getStringAttribute('version');
    }
    set version(value) {
        this._version = value;
    }
    resetVersion() {
        this._version = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get versionInput() {
        return this._version;
    }
    get sensitivityScore() {
        return this._sensitivityScore;
    }
    putSensitivityScore(value) {
        this._sensitivityScore.internalValue = value;
    }
    resetSensitivityScore() {
        this._sensitivityScore.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sensitivityScoreInput() {
        return this._sensitivityScore.internalValue;
    }
}
exports.DataLossPreventionJobTriggerInspectJobInspectConfigInfoTypesOutputReference = DataLossPreventionJobTriggerInspectJobInspectConfigInfoTypesOutputReference;
_2 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobInspectConfigInfoTypesOutputReference[_2] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobInspectConfigInfoTypesOutputReference", version: "14.13.1" };
class DataLossPreventionJobTriggerInspectJobInspectConfigInfoTypesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataLossPreventionJobTriggerInspectJobInspectConfigInfoTypesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataLossPreventionJobTriggerInspectJobInspectConfigInfoTypesList = DataLossPreventionJobTriggerInspectJobInspectConfigInfoTypesList;
_3 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobInspectConfigInfoTypesList[_3] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobInspectConfigInfoTypesList", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeSensitivityScoreToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        score: cdktf.stringToTerraform(struct.score),
    };
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeSensitivityScoreToTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeSensitivityScoreToTerraform;
function dataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeSensitivityScoreToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        score: {
            value: cdktf.stringToHclTerraform(struct.score),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeSensitivityScoreToHclTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeSensitivityScoreToHclTerraform;
class DataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeSensitivityScoreOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._score !== undefined) {
            hasAnyValues = true;
            internalValueResult.score = this._score;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._score = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._score = value.score;
        }
    }
    get score() {
        return this.getStringAttribute('score');
    }
    set score(value) {
        this._score = value;
    }
    // Temporarily expose input value. Use with caution.
    get scoreInput() {
        return this._score;
    }
}
exports.DataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeSensitivityScoreOutputReference = DataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeSensitivityScoreOutputReference;
_4 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeSensitivityScoreOutputReference[_4] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeSensitivityScoreOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        version: cdktf.stringToTerraform(struct.version),
        sensitivity_score: dataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeSensitivityScoreToTerraform(struct.sensitivityScore),
    };
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeToTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeToTerraform;
function dataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        version: {
            value: cdktf.stringToHclTerraform(struct.version),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sensitivity_score: {
            value: dataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeSensitivityScoreToHclTerraform(struct.sensitivityScore),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeSensitivityScoreList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeToHclTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeToHclTerraform;
class DataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // sensitivity_score - computed: false, optional: true, required: false
        this._sensitivityScore = new DataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeSensitivityScoreOutputReference(this, "sensitivity_score");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._version !== undefined) {
            hasAnyValues = true;
            internalValueResult.version = this._version;
        }
        if (this._sensitivityScore?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sensitivityScore = this._sensitivityScore?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._name = undefined;
            this._version = undefined;
            this._sensitivityScore.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._name = value.name;
            this._version = value.version;
            this._sensitivityScore.internalValue = value.sensitivityScore;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get version() {
        return this.getStringAttribute('version');
    }
    set version(value) {
        this._version = value;
    }
    resetVersion() {
        this._version = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get versionInput() {
        return this._version;
    }
    get sensitivityScore() {
        return this._sensitivityScore;
    }
    putSensitivityScore(value) {
        this._sensitivityScore.internalValue = value;
    }
    resetSensitivityScore() {
        this._sensitivityScore.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sensitivityScoreInput() {
        return this._sensitivityScore.internalValue;
    }
}
exports.DataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeOutputReference = DataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeOutputReference;
_5 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeOutputReference[_5] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max_findings: cdktf.numberToTerraform(struct.maxFindings),
        info_type: dataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeToTerraform(struct.infoType),
    };
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeToTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeToTerraform;
function dataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        max_findings: {
            value: cdktf.numberToHclTerraform(struct.maxFindings),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        info_type: {
            value: dataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeToHclTerraform(struct.infoType),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeToHclTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeToHclTerraform;
class DataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // info_type - computed: false, optional: true, required: false
        this._infoType = new DataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeInfoTypeOutputReference(this, "info_type");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._maxFindings !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxFindings = this._maxFindings;
        }
        if (this._infoType?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.infoType = this._infoType?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._maxFindings = undefined;
            this._infoType.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._maxFindings = value.maxFindings;
            this._infoType.internalValue = value.infoType;
        }
    }
    get maxFindings() {
        return this.getNumberAttribute('max_findings');
    }
    set maxFindings(value) {
        this._maxFindings = value;
    }
    resetMaxFindings() {
        this._maxFindings = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxFindingsInput() {
        return this._maxFindings;
    }
    get infoType() {
        return this._infoType;
    }
    putInfoType(value) {
        this._infoType.internalValue = value;
    }
    resetInfoType() {
        this._infoType.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get infoTypeInput() {
        return this._infoType.internalValue;
    }
}
exports.DataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeOutputReference = DataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeOutputReference;
_6 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeOutputReference[_6] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeOutputReference", version: "14.13.1" };
class DataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeList = DataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeList;
_7 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeList[_7] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeList", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobInspectConfigLimitsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max_findings_per_item: cdktf.numberToTerraform(struct.maxFindingsPerItem),
        max_findings_per_request: cdktf.numberToTerraform(struct.maxFindingsPerRequest),
        max_findings_per_info_type: cdktf.listMapper(dataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeToTerraform, true)(struct.maxFindingsPerInfoType),
    };
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigLimitsToTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigLimitsToTerraform;
function dataLossPreventionJobTriggerInspectJobInspectConfigLimitsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        max_findings_per_item: {
            value: cdktf.numberToHclTerraform(struct.maxFindingsPerItem),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        max_findings_per_request: {
            value: cdktf.numberToHclTerraform(struct.maxFindingsPerRequest),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        max_findings_per_info_type: {
            value: cdktf.listMapperHcl(dataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeToHclTerraform, true)(struct.maxFindingsPerInfoType),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigLimitsToHclTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigLimitsToHclTerraform;
class DataLossPreventionJobTriggerInspectJobInspectConfigLimitsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // max_findings_per_info_type - computed: false, optional: true, required: false
        this._maxFindingsPerInfoType = new DataLossPreventionJobTriggerInspectJobInspectConfigLimitsMaxFindingsPerInfoTypeList(this, "max_findings_per_info_type", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._maxFindingsPerItem !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxFindingsPerItem = this._maxFindingsPerItem;
        }
        if (this._maxFindingsPerRequest !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxFindingsPerRequest = this._maxFindingsPerRequest;
        }
        if (this._maxFindingsPerInfoType?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxFindingsPerInfoType = this._maxFindingsPerInfoType?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._maxFindingsPerItem = undefined;
            this._maxFindingsPerRequest = undefined;
            this._maxFindingsPerInfoType.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._maxFindingsPerItem = value.maxFindingsPerItem;
            this._maxFindingsPerRequest = value.maxFindingsPerRequest;
            this._maxFindingsPerInfoType.internalValue = value.maxFindingsPerInfoType;
        }
    }
    get maxFindingsPerItem() {
        return this.getNumberAttribute('max_findings_per_item');
    }
    set maxFindingsPerItem(value) {
        this._maxFindingsPerItem = value;
    }
    resetMaxFindingsPerItem() {
        this._maxFindingsPerItem = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxFindingsPerItemInput() {
        return this._maxFindingsPerItem;
    }
    get maxFindingsPerRequest() {
        return this.getNumberAttribute('max_findings_per_request');
    }
    set maxFindingsPerRequest(value) {
        this._maxFindingsPerRequest = value;
    }
    resetMaxFindingsPerRequest() {
        this._maxFindingsPerRequest = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxFindingsPerRequestInput() {
        return this._maxFindingsPerRequest;
    }
    get maxFindingsPerInfoType() {
        return this._maxFindingsPerInfoType;
    }
    putMaxFindingsPerInfoType(value) {
        this._maxFindingsPerInfoType.internalValue = value;
    }
    resetMaxFindingsPerInfoType() {
        this._maxFindingsPerInfoType.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxFindingsPerInfoTypeInput() {
        return this._maxFindingsPerInfoType.internalValue;
    }
}
exports.DataLossPreventionJobTriggerInspectJobInspectConfigLimitsOutputReference = DataLossPreventionJobTriggerInspectJobInspectConfigLimitsOutputReference;
_8 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobInspectConfigLimitsOutputReference[_8] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobInspectConfigLimitsOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetInfoTypesSensitivityScoreToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        score: cdktf.stringToTerraform(struct.score),
    };
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetInfoTypesSensitivityScoreToTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetInfoTypesSensitivityScoreToTerraform;
function dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetInfoTypesSensitivityScoreToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        score: {
            value: cdktf.stringToHclTerraform(struct.score),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetInfoTypesSensitivityScoreToHclTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetInfoTypesSensitivityScoreToHclTerraform;
class DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetInfoTypesSensitivityScoreOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._score !== undefined) {
            hasAnyValues = true;
            internalValueResult.score = this._score;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._score = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._score = value.score;
        }
    }
    get score() {
        return this.getStringAttribute('score');
    }
    set score(value) {
        this._score = value;
    }
    // Temporarily expose input value. Use with caution.
    get scoreInput() {
        return this._score;
    }
}
exports.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetInfoTypesSensitivityScoreOutputReference = DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetInfoTypesSensitivityScoreOutputReference;
_9 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetInfoTypesSensitivityScoreOutputReference[_9] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetInfoTypesSensitivityScoreOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetInfoTypesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        version: cdktf.stringToTerraform(struct.version),
        sensitivity_score: dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetInfoTypesSensitivityScoreToTerraform(struct.sensitivityScore),
    };
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetInfoTypesToTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetInfoTypesToTerraform;
function dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetInfoTypesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        version: {
            value: cdktf.stringToHclTerraform(struct.version),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sensitivity_score: {
            value: dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetInfoTypesSensitivityScoreToHclTerraform(struct.sensitivityScore),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetInfoTypesSensitivityScoreList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetInfoTypesToHclTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetInfoTypesToHclTerraform;
class DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetInfoTypesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // sensitivity_score - computed: false, optional: true, required: false
        this._sensitivityScore = new DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetInfoTypesSensitivityScoreOutputReference(this, "sensitivity_score");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._version !== undefined) {
            hasAnyValues = true;
            internalValueResult.version = this._version;
        }
        if (this._sensitivityScore?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sensitivityScore = this._sensitivityScore?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
            this._version = undefined;
            this._sensitivityScore.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
            this._version = value.version;
            this._sensitivityScore.internalValue = value.sensitivityScore;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get version() {
        return this.getStringAttribute('version');
    }
    set version(value) {
        this._version = value;
    }
    resetVersion() {
        this._version = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get versionInput() {
        return this._version;
    }
    get sensitivityScore() {
        return this._sensitivityScore;
    }
    putSensitivityScore(value) {
        this._sensitivityScore.internalValue = value;
    }
    resetSensitivityScore() {
        this._sensitivityScore.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sensitivityScoreInput() {
        return this._sensitivityScore.internalValue;
    }
}
exports.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetInfoTypesOutputReference = DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetInfoTypesOutputReference;
_10 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetInfoTypesOutputReference[_10] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetInfoTypesOutputReference", version: "14.13.1" };
class DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetInfoTypesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetInfoTypesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetInfoTypesList = DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetInfoTypesList;
_11 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetInfoTypesList[_11] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetInfoTypesList", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        path: cdktf.stringToTerraform(struct.path),
    };
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathToTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathToTerraform;
function dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        path: {
            value: cdktf.stringToHclTerraform(struct.path),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathToHclTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathToHclTerraform;
class DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._path !== undefined) {
            hasAnyValues = true;
            internalValueResult.path = this._path;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._path = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._path = value.path;
        }
    }
    get path() {
        return this.getStringAttribute('path');
    }
    set path(value) {
        this._path = value;
    }
    // Temporarily expose input value. Use with caution.
    get pathInput() {
        return this._path;
    }
}
exports.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathOutputReference = DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathOutputReference;
_12 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathOutputReference[_12] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryWordListStructToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        words: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.words),
    };
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryWordListStructToTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryWordListStructToTerraform;
function dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryWordListStructToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        words: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.words),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryWordListStructToHclTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryWordListStructToHclTerraform;
class DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryWordListStructOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._words !== undefined) {
            hasAnyValues = true;
            internalValueResult.words = this._words;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._words = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._words = value.words;
        }
    }
    get words() {
        return this.getListAttribute('words');
    }
    set words(value) {
        this._words = value;
    }
    // Temporarily expose input value. Use with caution.
    get wordsInput() {
        return this._words;
    }
}
exports.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryWordListStructOutputReference = DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryWordListStructOutputReference;
_13 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryWordListStructOutputReference[_13] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryWordListStructOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cloud_storage_path: dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathToTerraform(struct.cloudStoragePath),
        word_list: dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryWordListStructToTerraform(struct.wordList),
    };
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryToTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryToTerraform;
function dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cloud_storage_path: {
            value: dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathToHclTerraform(struct.cloudStoragePath),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathList",
        },
        word_list: {
            value: dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryWordListStructToHclTerraform(struct.wordList),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryWordListStructList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryToHclTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryToHclTerraform;
class DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cloud_storage_path - computed: false, optional: true, required: false
        this._cloudStoragePath = new DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryCloudStoragePathOutputReference(this, "cloud_storage_path");
        // word_list - computed: false, optional: true, required: false
        this._wordList = new DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryWordListStructOutputReference(this, "word_list");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cloudStoragePath?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudStoragePath = this._cloudStoragePath?.internalValue;
        }
        if (this._wordList?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.wordList = this._wordList?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cloudStoragePath.internalValue = undefined;
            this._wordList.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cloudStoragePath.internalValue = value.cloudStoragePath;
            this._wordList.internalValue = value.wordList;
        }
    }
    get cloudStoragePath() {
        return this._cloudStoragePath;
    }
    putCloudStoragePath(value) {
        this._cloudStoragePath.internalValue = value;
    }
    resetCloudStoragePath() {
        this._cloudStoragePath.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudStoragePathInput() {
        return this._cloudStoragePath.internalValue;
    }
    get wordList() {
        return this._wordList;
    }
    putWordList(value) {
        this._wordList.internalValue = value;
    }
    resetWordList() {
        this._wordList.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get wordListInput() {
        return this._wordList.internalValue;
    }
}
exports.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryOutputReference = DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryOutputReference;
_14 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryOutputReference[_14] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordHotwordRegexToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        group_indexes: cdktf.listMapper(cdktf.numberToTerraform, false)(struct.groupIndexes),
        pattern: cdktf.stringToTerraform(struct.pattern),
    };
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordHotwordRegexToTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordHotwordRegexToTerraform;
function dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordHotwordRegexToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        group_indexes: {
            value: cdktf.listMapperHcl(cdktf.numberToHclTerraform, false)(struct.groupIndexes),
            isBlock: false,
            type: "list",
            storageClassType: "numberList",
        },
        pattern: {
            value: cdktf.stringToHclTerraform(struct.pattern),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordHotwordRegexToHclTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordHotwordRegexToHclTerraform;
class DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordHotwordRegexOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._groupIndexes !== undefined) {
            hasAnyValues = true;
            internalValueResult.groupIndexes = this._groupIndexes;
        }
        if (this._pattern !== undefined) {
            hasAnyValues = true;
            internalValueResult.pattern = this._pattern;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._groupIndexes = undefined;
            this._pattern = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._groupIndexes = value.groupIndexes;
            this._pattern = value.pattern;
        }
    }
    get groupIndexes() {
        return this.getNumberListAttribute('group_indexes');
    }
    set groupIndexes(value) {
        this._groupIndexes = value;
    }
    resetGroupIndexes() {
        this._groupIndexes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get groupIndexesInput() {
        return this._groupIndexes;
    }
    get pattern() {
        return this.getStringAttribute('pattern');
    }
    set pattern(value) {
        this._pattern = value;
    }
    resetPattern() {
        this._pattern = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get patternInput() {
        return this._pattern;
    }
}
exports.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordHotwordRegexOutputReference = DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordHotwordRegexOutputReference;
_15 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordHotwordRegexOutputReference[_15] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordHotwordRegexOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordProximityToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        window_after: cdktf.numberToTerraform(struct.windowAfter),
        window_before: cdktf.numberToTerraform(struct.windowBefore),
    };
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordProximityToTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordProximityToTerraform;
function dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordProximityToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        window_after: {
            value: cdktf.numberToHclTerraform(struct.windowAfter),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        window_before: {
            value: cdktf.numberToHclTerraform(struct.windowBefore),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordProximityToHclTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordProximityToHclTerraform;
class DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordProximityOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._windowAfter !== undefined) {
            hasAnyValues = true;
            internalValueResult.windowAfter = this._windowAfter;
        }
        if (this._windowBefore !== undefined) {
            hasAnyValues = true;
            internalValueResult.windowBefore = this._windowBefore;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._windowAfter = undefined;
            this._windowBefore = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._windowAfter = value.windowAfter;
            this._windowBefore = value.windowBefore;
        }
    }
    get windowAfter() {
        return this.getNumberAttribute('window_after');
    }
    set windowAfter(value) {
        this._windowAfter = value;
    }
    resetWindowAfter() {
        this._windowAfter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get windowAfterInput() {
        return this._windowAfter;
    }
    get windowBefore() {
        return this.getNumberAttribute('window_before');
    }
    set windowBefore(value) {
        this._windowBefore = value;
    }
    resetWindowBefore() {
        this._windowBefore = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get windowBeforeInput() {
        return this._windowBefore;
    }
}
exports.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordProximityOutputReference = DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordProximityOutputReference;
_16 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordProximityOutputReference[_16] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordProximityOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        hotword_regex: dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordHotwordRegexToTerraform(struct.hotwordRegex),
        proximity: dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordProximityToTerraform(struct.proximity),
    };
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordToTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordToTerraform;
function dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        hotword_regex: {
            value: dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordHotwordRegexToHclTerraform(struct.hotwordRegex),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordHotwordRegexList",
        },
        proximity: {
            value: dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordProximityToHclTerraform(struct.proximity),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordProximityList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordToHclTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordToHclTerraform;
class DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // hotword_regex - computed: false, optional: true, required: false
        this._hotwordRegex = new DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordHotwordRegexOutputReference(this, "hotword_regex");
        // proximity - computed: false, optional: true, required: false
        this._proximity = new DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordProximityOutputReference(this, "proximity");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hotwordRegex?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.hotwordRegex = this._hotwordRegex?.internalValue;
        }
        if (this._proximity?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.proximity = this._proximity?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hotwordRegex.internalValue = undefined;
            this._proximity.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hotwordRegex.internalValue = value.hotwordRegex;
            this._proximity.internalValue = value.proximity;
        }
    }
    get hotwordRegex() {
        return this._hotwordRegex;
    }
    putHotwordRegex(value) {
        this._hotwordRegex.internalValue = value;
    }
    resetHotwordRegex() {
        this._hotwordRegex.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hotwordRegexInput() {
        return this._hotwordRegex.internalValue;
    }
    get proximity() {
        return this._proximity;
    }
    putProximity(value) {
        this._proximity.internalValue = value;
    }
    resetProximity() {
        this._proximity.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get proximityInput() {
        return this._proximity.internalValue;
    }
}
exports.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordOutputReference = DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordOutputReference;
_17 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordOutputReference[_17] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesSensitivityScoreToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        score: cdktf.stringToTerraform(struct.score),
    };
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesSensitivityScoreToTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesSensitivityScoreToTerraform;
function dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesSensitivityScoreToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        score: {
            value: cdktf.stringToHclTerraform(struct.score),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesSensitivityScoreToHclTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesSensitivityScoreToHclTerraform;
class DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesSensitivityScoreOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._score !== undefined) {
            hasAnyValues = true;
            internalValueResult.score = this._score;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._score = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._score = value.score;
        }
    }
    get score() {
        return this.getStringAttribute('score');
    }
    set score(value) {
        this._score = value;
    }
    // Temporarily expose input value. Use with caution.
    get scoreInput() {
        return this._score;
    }
}
exports.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesSensitivityScoreOutputReference = DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesSensitivityScoreOutputReference;
_18 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesSensitivityScoreOutputReference[_18] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesSensitivityScoreOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        version: cdktf.stringToTerraform(struct.version),
        sensitivity_score: dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesSensitivityScoreToTerraform(struct.sensitivityScore),
    };
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesToTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesToTerraform;
function dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        version: {
            value: cdktf.stringToHclTerraform(struct.version),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sensitivity_score: {
            value: dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesSensitivityScoreToHclTerraform(struct.sensitivityScore),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesSensitivityScoreList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesToHclTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesToHclTerraform;
class DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // sensitivity_score - computed: false, optional: true, required: false
        this._sensitivityScore = new DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesSensitivityScoreOutputReference(this, "sensitivity_score");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._version !== undefined) {
            hasAnyValues = true;
            internalValueResult.version = this._version;
        }
        if (this._sensitivityScore?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sensitivityScore = this._sensitivityScore?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
            this._version = undefined;
            this._sensitivityScore.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
            this._version = value.version;
            this._sensitivityScore.internalValue = value.sensitivityScore;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get version() {
        return this.getStringAttribute('version');
    }
    set version(value) {
        this._version = value;
    }
    resetVersion() {
        this._version = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get versionInput() {
        return this._version;
    }
    get sensitivityScore() {
        return this._sensitivityScore;
    }
    putSensitivityScore(value) {
        this._sensitivityScore.internalValue = value;
    }
    resetSensitivityScore() {
        this._sensitivityScore.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sensitivityScoreInput() {
        return this._sensitivityScore.internalValue;
    }
}
exports.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesOutputReference = DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesOutputReference;
_19 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesOutputReference[_19] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesOutputReference", version: "14.13.1" };
class DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesList = DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesList;
_20 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesList[_20] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesList", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        info_types: cdktf.listMapper(dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesToTerraform, true)(struct.infoTypes),
    };
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesToTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesToTerraform;
function dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        info_types: {
            value: cdktf.listMapperHcl(dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesToHclTerraform, true)(struct.infoTypes),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesToHclTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesToHclTerraform;
class DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // info_types - computed: false, optional: false, required: true
        this._infoTypes = new DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesInfoTypesList(this, "info_types", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._infoTypes?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.infoTypes = this._infoTypes?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._infoTypes.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._infoTypes.internalValue = value.infoTypes;
        }
    }
    get infoTypes() {
        return this._infoTypes;
    }
    putInfoTypes(value) {
        this._infoTypes.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get infoTypesInput() {
        return this._infoTypes.internalValue;
    }
}
exports.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesOutputReference = DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesOutputReference;
_21 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesOutputReference[_21] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleRegexToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        group_indexes: cdktf.listMapper(cdktf.numberToTerraform, false)(struct.groupIndexes),
        pattern: cdktf.stringToTerraform(struct.pattern),
    };
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleRegexToTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleRegexToTerraform;
function dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleRegexToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        group_indexes: {
            value: cdktf.listMapperHcl(cdktf.numberToHclTerraform, false)(struct.groupIndexes),
            isBlock: false,
            type: "list",
            storageClassType: "numberList",
        },
        pattern: {
            value: cdktf.stringToHclTerraform(struct.pattern),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleRegexToHclTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleRegexToHclTerraform;
class DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleRegexOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._groupIndexes !== undefined) {
            hasAnyValues = true;
            internalValueResult.groupIndexes = this._groupIndexes;
        }
        if (this._pattern !== undefined) {
            hasAnyValues = true;
            internalValueResult.pattern = this._pattern;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._groupIndexes = undefined;
            this._pattern = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._groupIndexes = value.groupIndexes;
            this._pattern = value.pattern;
        }
    }
    get groupIndexes() {
        return this.getNumberListAttribute('group_indexes');
    }
    set groupIndexes(value) {
        this._groupIndexes = value;
    }
    resetGroupIndexes() {
        this._groupIndexes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get groupIndexesInput() {
        return this._groupIndexes;
    }
    get pattern() {
        return this.getStringAttribute('pattern');
    }
    set pattern(value) {
        this._pattern = value;
    }
    // Temporarily expose input value. Use with caution.
    get patternInput() {
        return this._pattern;
    }
}
exports.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleRegexOutputReference = DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleRegexOutputReference;
_22 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleRegexOutputReference[_22] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleRegexOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        matching_type: cdktf.stringToTerraform(struct.matchingType),
        dictionary: dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryToTerraform(struct.dictionary),
        exclude_by_hotword: dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordToTerraform(struct.excludeByHotword),
        exclude_info_types: dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesToTerraform(struct.excludeInfoTypes),
        regex: dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleRegexToTerraform(struct.regex),
    };
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleToTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleToTerraform;
function dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        matching_type: {
            value: cdktf.stringToHclTerraform(struct.matchingType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        dictionary: {
            value: dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryToHclTerraform(struct.dictionary),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryList",
        },
        exclude_by_hotword: {
            value: dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordToHclTerraform(struct.excludeByHotword),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordList",
        },
        exclude_info_types: {
            value: dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesToHclTerraform(struct.excludeInfoTypes),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesList",
        },
        regex: {
            value: dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleRegexToHclTerraform(struct.regex),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleRegexList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleToHclTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleToHclTerraform;
class DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // dictionary - computed: false, optional: true, required: false
        this._dictionary = new DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleDictionaryOutputReference(this, "dictionary");
        // exclude_by_hotword - computed: false, optional: true, required: false
        this._excludeByHotword = new DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeByHotwordOutputReference(this, "exclude_by_hotword");
        // exclude_info_types - computed: false, optional: true, required: false
        this._excludeInfoTypes = new DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleExcludeInfoTypesOutputReference(this, "exclude_info_types");
        // regex - computed: false, optional: true, required: false
        this._regex = new DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleRegexOutputReference(this, "regex");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._matchingType !== undefined) {
            hasAnyValues = true;
            internalValueResult.matchingType = this._matchingType;
        }
        if (this._dictionary?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dictionary = this._dictionary?.internalValue;
        }
        if (this._excludeByHotword?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.excludeByHotword = this._excludeByHotword?.internalValue;
        }
        if (this._excludeInfoTypes?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.excludeInfoTypes = this._excludeInfoTypes?.internalValue;
        }
        if (this._regex?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.regex = this._regex?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._matchingType = undefined;
            this._dictionary.internalValue = undefined;
            this._excludeByHotword.internalValue = undefined;
            this._excludeInfoTypes.internalValue = undefined;
            this._regex.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._matchingType = value.matchingType;
            this._dictionary.internalValue = value.dictionary;
            this._excludeByHotword.internalValue = value.excludeByHotword;
            this._excludeInfoTypes.internalValue = value.excludeInfoTypes;
            this._regex.internalValue = value.regex;
        }
    }
    get matchingType() {
        return this.getStringAttribute('matching_type');
    }
    set matchingType(value) {
        this._matchingType = value;
    }
    // Temporarily expose input value. Use with caution.
    get matchingTypeInput() {
        return this._matchingType;
    }
    get dictionary() {
        return this._dictionary;
    }
    putDictionary(value) {
        this._dictionary.internalValue = value;
    }
    resetDictionary() {
        this._dictionary.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dictionaryInput() {
        return this._dictionary.internalValue;
    }
    get excludeByHotword() {
        return this._excludeByHotword;
    }
    putExcludeByHotword(value) {
        this._excludeByHotword.internalValue = value;
    }
    resetExcludeByHotword() {
        this._excludeByHotword.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludeByHotwordInput() {
        return this._excludeByHotword.internalValue;
    }
    get excludeInfoTypes() {
        return this._excludeInfoTypes;
    }
    putExcludeInfoTypes(value) {
        this._excludeInfoTypes.internalValue = value;
    }
    resetExcludeInfoTypes() {
        this._excludeInfoTypes.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludeInfoTypesInput() {
        return this._excludeInfoTypes.internalValue;
    }
    get regex() {
        return this._regex;
    }
    putRegex(value) {
        this._regex.internalValue = value;
    }
    resetRegex() {
        this._regex.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get regexInput() {
        return this._regex.internalValue;
    }
}
exports.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleOutputReference = DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleOutputReference;
_23 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleOutputReference[_23] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleHotwordRegexToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        group_indexes: cdktf.listMapper(cdktf.numberToTerraform, false)(struct.groupIndexes),
        pattern: cdktf.stringToTerraform(struct.pattern),
    };
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleHotwordRegexToTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleHotwordRegexToTerraform;
function dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleHotwordRegexToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        group_indexes: {
            value: cdktf.listMapperHcl(cdktf.numberToHclTerraform, false)(struct.groupIndexes),
            isBlock: false,
            type: "list",
            storageClassType: "numberList",
        },
        pattern: {
            value: cdktf.stringToHclTerraform(struct.pattern),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleHotwordRegexToHclTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleHotwordRegexToHclTerraform;
class DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleHotwordRegexOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._groupIndexes !== undefined) {
            hasAnyValues = true;
            internalValueResult.groupIndexes = this._groupIndexes;
        }
        if (this._pattern !== undefined) {
            hasAnyValues = true;
            internalValueResult.pattern = this._pattern;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._groupIndexes = undefined;
            this._pattern = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._groupIndexes = value.groupIndexes;
            this._pattern = value.pattern;
        }
    }
    get groupIndexes() {
        return this.getNumberListAttribute('group_indexes');
    }
    set groupIndexes(value) {
        this._groupIndexes = value;
    }
    resetGroupIndexes() {
        this._groupIndexes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get groupIndexesInput() {
        return this._groupIndexes;
    }
    get pattern() {
        return this.getStringAttribute('pattern');
    }
    set pattern(value) {
        this._pattern = value;
    }
    resetPattern() {
        this._pattern = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get patternInput() {
        return this._pattern;
    }
}
exports.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleHotwordRegexOutputReference = DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleHotwordRegexOutputReference;
_24 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleHotwordRegexOutputReference[_24] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleHotwordRegexOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        fixed_likelihood: cdktf.stringToTerraform(struct.fixedLikelihood),
        relative_likelihood: cdktf.numberToTerraform(struct.relativeLikelihood),
    };
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentToTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentToTerraform;
function dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        fixed_likelihood: {
            value: cdktf.stringToHclTerraform(struct.fixedLikelihood),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        relative_likelihood: {
            value: cdktf.numberToHclTerraform(struct.relativeLikelihood),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentToHclTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentToHclTerraform;
class DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._fixedLikelihood !== undefined) {
            hasAnyValues = true;
            internalValueResult.fixedLikelihood = this._fixedLikelihood;
        }
        if (this._relativeLikelihood !== undefined) {
            hasAnyValues = true;
            internalValueResult.relativeLikelihood = this._relativeLikelihood;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._fixedLikelihood = undefined;
            this._relativeLikelihood = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._fixedLikelihood = value.fixedLikelihood;
            this._relativeLikelihood = value.relativeLikelihood;
        }
    }
    get fixedLikelihood() {
        return this.getStringAttribute('fixed_likelihood');
    }
    set fixedLikelihood(value) {
        this._fixedLikelihood = value;
    }
    resetFixedLikelihood() {
        this._fixedLikelihood = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fixedLikelihoodInput() {
        return this._fixedLikelihood;
    }
    get relativeLikelihood() {
        return this.getNumberAttribute('relative_likelihood');
    }
    set relativeLikelihood(value) {
        this._relativeLikelihood = value;
    }
    resetRelativeLikelihood() {
        this._relativeLikelihood = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get relativeLikelihoodInput() {
        return this._relativeLikelihood;
    }
}
exports.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentOutputReference = DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentOutputReference;
_25 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentOutputReference[_25] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleProximityToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        window_after: cdktf.numberToTerraform(struct.windowAfter),
        window_before: cdktf.numberToTerraform(struct.windowBefore),
    };
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleProximityToTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleProximityToTerraform;
function dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleProximityToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        window_after: {
            value: cdktf.numberToHclTerraform(struct.windowAfter),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        window_before: {
            value: cdktf.numberToHclTerraform(struct.windowBefore),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleProximityToHclTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleProximityToHclTerraform;
class DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleProximityOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._windowAfter !== undefined) {
            hasAnyValues = true;
            internalValueResult.windowAfter = this._windowAfter;
        }
        if (this._windowBefore !== undefined) {
            hasAnyValues = true;
            internalValueResult.windowBefore = this._windowBefore;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._windowAfter = undefined;
            this._windowBefore = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._windowAfter = value.windowAfter;
            this._windowBefore = value.windowBefore;
        }
    }
    get windowAfter() {
        return this.getNumberAttribute('window_after');
    }
    set windowAfter(value) {
        this._windowAfter = value;
    }
    resetWindowAfter() {
        this._windowAfter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get windowAfterInput() {
        return this._windowAfter;
    }
    get windowBefore() {
        return this.getNumberAttribute('window_before');
    }
    set windowBefore(value) {
        this._windowBefore = value;
    }
    resetWindowBefore() {
        this._windowBefore = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get windowBeforeInput() {
        return this._windowBefore;
    }
}
exports.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleProximityOutputReference = DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleProximityOutputReference;
_26 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleProximityOutputReference[_26] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleProximityOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        hotword_regex: dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleHotwordRegexToTerraform(struct.hotwordRegex),
        likelihood_adjustment: dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentToTerraform(struct.likelihoodAdjustment),
        proximity: dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleProximityToTerraform(struct.proximity),
    };
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleToTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleToTerraform;
function dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        hotword_regex: {
            value: dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleHotwordRegexToHclTerraform(struct.hotwordRegex),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleHotwordRegexList",
        },
        likelihood_adjustment: {
            value: dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentToHclTerraform(struct.likelihoodAdjustment),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentList",
        },
        proximity: {
            value: dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleProximityToHclTerraform(struct.proximity),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleProximityList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleToHclTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleToHclTerraform;
class DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // hotword_regex - computed: false, optional: true, required: false
        this._hotwordRegex = new DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleHotwordRegexOutputReference(this, "hotword_regex");
        // likelihood_adjustment - computed: false, optional: true, required: false
        this._likelihoodAdjustment = new DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleLikelihoodAdjustmentOutputReference(this, "likelihood_adjustment");
        // proximity - computed: false, optional: true, required: false
        this._proximity = new DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleProximityOutputReference(this, "proximity");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hotwordRegex?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.hotwordRegex = this._hotwordRegex?.internalValue;
        }
        if (this._likelihoodAdjustment?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.likelihoodAdjustment = this._likelihoodAdjustment?.internalValue;
        }
        if (this._proximity?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.proximity = this._proximity?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hotwordRegex.internalValue = undefined;
            this._likelihoodAdjustment.internalValue = undefined;
            this._proximity.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hotwordRegex.internalValue = value.hotwordRegex;
            this._likelihoodAdjustment.internalValue = value.likelihoodAdjustment;
            this._proximity.internalValue = value.proximity;
        }
    }
    get hotwordRegex() {
        return this._hotwordRegex;
    }
    putHotwordRegex(value) {
        this._hotwordRegex.internalValue = value;
    }
    resetHotwordRegex() {
        this._hotwordRegex.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hotwordRegexInput() {
        return this._hotwordRegex.internalValue;
    }
    get likelihoodAdjustment() {
        return this._likelihoodAdjustment;
    }
    putLikelihoodAdjustment(value) {
        this._likelihoodAdjustment.internalValue = value;
    }
    resetLikelihoodAdjustment() {
        this._likelihoodAdjustment.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get likelihoodAdjustmentInput() {
        return this._likelihoodAdjustment.internalValue;
    }
    get proximity() {
        return this._proximity;
    }
    putProximity(value) {
        this._proximity.internalValue = value;
    }
    resetProximity() {
        this._proximity.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get proximityInput() {
        return this._proximity.internalValue;
    }
}
exports.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleOutputReference = DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleOutputReference;
_27 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleOutputReference[_27] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        exclusion_rule: dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleToTerraform(struct.exclusionRule),
        hotword_rule: dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleToTerraform(struct.hotwordRule),
    };
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesToTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesToTerraform;
function dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        exclusion_rule: {
            value: dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleToHclTerraform(struct.exclusionRule),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleList",
        },
        hotword_rule: {
            value: dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleToHclTerraform(struct.hotwordRule),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesToHclTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesToHclTerraform;
class DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // exclusion_rule - computed: false, optional: true, required: false
        this._exclusionRule = new DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesExclusionRuleOutputReference(this, "exclusion_rule");
        // hotword_rule - computed: false, optional: true, required: false
        this._hotwordRule = new DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesHotwordRuleOutputReference(this, "hotword_rule");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._exclusionRule?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.exclusionRule = this._exclusionRule?.internalValue;
        }
        if (this._hotwordRule?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.hotwordRule = this._hotwordRule?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._exclusionRule.internalValue = undefined;
            this._hotwordRule.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._exclusionRule.internalValue = value.exclusionRule;
            this._hotwordRule.internalValue = value.hotwordRule;
        }
    }
    get exclusionRule() {
        return this._exclusionRule;
    }
    putExclusionRule(value) {
        this._exclusionRule.internalValue = value;
    }
    resetExclusionRule() {
        this._exclusionRule.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get exclusionRuleInput() {
        return this._exclusionRule.internalValue;
    }
    get hotwordRule() {
        return this._hotwordRule;
    }
    putHotwordRule(value) {
        this._hotwordRule.internalValue = value;
    }
    resetHotwordRule() {
        this._hotwordRule.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hotwordRuleInput() {
        return this._hotwordRule.internalValue;
    }
}
exports.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesOutputReference = DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesOutputReference;
_28 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesOutputReference[_28] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesOutputReference", version: "14.13.1" };
class DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesList = DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesList;
_29 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesList[_29] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesList", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        info_types: cdktf.listMapper(dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetInfoTypesToTerraform, true)(struct.infoTypes),
        rules: cdktf.listMapper(dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesToTerraform, true)(struct.rules),
    };
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetToTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetToTerraform;
function dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        info_types: {
            value: cdktf.listMapperHcl(dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetInfoTypesToHclTerraform, true)(struct.infoTypes),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetInfoTypesList",
        },
        rules: {
            value: cdktf.listMapperHcl(dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesToHclTerraform, true)(struct.rules),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetToHclTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetToHclTerraform;
class DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // info_types - computed: false, optional: true, required: false
        this._infoTypes = new DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetInfoTypesList(this, "info_types", false);
        // rules - computed: false, optional: false, required: true
        this._rules = new DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetRulesList(this, "rules", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._infoTypes?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.infoTypes = this._infoTypes?.internalValue;
        }
        if (this._rules?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.rules = this._rules?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._infoTypes.internalValue = undefined;
            this._rules.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._infoTypes.internalValue = value.infoTypes;
            this._rules.internalValue = value.rules;
        }
    }
    get infoTypes() {
        return this._infoTypes;
    }
    putInfoTypes(value) {
        this._infoTypes.internalValue = value;
    }
    resetInfoTypes() {
        this._infoTypes.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get infoTypesInput() {
        return this._infoTypes.internalValue;
    }
    get rules() {
        return this._rules;
    }
    putRules(value) {
        this._rules.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get rulesInput() {
        return this._rules.internalValue;
    }
}
exports.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetOutputReference = DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetOutputReference;
_30 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetOutputReference[_30] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetOutputReference", version: "14.13.1" };
class DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetList = DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetList;
_31 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetList[_31] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetList", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobInspectConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        exclude_info_types: cdktf.booleanToTerraform(struct.excludeInfoTypes),
        include_quote: cdktf.booleanToTerraform(struct.includeQuote),
        min_likelihood: cdktf.stringToTerraform(struct.minLikelihood),
        custom_info_types: cdktf.listMapper(dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesToTerraform, true)(struct.customInfoTypes),
        info_types: cdktf.listMapper(dataLossPreventionJobTriggerInspectJobInspectConfigInfoTypesToTerraform, true)(struct.infoTypes),
        limits: dataLossPreventionJobTriggerInspectJobInspectConfigLimitsToTerraform(struct.limits),
        rule_set: cdktf.listMapper(dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetToTerraform, true)(struct.ruleSet),
    };
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigToTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigToTerraform;
function dataLossPreventionJobTriggerInspectJobInspectConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        exclude_info_types: {
            value: cdktf.booleanToHclTerraform(struct.excludeInfoTypes),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        include_quote: {
            value: cdktf.booleanToHclTerraform(struct.includeQuote),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        min_likelihood: {
            value: cdktf.stringToHclTerraform(struct.minLikelihood),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        custom_info_types: {
            value: cdktf.listMapperHcl(dataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesToHclTerraform, true)(struct.customInfoTypes),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesList",
        },
        info_types: {
            value: cdktf.listMapperHcl(dataLossPreventionJobTriggerInspectJobInspectConfigInfoTypesToHclTerraform, true)(struct.infoTypes),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobInspectConfigInfoTypesList",
        },
        limits: {
            value: dataLossPreventionJobTriggerInspectJobInspectConfigLimitsToHclTerraform(struct.limits),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobInspectConfigLimitsList",
        },
        rule_set: {
            value: cdktf.listMapperHcl(dataLossPreventionJobTriggerInspectJobInspectConfigRuleSetToHclTerraform, true)(struct.ruleSet),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobInspectConfigToHclTerraform = dataLossPreventionJobTriggerInspectJobInspectConfigToHclTerraform;
class DataLossPreventionJobTriggerInspectJobInspectConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // custom_info_types - computed: false, optional: true, required: false
        this._customInfoTypes = new DataLossPreventionJobTriggerInspectJobInspectConfigCustomInfoTypesList(this, "custom_info_types", false);
        // info_types - computed: false, optional: true, required: false
        this._infoTypes = new DataLossPreventionJobTriggerInspectJobInspectConfigInfoTypesList(this, "info_types", false);
        // limits - computed: false, optional: true, required: false
        this._limits = new DataLossPreventionJobTriggerInspectJobInspectConfigLimitsOutputReference(this, "limits");
        // rule_set - computed: false, optional: true, required: false
        this._ruleSet = new DataLossPreventionJobTriggerInspectJobInspectConfigRuleSetList(this, "rule_set", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._excludeInfoTypes !== undefined) {
            hasAnyValues = true;
            internalValueResult.excludeInfoTypes = this._excludeInfoTypes;
        }
        if (this._includeQuote !== undefined) {
            hasAnyValues = true;
            internalValueResult.includeQuote = this._includeQuote;
        }
        if (this._minLikelihood !== undefined) {
            hasAnyValues = true;
            internalValueResult.minLikelihood = this._minLikelihood;
        }
        if (this._customInfoTypes?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customInfoTypes = this._customInfoTypes?.internalValue;
        }
        if (this._infoTypes?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.infoTypes = this._infoTypes?.internalValue;
        }
        if (this._limits?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.limits = this._limits?.internalValue;
        }
        if (this._ruleSet?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ruleSet = this._ruleSet?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._excludeInfoTypes = undefined;
            this._includeQuote = undefined;
            this._minLikelihood = undefined;
            this._customInfoTypes.internalValue = undefined;
            this._infoTypes.internalValue = undefined;
            this._limits.internalValue = undefined;
            this._ruleSet.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._excludeInfoTypes = value.excludeInfoTypes;
            this._includeQuote = value.includeQuote;
            this._minLikelihood = value.minLikelihood;
            this._customInfoTypes.internalValue = value.customInfoTypes;
            this._infoTypes.internalValue = value.infoTypes;
            this._limits.internalValue = value.limits;
            this._ruleSet.internalValue = value.ruleSet;
        }
    }
    get excludeInfoTypes() {
        return this.getBooleanAttribute('exclude_info_types');
    }
    set excludeInfoTypes(value) {
        this._excludeInfoTypes = value;
    }
    resetExcludeInfoTypes() {
        this._excludeInfoTypes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludeInfoTypesInput() {
        return this._excludeInfoTypes;
    }
    get includeQuote() {
        return this.getBooleanAttribute('include_quote');
    }
    set includeQuote(value) {
        this._includeQuote = value;
    }
    resetIncludeQuote() {
        this._includeQuote = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeQuoteInput() {
        return this._includeQuote;
    }
    get minLikelihood() {
        return this.getStringAttribute('min_likelihood');
    }
    set minLikelihood(value) {
        this._minLikelihood = value;
    }
    resetMinLikelihood() {
        this._minLikelihood = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minLikelihoodInput() {
        return this._minLikelihood;
    }
    get customInfoTypes() {
        return this._customInfoTypes;
    }
    putCustomInfoTypes(value) {
        this._customInfoTypes.internalValue = value;
    }
    resetCustomInfoTypes() {
        this._customInfoTypes.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customInfoTypesInput() {
        return this._customInfoTypes.internalValue;
    }
    get infoTypes() {
        return this._infoTypes;
    }
    putInfoTypes(value) {
        this._infoTypes.internalValue = value;
    }
    resetInfoTypes() {
        this._infoTypes.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get infoTypesInput() {
        return this._infoTypes.internalValue;
    }
    get limits() {
        return this._limits;
    }
    putLimits(value) {
        this._limits.internalValue = value;
    }
    resetLimits() {
        this._limits.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get limitsInput() {
        return this._limits.internalValue;
    }
    get ruleSet() {
        return this._ruleSet;
    }
    putRuleSet(value) {
        this._ruleSet.internalValue = value;
    }
    resetRuleSet() {
        this._ruleSet.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ruleSetInput() {
        return this._ruleSet.internalValue;
    }
}
exports.DataLossPreventionJobTriggerInspectJobInspectConfigOutputReference = DataLossPreventionJobTriggerInspectJobInspectConfigOutputReference;
_32 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobInspectConfigOutputReference[_32] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobInspectConfigOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsExcludedFieldsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsExcludedFieldsToTerraform = dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsExcludedFieldsToTerraform;
function dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsExcludedFieldsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsExcludedFieldsToHclTerraform = dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsExcludedFieldsToHclTerraform;
class DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsExcludedFieldsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
}
exports.DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsExcludedFieldsOutputReference = DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsExcludedFieldsOutputReference;
_33 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsExcludedFieldsOutputReference[_33] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsExcludedFieldsOutputReference", version: "14.13.1" };
class DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsExcludedFieldsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsExcludedFieldsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsExcludedFieldsList = DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsExcludedFieldsList;
_34 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsExcludedFieldsList[_34] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsExcludedFieldsList", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIdentifyingFieldsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIdentifyingFieldsToTerraform = dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIdentifyingFieldsToTerraform;
function dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIdentifyingFieldsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIdentifyingFieldsToHclTerraform = dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIdentifyingFieldsToHclTerraform;
class DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIdentifyingFieldsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
}
exports.DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIdentifyingFieldsOutputReference = DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIdentifyingFieldsOutputReference;
_35 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIdentifyingFieldsOutputReference[_35] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIdentifyingFieldsOutputReference", version: "14.13.1" };
class DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIdentifyingFieldsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIdentifyingFieldsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIdentifyingFieldsList = DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIdentifyingFieldsList;
_36 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIdentifyingFieldsList[_36] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIdentifyingFieldsList", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIncludedFieldsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIncludedFieldsToTerraform = dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIncludedFieldsToTerraform;
function dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIncludedFieldsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIncludedFieldsToHclTerraform = dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIncludedFieldsToHclTerraform;
class DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIncludedFieldsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
}
exports.DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIncludedFieldsOutputReference = DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIncludedFieldsOutputReference;
_37 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIncludedFieldsOutputReference[_37] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIncludedFieldsOutputReference", version: "14.13.1" };
class DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIncludedFieldsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIncludedFieldsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIncludedFieldsList = DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIncludedFieldsList;
_38 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIncludedFieldsList[_38] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIncludedFieldsList", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsTableReferenceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        dataset_id: cdktf.stringToTerraform(struct.datasetId),
        project_id: cdktf.stringToTerraform(struct.projectId),
        table_id: cdktf.stringToTerraform(struct.tableId),
    };
}
exports.dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsTableReferenceToTerraform = dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsTableReferenceToTerraform;
function dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsTableReferenceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        dataset_id: {
            value: cdktf.stringToHclTerraform(struct.datasetId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        project_id: {
            value: cdktf.stringToHclTerraform(struct.projectId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        table_id: {
            value: cdktf.stringToHclTerraform(struct.tableId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsTableReferenceToHclTerraform = dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsTableReferenceToHclTerraform;
class DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsTableReferenceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._datasetId !== undefined) {
            hasAnyValues = true;
            internalValueResult.datasetId = this._datasetId;
        }
        if (this._projectId !== undefined) {
            hasAnyValues = true;
            internalValueResult.projectId = this._projectId;
        }
        if (this._tableId !== undefined) {
            hasAnyValues = true;
            internalValueResult.tableId = this._tableId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._datasetId = undefined;
            this._projectId = undefined;
            this._tableId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._datasetId = value.datasetId;
            this._projectId = value.projectId;
            this._tableId = value.tableId;
        }
    }
    get datasetId() {
        return this.getStringAttribute('dataset_id');
    }
    set datasetId(value) {
        this._datasetId = value;
    }
    // Temporarily expose input value. Use with caution.
    get datasetIdInput() {
        return this._datasetId;
    }
    get projectId() {
        return this.getStringAttribute('project_id');
    }
    set projectId(value) {
        this._projectId = value;
    }
    // Temporarily expose input value. Use with caution.
    get projectIdInput() {
        return this._projectId;
    }
    get tableId() {
        return this.getStringAttribute('table_id');
    }
    set tableId(value) {
        this._tableId = value;
    }
    // Temporarily expose input value. Use with caution.
    get tableIdInput() {
        return this._tableId;
    }
}
exports.DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsTableReferenceOutputReference = DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsTableReferenceOutputReference;
_39 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsTableReferenceOutputReference[_39] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsTableReferenceOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        rows_limit: cdktf.numberToTerraform(struct.rowsLimit),
        rows_limit_percent: cdktf.numberToTerraform(struct.rowsLimitPercent),
        sample_method: cdktf.stringToTerraform(struct.sampleMethod),
        excluded_fields: cdktf.listMapper(dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsExcludedFieldsToTerraform, true)(struct.excludedFields),
        identifying_fields: cdktf.listMapper(dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIdentifyingFieldsToTerraform, true)(struct.identifyingFields),
        included_fields: cdktf.listMapper(dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIncludedFieldsToTerraform, true)(struct.includedFields),
        table_reference: dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsTableReferenceToTerraform(struct.tableReference),
    };
}
exports.dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsToTerraform = dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsToTerraform;
function dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        rows_limit: {
            value: cdktf.numberToHclTerraform(struct.rowsLimit),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        rows_limit_percent: {
            value: cdktf.numberToHclTerraform(struct.rowsLimitPercent),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        sample_method: {
            value: cdktf.stringToHclTerraform(struct.sampleMethod),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        excluded_fields: {
            value: cdktf.listMapperHcl(dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsExcludedFieldsToHclTerraform, true)(struct.excludedFields),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsExcludedFieldsList",
        },
        identifying_fields: {
            value: cdktf.listMapperHcl(dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIdentifyingFieldsToHclTerraform, true)(struct.identifyingFields),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIdentifyingFieldsList",
        },
        included_fields: {
            value: cdktf.listMapperHcl(dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIncludedFieldsToHclTerraform, true)(struct.includedFields),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIncludedFieldsList",
        },
        table_reference: {
            value: dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsTableReferenceToHclTerraform(struct.tableReference),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsTableReferenceList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsToHclTerraform = dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsToHclTerraform;
class DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // excluded_fields - computed: false, optional: true, required: false
        this._excludedFields = new DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsExcludedFieldsList(this, "excluded_fields", false);
        // identifying_fields - computed: false, optional: true, required: false
        this._identifyingFields = new DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIdentifyingFieldsList(this, "identifying_fields", false);
        // included_fields - computed: false, optional: true, required: false
        this._includedFields = new DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsIncludedFieldsList(this, "included_fields", false);
        // table_reference - computed: false, optional: false, required: true
        this._tableReference = new DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsTableReferenceOutputReference(this, "table_reference");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._rowsLimit !== undefined) {
            hasAnyValues = true;
            internalValueResult.rowsLimit = this._rowsLimit;
        }
        if (this._rowsLimitPercent !== undefined) {
            hasAnyValues = true;
            internalValueResult.rowsLimitPercent = this._rowsLimitPercent;
        }
        if (this._sampleMethod !== undefined) {
            hasAnyValues = true;
            internalValueResult.sampleMethod = this._sampleMethod;
        }
        if (this._excludedFields?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.excludedFields = this._excludedFields?.internalValue;
        }
        if (this._identifyingFields?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.identifyingFields = this._identifyingFields?.internalValue;
        }
        if (this._includedFields?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.includedFields = this._includedFields?.internalValue;
        }
        if (this._tableReference?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.tableReference = this._tableReference?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._rowsLimit = undefined;
            this._rowsLimitPercent = undefined;
            this._sampleMethod = undefined;
            this._excludedFields.internalValue = undefined;
            this._identifyingFields.internalValue = undefined;
            this._includedFields.internalValue = undefined;
            this._tableReference.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._rowsLimit = value.rowsLimit;
            this._rowsLimitPercent = value.rowsLimitPercent;
            this._sampleMethod = value.sampleMethod;
            this._excludedFields.internalValue = value.excludedFields;
            this._identifyingFields.internalValue = value.identifyingFields;
            this._includedFields.internalValue = value.includedFields;
            this._tableReference.internalValue = value.tableReference;
        }
    }
    get rowsLimit() {
        return this.getNumberAttribute('rows_limit');
    }
    set rowsLimit(value) {
        this._rowsLimit = value;
    }
    resetRowsLimit() {
        this._rowsLimit = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rowsLimitInput() {
        return this._rowsLimit;
    }
    get rowsLimitPercent() {
        return this.getNumberAttribute('rows_limit_percent');
    }
    set rowsLimitPercent(value) {
        this._rowsLimitPercent = value;
    }
    resetRowsLimitPercent() {
        this._rowsLimitPercent = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rowsLimitPercentInput() {
        return this._rowsLimitPercent;
    }
    get sampleMethod() {
        return this.getStringAttribute('sample_method');
    }
    set sampleMethod(value) {
        this._sampleMethod = value;
    }
    resetSampleMethod() {
        this._sampleMethod = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sampleMethodInput() {
        return this._sampleMethod;
    }
    get excludedFields() {
        return this._excludedFields;
    }
    putExcludedFields(value) {
        this._excludedFields.internalValue = value;
    }
    resetExcludedFields() {
        this._excludedFields.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludedFieldsInput() {
        return this._excludedFields.internalValue;
    }
    get identifyingFields() {
        return this._identifyingFields;
    }
    putIdentifyingFields(value) {
        this._identifyingFields.internalValue = value;
    }
    resetIdentifyingFields() {
        this._identifyingFields.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get identifyingFieldsInput() {
        return this._identifyingFields.internalValue;
    }
    get includedFields() {
        return this._includedFields;
    }
    putIncludedFields(value) {
        this._includedFields.internalValue = value;
    }
    resetIncludedFields() {
        this._includedFields.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includedFieldsInput() {
        return this._includedFields.internalValue;
    }
    get tableReference() {
        return this._tableReference;
    }
    putTableReference(value) {
        this._tableReference.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get tableReferenceInput() {
        return this._tableReference.internalValue;
    }
}
exports.DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsOutputReference = DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsOutputReference;
_40 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsOutputReference[_40] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetRegexFileSetToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket_name: cdktf.stringToTerraform(struct.bucketName),
        exclude_regex: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.excludeRegex),
        include_regex: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.includeRegex),
    };
}
exports.dataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetRegexFileSetToTerraform = dataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetRegexFileSetToTerraform;
function dataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetRegexFileSetToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        bucket_name: {
            value: cdktf.stringToHclTerraform(struct.bucketName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        exclude_regex: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.excludeRegex),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        include_regex: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.includeRegex),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetRegexFileSetToHclTerraform = dataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetRegexFileSetToHclTerraform;
class DataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetRegexFileSetOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucketName !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketName = this._bucketName;
        }
        if (this._excludeRegex !== undefined) {
            hasAnyValues = true;
            internalValueResult.excludeRegex = this._excludeRegex;
        }
        if (this._includeRegex !== undefined) {
            hasAnyValues = true;
            internalValueResult.includeRegex = this._includeRegex;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucketName = undefined;
            this._excludeRegex = undefined;
            this._includeRegex = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucketName = value.bucketName;
            this._excludeRegex = value.excludeRegex;
            this._includeRegex = value.includeRegex;
        }
    }
    get bucketName() {
        return this.getStringAttribute('bucket_name');
    }
    set bucketName(value) {
        this._bucketName = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketNameInput() {
        return this._bucketName;
    }
    get excludeRegex() {
        return this.getListAttribute('exclude_regex');
    }
    set excludeRegex(value) {
        this._excludeRegex = value;
    }
    resetExcludeRegex() {
        this._excludeRegex = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludeRegexInput() {
        return this._excludeRegex;
    }
    get includeRegex() {
        return this.getListAttribute('include_regex');
    }
    set includeRegex(value) {
        this._includeRegex = value;
    }
    resetIncludeRegex() {
        this._includeRegex = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeRegexInput() {
        return this._includeRegex;
    }
}
exports.DataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetRegexFileSetOutputReference = DataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetRegexFileSetOutputReference;
_41 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetRegexFileSetOutputReference[_41] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetRegexFileSetOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        url: cdktf.stringToTerraform(struct.url),
        regex_file_set: dataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetRegexFileSetToTerraform(struct.regexFileSet),
    };
}
exports.dataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetToTerraform = dataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetToTerraform;
function dataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        url: {
            value: cdktf.stringToHclTerraform(struct.url),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        regex_file_set: {
            value: dataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetRegexFileSetToHclTerraform(struct.regexFileSet),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetRegexFileSetList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetToHclTerraform = dataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetToHclTerraform;
class DataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // regex_file_set - computed: false, optional: true, required: false
        this._regexFileSet = new DataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetRegexFileSetOutputReference(this, "regex_file_set");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._url !== undefined) {
            hasAnyValues = true;
            internalValueResult.url = this._url;
        }
        if (this._regexFileSet?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.regexFileSet = this._regexFileSet?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._url = undefined;
            this._regexFileSet.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._url = value.url;
            this._regexFileSet.internalValue = value.regexFileSet;
        }
    }
    get url() {
        return this.getStringAttribute('url');
    }
    set url(value) {
        this._url = value;
    }
    resetUrl() {
        this._url = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get urlInput() {
        return this._url;
    }
    get regexFileSet() {
        return this._regexFileSet;
    }
    putRegexFileSet(value) {
        this._regexFileSet.internalValue = value;
    }
    resetRegexFileSet() {
        this._regexFileSet.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get regexFileSetInput() {
        return this._regexFileSet.internalValue;
    }
}
exports.DataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetOutputReference = DataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetOutputReference;
_42 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetOutputReference[_42] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bytes_limit_per_file: cdktf.numberToTerraform(struct.bytesLimitPerFile),
        bytes_limit_per_file_percent: cdktf.numberToTerraform(struct.bytesLimitPerFilePercent),
        file_types: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.fileTypes),
        files_limit_percent: cdktf.numberToTerraform(struct.filesLimitPercent),
        sample_method: cdktf.stringToTerraform(struct.sampleMethod),
        file_set: dataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetToTerraform(struct.fileSet),
    };
}
exports.dataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsToTerraform = dataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsToTerraform;
function dataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        bytes_limit_per_file: {
            value: cdktf.numberToHclTerraform(struct.bytesLimitPerFile),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        bytes_limit_per_file_percent: {
            value: cdktf.numberToHclTerraform(struct.bytesLimitPerFilePercent),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        file_types: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.fileTypes),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        files_limit_percent: {
            value: cdktf.numberToHclTerraform(struct.filesLimitPercent),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        sample_method: {
            value: cdktf.stringToHclTerraform(struct.sampleMethod),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        file_set: {
            value: dataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetToHclTerraform(struct.fileSet),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsToHclTerraform = dataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsToHclTerraform;
class DataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // file_set - computed: false, optional: false, required: true
        this._fileSet = new DataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsFileSetOutputReference(this, "file_set");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bytesLimitPerFile !== undefined) {
            hasAnyValues = true;
            internalValueResult.bytesLimitPerFile = this._bytesLimitPerFile;
        }
        if (this._bytesLimitPerFilePercent !== undefined) {
            hasAnyValues = true;
            internalValueResult.bytesLimitPerFilePercent = this._bytesLimitPerFilePercent;
        }
        if (this._fileTypes !== undefined) {
            hasAnyValues = true;
            internalValueResult.fileTypes = this._fileTypes;
        }
        if (this._filesLimitPercent !== undefined) {
            hasAnyValues = true;
            internalValueResult.filesLimitPercent = this._filesLimitPercent;
        }
        if (this._sampleMethod !== undefined) {
            hasAnyValues = true;
            internalValueResult.sampleMethod = this._sampleMethod;
        }
        if (this._fileSet?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.fileSet = this._fileSet?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bytesLimitPerFile = undefined;
            this._bytesLimitPerFilePercent = undefined;
            this._fileTypes = undefined;
            this._filesLimitPercent = undefined;
            this._sampleMethod = undefined;
            this._fileSet.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bytesLimitPerFile = value.bytesLimitPerFile;
            this._bytesLimitPerFilePercent = value.bytesLimitPerFilePercent;
            this._fileTypes = value.fileTypes;
            this._filesLimitPercent = value.filesLimitPercent;
            this._sampleMethod = value.sampleMethod;
            this._fileSet.internalValue = value.fileSet;
        }
    }
    get bytesLimitPerFile() {
        return this.getNumberAttribute('bytes_limit_per_file');
    }
    set bytesLimitPerFile(value) {
        this._bytesLimitPerFile = value;
    }
    resetBytesLimitPerFile() {
        this._bytesLimitPerFile = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bytesLimitPerFileInput() {
        return this._bytesLimitPerFile;
    }
    get bytesLimitPerFilePercent() {
        return this.getNumberAttribute('bytes_limit_per_file_percent');
    }
    set bytesLimitPerFilePercent(value) {
        this._bytesLimitPerFilePercent = value;
    }
    resetBytesLimitPerFilePercent() {
        this._bytesLimitPerFilePercent = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bytesLimitPerFilePercentInput() {
        return this._bytesLimitPerFilePercent;
    }
    get fileTypes() {
        return this.getListAttribute('file_types');
    }
    set fileTypes(value) {
        this._fileTypes = value;
    }
    resetFileTypes() {
        this._fileTypes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fileTypesInput() {
        return this._fileTypes;
    }
    get filesLimitPercent() {
        return this.getNumberAttribute('files_limit_percent');
    }
    set filesLimitPercent(value) {
        this._filesLimitPercent = value;
    }
    resetFilesLimitPercent() {
        this._filesLimitPercent = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get filesLimitPercentInput() {
        return this._filesLimitPercent;
    }
    get sampleMethod() {
        return this.getStringAttribute('sample_method');
    }
    set sampleMethod(value) {
        this._sampleMethod = value;
    }
    resetSampleMethod() {
        this._sampleMethod = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sampleMethodInput() {
        return this._sampleMethod;
    }
    get fileSet() {
        return this._fileSet;
    }
    putFileSet(value) {
        this._fileSet.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get fileSetInput() {
        return this._fileSet.internalValue;
    }
}
exports.DataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsOutputReference = DataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsOutputReference;
_43 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsOutputReference[_43] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsKindToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.dataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsKindToTerraform = dataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsKindToTerraform;
function dataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsKindToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsKindToHclTerraform = dataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsKindToHclTerraform;
class DataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsKindOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._name = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._name = value.name;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
}
exports.DataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsKindOutputReference = DataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsKindOutputReference;
_44 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsKindOutputReference[_44] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsKindOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsPartitionIdToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        namespace_id: cdktf.stringToTerraform(struct.namespaceId),
        project_id: cdktf.stringToTerraform(struct.projectId),
    };
}
exports.dataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsPartitionIdToTerraform = dataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsPartitionIdToTerraform;
function dataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsPartitionIdToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        namespace_id: {
            value: cdktf.stringToHclTerraform(struct.namespaceId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        project_id: {
            value: cdktf.stringToHclTerraform(struct.projectId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsPartitionIdToHclTerraform = dataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsPartitionIdToHclTerraform;
class DataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsPartitionIdOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._namespaceId !== undefined) {
            hasAnyValues = true;
            internalValueResult.namespaceId = this._namespaceId;
        }
        if (this._projectId !== undefined) {
            hasAnyValues = true;
            internalValueResult.projectId = this._projectId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._namespaceId = undefined;
            this._projectId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._namespaceId = value.namespaceId;
            this._projectId = value.projectId;
        }
    }
    get namespaceId() {
        return this.getStringAttribute('namespace_id');
    }
    set namespaceId(value) {
        this._namespaceId = value;
    }
    resetNamespaceId() {
        this._namespaceId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get namespaceIdInput() {
        return this._namespaceId;
    }
    get projectId() {
        return this.getStringAttribute('project_id');
    }
    set projectId(value) {
        this._projectId = value;
    }
    // Temporarily expose input value. Use with caution.
    get projectIdInput() {
        return this._projectId;
    }
}
exports.DataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsPartitionIdOutputReference = DataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsPartitionIdOutputReference;
_45 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsPartitionIdOutputReference[_45] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsPartitionIdOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        kind: dataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsKindToTerraform(struct.kind),
        partition_id: dataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsPartitionIdToTerraform(struct.partitionId),
    };
}
exports.dataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsToTerraform = dataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsToTerraform;
function dataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        kind: {
            value: dataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsKindToHclTerraform(struct.kind),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsKindList",
        },
        partition_id: {
            value: dataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsPartitionIdToHclTerraform(struct.partitionId),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsPartitionIdList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsToHclTerraform = dataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsToHclTerraform;
class DataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // kind - computed: false, optional: false, required: true
        this._kind = new DataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsKindOutputReference(this, "kind");
        // partition_id - computed: false, optional: false, required: true
        this._partitionId = new DataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsPartitionIdOutputReference(this, "partition_id");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._kind?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.kind = this._kind?.internalValue;
        }
        if (this._partitionId?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.partitionId = this._partitionId?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._kind.internalValue = undefined;
            this._partitionId.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._kind.internalValue = value.kind;
            this._partitionId.internalValue = value.partitionId;
        }
    }
    get kind() {
        return this._kind;
    }
    putKind(value) {
        this._kind.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get kindInput() {
        return this._kind.internalValue;
    }
    get partitionId() {
        return this._partitionId;
    }
    putPartitionId(value) {
        this._partitionId.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get partitionIdInput() {
        return this._partitionId.internalValue;
    }
}
exports.DataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsOutputReference = DataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsOutputReference;
_46 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsOutputReference[_46] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsTableOptionsIdentifyingFieldsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.dataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsTableOptionsIdentifyingFieldsToTerraform = dataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsTableOptionsIdentifyingFieldsToTerraform;
function dataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsTableOptionsIdentifyingFieldsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsTableOptionsIdentifyingFieldsToHclTerraform = dataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsTableOptionsIdentifyingFieldsToHclTerraform;
class DataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsTableOptionsIdentifyingFieldsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
}
exports.DataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsTableOptionsIdentifyingFieldsOutputReference = DataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsTableOptionsIdentifyingFieldsOutputReference;
_47 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsTableOptionsIdentifyingFieldsOutputReference[_47] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsTableOptionsIdentifyingFieldsOutputReference", version: "14.13.1" };
class DataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsTableOptionsIdentifyingFieldsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsTableOptionsIdentifyingFieldsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsTableOptionsIdentifyingFieldsList = DataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsTableOptionsIdentifyingFieldsList;
_48 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsTableOptionsIdentifyingFieldsList[_48] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsTableOptionsIdentifyingFieldsList", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsTableOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        identifying_fields: cdktf.listMapper(dataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsTableOptionsIdentifyingFieldsToTerraform, true)(struct.identifyingFields),
    };
}
exports.dataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsTableOptionsToTerraform = dataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsTableOptionsToTerraform;
function dataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsTableOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        identifying_fields: {
            value: cdktf.listMapperHcl(dataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsTableOptionsIdentifyingFieldsToHclTerraform, true)(struct.identifyingFields),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsTableOptionsIdentifyingFieldsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsTableOptionsToHclTerraform = dataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsTableOptionsToHclTerraform;
class DataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsTableOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // identifying_fields - computed: false, optional: true, required: false
        this._identifyingFields = new DataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsTableOptionsIdentifyingFieldsList(this, "identifying_fields", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._identifyingFields?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.identifyingFields = this._identifyingFields?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._identifyingFields.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._identifyingFields.internalValue = value.identifyingFields;
        }
    }
    get identifyingFields() {
        return this._identifyingFields;
    }
    putIdentifyingFields(value) {
        this._identifyingFields.internalValue = value;
    }
    resetIdentifyingFields() {
        this._identifyingFields.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get identifyingFieldsInput() {
        return this._identifyingFields.internalValue;
    }
}
exports.DataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsTableOptionsOutputReference = DataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsTableOptionsOutputReference;
_49 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsTableOptionsOutputReference[_49] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsTableOptionsOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        description: cdktf.stringToTerraform(struct.description),
        labels: cdktf.hashMapper(cdktf.stringToTerraform)(struct.labels),
        required_finding_label_keys: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.requiredFindingLabelKeys),
        table_options: dataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsTableOptionsToTerraform(struct.tableOptions),
    };
}
exports.dataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsToTerraform = dataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsToTerraform;
function dataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        description: {
            value: cdktf.stringToHclTerraform(struct.description),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        labels: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.labels),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        required_finding_label_keys: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.requiredFindingLabelKeys),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        table_options: {
            value: dataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsTableOptionsToHclTerraform(struct.tableOptions),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsTableOptionsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsToHclTerraform = dataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsToHclTerraform;
class DataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // table_options - computed: false, optional: true, required: false
        this._tableOptions = new DataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsTableOptionsOutputReference(this, "table_options");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._description !== undefined) {
            hasAnyValues = true;
            internalValueResult.description = this._description;
        }
        if (this._labels !== undefined) {
            hasAnyValues = true;
            internalValueResult.labels = this._labels;
        }
        if (this._requiredFindingLabelKeys !== undefined) {
            hasAnyValues = true;
            internalValueResult.requiredFindingLabelKeys = this._requiredFindingLabelKeys;
        }
        if (this._tableOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.tableOptions = this._tableOptions?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._description = undefined;
            this._labels = undefined;
            this._requiredFindingLabelKeys = undefined;
            this._tableOptions.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._description = value.description;
            this._labels = value.labels;
            this._requiredFindingLabelKeys = value.requiredFindingLabelKeys;
            this._tableOptions.internalValue = value.tableOptions;
        }
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get requiredFindingLabelKeys() {
        return this.getListAttribute('required_finding_label_keys');
    }
    set requiredFindingLabelKeys(value) {
        this._requiredFindingLabelKeys = value;
    }
    resetRequiredFindingLabelKeys() {
        this._requiredFindingLabelKeys = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requiredFindingLabelKeysInput() {
        return this._requiredFindingLabelKeys;
    }
    get tableOptions() {
        return this._tableOptions;
    }
    putTableOptions(value) {
        this._tableOptions.internalValue = value;
    }
    resetTableOptions() {
        this._tableOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tableOptionsInput() {
        return this._tableOptions.internalValue;
    }
}
exports.DataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsOutputReference = DataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsOutputReference;
_50 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsOutputReference[_50] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigTimestampFieldToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.dataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigTimestampFieldToTerraform = dataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigTimestampFieldToTerraform;
function dataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigTimestampFieldToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigTimestampFieldToHclTerraform = dataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigTimestampFieldToHclTerraform;
class DataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigTimestampFieldOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._name = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._name = value.name;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
}
exports.DataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigTimestampFieldOutputReference = DataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigTimestampFieldOutputReference;
_51 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigTimestampFieldOutputReference[_51] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigTimestampFieldOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enable_auto_population_of_timespan_config: cdktf.booleanToTerraform(struct.enableAutoPopulationOfTimespanConfig),
        end_time: cdktf.stringToTerraform(struct.endTime),
        start_time: cdktf.stringToTerraform(struct.startTime),
        timestamp_field: dataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigTimestampFieldToTerraform(struct.timestampField),
    };
}
exports.dataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigToTerraform = dataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigToTerraform;
function dataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enable_auto_population_of_timespan_config: {
            value: cdktf.booleanToHclTerraform(struct.enableAutoPopulationOfTimespanConfig),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        end_time: {
            value: cdktf.stringToHclTerraform(struct.endTime),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        start_time: {
            value: cdktf.stringToHclTerraform(struct.startTime),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        timestamp_field: {
            value: dataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigTimestampFieldToHclTerraform(struct.timestampField),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigTimestampFieldList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigToHclTerraform = dataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigToHclTerraform;
class DataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // timestamp_field - computed: false, optional: true, required: false
        this._timestampField = new DataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigTimestampFieldOutputReference(this, "timestamp_field");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enableAutoPopulationOfTimespanConfig !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableAutoPopulationOfTimespanConfig = this._enableAutoPopulationOfTimespanConfig;
        }
        if (this._endTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.endTime = this._endTime;
        }
        if (this._startTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.startTime = this._startTime;
        }
        if (this._timestampField?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.timestampField = this._timestampField?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enableAutoPopulationOfTimespanConfig = undefined;
            this._endTime = undefined;
            this._startTime = undefined;
            this._timestampField.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enableAutoPopulationOfTimespanConfig = value.enableAutoPopulationOfTimespanConfig;
            this._endTime = value.endTime;
            this._startTime = value.startTime;
            this._timestampField.internalValue = value.timestampField;
        }
    }
    get enableAutoPopulationOfTimespanConfig() {
        return this.getBooleanAttribute('enable_auto_population_of_timespan_config');
    }
    set enableAutoPopulationOfTimespanConfig(value) {
        this._enableAutoPopulationOfTimespanConfig = value;
    }
    resetEnableAutoPopulationOfTimespanConfig() {
        this._enableAutoPopulationOfTimespanConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableAutoPopulationOfTimespanConfigInput() {
        return this._enableAutoPopulationOfTimespanConfig;
    }
    get endTime() {
        return this.getStringAttribute('end_time');
    }
    set endTime(value) {
        this._endTime = value;
    }
    resetEndTime() {
        this._endTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get endTimeInput() {
        return this._endTime;
    }
    get startTime() {
        return this.getStringAttribute('start_time');
    }
    set startTime(value) {
        this._startTime = value;
    }
    resetStartTime() {
        this._startTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get startTimeInput() {
        return this._startTime;
    }
    get timestampField() {
        return this._timestampField;
    }
    putTimestampField(value) {
        this._timestampField.internalValue = value;
    }
    resetTimestampField() {
        this._timestampField.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timestampFieldInput() {
        return this._timestampField.internalValue;
    }
}
exports.DataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigOutputReference = DataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigOutputReference;
_52 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigOutputReference[_52] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobStorageConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        big_query_options: dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsToTerraform(struct.bigQueryOptions),
        cloud_storage_options: dataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsToTerraform(struct.cloudStorageOptions),
        datastore_options: dataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsToTerraform(struct.datastoreOptions),
        hybrid_options: dataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsToTerraform(struct.hybridOptions),
        timespan_config: dataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigToTerraform(struct.timespanConfig),
    };
}
exports.dataLossPreventionJobTriggerInspectJobStorageConfigToTerraform = dataLossPreventionJobTriggerInspectJobStorageConfigToTerraform;
function dataLossPreventionJobTriggerInspectJobStorageConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        big_query_options: {
            value: dataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsToHclTerraform(struct.bigQueryOptions),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsList",
        },
        cloud_storage_options: {
            value: dataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsToHclTerraform(struct.cloudStorageOptions),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsList",
        },
        datastore_options: {
            value: dataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsToHclTerraform(struct.datastoreOptions),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsList",
        },
        hybrid_options: {
            value: dataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsToHclTerraform(struct.hybridOptions),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsList",
        },
        timespan_config: {
            value: dataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigToHclTerraform(struct.timespanConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobStorageConfigToHclTerraform = dataLossPreventionJobTriggerInspectJobStorageConfigToHclTerraform;
class DataLossPreventionJobTriggerInspectJobStorageConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // big_query_options - computed: false, optional: true, required: false
        this._bigQueryOptions = new DataLossPreventionJobTriggerInspectJobStorageConfigBigQueryOptionsOutputReference(this, "big_query_options");
        // cloud_storage_options - computed: false, optional: true, required: false
        this._cloudStorageOptions = new DataLossPreventionJobTriggerInspectJobStorageConfigCloudStorageOptionsOutputReference(this, "cloud_storage_options");
        // datastore_options - computed: false, optional: true, required: false
        this._datastoreOptions = new DataLossPreventionJobTriggerInspectJobStorageConfigDatastoreOptionsOutputReference(this, "datastore_options");
        // hybrid_options - computed: false, optional: true, required: false
        this._hybridOptions = new DataLossPreventionJobTriggerInspectJobStorageConfigHybridOptionsOutputReference(this, "hybrid_options");
        // timespan_config - computed: false, optional: true, required: false
        this._timespanConfig = new DataLossPreventionJobTriggerInspectJobStorageConfigTimespanConfigOutputReference(this, "timespan_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bigQueryOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.bigQueryOptions = this._bigQueryOptions?.internalValue;
        }
        if (this._cloudStorageOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudStorageOptions = this._cloudStorageOptions?.internalValue;
        }
        if (this._datastoreOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.datastoreOptions = this._datastoreOptions?.internalValue;
        }
        if (this._hybridOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.hybridOptions = this._hybridOptions?.internalValue;
        }
        if (this._timespanConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.timespanConfig = this._timespanConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bigQueryOptions.internalValue = undefined;
            this._cloudStorageOptions.internalValue = undefined;
            this._datastoreOptions.internalValue = undefined;
            this._hybridOptions.internalValue = undefined;
            this._timespanConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bigQueryOptions.internalValue = value.bigQueryOptions;
            this._cloudStorageOptions.internalValue = value.cloudStorageOptions;
            this._datastoreOptions.internalValue = value.datastoreOptions;
            this._hybridOptions.internalValue = value.hybridOptions;
            this._timespanConfig.internalValue = value.timespanConfig;
        }
    }
    get bigQueryOptions() {
        return this._bigQueryOptions;
    }
    putBigQueryOptions(value) {
        this._bigQueryOptions.internalValue = value;
    }
    resetBigQueryOptions() {
        this._bigQueryOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bigQueryOptionsInput() {
        return this._bigQueryOptions.internalValue;
    }
    get cloudStorageOptions() {
        return this._cloudStorageOptions;
    }
    putCloudStorageOptions(value) {
        this._cloudStorageOptions.internalValue = value;
    }
    resetCloudStorageOptions() {
        this._cloudStorageOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudStorageOptionsInput() {
        return this._cloudStorageOptions.internalValue;
    }
    get datastoreOptions() {
        return this._datastoreOptions;
    }
    putDatastoreOptions(value) {
        this._datastoreOptions.internalValue = value;
    }
    resetDatastoreOptions() {
        this._datastoreOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get datastoreOptionsInput() {
        return this._datastoreOptions.internalValue;
    }
    get hybridOptions() {
        return this._hybridOptions;
    }
    putHybridOptions(value) {
        this._hybridOptions.internalValue = value;
    }
    resetHybridOptions() {
        this._hybridOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hybridOptionsInput() {
        return this._hybridOptions.internalValue;
    }
    get timespanConfig() {
        return this._timespanConfig;
    }
    putTimespanConfig(value) {
        this._timespanConfig.internalValue = value;
    }
    resetTimespanConfig() {
        this._timespanConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timespanConfigInput() {
        return this._timespanConfig.internalValue;
    }
}
exports.DataLossPreventionJobTriggerInspectJobStorageConfigOutputReference = DataLossPreventionJobTriggerInspectJobStorageConfigOutputReference;
_53 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobStorageConfigOutputReference[_53] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobStorageConfigOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerInspectJobToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        inspect_template_name: cdktf.stringToTerraform(struct.inspectTemplateName),
        actions: cdktf.listMapper(dataLossPreventionJobTriggerInspectJobActionsToTerraform, true)(struct.actions),
        inspect_config: dataLossPreventionJobTriggerInspectJobInspectConfigToTerraform(struct.inspectConfig),
        storage_config: dataLossPreventionJobTriggerInspectJobStorageConfigToTerraform(struct.storageConfig),
    };
}
exports.dataLossPreventionJobTriggerInspectJobToTerraform = dataLossPreventionJobTriggerInspectJobToTerraform;
function dataLossPreventionJobTriggerInspectJobToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        inspect_template_name: {
            value: cdktf.stringToHclTerraform(struct.inspectTemplateName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        actions: {
            value: cdktf.listMapperHcl(dataLossPreventionJobTriggerInspectJobActionsToHclTerraform, true)(struct.actions),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobActionsList",
        },
        inspect_config: {
            value: dataLossPreventionJobTriggerInspectJobInspectConfigToHclTerraform(struct.inspectConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobInspectConfigList",
        },
        storage_config: {
            value: dataLossPreventionJobTriggerInspectJobStorageConfigToHclTerraform(struct.storageConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerInspectJobStorageConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerInspectJobToHclTerraform = dataLossPreventionJobTriggerInspectJobToHclTerraform;
class DataLossPreventionJobTriggerInspectJobOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // actions - computed: false, optional: true, required: false
        this._actions = new DataLossPreventionJobTriggerInspectJobActionsList(this, "actions", false);
        // inspect_config - computed: false, optional: true, required: false
        this._inspectConfig = new DataLossPreventionJobTriggerInspectJobInspectConfigOutputReference(this, "inspect_config");
        // storage_config - computed: false, optional: false, required: true
        this._storageConfig = new DataLossPreventionJobTriggerInspectJobStorageConfigOutputReference(this, "storage_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._inspectTemplateName !== undefined) {
            hasAnyValues = true;
            internalValueResult.inspectTemplateName = this._inspectTemplateName;
        }
        if (this._actions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.actions = this._actions?.internalValue;
        }
        if (this._inspectConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.inspectConfig = this._inspectConfig?.internalValue;
        }
        if (this._storageConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.storageConfig = this._storageConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._inspectTemplateName = undefined;
            this._actions.internalValue = undefined;
            this._inspectConfig.internalValue = undefined;
            this._storageConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._inspectTemplateName = value.inspectTemplateName;
            this._actions.internalValue = value.actions;
            this._inspectConfig.internalValue = value.inspectConfig;
            this._storageConfig.internalValue = value.storageConfig;
        }
    }
    get inspectTemplateName() {
        return this.getStringAttribute('inspect_template_name');
    }
    set inspectTemplateName(value) {
        this._inspectTemplateName = value;
    }
    resetInspectTemplateName() {
        this._inspectTemplateName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inspectTemplateNameInput() {
        return this._inspectTemplateName;
    }
    get actions() {
        return this._actions;
    }
    putActions(value) {
        this._actions.internalValue = value;
    }
    resetActions() {
        this._actions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get actionsInput() {
        return this._actions.internalValue;
    }
    get inspectConfig() {
        return this._inspectConfig;
    }
    putInspectConfig(value) {
        this._inspectConfig.internalValue = value;
    }
    resetInspectConfig() {
        this._inspectConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inspectConfigInput() {
        return this._inspectConfig.internalValue;
    }
    get storageConfig() {
        return this._storageConfig;
    }
    putStorageConfig(value) {
        this._storageConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get storageConfigInput() {
        return this._storageConfig.internalValue;
    }
}
exports.DataLossPreventionJobTriggerInspectJobOutputReference = DataLossPreventionJobTriggerInspectJobOutputReference;
_54 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerInspectJobOutputReference[_54] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerInspectJobOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.dataLossPreventionJobTriggerTimeoutsToTerraform = dataLossPreventionJobTriggerTimeoutsToTerraform;
function dataLossPreventionJobTriggerTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerTimeoutsToHclTerraform = dataLossPreventionJobTriggerTimeoutsToHclTerraform;
class DataLossPreventionJobTriggerTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.DataLossPreventionJobTriggerTimeoutsOutputReference = DataLossPreventionJobTriggerTimeoutsOutputReference;
_55 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerTimeoutsOutputReference[_55] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerTimeoutsOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerTriggersManualToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.dataLossPreventionJobTriggerTriggersManualToTerraform = dataLossPreventionJobTriggerTriggersManualToTerraform;
function dataLossPreventionJobTriggerTriggersManualToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.dataLossPreventionJobTriggerTriggersManualToHclTerraform = dataLossPreventionJobTriggerTriggersManualToHclTerraform;
class DataLossPreventionJobTriggerTriggersManualOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DataLossPreventionJobTriggerTriggersManualOutputReference = DataLossPreventionJobTriggerTriggersManualOutputReference;
_56 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerTriggersManualOutputReference[_56] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerTriggersManualOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerTriggersScheduleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        recurrence_period_duration: cdktf.stringToTerraform(struct.recurrencePeriodDuration),
    };
}
exports.dataLossPreventionJobTriggerTriggersScheduleToTerraform = dataLossPreventionJobTriggerTriggersScheduleToTerraform;
function dataLossPreventionJobTriggerTriggersScheduleToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        recurrence_period_duration: {
            value: cdktf.stringToHclTerraform(struct.recurrencePeriodDuration),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerTriggersScheduleToHclTerraform = dataLossPreventionJobTriggerTriggersScheduleToHclTerraform;
class DataLossPreventionJobTriggerTriggersScheduleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._recurrencePeriodDuration !== undefined) {
            hasAnyValues = true;
            internalValueResult.recurrencePeriodDuration = this._recurrencePeriodDuration;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._recurrencePeriodDuration = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._recurrencePeriodDuration = value.recurrencePeriodDuration;
        }
    }
    get recurrencePeriodDuration() {
        return this.getStringAttribute('recurrence_period_duration');
    }
    set recurrencePeriodDuration(value) {
        this._recurrencePeriodDuration = value;
    }
    resetRecurrencePeriodDuration() {
        this._recurrencePeriodDuration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get recurrencePeriodDurationInput() {
        return this._recurrencePeriodDuration;
    }
}
exports.DataLossPreventionJobTriggerTriggersScheduleOutputReference = DataLossPreventionJobTriggerTriggersScheduleOutputReference;
_57 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerTriggersScheduleOutputReference[_57] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerTriggersScheduleOutputReference", version: "14.13.1" };
function dataLossPreventionJobTriggerTriggersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        manual: dataLossPreventionJobTriggerTriggersManualToTerraform(struct.manual),
        schedule: dataLossPreventionJobTriggerTriggersScheduleToTerraform(struct.schedule),
    };
}
exports.dataLossPreventionJobTriggerTriggersToTerraform = dataLossPreventionJobTriggerTriggersToTerraform;
function dataLossPreventionJobTriggerTriggersToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        manual: {
            value: dataLossPreventionJobTriggerTriggersManualToHclTerraform(struct.manual),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerTriggersManualList",
        },
        schedule: {
            value: dataLossPreventionJobTriggerTriggersScheduleToHclTerraform(struct.schedule),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionJobTriggerTriggersScheduleList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionJobTriggerTriggersToHclTerraform = dataLossPreventionJobTriggerTriggersToHclTerraform;
class DataLossPreventionJobTriggerTriggersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // manual - computed: false, optional: true, required: false
        this._manual = new DataLossPreventionJobTriggerTriggersManualOutputReference(this, "manual");
        // schedule - computed: false, optional: true, required: false
        this._schedule = new DataLossPreventionJobTriggerTriggersScheduleOutputReference(this, "schedule");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._manual?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.manual = this._manual?.internalValue;
        }
        if (this._schedule?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.schedule = this._schedule?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._manual.internalValue = undefined;
            this._schedule.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._manual.internalValue = value.manual;
            this._schedule.internalValue = value.schedule;
        }
    }
    get manual() {
        return this._manual;
    }
    putManual(value) {
        this._manual.internalValue = value;
    }
    resetManual() {
        this._manual.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get manualInput() {
        return this._manual.internalValue;
    }
    get schedule() {
        return this._schedule;
    }
    putSchedule(value) {
        this._schedule.internalValue = value;
    }
    resetSchedule() {
        this._schedule.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scheduleInput() {
        return this._schedule.internalValue;
    }
}
exports.DataLossPreventionJobTriggerTriggersOutputReference = DataLossPreventionJobTriggerTriggersOutputReference;
_58 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerTriggersOutputReference[_58] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerTriggersOutputReference", version: "14.13.1" };
class DataLossPreventionJobTriggerTriggersList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataLossPreventionJobTriggerTriggersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataLossPreventionJobTriggerTriggersList = DataLossPreventionJobTriggerTriggersList;
_59 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTriggerTriggersList[_59] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTriggerTriggersList", version: "14.13.1" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/data_loss_prevention_job_trigger google_data_loss_prevention_job_trigger}
*/
class DataLossPreventionJobTrigger extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a DataLossPreventionJobTrigger resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the DataLossPreventionJobTrigger to import
    * @param importFromId The id of the existing DataLossPreventionJobTrigger that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/data_loss_prevention_job_trigger#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the DataLossPreventionJobTrigger to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_data_loss_prevention_job_trigger", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/data_loss_prevention_job_trigger google_data_loss_prevention_job_trigger} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataLossPreventionJobTriggerConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_data_loss_prevention_job_trigger',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // inspect_job - computed: false, optional: true, required: false
        this._inspectJob = new DataLossPreventionJobTriggerInspectJobOutputReference(this, "inspect_job");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new DataLossPreventionJobTriggerTimeoutsOutputReference(this, "timeouts");
        // triggers - computed: false, optional: false, required: true
        this._triggers = new DataLossPreventionJobTriggerTriggersList(this, "triggers", false);
        this._description = config.description;
        this._displayName = config.displayName;
        this._id = config.id;
        this._parent = config.parent;
        this._status = config.status;
        this._triggerId = config.triggerId;
        this._inspectJob.internalValue = config.inspectJob;
        this._timeouts.internalValue = config.timeouts;
        this._triggers.internalValue = config.triggers;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // create_time - computed: true, optional: false, required: false
    get createTime() {
        return this.getStringAttribute('create_time');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get displayName() {
        return this.getStringAttribute('display_name');
    }
    set displayName(value) {
        this._displayName = value;
    }
    resetDisplayName() {
        this._displayName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get displayNameInput() {
        return this._displayName;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // last_run_time - computed: true, optional: false, required: false
    get lastRunTime() {
        return this.getStringAttribute('last_run_time');
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get parent() {
        return this.getStringAttribute('parent');
    }
    set parent(value) {
        this._parent = value;
    }
    // Temporarily expose input value. Use with caution.
    get parentInput() {
        return this._parent;
    }
    get status() {
        return this.getStringAttribute('status');
    }
    set status(value) {
        this._status = value;
    }
    resetStatus() {
        this._status = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get statusInput() {
        return this._status;
    }
    get triggerId() {
        return this.getStringAttribute('trigger_id');
    }
    set triggerId(value) {
        this._triggerId = value;
    }
    resetTriggerId() {
        this._triggerId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get triggerIdInput() {
        return this._triggerId;
    }
    // update_time - computed: true, optional: false, required: false
    get updateTime() {
        return this.getStringAttribute('update_time');
    }
    get inspectJob() {
        return this._inspectJob;
    }
    putInspectJob(value) {
        this._inspectJob.internalValue = value;
    }
    resetInspectJob() {
        this._inspectJob.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inspectJobInput() {
        return this._inspectJob.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    get triggers() {
        return this._triggers;
    }
    putTriggers(value) {
        this._triggers.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get triggersInput() {
        return this._triggers.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            description: cdktf.stringToTerraform(this._description),
            display_name: cdktf.stringToTerraform(this._displayName),
            id: cdktf.stringToTerraform(this._id),
            parent: cdktf.stringToTerraform(this._parent),
            status: cdktf.stringToTerraform(this._status),
            trigger_id: cdktf.stringToTerraform(this._triggerId),
            inspect_job: dataLossPreventionJobTriggerInspectJobToTerraform(this._inspectJob.internalValue),
            timeouts: dataLossPreventionJobTriggerTimeoutsToTerraform(this._timeouts.internalValue),
            triggers: cdktf.listMapper(dataLossPreventionJobTriggerTriggersToTerraform, true)(this._triggers.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            description: {
                value: cdktf.stringToHclTerraform(this._description),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            display_name: {
                value: cdktf.stringToHclTerraform(this._displayName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            parent: {
                value: cdktf.stringToHclTerraform(this._parent),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            status: {
                value: cdktf.stringToHclTerraform(this._status),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            trigger_id: {
                value: cdktf.stringToHclTerraform(this._triggerId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            inspect_job: {
                value: dataLossPreventionJobTriggerInspectJobToHclTerraform(this._inspectJob.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "DataLossPreventionJobTriggerInspectJobList",
            },
            timeouts: {
                value: dataLossPreventionJobTriggerTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "DataLossPreventionJobTriggerTimeouts",
            },
            triggers: {
                value: cdktf.listMapperHcl(dataLossPreventionJobTriggerTriggersToHclTerraform, true)(this._triggers.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "DataLossPreventionJobTriggerTriggersList",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.DataLossPreventionJobTrigger = DataLossPreventionJobTrigger;
_60 = JSII_RTTI_SYMBOL_1;
DataLossPreventionJobTrigger[_60] = { fqn: "@cdktf/provider-google.dataLossPreventionJobTrigger.DataLossPreventionJobTrigger", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
DataLossPreventionJobTrigger.tfResourceType = "google_data_loss_prevention_job_trigger";
//# sourceMappingURL=data:application/json;base64,