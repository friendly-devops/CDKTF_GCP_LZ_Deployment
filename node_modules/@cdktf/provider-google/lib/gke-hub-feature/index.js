"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesOutputReference = exports.gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesToHclTerraform = exports.gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesToTerraform = exports.GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigMonitoringOutputReference = exports.gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigMonitoringToHclTerraform = exports.gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigMonitoringToTerraform = exports.GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsList = exports.GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsOutputReference = exports.gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsToHclTerraform = exports.gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsToTerraform = exports.GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationList = exports.GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationOutputReference = exports.gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationToHclTerraform = exports.gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationToTerraform = exports.GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesOutputReference = exports.gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesToHclTerraform = exports.gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesToTerraform = exports.GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesRequestsOutputReference = exports.gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesRequestsToHclTerraform = exports.gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesRequestsToTerraform = exports.GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesLimitsOutputReference = exports.gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesLimitsToHclTerraform = exports.gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesLimitsToTerraform = exports.GkeHubFeatureFleetDefaultMemberConfigMeshOutputReference = exports.gkeHubFeatureFleetDefaultMemberConfigMeshToHclTerraform = exports.gkeHubFeatureFleetDefaultMemberConfigMeshToTerraform = exports.GkeHubFeatureFleetDefaultMemberConfigConfigmanagementOutputReference = exports.gkeHubFeatureFleetDefaultMemberConfigConfigmanagementToHclTerraform = exports.gkeHubFeatureFleetDefaultMemberConfigConfigmanagementToTerraform = exports.GkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncOutputReference = exports.gkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncToHclTerraform = exports.gkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncToTerraform = exports.GkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncOciOutputReference = exports.gkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncOciToHclTerraform = exports.gkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncOciToTerraform = exports.GkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGitOutputReference = exports.gkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGitToHclTerraform = exports.gkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGitToTerraform = exports.GkeHubFeatureStateList = exports.GkeHubFeatureStateOutputReference = exports.gkeHubFeatureStateToHclTerraform = exports.gkeHubFeatureStateToTerraform = exports.GkeHubFeatureStateStateList = exports.GkeHubFeatureStateStateOutputReference = exports.gkeHubFeatureStateStateToHclTerraform = exports.gkeHubFeatureStateStateToTerraform = exports.GkeHubFeatureResourceStateList = exports.GkeHubFeatureResourceStateOutputReference = exports.gkeHubFeatureResourceStateToHclTerraform = exports.gkeHubFeatureResourceStateToTerraform = void 0;
exports.GkeHubFeatureSpecOutputReference = exports.gkeHubFeatureSpecToHclTerraform = exports.gkeHubFeatureSpecToTerraform = exports.GkeHubFeatureSpecMulticlusteringressOutputReference = exports.gkeHubFeatureSpecMulticlusteringressToHclTerraform = exports.gkeHubFeatureSpecMulticlusteringressToTerraform = exports.GkeHubFeatureSpecFleetobservabilityOutputReference = exports.gkeHubFeatureSpecFleetobservabilityToHclTerraform = exports.gkeHubFeatureSpecFleetobservabilityToTerraform = exports.GkeHubFeatureSpecFleetobservabilityLoggingConfigOutputReference = exports.gkeHubFeatureSpecFleetobservabilityLoggingConfigToHclTerraform = exports.gkeHubFeatureSpecFleetobservabilityLoggingConfigToTerraform = exports.GkeHubFeatureSpecFleetobservabilityLoggingConfigFleetScopeLogsConfigOutputReference = exports.gkeHubFeatureSpecFleetobservabilityLoggingConfigFleetScopeLogsConfigToHclTerraform = exports.gkeHubFeatureSpecFleetobservabilityLoggingConfigFleetScopeLogsConfigToTerraform = exports.GkeHubFeatureSpecFleetobservabilityLoggingConfigDefaultConfigOutputReference = exports.gkeHubFeatureSpecFleetobservabilityLoggingConfigDefaultConfigToHclTerraform = exports.gkeHubFeatureSpecFleetobservabilityLoggingConfigDefaultConfigToTerraform = exports.GkeHubFeatureSpecClusterupgradeOutputReference = exports.gkeHubFeatureSpecClusterupgradeToHclTerraform = exports.gkeHubFeatureSpecClusterupgradeToTerraform = exports.GkeHubFeatureSpecClusterupgradePostConditionsOutputReference = exports.gkeHubFeatureSpecClusterupgradePostConditionsToHclTerraform = exports.gkeHubFeatureSpecClusterupgradePostConditionsToTerraform = exports.GkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesList = exports.GkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesOutputReference = exports.gkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesToHclTerraform = exports.gkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesToTerraform = exports.GkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesUpgradeOutputReference = exports.gkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesUpgradeToHclTerraform = exports.gkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesUpgradeToTerraform = exports.GkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesPostConditionsOutputReference = exports.gkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesPostConditionsToHclTerraform = exports.gkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesPostConditionsToTerraform = exports.GkeHubFeatureFleetDefaultMemberConfigOutputReference = exports.gkeHubFeatureFleetDefaultMemberConfigToHclTerraform = exports.gkeHubFeatureFleetDefaultMemberConfigToTerraform = exports.GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerOutputReference = exports.gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerToHclTerraform = exports.gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerToTerraform = exports.GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigOutputReference = exports.gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigToHclTerraform = exports.gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigToTerraform = exports.GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentOutputReference = exports.gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentToHclTerraform = exports.gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentToTerraform = exports.GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryOutputReference = exports.gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryToHclTerraform = exports.gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryToTerraform = exports.GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesList = void 0;
exports.GkeHubFeature = exports.GkeHubFeatureTimeoutsOutputReference = exports.gkeHubFeatureTimeoutsToHclTerraform = exports.gkeHubFeatureTimeoutsToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function gkeHubFeatureResourceStateToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.gkeHubFeatureResourceStateToTerraform = gkeHubFeatureResourceStateToTerraform;
function gkeHubFeatureResourceStateToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.gkeHubFeatureResourceStateToHclTerraform = gkeHubFeatureResourceStateToHclTerraform;
class GkeHubFeatureResourceStateOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // has_resources - computed: true, optional: false, required: false
    get hasResources() {
        return this.getBooleanAttribute('has_resources');
    }
    // state - computed: true, optional: false, required: false
    get state() {
        return this.getStringAttribute('state');
    }
}
exports.GkeHubFeatureResourceStateOutputReference = GkeHubFeatureResourceStateOutputReference;
_a = JSII_RTTI_SYMBOL_1;
GkeHubFeatureResourceStateOutputReference[_a] = { fqn: "@cdktf/provider-google.gkeHubFeature.GkeHubFeatureResourceStateOutputReference", version: "14.13.1" };
class GkeHubFeatureResourceStateList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new GkeHubFeatureResourceStateOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.GkeHubFeatureResourceStateList = GkeHubFeatureResourceStateList;
_b = JSII_RTTI_SYMBOL_1;
GkeHubFeatureResourceStateList[_b] = { fqn: "@cdktf/provider-google.gkeHubFeature.GkeHubFeatureResourceStateList", version: "14.13.1" };
function gkeHubFeatureStateStateToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.gkeHubFeatureStateStateToTerraform = gkeHubFeatureStateStateToTerraform;
function gkeHubFeatureStateStateToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.gkeHubFeatureStateStateToHclTerraform = gkeHubFeatureStateStateToHclTerraform;
class GkeHubFeatureStateStateOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // code - computed: true, optional: false, required: false
    get code() {
        return this.getStringAttribute('code');
    }
    // description - computed: true, optional: false, required: false
    get description() {
        return this.getStringAttribute('description');
    }
    // update_time - computed: true, optional: false, required: false
    get updateTime() {
        return this.getStringAttribute('update_time');
    }
}
exports.GkeHubFeatureStateStateOutputReference = GkeHubFeatureStateStateOutputReference;
_c = JSII_RTTI_SYMBOL_1;
GkeHubFeatureStateStateOutputReference[_c] = { fqn: "@cdktf/provider-google.gkeHubFeature.GkeHubFeatureStateStateOutputReference", version: "14.13.1" };
class GkeHubFeatureStateStateList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new GkeHubFeatureStateStateOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.GkeHubFeatureStateStateList = GkeHubFeatureStateStateList;
_d = JSII_RTTI_SYMBOL_1;
GkeHubFeatureStateStateList[_d] = { fqn: "@cdktf/provider-google.gkeHubFeature.GkeHubFeatureStateStateList", version: "14.13.1" };
function gkeHubFeatureStateToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.gkeHubFeatureStateToTerraform = gkeHubFeatureStateToTerraform;
function gkeHubFeatureStateToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.gkeHubFeatureStateToHclTerraform = gkeHubFeatureStateToHclTerraform;
class GkeHubFeatureStateOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // state - computed: true, optional: false, required: false
        this._state = new GkeHubFeatureStateStateList(this, "state", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    get state() {
        return this._state;
    }
}
exports.GkeHubFeatureStateOutputReference = GkeHubFeatureStateOutputReference;
_e = JSII_RTTI_SYMBOL_1;
GkeHubFeatureStateOutputReference[_e] = { fqn: "@cdktf/provider-google.gkeHubFeature.GkeHubFeatureStateOutputReference", version: "14.13.1" };
class GkeHubFeatureStateList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new GkeHubFeatureStateOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.GkeHubFeatureStateList = GkeHubFeatureStateList;
_f = JSII_RTTI_SYMBOL_1;
GkeHubFeatureStateList[_f] = { fqn: "@cdktf/provider-google.gkeHubFeature.GkeHubFeatureStateList", version: "14.13.1" };
function gkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGitToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        gcp_service_account_email: cdktf.stringToTerraform(struct.gcpServiceAccountEmail),
        https_proxy: cdktf.stringToTerraform(struct.httpsProxy),
        policy_dir: cdktf.stringToTerraform(struct.policyDir),
        secret_type: cdktf.stringToTerraform(struct.secretType),
        sync_branch: cdktf.stringToTerraform(struct.syncBranch),
        sync_repo: cdktf.stringToTerraform(struct.syncRepo),
        sync_rev: cdktf.stringToTerraform(struct.syncRev),
        sync_wait_secs: cdktf.stringToTerraform(struct.syncWaitSecs),
    };
}
exports.gkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGitToTerraform = gkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGitToTerraform;
function gkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGitToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        gcp_service_account_email: {
            value: cdktf.stringToHclTerraform(struct.gcpServiceAccountEmail),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        https_proxy: {
            value: cdktf.stringToHclTerraform(struct.httpsProxy),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        policy_dir: {
            value: cdktf.stringToHclTerraform(struct.policyDir),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        secret_type: {
            value: cdktf.stringToHclTerraform(struct.secretType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sync_branch: {
            value: cdktf.stringToHclTerraform(struct.syncBranch),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sync_repo: {
            value: cdktf.stringToHclTerraform(struct.syncRepo),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sync_rev: {
            value: cdktf.stringToHclTerraform(struct.syncRev),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sync_wait_secs: {
            value: cdktf.stringToHclTerraform(struct.syncWaitSecs),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGitToHclTerraform = gkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGitToHclTerraform;
class GkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGitOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._gcpServiceAccountEmail !== undefined) {
            hasAnyValues = true;
            internalValueResult.gcpServiceAccountEmail = this._gcpServiceAccountEmail;
        }
        if (this._httpsProxy !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpsProxy = this._httpsProxy;
        }
        if (this._policyDir !== undefined) {
            hasAnyValues = true;
            internalValueResult.policyDir = this._policyDir;
        }
        if (this._secretType !== undefined) {
            hasAnyValues = true;
            internalValueResult.secretType = this._secretType;
        }
        if (this._syncBranch !== undefined) {
            hasAnyValues = true;
            internalValueResult.syncBranch = this._syncBranch;
        }
        if (this._syncRepo !== undefined) {
            hasAnyValues = true;
            internalValueResult.syncRepo = this._syncRepo;
        }
        if (this._syncRev !== undefined) {
            hasAnyValues = true;
            internalValueResult.syncRev = this._syncRev;
        }
        if (this._syncWaitSecs !== undefined) {
            hasAnyValues = true;
            internalValueResult.syncWaitSecs = this._syncWaitSecs;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._gcpServiceAccountEmail = undefined;
            this._httpsProxy = undefined;
            this._policyDir = undefined;
            this._secretType = undefined;
            this._syncBranch = undefined;
            this._syncRepo = undefined;
            this._syncRev = undefined;
            this._syncWaitSecs = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._gcpServiceAccountEmail = value.gcpServiceAccountEmail;
            this._httpsProxy = value.httpsProxy;
            this._policyDir = value.policyDir;
            this._secretType = value.secretType;
            this._syncBranch = value.syncBranch;
            this._syncRepo = value.syncRepo;
            this._syncRev = value.syncRev;
            this._syncWaitSecs = value.syncWaitSecs;
        }
    }
    get gcpServiceAccountEmail() {
        return this.getStringAttribute('gcp_service_account_email');
    }
    set gcpServiceAccountEmail(value) {
        this._gcpServiceAccountEmail = value;
    }
    resetGcpServiceAccountEmail() {
        this._gcpServiceAccountEmail = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gcpServiceAccountEmailInput() {
        return this._gcpServiceAccountEmail;
    }
    get httpsProxy() {
        return this.getStringAttribute('https_proxy');
    }
    set httpsProxy(value) {
        this._httpsProxy = value;
    }
    resetHttpsProxy() {
        this._httpsProxy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpsProxyInput() {
        return this._httpsProxy;
    }
    get policyDir() {
        return this.getStringAttribute('policy_dir');
    }
    set policyDir(value) {
        this._policyDir = value;
    }
    resetPolicyDir() {
        this._policyDir = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get policyDirInput() {
        return this._policyDir;
    }
    get secretType() {
        return this.getStringAttribute('secret_type');
    }
    set secretType(value) {
        this._secretType = value;
    }
    // Temporarily expose input value. Use with caution.
    get secretTypeInput() {
        return this._secretType;
    }
    get syncBranch() {
        return this.getStringAttribute('sync_branch');
    }
    set syncBranch(value) {
        this._syncBranch = value;
    }
    resetSyncBranch() {
        this._syncBranch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get syncBranchInput() {
        return this._syncBranch;
    }
    get syncRepo() {
        return this.getStringAttribute('sync_repo');
    }
    set syncRepo(value) {
        this._syncRepo = value;
    }
    resetSyncRepo() {
        this._syncRepo = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get syncRepoInput() {
        return this._syncRepo;
    }
    get syncRev() {
        return this.getStringAttribute('sync_rev');
    }
    set syncRev(value) {
        this._syncRev = value;
    }
    resetSyncRev() {
        this._syncRev = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get syncRevInput() {
        return this._syncRev;
    }
    get syncWaitSecs() {
        return this.getStringAttribute('sync_wait_secs');
    }
    set syncWaitSecs(value) {
        this._syncWaitSecs = value;
    }
    resetSyncWaitSecs() {
        this._syncWaitSecs = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get syncWaitSecsInput() {
        return this._syncWaitSecs;
    }
}
exports.GkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGitOutputReference = GkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGitOutputReference;
_g = JSII_RTTI_SYMBOL_1;
GkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGitOutputReference[_g] = { fqn: "@cdktf/provider-google.gkeHubFeature.GkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGitOutputReference", version: "14.13.1" };
function gkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncOciToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        gcp_service_account_email: cdktf.stringToTerraform(struct.gcpServiceAccountEmail),
        policy_dir: cdktf.stringToTerraform(struct.policyDir),
        secret_type: cdktf.stringToTerraform(struct.secretType),
        sync_repo: cdktf.stringToTerraform(struct.syncRepo),
        sync_wait_secs: cdktf.stringToTerraform(struct.syncWaitSecs),
        version: cdktf.stringToTerraform(struct.version),
    };
}
exports.gkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncOciToTerraform = gkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncOciToTerraform;
function gkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncOciToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        gcp_service_account_email: {
            value: cdktf.stringToHclTerraform(struct.gcpServiceAccountEmail),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        policy_dir: {
            value: cdktf.stringToHclTerraform(struct.policyDir),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        secret_type: {
            value: cdktf.stringToHclTerraform(struct.secretType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sync_repo: {
            value: cdktf.stringToHclTerraform(struct.syncRepo),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sync_wait_secs: {
            value: cdktf.stringToHclTerraform(struct.syncWaitSecs),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        version: {
            value: cdktf.stringToHclTerraform(struct.version),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncOciToHclTerraform = gkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncOciToHclTerraform;
class GkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncOciOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._gcpServiceAccountEmail !== undefined) {
            hasAnyValues = true;
            internalValueResult.gcpServiceAccountEmail = this._gcpServiceAccountEmail;
        }
        if (this._policyDir !== undefined) {
            hasAnyValues = true;
            internalValueResult.policyDir = this._policyDir;
        }
        if (this._secretType !== undefined) {
            hasAnyValues = true;
            internalValueResult.secretType = this._secretType;
        }
        if (this._syncRepo !== undefined) {
            hasAnyValues = true;
            internalValueResult.syncRepo = this._syncRepo;
        }
        if (this._syncWaitSecs !== undefined) {
            hasAnyValues = true;
            internalValueResult.syncWaitSecs = this._syncWaitSecs;
        }
        if (this._version !== undefined) {
            hasAnyValues = true;
            internalValueResult.version = this._version;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._gcpServiceAccountEmail = undefined;
            this._policyDir = undefined;
            this._secretType = undefined;
            this._syncRepo = undefined;
            this._syncWaitSecs = undefined;
            this._version = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._gcpServiceAccountEmail = value.gcpServiceAccountEmail;
            this._policyDir = value.policyDir;
            this._secretType = value.secretType;
            this._syncRepo = value.syncRepo;
            this._syncWaitSecs = value.syncWaitSecs;
            this._version = value.version;
        }
    }
    get gcpServiceAccountEmail() {
        return this.getStringAttribute('gcp_service_account_email');
    }
    set gcpServiceAccountEmail(value) {
        this._gcpServiceAccountEmail = value;
    }
    resetGcpServiceAccountEmail() {
        this._gcpServiceAccountEmail = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gcpServiceAccountEmailInput() {
        return this._gcpServiceAccountEmail;
    }
    get policyDir() {
        return this.getStringAttribute('policy_dir');
    }
    set policyDir(value) {
        this._policyDir = value;
    }
    resetPolicyDir() {
        this._policyDir = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get policyDirInput() {
        return this._policyDir;
    }
    get secretType() {
        return this.getStringAttribute('secret_type');
    }
    set secretType(value) {
        this._secretType = value;
    }
    // Temporarily expose input value. Use with caution.
    get secretTypeInput() {
        return this._secretType;
    }
    get syncRepo() {
        return this.getStringAttribute('sync_repo');
    }
    set syncRepo(value) {
        this._syncRepo = value;
    }
    resetSyncRepo() {
        this._syncRepo = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get syncRepoInput() {
        return this._syncRepo;
    }
    get syncWaitSecs() {
        return this.getStringAttribute('sync_wait_secs');
    }
    set syncWaitSecs(value) {
        this._syncWaitSecs = value;
    }
    resetSyncWaitSecs() {
        this._syncWaitSecs = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get syncWaitSecsInput() {
        return this._syncWaitSecs;
    }
    get version() {
        return this.getStringAttribute('version');
    }
    set version(value) {
        this._version = value;
    }
    resetVersion() {
        this._version = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get versionInput() {
        return this._version;
    }
}
exports.GkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncOciOutputReference = GkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncOciOutputReference;
_h = JSII_RTTI_SYMBOL_1;
GkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncOciOutputReference[_h] = { fqn: "@cdktf/provider-google.gkeHubFeature.GkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncOciOutputReference", version: "14.13.1" };
function gkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        prevent_drift: cdktf.booleanToTerraform(struct.preventDrift),
        source_format: cdktf.stringToTerraform(struct.sourceFormat),
        git: gkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGitToTerraform(struct.git),
        oci: gkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncOciToTerraform(struct.oci),
    };
}
exports.gkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncToTerraform = gkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncToTerraform;
function gkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        prevent_drift: {
            value: cdktf.booleanToHclTerraform(struct.preventDrift),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        source_format: {
            value: cdktf.stringToHclTerraform(struct.sourceFormat),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        git: {
            value: gkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGitToHclTerraform(struct.git),
            isBlock: true,
            type: "list",
            storageClassType: "GkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGitList",
        },
        oci: {
            value: gkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncOciToHclTerraform(struct.oci),
            isBlock: true,
            type: "list",
            storageClassType: "GkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncOciList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncToHclTerraform = gkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncToHclTerraform;
class GkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // git - computed: false, optional: true, required: false
        this._git = new GkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGitOutputReference(this, "git");
        // oci - computed: false, optional: true, required: false
        this._oci = new GkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncOciOutputReference(this, "oci");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._preventDrift !== undefined) {
            hasAnyValues = true;
            internalValueResult.preventDrift = this._preventDrift;
        }
        if (this._sourceFormat !== undefined) {
            hasAnyValues = true;
            internalValueResult.sourceFormat = this._sourceFormat;
        }
        if (this._git?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.git = this._git?.internalValue;
        }
        if (this._oci?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.oci = this._oci?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._preventDrift = undefined;
            this._sourceFormat = undefined;
            this._git.internalValue = undefined;
            this._oci.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._preventDrift = value.preventDrift;
            this._sourceFormat = value.sourceFormat;
            this._git.internalValue = value.git;
            this._oci.internalValue = value.oci;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get preventDrift() {
        return this.getBooleanAttribute('prevent_drift');
    }
    set preventDrift(value) {
        this._preventDrift = value;
    }
    resetPreventDrift() {
        this._preventDrift = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get preventDriftInput() {
        return this._preventDrift;
    }
    get sourceFormat() {
        return this.getStringAttribute('source_format');
    }
    set sourceFormat(value) {
        this._sourceFormat = value;
    }
    resetSourceFormat() {
        this._sourceFormat = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sourceFormatInput() {
        return this._sourceFormat;
    }
    get git() {
        return this._git;
    }
    putGit(value) {
        this._git.internalValue = value;
    }
    resetGit() {
        this._git.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gitInput() {
        return this._git.internalValue;
    }
    get oci() {
        return this._oci;
    }
    putOci(value) {
        this._oci.internalValue = value;
    }
    resetOci() {
        this._oci.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ociInput() {
        return this._oci.internalValue;
    }
}
exports.GkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncOutputReference = GkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncOutputReference;
_j = JSII_RTTI_SYMBOL_1;
GkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncOutputReference[_j] = { fqn: "@cdktf/provider-google.gkeHubFeature.GkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncOutputReference", version: "14.13.1" };
function gkeHubFeatureFleetDefaultMemberConfigConfigmanagementToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        management: cdktf.stringToTerraform(struct.management),
        version: cdktf.stringToTerraform(struct.version),
        config_sync: gkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncToTerraform(struct.configSync),
    };
}
exports.gkeHubFeatureFleetDefaultMemberConfigConfigmanagementToTerraform = gkeHubFeatureFleetDefaultMemberConfigConfigmanagementToTerraform;
function gkeHubFeatureFleetDefaultMemberConfigConfigmanagementToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        management: {
            value: cdktf.stringToHclTerraform(struct.management),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        version: {
            value: cdktf.stringToHclTerraform(struct.version),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        config_sync: {
            value: gkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncToHclTerraform(struct.configSync),
            isBlock: true,
            type: "list",
            storageClassType: "GkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureFleetDefaultMemberConfigConfigmanagementToHclTerraform = gkeHubFeatureFleetDefaultMemberConfigConfigmanagementToHclTerraform;
class GkeHubFeatureFleetDefaultMemberConfigConfigmanagementOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // config_sync - computed: false, optional: true, required: false
        this._configSync = new GkeHubFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncOutputReference(this, "config_sync");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._management !== undefined) {
            hasAnyValues = true;
            internalValueResult.management = this._management;
        }
        if (this._version !== undefined) {
            hasAnyValues = true;
            internalValueResult.version = this._version;
        }
        if (this._configSync?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.configSync = this._configSync?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._management = undefined;
            this._version = undefined;
            this._configSync.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._management = value.management;
            this._version = value.version;
            this._configSync.internalValue = value.configSync;
        }
    }
    get management() {
        return this.getStringAttribute('management');
    }
    set management(value) {
        this._management = value;
    }
    resetManagement() {
        this._management = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get managementInput() {
        return this._management;
    }
    get version() {
        return this.getStringAttribute('version');
    }
    set version(value) {
        this._version = value;
    }
    resetVersion() {
        this._version = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get versionInput() {
        return this._version;
    }
    get configSync() {
        return this._configSync;
    }
    putConfigSync(value) {
        this._configSync.internalValue = value;
    }
    resetConfigSync() {
        this._configSync.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get configSyncInput() {
        return this._configSync.internalValue;
    }
}
exports.GkeHubFeatureFleetDefaultMemberConfigConfigmanagementOutputReference = GkeHubFeatureFleetDefaultMemberConfigConfigmanagementOutputReference;
_k = JSII_RTTI_SYMBOL_1;
GkeHubFeatureFleetDefaultMemberConfigConfigmanagementOutputReference[_k] = { fqn: "@cdktf/provider-google.gkeHubFeature.GkeHubFeatureFleetDefaultMemberConfigConfigmanagementOutputReference", version: "14.13.1" };
function gkeHubFeatureFleetDefaultMemberConfigMeshToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        management: cdktf.stringToTerraform(struct.management),
    };
}
exports.gkeHubFeatureFleetDefaultMemberConfigMeshToTerraform = gkeHubFeatureFleetDefaultMemberConfigMeshToTerraform;
function gkeHubFeatureFleetDefaultMemberConfigMeshToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        management: {
            value: cdktf.stringToHclTerraform(struct.management),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureFleetDefaultMemberConfigMeshToHclTerraform = gkeHubFeatureFleetDefaultMemberConfigMeshToHclTerraform;
class GkeHubFeatureFleetDefaultMemberConfigMeshOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._management !== undefined) {
            hasAnyValues = true;
            internalValueResult.management = this._management;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._management = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._management = value.management;
        }
    }
    get management() {
        return this.getStringAttribute('management');
    }
    set management(value) {
        this._management = value;
    }
    // Temporarily expose input value. Use with caution.
    get managementInput() {
        return this._management;
    }
}
exports.GkeHubFeatureFleetDefaultMemberConfigMeshOutputReference = GkeHubFeatureFleetDefaultMemberConfigMeshOutputReference;
_l = JSII_RTTI_SYMBOL_1;
GkeHubFeatureFleetDefaultMemberConfigMeshOutputReference[_l] = { fqn: "@cdktf/provider-google.gkeHubFeature.GkeHubFeatureFleetDefaultMemberConfigMeshOutputReference", version: "14.13.1" };
function gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesLimitsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cpu: cdktf.stringToTerraform(struct.cpu),
        memory: cdktf.stringToTerraform(struct.memory),
    };
}
exports.gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesLimitsToTerraform = gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesLimitsToTerraform;
function gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesLimitsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cpu: {
            value: cdktf.stringToHclTerraform(struct.cpu),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        memory: {
            value: cdktf.stringToHclTerraform(struct.memory),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesLimitsToHclTerraform = gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesLimitsToHclTerraform;
class GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesLimitsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cpu !== undefined) {
            hasAnyValues = true;
            internalValueResult.cpu = this._cpu;
        }
        if (this._memory !== undefined) {
            hasAnyValues = true;
            internalValueResult.memory = this._memory;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cpu = undefined;
            this._memory = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cpu = value.cpu;
            this._memory = value.memory;
        }
    }
    get cpu() {
        return this.getStringAttribute('cpu');
    }
    set cpu(value) {
        this._cpu = value;
    }
    resetCpu() {
        this._cpu = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cpuInput() {
        return this._cpu;
    }
    get memory() {
        return this.getStringAttribute('memory');
    }
    set memory(value) {
        this._memory = value;
    }
    resetMemory() {
        this._memory = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get memoryInput() {
        return this._memory;
    }
}
exports.GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesLimitsOutputReference = GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesLimitsOutputReference;
_m = JSII_RTTI_SYMBOL_1;
GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesLimitsOutputReference[_m] = { fqn: "@cdktf/provider-google.gkeHubFeature.GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesLimitsOutputReference", version: "14.13.1" };
function gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesRequestsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cpu: cdktf.stringToTerraform(struct.cpu),
        memory: cdktf.stringToTerraform(struct.memory),
    };
}
exports.gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesRequestsToTerraform = gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesRequestsToTerraform;
function gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesRequestsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cpu: {
            value: cdktf.stringToHclTerraform(struct.cpu),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        memory: {
            value: cdktf.stringToHclTerraform(struct.memory),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesRequestsToHclTerraform = gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesRequestsToHclTerraform;
class GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesRequestsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cpu !== undefined) {
            hasAnyValues = true;
            internalValueResult.cpu = this._cpu;
        }
        if (this._memory !== undefined) {
            hasAnyValues = true;
            internalValueResult.memory = this._memory;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cpu = undefined;
            this._memory = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cpu = value.cpu;
            this._memory = value.memory;
        }
    }
    get cpu() {
        return this.getStringAttribute('cpu');
    }
    set cpu(value) {
        this._cpu = value;
    }
    resetCpu() {
        this._cpu = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cpuInput() {
        return this._cpu;
    }
    get memory() {
        return this.getStringAttribute('memory');
    }
    set memory(value) {
        this._memory = value;
    }
    resetMemory() {
        this._memory = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get memoryInput() {
        return this._memory;
    }
}
exports.GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesRequestsOutputReference = GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesRequestsOutputReference;
_o = JSII_RTTI_SYMBOL_1;
GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesRequestsOutputReference[_o] = { fqn: "@cdktf/provider-google.gkeHubFeature.GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesRequestsOutputReference", version: "14.13.1" };
function gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        limits: gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesLimitsToTerraform(struct.limits),
        requests: gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesRequestsToTerraform(struct.requests),
    };
}
exports.gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesToTerraform = gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesToTerraform;
function gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        limits: {
            value: gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesLimitsToHclTerraform(struct.limits),
            isBlock: true,
            type: "list",
            storageClassType: "GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesLimitsList",
        },
        requests: {
            value: gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesRequestsToHclTerraform(struct.requests),
            isBlock: true,
            type: "list",
            storageClassType: "GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesRequestsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesToHclTerraform = gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesToHclTerraform;
class GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // limits - computed: false, optional: true, required: false
        this._limits = new GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesLimitsOutputReference(this, "limits");
        // requests - computed: false, optional: true, required: false
        this._requests = new GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesRequestsOutputReference(this, "requests");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._limits?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.limits = this._limits?.internalValue;
        }
        if (this._requests?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.requests = this._requests?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._limits.internalValue = undefined;
            this._requests.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._limits.internalValue = value.limits;
            this._requests.internalValue = value.requests;
        }
    }
    get limits() {
        return this._limits;
    }
    putLimits(value) {
        this._limits.internalValue = value;
    }
    resetLimits() {
        this._limits.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get limitsInput() {
        return this._limits.internalValue;
    }
    get requests() {
        return this._requests;
    }
    putRequests(value) {
        this._requests.internalValue = value;
    }
    resetRequests() {
        this._requests.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestsInput() {
        return this._requests.internalValue;
    }
}
exports.GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesOutputReference = GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesOutputReference;
_p = JSII_RTTI_SYMBOL_1;
GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesOutputReference[_p] = { fqn: "@cdktf/provider-google.gkeHubFeature.GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesOutputReference", version: "14.13.1" };
function gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        effect: cdktf.stringToTerraform(struct.effect),
        key: cdktf.stringToTerraform(struct.key),
        operator: cdktf.stringToTerraform(struct.operator),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationToTerraform = gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationToTerraform;
function gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        effect: {
            value: cdktf.stringToHclTerraform(struct.effect),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        key: {
            value: cdktf.stringToHclTerraform(struct.key),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        operator: {
            value: cdktf.stringToHclTerraform(struct.operator),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationToHclTerraform = gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationToHclTerraform;
class GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._effect !== undefined) {
            hasAnyValues = true;
            internalValueResult.effect = this._effect;
        }
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._operator !== undefined) {
            hasAnyValues = true;
            internalValueResult.operator = this._operator;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._effect = undefined;
            this._key = undefined;
            this._operator = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._effect = value.effect;
            this._key = value.key;
            this._operator = value.operator;
            this._value = value.value;
        }
    }
    get effect() {
        return this.getStringAttribute('effect');
    }
    set effect(value) {
        this._effect = value;
    }
    resetEffect() {
        this._effect = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get effectInput() {
        return this._effect;
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    resetKey() {
        this._key = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get operator() {
        return this.getStringAttribute('operator');
    }
    set operator(value) {
        this._operator = value;
    }
    resetOperator() {
        this._operator = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get operatorInput() {
        return this._operator;
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    resetValue() {
        this._value = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationOutputReference = GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationOutputReference;
_q = JSII_RTTI_SYMBOL_1;
GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationOutputReference[_q] = { fqn: "@cdktf/provider-google.gkeHubFeature.GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationOutputReference", version: "14.13.1" };
class GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationList = GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationList;
_r = JSII_RTTI_SYMBOL_1;
GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationList[_r] = { fqn: "@cdktf/provider-google.gkeHubFeature.GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationList", version: "14.13.1" };
function gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        component: cdktf.stringToTerraform(struct.component),
        pod_affinity: cdktf.stringToTerraform(struct.podAffinity),
        replica_count: cdktf.numberToTerraform(struct.replicaCount),
        container_resources: gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesToTerraform(struct.containerResources),
        pod_toleration: cdktf.listMapper(gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationToTerraform, true)(struct.podToleration),
    };
}
exports.gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsToTerraform = gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsToTerraform;
function gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        component: {
            value: cdktf.stringToHclTerraform(struct.component),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        pod_affinity: {
            value: cdktf.stringToHclTerraform(struct.podAffinity),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        replica_count: {
            value: cdktf.numberToHclTerraform(struct.replicaCount),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        container_resources: {
            value: gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesToHclTerraform(struct.containerResources),
            isBlock: true,
            type: "list",
            storageClassType: "GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesList",
        },
        pod_toleration: {
            value: cdktf.listMapperHcl(gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationToHclTerraform, true)(struct.podToleration),
            isBlock: true,
            type: "list",
            storageClassType: "GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsToHclTerraform = gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsToHclTerraform;
class GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // container_resources - computed: false, optional: true, required: false
        this._containerResources = new GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesOutputReference(this, "container_resources");
        // pod_toleration - computed: false, optional: true, required: false
        this._podToleration = new GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationList(this, "pod_toleration", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._component !== undefined) {
            hasAnyValues = true;
            internalValueResult.component = this._component;
        }
        if (this._podAffinity !== undefined) {
            hasAnyValues = true;
            internalValueResult.podAffinity = this._podAffinity;
        }
        if (this._replicaCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.replicaCount = this._replicaCount;
        }
        if (this._containerResources?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.containerResources = this._containerResources?.internalValue;
        }
        if (this._podToleration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.podToleration = this._podToleration?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._component = undefined;
            this._podAffinity = undefined;
            this._replicaCount = undefined;
            this._containerResources.internalValue = undefined;
            this._podToleration.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._component = value.component;
            this._podAffinity = value.podAffinity;
            this._replicaCount = value.replicaCount;
            this._containerResources.internalValue = value.containerResources;
            this._podToleration.internalValue = value.podToleration;
        }
    }
    get component() {
        return this.getStringAttribute('component');
    }
    set component(value) {
        this._component = value;
    }
    // Temporarily expose input value. Use with caution.
    get componentInput() {
        return this._component;
    }
    get podAffinity() {
        return this.getStringAttribute('pod_affinity');
    }
    set podAffinity(value) {
        this._podAffinity = value;
    }
    resetPodAffinity() {
        this._podAffinity = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get podAffinityInput() {
        return this._podAffinity;
    }
    get replicaCount() {
        return this.getNumberAttribute('replica_count');
    }
    set replicaCount(value) {
        this._replicaCount = value;
    }
    resetReplicaCount() {
        this._replicaCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get replicaCountInput() {
        return this._replicaCount;
    }
    get containerResources() {
        return this._containerResources;
    }
    putContainerResources(value) {
        this._containerResources.internalValue = value;
    }
    resetContainerResources() {
        this._containerResources.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get containerResourcesInput() {
        return this._containerResources.internalValue;
    }
    get podToleration() {
        return this._podToleration;
    }
    putPodToleration(value) {
        this._podToleration.internalValue = value;
    }
    resetPodToleration() {
        this._podToleration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get podTolerationInput() {
        return this._podToleration.internalValue;
    }
}
exports.GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsOutputReference = GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsOutputReference;
_s = JSII_RTTI_SYMBOL_1;
GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsOutputReference[_s] = { fqn: "@cdktf/provider-google.gkeHubFeature.GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsOutputReference", version: "14.13.1" };
class GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsList = GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsList;
_t = JSII_RTTI_SYMBOL_1;
GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsList[_t] = { fqn: "@cdktf/provider-google.gkeHubFeature.GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsList", version: "14.13.1" };
function gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigMonitoringToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        backends: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.backends),
    };
}
exports.gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigMonitoringToTerraform = gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigMonitoringToTerraform;
function gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigMonitoringToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        backends: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.backends),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigMonitoringToHclTerraform = gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigMonitoringToHclTerraform;
class GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigMonitoringOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._backends !== undefined) {
            hasAnyValues = true;
            internalValueResult.backends = this._backends;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._backends = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._backends = value.backends;
        }
    }
    get backends() {
        return this.getListAttribute('backends');
    }
    set backends(value) {
        this._backends = value;
    }
    resetBackends() {
        this._backends = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get backendsInput() {
        return this._backends;
    }
}
exports.GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigMonitoringOutputReference = GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigMonitoringOutputReference;
_u = JSII_RTTI_SYMBOL_1;
GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigMonitoringOutputReference[_u] = { fqn: "@cdktf/provider-google.gkeHubFeature.GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigMonitoringOutputReference", version: "14.13.1" };
function gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bundle: cdktf.stringToTerraform(struct.bundle),
        exempted_namespaces: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.exemptedNamespaces),
    };
}
exports.gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesToTerraform = gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesToTerraform;
function gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        bundle: {
            value: cdktf.stringToHclTerraform(struct.bundle),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        exempted_namespaces: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.exemptedNamespaces),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesToHclTerraform = gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesToHclTerraform;
class GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bundle !== undefined) {
            hasAnyValues = true;
            internalValueResult.bundle = this._bundle;
        }
        if (this._exemptedNamespaces !== undefined) {
            hasAnyValues = true;
            internalValueResult.exemptedNamespaces = this._exemptedNamespaces;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._bundle = undefined;
            this._exemptedNamespaces = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._bundle = value.bundle;
            this._exemptedNamespaces = value.exemptedNamespaces;
        }
    }
    get bundle() {
        return this.getStringAttribute('bundle');
    }
    set bundle(value) {
        this._bundle = value;
    }
    // Temporarily expose input value. Use with caution.
    get bundleInput() {
        return this._bundle;
    }
    get exemptedNamespaces() {
        return this.getListAttribute('exempted_namespaces');
    }
    set exemptedNamespaces(value) {
        this._exemptedNamespaces = value;
    }
    resetExemptedNamespaces() {
        this._exemptedNamespaces = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get exemptedNamespacesInput() {
        return this._exemptedNamespaces;
    }
}
exports.GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesOutputReference = GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesOutputReference;
_v = JSII_RTTI_SYMBOL_1;
GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesOutputReference[_v] = { fqn: "@cdktf/provider-google.gkeHubFeature.GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesOutputReference", version: "14.13.1" };
class GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesList = GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesList;
_w = JSII_RTTI_SYMBOL_1;
GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesList[_w] = { fqn: "@cdktf/provider-google.gkeHubFeature.GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesList", version: "14.13.1" };
function gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        installation: cdktf.stringToTerraform(struct.installation),
    };
}
exports.gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryToTerraform = gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryToTerraform;
function gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        installation: {
            value: cdktf.stringToHclTerraform(struct.installation),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryToHclTerraform = gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryToHclTerraform;
class GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._installation !== undefined) {
            hasAnyValues = true;
            internalValueResult.installation = this._installation;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._installation = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._installation = value.installation;
        }
    }
    get installation() {
        return this.getStringAttribute('installation');
    }
    set installation(value) {
        this._installation = value;
    }
    resetInstallation() {
        this._installation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get installationInput() {
        return this._installation;
    }
}
exports.GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryOutputReference = GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryOutputReference;
_x = JSII_RTTI_SYMBOL_1;
GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryOutputReference[_x] = { fqn: "@cdktf/provider-google.gkeHubFeature.GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryOutputReference", version: "14.13.1" };
function gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bundles: cdktf.listMapper(gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesToTerraform, true)(struct.bundles),
        template_library: gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryToTerraform(struct.templateLibrary),
    };
}
exports.gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentToTerraform = gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentToTerraform;
function gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        bundles: {
            value: cdktf.listMapperHcl(gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesToHclTerraform, true)(struct.bundles),
            isBlock: true,
            type: "set",
            storageClassType: "GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesList",
        },
        template_library: {
            value: gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryToHclTerraform(struct.templateLibrary),
            isBlock: true,
            type: "list",
            storageClassType: "GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentToHclTerraform = gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentToHclTerraform;
class GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // bundles - computed: false, optional: true, required: false
        this._bundles = new GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesList(this, "bundles", true);
        // template_library - computed: false, optional: true, required: false
        this._templateLibrary = new GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryOutputReference(this, "template_library");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bundles?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.bundles = this._bundles?.internalValue;
        }
        if (this._templateLibrary?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.templateLibrary = this._templateLibrary?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bundles.internalValue = undefined;
            this._templateLibrary.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bundles.internalValue = value.bundles;
            this._templateLibrary.internalValue = value.templateLibrary;
        }
    }
    get bundles() {
        return this._bundles;
    }
    putBundles(value) {
        this._bundles.internalValue = value;
    }
    resetBundles() {
        this._bundles.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bundlesInput() {
        return this._bundles.internalValue;
    }
    get templateLibrary() {
        return this._templateLibrary;
    }
    putTemplateLibrary(value) {
        this._templateLibrary.internalValue = value;
    }
    resetTemplateLibrary() {
        this._templateLibrary.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get templateLibraryInput() {
        return this._templateLibrary.internalValue;
    }
}
exports.GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentOutputReference = GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentOutputReference;
_y = JSII_RTTI_SYMBOL_1;
GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentOutputReference[_y] = { fqn: "@cdktf/provider-google.gkeHubFeature.GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentOutputReference", version: "14.13.1" };
function gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        audit_interval_seconds: cdktf.numberToTerraform(struct.auditIntervalSeconds),
        constraint_violation_limit: cdktf.numberToTerraform(struct.constraintViolationLimit),
        exemptable_namespaces: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.exemptableNamespaces),
        install_spec: cdktf.stringToTerraform(struct.installSpec),
        log_denies_enabled: cdktf.booleanToTerraform(struct.logDeniesEnabled),
        mutation_enabled: cdktf.booleanToTerraform(struct.mutationEnabled),
        referential_rules_enabled: cdktf.booleanToTerraform(struct.referentialRulesEnabled),
        deployment_configs: cdktf.listMapper(gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsToTerraform, true)(struct.deploymentConfigs),
        monitoring: gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigMonitoringToTerraform(struct.monitoring),
        policy_content: gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentToTerraform(struct.policyContent),
    };
}
exports.gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigToTerraform = gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigToTerraform;
function gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        audit_interval_seconds: {
            value: cdktf.numberToHclTerraform(struct.auditIntervalSeconds),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        constraint_violation_limit: {
            value: cdktf.numberToHclTerraform(struct.constraintViolationLimit),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        exemptable_namespaces: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.exemptableNamespaces),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        install_spec: {
            value: cdktf.stringToHclTerraform(struct.installSpec),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        log_denies_enabled: {
            value: cdktf.booleanToHclTerraform(struct.logDeniesEnabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        mutation_enabled: {
            value: cdktf.booleanToHclTerraform(struct.mutationEnabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        referential_rules_enabled: {
            value: cdktf.booleanToHclTerraform(struct.referentialRulesEnabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        deployment_configs: {
            value: cdktf.listMapperHcl(gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsToHclTerraform, true)(struct.deploymentConfigs),
            isBlock: true,
            type: "set",
            storageClassType: "GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsList",
        },
        monitoring: {
            value: gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigMonitoringToHclTerraform(struct.monitoring),
            isBlock: true,
            type: "list",
            storageClassType: "GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigMonitoringList",
        },
        policy_content: {
            value: gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentToHclTerraform(struct.policyContent),
            isBlock: true,
            type: "list",
            storageClassType: "GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigToHclTerraform = gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigToHclTerraform;
class GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // deployment_configs - computed: false, optional: true, required: false
        this._deploymentConfigs = new GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigsList(this, "deployment_configs", true);
        // monitoring - computed: false, optional: true, required: false
        this._monitoring = new GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigMonitoringOutputReference(this, "monitoring");
        // policy_content - computed: false, optional: true, required: false
        this._policyContent = new GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentOutputReference(this, "policy_content");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._auditIntervalSeconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.auditIntervalSeconds = this._auditIntervalSeconds;
        }
        if (this._constraintViolationLimit !== undefined) {
            hasAnyValues = true;
            internalValueResult.constraintViolationLimit = this._constraintViolationLimit;
        }
        if (this._exemptableNamespaces !== undefined) {
            hasAnyValues = true;
            internalValueResult.exemptableNamespaces = this._exemptableNamespaces;
        }
        if (this._installSpec !== undefined) {
            hasAnyValues = true;
            internalValueResult.installSpec = this._installSpec;
        }
        if (this._logDeniesEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.logDeniesEnabled = this._logDeniesEnabled;
        }
        if (this._mutationEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.mutationEnabled = this._mutationEnabled;
        }
        if (this._referentialRulesEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.referentialRulesEnabled = this._referentialRulesEnabled;
        }
        if (this._deploymentConfigs?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.deploymentConfigs = this._deploymentConfigs?.internalValue;
        }
        if (this._monitoring?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.monitoring = this._monitoring?.internalValue;
        }
        if (this._policyContent?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.policyContent = this._policyContent?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._auditIntervalSeconds = undefined;
            this._constraintViolationLimit = undefined;
            this._exemptableNamespaces = undefined;
            this._installSpec = undefined;
            this._logDeniesEnabled = undefined;
            this._mutationEnabled = undefined;
            this._referentialRulesEnabled = undefined;
            this._deploymentConfigs.internalValue = undefined;
            this._monitoring.internalValue = undefined;
            this._policyContent.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._auditIntervalSeconds = value.auditIntervalSeconds;
            this._constraintViolationLimit = value.constraintViolationLimit;
            this._exemptableNamespaces = value.exemptableNamespaces;
            this._installSpec = value.installSpec;
            this._logDeniesEnabled = value.logDeniesEnabled;
            this._mutationEnabled = value.mutationEnabled;
            this._referentialRulesEnabled = value.referentialRulesEnabled;
            this._deploymentConfigs.internalValue = value.deploymentConfigs;
            this._monitoring.internalValue = value.monitoring;
            this._policyContent.internalValue = value.policyContent;
        }
    }
    get auditIntervalSeconds() {
        return this.getNumberAttribute('audit_interval_seconds');
    }
    set auditIntervalSeconds(value) {
        this._auditIntervalSeconds = value;
    }
    resetAuditIntervalSeconds() {
        this._auditIntervalSeconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get auditIntervalSecondsInput() {
        return this._auditIntervalSeconds;
    }
    get constraintViolationLimit() {
        return this.getNumberAttribute('constraint_violation_limit');
    }
    set constraintViolationLimit(value) {
        this._constraintViolationLimit = value;
    }
    resetConstraintViolationLimit() {
        this._constraintViolationLimit = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get constraintViolationLimitInput() {
        return this._constraintViolationLimit;
    }
    get exemptableNamespaces() {
        return this.getListAttribute('exemptable_namespaces');
    }
    set exemptableNamespaces(value) {
        this._exemptableNamespaces = value;
    }
    resetExemptableNamespaces() {
        this._exemptableNamespaces = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get exemptableNamespacesInput() {
        return this._exemptableNamespaces;
    }
    get installSpec() {
        return this.getStringAttribute('install_spec');
    }
    set installSpec(value) {
        this._installSpec = value;
    }
    // Temporarily expose input value. Use with caution.
    get installSpecInput() {
        return this._installSpec;
    }
    get logDeniesEnabled() {
        return this.getBooleanAttribute('log_denies_enabled');
    }
    set logDeniesEnabled(value) {
        this._logDeniesEnabled = value;
    }
    resetLogDeniesEnabled() {
        this._logDeniesEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logDeniesEnabledInput() {
        return this._logDeniesEnabled;
    }
    get mutationEnabled() {
        return this.getBooleanAttribute('mutation_enabled');
    }
    set mutationEnabled(value) {
        this._mutationEnabled = value;
    }
    resetMutationEnabled() {
        this._mutationEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mutationEnabledInput() {
        return this._mutationEnabled;
    }
    get referentialRulesEnabled() {
        return this.getBooleanAttribute('referential_rules_enabled');
    }
    set referentialRulesEnabled(value) {
        this._referentialRulesEnabled = value;
    }
    resetReferentialRulesEnabled() {
        this._referentialRulesEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get referentialRulesEnabledInput() {
        return this._referentialRulesEnabled;
    }
    get deploymentConfigs() {
        return this._deploymentConfigs;
    }
    putDeploymentConfigs(value) {
        this._deploymentConfigs.internalValue = value;
    }
    resetDeploymentConfigs() {
        this._deploymentConfigs.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deploymentConfigsInput() {
        return this._deploymentConfigs.internalValue;
    }
    get monitoring() {
        return this._monitoring;
    }
    putMonitoring(value) {
        this._monitoring.internalValue = value;
    }
    resetMonitoring() {
        this._monitoring.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get monitoringInput() {
        return this._monitoring.internalValue;
    }
    get policyContent() {
        return this._policyContent;
    }
    putPolicyContent(value) {
        this._policyContent.internalValue = value;
    }
    resetPolicyContent() {
        this._policyContent.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get policyContentInput() {
        return this._policyContent.internalValue;
    }
}
exports.GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigOutputReference = GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigOutputReference;
_z = JSII_RTTI_SYMBOL_1;
GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigOutputReference[_z] = { fqn: "@cdktf/provider-google.gkeHubFeature.GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigOutputReference", version: "14.13.1" };
function gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        version: cdktf.stringToTerraform(struct.version),
        policy_controller_hub_config: gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigToTerraform(struct.policyControllerHubConfig),
    };
}
exports.gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerToTerraform = gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerToTerraform;
function gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        version: {
            value: cdktf.stringToHclTerraform(struct.version),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        policy_controller_hub_config: {
            value: gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigToHclTerraform(struct.policyControllerHubConfig),
            isBlock: true,
            type: "list",
            storageClassType: "GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerToHclTerraform = gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerToHclTerraform;
class GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // policy_controller_hub_config - computed: false, optional: false, required: true
        this._policyControllerHubConfig = new GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigOutputReference(this, "policy_controller_hub_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._version !== undefined) {
            hasAnyValues = true;
            internalValueResult.version = this._version;
        }
        if (this._policyControllerHubConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.policyControllerHubConfig = this._policyControllerHubConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._version = undefined;
            this._policyControllerHubConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._version = value.version;
            this._policyControllerHubConfig.internalValue = value.policyControllerHubConfig;
        }
    }
    get version() {
        return this.getStringAttribute('version');
    }
    set version(value) {
        this._version = value;
    }
    resetVersion() {
        this._version = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get versionInput() {
        return this._version;
    }
    get policyControllerHubConfig() {
        return this._policyControllerHubConfig;
    }
    putPolicyControllerHubConfig(value) {
        this._policyControllerHubConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get policyControllerHubConfigInput() {
        return this._policyControllerHubConfig.internalValue;
    }
}
exports.GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerOutputReference = GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerOutputReference[_0] = { fqn: "@cdktf/provider-google.gkeHubFeature.GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerOutputReference", version: "14.13.1" };
function gkeHubFeatureFleetDefaultMemberConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        configmanagement: gkeHubFeatureFleetDefaultMemberConfigConfigmanagementToTerraform(struct.configmanagement),
        mesh: gkeHubFeatureFleetDefaultMemberConfigMeshToTerraform(struct.mesh),
        policycontroller: gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerToTerraform(struct.policycontroller),
    };
}
exports.gkeHubFeatureFleetDefaultMemberConfigToTerraform = gkeHubFeatureFleetDefaultMemberConfigToTerraform;
function gkeHubFeatureFleetDefaultMemberConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        configmanagement: {
            value: gkeHubFeatureFleetDefaultMemberConfigConfigmanagementToHclTerraform(struct.configmanagement),
            isBlock: true,
            type: "list",
            storageClassType: "GkeHubFeatureFleetDefaultMemberConfigConfigmanagementList",
        },
        mesh: {
            value: gkeHubFeatureFleetDefaultMemberConfigMeshToHclTerraform(struct.mesh),
            isBlock: true,
            type: "list",
            storageClassType: "GkeHubFeatureFleetDefaultMemberConfigMeshList",
        },
        policycontroller: {
            value: gkeHubFeatureFleetDefaultMemberConfigPolicycontrollerToHclTerraform(struct.policycontroller),
            isBlock: true,
            type: "list",
            storageClassType: "GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureFleetDefaultMemberConfigToHclTerraform = gkeHubFeatureFleetDefaultMemberConfigToHclTerraform;
class GkeHubFeatureFleetDefaultMemberConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // configmanagement - computed: false, optional: true, required: false
        this._configmanagement = new GkeHubFeatureFleetDefaultMemberConfigConfigmanagementOutputReference(this, "configmanagement");
        // mesh - computed: false, optional: true, required: false
        this._mesh = new GkeHubFeatureFleetDefaultMemberConfigMeshOutputReference(this, "mesh");
        // policycontroller - computed: false, optional: true, required: false
        this._policycontroller = new GkeHubFeatureFleetDefaultMemberConfigPolicycontrollerOutputReference(this, "policycontroller");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._configmanagement?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.configmanagement = this._configmanagement?.internalValue;
        }
        if (this._mesh?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mesh = this._mesh?.internalValue;
        }
        if (this._policycontroller?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.policycontroller = this._policycontroller?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._configmanagement.internalValue = undefined;
            this._mesh.internalValue = undefined;
            this._policycontroller.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._configmanagement.internalValue = value.configmanagement;
            this._mesh.internalValue = value.mesh;
            this._policycontroller.internalValue = value.policycontroller;
        }
    }
    get configmanagement() {
        return this._configmanagement;
    }
    putConfigmanagement(value) {
        this._configmanagement.internalValue = value;
    }
    resetConfigmanagement() {
        this._configmanagement.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get configmanagementInput() {
        return this._configmanagement.internalValue;
    }
    get mesh() {
        return this._mesh;
    }
    putMesh(value) {
        this._mesh.internalValue = value;
    }
    resetMesh() {
        this._mesh.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get meshInput() {
        return this._mesh.internalValue;
    }
    get policycontroller() {
        return this._policycontroller;
    }
    putPolicycontroller(value) {
        this._policycontroller.internalValue = value;
    }
    resetPolicycontroller() {
        this._policycontroller.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get policycontrollerInput() {
        return this._policycontroller.internalValue;
    }
}
exports.GkeHubFeatureFleetDefaultMemberConfigOutputReference = GkeHubFeatureFleetDefaultMemberConfigOutputReference;
_1 = JSII_RTTI_SYMBOL_1;
GkeHubFeatureFleetDefaultMemberConfigOutputReference[_1] = { fqn: "@cdktf/provider-google.gkeHubFeature.GkeHubFeatureFleetDefaultMemberConfigOutputReference", version: "14.13.1" };
function gkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesPostConditionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        soaking: cdktf.stringToTerraform(struct.soaking),
    };
}
exports.gkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesPostConditionsToTerraform = gkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesPostConditionsToTerraform;
function gkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesPostConditionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        soaking: {
            value: cdktf.stringToHclTerraform(struct.soaking),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesPostConditionsToHclTerraform = gkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesPostConditionsToHclTerraform;
class GkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesPostConditionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._soaking !== undefined) {
            hasAnyValues = true;
            internalValueResult.soaking = this._soaking;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._soaking = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._soaking = value.soaking;
        }
    }
    get soaking() {
        return this.getStringAttribute('soaking');
    }
    set soaking(value) {
        this._soaking = value;
    }
    // Temporarily expose input value. Use with caution.
    get soakingInput() {
        return this._soaking;
    }
}
exports.GkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesPostConditionsOutputReference = GkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesPostConditionsOutputReference;
_2 = JSII_RTTI_SYMBOL_1;
GkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesPostConditionsOutputReference[_2] = { fqn: "@cdktf/provider-google.gkeHubFeature.GkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesPostConditionsOutputReference", version: "14.13.1" };
function gkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesUpgradeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        version: cdktf.stringToTerraform(struct.version),
    };
}
exports.gkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesUpgradeToTerraform = gkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesUpgradeToTerraform;
function gkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesUpgradeToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        version: {
            value: cdktf.stringToHclTerraform(struct.version),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesUpgradeToHclTerraform = gkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesUpgradeToHclTerraform;
class GkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesUpgradeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._version !== undefined) {
            hasAnyValues = true;
            internalValueResult.version = this._version;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._name = undefined;
            this._version = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._name = value.name;
            this._version = value.version;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get version() {
        return this.getStringAttribute('version');
    }
    set version(value) {
        this._version = value;
    }
    // Temporarily expose input value. Use with caution.
    get versionInput() {
        return this._version;
    }
}
exports.GkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesUpgradeOutputReference = GkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesUpgradeOutputReference;
_3 = JSII_RTTI_SYMBOL_1;
GkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesUpgradeOutputReference[_3] = { fqn: "@cdktf/provider-google.gkeHubFeature.GkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesUpgradeOutputReference", version: "14.13.1" };
function gkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        post_conditions: gkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesPostConditionsToTerraform(struct.postConditions),
        upgrade: gkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesUpgradeToTerraform(struct.upgrade),
    };
}
exports.gkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesToTerraform = gkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesToTerraform;
function gkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        post_conditions: {
            value: gkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesPostConditionsToHclTerraform(struct.postConditions),
            isBlock: true,
            type: "list",
            storageClassType: "GkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesPostConditionsList",
        },
        upgrade: {
            value: gkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesUpgradeToHclTerraform(struct.upgrade),
            isBlock: true,
            type: "list",
            storageClassType: "GkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesUpgradeList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesToHclTerraform = gkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesToHclTerraform;
class GkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // post_conditions - computed: false, optional: false, required: true
        this._postConditions = new GkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesPostConditionsOutputReference(this, "post_conditions");
        // upgrade - computed: false, optional: false, required: true
        this._upgrade = new GkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesUpgradeOutputReference(this, "upgrade");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._postConditions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.postConditions = this._postConditions?.internalValue;
        }
        if (this._upgrade?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.upgrade = this._upgrade?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._postConditions.internalValue = undefined;
            this._upgrade.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._postConditions.internalValue = value.postConditions;
            this._upgrade.internalValue = value.upgrade;
        }
    }
    get postConditions() {
        return this._postConditions;
    }
    putPostConditions(value) {
        this._postConditions.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get postConditionsInput() {
        return this._postConditions.internalValue;
    }
    get upgrade() {
        return this._upgrade;
    }
    putUpgrade(value) {
        this._upgrade.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get upgradeInput() {
        return this._upgrade.internalValue;
    }
}
exports.GkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesOutputReference = GkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesOutputReference;
_4 = JSII_RTTI_SYMBOL_1;
GkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesOutputReference[_4] = { fqn: "@cdktf/provider-google.gkeHubFeature.GkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesOutputReference", version: "14.13.1" };
class GkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new GkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.GkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesList = GkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesList;
_5 = JSII_RTTI_SYMBOL_1;
GkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesList[_5] = { fqn: "@cdktf/provider-google.gkeHubFeature.GkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesList", version: "14.13.1" };
function gkeHubFeatureSpecClusterupgradePostConditionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        soaking: cdktf.stringToTerraform(struct.soaking),
    };
}
exports.gkeHubFeatureSpecClusterupgradePostConditionsToTerraform = gkeHubFeatureSpecClusterupgradePostConditionsToTerraform;
function gkeHubFeatureSpecClusterupgradePostConditionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        soaking: {
            value: cdktf.stringToHclTerraform(struct.soaking),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureSpecClusterupgradePostConditionsToHclTerraform = gkeHubFeatureSpecClusterupgradePostConditionsToHclTerraform;
class GkeHubFeatureSpecClusterupgradePostConditionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._soaking !== undefined) {
            hasAnyValues = true;
            internalValueResult.soaking = this._soaking;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._soaking = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._soaking = value.soaking;
        }
    }
    get soaking() {
        return this.getStringAttribute('soaking');
    }
    set soaking(value) {
        this._soaking = value;
    }
    // Temporarily expose input value. Use with caution.
    get soakingInput() {
        return this._soaking;
    }
}
exports.GkeHubFeatureSpecClusterupgradePostConditionsOutputReference = GkeHubFeatureSpecClusterupgradePostConditionsOutputReference;
_6 = JSII_RTTI_SYMBOL_1;
GkeHubFeatureSpecClusterupgradePostConditionsOutputReference[_6] = { fqn: "@cdktf/provider-google.gkeHubFeature.GkeHubFeatureSpecClusterupgradePostConditionsOutputReference", version: "14.13.1" };
function gkeHubFeatureSpecClusterupgradeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        upstream_fleets: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.upstreamFleets),
        gke_upgrade_overrides: cdktf.listMapper(gkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesToTerraform, true)(struct.gkeUpgradeOverrides),
        post_conditions: gkeHubFeatureSpecClusterupgradePostConditionsToTerraform(struct.postConditions),
    };
}
exports.gkeHubFeatureSpecClusterupgradeToTerraform = gkeHubFeatureSpecClusterupgradeToTerraform;
function gkeHubFeatureSpecClusterupgradeToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        upstream_fleets: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.upstreamFleets),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        gke_upgrade_overrides: {
            value: cdktf.listMapperHcl(gkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesToHclTerraform, true)(struct.gkeUpgradeOverrides),
            isBlock: true,
            type: "list",
            storageClassType: "GkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesList",
        },
        post_conditions: {
            value: gkeHubFeatureSpecClusterupgradePostConditionsToHclTerraform(struct.postConditions),
            isBlock: true,
            type: "list",
            storageClassType: "GkeHubFeatureSpecClusterupgradePostConditionsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureSpecClusterupgradeToHclTerraform = gkeHubFeatureSpecClusterupgradeToHclTerraform;
class GkeHubFeatureSpecClusterupgradeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // gke_upgrade_overrides - computed: false, optional: true, required: false
        this._gkeUpgradeOverrides = new GkeHubFeatureSpecClusterupgradeGkeUpgradeOverridesList(this, "gke_upgrade_overrides", false);
        // post_conditions - computed: false, optional: true, required: false
        this._postConditions = new GkeHubFeatureSpecClusterupgradePostConditionsOutputReference(this, "post_conditions");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._upstreamFleets !== undefined) {
            hasAnyValues = true;
            internalValueResult.upstreamFleets = this._upstreamFleets;
        }
        if (this._gkeUpgradeOverrides?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.gkeUpgradeOverrides = this._gkeUpgradeOverrides?.internalValue;
        }
        if (this._postConditions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.postConditions = this._postConditions?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._upstreamFleets = undefined;
            this._gkeUpgradeOverrides.internalValue = undefined;
            this._postConditions.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._upstreamFleets = value.upstreamFleets;
            this._gkeUpgradeOverrides.internalValue = value.gkeUpgradeOverrides;
            this._postConditions.internalValue = value.postConditions;
        }
    }
    get upstreamFleets() {
        return this.getListAttribute('upstream_fleets');
    }
    set upstreamFleets(value) {
        this._upstreamFleets = value;
    }
    // Temporarily expose input value. Use with caution.
    get upstreamFleetsInput() {
        return this._upstreamFleets;
    }
    get gkeUpgradeOverrides() {
        return this._gkeUpgradeOverrides;
    }
    putGkeUpgradeOverrides(value) {
        this._gkeUpgradeOverrides.internalValue = value;
    }
    resetGkeUpgradeOverrides() {
        this._gkeUpgradeOverrides.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gkeUpgradeOverridesInput() {
        return this._gkeUpgradeOverrides.internalValue;
    }
    get postConditions() {
        return this._postConditions;
    }
    putPostConditions(value) {
        this._postConditions.internalValue = value;
    }
    resetPostConditions() {
        this._postConditions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get postConditionsInput() {
        return this._postConditions.internalValue;
    }
}
exports.GkeHubFeatureSpecClusterupgradeOutputReference = GkeHubFeatureSpecClusterupgradeOutputReference;
_7 = JSII_RTTI_SYMBOL_1;
GkeHubFeatureSpecClusterupgradeOutputReference[_7] = { fqn: "@cdktf/provider-google.gkeHubFeature.GkeHubFeatureSpecClusterupgradeOutputReference", version: "14.13.1" };
function gkeHubFeatureSpecFleetobservabilityLoggingConfigDefaultConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        mode: cdktf.stringToTerraform(struct.mode),
    };
}
exports.gkeHubFeatureSpecFleetobservabilityLoggingConfigDefaultConfigToTerraform = gkeHubFeatureSpecFleetobservabilityLoggingConfigDefaultConfigToTerraform;
function gkeHubFeatureSpecFleetobservabilityLoggingConfigDefaultConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        mode: {
            value: cdktf.stringToHclTerraform(struct.mode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureSpecFleetobservabilityLoggingConfigDefaultConfigToHclTerraform = gkeHubFeatureSpecFleetobservabilityLoggingConfigDefaultConfigToHclTerraform;
class GkeHubFeatureSpecFleetobservabilityLoggingConfigDefaultConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._mode !== undefined) {
            hasAnyValues = true;
            internalValueResult.mode = this._mode;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._mode = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._mode = value.mode;
        }
    }
    get mode() {
        return this.getStringAttribute('mode');
    }
    set mode(value) {
        this._mode = value;
    }
    resetMode() {
        this._mode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get modeInput() {
        return this._mode;
    }
}
exports.GkeHubFeatureSpecFleetobservabilityLoggingConfigDefaultConfigOutputReference = GkeHubFeatureSpecFleetobservabilityLoggingConfigDefaultConfigOutputReference;
_8 = JSII_RTTI_SYMBOL_1;
GkeHubFeatureSpecFleetobservabilityLoggingConfigDefaultConfigOutputReference[_8] = { fqn: "@cdktf/provider-google.gkeHubFeature.GkeHubFeatureSpecFleetobservabilityLoggingConfigDefaultConfigOutputReference", version: "14.13.1" };
function gkeHubFeatureSpecFleetobservabilityLoggingConfigFleetScopeLogsConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        mode: cdktf.stringToTerraform(struct.mode),
    };
}
exports.gkeHubFeatureSpecFleetobservabilityLoggingConfigFleetScopeLogsConfigToTerraform = gkeHubFeatureSpecFleetobservabilityLoggingConfigFleetScopeLogsConfigToTerraform;
function gkeHubFeatureSpecFleetobservabilityLoggingConfigFleetScopeLogsConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        mode: {
            value: cdktf.stringToHclTerraform(struct.mode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureSpecFleetobservabilityLoggingConfigFleetScopeLogsConfigToHclTerraform = gkeHubFeatureSpecFleetobservabilityLoggingConfigFleetScopeLogsConfigToHclTerraform;
class GkeHubFeatureSpecFleetobservabilityLoggingConfigFleetScopeLogsConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._mode !== undefined) {
            hasAnyValues = true;
            internalValueResult.mode = this._mode;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._mode = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._mode = value.mode;
        }
    }
    get mode() {
        return this.getStringAttribute('mode');
    }
    set mode(value) {
        this._mode = value;
    }
    resetMode() {
        this._mode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get modeInput() {
        return this._mode;
    }
}
exports.GkeHubFeatureSpecFleetobservabilityLoggingConfigFleetScopeLogsConfigOutputReference = GkeHubFeatureSpecFleetobservabilityLoggingConfigFleetScopeLogsConfigOutputReference;
_9 = JSII_RTTI_SYMBOL_1;
GkeHubFeatureSpecFleetobservabilityLoggingConfigFleetScopeLogsConfigOutputReference[_9] = { fqn: "@cdktf/provider-google.gkeHubFeature.GkeHubFeatureSpecFleetobservabilityLoggingConfigFleetScopeLogsConfigOutputReference", version: "14.13.1" };
function gkeHubFeatureSpecFleetobservabilityLoggingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        default_config: gkeHubFeatureSpecFleetobservabilityLoggingConfigDefaultConfigToTerraform(struct.defaultConfig),
        fleet_scope_logs_config: gkeHubFeatureSpecFleetobservabilityLoggingConfigFleetScopeLogsConfigToTerraform(struct.fleetScopeLogsConfig),
    };
}
exports.gkeHubFeatureSpecFleetobservabilityLoggingConfigToTerraform = gkeHubFeatureSpecFleetobservabilityLoggingConfigToTerraform;
function gkeHubFeatureSpecFleetobservabilityLoggingConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        default_config: {
            value: gkeHubFeatureSpecFleetobservabilityLoggingConfigDefaultConfigToHclTerraform(struct.defaultConfig),
            isBlock: true,
            type: "list",
            storageClassType: "GkeHubFeatureSpecFleetobservabilityLoggingConfigDefaultConfigList",
        },
        fleet_scope_logs_config: {
            value: gkeHubFeatureSpecFleetobservabilityLoggingConfigFleetScopeLogsConfigToHclTerraform(struct.fleetScopeLogsConfig),
            isBlock: true,
            type: "list",
            storageClassType: "GkeHubFeatureSpecFleetobservabilityLoggingConfigFleetScopeLogsConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureSpecFleetobservabilityLoggingConfigToHclTerraform = gkeHubFeatureSpecFleetobservabilityLoggingConfigToHclTerraform;
class GkeHubFeatureSpecFleetobservabilityLoggingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // default_config - computed: false, optional: true, required: false
        this._defaultConfig = new GkeHubFeatureSpecFleetobservabilityLoggingConfigDefaultConfigOutputReference(this, "default_config");
        // fleet_scope_logs_config - computed: false, optional: true, required: false
        this._fleetScopeLogsConfig = new GkeHubFeatureSpecFleetobservabilityLoggingConfigFleetScopeLogsConfigOutputReference(this, "fleet_scope_logs_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._defaultConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultConfig = this._defaultConfig?.internalValue;
        }
        if (this._fleetScopeLogsConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.fleetScopeLogsConfig = this._fleetScopeLogsConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._defaultConfig.internalValue = undefined;
            this._fleetScopeLogsConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._defaultConfig.internalValue = value.defaultConfig;
            this._fleetScopeLogsConfig.internalValue = value.fleetScopeLogsConfig;
        }
    }
    get defaultConfig() {
        return this._defaultConfig;
    }
    putDefaultConfig(value) {
        this._defaultConfig.internalValue = value;
    }
    resetDefaultConfig() {
        this._defaultConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultConfigInput() {
        return this._defaultConfig.internalValue;
    }
    get fleetScopeLogsConfig() {
        return this._fleetScopeLogsConfig;
    }
    putFleetScopeLogsConfig(value) {
        this._fleetScopeLogsConfig.internalValue = value;
    }
    resetFleetScopeLogsConfig() {
        this._fleetScopeLogsConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fleetScopeLogsConfigInput() {
        return this._fleetScopeLogsConfig.internalValue;
    }
}
exports.GkeHubFeatureSpecFleetobservabilityLoggingConfigOutputReference = GkeHubFeatureSpecFleetobservabilityLoggingConfigOutputReference;
_10 = JSII_RTTI_SYMBOL_1;
GkeHubFeatureSpecFleetobservabilityLoggingConfigOutputReference[_10] = { fqn: "@cdktf/provider-google.gkeHubFeature.GkeHubFeatureSpecFleetobservabilityLoggingConfigOutputReference", version: "14.13.1" };
function gkeHubFeatureSpecFleetobservabilityToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        logging_config: gkeHubFeatureSpecFleetobservabilityLoggingConfigToTerraform(struct.loggingConfig),
    };
}
exports.gkeHubFeatureSpecFleetobservabilityToTerraform = gkeHubFeatureSpecFleetobservabilityToTerraform;
function gkeHubFeatureSpecFleetobservabilityToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        logging_config: {
            value: gkeHubFeatureSpecFleetobservabilityLoggingConfigToHclTerraform(struct.loggingConfig),
            isBlock: true,
            type: "list",
            storageClassType: "GkeHubFeatureSpecFleetobservabilityLoggingConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureSpecFleetobservabilityToHclTerraform = gkeHubFeatureSpecFleetobservabilityToHclTerraform;
class GkeHubFeatureSpecFleetobservabilityOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // logging_config - computed: false, optional: true, required: false
        this._loggingConfig = new GkeHubFeatureSpecFleetobservabilityLoggingConfigOutputReference(this, "logging_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._loggingConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.loggingConfig = this._loggingConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._loggingConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._loggingConfig.internalValue = value.loggingConfig;
        }
    }
    get loggingConfig() {
        return this._loggingConfig;
    }
    putLoggingConfig(value) {
        this._loggingConfig.internalValue = value;
    }
    resetLoggingConfig() {
        this._loggingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loggingConfigInput() {
        return this._loggingConfig.internalValue;
    }
}
exports.GkeHubFeatureSpecFleetobservabilityOutputReference = GkeHubFeatureSpecFleetobservabilityOutputReference;
_11 = JSII_RTTI_SYMBOL_1;
GkeHubFeatureSpecFleetobservabilityOutputReference[_11] = { fqn: "@cdktf/provider-google.gkeHubFeature.GkeHubFeatureSpecFleetobservabilityOutputReference", version: "14.13.1" };
function gkeHubFeatureSpecMulticlusteringressToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        config_membership: cdktf.stringToTerraform(struct.configMembership),
    };
}
exports.gkeHubFeatureSpecMulticlusteringressToTerraform = gkeHubFeatureSpecMulticlusteringressToTerraform;
function gkeHubFeatureSpecMulticlusteringressToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        config_membership: {
            value: cdktf.stringToHclTerraform(struct.configMembership),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureSpecMulticlusteringressToHclTerraform = gkeHubFeatureSpecMulticlusteringressToHclTerraform;
class GkeHubFeatureSpecMulticlusteringressOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._configMembership !== undefined) {
            hasAnyValues = true;
            internalValueResult.configMembership = this._configMembership;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._configMembership = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._configMembership = value.configMembership;
        }
    }
    get configMembership() {
        return this.getStringAttribute('config_membership');
    }
    set configMembership(value) {
        this._configMembership = value;
    }
    // Temporarily expose input value. Use with caution.
    get configMembershipInput() {
        return this._configMembership;
    }
}
exports.GkeHubFeatureSpecMulticlusteringressOutputReference = GkeHubFeatureSpecMulticlusteringressOutputReference;
_12 = JSII_RTTI_SYMBOL_1;
GkeHubFeatureSpecMulticlusteringressOutputReference[_12] = { fqn: "@cdktf/provider-google.gkeHubFeature.GkeHubFeatureSpecMulticlusteringressOutputReference", version: "14.13.1" };
function gkeHubFeatureSpecToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        clusterupgrade: gkeHubFeatureSpecClusterupgradeToTerraform(struct.clusterupgrade),
        fleetobservability: gkeHubFeatureSpecFleetobservabilityToTerraform(struct.fleetobservability),
        multiclusteringress: gkeHubFeatureSpecMulticlusteringressToTerraform(struct.multiclusteringress),
    };
}
exports.gkeHubFeatureSpecToTerraform = gkeHubFeatureSpecToTerraform;
function gkeHubFeatureSpecToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        clusterupgrade: {
            value: gkeHubFeatureSpecClusterupgradeToHclTerraform(struct.clusterupgrade),
            isBlock: true,
            type: "list",
            storageClassType: "GkeHubFeatureSpecClusterupgradeList",
        },
        fleetobservability: {
            value: gkeHubFeatureSpecFleetobservabilityToHclTerraform(struct.fleetobservability),
            isBlock: true,
            type: "list",
            storageClassType: "GkeHubFeatureSpecFleetobservabilityList",
        },
        multiclusteringress: {
            value: gkeHubFeatureSpecMulticlusteringressToHclTerraform(struct.multiclusteringress),
            isBlock: true,
            type: "list",
            storageClassType: "GkeHubFeatureSpecMulticlusteringressList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureSpecToHclTerraform = gkeHubFeatureSpecToHclTerraform;
class GkeHubFeatureSpecOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // clusterupgrade - computed: false, optional: true, required: false
        this._clusterupgrade = new GkeHubFeatureSpecClusterupgradeOutputReference(this, "clusterupgrade");
        // fleetobservability - computed: false, optional: true, required: false
        this._fleetobservability = new GkeHubFeatureSpecFleetobservabilityOutputReference(this, "fleetobservability");
        // multiclusteringress - computed: false, optional: true, required: false
        this._multiclusteringress = new GkeHubFeatureSpecMulticlusteringressOutputReference(this, "multiclusteringress");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._clusterupgrade?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.clusterupgrade = this._clusterupgrade?.internalValue;
        }
        if (this._fleetobservability?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.fleetobservability = this._fleetobservability?.internalValue;
        }
        if (this._multiclusteringress?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.multiclusteringress = this._multiclusteringress?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._clusterupgrade.internalValue = undefined;
            this._fleetobservability.internalValue = undefined;
            this._multiclusteringress.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._clusterupgrade.internalValue = value.clusterupgrade;
            this._fleetobservability.internalValue = value.fleetobservability;
            this._multiclusteringress.internalValue = value.multiclusteringress;
        }
    }
    get clusterupgrade() {
        return this._clusterupgrade;
    }
    putClusterupgrade(value) {
        this._clusterupgrade.internalValue = value;
    }
    resetClusterupgrade() {
        this._clusterupgrade.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clusterupgradeInput() {
        return this._clusterupgrade.internalValue;
    }
    get fleetobservability() {
        return this._fleetobservability;
    }
    putFleetobservability(value) {
        this._fleetobservability.internalValue = value;
    }
    resetFleetobservability() {
        this._fleetobservability.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fleetobservabilityInput() {
        return this._fleetobservability.internalValue;
    }
    get multiclusteringress() {
        return this._multiclusteringress;
    }
    putMulticlusteringress(value) {
        this._multiclusteringress.internalValue = value;
    }
    resetMulticlusteringress() {
        this._multiclusteringress.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get multiclusteringressInput() {
        return this._multiclusteringress.internalValue;
    }
}
exports.GkeHubFeatureSpecOutputReference = GkeHubFeatureSpecOutputReference;
_13 = JSII_RTTI_SYMBOL_1;
GkeHubFeatureSpecOutputReference[_13] = { fqn: "@cdktf/provider-google.gkeHubFeature.GkeHubFeatureSpecOutputReference", version: "14.13.1" };
function gkeHubFeatureTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.gkeHubFeatureTimeoutsToTerraform = gkeHubFeatureTimeoutsToTerraform;
function gkeHubFeatureTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureTimeoutsToHclTerraform = gkeHubFeatureTimeoutsToHclTerraform;
class GkeHubFeatureTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.GkeHubFeatureTimeoutsOutputReference = GkeHubFeatureTimeoutsOutputReference;
_14 = JSII_RTTI_SYMBOL_1;
GkeHubFeatureTimeoutsOutputReference[_14] = { fqn: "@cdktf/provider-google.gkeHubFeature.GkeHubFeatureTimeoutsOutputReference", version: "14.13.1" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/gke_hub_feature google_gke_hub_feature}
*/
class GkeHubFeature extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a GkeHubFeature resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the GkeHubFeature to import
    * @param importFromId The id of the existing GkeHubFeature that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/gke_hub_feature#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the GkeHubFeature to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_gke_hub_feature", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/gke_hub_feature google_gke_hub_feature} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options GkeHubFeatureConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_gke_hub_feature',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // effective_labels - computed: true, optional: false, required: false
        this._effectiveLabels = new cdktf.StringMap(this, "effective_labels");
        // resource_state - computed: true, optional: false, required: false
        this._resourceState = new GkeHubFeatureResourceStateList(this, "resource_state", false);
        // state - computed: true, optional: false, required: false
        this._state = new GkeHubFeatureStateList(this, "state", false);
        // terraform_labels - computed: true, optional: false, required: false
        this._terraformLabels = new cdktf.StringMap(this, "terraform_labels");
        // fleet_default_member_config - computed: false, optional: true, required: false
        this._fleetDefaultMemberConfig = new GkeHubFeatureFleetDefaultMemberConfigOutputReference(this, "fleet_default_member_config");
        // spec - computed: false, optional: true, required: false
        this._spec = new GkeHubFeatureSpecOutputReference(this, "spec");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new GkeHubFeatureTimeoutsOutputReference(this, "timeouts");
        this._id = config.id;
        this._labels = config.labels;
        this._location = config.location;
        this._name = config.name;
        this._project = config.project;
        this._fleetDefaultMemberConfig.internalValue = config.fleetDefaultMemberConfig;
        this._spec.internalValue = config.spec;
        this._timeouts.internalValue = config.timeouts;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // create_time - computed: true, optional: false, required: false
    get createTime() {
        return this.getStringAttribute('create_time');
    }
    // delete_time - computed: true, optional: false, required: false
    get deleteTime() {
        return this.getStringAttribute('delete_time');
    }
    get effectiveLabels() {
        return this._effectiveLabels;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get resourceState() {
        return this._resourceState;
    }
    get state() {
        return this._state;
    }
    get terraformLabels() {
        return this._terraformLabels;
    }
    // update_time - computed: true, optional: false, required: false
    get updateTime() {
        return this.getStringAttribute('update_time');
    }
    get fleetDefaultMemberConfig() {
        return this._fleetDefaultMemberConfig;
    }
    putFleetDefaultMemberConfig(value) {
        this._fleetDefaultMemberConfig.internalValue = value;
    }
    resetFleetDefaultMemberConfig() {
        this._fleetDefaultMemberConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fleetDefaultMemberConfigInput() {
        return this._fleetDefaultMemberConfig.internalValue;
    }
    get spec() {
        return this._spec;
    }
    putSpec(value) {
        this._spec.internalValue = value;
    }
    resetSpec() {
        this._spec.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get specInput() {
        return this._spec.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
            labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._labels),
            location: cdktf.stringToTerraform(this._location),
            name: cdktf.stringToTerraform(this._name),
            project: cdktf.stringToTerraform(this._project),
            fleet_default_member_config: gkeHubFeatureFleetDefaultMemberConfigToTerraform(this._fleetDefaultMemberConfig.internalValue),
            spec: gkeHubFeatureSpecToTerraform(this._spec.internalValue),
            timeouts: gkeHubFeatureTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            labels: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._labels),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            location: {
                value: cdktf.stringToHclTerraform(this._location),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            name: {
                value: cdktf.stringToHclTerraform(this._name),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            project: {
                value: cdktf.stringToHclTerraform(this._project),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            fleet_default_member_config: {
                value: gkeHubFeatureFleetDefaultMemberConfigToHclTerraform(this._fleetDefaultMemberConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "GkeHubFeatureFleetDefaultMemberConfigList",
            },
            spec: {
                value: gkeHubFeatureSpecToHclTerraform(this._spec.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "GkeHubFeatureSpecList",
            },
            timeouts: {
                value: gkeHubFeatureTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "GkeHubFeatureTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.GkeHubFeature = GkeHubFeature;
_15 = JSII_RTTI_SYMBOL_1;
GkeHubFeature[_15] = { fqn: "@cdktf/provider-google.gkeHubFeature.GkeHubFeature", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
GkeHubFeature.tfResourceType = "google_gke_hub_feature";
//# sourceMappingURL=data:application/json;base64,