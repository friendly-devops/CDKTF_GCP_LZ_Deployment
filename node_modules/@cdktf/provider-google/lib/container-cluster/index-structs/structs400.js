"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0;
Object.defineProperty(exports, "__esModule", { value: true });
exports.containerClusterResourceUsageExportConfigToTerraform = exports.ContainerClusterResourceUsageExportConfigBigqueryDestinationOutputReference = exports.containerClusterResourceUsageExportConfigBigqueryDestinationToHclTerraform = exports.containerClusterResourceUsageExportConfigBigqueryDestinationToTerraform = exports.ContainerClusterReleaseChannelOutputReference = exports.containerClusterReleaseChannelToHclTerraform = exports.containerClusterReleaseChannelToTerraform = exports.ContainerClusterPrivateClusterConfigOutputReference = exports.containerClusterPrivateClusterConfigToHclTerraform = exports.containerClusterPrivateClusterConfigToTerraform = exports.ContainerClusterPrivateClusterConfigMasterGlobalAccessConfigOutputReference = exports.containerClusterPrivateClusterConfigMasterGlobalAccessConfigToHclTerraform = exports.containerClusterPrivateClusterConfigMasterGlobalAccessConfigToTerraform = exports.ContainerClusterNotificationConfigOutputReference = exports.containerClusterNotificationConfigToHclTerraform = exports.containerClusterNotificationConfigToTerraform = exports.ContainerClusterNotificationConfigPubsubOutputReference = exports.containerClusterNotificationConfigPubsubToHclTerraform = exports.containerClusterNotificationConfigPubsubToTerraform = exports.ContainerClusterNotificationConfigPubsubFilterOutputReference = exports.containerClusterNotificationConfigPubsubFilterToHclTerraform = exports.containerClusterNotificationConfigPubsubFilterToTerraform = exports.ContainerClusterNodePoolDefaultsOutputReference = exports.containerClusterNodePoolDefaultsToHclTerraform = exports.containerClusterNodePoolDefaultsToTerraform = exports.ContainerClusterNodePoolDefaultsNodeConfigDefaultsOutputReference = exports.containerClusterNodePoolDefaultsNodeConfigDefaultsToHclTerraform = exports.containerClusterNodePoolDefaultsNodeConfigDefaultsToTerraform = exports.ContainerClusterNodePoolDefaultsNodeConfigDefaultsGcfsConfigOutputReference = exports.containerClusterNodePoolDefaultsNodeConfigDefaultsGcfsConfigToHclTerraform = exports.containerClusterNodePoolDefaultsNodeConfigDefaultsGcfsConfigToTerraform = exports.ContainerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigOutputReference = exports.containerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigToHclTerraform = exports.containerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigToTerraform = exports.ContainerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigOutputReference = exports.containerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigToHclTerraform = exports.containerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigToTerraform = exports.ContainerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigCertificateAuthorityDomainConfigList = exports.ContainerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigCertificateAuthorityDomainConfigOutputReference = exports.containerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigCertificateAuthorityDomainConfigToHclTerraform = exports.containerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigCertificateAuthorityDomainConfigToTerraform = exports.ContainerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigCertificateAuthorityDomainConfigGcpSecretManagerCertificateConfigOutputReference = exports.containerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigCertificateAuthorityDomainConfigGcpSecretManagerCertificateConfigToHclTerraform = exports.containerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigCertificateAuthorityDomainConfigGcpSecretManagerCertificateConfigToTerraform = exports.ContainerClusterNodePoolAutoConfigOutputReference = exports.containerClusterNodePoolAutoConfigToHclTerraform = exports.containerClusterNodePoolAutoConfigToTerraform = exports.ContainerClusterNodePoolAutoConfigNodeKubeletConfigOutputReference = exports.containerClusterNodePoolAutoConfigNodeKubeletConfigToHclTerraform = exports.containerClusterNodePoolAutoConfigNodeKubeletConfigToTerraform = void 0;
exports.ContainerClusterWorkloadIdentityConfigOutputReference = exports.containerClusterWorkloadIdentityConfigToHclTerraform = exports.containerClusterWorkloadIdentityConfigToTerraform = exports.ContainerClusterVerticalPodAutoscalingOutputReference = exports.containerClusterVerticalPodAutoscalingToHclTerraform = exports.containerClusterVerticalPodAutoscalingToTerraform = exports.ContainerClusterUserManagedKeysConfigOutputReference = exports.containerClusterUserManagedKeysConfigToHclTerraform = exports.containerClusterUserManagedKeysConfigToTerraform = exports.ContainerClusterTimeoutsOutputReference = exports.containerClusterTimeoutsToHclTerraform = exports.containerClusterTimeoutsToTerraform = exports.ContainerClusterServiceExternalIpsConfigOutputReference = exports.containerClusterServiceExternalIpsConfigToHclTerraform = exports.containerClusterServiceExternalIpsConfigToTerraform = exports.ContainerClusterSecurityPostureConfigOutputReference = exports.containerClusterSecurityPostureConfigToHclTerraform = exports.containerClusterSecurityPostureConfigToTerraform = exports.ContainerClusterSecretManagerConfigOutputReference = exports.containerClusterSecretManagerConfigToHclTerraform = exports.containerClusterSecretManagerConfigToTerraform = exports.ContainerClusterResourceUsageExportConfigOutputReference = exports.containerClusterResourceUsageExportConfigToHclTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: MPL-2.0
 */
const cdktf = require("cdktf");
const structs0_1 = require("./structs0");
function containerClusterNodePoolAutoConfigNodeKubeletConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        insecure_kubelet_readonly_port_enabled: cdktf.stringToTerraform(struct.insecureKubeletReadonlyPortEnabled),
    };
}
exports.containerClusterNodePoolAutoConfigNodeKubeletConfigToTerraform = containerClusterNodePoolAutoConfigNodeKubeletConfigToTerraform;
function containerClusterNodePoolAutoConfigNodeKubeletConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        insecure_kubelet_readonly_port_enabled: {
            value: cdktf.stringToHclTerraform(struct.insecureKubeletReadonlyPortEnabled),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.containerClusterNodePoolAutoConfigNodeKubeletConfigToHclTerraform = containerClusterNodePoolAutoConfigNodeKubeletConfigToHclTerraform;
class ContainerClusterNodePoolAutoConfigNodeKubeletConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._insecureKubeletReadonlyPortEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.insecureKubeletReadonlyPortEnabled = this._insecureKubeletReadonlyPortEnabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._insecureKubeletReadonlyPortEnabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._insecureKubeletReadonlyPortEnabled = value.insecureKubeletReadonlyPortEnabled;
        }
    }
    get insecureKubeletReadonlyPortEnabled() {
        return this.getStringAttribute('insecure_kubelet_readonly_port_enabled');
    }
    set insecureKubeletReadonlyPortEnabled(value) {
        this._insecureKubeletReadonlyPortEnabled = value;
    }
    resetInsecureKubeletReadonlyPortEnabled() {
        this._insecureKubeletReadonlyPortEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get insecureKubeletReadonlyPortEnabledInput() {
        return this._insecureKubeletReadonlyPortEnabled;
    }
}
exports.ContainerClusterNodePoolAutoConfigNodeKubeletConfigOutputReference = ContainerClusterNodePoolAutoConfigNodeKubeletConfigOutputReference;
_a = JSII_RTTI_SYMBOL_1;
ContainerClusterNodePoolAutoConfigNodeKubeletConfigOutputReference[_a] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNodePoolAutoConfigNodeKubeletConfigOutputReference", version: "14.13.1" };
function containerClusterNodePoolAutoConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        resource_manager_tags: cdktf.hashMapper(cdktf.stringToTerraform)(struct.resourceManagerTags),
        linux_node_config: (0, structs0_1.containerClusterNodePoolAutoConfigLinuxNodeConfigToTerraform)(struct.linuxNodeConfig),
        network_tags: (0, structs0_1.containerClusterNodePoolAutoConfigNetworkTagsToTerraform)(struct.networkTags),
        node_kubelet_config: containerClusterNodePoolAutoConfigNodeKubeletConfigToTerraform(struct.nodeKubeletConfig),
    };
}
exports.containerClusterNodePoolAutoConfigToTerraform = containerClusterNodePoolAutoConfigToTerraform;
function containerClusterNodePoolAutoConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        resource_manager_tags: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.resourceManagerTags),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        linux_node_config: {
            value: (0, structs0_1.containerClusterNodePoolAutoConfigLinuxNodeConfigToHclTerraform)(struct.linuxNodeConfig),
            isBlock: true,
            type: "list",
            storageClassType: "ContainerClusterNodePoolAutoConfigLinuxNodeConfigList",
        },
        network_tags: {
            value: (0, structs0_1.containerClusterNodePoolAutoConfigNetworkTagsToHclTerraform)(struct.networkTags),
            isBlock: true,
            type: "list",
            storageClassType: "ContainerClusterNodePoolAutoConfigNetworkTagsList",
        },
        node_kubelet_config: {
            value: containerClusterNodePoolAutoConfigNodeKubeletConfigToHclTerraform(struct.nodeKubeletConfig),
            isBlock: true,
            type: "list",
            storageClassType: "ContainerClusterNodePoolAutoConfigNodeKubeletConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.containerClusterNodePoolAutoConfigToHclTerraform = containerClusterNodePoolAutoConfigToHclTerraform;
class ContainerClusterNodePoolAutoConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // linux_node_config - computed: false, optional: true, required: false
        this._linuxNodeConfig = new structs0_1.ContainerClusterNodePoolAutoConfigLinuxNodeConfigOutputReference(this, "linux_node_config");
        // network_tags - computed: false, optional: true, required: false
        this._networkTags = new structs0_1.ContainerClusterNodePoolAutoConfigNetworkTagsOutputReference(this, "network_tags");
        // node_kubelet_config - computed: false, optional: true, required: false
        this._nodeKubeletConfig = new ContainerClusterNodePoolAutoConfigNodeKubeletConfigOutputReference(this, "node_kubelet_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._resourceManagerTags !== undefined) {
            hasAnyValues = true;
            internalValueResult.resourceManagerTags = this._resourceManagerTags;
        }
        if (this._linuxNodeConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.linuxNodeConfig = this._linuxNodeConfig?.internalValue;
        }
        if (this._networkTags?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.networkTags = this._networkTags?.internalValue;
        }
        if (this._nodeKubeletConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.nodeKubeletConfig = this._nodeKubeletConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._resourceManagerTags = undefined;
            this._linuxNodeConfig.internalValue = undefined;
            this._networkTags.internalValue = undefined;
            this._nodeKubeletConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._resourceManagerTags = value.resourceManagerTags;
            this._linuxNodeConfig.internalValue = value.linuxNodeConfig;
            this._networkTags.internalValue = value.networkTags;
            this._nodeKubeletConfig.internalValue = value.nodeKubeletConfig;
        }
    }
    get resourceManagerTags() {
        return this.getStringMapAttribute('resource_manager_tags');
    }
    set resourceManagerTags(value) {
        this._resourceManagerTags = value;
    }
    resetResourceManagerTags() {
        this._resourceManagerTags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceManagerTagsInput() {
        return this._resourceManagerTags;
    }
    get linuxNodeConfig() {
        return this._linuxNodeConfig;
    }
    putLinuxNodeConfig(value) {
        this._linuxNodeConfig.internalValue = value;
    }
    resetLinuxNodeConfig() {
        this._linuxNodeConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get linuxNodeConfigInput() {
        return this._linuxNodeConfig.internalValue;
    }
    get networkTags() {
        return this._networkTags;
    }
    putNetworkTags(value) {
        this._networkTags.internalValue = value;
    }
    resetNetworkTags() {
        this._networkTags.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkTagsInput() {
        return this._networkTags.internalValue;
    }
    get nodeKubeletConfig() {
        return this._nodeKubeletConfig;
    }
    putNodeKubeletConfig(value) {
        this._nodeKubeletConfig.internalValue = value;
    }
    resetNodeKubeletConfig() {
        this._nodeKubeletConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nodeKubeletConfigInput() {
        return this._nodeKubeletConfig.internalValue;
    }
}
exports.ContainerClusterNodePoolAutoConfigOutputReference = ContainerClusterNodePoolAutoConfigOutputReference;
_b = JSII_RTTI_SYMBOL_1;
ContainerClusterNodePoolAutoConfigOutputReference[_b] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNodePoolAutoConfigOutputReference", version: "14.13.1" };
function containerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigCertificateAuthorityDomainConfigGcpSecretManagerCertificateConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        secret_uri: cdktf.stringToTerraform(struct.secretUri),
    };
}
exports.containerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigCertificateAuthorityDomainConfigGcpSecretManagerCertificateConfigToTerraform = containerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigCertificateAuthorityDomainConfigGcpSecretManagerCertificateConfigToTerraform;
function containerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigCertificateAuthorityDomainConfigGcpSecretManagerCertificateConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        secret_uri: {
            value: cdktf.stringToHclTerraform(struct.secretUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.containerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigCertificateAuthorityDomainConfigGcpSecretManagerCertificateConfigToHclTerraform = containerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigCertificateAuthorityDomainConfigGcpSecretManagerCertificateConfigToHclTerraform;
class ContainerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigCertificateAuthorityDomainConfigGcpSecretManagerCertificateConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._secretUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.secretUri = this._secretUri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._secretUri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._secretUri = value.secretUri;
        }
    }
    get secretUri() {
        return this.getStringAttribute('secret_uri');
    }
    set secretUri(value) {
        this._secretUri = value;
    }
    // Temporarily expose input value. Use with caution.
    get secretUriInput() {
        return this._secretUri;
    }
}
exports.ContainerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigCertificateAuthorityDomainConfigGcpSecretManagerCertificateConfigOutputReference = ContainerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigCertificateAuthorityDomainConfigGcpSecretManagerCertificateConfigOutputReference;
_c = JSII_RTTI_SYMBOL_1;
ContainerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigCertificateAuthorityDomainConfigGcpSecretManagerCertificateConfigOutputReference[_c] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigCertificateAuthorityDomainConfigGcpSecretManagerCertificateConfigOutputReference", version: "14.13.1" };
function containerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigCertificateAuthorityDomainConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        fqdns: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.fqdns),
        gcp_secret_manager_certificate_config: containerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigCertificateAuthorityDomainConfigGcpSecretManagerCertificateConfigToTerraform(struct.gcpSecretManagerCertificateConfig),
    };
}
exports.containerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigCertificateAuthorityDomainConfigToTerraform = containerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigCertificateAuthorityDomainConfigToTerraform;
function containerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigCertificateAuthorityDomainConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        fqdns: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.fqdns),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        gcp_secret_manager_certificate_config: {
            value: containerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigCertificateAuthorityDomainConfigGcpSecretManagerCertificateConfigToHclTerraform(struct.gcpSecretManagerCertificateConfig),
            isBlock: true,
            type: "list",
            storageClassType: "ContainerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigCertificateAuthorityDomainConfigGcpSecretManagerCertificateConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.containerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigCertificateAuthorityDomainConfigToHclTerraform = containerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigCertificateAuthorityDomainConfigToHclTerraform;
class ContainerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigCertificateAuthorityDomainConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // gcp_secret_manager_certificate_config - computed: false, optional: false, required: true
        this._gcpSecretManagerCertificateConfig = new ContainerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigCertificateAuthorityDomainConfigGcpSecretManagerCertificateConfigOutputReference(this, "gcp_secret_manager_certificate_config");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._fqdns !== undefined) {
            hasAnyValues = true;
            internalValueResult.fqdns = this._fqdns;
        }
        if (this._gcpSecretManagerCertificateConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.gcpSecretManagerCertificateConfig = this._gcpSecretManagerCertificateConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._fqdns = undefined;
            this._gcpSecretManagerCertificateConfig.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._fqdns = value.fqdns;
            this._gcpSecretManagerCertificateConfig.internalValue = value.gcpSecretManagerCertificateConfig;
        }
    }
    get fqdns() {
        return this.getListAttribute('fqdns');
    }
    set fqdns(value) {
        this._fqdns = value;
    }
    // Temporarily expose input value. Use with caution.
    get fqdnsInput() {
        return this._fqdns;
    }
    get gcpSecretManagerCertificateConfig() {
        return this._gcpSecretManagerCertificateConfig;
    }
    putGcpSecretManagerCertificateConfig(value) {
        this._gcpSecretManagerCertificateConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get gcpSecretManagerCertificateConfigInput() {
        return this._gcpSecretManagerCertificateConfig.internalValue;
    }
}
exports.ContainerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigCertificateAuthorityDomainConfigOutputReference = ContainerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigCertificateAuthorityDomainConfigOutputReference;
_d = JSII_RTTI_SYMBOL_1;
ContainerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigCertificateAuthorityDomainConfigOutputReference[_d] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigCertificateAuthorityDomainConfigOutputReference", version: "14.13.1" };
class ContainerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigCertificateAuthorityDomainConfigList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ContainerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigCertificateAuthorityDomainConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ContainerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigCertificateAuthorityDomainConfigList = ContainerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigCertificateAuthorityDomainConfigList;
_e = JSII_RTTI_SYMBOL_1;
ContainerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigCertificateAuthorityDomainConfigList[_e] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigCertificateAuthorityDomainConfigList", version: "14.13.1" };
function containerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        certificate_authority_domain_config: cdktf.listMapper(containerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigCertificateAuthorityDomainConfigToTerraform, true)(struct.certificateAuthorityDomainConfig),
    };
}
exports.containerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigToTerraform = containerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigToTerraform;
function containerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        certificate_authority_domain_config: {
            value: cdktf.listMapperHcl(containerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigCertificateAuthorityDomainConfigToHclTerraform, true)(struct.certificateAuthorityDomainConfig),
            isBlock: true,
            type: "list",
            storageClassType: "ContainerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigCertificateAuthorityDomainConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.containerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigToHclTerraform = containerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigToHclTerraform;
class ContainerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // certificate_authority_domain_config - computed: false, optional: true, required: false
        this._certificateAuthorityDomainConfig = new ContainerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigCertificateAuthorityDomainConfigList(this, "certificate_authority_domain_config", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._certificateAuthorityDomainConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.certificateAuthorityDomainConfig = this._certificateAuthorityDomainConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._certificateAuthorityDomainConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._certificateAuthorityDomainConfig.internalValue = value.certificateAuthorityDomainConfig;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get certificateAuthorityDomainConfig() {
        return this._certificateAuthorityDomainConfig;
    }
    putCertificateAuthorityDomainConfig(value) {
        this._certificateAuthorityDomainConfig.internalValue = value;
    }
    resetCertificateAuthorityDomainConfig() {
        this._certificateAuthorityDomainConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get certificateAuthorityDomainConfigInput() {
        return this._certificateAuthorityDomainConfig.internalValue;
    }
}
exports.ContainerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigOutputReference = ContainerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigOutputReference;
_f = JSII_RTTI_SYMBOL_1;
ContainerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigOutputReference[_f] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigOutputReference", version: "14.13.1" };
function containerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        private_registry_access_config: containerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigToTerraform(struct.privateRegistryAccessConfig),
    };
}
exports.containerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigToTerraform = containerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigToTerraform;
function containerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        private_registry_access_config: {
            value: containerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigToHclTerraform(struct.privateRegistryAccessConfig),
            isBlock: true,
            type: "list",
            storageClassType: "ContainerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.containerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigToHclTerraform = containerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigToHclTerraform;
class ContainerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // private_registry_access_config - computed: false, optional: true, required: false
        this._privateRegistryAccessConfig = new ContainerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigPrivateRegistryAccessConfigOutputReference(this, "private_registry_access_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._privateRegistryAccessConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.privateRegistryAccessConfig = this._privateRegistryAccessConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._privateRegistryAccessConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._privateRegistryAccessConfig.internalValue = value.privateRegistryAccessConfig;
        }
    }
    get privateRegistryAccessConfig() {
        return this._privateRegistryAccessConfig;
    }
    putPrivateRegistryAccessConfig(value) {
        this._privateRegistryAccessConfig.internalValue = value;
    }
    resetPrivateRegistryAccessConfig() {
        this._privateRegistryAccessConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get privateRegistryAccessConfigInput() {
        return this._privateRegistryAccessConfig.internalValue;
    }
}
exports.ContainerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigOutputReference = ContainerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigOutputReference;
_g = JSII_RTTI_SYMBOL_1;
ContainerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigOutputReference[_g] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigOutputReference", version: "14.13.1" };
function containerClusterNodePoolDefaultsNodeConfigDefaultsGcfsConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.containerClusterNodePoolDefaultsNodeConfigDefaultsGcfsConfigToTerraform = containerClusterNodePoolDefaultsNodeConfigDefaultsGcfsConfigToTerraform;
function containerClusterNodePoolDefaultsNodeConfigDefaultsGcfsConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.containerClusterNodePoolDefaultsNodeConfigDefaultsGcfsConfigToHclTerraform = containerClusterNodePoolDefaultsNodeConfigDefaultsGcfsConfigToHclTerraform;
class ContainerClusterNodePoolDefaultsNodeConfigDefaultsGcfsConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
}
exports.ContainerClusterNodePoolDefaultsNodeConfigDefaultsGcfsConfigOutputReference = ContainerClusterNodePoolDefaultsNodeConfigDefaultsGcfsConfigOutputReference;
_h = JSII_RTTI_SYMBOL_1;
ContainerClusterNodePoolDefaultsNodeConfigDefaultsGcfsConfigOutputReference[_h] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNodePoolDefaultsNodeConfigDefaultsGcfsConfigOutputReference", version: "14.13.1" };
function containerClusterNodePoolDefaultsNodeConfigDefaultsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        insecure_kubelet_readonly_port_enabled: cdktf.stringToTerraform(struct.insecureKubeletReadonlyPortEnabled),
        logging_variant: cdktf.stringToTerraform(struct.loggingVariant),
        containerd_config: containerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigToTerraform(struct.containerdConfig),
        gcfs_config: containerClusterNodePoolDefaultsNodeConfigDefaultsGcfsConfigToTerraform(struct.gcfsConfig),
    };
}
exports.containerClusterNodePoolDefaultsNodeConfigDefaultsToTerraform = containerClusterNodePoolDefaultsNodeConfigDefaultsToTerraform;
function containerClusterNodePoolDefaultsNodeConfigDefaultsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        insecure_kubelet_readonly_port_enabled: {
            value: cdktf.stringToHclTerraform(struct.insecureKubeletReadonlyPortEnabled),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        logging_variant: {
            value: cdktf.stringToHclTerraform(struct.loggingVariant),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        containerd_config: {
            value: containerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigToHclTerraform(struct.containerdConfig),
            isBlock: true,
            type: "list",
            storageClassType: "ContainerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigList",
        },
        gcfs_config: {
            value: containerClusterNodePoolDefaultsNodeConfigDefaultsGcfsConfigToHclTerraform(struct.gcfsConfig),
            isBlock: true,
            type: "list",
            storageClassType: "ContainerClusterNodePoolDefaultsNodeConfigDefaultsGcfsConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.containerClusterNodePoolDefaultsNodeConfigDefaultsToHclTerraform = containerClusterNodePoolDefaultsNodeConfigDefaultsToHclTerraform;
class ContainerClusterNodePoolDefaultsNodeConfigDefaultsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // containerd_config - computed: false, optional: true, required: false
        this._containerdConfig = new ContainerClusterNodePoolDefaultsNodeConfigDefaultsContainerdConfigOutputReference(this, "containerd_config");
        // gcfs_config - computed: false, optional: true, required: false
        this._gcfsConfig = new ContainerClusterNodePoolDefaultsNodeConfigDefaultsGcfsConfigOutputReference(this, "gcfs_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._insecureKubeletReadonlyPortEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.insecureKubeletReadonlyPortEnabled = this._insecureKubeletReadonlyPortEnabled;
        }
        if (this._loggingVariant !== undefined) {
            hasAnyValues = true;
            internalValueResult.loggingVariant = this._loggingVariant;
        }
        if (this._containerdConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.containerdConfig = this._containerdConfig?.internalValue;
        }
        if (this._gcfsConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.gcfsConfig = this._gcfsConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._insecureKubeletReadonlyPortEnabled = undefined;
            this._loggingVariant = undefined;
            this._containerdConfig.internalValue = undefined;
            this._gcfsConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._insecureKubeletReadonlyPortEnabled = value.insecureKubeletReadonlyPortEnabled;
            this._loggingVariant = value.loggingVariant;
            this._containerdConfig.internalValue = value.containerdConfig;
            this._gcfsConfig.internalValue = value.gcfsConfig;
        }
    }
    get insecureKubeletReadonlyPortEnabled() {
        return this.getStringAttribute('insecure_kubelet_readonly_port_enabled');
    }
    set insecureKubeletReadonlyPortEnabled(value) {
        this._insecureKubeletReadonlyPortEnabled = value;
    }
    resetInsecureKubeletReadonlyPortEnabled() {
        this._insecureKubeletReadonlyPortEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get insecureKubeletReadonlyPortEnabledInput() {
        return this._insecureKubeletReadonlyPortEnabled;
    }
    get loggingVariant() {
        return this.getStringAttribute('logging_variant');
    }
    set loggingVariant(value) {
        this._loggingVariant = value;
    }
    resetLoggingVariant() {
        this._loggingVariant = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loggingVariantInput() {
        return this._loggingVariant;
    }
    get containerdConfig() {
        return this._containerdConfig;
    }
    putContainerdConfig(value) {
        this._containerdConfig.internalValue = value;
    }
    resetContainerdConfig() {
        this._containerdConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get containerdConfigInput() {
        return this._containerdConfig.internalValue;
    }
    get gcfsConfig() {
        return this._gcfsConfig;
    }
    putGcfsConfig(value) {
        this._gcfsConfig.internalValue = value;
    }
    resetGcfsConfig() {
        this._gcfsConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gcfsConfigInput() {
        return this._gcfsConfig.internalValue;
    }
}
exports.ContainerClusterNodePoolDefaultsNodeConfigDefaultsOutputReference = ContainerClusterNodePoolDefaultsNodeConfigDefaultsOutputReference;
_j = JSII_RTTI_SYMBOL_1;
ContainerClusterNodePoolDefaultsNodeConfigDefaultsOutputReference[_j] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNodePoolDefaultsNodeConfigDefaultsOutputReference", version: "14.13.1" };
function containerClusterNodePoolDefaultsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        node_config_defaults: containerClusterNodePoolDefaultsNodeConfigDefaultsToTerraform(struct.nodeConfigDefaults),
    };
}
exports.containerClusterNodePoolDefaultsToTerraform = containerClusterNodePoolDefaultsToTerraform;
function containerClusterNodePoolDefaultsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        node_config_defaults: {
            value: containerClusterNodePoolDefaultsNodeConfigDefaultsToHclTerraform(struct.nodeConfigDefaults),
            isBlock: true,
            type: "list",
            storageClassType: "ContainerClusterNodePoolDefaultsNodeConfigDefaultsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.containerClusterNodePoolDefaultsToHclTerraform = containerClusterNodePoolDefaultsToHclTerraform;
class ContainerClusterNodePoolDefaultsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // node_config_defaults - computed: false, optional: true, required: false
        this._nodeConfigDefaults = new ContainerClusterNodePoolDefaultsNodeConfigDefaultsOutputReference(this, "node_config_defaults");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._nodeConfigDefaults?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.nodeConfigDefaults = this._nodeConfigDefaults?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._nodeConfigDefaults.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._nodeConfigDefaults.internalValue = value.nodeConfigDefaults;
        }
    }
    get nodeConfigDefaults() {
        return this._nodeConfigDefaults;
    }
    putNodeConfigDefaults(value) {
        this._nodeConfigDefaults.internalValue = value;
    }
    resetNodeConfigDefaults() {
        this._nodeConfigDefaults.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nodeConfigDefaultsInput() {
        return this._nodeConfigDefaults.internalValue;
    }
}
exports.ContainerClusterNodePoolDefaultsOutputReference = ContainerClusterNodePoolDefaultsOutputReference;
_k = JSII_RTTI_SYMBOL_1;
ContainerClusterNodePoolDefaultsOutputReference[_k] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNodePoolDefaultsOutputReference", version: "14.13.1" };
function containerClusterNotificationConfigPubsubFilterToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        event_type: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.eventType),
    };
}
exports.containerClusterNotificationConfigPubsubFilterToTerraform = containerClusterNotificationConfigPubsubFilterToTerraform;
function containerClusterNotificationConfigPubsubFilterToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        event_type: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.eventType),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.containerClusterNotificationConfigPubsubFilterToHclTerraform = containerClusterNotificationConfigPubsubFilterToHclTerraform;
class ContainerClusterNotificationConfigPubsubFilterOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._eventType !== undefined) {
            hasAnyValues = true;
            internalValueResult.eventType = this._eventType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._eventType = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._eventType = value.eventType;
        }
    }
    get eventType() {
        return this.getListAttribute('event_type');
    }
    set eventType(value) {
        this._eventType = value;
    }
    // Temporarily expose input value. Use with caution.
    get eventTypeInput() {
        return this._eventType;
    }
}
exports.ContainerClusterNotificationConfigPubsubFilterOutputReference = ContainerClusterNotificationConfigPubsubFilterOutputReference;
_l = JSII_RTTI_SYMBOL_1;
ContainerClusterNotificationConfigPubsubFilterOutputReference[_l] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNotificationConfigPubsubFilterOutputReference", version: "14.13.1" };
function containerClusterNotificationConfigPubsubToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        topic: cdktf.stringToTerraform(struct.topic),
        filter: containerClusterNotificationConfigPubsubFilterToTerraform(struct.filter),
    };
}
exports.containerClusterNotificationConfigPubsubToTerraform = containerClusterNotificationConfigPubsubToTerraform;
function containerClusterNotificationConfigPubsubToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        topic: {
            value: cdktf.stringToHclTerraform(struct.topic),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        filter: {
            value: containerClusterNotificationConfigPubsubFilterToHclTerraform(struct.filter),
            isBlock: true,
            type: "list",
            storageClassType: "ContainerClusterNotificationConfigPubsubFilterList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.containerClusterNotificationConfigPubsubToHclTerraform = containerClusterNotificationConfigPubsubToHclTerraform;
class ContainerClusterNotificationConfigPubsubOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // filter - computed: false, optional: true, required: false
        this._filter = new ContainerClusterNotificationConfigPubsubFilterOutputReference(this, "filter");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._topic !== undefined) {
            hasAnyValues = true;
            internalValueResult.topic = this._topic;
        }
        if (this._filter?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.filter = this._filter?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._topic = undefined;
            this._filter.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._topic = value.topic;
            this._filter.internalValue = value.filter;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get topic() {
        return this.getStringAttribute('topic');
    }
    set topic(value) {
        this._topic = value;
    }
    resetTopic() {
        this._topic = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get topicInput() {
        return this._topic;
    }
    get filter() {
        return this._filter;
    }
    putFilter(value) {
        this._filter.internalValue = value;
    }
    resetFilter() {
        this._filter.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get filterInput() {
        return this._filter.internalValue;
    }
}
exports.ContainerClusterNotificationConfigPubsubOutputReference = ContainerClusterNotificationConfigPubsubOutputReference;
_m = JSII_RTTI_SYMBOL_1;
ContainerClusterNotificationConfigPubsubOutputReference[_m] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNotificationConfigPubsubOutputReference", version: "14.13.1" };
function containerClusterNotificationConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        pubsub: containerClusterNotificationConfigPubsubToTerraform(struct.pubsub),
    };
}
exports.containerClusterNotificationConfigToTerraform = containerClusterNotificationConfigToTerraform;
function containerClusterNotificationConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        pubsub: {
            value: containerClusterNotificationConfigPubsubToHclTerraform(struct.pubsub),
            isBlock: true,
            type: "list",
            storageClassType: "ContainerClusterNotificationConfigPubsubList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.containerClusterNotificationConfigToHclTerraform = containerClusterNotificationConfigToHclTerraform;
class ContainerClusterNotificationConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // pubsub - computed: false, optional: false, required: true
        this._pubsub = new ContainerClusterNotificationConfigPubsubOutputReference(this, "pubsub");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._pubsub?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.pubsub = this._pubsub?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._pubsub.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._pubsub.internalValue = value.pubsub;
        }
    }
    get pubsub() {
        return this._pubsub;
    }
    putPubsub(value) {
        this._pubsub.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get pubsubInput() {
        return this._pubsub.internalValue;
    }
}
exports.ContainerClusterNotificationConfigOutputReference = ContainerClusterNotificationConfigOutputReference;
_o = JSII_RTTI_SYMBOL_1;
ContainerClusterNotificationConfigOutputReference[_o] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterNotificationConfigOutputReference", version: "14.13.1" };
function containerClusterPrivateClusterConfigMasterGlobalAccessConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.containerClusterPrivateClusterConfigMasterGlobalAccessConfigToTerraform = containerClusterPrivateClusterConfigMasterGlobalAccessConfigToTerraform;
function containerClusterPrivateClusterConfigMasterGlobalAccessConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.containerClusterPrivateClusterConfigMasterGlobalAccessConfigToHclTerraform = containerClusterPrivateClusterConfigMasterGlobalAccessConfigToHclTerraform;
class ContainerClusterPrivateClusterConfigMasterGlobalAccessConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
}
exports.ContainerClusterPrivateClusterConfigMasterGlobalAccessConfigOutputReference = ContainerClusterPrivateClusterConfigMasterGlobalAccessConfigOutputReference;
_p = JSII_RTTI_SYMBOL_1;
ContainerClusterPrivateClusterConfigMasterGlobalAccessConfigOutputReference[_p] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterPrivateClusterConfigMasterGlobalAccessConfigOutputReference", version: "14.13.1" };
function containerClusterPrivateClusterConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enable_private_endpoint: cdktf.booleanToTerraform(struct.enablePrivateEndpoint),
        enable_private_nodes: cdktf.booleanToTerraform(struct.enablePrivateNodes),
        master_ipv4_cidr_block: cdktf.stringToTerraform(struct.masterIpv4CidrBlock),
        private_endpoint_subnetwork: cdktf.stringToTerraform(struct.privateEndpointSubnetwork),
        master_global_access_config: containerClusterPrivateClusterConfigMasterGlobalAccessConfigToTerraform(struct.masterGlobalAccessConfig),
    };
}
exports.containerClusterPrivateClusterConfigToTerraform = containerClusterPrivateClusterConfigToTerraform;
function containerClusterPrivateClusterConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enable_private_endpoint: {
            value: cdktf.booleanToHclTerraform(struct.enablePrivateEndpoint),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        enable_private_nodes: {
            value: cdktf.booleanToHclTerraform(struct.enablePrivateNodes),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        master_ipv4_cidr_block: {
            value: cdktf.stringToHclTerraform(struct.masterIpv4CidrBlock),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        private_endpoint_subnetwork: {
            value: cdktf.stringToHclTerraform(struct.privateEndpointSubnetwork),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        master_global_access_config: {
            value: containerClusterPrivateClusterConfigMasterGlobalAccessConfigToHclTerraform(struct.masterGlobalAccessConfig),
            isBlock: true,
            type: "list",
            storageClassType: "ContainerClusterPrivateClusterConfigMasterGlobalAccessConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.containerClusterPrivateClusterConfigToHclTerraform = containerClusterPrivateClusterConfigToHclTerraform;
class ContainerClusterPrivateClusterConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // master_global_access_config - computed: false, optional: true, required: false
        this._masterGlobalAccessConfig = new ContainerClusterPrivateClusterConfigMasterGlobalAccessConfigOutputReference(this, "master_global_access_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enablePrivateEndpoint !== undefined) {
            hasAnyValues = true;
            internalValueResult.enablePrivateEndpoint = this._enablePrivateEndpoint;
        }
        if (this._enablePrivateNodes !== undefined) {
            hasAnyValues = true;
            internalValueResult.enablePrivateNodes = this._enablePrivateNodes;
        }
        if (this._masterIpv4CidrBlock !== undefined) {
            hasAnyValues = true;
            internalValueResult.masterIpv4CidrBlock = this._masterIpv4CidrBlock;
        }
        if (this._privateEndpointSubnetwork !== undefined) {
            hasAnyValues = true;
            internalValueResult.privateEndpointSubnetwork = this._privateEndpointSubnetwork;
        }
        if (this._masterGlobalAccessConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.masterGlobalAccessConfig = this._masterGlobalAccessConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enablePrivateEndpoint = undefined;
            this._enablePrivateNodes = undefined;
            this._masterIpv4CidrBlock = undefined;
            this._privateEndpointSubnetwork = undefined;
            this._masterGlobalAccessConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enablePrivateEndpoint = value.enablePrivateEndpoint;
            this._enablePrivateNodes = value.enablePrivateNodes;
            this._masterIpv4CidrBlock = value.masterIpv4CidrBlock;
            this._privateEndpointSubnetwork = value.privateEndpointSubnetwork;
            this._masterGlobalAccessConfig.internalValue = value.masterGlobalAccessConfig;
        }
    }
    get enablePrivateEndpoint() {
        return this.getBooleanAttribute('enable_private_endpoint');
    }
    set enablePrivateEndpoint(value) {
        this._enablePrivateEndpoint = value;
    }
    resetEnablePrivateEndpoint() {
        this._enablePrivateEndpoint = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enablePrivateEndpointInput() {
        return this._enablePrivateEndpoint;
    }
    get enablePrivateNodes() {
        return this.getBooleanAttribute('enable_private_nodes');
    }
    set enablePrivateNodes(value) {
        this._enablePrivateNodes = value;
    }
    resetEnablePrivateNodes() {
        this._enablePrivateNodes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enablePrivateNodesInput() {
        return this._enablePrivateNodes;
    }
    get masterIpv4CidrBlock() {
        return this.getStringAttribute('master_ipv4_cidr_block');
    }
    set masterIpv4CidrBlock(value) {
        this._masterIpv4CidrBlock = value;
    }
    resetMasterIpv4CidrBlock() {
        this._masterIpv4CidrBlock = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get masterIpv4CidrBlockInput() {
        return this._masterIpv4CidrBlock;
    }
    // peering_name - computed: true, optional: false, required: false
    get peeringName() {
        return this.getStringAttribute('peering_name');
    }
    // private_endpoint - computed: true, optional: false, required: false
    get privateEndpoint() {
        return this.getStringAttribute('private_endpoint');
    }
    get privateEndpointSubnetwork() {
        return this.getStringAttribute('private_endpoint_subnetwork');
    }
    set privateEndpointSubnetwork(value) {
        this._privateEndpointSubnetwork = value;
    }
    resetPrivateEndpointSubnetwork() {
        this._privateEndpointSubnetwork = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get privateEndpointSubnetworkInput() {
        return this._privateEndpointSubnetwork;
    }
    // public_endpoint - computed: true, optional: false, required: false
    get publicEndpoint() {
        return this.getStringAttribute('public_endpoint');
    }
    get masterGlobalAccessConfig() {
        return this._masterGlobalAccessConfig;
    }
    putMasterGlobalAccessConfig(value) {
        this._masterGlobalAccessConfig.internalValue = value;
    }
    resetMasterGlobalAccessConfig() {
        this._masterGlobalAccessConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get masterGlobalAccessConfigInput() {
        return this._masterGlobalAccessConfig.internalValue;
    }
}
exports.ContainerClusterPrivateClusterConfigOutputReference = ContainerClusterPrivateClusterConfigOutputReference;
_q = JSII_RTTI_SYMBOL_1;
ContainerClusterPrivateClusterConfigOutputReference[_q] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterPrivateClusterConfigOutputReference", version: "14.13.1" };
function containerClusterReleaseChannelToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        channel: cdktf.stringToTerraform(struct.channel),
    };
}
exports.containerClusterReleaseChannelToTerraform = containerClusterReleaseChannelToTerraform;
function containerClusterReleaseChannelToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        channel: {
            value: cdktf.stringToHclTerraform(struct.channel),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.containerClusterReleaseChannelToHclTerraform = containerClusterReleaseChannelToHclTerraform;
class ContainerClusterReleaseChannelOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._channel !== undefined) {
            hasAnyValues = true;
            internalValueResult.channel = this._channel;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._channel = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._channel = value.channel;
        }
    }
    get channel() {
        return this.getStringAttribute('channel');
    }
    set channel(value) {
        this._channel = value;
    }
    // Temporarily expose input value. Use with caution.
    get channelInput() {
        return this._channel;
    }
}
exports.ContainerClusterReleaseChannelOutputReference = ContainerClusterReleaseChannelOutputReference;
_r = JSII_RTTI_SYMBOL_1;
ContainerClusterReleaseChannelOutputReference[_r] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterReleaseChannelOutputReference", version: "14.13.1" };
function containerClusterResourceUsageExportConfigBigqueryDestinationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        dataset_id: cdktf.stringToTerraform(struct.datasetId),
    };
}
exports.containerClusterResourceUsageExportConfigBigqueryDestinationToTerraform = containerClusterResourceUsageExportConfigBigqueryDestinationToTerraform;
function containerClusterResourceUsageExportConfigBigqueryDestinationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        dataset_id: {
            value: cdktf.stringToHclTerraform(struct.datasetId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.containerClusterResourceUsageExportConfigBigqueryDestinationToHclTerraform = containerClusterResourceUsageExportConfigBigqueryDestinationToHclTerraform;
class ContainerClusterResourceUsageExportConfigBigqueryDestinationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._datasetId !== undefined) {
            hasAnyValues = true;
            internalValueResult.datasetId = this._datasetId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._datasetId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._datasetId = value.datasetId;
        }
    }
    get datasetId() {
        return this.getStringAttribute('dataset_id');
    }
    set datasetId(value) {
        this._datasetId = value;
    }
    // Temporarily expose input value. Use with caution.
    get datasetIdInput() {
        return this._datasetId;
    }
}
exports.ContainerClusterResourceUsageExportConfigBigqueryDestinationOutputReference = ContainerClusterResourceUsageExportConfigBigqueryDestinationOutputReference;
_s = JSII_RTTI_SYMBOL_1;
ContainerClusterResourceUsageExportConfigBigqueryDestinationOutputReference[_s] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterResourceUsageExportConfigBigqueryDestinationOutputReference", version: "14.13.1" };
function containerClusterResourceUsageExportConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enable_network_egress_metering: cdktf.booleanToTerraform(struct.enableNetworkEgressMetering),
        enable_resource_consumption_metering: cdktf.booleanToTerraform(struct.enableResourceConsumptionMetering),
        bigquery_destination: containerClusterResourceUsageExportConfigBigqueryDestinationToTerraform(struct.bigqueryDestination),
    };
}
exports.containerClusterResourceUsageExportConfigToTerraform = containerClusterResourceUsageExportConfigToTerraform;
function containerClusterResourceUsageExportConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enable_network_egress_metering: {
            value: cdktf.booleanToHclTerraform(struct.enableNetworkEgressMetering),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        enable_resource_consumption_metering: {
            value: cdktf.booleanToHclTerraform(struct.enableResourceConsumptionMetering),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        bigquery_destination: {
            value: containerClusterResourceUsageExportConfigBigqueryDestinationToHclTerraform(struct.bigqueryDestination),
            isBlock: true,
            type: "list",
            storageClassType: "ContainerClusterResourceUsageExportConfigBigqueryDestinationList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.containerClusterResourceUsageExportConfigToHclTerraform = containerClusterResourceUsageExportConfigToHclTerraform;
class ContainerClusterResourceUsageExportConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // bigquery_destination - computed: false, optional: false, required: true
        this._bigqueryDestination = new ContainerClusterResourceUsageExportConfigBigqueryDestinationOutputReference(this, "bigquery_destination");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enableNetworkEgressMetering !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableNetworkEgressMetering = this._enableNetworkEgressMetering;
        }
        if (this._enableResourceConsumptionMetering !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableResourceConsumptionMetering = this._enableResourceConsumptionMetering;
        }
        if (this._bigqueryDestination?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.bigqueryDestination = this._bigqueryDestination?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enableNetworkEgressMetering = undefined;
            this._enableResourceConsumptionMetering = undefined;
            this._bigqueryDestination.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enableNetworkEgressMetering = value.enableNetworkEgressMetering;
            this._enableResourceConsumptionMetering = value.enableResourceConsumptionMetering;
            this._bigqueryDestination.internalValue = value.bigqueryDestination;
        }
    }
    get enableNetworkEgressMetering() {
        return this.getBooleanAttribute('enable_network_egress_metering');
    }
    set enableNetworkEgressMetering(value) {
        this._enableNetworkEgressMetering = value;
    }
    resetEnableNetworkEgressMetering() {
        this._enableNetworkEgressMetering = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableNetworkEgressMeteringInput() {
        return this._enableNetworkEgressMetering;
    }
    get enableResourceConsumptionMetering() {
        return this.getBooleanAttribute('enable_resource_consumption_metering');
    }
    set enableResourceConsumptionMetering(value) {
        this._enableResourceConsumptionMetering = value;
    }
    resetEnableResourceConsumptionMetering() {
        this._enableResourceConsumptionMetering = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableResourceConsumptionMeteringInput() {
        return this._enableResourceConsumptionMetering;
    }
    get bigqueryDestination() {
        return this._bigqueryDestination;
    }
    putBigqueryDestination(value) {
        this._bigqueryDestination.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get bigqueryDestinationInput() {
        return this._bigqueryDestination.internalValue;
    }
}
exports.ContainerClusterResourceUsageExportConfigOutputReference = ContainerClusterResourceUsageExportConfigOutputReference;
_t = JSII_RTTI_SYMBOL_1;
ContainerClusterResourceUsageExportConfigOutputReference[_t] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterResourceUsageExportConfigOutputReference", version: "14.13.1" };
function containerClusterSecretManagerConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.containerClusterSecretManagerConfigToTerraform = containerClusterSecretManagerConfigToTerraform;
function containerClusterSecretManagerConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.containerClusterSecretManagerConfigToHclTerraform = containerClusterSecretManagerConfigToHclTerraform;
class ContainerClusterSecretManagerConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
}
exports.ContainerClusterSecretManagerConfigOutputReference = ContainerClusterSecretManagerConfigOutputReference;
_u = JSII_RTTI_SYMBOL_1;
ContainerClusterSecretManagerConfigOutputReference[_u] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterSecretManagerConfigOutputReference", version: "14.13.1" };
function containerClusterSecurityPostureConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        mode: cdktf.stringToTerraform(struct.mode),
        vulnerability_mode: cdktf.stringToTerraform(struct.vulnerabilityMode),
    };
}
exports.containerClusterSecurityPostureConfigToTerraform = containerClusterSecurityPostureConfigToTerraform;
function containerClusterSecurityPostureConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        mode: {
            value: cdktf.stringToHclTerraform(struct.mode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        vulnerability_mode: {
            value: cdktf.stringToHclTerraform(struct.vulnerabilityMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.containerClusterSecurityPostureConfigToHclTerraform = containerClusterSecurityPostureConfigToHclTerraform;
class ContainerClusterSecurityPostureConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._mode !== undefined) {
            hasAnyValues = true;
            internalValueResult.mode = this._mode;
        }
        if (this._vulnerabilityMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.vulnerabilityMode = this._vulnerabilityMode;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._mode = undefined;
            this._vulnerabilityMode = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._mode = value.mode;
            this._vulnerabilityMode = value.vulnerabilityMode;
        }
    }
    get mode() {
        return this.getStringAttribute('mode');
    }
    set mode(value) {
        this._mode = value;
    }
    resetMode() {
        this._mode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get modeInput() {
        return this._mode;
    }
    get vulnerabilityMode() {
        return this.getStringAttribute('vulnerability_mode');
    }
    set vulnerabilityMode(value) {
        this._vulnerabilityMode = value;
    }
    resetVulnerabilityMode() {
        this._vulnerabilityMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vulnerabilityModeInput() {
        return this._vulnerabilityMode;
    }
}
exports.ContainerClusterSecurityPostureConfigOutputReference = ContainerClusterSecurityPostureConfigOutputReference;
_v = JSII_RTTI_SYMBOL_1;
ContainerClusterSecurityPostureConfigOutputReference[_v] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterSecurityPostureConfigOutputReference", version: "14.13.1" };
function containerClusterServiceExternalIpsConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.containerClusterServiceExternalIpsConfigToTerraform = containerClusterServiceExternalIpsConfigToTerraform;
function containerClusterServiceExternalIpsConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.containerClusterServiceExternalIpsConfigToHclTerraform = containerClusterServiceExternalIpsConfigToHclTerraform;
class ContainerClusterServiceExternalIpsConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
}
exports.ContainerClusterServiceExternalIpsConfigOutputReference = ContainerClusterServiceExternalIpsConfigOutputReference;
_w = JSII_RTTI_SYMBOL_1;
ContainerClusterServiceExternalIpsConfigOutputReference[_w] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterServiceExternalIpsConfigOutputReference", version: "14.13.1" };
function containerClusterTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        read: cdktf.stringToTerraform(struct.read),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.containerClusterTimeoutsToTerraform = containerClusterTimeoutsToTerraform;
function containerClusterTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        read: {
            value: cdktf.stringToHclTerraform(struct.read),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.containerClusterTimeoutsToHclTerraform = containerClusterTimeoutsToHclTerraform;
class ContainerClusterTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._read !== undefined) {
            hasAnyValues = true;
            internalValueResult.read = this._read;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._read = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._read = value.read;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get read() {
        return this.getStringAttribute('read');
    }
    set read(value) {
        this._read = value;
    }
    resetRead() {
        this._read = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get readInput() {
        return this._read;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.ContainerClusterTimeoutsOutputReference = ContainerClusterTimeoutsOutputReference;
_x = JSII_RTTI_SYMBOL_1;
ContainerClusterTimeoutsOutputReference[_x] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterTimeoutsOutputReference", version: "14.13.1" };
function containerClusterUserManagedKeysConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        aggregation_ca: cdktf.stringToTerraform(struct.aggregationCa),
        cluster_ca: cdktf.stringToTerraform(struct.clusterCa),
        control_plane_disk_encryption_key: cdktf.stringToTerraform(struct.controlPlaneDiskEncryptionKey),
        etcd_api_ca: cdktf.stringToTerraform(struct.etcdApiCa),
        etcd_peer_ca: cdktf.stringToTerraform(struct.etcdPeerCa),
        gkeops_etcd_backup_encryption_key: cdktf.stringToTerraform(struct.gkeopsEtcdBackupEncryptionKey),
        service_account_signing_keys: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.serviceAccountSigningKeys),
        service_account_verification_keys: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.serviceAccountVerificationKeys),
    };
}
exports.containerClusterUserManagedKeysConfigToTerraform = containerClusterUserManagedKeysConfigToTerraform;
function containerClusterUserManagedKeysConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        aggregation_ca: {
            value: cdktf.stringToHclTerraform(struct.aggregationCa),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cluster_ca: {
            value: cdktf.stringToHclTerraform(struct.clusterCa),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        control_plane_disk_encryption_key: {
            value: cdktf.stringToHclTerraform(struct.controlPlaneDiskEncryptionKey),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        etcd_api_ca: {
            value: cdktf.stringToHclTerraform(struct.etcdApiCa),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        etcd_peer_ca: {
            value: cdktf.stringToHclTerraform(struct.etcdPeerCa),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        gkeops_etcd_backup_encryption_key: {
            value: cdktf.stringToHclTerraform(struct.gkeopsEtcdBackupEncryptionKey),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        service_account_signing_keys: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.serviceAccountSigningKeys),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        service_account_verification_keys: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.serviceAccountVerificationKeys),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.containerClusterUserManagedKeysConfigToHclTerraform = containerClusterUserManagedKeysConfigToHclTerraform;
class ContainerClusterUserManagedKeysConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._aggregationCa !== undefined) {
            hasAnyValues = true;
            internalValueResult.aggregationCa = this._aggregationCa;
        }
        if (this._clusterCa !== undefined) {
            hasAnyValues = true;
            internalValueResult.clusterCa = this._clusterCa;
        }
        if (this._controlPlaneDiskEncryptionKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.controlPlaneDiskEncryptionKey = this._controlPlaneDiskEncryptionKey;
        }
        if (this._etcdApiCa !== undefined) {
            hasAnyValues = true;
            internalValueResult.etcdApiCa = this._etcdApiCa;
        }
        if (this._etcdPeerCa !== undefined) {
            hasAnyValues = true;
            internalValueResult.etcdPeerCa = this._etcdPeerCa;
        }
        if (this._gkeopsEtcdBackupEncryptionKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.gkeopsEtcdBackupEncryptionKey = this._gkeopsEtcdBackupEncryptionKey;
        }
        if (this._serviceAccountSigningKeys !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceAccountSigningKeys = this._serviceAccountSigningKeys;
        }
        if (this._serviceAccountVerificationKeys !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceAccountVerificationKeys = this._serviceAccountVerificationKeys;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._aggregationCa = undefined;
            this._clusterCa = undefined;
            this._controlPlaneDiskEncryptionKey = undefined;
            this._etcdApiCa = undefined;
            this._etcdPeerCa = undefined;
            this._gkeopsEtcdBackupEncryptionKey = undefined;
            this._serviceAccountSigningKeys = undefined;
            this._serviceAccountVerificationKeys = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._aggregationCa = value.aggregationCa;
            this._clusterCa = value.clusterCa;
            this._controlPlaneDiskEncryptionKey = value.controlPlaneDiskEncryptionKey;
            this._etcdApiCa = value.etcdApiCa;
            this._etcdPeerCa = value.etcdPeerCa;
            this._gkeopsEtcdBackupEncryptionKey = value.gkeopsEtcdBackupEncryptionKey;
            this._serviceAccountSigningKeys = value.serviceAccountSigningKeys;
            this._serviceAccountVerificationKeys = value.serviceAccountVerificationKeys;
        }
    }
    get aggregationCa() {
        return this.getStringAttribute('aggregation_ca');
    }
    set aggregationCa(value) {
        this._aggregationCa = value;
    }
    resetAggregationCa() {
        this._aggregationCa = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get aggregationCaInput() {
        return this._aggregationCa;
    }
    get clusterCa() {
        return this.getStringAttribute('cluster_ca');
    }
    set clusterCa(value) {
        this._clusterCa = value;
    }
    resetClusterCa() {
        this._clusterCa = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clusterCaInput() {
        return this._clusterCa;
    }
    get controlPlaneDiskEncryptionKey() {
        return this.getStringAttribute('control_plane_disk_encryption_key');
    }
    set controlPlaneDiskEncryptionKey(value) {
        this._controlPlaneDiskEncryptionKey = value;
    }
    resetControlPlaneDiskEncryptionKey() {
        this._controlPlaneDiskEncryptionKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get controlPlaneDiskEncryptionKeyInput() {
        return this._controlPlaneDiskEncryptionKey;
    }
    get etcdApiCa() {
        return this.getStringAttribute('etcd_api_ca');
    }
    set etcdApiCa(value) {
        this._etcdApiCa = value;
    }
    resetEtcdApiCa() {
        this._etcdApiCa = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get etcdApiCaInput() {
        return this._etcdApiCa;
    }
    get etcdPeerCa() {
        return this.getStringAttribute('etcd_peer_ca');
    }
    set etcdPeerCa(value) {
        this._etcdPeerCa = value;
    }
    resetEtcdPeerCa() {
        this._etcdPeerCa = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get etcdPeerCaInput() {
        return this._etcdPeerCa;
    }
    get gkeopsEtcdBackupEncryptionKey() {
        return this.getStringAttribute('gkeops_etcd_backup_encryption_key');
    }
    set gkeopsEtcdBackupEncryptionKey(value) {
        this._gkeopsEtcdBackupEncryptionKey = value;
    }
    resetGkeopsEtcdBackupEncryptionKey() {
        this._gkeopsEtcdBackupEncryptionKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gkeopsEtcdBackupEncryptionKeyInput() {
        return this._gkeopsEtcdBackupEncryptionKey;
    }
    get serviceAccountSigningKeys() {
        return cdktf.Fn.tolist(this.getListAttribute('service_account_signing_keys'));
    }
    set serviceAccountSigningKeys(value) {
        this._serviceAccountSigningKeys = value;
    }
    resetServiceAccountSigningKeys() {
        this._serviceAccountSigningKeys = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceAccountSigningKeysInput() {
        return this._serviceAccountSigningKeys;
    }
    get serviceAccountVerificationKeys() {
        return cdktf.Fn.tolist(this.getListAttribute('service_account_verification_keys'));
    }
    set serviceAccountVerificationKeys(value) {
        this._serviceAccountVerificationKeys = value;
    }
    resetServiceAccountVerificationKeys() {
        this._serviceAccountVerificationKeys = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceAccountVerificationKeysInput() {
        return this._serviceAccountVerificationKeys;
    }
}
exports.ContainerClusterUserManagedKeysConfigOutputReference = ContainerClusterUserManagedKeysConfigOutputReference;
_y = JSII_RTTI_SYMBOL_1;
ContainerClusterUserManagedKeysConfigOutputReference[_y] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterUserManagedKeysConfigOutputReference", version: "14.13.1" };
function containerClusterVerticalPodAutoscalingToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.containerClusterVerticalPodAutoscalingToTerraform = containerClusterVerticalPodAutoscalingToTerraform;
function containerClusterVerticalPodAutoscalingToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.containerClusterVerticalPodAutoscalingToHclTerraform = containerClusterVerticalPodAutoscalingToHclTerraform;
class ContainerClusterVerticalPodAutoscalingOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
}
exports.ContainerClusterVerticalPodAutoscalingOutputReference = ContainerClusterVerticalPodAutoscalingOutputReference;
_z = JSII_RTTI_SYMBOL_1;
ContainerClusterVerticalPodAutoscalingOutputReference[_z] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterVerticalPodAutoscalingOutputReference", version: "14.13.1" };
function containerClusterWorkloadIdentityConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        workload_pool: cdktf.stringToTerraform(struct.workloadPool),
    };
}
exports.containerClusterWorkloadIdentityConfigToTerraform = containerClusterWorkloadIdentityConfigToTerraform;
function containerClusterWorkloadIdentityConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        workload_pool: {
            value: cdktf.stringToHclTerraform(struct.workloadPool),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.containerClusterWorkloadIdentityConfigToHclTerraform = containerClusterWorkloadIdentityConfigToHclTerraform;
class ContainerClusterWorkloadIdentityConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._workloadPool !== undefined) {
            hasAnyValues = true;
            internalValueResult.workloadPool = this._workloadPool;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._workloadPool = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._workloadPool = value.workloadPool;
        }
    }
    get workloadPool() {
        return this.getStringAttribute('workload_pool');
    }
    set workloadPool(value) {
        this._workloadPool = value;
    }
    resetWorkloadPool() {
        this._workloadPool = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get workloadPoolInput() {
        return this._workloadPool;
    }
}
exports.ContainerClusterWorkloadIdentityConfigOutputReference = ContainerClusterWorkloadIdentityConfigOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
ContainerClusterWorkloadIdentityConfigOutputReference[_0] = { fqn: "@cdktf/provider-google.containerCluster.ContainerClusterWorkloadIdentityConfigOutputReference", version: "14.13.1" };
//# sourceMappingURL=data:application/json;base64,