"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatabaseMigrationServiceConnectionProfileOracleStaticServiceIpConnectivityOutputReference = exports.databaseMigrationServiceConnectionProfileOracleStaticServiceIpConnectivityToHclTerraform = exports.databaseMigrationServiceConnectionProfileOracleStaticServiceIpConnectivityToTerraform = exports.DatabaseMigrationServiceConnectionProfileOracleSslOutputReference = exports.databaseMigrationServiceConnectionProfileOracleSslToHclTerraform = exports.databaseMigrationServiceConnectionProfileOracleSslToTerraform = exports.DatabaseMigrationServiceConnectionProfileOraclePrivateConnectivityOutputReference = exports.databaseMigrationServiceConnectionProfileOraclePrivateConnectivityToHclTerraform = exports.databaseMigrationServiceConnectionProfileOraclePrivateConnectivityToTerraform = exports.DatabaseMigrationServiceConnectionProfileOracleForwardSshConnectivityOutputReference = exports.databaseMigrationServiceConnectionProfileOracleForwardSshConnectivityToHclTerraform = exports.databaseMigrationServiceConnectionProfileOracleForwardSshConnectivityToTerraform = exports.DatabaseMigrationServiceConnectionProfileMysqlOutputReference = exports.databaseMigrationServiceConnectionProfileMysqlToHclTerraform = exports.databaseMigrationServiceConnectionProfileMysqlToTerraform = exports.DatabaseMigrationServiceConnectionProfileMysqlSslOutputReference = exports.databaseMigrationServiceConnectionProfileMysqlSslToHclTerraform = exports.databaseMigrationServiceConnectionProfileMysqlSslToTerraform = exports.DatabaseMigrationServiceConnectionProfileCloudsqlOutputReference = exports.databaseMigrationServiceConnectionProfileCloudsqlToHclTerraform = exports.databaseMigrationServiceConnectionProfileCloudsqlToTerraform = exports.DatabaseMigrationServiceConnectionProfileCloudsqlSettingsOutputReference = exports.databaseMigrationServiceConnectionProfileCloudsqlSettingsToHclTerraform = exports.databaseMigrationServiceConnectionProfileCloudsqlSettingsToTerraform = exports.DatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigOutputReference = exports.databaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigToHclTerraform = exports.databaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigToTerraform = exports.DatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksList = exports.DatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksOutputReference = exports.databaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksToHclTerraform = exports.databaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksToTerraform = exports.DatabaseMigrationServiceConnectionProfileAlloydbOutputReference = exports.databaseMigrationServiceConnectionProfileAlloydbToHclTerraform = exports.databaseMigrationServiceConnectionProfileAlloydbToTerraform = exports.DatabaseMigrationServiceConnectionProfileAlloydbSettingsOutputReference = exports.databaseMigrationServiceConnectionProfileAlloydbSettingsToHclTerraform = exports.databaseMigrationServiceConnectionProfileAlloydbSettingsToTerraform = exports.DatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsOutputReference = exports.databaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsToHclTerraform = exports.databaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsToTerraform = exports.DatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsMachineConfigOutputReference = exports.databaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsMachineConfigToHclTerraform = exports.databaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsMachineConfigToTerraform = exports.DatabaseMigrationServiceConnectionProfileAlloydbSettingsInitialUserOutputReference = exports.databaseMigrationServiceConnectionProfileAlloydbSettingsInitialUserToHclTerraform = exports.databaseMigrationServiceConnectionProfileAlloydbSettingsInitialUserToTerraform = exports.DatabaseMigrationServiceConnectionProfileErrorList = exports.DatabaseMigrationServiceConnectionProfileErrorOutputReference = exports.databaseMigrationServiceConnectionProfileErrorToHclTerraform = exports.databaseMigrationServiceConnectionProfileErrorToTerraform = void 0;
exports.DatabaseMigrationServiceConnectionProfile = exports.DatabaseMigrationServiceConnectionProfileTimeoutsOutputReference = exports.databaseMigrationServiceConnectionProfileTimeoutsToHclTerraform = exports.databaseMigrationServiceConnectionProfileTimeoutsToTerraform = exports.DatabaseMigrationServiceConnectionProfilePostgresqlOutputReference = exports.databaseMigrationServiceConnectionProfilePostgresqlToHclTerraform = exports.databaseMigrationServiceConnectionProfilePostgresqlToTerraform = exports.DatabaseMigrationServiceConnectionProfilePostgresqlSslOutputReference = exports.databaseMigrationServiceConnectionProfilePostgresqlSslToHclTerraform = exports.databaseMigrationServiceConnectionProfilePostgresqlSslToTerraform = exports.DatabaseMigrationServiceConnectionProfileOracleOutputReference = exports.databaseMigrationServiceConnectionProfileOracleToHclTerraform = exports.databaseMigrationServiceConnectionProfileOracleToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function databaseMigrationServiceConnectionProfileErrorToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.databaseMigrationServiceConnectionProfileErrorToTerraform = databaseMigrationServiceConnectionProfileErrorToTerraform;
function databaseMigrationServiceConnectionProfileErrorToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.databaseMigrationServiceConnectionProfileErrorToHclTerraform = databaseMigrationServiceConnectionProfileErrorToHclTerraform;
class DatabaseMigrationServiceConnectionProfileErrorOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // details - computed: true, optional: false, required: false
        this._details = new cdktf.StringMapList(this, "details", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // code - computed: true, optional: false, required: false
    get code() {
        return this.getNumberAttribute('code');
    }
    get details() {
        return this._details;
    }
    // message - computed: true, optional: false, required: false
    get message() {
        return this.getStringAttribute('message');
    }
}
exports.DatabaseMigrationServiceConnectionProfileErrorOutputReference = DatabaseMigrationServiceConnectionProfileErrorOutputReference;
_a = JSII_RTTI_SYMBOL_1;
DatabaseMigrationServiceConnectionProfileErrorOutputReference[_a] = { fqn: "@cdktf/provider-google.databaseMigrationServiceConnectionProfile.DatabaseMigrationServiceConnectionProfileErrorOutputReference", version: "14.13.1" };
class DatabaseMigrationServiceConnectionProfileErrorList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatabaseMigrationServiceConnectionProfileErrorOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatabaseMigrationServiceConnectionProfileErrorList = DatabaseMigrationServiceConnectionProfileErrorList;
_b = JSII_RTTI_SYMBOL_1;
DatabaseMigrationServiceConnectionProfileErrorList[_b] = { fqn: "@cdktf/provider-google.databaseMigrationServiceConnectionProfile.DatabaseMigrationServiceConnectionProfileErrorList", version: "14.13.1" };
function databaseMigrationServiceConnectionProfileAlloydbSettingsInitialUserToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        password: cdktf.stringToTerraform(struct.password),
        user: cdktf.stringToTerraform(struct.user),
    };
}
exports.databaseMigrationServiceConnectionProfileAlloydbSettingsInitialUserToTerraform = databaseMigrationServiceConnectionProfileAlloydbSettingsInitialUserToTerraform;
function databaseMigrationServiceConnectionProfileAlloydbSettingsInitialUserToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        password: {
            value: cdktf.stringToHclTerraform(struct.password),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        user: {
            value: cdktf.stringToHclTerraform(struct.user),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.databaseMigrationServiceConnectionProfileAlloydbSettingsInitialUserToHclTerraform = databaseMigrationServiceConnectionProfileAlloydbSettingsInitialUserToHclTerraform;
class DatabaseMigrationServiceConnectionProfileAlloydbSettingsInitialUserOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._password !== undefined) {
            hasAnyValues = true;
            internalValueResult.password = this._password;
        }
        if (this._user !== undefined) {
            hasAnyValues = true;
            internalValueResult.user = this._user;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._password = undefined;
            this._user = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._password = value.password;
            this._user = value.user;
        }
    }
    get password() {
        return this.getStringAttribute('password');
    }
    set password(value) {
        this._password = value;
    }
    // Temporarily expose input value. Use with caution.
    get passwordInput() {
        return this._password;
    }
    // password_set - computed: true, optional: false, required: false
    get passwordSet() {
        return this.getBooleanAttribute('password_set');
    }
    get user() {
        return this.getStringAttribute('user');
    }
    set user(value) {
        this._user = value;
    }
    // Temporarily expose input value. Use with caution.
    get userInput() {
        return this._user;
    }
}
exports.DatabaseMigrationServiceConnectionProfileAlloydbSettingsInitialUserOutputReference = DatabaseMigrationServiceConnectionProfileAlloydbSettingsInitialUserOutputReference;
_c = JSII_RTTI_SYMBOL_1;
DatabaseMigrationServiceConnectionProfileAlloydbSettingsInitialUserOutputReference[_c] = { fqn: "@cdktf/provider-google.databaseMigrationServiceConnectionProfile.DatabaseMigrationServiceConnectionProfileAlloydbSettingsInitialUserOutputReference", version: "14.13.1" };
function databaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsMachineConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cpu_count: cdktf.numberToTerraform(struct.cpuCount),
    };
}
exports.databaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsMachineConfigToTerraform = databaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsMachineConfigToTerraform;
function databaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsMachineConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cpu_count: {
            value: cdktf.numberToHclTerraform(struct.cpuCount),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.databaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsMachineConfigToHclTerraform = databaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsMachineConfigToHclTerraform;
class DatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsMachineConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cpuCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.cpuCount = this._cpuCount;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cpuCount = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cpuCount = value.cpuCount;
        }
    }
    get cpuCount() {
        return this.getNumberAttribute('cpu_count');
    }
    set cpuCount(value) {
        this._cpuCount = value;
    }
    // Temporarily expose input value. Use with caution.
    get cpuCountInput() {
        return this._cpuCount;
    }
}
exports.DatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsMachineConfigOutputReference = DatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsMachineConfigOutputReference;
_d = JSII_RTTI_SYMBOL_1;
DatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsMachineConfigOutputReference[_d] = { fqn: "@cdktf/provider-google.databaseMigrationServiceConnectionProfile.DatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsMachineConfigOutputReference", version: "14.13.1" };
function databaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        database_flags: cdktf.hashMapper(cdktf.stringToTerraform)(struct.databaseFlags),
        id: cdktf.stringToTerraform(struct.id),
        labels: cdktf.hashMapper(cdktf.stringToTerraform)(struct.labels),
        machine_config: databaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsMachineConfigToTerraform(struct.machineConfig),
    };
}
exports.databaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsToTerraform = databaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsToTerraform;
function databaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        database_flags: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.databaseFlags),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        id: {
            value: cdktf.stringToHclTerraform(struct.id),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        labels: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.labels),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        machine_config: {
            value: databaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsMachineConfigToHclTerraform(struct.machineConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsMachineConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.databaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsToHclTerraform = databaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsToHclTerraform;
class DatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // machine_config - computed: false, optional: false, required: true
        this._machineConfig = new DatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsMachineConfigOutputReference(this, "machine_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._databaseFlags !== undefined) {
            hasAnyValues = true;
            internalValueResult.databaseFlags = this._databaseFlags;
        }
        if (this._id !== undefined) {
            hasAnyValues = true;
            internalValueResult.id = this._id;
        }
        if (this._labels !== undefined) {
            hasAnyValues = true;
            internalValueResult.labels = this._labels;
        }
        if (this._machineConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.machineConfig = this._machineConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._databaseFlags = undefined;
            this._id = undefined;
            this._labels = undefined;
            this._machineConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._databaseFlags = value.databaseFlags;
            this._id = value.id;
            this._labels = value.labels;
            this._machineConfig.internalValue = value.machineConfig;
        }
    }
    get databaseFlags() {
        return this.getStringMapAttribute('database_flags');
    }
    set databaseFlags(value) {
        this._databaseFlags = value;
    }
    resetDatabaseFlags() {
        this._databaseFlags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get databaseFlagsInput() {
        return this._databaseFlags;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    // private_ip - computed: true, optional: false, required: false
    get privateIp() {
        return this.getStringAttribute('private_ip');
    }
    get machineConfig() {
        return this._machineConfig;
    }
    putMachineConfig(value) {
        this._machineConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get machineConfigInput() {
        return this._machineConfig.internalValue;
    }
}
exports.DatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsOutputReference = DatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsOutputReference;
_e = JSII_RTTI_SYMBOL_1;
DatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsOutputReference[_e] = { fqn: "@cdktf/provider-google.databaseMigrationServiceConnectionProfile.DatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsOutputReference", version: "14.13.1" };
function databaseMigrationServiceConnectionProfileAlloydbSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        labels: cdktf.hashMapper(cdktf.stringToTerraform)(struct.labels),
        vpc_network: cdktf.stringToTerraform(struct.vpcNetwork),
        initial_user: databaseMigrationServiceConnectionProfileAlloydbSettingsInitialUserToTerraform(struct.initialUser),
        primary_instance_settings: databaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsToTerraform(struct.primaryInstanceSettings),
    };
}
exports.databaseMigrationServiceConnectionProfileAlloydbSettingsToTerraform = databaseMigrationServiceConnectionProfileAlloydbSettingsToTerraform;
function databaseMigrationServiceConnectionProfileAlloydbSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        labels: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.labels),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        vpc_network: {
            value: cdktf.stringToHclTerraform(struct.vpcNetwork),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        initial_user: {
            value: databaseMigrationServiceConnectionProfileAlloydbSettingsInitialUserToHclTerraform(struct.initialUser),
            isBlock: true,
            type: "list",
            storageClassType: "DatabaseMigrationServiceConnectionProfileAlloydbSettingsInitialUserList",
        },
        primary_instance_settings: {
            value: databaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsToHclTerraform(struct.primaryInstanceSettings),
            isBlock: true,
            type: "list",
            storageClassType: "DatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.databaseMigrationServiceConnectionProfileAlloydbSettingsToHclTerraform = databaseMigrationServiceConnectionProfileAlloydbSettingsToHclTerraform;
class DatabaseMigrationServiceConnectionProfileAlloydbSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // initial_user - computed: false, optional: false, required: true
        this._initialUser = new DatabaseMigrationServiceConnectionProfileAlloydbSettingsInitialUserOutputReference(this, "initial_user");
        // primary_instance_settings - computed: false, optional: true, required: false
        this._primaryInstanceSettings = new DatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsOutputReference(this, "primary_instance_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._labels !== undefined) {
            hasAnyValues = true;
            internalValueResult.labels = this._labels;
        }
        if (this._vpcNetwork !== undefined) {
            hasAnyValues = true;
            internalValueResult.vpcNetwork = this._vpcNetwork;
        }
        if (this._initialUser?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.initialUser = this._initialUser?.internalValue;
        }
        if (this._primaryInstanceSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.primaryInstanceSettings = this._primaryInstanceSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._labels = undefined;
            this._vpcNetwork = undefined;
            this._initialUser.internalValue = undefined;
            this._primaryInstanceSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._labels = value.labels;
            this._vpcNetwork = value.vpcNetwork;
            this._initialUser.internalValue = value.initialUser;
            this._primaryInstanceSettings.internalValue = value.primaryInstanceSettings;
        }
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get vpcNetwork() {
        return this.getStringAttribute('vpc_network');
    }
    set vpcNetwork(value) {
        this._vpcNetwork = value;
    }
    // Temporarily expose input value. Use with caution.
    get vpcNetworkInput() {
        return this._vpcNetwork;
    }
    get initialUser() {
        return this._initialUser;
    }
    putInitialUser(value) {
        this._initialUser.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get initialUserInput() {
        return this._initialUser.internalValue;
    }
    get primaryInstanceSettings() {
        return this._primaryInstanceSettings;
    }
    putPrimaryInstanceSettings(value) {
        this._primaryInstanceSettings.internalValue = value;
    }
    resetPrimaryInstanceSettings() {
        this._primaryInstanceSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get primaryInstanceSettingsInput() {
        return this._primaryInstanceSettings.internalValue;
    }
}
exports.DatabaseMigrationServiceConnectionProfileAlloydbSettingsOutputReference = DatabaseMigrationServiceConnectionProfileAlloydbSettingsOutputReference;
_f = JSII_RTTI_SYMBOL_1;
DatabaseMigrationServiceConnectionProfileAlloydbSettingsOutputReference[_f] = { fqn: "@cdktf/provider-google.databaseMigrationServiceConnectionProfile.DatabaseMigrationServiceConnectionProfileAlloydbSettingsOutputReference", version: "14.13.1" };
function databaseMigrationServiceConnectionProfileAlloydbToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cluster_id: cdktf.stringToTerraform(struct.clusterId),
        settings: databaseMigrationServiceConnectionProfileAlloydbSettingsToTerraform(struct.settings),
    };
}
exports.databaseMigrationServiceConnectionProfileAlloydbToTerraform = databaseMigrationServiceConnectionProfileAlloydbToTerraform;
function databaseMigrationServiceConnectionProfileAlloydbToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cluster_id: {
            value: cdktf.stringToHclTerraform(struct.clusterId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        settings: {
            value: databaseMigrationServiceConnectionProfileAlloydbSettingsToHclTerraform(struct.settings),
            isBlock: true,
            type: "list",
            storageClassType: "DatabaseMigrationServiceConnectionProfileAlloydbSettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.databaseMigrationServiceConnectionProfileAlloydbToHclTerraform = databaseMigrationServiceConnectionProfileAlloydbToHclTerraform;
class DatabaseMigrationServiceConnectionProfileAlloydbOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // settings - computed: false, optional: true, required: false
        this._settings = new DatabaseMigrationServiceConnectionProfileAlloydbSettingsOutputReference(this, "settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._clusterId !== undefined) {
            hasAnyValues = true;
            internalValueResult.clusterId = this._clusterId;
        }
        if (this._settings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.settings = this._settings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._clusterId = undefined;
            this._settings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._clusterId = value.clusterId;
            this._settings.internalValue = value.settings;
        }
    }
    get clusterId() {
        return this.getStringAttribute('cluster_id');
    }
    set clusterId(value) {
        this._clusterId = value;
    }
    // Temporarily expose input value. Use with caution.
    get clusterIdInput() {
        return this._clusterId;
    }
    get settings() {
        return this._settings;
    }
    putSettings(value) {
        this._settings.internalValue = value;
    }
    resetSettings() {
        this._settings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get settingsInput() {
        return this._settings.internalValue;
    }
}
exports.DatabaseMigrationServiceConnectionProfileAlloydbOutputReference = DatabaseMigrationServiceConnectionProfileAlloydbOutputReference;
_g = JSII_RTTI_SYMBOL_1;
DatabaseMigrationServiceConnectionProfileAlloydbOutputReference[_g] = { fqn: "@cdktf/provider-google.databaseMigrationServiceConnectionProfile.DatabaseMigrationServiceConnectionProfileAlloydbOutputReference", version: "14.13.1" };
function databaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        expire_time: cdktf.stringToTerraform(struct.expireTime),
        label: cdktf.stringToTerraform(struct.label),
        ttl: cdktf.stringToTerraform(struct.ttl),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.databaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksToTerraform = databaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksToTerraform;
function databaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        expire_time: {
            value: cdktf.stringToHclTerraform(struct.expireTime),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        label: {
            value: cdktf.stringToHclTerraform(struct.label),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        ttl: {
            value: cdktf.stringToHclTerraform(struct.ttl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.databaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksToHclTerraform = databaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksToHclTerraform;
class DatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._expireTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.expireTime = this._expireTime;
        }
        if (this._label !== undefined) {
            hasAnyValues = true;
            internalValueResult.label = this._label;
        }
        if (this._ttl !== undefined) {
            hasAnyValues = true;
            internalValueResult.ttl = this._ttl;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._expireTime = undefined;
            this._label = undefined;
            this._ttl = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._expireTime = value.expireTime;
            this._label = value.label;
            this._ttl = value.ttl;
            this._value = value.value;
        }
    }
    get expireTime() {
        return this.getStringAttribute('expire_time');
    }
    set expireTime(value) {
        this._expireTime = value;
    }
    resetExpireTime() {
        this._expireTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get expireTimeInput() {
        return this._expireTime;
    }
    get label() {
        return this.getStringAttribute('label');
    }
    set label(value) {
        this._label = value;
    }
    resetLabel() {
        this._label = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelInput() {
        return this._label;
    }
    get ttl() {
        return this.getStringAttribute('ttl');
    }
    set ttl(value) {
        this._ttl = value;
    }
    resetTtl() {
        this._ttl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ttlInput() {
        return this._ttl;
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.DatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksOutputReference = DatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksOutputReference;
_h = JSII_RTTI_SYMBOL_1;
DatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksOutputReference[_h] = { fqn: "@cdktf/provider-google.databaseMigrationServiceConnectionProfile.DatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksOutputReference", version: "14.13.1" };
class DatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksList = DatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksList;
_j = JSII_RTTI_SYMBOL_1;
DatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksList[_j] = { fqn: "@cdktf/provider-google.databaseMigrationServiceConnectionProfile.DatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksList", version: "14.13.1" };
function databaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enable_ipv4: cdktf.booleanToTerraform(struct.enableIpv4),
        private_network: cdktf.stringToTerraform(struct.privateNetwork),
        require_ssl: cdktf.booleanToTerraform(struct.requireSsl),
        authorized_networks: cdktf.listMapper(databaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksToTerraform, true)(struct.authorizedNetworks),
    };
}
exports.databaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigToTerraform = databaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigToTerraform;
function databaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enable_ipv4: {
            value: cdktf.booleanToHclTerraform(struct.enableIpv4),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        private_network: {
            value: cdktf.stringToHclTerraform(struct.privateNetwork),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        require_ssl: {
            value: cdktf.booleanToHclTerraform(struct.requireSsl),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        authorized_networks: {
            value: cdktf.listMapperHcl(databaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksToHclTerraform, true)(struct.authorizedNetworks),
            isBlock: true,
            type: "list",
            storageClassType: "DatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.databaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigToHclTerraform = databaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigToHclTerraform;
class DatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // authorized_networks - computed: false, optional: true, required: false
        this._authorizedNetworks = new DatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksList(this, "authorized_networks", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enableIpv4 !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableIpv4 = this._enableIpv4;
        }
        if (this._privateNetwork !== undefined) {
            hasAnyValues = true;
            internalValueResult.privateNetwork = this._privateNetwork;
        }
        if (this._requireSsl !== undefined) {
            hasAnyValues = true;
            internalValueResult.requireSsl = this._requireSsl;
        }
        if (this._authorizedNetworks?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.authorizedNetworks = this._authorizedNetworks?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enableIpv4 = undefined;
            this._privateNetwork = undefined;
            this._requireSsl = undefined;
            this._authorizedNetworks.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enableIpv4 = value.enableIpv4;
            this._privateNetwork = value.privateNetwork;
            this._requireSsl = value.requireSsl;
            this._authorizedNetworks.internalValue = value.authorizedNetworks;
        }
    }
    get enableIpv4() {
        return this.getBooleanAttribute('enable_ipv4');
    }
    set enableIpv4(value) {
        this._enableIpv4 = value;
    }
    resetEnableIpv4() {
        this._enableIpv4 = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableIpv4Input() {
        return this._enableIpv4;
    }
    get privateNetwork() {
        return this.getStringAttribute('private_network');
    }
    set privateNetwork(value) {
        this._privateNetwork = value;
    }
    resetPrivateNetwork() {
        this._privateNetwork = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get privateNetworkInput() {
        return this._privateNetwork;
    }
    get requireSsl() {
        return this.getBooleanAttribute('require_ssl');
    }
    set requireSsl(value) {
        this._requireSsl = value;
    }
    resetRequireSsl() {
        this._requireSsl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requireSslInput() {
        return this._requireSsl;
    }
    get authorizedNetworks() {
        return this._authorizedNetworks;
    }
    putAuthorizedNetworks(value) {
        this._authorizedNetworks.internalValue = value;
    }
    resetAuthorizedNetworks() {
        this._authorizedNetworks.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authorizedNetworksInput() {
        return this._authorizedNetworks.internalValue;
    }
}
exports.DatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigOutputReference = DatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigOutputReference;
_k = JSII_RTTI_SYMBOL_1;
DatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigOutputReference[_k] = { fqn: "@cdktf/provider-google.databaseMigrationServiceConnectionProfile.DatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigOutputReference", version: "14.13.1" };
function databaseMigrationServiceConnectionProfileCloudsqlSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        activation_policy: cdktf.stringToTerraform(struct.activationPolicy),
        auto_storage_increase: cdktf.booleanToTerraform(struct.autoStorageIncrease),
        cmek_key_name: cdktf.stringToTerraform(struct.cmekKeyName),
        collation: cdktf.stringToTerraform(struct.collation),
        data_disk_size_gb: cdktf.stringToTerraform(struct.dataDiskSizeGb),
        data_disk_type: cdktf.stringToTerraform(struct.dataDiskType),
        database_flags: cdktf.hashMapper(cdktf.stringToTerraform)(struct.databaseFlags),
        database_version: cdktf.stringToTerraform(struct.databaseVersion),
        edition: cdktf.stringToTerraform(struct.edition),
        root_password: cdktf.stringToTerraform(struct.rootPassword),
        source_id: cdktf.stringToTerraform(struct.sourceId),
        storage_auto_resize_limit: cdktf.stringToTerraform(struct.storageAutoResizeLimit),
        tier: cdktf.stringToTerraform(struct.tier),
        user_labels: cdktf.hashMapper(cdktf.stringToTerraform)(struct.userLabels),
        zone: cdktf.stringToTerraform(struct.zone),
        ip_config: databaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigToTerraform(struct.ipConfig),
    };
}
exports.databaseMigrationServiceConnectionProfileCloudsqlSettingsToTerraform = databaseMigrationServiceConnectionProfileCloudsqlSettingsToTerraform;
function databaseMigrationServiceConnectionProfileCloudsqlSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        activation_policy: {
            value: cdktf.stringToHclTerraform(struct.activationPolicy),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        auto_storage_increase: {
            value: cdktf.booleanToHclTerraform(struct.autoStorageIncrease),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        cmek_key_name: {
            value: cdktf.stringToHclTerraform(struct.cmekKeyName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        collation: {
            value: cdktf.stringToHclTerraform(struct.collation),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        data_disk_size_gb: {
            value: cdktf.stringToHclTerraform(struct.dataDiskSizeGb),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        data_disk_type: {
            value: cdktf.stringToHclTerraform(struct.dataDiskType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        database_flags: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.databaseFlags),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        database_version: {
            value: cdktf.stringToHclTerraform(struct.databaseVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        edition: {
            value: cdktf.stringToHclTerraform(struct.edition),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        root_password: {
            value: cdktf.stringToHclTerraform(struct.rootPassword),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        source_id: {
            value: cdktf.stringToHclTerraform(struct.sourceId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        storage_auto_resize_limit: {
            value: cdktf.stringToHclTerraform(struct.storageAutoResizeLimit),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        tier: {
            value: cdktf.stringToHclTerraform(struct.tier),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        user_labels: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.userLabels),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        zone: {
            value: cdktf.stringToHclTerraform(struct.zone),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        ip_config: {
            value: databaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigToHclTerraform(struct.ipConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.databaseMigrationServiceConnectionProfileCloudsqlSettingsToHclTerraform = databaseMigrationServiceConnectionProfileCloudsqlSettingsToHclTerraform;
class DatabaseMigrationServiceConnectionProfileCloudsqlSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // ip_config - computed: false, optional: true, required: false
        this._ipConfig = new DatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigOutputReference(this, "ip_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._activationPolicy !== undefined) {
            hasAnyValues = true;
            internalValueResult.activationPolicy = this._activationPolicy;
        }
        if (this._autoStorageIncrease !== undefined) {
            hasAnyValues = true;
            internalValueResult.autoStorageIncrease = this._autoStorageIncrease;
        }
        if (this._cmekKeyName !== undefined) {
            hasAnyValues = true;
            internalValueResult.cmekKeyName = this._cmekKeyName;
        }
        if (this._collation !== undefined) {
            hasAnyValues = true;
            internalValueResult.collation = this._collation;
        }
        if (this._dataDiskSizeGb !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataDiskSizeGb = this._dataDiskSizeGb;
        }
        if (this._dataDiskType !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataDiskType = this._dataDiskType;
        }
        if (this._databaseFlags !== undefined) {
            hasAnyValues = true;
            internalValueResult.databaseFlags = this._databaseFlags;
        }
        if (this._databaseVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.databaseVersion = this._databaseVersion;
        }
        if (this._edition !== undefined) {
            hasAnyValues = true;
            internalValueResult.edition = this._edition;
        }
        if (this._rootPassword !== undefined) {
            hasAnyValues = true;
            internalValueResult.rootPassword = this._rootPassword;
        }
        if (this._sourceId !== undefined) {
            hasAnyValues = true;
            internalValueResult.sourceId = this._sourceId;
        }
        if (this._storageAutoResizeLimit !== undefined) {
            hasAnyValues = true;
            internalValueResult.storageAutoResizeLimit = this._storageAutoResizeLimit;
        }
        if (this._tier !== undefined) {
            hasAnyValues = true;
            internalValueResult.tier = this._tier;
        }
        if (this._userLabels !== undefined) {
            hasAnyValues = true;
            internalValueResult.userLabels = this._userLabels;
        }
        if (this._zone !== undefined) {
            hasAnyValues = true;
            internalValueResult.zone = this._zone;
        }
        if (this._ipConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ipConfig = this._ipConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._activationPolicy = undefined;
            this._autoStorageIncrease = undefined;
            this._cmekKeyName = undefined;
            this._collation = undefined;
            this._dataDiskSizeGb = undefined;
            this._dataDiskType = undefined;
            this._databaseFlags = undefined;
            this._databaseVersion = undefined;
            this._edition = undefined;
            this._rootPassword = undefined;
            this._sourceId = undefined;
            this._storageAutoResizeLimit = undefined;
            this._tier = undefined;
            this._userLabels = undefined;
            this._zone = undefined;
            this._ipConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._activationPolicy = value.activationPolicy;
            this._autoStorageIncrease = value.autoStorageIncrease;
            this._cmekKeyName = value.cmekKeyName;
            this._collation = value.collation;
            this._dataDiskSizeGb = value.dataDiskSizeGb;
            this._dataDiskType = value.dataDiskType;
            this._databaseFlags = value.databaseFlags;
            this._databaseVersion = value.databaseVersion;
            this._edition = value.edition;
            this._rootPassword = value.rootPassword;
            this._sourceId = value.sourceId;
            this._storageAutoResizeLimit = value.storageAutoResizeLimit;
            this._tier = value.tier;
            this._userLabels = value.userLabels;
            this._zone = value.zone;
            this._ipConfig.internalValue = value.ipConfig;
        }
    }
    get activationPolicy() {
        return this.getStringAttribute('activation_policy');
    }
    set activationPolicy(value) {
        this._activationPolicy = value;
    }
    resetActivationPolicy() {
        this._activationPolicy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get activationPolicyInput() {
        return this._activationPolicy;
    }
    get autoStorageIncrease() {
        return this.getBooleanAttribute('auto_storage_increase');
    }
    set autoStorageIncrease(value) {
        this._autoStorageIncrease = value;
    }
    resetAutoStorageIncrease() {
        this._autoStorageIncrease = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoStorageIncreaseInput() {
        return this._autoStorageIncrease;
    }
    get cmekKeyName() {
        return this.getStringAttribute('cmek_key_name');
    }
    set cmekKeyName(value) {
        this._cmekKeyName = value;
    }
    resetCmekKeyName() {
        this._cmekKeyName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cmekKeyNameInput() {
        return this._cmekKeyName;
    }
    get collation() {
        return this.getStringAttribute('collation');
    }
    set collation(value) {
        this._collation = value;
    }
    resetCollation() {
        this._collation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get collationInput() {
        return this._collation;
    }
    get dataDiskSizeGb() {
        return this.getStringAttribute('data_disk_size_gb');
    }
    set dataDiskSizeGb(value) {
        this._dataDiskSizeGb = value;
    }
    resetDataDiskSizeGb() {
        this._dataDiskSizeGb = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataDiskSizeGbInput() {
        return this._dataDiskSizeGb;
    }
    get dataDiskType() {
        return this.getStringAttribute('data_disk_type');
    }
    set dataDiskType(value) {
        this._dataDiskType = value;
    }
    resetDataDiskType() {
        this._dataDiskType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataDiskTypeInput() {
        return this._dataDiskType;
    }
    get databaseFlags() {
        return this.getStringMapAttribute('database_flags');
    }
    set databaseFlags(value) {
        this._databaseFlags = value;
    }
    resetDatabaseFlags() {
        this._databaseFlags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get databaseFlagsInput() {
        return this._databaseFlags;
    }
    get databaseVersion() {
        return this.getStringAttribute('database_version');
    }
    set databaseVersion(value) {
        this._databaseVersion = value;
    }
    resetDatabaseVersion() {
        this._databaseVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get databaseVersionInput() {
        return this._databaseVersion;
    }
    get edition() {
        return this.getStringAttribute('edition');
    }
    set edition(value) {
        this._edition = value;
    }
    resetEdition() {
        this._edition = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get editionInput() {
        return this._edition;
    }
    get rootPassword() {
        return this.getStringAttribute('root_password');
    }
    set rootPassword(value) {
        this._rootPassword = value;
    }
    resetRootPassword() {
        this._rootPassword = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rootPasswordInput() {
        return this._rootPassword;
    }
    // root_password_set - computed: true, optional: false, required: false
    get rootPasswordSet() {
        return this.getBooleanAttribute('root_password_set');
    }
    get sourceId() {
        return this.getStringAttribute('source_id');
    }
    set sourceId(value) {
        this._sourceId = value;
    }
    // Temporarily expose input value. Use with caution.
    get sourceIdInput() {
        return this._sourceId;
    }
    get storageAutoResizeLimit() {
        return this.getStringAttribute('storage_auto_resize_limit');
    }
    set storageAutoResizeLimit(value) {
        this._storageAutoResizeLimit = value;
    }
    resetStorageAutoResizeLimit() {
        this._storageAutoResizeLimit = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get storageAutoResizeLimitInput() {
        return this._storageAutoResizeLimit;
    }
    get tier() {
        return this.getStringAttribute('tier');
    }
    set tier(value) {
        this._tier = value;
    }
    resetTier() {
        this._tier = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tierInput() {
        return this._tier;
    }
    get userLabels() {
        return this.getStringMapAttribute('user_labels');
    }
    set userLabels(value) {
        this._userLabels = value;
    }
    resetUserLabels() {
        this._userLabels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get userLabelsInput() {
        return this._userLabels;
    }
    get zone() {
        return this.getStringAttribute('zone');
    }
    set zone(value) {
        this._zone = value;
    }
    resetZone() {
        this._zone = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get zoneInput() {
        return this._zone;
    }
    get ipConfig() {
        return this._ipConfig;
    }
    putIpConfig(value) {
        this._ipConfig.internalValue = value;
    }
    resetIpConfig() {
        this._ipConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ipConfigInput() {
        return this._ipConfig.internalValue;
    }
}
exports.DatabaseMigrationServiceConnectionProfileCloudsqlSettingsOutputReference = DatabaseMigrationServiceConnectionProfileCloudsqlSettingsOutputReference;
_l = JSII_RTTI_SYMBOL_1;
DatabaseMigrationServiceConnectionProfileCloudsqlSettingsOutputReference[_l] = { fqn: "@cdktf/provider-google.databaseMigrationServiceConnectionProfile.DatabaseMigrationServiceConnectionProfileCloudsqlSettingsOutputReference", version: "14.13.1" };
function databaseMigrationServiceConnectionProfileCloudsqlToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        settings: databaseMigrationServiceConnectionProfileCloudsqlSettingsToTerraform(struct.settings),
    };
}
exports.databaseMigrationServiceConnectionProfileCloudsqlToTerraform = databaseMigrationServiceConnectionProfileCloudsqlToTerraform;
function databaseMigrationServiceConnectionProfileCloudsqlToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        settings: {
            value: databaseMigrationServiceConnectionProfileCloudsqlSettingsToHclTerraform(struct.settings),
            isBlock: true,
            type: "list",
            storageClassType: "DatabaseMigrationServiceConnectionProfileCloudsqlSettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.databaseMigrationServiceConnectionProfileCloudsqlToHclTerraform = databaseMigrationServiceConnectionProfileCloudsqlToHclTerraform;
class DatabaseMigrationServiceConnectionProfileCloudsqlOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // settings - computed: false, optional: true, required: false
        this._settings = new DatabaseMigrationServiceConnectionProfileCloudsqlSettingsOutputReference(this, "settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._settings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.settings = this._settings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._settings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._settings.internalValue = value.settings;
        }
    }
    // cloud_sql_id - computed: true, optional: false, required: false
    get cloudSqlId() {
        return this.getStringAttribute('cloud_sql_id');
    }
    // private_ip - computed: true, optional: false, required: false
    get privateIp() {
        return this.getStringAttribute('private_ip');
    }
    // public_ip - computed: true, optional: false, required: false
    get publicIp() {
        return this.getStringAttribute('public_ip');
    }
    get settings() {
        return this._settings;
    }
    putSettings(value) {
        this._settings.internalValue = value;
    }
    resetSettings() {
        this._settings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get settingsInput() {
        return this._settings.internalValue;
    }
}
exports.DatabaseMigrationServiceConnectionProfileCloudsqlOutputReference = DatabaseMigrationServiceConnectionProfileCloudsqlOutputReference;
_m = JSII_RTTI_SYMBOL_1;
DatabaseMigrationServiceConnectionProfileCloudsqlOutputReference[_m] = { fqn: "@cdktf/provider-google.databaseMigrationServiceConnectionProfile.DatabaseMigrationServiceConnectionProfileCloudsqlOutputReference", version: "14.13.1" };
function databaseMigrationServiceConnectionProfileMysqlSslToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        ca_certificate: cdktf.stringToTerraform(struct.caCertificate),
        client_certificate: cdktf.stringToTerraform(struct.clientCertificate),
        client_key: cdktf.stringToTerraform(struct.clientKey),
    };
}
exports.databaseMigrationServiceConnectionProfileMysqlSslToTerraform = databaseMigrationServiceConnectionProfileMysqlSslToTerraform;
function databaseMigrationServiceConnectionProfileMysqlSslToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        ca_certificate: {
            value: cdktf.stringToHclTerraform(struct.caCertificate),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        client_certificate: {
            value: cdktf.stringToHclTerraform(struct.clientCertificate),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        client_key: {
            value: cdktf.stringToHclTerraform(struct.clientKey),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.databaseMigrationServiceConnectionProfileMysqlSslToHclTerraform = databaseMigrationServiceConnectionProfileMysqlSslToHclTerraform;
class DatabaseMigrationServiceConnectionProfileMysqlSslOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._caCertificate !== undefined) {
            hasAnyValues = true;
            internalValueResult.caCertificate = this._caCertificate;
        }
        if (this._clientCertificate !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientCertificate = this._clientCertificate;
        }
        if (this._clientKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientKey = this._clientKey;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._caCertificate = undefined;
            this._clientCertificate = undefined;
            this._clientKey = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._caCertificate = value.caCertificate;
            this._clientCertificate = value.clientCertificate;
            this._clientKey = value.clientKey;
        }
    }
    get caCertificate() {
        return this.getStringAttribute('ca_certificate');
    }
    set caCertificate(value) {
        this._caCertificate = value;
    }
    // Temporarily expose input value. Use with caution.
    get caCertificateInput() {
        return this._caCertificate;
    }
    get clientCertificate() {
        return this.getStringAttribute('client_certificate');
    }
    set clientCertificate(value) {
        this._clientCertificate = value;
    }
    resetClientCertificate() {
        this._clientCertificate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientCertificateInput() {
        return this._clientCertificate;
    }
    get clientKey() {
        return this.getStringAttribute('client_key');
    }
    set clientKey(value) {
        this._clientKey = value;
    }
    resetClientKey() {
        this._clientKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientKeyInput() {
        return this._clientKey;
    }
    // type - computed: true, optional: false, required: false
    get type() {
        return this.getStringAttribute('type');
    }
}
exports.DatabaseMigrationServiceConnectionProfileMysqlSslOutputReference = DatabaseMigrationServiceConnectionProfileMysqlSslOutputReference;
_o = JSII_RTTI_SYMBOL_1;
DatabaseMigrationServiceConnectionProfileMysqlSslOutputReference[_o] = { fqn: "@cdktf/provider-google.databaseMigrationServiceConnectionProfile.DatabaseMigrationServiceConnectionProfileMysqlSslOutputReference", version: "14.13.1" };
function databaseMigrationServiceConnectionProfileMysqlToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cloud_sql_id: cdktf.stringToTerraform(struct.cloudSqlId),
        host: cdktf.stringToTerraform(struct.host),
        password: cdktf.stringToTerraform(struct.password),
        port: cdktf.numberToTerraform(struct.port),
        username: cdktf.stringToTerraform(struct.username),
        ssl: databaseMigrationServiceConnectionProfileMysqlSslToTerraform(struct.ssl),
    };
}
exports.databaseMigrationServiceConnectionProfileMysqlToTerraform = databaseMigrationServiceConnectionProfileMysqlToTerraform;
function databaseMigrationServiceConnectionProfileMysqlToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cloud_sql_id: {
            value: cdktf.stringToHclTerraform(struct.cloudSqlId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        host: {
            value: cdktf.stringToHclTerraform(struct.host),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        password: {
            value: cdktf.stringToHclTerraform(struct.password),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        port: {
            value: cdktf.numberToHclTerraform(struct.port),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        username: {
            value: cdktf.stringToHclTerraform(struct.username),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        ssl: {
            value: databaseMigrationServiceConnectionProfileMysqlSslToHclTerraform(struct.ssl),
            isBlock: true,
            type: "list",
            storageClassType: "DatabaseMigrationServiceConnectionProfileMysqlSslList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.databaseMigrationServiceConnectionProfileMysqlToHclTerraform = databaseMigrationServiceConnectionProfileMysqlToHclTerraform;
class DatabaseMigrationServiceConnectionProfileMysqlOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // ssl - computed: false, optional: true, required: false
        this._ssl = new DatabaseMigrationServiceConnectionProfileMysqlSslOutputReference(this, "ssl");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cloudSqlId !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudSqlId = this._cloudSqlId;
        }
        if (this._host !== undefined) {
            hasAnyValues = true;
            internalValueResult.host = this._host;
        }
        if (this._password !== undefined) {
            hasAnyValues = true;
            internalValueResult.password = this._password;
        }
        if (this._port !== undefined) {
            hasAnyValues = true;
            internalValueResult.port = this._port;
        }
        if (this._username !== undefined) {
            hasAnyValues = true;
            internalValueResult.username = this._username;
        }
        if (this._ssl?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ssl = this._ssl?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cloudSqlId = undefined;
            this._host = undefined;
            this._password = undefined;
            this._port = undefined;
            this._username = undefined;
            this._ssl.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cloudSqlId = value.cloudSqlId;
            this._host = value.host;
            this._password = value.password;
            this._port = value.port;
            this._username = value.username;
            this._ssl.internalValue = value.ssl;
        }
    }
    get cloudSqlId() {
        return this.getStringAttribute('cloud_sql_id');
    }
    set cloudSqlId(value) {
        this._cloudSqlId = value;
    }
    resetCloudSqlId() {
        this._cloudSqlId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudSqlIdInput() {
        return this._cloudSqlId;
    }
    get host() {
        return this.getStringAttribute('host');
    }
    set host(value) {
        this._host = value;
    }
    resetHost() {
        this._host = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostInput() {
        return this._host;
    }
    get password() {
        return this.getStringAttribute('password');
    }
    set password(value) {
        this._password = value;
    }
    resetPassword() {
        this._password = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get passwordInput() {
        return this._password;
    }
    // password_set - computed: true, optional: false, required: false
    get passwordSet() {
        return this.getBooleanAttribute('password_set');
    }
    get port() {
        return this.getNumberAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    resetPort() {
        this._port = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
    get username() {
        return this.getStringAttribute('username');
    }
    set username(value) {
        this._username = value;
    }
    resetUsername() {
        this._username = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get usernameInput() {
        return this._username;
    }
    get ssl() {
        return this._ssl;
    }
    putSsl(value) {
        this._ssl.internalValue = value;
    }
    resetSsl() {
        this._ssl.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sslInput() {
        return this._ssl.internalValue;
    }
}
exports.DatabaseMigrationServiceConnectionProfileMysqlOutputReference = DatabaseMigrationServiceConnectionProfileMysqlOutputReference;
_p = JSII_RTTI_SYMBOL_1;
DatabaseMigrationServiceConnectionProfileMysqlOutputReference[_p] = { fqn: "@cdktf/provider-google.databaseMigrationServiceConnectionProfile.DatabaseMigrationServiceConnectionProfileMysqlOutputReference", version: "14.13.1" };
function databaseMigrationServiceConnectionProfileOracleForwardSshConnectivityToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        hostname: cdktf.stringToTerraform(struct.hostname),
        password: cdktf.stringToTerraform(struct.password),
        port: cdktf.numberToTerraform(struct.port),
        private_key: cdktf.stringToTerraform(struct.privateKey),
        username: cdktf.stringToTerraform(struct.username),
    };
}
exports.databaseMigrationServiceConnectionProfileOracleForwardSshConnectivityToTerraform = databaseMigrationServiceConnectionProfileOracleForwardSshConnectivityToTerraform;
function databaseMigrationServiceConnectionProfileOracleForwardSshConnectivityToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        hostname: {
            value: cdktf.stringToHclTerraform(struct.hostname),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        password: {
            value: cdktf.stringToHclTerraform(struct.password),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        port: {
            value: cdktf.numberToHclTerraform(struct.port),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        private_key: {
            value: cdktf.stringToHclTerraform(struct.privateKey),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        username: {
            value: cdktf.stringToHclTerraform(struct.username),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.databaseMigrationServiceConnectionProfileOracleForwardSshConnectivityToHclTerraform = databaseMigrationServiceConnectionProfileOracleForwardSshConnectivityToHclTerraform;
class DatabaseMigrationServiceConnectionProfileOracleForwardSshConnectivityOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hostname !== undefined) {
            hasAnyValues = true;
            internalValueResult.hostname = this._hostname;
        }
        if (this._password !== undefined) {
            hasAnyValues = true;
            internalValueResult.password = this._password;
        }
        if (this._port !== undefined) {
            hasAnyValues = true;
            internalValueResult.port = this._port;
        }
        if (this._privateKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.privateKey = this._privateKey;
        }
        if (this._username !== undefined) {
            hasAnyValues = true;
            internalValueResult.username = this._username;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hostname = undefined;
            this._password = undefined;
            this._port = undefined;
            this._privateKey = undefined;
            this._username = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hostname = value.hostname;
            this._password = value.password;
            this._port = value.port;
            this._privateKey = value.privateKey;
            this._username = value.username;
        }
    }
    get hostname() {
        return this.getStringAttribute('hostname');
    }
    set hostname(value) {
        this._hostname = value;
    }
    // Temporarily expose input value. Use with caution.
    get hostnameInput() {
        return this._hostname;
    }
    get password() {
        return this.getStringAttribute('password');
    }
    set password(value) {
        this._password = value;
    }
    resetPassword() {
        this._password = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get passwordInput() {
        return this._password;
    }
    get port() {
        return this.getNumberAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
    get privateKey() {
        return this.getStringAttribute('private_key');
    }
    set privateKey(value) {
        this._privateKey = value;
    }
    resetPrivateKey() {
        this._privateKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get privateKeyInput() {
        return this._privateKey;
    }
    get username() {
        return this.getStringAttribute('username');
    }
    set username(value) {
        this._username = value;
    }
    // Temporarily expose input value. Use with caution.
    get usernameInput() {
        return this._username;
    }
}
exports.DatabaseMigrationServiceConnectionProfileOracleForwardSshConnectivityOutputReference = DatabaseMigrationServiceConnectionProfileOracleForwardSshConnectivityOutputReference;
_q = JSII_RTTI_SYMBOL_1;
DatabaseMigrationServiceConnectionProfileOracleForwardSshConnectivityOutputReference[_q] = { fqn: "@cdktf/provider-google.databaseMigrationServiceConnectionProfile.DatabaseMigrationServiceConnectionProfileOracleForwardSshConnectivityOutputReference", version: "14.13.1" };
function databaseMigrationServiceConnectionProfileOraclePrivateConnectivityToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        private_connection: cdktf.stringToTerraform(struct.privateConnection),
    };
}
exports.databaseMigrationServiceConnectionProfileOraclePrivateConnectivityToTerraform = databaseMigrationServiceConnectionProfileOraclePrivateConnectivityToTerraform;
function databaseMigrationServiceConnectionProfileOraclePrivateConnectivityToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        private_connection: {
            value: cdktf.stringToHclTerraform(struct.privateConnection),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.databaseMigrationServiceConnectionProfileOraclePrivateConnectivityToHclTerraform = databaseMigrationServiceConnectionProfileOraclePrivateConnectivityToHclTerraform;
class DatabaseMigrationServiceConnectionProfileOraclePrivateConnectivityOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._privateConnection !== undefined) {
            hasAnyValues = true;
            internalValueResult.privateConnection = this._privateConnection;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._privateConnection = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._privateConnection = value.privateConnection;
        }
    }
    get privateConnection() {
        return this.getStringAttribute('private_connection');
    }
    set privateConnection(value) {
        this._privateConnection = value;
    }
    // Temporarily expose input value. Use with caution.
    get privateConnectionInput() {
        return this._privateConnection;
    }
}
exports.DatabaseMigrationServiceConnectionProfileOraclePrivateConnectivityOutputReference = DatabaseMigrationServiceConnectionProfileOraclePrivateConnectivityOutputReference;
_r = JSII_RTTI_SYMBOL_1;
DatabaseMigrationServiceConnectionProfileOraclePrivateConnectivityOutputReference[_r] = { fqn: "@cdktf/provider-google.databaseMigrationServiceConnectionProfile.DatabaseMigrationServiceConnectionProfileOraclePrivateConnectivityOutputReference", version: "14.13.1" };
function databaseMigrationServiceConnectionProfileOracleSslToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        ca_certificate: cdktf.stringToTerraform(struct.caCertificate),
        client_certificate: cdktf.stringToTerraform(struct.clientCertificate),
        client_key: cdktf.stringToTerraform(struct.clientKey),
    };
}
exports.databaseMigrationServiceConnectionProfileOracleSslToTerraform = databaseMigrationServiceConnectionProfileOracleSslToTerraform;
function databaseMigrationServiceConnectionProfileOracleSslToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        ca_certificate: {
            value: cdktf.stringToHclTerraform(struct.caCertificate),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        client_certificate: {
            value: cdktf.stringToHclTerraform(struct.clientCertificate),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        client_key: {
            value: cdktf.stringToHclTerraform(struct.clientKey),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.databaseMigrationServiceConnectionProfileOracleSslToHclTerraform = databaseMigrationServiceConnectionProfileOracleSslToHclTerraform;
class DatabaseMigrationServiceConnectionProfileOracleSslOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._caCertificate !== undefined) {
            hasAnyValues = true;
            internalValueResult.caCertificate = this._caCertificate;
        }
        if (this._clientCertificate !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientCertificate = this._clientCertificate;
        }
        if (this._clientKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientKey = this._clientKey;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._caCertificate = undefined;
            this._clientCertificate = undefined;
            this._clientKey = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._caCertificate = value.caCertificate;
            this._clientCertificate = value.clientCertificate;
            this._clientKey = value.clientKey;
        }
    }
    get caCertificate() {
        return this.getStringAttribute('ca_certificate');
    }
    set caCertificate(value) {
        this._caCertificate = value;
    }
    // Temporarily expose input value. Use with caution.
    get caCertificateInput() {
        return this._caCertificate;
    }
    get clientCertificate() {
        return this.getStringAttribute('client_certificate');
    }
    set clientCertificate(value) {
        this._clientCertificate = value;
    }
    resetClientCertificate() {
        this._clientCertificate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientCertificateInput() {
        return this._clientCertificate;
    }
    get clientKey() {
        return this.getStringAttribute('client_key');
    }
    set clientKey(value) {
        this._clientKey = value;
    }
    resetClientKey() {
        this._clientKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientKeyInput() {
        return this._clientKey;
    }
    // type - computed: true, optional: false, required: false
    get type() {
        return this.getStringAttribute('type');
    }
}
exports.DatabaseMigrationServiceConnectionProfileOracleSslOutputReference = DatabaseMigrationServiceConnectionProfileOracleSslOutputReference;
_s = JSII_RTTI_SYMBOL_1;
DatabaseMigrationServiceConnectionProfileOracleSslOutputReference[_s] = { fqn: "@cdktf/provider-google.databaseMigrationServiceConnectionProfile.DatabaseMigrationServiceConnectionProfileOracleSslOutputReference", version: "14.13.1" };
function databaseMigrationServiceConnectionProfileOracleStaticServiceIpConnectivityToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.databaseMigrationServiceConnectionProfileOracleStaticServiceIpConnectivityToTerraform = databaseMigrationServiceConnectionProfileOracleStaticServiceIpConnectivityToTerraform;
function databaseMigrationServiceConnectionProfileOracleStaticServiceIpConnectivityToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.databaseMigrationServiceConnectionProfileOracleStaticServiceIpConnectivityToHclTerraform = databaseMigrationServiceConnectionProfileOracleStaticServiceIpConnectivityToHclTerraform;
class DatabaseMigrationServiceConnectionProfileOracleStaticServiceIpConnectivityOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DatabaseMigrationServiceConnectionProfileOracleStaticServiceIpConnectivityOutputReference = DatabaseMigrationServiceConnectionProfileOracleStaticServiceIpConnectivityOutputReference;
_t = JSII_RTTI_SYMBOL_1;
DatabaseMigrationServiceConnectionProfileOracleStaticServiceIpConnectivityOutputReference[_t] = { fqn: "@cdktf/provider-google.databaseMigrationServiceConnectionProfile.DatabaseMigrationServiceConnectionProfileOracleStaticServiceIpConnectivityOutputReference", version: "14.13.1" };
function databaseMigrationServiceConnectionProfileOracleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        database_service: cdktf.stringToTerraform(struct.databaseService),
        host: cdktf.stringToTerraform(struct.host),
        password: cdktf.stringToTerraform(struct.password),
        port: cdktf.numberToTerraform(struct.port),
        username: cdktf.stringToTerraform(struct.username),
        forward_ssh_connectivity: databaseMigrationServiceConnectionProfileOracleForwardSshConnectivityToTerraform(struct.forwardSshConnectivity),
        private_connectivity: databaseMigrationServiceConnectionProfileOraclePrivateConnectivityToTerraform(struct.privateConnectivity),
        ssl: databaseMigrationServiceConnectionProfileOracleSslToTerraform(struct.ssl),
        static_service_ip_connectivity: databaseMigrationServiceConnectionProfileOracleStaticServiceIpConnectivityToTerraform(struct.staticServiceIpConnectivity),
    };
}
exports.databaseMigrationServiceConnectionProfileOracleToTerraform = databaseMigrationServiceConnectionProfileOracleToTerraform;
function databaseMigrationServiceConnectionProfileOracleToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        database_service: {
            value: cdktf.stringToHclTerraform(struct.databaseService),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        host: {
            value: cdktf.stringToHclTerraform(struct.host),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        password: {
            value: cdktf.stringToHclTerraform(struct.password),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        port: {
            value: cdktf.numberToHclTerraform(struct.port),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        username: {
            value: cdktf.stringToHclTerraform(struct.username),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        forward_ssh_connectivity: {
            value: databaseMigrationServiceConnectionProfileOracleForwardSshConnectivityToHclTerraform(struct.forwardSshConnectivity),
            isBlock: true,
            type: "list",
            storageClassType: "DatabaseMigrationServiceConnectionProfileOracleForwardSshConnectivityList",
        },
        private_connectivity: {
            value: databaseMigrationServiceConnectionProfileOraclePrivateConnectivityToHclTerraform(struct.privateConnectivity),
            isBlock: true,
            type: "list",
            storageClassType: "DatabaseMigrationServiceConnectionProfileOraclePrivateConnectivityList",
        },
        ssl: {
            value: databaseMigrationServiceConnectionProfileOracleSslToHclTerraform(struct.ssl),
            isBlock: true,
            type: "list",
            storageClassType: "DatabaseMigrationServiceConnectionProfileOracleSslList",
        },
        static_service_ip_connectivity: {
            value: databaseMigrationServiceConnectionProfileOracleStaticServiceIpConnectivityToHclTerraform(struct.staticServiceIpConnectivity),
            isBlock: true,
            type: "list",
            storageClassType: "DatabaseMigrationServiceConnectionProfileOracleStaticServiceIpConnectivityList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.databaseMigrationServiceConnectionProfileOracleToHclTerraform = databaseMigrationServiceConnectionProfileOracleToHclTerraform;
class DatabaseMigrationServiceConnectionProfileOracleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // forward_ssh_connectivity - computed: false, optional: true, required: false
        this._forwardSshConnectivity = new DatabaseMigrationServiceConnectionProfileOracleForwardSshConnectivityOutputReference(this, "forward_ssh_connectivity");
        // private_connectivity - computed: false, optional: true, required: false
        this._privateConnectivity = new DatabaseMigrationServiceConnectionProfileOraclePrivateConnectivityOutputReference(this, "private_connectivity");
        // ssl - computed: false, optional: true, required: false
        this._ssl = new DatabaseMigrationServiceConnectionProfileOracleSslOutputReference(this, "ssl");
        // static_service_ip_connectivity - computed: false, optional: true, required: false
        this._staticServiceIpConnectivity = new DatabaseMigrationServiceConnectionProfileOracleStaticServiceIpConnectivityOutputReference(this, "static_service_ip_connectivity");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._databaseService !== undefined) {
            hasAnyValues = true;
            internalValueResult.databaseService = this._databaseService;
        }
        if (this._host !== undefined) {
            hasAnyValues = true;
            internalValueResult.host = this._host;
        }
        if (this._password !== undefined) {
            hasAnyValues = true;
            internalValueResult.password = this._password;
        }
        if (this._port !== undefined) {
            hasAnyValues = true;
            internalValueResult.port = this._port;
        }
        if (this._username !== undefined) {
            hasAnyValues = true;
            internalValueResult.username = this._username;
        }
        if (this._forwardSshConnectivity?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.forwardSshConnectivity = this._forwardSshConnectivity?.internalValue;
        }
        if (this._privateConnectivity?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.privateConnectivity = this._privateConnectivity?.internalValue;
        }
        if (this._ssl?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ssl = this._ssl?.internalValue;
        }
        if (this._staticServiceIpConnectivity?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.staticServiceIpConnectivity = this._staticServiceIpConnectivity?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._databaseService = undefined;
            this._host = undefined;
            this._password = undefined;
            this._port = undefined;
            this._username = undefined;
            this._forwardSshConnectivity.internalValue = undefined;
            this._privateConnectivity.internalValue = undefined;
            this._ssl.internalValue = undefined;
            this._staticServiceIpConnectivity.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._databaseService = value.databaseService;
            this._host = value.host;
            this._password = value.password;
            this._port = value.port;
            this._username = value.username;
            this._forwardSshConnectivity.internalValue = value.forwardSshConnectivity;
            this._privateConnectivity.internalValue = value.privateConnectivity;
            this._ssl.internalValue = value.ssl;
            this._staticServiceIpConnectivity.internalValue = value.staticServiceIpConnectivity;
        }
    }
    get databaseService() {
        return this.getStringAttribute('database_service');
    }
    set databaseService(value) {
        this._databaseService = value;
    }
    // Temporarily expose input value. Use with caution.
    get databaseServiceInput() {
        return this._databaseService;
    }
    get host() {
        return this.getStringAttribute('host');
    }
    set host(value) {
        this._host = value;
    }
    // Temporarily expose input value. Use with caution.
    get hostInput() {
        return this._host;
    }
    get password() {
        return this.getStringAttribute('password');
    }
    set password(value) {
        this._password = value;
    }
    // Temporarily expose input value. Use with caution.
    get passwordInput() {
        return this._password;
    }
    // password_set - computed: true, optional: false, required: false
    get passwordSet() {
        return this.getBooleanAttribute('password_set');
    }
    get port() {
        return this.getNumberAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
    get username() {
        return this.getStringAttribute('username');
    }
    set username(value) {
        this._username = value;
    }
    // Temporarily expose input value. Use with caution.
    get usernameInput() {
        return this._username;
    }
    get forwardSshConnectivity() {
        return this._forwardSshConnectivity;
    }
    putForwardSshConnectivity(value) {
        this._forwardSshConnectivity.internalValue = value;
    }
    resetForwardSshConnectivity() {
        this._forwardSshConnectivity.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get forwardSshConnectivityInput() {
        return this._forwardSshConnectivity.internalValue;
    }
    get privateConnectivity() {
        return this._privateConnectivity;
    }
    putPrivateConnectivity(value) {
        this._privateConnectivity.internalValue = value;
    }
    resetPrivateConnectivity() {
        this._privateConnectivity.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get privateConnectivityInput() {
        return this._privateConnectivity.internalValue;
    }
    get ssl() {
        return this._ssl;
    }
    putSsl(value) {
        this._ssl.internalValue = value;
    }
    resetSsl() {
        this._ssl.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sslInput() {
        return this._ssl.internalValue;
    }
    get staticServiceIpConnectivity() {
        return this._staticServiceIpConnectivity;
    }
    putStaticServiceIpConnectivity(value) {
        this._staticServiceIpConnectivity.internalValue = value;
    }
    resetStaticServiceIpConnectivity() {
        this._staticServiceIpConnectivity.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get staticServiceIpConnectivityInput() {
        return this._staticServiceIpConnectivity.internalValue;
    }
}
exports.DatabaseMigrationServiceConnectionProfileOracleOutputReference = DatabaseMigrationServiceConnectionProfileOracleOutputReference;
_u = JSII_RTTI_SYMBOL_1;
DatabaseMigrationServiceConnectionProfileOracleOutputReference[_u] = { fqn: "@cdktf/provider-google.databaseMigrationServiceConnectionProfile.DatabaseMigrationServiceConnectionProfileOracleOutputReference", version: "14.13.1" };
function databaseMigrationServiceConnectionProfilePostgresqlSslToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        ca_certificate: cdktf.stringToTerraform(struct.caCertificate),
        client_certificate: cdktf.stringToTerraform(struct.clientCertificate),
        client_key: cdktf.stringToTerraform(struct.clientKey),
    };
}
exports.databaseMigrationServiceConnectionProfilePostgresqlSslToTerraform = databaseMigrationServiceConnectionProfilePostgresqlSslToTerraform;
function databaseMigrationServiceConnectionProfilePostgresqlSslToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        ca_certificate: {
            value: cdktf.stringToHclTerraform(struct.caCertificate),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        client_certificate: {
            value: cdktf.stringToHclTerraform(struct.clientCertificate),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        client_key: {
            value: cdktf.stringToHclTerraform(struct.clientKey),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.databaseMigrationServiceConnectionProfilePostgresqlSslToHclTerraform = databaseMigrationServiceConnectionProfilePostgresqlSslToHclTerraform;
class DatabaseMigrationServiceConnectionProfilePostgresqlSslOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._caCertificate !== undefined) {
            hasAnyValues = true;
            internalValueResult.caCertificate = this._caCertificate;
        }
        if (this._clientCertificate !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientCertificate = this._clientCertificate;
        }
        if (this._clientKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientKey = this._clientKey;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._caCertificate = undefined;
            this._clientCertificate = undefined;
            this._clientKey = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._caCertificate = value.caCertificate;
            this._clientCertificate = value.clientCertificate;
            this._clientKey = value.clientKey;
        }
    }
    get caCertificate() {
        return this.getStringAttribute('ca_certificate');
    }
    set caCertificate(value) {
        this._caCertificate = value;
    }
    // Temporarily expose input value. Use with caution.
    get caCertificateInput() {
        return this._caCertificate;
    }
    get clientCertificate() {
        return this.getStringAttribute('client_certificate');
    }
    set clientCertificate(value) {
        this._clientCertificate = value;
    }
    resetClientCertificate() {
        this._clientCertificate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientCertificateInput() {
        return this._clientCertificate;
    }
    get clientKey() {
        return this.getStringAttribute('client_key');
    }
    set clientKey(value) {
        this._clientKey = value;
    }
    resetClientKey() {
        this._clientKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientKeyInput() {
        return this._clientKey;
    }
    // type - computed: true, optional: false, required: false
    get type() {
        return this.getStringAttribute('type');
    }
}
exports.DatabaseMigrationServiceConnectionProfilePostgresqlSslOutputReference = DatabaseMigrationServiceConnectionProfilePostgresqlSslOutputReference;
_v = JSII_RTTI_SYMBOL_1;
DatabaseMigrationServiceConnectionProfilePostgresqlSslOutputReference[_v] = { fqn: "@cdktf/provider-google.databaseMigrationServiceConnectionProfile.DatabaseMigrationServiceConnectionProfilePostgresqlSslOutputReference", version: "14.13.1" };
function databaseMigrationServiceConnectionProfilePostgresqlToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        alloydb_cluster_id: cdktf.stringToTerraform(struct.alloydbClusterId),
        cloud_sql_id: cdktf.stringToTerraform(struct.cloudSqlId),
        host: cdktf.stringToTerraform(struct.host),
        password: cdktf.stringToTerraform(struct.password),
        port: cdktf.numberToTerraform(struct.port),
        username: cdktf.stringToTerraform(struct.username),
        ssl: databaseMigrationServiceConnectionProfilePostgresqlSslToTerraform(struct.ssl),
    };
}
exports.databaseMigrationServiceConnectionProfilePostgresqlToTerraform = databaseMigrationServiceConnectionProfilePostgresqlToTerraform;
function databaseMigrationServiceConnectionProfilePostgresqlToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        alloydb_cluster_id: {
            value: cdktf.stringToHclTerraform(struct.alloydbClusterId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cloud_sql_id: {
            value: cdktf.stringToHclTerraform(struct.cloudSqlId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        host: {
            value: cdktf.stringToHclTerraform(struct.host),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        password: {
            value: cdktf.stringToHclTerraform(struct.password),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        port: {
            value: cdktf.numberToHclTerraform(struct.port),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        username: {
            value: cdktf.stringToHclTerraform(struct.username),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        ssl: {
            value: databaseMigrationServiceConnectionProfilePostgresqlSslToHclTerraform(struct.ssl),
            isBlock: true,
            type: "list",
            storageClassType: "DatabaseMigrationServiceConnectionProfilePostgresqlSslList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.databaseMigrationServiceConnectionProfilePostgresqlToHclTerraform = databaseMigrationServiceConnectionProfilePostgresqlToHclTerraform;
class DatabaseMigrationServiceConnectionProfilePostgresqlOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // ssl - computed: false, optional: true, required: false
        this._ssl = new DatabaseMigrationServiceConnectionProfilePostgresqlSslOutputReference(this, "ssl");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._alloydbClusterId !== undefined) {
            hasAnyValues = true;
            internalValueResult.alloydbClusterId = this._alloydbClusterId;
        }
        if (this._cloudSqlId !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudSqlId = this._cloudSqlId;
        }
        if (this._host !== undefined) {
            hasAnyValues = true;
            internalValueResult.host = this._host;
        }
        if (this._password !== undefined) {
            hasAnyValues = true;
            internalValueResult.password = this._password;
        }
        if (this._port !== undefined) {
            hasAnyValues = true;
            internalValueResult.port = this._port;
        }
        if (this._username !== undefined) {
            hasAnyValues = true;
            internalValueResult.username = this._username;
        }
        if (this._ssl?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ssl = this._ssl?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._alloydbClusterId = undefined;
            this._cloudSqlId = undefined;
            this._host = undefined;
            this._password = undefined;
            this._port = undefined;
            this._username = undefined;
            this._ssl.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._alloydbClusterId = value.alloydbClusterId;
            this._cloudSqlId = value.cloudSqlId;
            this._host = value.host;
            this._password = value.password;
            this._port = value.port;
            this._username = value.username;
            this._ssl.internalValue = value.ssl;
        }
    }
    get alloydbClusterId() {
        return this.getStringAttribute('alloydb_cluster_id');
    }
    set alloydbClusterId(value) {
        this._alloydbClusterId = value;
    }
    resetAlloydbClusterId() {
        this._alloydbClusterId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get alloydbClusterIdInput() {
        return this._alloydbClusterId;
    }
    get cloudSqlId() {
        return this.getStringAttribute('cloud_sql_id');
    }
    set cloudSqlId(value) {
        this._cloudSqlId = value;
    }
    resetCloudSqlId() {
        this._cloudSqlId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudSqlIdInput() {
        return this._cloudSqlId;
    }
    get host() {
        return this.getStringAttribute('host');
    }
    set host(value) {
        this._host = value;
    }
    resetHost() {
        this._host = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostInput() {
        return this._host;
    }
    // network_architecture - computed: true, optional: false, required: false
    get networkArchitecture() {
        return this.getStringAttribute('network_architecture');
    }
    get password() {
        return this.getStringAttribute('password');
    }
    set password(value) {
        this._password = value;
    }
    resetPassword() {
        this._password = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get passwordInput() {
        return this._password;
    }
    // password_set - computed: true, optional: false, required: false
    get passwordSet() {
        return this.getBooleanAttribute('password_set');
    }
    get port() {
        return this.getNumberAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    resetPort() {
        this._port = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
    get username() {
        return this.getStringAttribute('username');
    }
    set username(value) {
        this._username = value;
    }
    resetUsername() {
        this._username = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get usernameInput() {
        return this._username;
    }
    get ssl() {
        return this._ssl;
    }
    putSsl(value) {
        this._ssl.internalValue = value;
    }
    resetSsl() {
        this._ssl.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sslInput() {
        return this._ssl.internalValue;
    }
}
exports.DatabaseMigrationServiceConnectionProfilePostgresqlOutputReference = DatabaseMigrationServiceConnectionProfilePostgresqlOutputReference;
_w = JSII_RTTI_SYMBOL_1;
DatabaseMigrationServiceConnectionProfilePostgresqlOutputReference[_w] = { fqn: "@cdktf/provider-google.databaseMigrationServiceConnectionProfile.DatabaseMigrationServiceConnectionProfilePostgresqlOutputReference", version: "14.13.1" };
function databaseMigrationServiceConnectionProfileTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.databaseMigrationServiceConnectionProfileTimeoutsToTerraform = databaseMigrationServiceConnectionProfileTimeoutsToTerraform;
function databaseMigrationServiceConnectionProfileTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.databaseMigrationServiceConnectionProfileTimeoutsToHclTerraform = databaseMigrationServiceConnectionProfileTimeoutsToHclTerraform;
class DatabaseMigrationServiceConnectionProfileTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.DatabaseMigrationServiceConnectionProfileTimeoutsOutputReference = DatabaseMigrationServiceConnectionProfileTimeoutsOutputReference;
_x = JSII_RTTI_SYMBOL_1;
DatabaseMigrationServiceConnectionProfileTimeoutsOutputReference[_x] = { fqn: "@cdktf/provider-google.databaseMigrationServiceConnectionProfile.DatabaseMigrationServiceConnectionProfileTimeoutsOutputReference", version: "14.13.1" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/database_migration_service_connection_profile google_database_migration_service_connection_profile}
*/
class DatabaseMigrationServiceConnectionProfile extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a DatabaseMigrationServiceConnectionProfile resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the DatabaseMigrationServiceConnectionProfile to import
    * @param importFromId The id of the existing DatabaseMigrationServiceConnectionProfile that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/database_migration_service_connection_profile#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the DatabaseMigrationServiceConnectionProfile to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_database_migration_service_connection_profile", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/database_migration_service_connection_profile google_database_migration_service_connection_profile} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DatabaseMigrationServiceConnectionProfileConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_database_migration_service_connection_profile',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // effective_labels - computed: true, optional: false, required: false
        this._effectiveLabels = new cdktf.StringMap(this, "effective_labels");
        // error - computed: true, optional: false, required: false
        this._error = new DatabaseMigrationServiceConnectionProfileErrorList(this, "error", false);
        // terraform_labels - computed: true, optional: false, required: false
        this._terraformLabels = new cdktf.StringMap(this, "terraform_labels");
        // alloydb - computed: false, optional: true, required: false
        this._alloydb = new DatabaseMigrationServiceConnectionProfileAlloydbOutputReference(this, "alloydb");
        // cloudsql - computed: false, optional: true, required: false
        this._cloudsql = new DatabaseMigrationServiceConnectionProfileCloudsqlOutputReference(this, "cloudsql");
        // mysql - computed: false, optional: true, required: false
        this._mysql = new DatabaseMigrationServiceConnectionProfileMysqlOutputReference(this, "mysql");
        // oracle - computed: false, optional: true, required: false
        this._oracle = new DatabaseMigrationServiceConnectionProfileOracleOutputReference(this, "oracle");
        // postgresql - computed: false, optional: true, required: false
        this._postgresql = new DatabaseMigrationServiceConnectionProfilePostgresqlOutputReference(this, "postgresql");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new DatabaseMigrationServiceConnectionProfileTimeoutsOutputReference(this, "timeouts");
        this._connectionProfileId = config.connectionProfileId;
        this._displayName = config.displayName;
        this._id = config.id;
        this._labels = config.labels;
        this._location = config.location;
        this._project = config.project;
        this._alloydb.internalValue = config.alloydb;
        this._cloudsql.internalValue = config.cloudsql;
        this._mysql.internalValue = config.mysql;
        this._oracle.internalValue = config.oracle;
        this._postgresql.internalValue = config.postgresql;
        this._timeouts.internalValue = config.timeouts;
    }
    get connectionProfileId() {
        return this.getStringAttribute('connection_profile_id');
    }
    set connectionProfileId(value) {
        this._connectionProfileId = value;
    }
    // Temporarily expose input value. Use with caution.
    get connectionProfileIdInput() {
        return this._connectionProfileId;
    }
    // create_time - computed: true, optional: false, required: false
    get createTime() {
        return this.getStringAttribute('create_time');
    }
    // dbprovider - computed: true, optional: false, required: false
    get dbprovider() {
        return this.getStringAttribute('dbprovider');
    }
    get displayName() {
        return this.getStringAttribute('display_name');
    }
    set displayName(value) {
        this._displayName = value;
    }
    resetDisplayName() {
        this._displayName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get displayNameInput() {
        return this._displayName;
    }
    get effectiveLabels() {
        return this._effectiveLabels;
    }
    get error() {
        return this._error;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    resetLocation() {
        this._location = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    // state - computed: true, optional: false, required: false
    get state() {
        return this.getStringAttribute('state');
    }
    get terraformLabels() {
        return this._terraformLabels;
    }
    get alloydb() {
        return this._alloydb;
    }
    putAlloydb(value) {
        this._alloydb.internalValue = value;
    }
    resetAlloydb() {
        this._alloydb.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get alloydbInput() {
        return this._alloydb.internalValue;
    }
    get cloudsql() {
        return this._cloudsql;
    }
    putCloudsql(value) {
        this._cloudsql.internalValue = value;
    }
    resetCloudsql() {
        this._cloudsql.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudsqlInput() {
        return this._cloudsql.internalValue;
    }
    get mysql() {
        return this._mysql;
    }
    putMysql(value) {
        this._mysql.internalValue = value;
    }
    resetMysql() {
        this._mysql.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mysqlInput() {
        return this._mysql.internalValue;
    }
    get oracle() {
        return this._oracle;
    }
    putOracle(value) {
        this._oracle.internalValue = value;
    }
    resetOracle() {
        this._oracle.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get oracleInput() {
        return this._oracle.internalValue;
    }
    get postgresql() {
        return this._postgresql;
    }
    putPostgresql(value) {
        this._postgresql.internalValue = value;
    }
    resetPostgresql() {
        this._postgresql.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get postgresqlInput() {
        return this._postgresql.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            connection_profile_id: cdktf.stringToTerraform(this._connectionProfileId),
            display_name: cdktf.stringToTerraform(this._displayName),
            id: cdktf.stringToTerraform(this._id),
            labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._labels),
            location: cdktf.stringToTerraform(this._location),
            project: cdktf.stringToTerraform(this._project),
            alloydb: databaseMigrationServiceConnectionProfileAlloydbToTerraform(this._alloydb.internalValue),
            cloudsql: databaseMigrationServiceConnectionProfileCloudsqlToTerraform(this._cloudsql.internalValue),
            mysql: databaseMigrationServiceConnectionProfileMysqlToTerraform(this._mysql.internalValue),
            oracle: databaseMigrationServiceConnectionProfileOracleToTerraform(this._oracle.internalValue),
            postgresql: databaseMigrationServiceConnectionProfilePostgresqlToTerraform(this._postgresql.internalValue),
            timeouts: databaseMigrationServiceConnectionProfileTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            connection_profile_id: {
                value: cdktf.stringToHclTerraform(this._connectionProfileId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            display_name: {
                value: cdktf.stringToHclTerraform(this._displayName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            labels: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._labels),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            location: {
                value: cdktf.stringToHclTerraform(this._location),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            project: {
                value: cdktf.stringToHclTerraform(this._project),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            alloydb: {
                value: databaseMigrationServiceConnectionProfileAlloydbToHclTerraform(this._alloydb.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "DatabaseMigrationServiceConnectionProfileAlloydbList",
            },
            cloudsql: {
                value: databaseMigrationServiceConnectionProfileCloudsqlToHclTerraform(this._cloudsql.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "DatabaseMigrationServiceConnectionProfileCloudsqlList",
            },
            mysql: {
                value: databaseMigrationServiceConnectionProfileMysqlToHclTerraform(this._mysql.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "DatabaseMigrationServiceConnectionProfileMysqlList",
            },
            oracle: {
                value: databaseMigrationServiceConnectionProfileOracleToHclTerraform(this._oracle.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "DatabaseMigrationServiceConnectionProfileOracleList",
            },
            postgresql: {
                value: databaseMigrationServiceConnectionProfilePostgresqlToHclTerraform(this._postgresql.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "DatabaseMigrationServiceConnectionProfilePostgresqlList",
            },
            timeouts: {
                value: databaseMigrationServiceConnectionProfileTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "DatabaseMigrationServiceConnectionProfileTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.DatabaseMigrationServiceConnectionProfile = DatabaseMigrationServiceConnectionProfile;
_y = JSII_RTTI_SYMBOL_1;
DatabaseMigrationServiceConnectionProfile[_y] = { fqn: "@cdktf/provider-google.databaseMigrationServiceConnectionProfile.DatabaseMigrationServiceConnectionProfile", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
DatabaseMigrationServiceConnectionProfile.tfResourceType = "google_database_migration_service_connection_profile";
//# sourceMappingURL=data:application/json;base64,