"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x;
Object.defineProperty(exports, "__esModule", { value: true });
exports.monitoringSloWindowsBasedSliMetricMeanInRangeRangeToHclTerraform = exports.monitoringSloWindowsBasedSliMetricMeanInRangeRangeToTerraform = exports.MonitoringSloWindowsBasedSliGoodTotalRatioThresholdOutputReference = exports.monitoringSloWindowsBasedSliGoodTotalRatioThresholdToHclTerraform = exports.monitoringSloWindowsBasedSliGoodTotalRatioThresholdToTerraform = exports.MonitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceOutputReference = exports.monitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceToHclTerraform = exports.monitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceToTerraform = exports.MonitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceGoodTotalRatioOutputReference = exports.monitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceGoodTotalRatioToHclTerraform = exports.monitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceGoodTotalRatioToTerraform = exports.MonitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutOutputReference = exports.monitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutToHclTerraform = exports.monitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutToTerraform = exports.MonitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutRangeOutputReference = exports.monitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutRangeToHclTerraform = exports.monitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutRangeToTerraform = exports.MonitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceOutputReference = exports.monitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceToHclTerraform = exports.monitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceToTerraform = exports.MonitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceLatencyOutputReference = exports.monitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceLatencyToHclTerraform = exports.monitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceLatencyToTerraform = exports.MonitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceAvailabilityOutputReference = exports.monitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceAvailabilityToHclTerraform = exports.monitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceAvailabilityToTerraform = exports.MonitoringSloTimeoutsOutputReference = exports.monitoringSloTimeoutsToHclTerraform = exports.monitoringSloTimeoutsToTerraform = exports.MonitoringSloRequestBasedSliOutputReference = exports.monitoringSloRequestBasedSliToHclTerraform = exports.monitoringSloRequestBasedSliToTerraform = exports.MonitoringSloRequestBasedSliGoodTotalRatioOutputReference = exports.monitoringSloRequestBasedSliGoodTotalRatioToHclTerraform = exports.monitoringSloRequestBasedSliGoodTotalRatioToTerraform = exports.MonitoringSloRequestBasedSliDistributionCutOutputReference = exports.monitoringSloRequestBasedSliDistributionCutToHclTerraform = exports.monitoringSloRequestBasedSliDistributionCutToTerraform = exports.MonitoringSloRequestBasedSliDistributionCutRangeOutputReference = exports.monitoringSloRequestBasedSliDistributionCutRangeToHclTerraform = exports.monitoringSloRequestBasedSliDistributionCutRangeToTerraform = exports.MonitoringSloBasicSliOutputReference = exports.monitoringSloBasicSliToHclTerraform = exports.monitoringSloBasicSliToTerraform = exports.MonitoringSloBasicSliLatencyOutputReference = exports.monitoringSloBasicSliLatencyToHclTerraform = exports.monitoringSloBasicSliLatencyToTerraform = exports.MonitoringSloBasicSliAvailabilityOutputReference = exports.monitoringSloBasicSliAvailabilityToHclTerraform = exports.monitoringSloBasicSliAvailabilityToTerraform = void 0;
exports.MonitoringSlo = exports.MonitoringSloWindowsBasedSliOutputReference = exports.monitoringSloWindowsBasedSliToHclTerraform = exports.monitoringSloWindowsBasedSliToTerraform = exports.MonitoringSloWindowsBasedSliMetricSumInRangeOutputReference = exports.monitoringSloWindowsBasedSliMetricSumInRangeToHclTerraform = exports.monitoringSloWindowsBasedSliMetricSumInRangeToTerraform = exports.MonitoringSloWindowsBasedSliMetricSumInRangeRangeOutputReference = exports.monitoringSloWindowsBasedSliMetricSumInRangeRangeToHclTerraform = exports.monitoringSloWindowsBasedSliMetricSumInRangeRangeToTerraform = exports.MonitoringSloWindowsBasedSliMetricMeanInRangeOutputReference = exports.monitoringSloWindowsBasedSliMetricMeanInRangeToHclTerraform = exports.monitoringSloWindowsBasedSliMetricMeanInRangeToTerraform = exports.MonitoringSloWindowsBasedSliMetricMeanInRangeRangeOutputReference = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function monitoringSloBasicSliAvailabilityToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.monitoringSloBasicSliAvailabilityToTerraform = monitoringSloBasicSliAvailabilityToTerraform;
function monitoringSloBasicSliAvailabilityToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.monitoringSloBasicSliAvailabilityToHclTerraform = monitoringSloBasicSliAvailabilityToHclTerraform;
class MonitoringSloBasicSliAvailabilityOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
}
exports.MonitoringSloBasicSliAvailabilityOutputReference = MonitoringSloBasicSliAvailabilityOutputReference;
_a = JSII_RTTI_SYMBOL_1;
MonitoringSloBasicSliAvailabilityOutputReference[_a] = { fqn: "@cdktf/provider-google.monitoringSlo.MonitoringSloBasicSliAvailabilityOutputReference", version: "14.13.1" };
function monitoringSloBasicSliLatencyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        threshold: cdktf.stringToTerraform(struct.threshold),
    };
}
exports.monitoringSloBasicSliLatencyToTerraform = monitoringSloBasicSliLatencyToTerraform;
function monitoringSloBasicSliLatencyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        threshold: {
            value: cdktf.stringToHclTerraform(struct.threshold),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.monitoringSloBasicSliLatencyToHclTerraform = monitoringSloBasicSliLatencyToHclTerraform;
class MonitoringSloBasicSliLatencyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._threshold !== undefined) {
            hasAnyValues = true;
            internalValueResult.threshold = this._threshold;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._threshold = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._threshold = value.threshold;
        }
    }
    get threshold() {
        return this.getStringAttribute('threshold');
    }
    set threshold(value) {
        this._threshold = value;
    }
    // Temporarily expose input value. Use with caution.
    get thresholdInput() {
        return this._threshold;
    }
}
exports.MonitoringSloBasicSliLatencyOutputReference = MonitoringSloBasicSliLatencyOutputReference;
_b = JSII_RTTI_SYMBOL_1;
MonitoringSloBasicSliLatencyOutputReference[_b] = { fqn: "@cdktf/provider-google.monitoringSlo.MonitoringSloBasicSliLatencyOutputReference", version: "14.13.1" };
function monitoringSloBasicSliToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        location: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.location),
        method: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.method),
        version: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.version),
        availability: monitoringSloBasicSliAvailabilityToTerraform(struct.availability),
        latency: monitoringSloBasicSliLatencyToTerraform(struct.latency),
    };
}
exports.monitoringSloBasicSliToTerraform = monitoringSloBasicSliToTerraform;
function monitoringSloBasicSliToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        location: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.location),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        method: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.method),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        version: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.version),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        availability: {
            value: monitoringSloBasicSliAvailabilityToHclTerraform(struct.availability),
            isBlock: true,
            type: "list",
            storageClassType: "MonitoringSloBasicSliAvailabilityList",
        },
        latency: {
            value: monitoringSloBasicSliLatencyToHclTerraform(struct.latency),
            isBlock: true,
            type: "list",
            storageClassType: "MonitoringSloBasicSliLatencyList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.monitoringSloBasicSliToHclTerraform = monitoringSloBasicSliToHclTerraform;
class MonitoringSloBasicSliOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // availability - computed: false, optional: true, required: false
        this._availability = new MonitoringSloBasicSliAvailabilityOutputReference(this, "availability");
        // latency - computed: false, optional: true, required: false
        this._latency = new MonitoringSloBasicSliLatencyOutputReference(this, "latency");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._location !== undefined) {
            hasAnyValues = true;
            internalValueResult.location = this._location;
        }
        if (this._method !== undefined) {
            hasAnyValues = true;
            internalValueResult.method = this._method;
        }
        if (this._version !== undefined) {
            hasAnyValues = true;
            internalValueResult.version = this._version;
        }
        if (this._availability?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.availability = this._availability?.internalValue;
        }
        if (this._latency?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.latency = this._latency?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._location = undefined;
            this._method = undefined;
            this._version = undefined;
            this._availability.internalValue = undefined;
            this._latency.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._location = value.location;
            this._method = value.method;
            this._version = value.version;
            this._availability.internalValue = value.availability;
            this._latency.internalValue = value.latency;
        }
    }
    get location() {
        return cdktf.Fn.tolist(this.getListAttribute('location'));
    }
    set location(value) {
        this._location = value;
    }
    resetLocation() {
        this._location = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    get method() {
        return cdktf.Fn.tolist(this.getListAttribute('method'));
    }
    set method(value) {
        this._method = value;
    }
    resetMethod() {
        this._method = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get methodInput() {
        return this._method;
    }
    get version() {
        return cdktf.Fn.tolist(this.getListAttribute('version'));
    }
    set version(value) {
        this._version = value;
    }
    resetVersion() {
        this._version = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get versionInput() {
        return this._version;
    }
    get availability() {
        return this._availability;
    }
    putAvailability(value) {
        this._availability.internalValue = value;
    }
    resetAvailability() {
        this._availability.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get availabilityInput() {
        return this._availability.internalValue;
    }
    get latency() {
        return this._latency;
    }
    putLatency(value) {
        this._latency.internalValue = value;
    }
    resetLatency() {
        this._latency.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get latencyInput() {
        return this._latency.internalValue;
    }
}
exports.MonitoringSloBasicSliOutputReference = MonitoringSloBasicSliOutputReference;
_c = JSII_RTTI_SYMBOL_1;
MonitoringSloBasicSliOutputReference[_c] = { fqn: "@cdktf/provider-google.monitoringSlo.MonitoringSloBasicSliOutputReference", version: "14.13.1" };
function monitoringSloRequestBasedSliDistributionCutRangeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max: cdktf.numberToTerraform(struct.max),
        min: cdktf.numberToTerraform(struct.min),
    };
}
exports.monitoringSloRequestBasedSliDistributionCutRangeToTerraform = monitoringSloRequestBasedSliDistributionCutRangeToTerraform;
function monitoringSloRequestBasedSliDistributionCutRangeToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        max: {
            value: cdktf.numberToHclTerraform(struct.max),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        min: {
            value: cdktf.numberToHclTerraform(struct.min),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.monitoringSloRequestBasedSliDistributionCutRangeToHclTerraform = monitoringSloRequestBasedSliDistributionCutRangeToHclTerraform;
class MonitoringSloRequestBasedSliDistributionCutRangeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._max !== undefined) {
            hasAnyValues = true;
            internalValueResult.max = this._max;
        }
        if (this._min !== undefined) {
            hasAnyValues = true;
            internalValueResult.min = this._min;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._max = undefined;
            this._min = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._max = value.max;
            this._min = value.min;
        }
    }
    get max() {
        return this.getNumberAttribute('max');
    }
    set max(value) {
        this._max = value;
    }
    resetMax() {
        this._max = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxInput() {
        return this._max;
    }
    get min() {
        return this.getNumberAttribute('min');
    }
    set min(value) {
        this._min = value;
    }
    resetMin() {
        this._min = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minInput() {
        return this._min;
    }
}
exports.MonitoringSloRequestBasedSliDistributionCutRangeOutputReference = MonitoringSloRequestBasedSliDistributionCutRangeOutputReference;
_d = JSII_RTTI_SYMBOL_1;
MonitoringSloRequestBasedSliDistributionCutRangeOutputReference[_d] = { fqn: "@cdktf/provider-google.monitoringSlo.MonitoringSloRequestBasedSliDistributionCutRangeOutputReference", version: "14.13.1" };
function monitoringSloRequestBasedSliDistributionCutToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        distribution_filter: cdktf.stringToTerraform(struct.distributionFilter),
        range: monitoringSloRequestBasedSliDistributionCutRangeToTerraform(struct.range),
    };
}
exports.monitoringSloRequestBasedSliDistributionCutToTerraform = monitoringSloRequestBasedSliDistributionCutToTerraform;
function monitoringSloRequestBasedSliDistributionCutToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        distribution_filter: {
            value: cdktf.stringToHclTerraform(struct.distributionFilter),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        range: {
            value: monitoringSloRequestBasedSliDistributionCutRangeToHclTerraform(struct.range),
            isBlock: true,
            type: "list",
            storageClassType: "MonitoringSloRequestBasedSliDistributionCutRangeList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.monitoringSloRequestBasedSliDistributionCutToHclTerraform = monitoringSloRequestBasedSliDistributionCutToHclTerraform;
class MonitoringSloRequestBasedSliDistributionCutOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // range - computed: false, optional: false, required: true
        this._range = new MonitoringSloRequestBasedSliDistributionCutRangeOutputReference(this, "range");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._distributionFilter !== undefined) {
            hasAnyValues = true;
            internalValueResult.distributionFilter = this._distributionFilter;
        }
        if (this._range?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.range = this._range?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._distributionFilter = undefined;
            this._range.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._distributionFilter = value.distributionFilter;
            this._range.internalValue = value.range;
        }
    }
    get distributionFilter() {
        return this.getStringAttribute('distribution_filter');
    }
    set distributionFilter(value) {
        this._distributionFilter = value;
    }
    // Temporarily expose input value. Use with caution.
    get distributionFilterInput() {
        return this._distributionFilter;
    }
    get range() {
        return this._range;
    }
    putRange(value) {
        this._range.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get rangeInput() {
        return this._range.internalValue;
    }
}
exports.MonitoringSloRequestBasedSliDistributionCutOutputReference = MonitoringSloRequestBasedSliDistributionCutOutputReference;
_e = JSII_RTTI_SYMBOL_1;
MonitoringSloRequestBasedSliDistributionCutOutputReference[_e] = { fqn: "@cdktf/provider-google.monitoringSlo.MonitoringSloRequestBasedSliDistributionCutOutputReference", version: "14.13.1" };
function monitoringSloRequestBasedSliGoodTotalRatioToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bad_service_filter: cdktf.stringToTerraform(struct.badServiceFilter),
        good_service_filter: cdktf.stringToTerraform(struct.goodServiceFilter),
        total_service_filter: cdktf.stringToTerraform(struct.totalServiceFilter),
    };
}
exports.monitoringSloRequestBasedSliGoodTotalRatioToTerraform = monitoringSloRequestBasedSliGoodTotalRatioToTerraform;
function monitoringSloRequestBasedSliGoodTotalRatioToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        bad_service_filter: {
            value: cdktf.stringToHclTerraform(struct.badServiceFilter),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        good_service_filter: {
            value: cdktf.stringToHclTerraform(struct.goodServiceFilter),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        total_service_filter: {
            value: cdktf.stringToHclTerraform(struct.totalServiceFilter),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.monitoringSloRequestBasedSliGoodTotalRatioToHclTerraform = monitoringSloRequestBasedSliGoodTotalRatioToHclTerraform;
class MonitoringSloRequestBasedSliGoodTotalRatioOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._badServiceFilter !== undefined) {
            hasAnyValues = true;
            internalValueResult.badServiceFilter = this._badServiceFilter;
        }
        if (this._goodServiceFilter !== undefined) {
            hasAnyValues = true;
            internalValueResult.goodServiceFilter = this._goodServiceFilter;
        }
        if (this._totalServiceFilter !== undefined) {
            hasAnyValues = true;
            internalValueResult.totalServiceFilter = this._totalServiceFilter;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._badServiceFilter = undefined;
            this._goodServiceFilter = undefined;
            this._totalServiceFilter = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._badServiceFilter = value.badServiceFilter;
            this._goodServiceFilter = value.goodServiceFilter;
            this._totalServiceFilter = value.totalServiceFilter;
        }
    }
    get badServiceFilter() {
        return this.getStringAttribute('bad_service_filter');
    }
    set badServiceFilter(value) {
        this._badServiceFilter = value;
    }
    resetBadServiceFilter() {
        this._badServiceFilter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get badServiceFilterInput() {
        return this._badServiceFilter;
    }
    get goodServiceFilter() {
        return this.getStringAttribute('good_service_filter');
    }
    set goodServiceFilter(value) {
        this._goodServiceFilter = value;
    }
    resetGoodServiceFilter() {
        this._goodServiceFilter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get goodServiceFilterInput() {
        return this._goodServiceFilter;
    }
    get totalServiceFilter() {
        return this.getStringAttribute('total_service_filter');
    }
    set totalServiceFilter(value) {
        this._totalServiceFilter = value;
    }
    resetTotalServiceFilter() {
        this._totalServiceFilter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get totalServiceFilterInput() {
        return this._totalServiceFilter;
    }
}
exports.MonitoringSloRequestBasedSliGoodTotalRatioOutputReference = MonitoringSloRequestBasedSliGoodTotalRatioOutputReference;
_f = JSII_RTTI_SYMBOL_1;
MonitoringSloRequestBasedSliGoodTotalRatioOutputReference[_f] = { fqn: "@cdktf/provider-google.monitoringSlo.MonitoringSloRequestBasedSliGoodTotalRatioOutputReference", version: "14.13.1" };
function monitoringSloRequestBasedSliToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        distribution_cut: monitoringSloRequestBasedSliDistributionCutToTerraform(struct.distributionCut),
        good_total_ratio: monitoringSloRequestBasedSliGoodTotalRatioToTerraform(struct.goodTotalRatio),
    };
}
exports.monitoringSloRequestBasedSliToTerraform = monitoringSloRequestBasedSliToTerraform;
function monitoringSloRequestBasedSliToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        distribution_cut: {
            value: monitoringSloRequestBasedSliDistributionCutToHclTerraform(struct.distributionCut),
            isBlock: true,
            type: "list",
            storageClassType: "MonitoringSloRequestBasedSliDistributionCutList",
        },
        good_total_ratio: {
            value: monitoringSloRequestBasedSliGoodTotalRatioToHclTerraform(struct.goodTotalRatio),
            isBlock: true,
            type: "list",
            storageClassType: "MonitoringSloRequestBasedSliGoodTotalRatioList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.monitoringSloRequestBasedSliToHclTerraform = monitoringSloRequestBasedSliToHclTerraform;
class MonitoringSloRequestBasedSliOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // distribution_cut - computed: false, optional: true, required: false
        this._distributionCut = new MonitoringSloRequestBasedSliDistributionCutOutputReference(this, "distribution_cut");
        // good_total_ratio - computed: false, optional: true, required: false
        this._goodTotalRatio = new MonitoringSloRequestBasedSliGoodTotalRatioOutputReference(this, "good_total_ratio");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._distributionCut?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.distributionCut = this._distributionCut?.internalValue;
        }
        if (this._goodTotalRatio?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.goodTotalRatio = this._goodTotalRatio?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._distributionCut.internalValue = undefined;
            this._goodTotalRatio.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._distributionCut.internalValue = value.distributionCut;
            this._goodTotalRatio.internalValue = value.goodTotalRatio;
        }
    }
    get distributionCut() {
        return this._distributionCut;
    }
    putDistributionCut(value) {
        this._distributionCut.internalValue = value;
    }
    resetDistributionCut() {
        this._distributionCut.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get distributionCutInput() {
        return this._distributionCut.internalValue;
    }
    get goodTotalRatio() {
        return this._goodTotalRatio;
    }
    putGoodTotalRatio(value) {
        this._goodTotalRatio.internalValue = value;
    }
    resetGoodTotalRatio() {
        this._goodTotalRatio.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get goodTotalRatioInput() {
        return this._goodTotalRatio.internalValue;
    }
}
exports.MonitoringSloRequestBasedSliOutputReference = MonitoringSloRequestBasedSliOutputReference;
_g = JSII_RTTI_SYMBOL_1;
MonitoringSloRequestBasedSliOutputReference[_g] = { fqn: "@cdktf/provider-google.monitoringSlo.MonitoringSloRequestBasedSliOutputReference", version: "14.13.1" };
function monitoringSloTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.monitoringSloTimeoutsToTerraform = monitoringSloTimeoutsToTerraform;
function monitoringSloTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.monitoringSloTimeoutsToHclTerraform = monitoringSloTimeoutsToHclTerraform;
class MonitoringSloTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.MonitoringSloTimeoutsOutputReference = MonitoringSloTimeoutsOutputReference;
_h = JSII_RTTI_SYMBOL_1;
MonitoringSloTimeoutsOutputReference[_h] = { fqn: "@cdktf/provider-google.monitoringSlo.MonitoringSloTimeoutsOutputReference", version: "14.13.1" };
function monitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceAvailabilityToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.monitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceAvailabilityToTerraform = monitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceAvailabilityToTerraform;
function monitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceAvailabilityToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.monitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceAvailabilityToHclTerraform = monitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceAvailabilityToHclTerraform;
class MonitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceAvailabilityOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
}
exports.MonitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceAvailabilityOutputReference = MonitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceAvailabilityOutputReference;
_j = JSII_RTTI_SYMBOL_1;
MonitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceAvailabilityOutputReference[_j] = { fqn: "@cdktf/provider-google.monitoringSlo.MonitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceAvailabilityOutputReference", version: "14.13.1" };
function monitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceLatencyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        threshold: cdktf.stringToTerraform(struct.threshold),
    };
}
exports.monitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceLatencyToTerraform = monitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceLatencyToTerraform;
function monitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceLatencyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        threshold: {
            value: cdktf.stringToHclTerraform(struct.threshold),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.monitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceLatencyToHclTerraform = monitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceLatencyToHclTerraform;
class MonitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceLatencyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._threshold !== undefined) {
            hasAnyValues = true;
            internalValueResult.threshold = this._threshold;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._threshold = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._threshold = value.threshold;
        }
    }
    get threshold() {
        return this.getStringAttribute('threshold');
    }
    set threshold(value) {
        this._threshold = value;
    }
    // Temporarily expose input value. Use with caution.
    get thresholdInput() {
        return this._threshold;
    }
}
exports.MonitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceLatencyOutputReference = MonitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceLatencyOutputReference;
_k = JSII_RTTI_SYMBOL_1;
MonitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceLatencyOutputReference[_k] = { fqn: "@cdktf/provider-google.monitoringSlo.MonitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceLatencyOutputReference", version: "14.13.1" };
function monitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        location: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.location),
        method: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.method),
        version: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.version),
        availability: monitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceAvailabilityToTerraform(struct.availability),
        latency: monitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceLatencyToTerraform(struct.latency),
    };
}
exports.monitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceToTerraform = monitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceToTerraform;
function monitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        location: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.location),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        method: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.method),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        version: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.version),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        availability: {
            value: monitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceAvailabilityToHclTerraform(struct.availability),
            isBlock: true,
            type: "list",
            storageClassType: "MonitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceAvailabilityList",
        },
        latency: {
            value: monitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceLatencyToHclTerraform(struct.latency),
            isBlock: true,
            type: "list",
            storageClassType: "MonitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceLatencyList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.monitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceToHclTerraform = monitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceToHclTerraform;
class MonitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // availability - computed: false, optional: true, required: false
        this._availability = new MonitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceAvailabilityOutputReference(this, "availability");
        // latency - computed: false, optional: true, required: false
        this._latency = new MonitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceLatencyOutputReference(this, "latency");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._location !== undefined) {
            hasAnyValues = true;
            internalValueResult.location = this._location;
        }
        if (this._method !== undefined) {
            hasAnyValues = true;
            internalValueResult.method = this._method;
        }
        if (this._version !== undefined) {
            hasAnyValues = true;
            internalValueResult.version = this._version;
        }
        if (this._availability?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.availability = this._availability?.internalValue;
        }
        if (this._latency?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.latency = this._latency?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._location = undefined;
            this._method = undefined;
            this._version = undefined;
            this._availability.internalValue = undefined;
            this._latency.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._location = value.location;
            this._method = value.method;
            this._version = value.version;
            this._availability.internalValue = value.availability;
            this._latency.internalValue = value.latency;
        }
    }
    get location() {
        return cdktf.Fn.tolist(this.getListAttribute('location'));
    }
    set location(value) {
        this._location = value;
    }
    resetLocation() {
        this._location = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    get method() {
        return cdktf.Fn.tolist(this.getListAttribute('method'));
    }
    set method(value) {
        this._method = value;
    }
    resetMethod() {
        this._method = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get methodInput() {
        return this._method;
    }
    get version() {
        return cdktf.Fn.tolist(this.getListAttribute('version'));
    }
    set version(value) {
        this._version = value;
    }
    resetVersion() {
        this._version = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get versionInput() {
        return this._version;
    }
    get availability() {
        return this._availability;
    }
    putAvailability(value) {
        this._availability.internalValue = value;
    }
    resetAvailability() {
        this._availability.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get availabilityInput() {
        return this._availability.internalValue;
    }
    get latency() {
        return this._latency;
    }
    putLatency(value) {
        this._latency.internalValue = value;
    }
    resetLatency() {
        this._latency.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get latencyInput() {
        return this._latency.internalValue;
    }
}
exports.MonitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceOutputReference = MonitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceOutputReference;
_l = JSII_RTTI_SYMBOL_1;
MonitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceOutputReference[_l] = { fqn: "@cdktf/provider-google.monitoringSlo.MonitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceOutputReference", version: "14.13.1" };
function monitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutRangeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max: cdktf.numberToTerraform(struct.max),
        min: cdktf.numberToTerraform(struct.min),
    };
}
exports.monitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutRangeToTerraform = monitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutRangeToTerraform;
function monitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutRangeToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        max: {
            value: cdktf.numberToHclTerraform(struct.max),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        min: {
            value: cdktf.numberToHclTerraform(struct.min),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.monitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutRangeToHclTerraform = monitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutRangeToHclTerraform;
class MonitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutRangeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._max !== undefined) {
            hasAnyValues = true;
            internalValueResult.max = this._max;
        }
        if (this._min !== undefined) {
            hasAnyValues = true;
            internalValueResult.min = this._min;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._max = undefined;
            this._min = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._max = value.max;
            this._min = value.min;
        }
    }
    get max() {
        return this.getNumberAttribute('max');
    }
    set max(value) {
        this._max = value;
    }
    resetMax() {
        this._max = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxInput() {
        return this._max;
    }
    get min() {
        return this.getNumberAttribute('min');
    }
    set min(value) {
        this._min = value;
    }
    resetMin() {
        this._min = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minInput() {
        return this._min;
    }
}
exports.MonitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutRangeOutputReference = MonitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutRangeOutputReference;
_m = JSII_RTTI_SYMBOL_1;
MonitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutRangeOutputReference[_m] = { fqn: "@cdktf/provider-google.monitoringSlo.MonitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutRangeOutputReference", version: "14.13.1" };
function monitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        distribution_filter: cdktf.stringToTerraform(struct.distributionFilter),
        range: monitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutRangeToTerraform(struct.range),
    };
}
exports.monitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutToTerraform = monitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutToTerraform;
function monitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        distribution_filter: {
            value: cdktf.stringToHclTerraform(struct.distributionFilter),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        range: {
            value: monitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutRangeToHclTerraform(struct.range),
            isBlock: true,
            type: "list",
            storageClassType: "MonitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutRangeList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.monitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutToHclTerraform = monitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutToHclTerraform;
class MonitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // range - computed: false, optional: false, required: true
        this._range = new MonitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutRangeOutputReference(this, "range");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._distributionFilter !== undefined) {
            hasAnyValues = true;
            internalValueResult.distributionFilter = this._distributionFilter;
        }
        if (this._range?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.range = this._range?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._distributionFilter = undefined;
            this._range.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._distributionFilter = value.distributionFilter;
            this._range.internalValue = value.range;
        }
    }
    get distributionFilter() {
        return this.getStringAttribute('distribution_filter');
    }
    set distributionFilter(value) {
        this._distributionFilter = value;
    }
    // Temporarily expose input value. Use with caution.
    get distributionFilterInput() {
        return this._distributionFilter;
    }
    get range() {
        return this._range;
    }
    putRange(value) {
        this._range.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get rangeInput() {
        return this._range.internalValue;
    }
}
exports.MonitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutOutputReference = MonitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutOutputReference;
_o = JSII_RTTI_SYMBOL_1;
MonitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutOutputReference[_o] = { fqn: "@cdktf/provider-google.monitoringSlo.MonitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutOutputReference", version: "14.13.1" };
function monitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceGoodTotalRatioToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bad_service_filter: cdktf.stringToTerraform(struct.badServiceFilter),
        good_service_filter: cdktf.stringToTerraform(struct.goodServiceFilter),
        total_service_filter: cdktf.stringToTerraform(struct.totalServiceFilter),
    };
}
exports.monitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceGoodTotalRatioToTerraform = monitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceGoodTotalRatioToTerraform;
function monitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceGoodTotalRatioToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        bad_service_filter: {
            value: cdktf.stringToHclTerraform(struct.badServiceFilter),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        good_service_filter: {
            value: cdktf.stringToHclTerraform(struct.goodServiceFilter),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        total_service_filter: {
            value: cdktf.stringToHclTerraform(struct.totalServiceFilter),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.monitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceGoodTotalRatioToHclTerraform = monitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceGoodTotalRatioToHclTerraform;
class MonitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceGoodTotalRatioOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._badServiceFilter !== undefined) {
            hasAnyValues = true;
            internalValueResult.badServiceFilter = this._badServiceFilter;
        }
        if (this._goodServiceFilter !== undefined) {
            hasAnyValues = true;
            internalValueResult.goodServiceFilter = this._goodServiceFilter;
        }
        if (this._totalServiceFilter !== undefined) {
            hasAnyValues = true;
            internalValueResult.totalServiceFilter = this._totalServiceFilter;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._badServiceFilter = undefined;
            this._goodServiceFilter = undefined;
            this._totalServiceFilter = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._badServiceFilter = value.badServiceFilter;
            this._goodServiceFilter = value.goodServiceFilter;
            this._totalServiceFilter = value.totalServiceFilter;
        }
    }
    get badServiceFilter() {
        return this.getStringAttribute('bad_service_filter');
    }
    set badServiceFilter(value) {
        this._badServiceFilter = value;
    }
    resetBadServiceFilter() {
        this._badServiceFilter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get badServiceFilterInput() {
        return this._badServiceFilter;
    }
    get goodServiceFilter() {
        return this.getStringAttribute('good_service_filter');
    }
    set goodServiceFilter(value) {
        this._goodServiceFilter = value;
    }
    resetGoodServiceFilter() {
        this._goodServiceFilter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get goodServiceFilterInput() {
        return this._goodServiceFilter;
    }
    get totalServiceFilter() {
        return this.getStringAttribute('total_service_filter');
    }
    set totalServiceFilter(value) {
        this._totalServiceFilter = value;
    }
    resetTotalServiceFilter() {
        this._totalServiceFilter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get totalServiceFilterInput() {
        return this._totalServiceFilter;
    }
}
exports.MonitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceGoodTotalRatioOutputReference = MonitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceGoodTotalRatioOutputReference;
_p = JSII_RTTI_SYMBOL_1;
MonitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceGoodTotalRatioOutputReference[_p] = { fqn: "@cdktf/provider-google.monitoringSlo.MonitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceGoodTotalRatioOutputReference", version: "14.13.1" };
function monitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        distribution_cut: monitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutToTerraform(struct.distributionCut),
        good_total_ratio: monitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceGoodTotalRatioToTerraform(struct.goodTotalRatio),
    };
}
exports.monitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceToTerraform = monitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceToTerraform;
function monitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        distribution_cut: {
            value: monitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutToHclTerraform(struct.distributionCut),
            isBlock: true,
            type: "list",
            storageClassType: "MonitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutList",
        },
        good_total_ratio: {
            value: monitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceGoodTotalRatioToHclTerraform(struct.goodTotalRatio),
            isBlock: true,
            type: "list",
            storageClassType: "MonitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceGoodTotalRatioList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.monitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceToHclTerraform = monitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceToHclTerraform;
class MonitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // distribution_cut - computed: false, optional: true, required: false
        this._distributionCut = new MonitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutOutputReference(this, "distribution_cut");
        // good_total_ratio - computed: false, optional: true, required: false
        this._goodTotalRatio = new MonitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceGoodTotalRatioOutputReference(this, "good_total_ratio");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._distributionCut?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.distributionCut = this._distributionCut?.internalValue;
        }
        if (this._goodTotalRatio?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.goodTotalRatio = this._goodTotalRatio?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._distributionCut.internalValue = undefined;
            this._goodTotalRatio.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._distributionCut.internalValue = value.distributionCut;
            this._goodTotalRatio.internalValue = value.goodTotalRatio;
        }
    }
    get distributionCut() {
        return this._distributionCut;
    }
    putDistributionCut(value) {
        this._distributionCut.internalValue = value;
    }
    resetDistributionCut() {
        this._distributionCut.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get distributionCutInput() {
        return this._distributionCut.internalValue;
    }
    get goodTotalRatio() {
        return this._goodTotalRatio;
    }
    putGoodTotalRatio(value) {
        this._goodTotalRatio.internalValue = value;
    }
    resetGoodTotalRatio() {
        this._goodTotalRatio.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get goodTotalRatioInput() {
        return this._goodTotalRatio.internalValue;
    }
}
exports.MonitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceOutputReference = MonitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceOutputReference;
_q = JSII_RTTI_SYMBOL_1;
MonitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceOutputReference[_q] = { fqn: "@cdktf/provider-google.monitoringSlo.MonitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceOutputReference", version: "14.13.1" };
function monitoringSloWindowsBasedSliGoodTotalRatioThresholdToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        threshold: cdktf.numberToTerraform(struct.threshold),
        basic_sli_performance: monitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceToTerraform(struct.basicSliPerformance),
        performance: monitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceToTerraform(struct.performance),
    };
}
exports.monitoringSloWindowsBasedSliGoodTotalRatioThresholdToTerraform = monitoringSloWindowsBasedSliGoodTotalRatioThresholdToTerraform;
function monitoringSloWindowsBasedSliGoodTotalRatioThresholdToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        threshold: {
            value: cdktf.numberToHclTerraform(struct.threshold),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        basic_sli_performance: {
            value: monitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceToHclTerraform(struct.basicSliPerformance),
            isBlock: true,
            type: "list",
            storageClassType: "MonitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceList",
        },
        performance: {
            value: monitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceToHclTerraform(struct.performance),
            isBlock: true,
            type: "list",
            storageClassType: "MonitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.monitoringSloWindowsBasedSliGoodTotalRatioThresholdToHclTerraform = monitoringSloWindowsBasedSliGoodTotalRatioThresholdToHclTerraform;
class MonitoringSloWindowsBasedSliGoodTotalRatioThresholdOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // basic_sli_performance - computed: false, optional: true, required: false
        this._basicSliPerformance = new MonitoringSloWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceOutputReference(this, "basic_sli_performance");
        // performance - computed: false, optional: true, required: false
        this._performance = new MonitoringSloWindowsBasedSliGoodTotalRatioThresholdPerformanceOutputReference(this, "performance");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._threshold !== undefined) {
            hasAnyValues = true;
            internalValueResult.threshold = this._threshold;
        }
        if (this._basicSliPerformance?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.basicSliPerformance = this._basicSliPerformance?.internalValue;
        }
        if (this._performance?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.performance = this._performance?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._threshold = undefined;
            this._basicSliPerformance.internalValue = undefined;
            this._performance.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._threshold = value.threshold;
            this._basicSliPerformance.internalValue = value.basicSliPerformance;
            this._performance.internalValue = value.performance;
        }
    }
    get threshold() {
        return this.getNumberAttribute('threshold');
    }
    set threshold(value) {
        this._threshold = value;
    }
    resetThreshold() {
        this._threshold = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get thresholdInput() {
        return this._threshold;
    }
    get basicSliPerformance() {
        return this._basicSliPerformance;
    }
    putBasicSliPerformance(value) {
        this._basicSliPerformance.internalValue = value;
    }
    resetBasicSliPerformance() {
        this._basicSliPerformance.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get basicSliPerformanceInput() {
        return this._basicSliPerformance.internalValue;
    }
    get performance() {
        return this._performance;
    }
    putPerformance(value) {
        this._performance.internalValue = value;
    }
    resetPerformance() {
        this._performance.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get performanceInput() {
        return this._performance.internalValue;
    }
}
exports.MonitoringSloWindowsBasedSliGoodTotalRatioThresholdOutputReference = MonitoringSloWindowsBasedSliGoodTotalRatioThresholdOutputReference;
_r = JSII_RTTI_SYMBOL_1;
MonitoringSloWindowsBasedSliGoodTotalRatioThresholdOutputReference[_r] = { fqn: "@cdktf/provider-google.monitoringSlo.MonitoringSloWindowsBasedSliGoodTotalRatioThresholdOutputReference", version: "14.13.1" };
function monitoringSloWindowsBasedSliMetricMeanInRangeRangeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max: cdktf.numberToTerraform(struct.max),
        min: cdktf.numberToTerraform(struct.min),
    };
}
exports.monitoringSloWindowsBasedSliMetricMeanInRangeRangeToTerraform = monitoringSloWindowsBasedSliMetricMeanInRangeRangeToTerraform;
function monitoringSloWindowsBasedSliMetricMeanInRangeRangeToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        max: {
            value: cdktf.numberToHclTerraform(struct.max),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        min: {
            value: cdktf.numberToHclTerraform(struct.min),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.monitoringSloWindowsBasedSliMetricMeanInRangeRangeToHclTerraform = monitoringSloWindowsBasedSliMetricMeanInRangeRangeToHclTerraform;
class MonitoringSloWindowsBasedSliMetricMeanInRangeRangeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._max !== undefined) {
            hasAnyValues = true;
            internalValueResult.max = this._max;
        }
        if (this._min !== undefined) {
            hasAnyValues = true;
            internalValueResult.min = this._min;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._max = undefined;
            this._min = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._max = value.max;
            this._min = value.min;
        }
    }
    get max() {
        return this.getNumberAttribute('max');
    }
    set max(value) {
        this._max = value;
    }
    resetMax() {
        this._max = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxInput() {
        return this._max;
    }
    get min() {
        return this.getNumberAttribute('min');
    }
    set min(value) {
        this._min = value;
    }
    resetMin() {
        this._min = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minInput() {
        return this._min;
    }
}
exports.MonitoringSloWindowsBasedSliMetricMeanInRangeRangeOutputReference = MonitoringSloWindowsBasedSliMetricMeanInRangeRangeOutputReference;
_s = JSII_RTTI_SYMBOL_1;
MonitoringSloWindowsBasedSliMetricMeanInRangeRangeOutputReference[_s] = { fqn: "@cdktf/provider-google.monitoringSlo.MonitoringSloWindowsBasedSliMetricMeanInRangeRangeOutputReference", version: "14.13.1" };
function monitoringSloWindowsBasedSliMetricMeanInRangeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        time_series: cdktf.stringToTerraform(struct.timeSeries),
        range: monitoringSloWindowsBasedSliMetricMeanInRangeRangeToTerraform(struct.range),
    };
}
exports.monitoringSloWindowsBasedSliMetricMeanInRangeToTerraform = monitoringSloWindowsBasedSliMetricMeanInRangeToTerraform;
function monitoringSloWindowsBasedSliMetricMeanInRangeToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        time_series: {
            value: cdktf.stringToHclTerraform(struct.timeSeries),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        range: {
            value: monitoringSloWindowsBasedSliMetricMeanInRangeRangeToHclTerraform(struct.range),
            isBlock: true,
            type: "list",
            storageClassType: "MonitoringSloWindowsBasedSliMetricMeanInRangeRangeList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.monitoringSloWindowsBasedSliMetricMeanInRangeToHclTerraform = monitoringSloWindowsBasedSliMetricMeanInRangeToHclTerraform;
class MonitoringSloWindowsBasedSliMetricMeanInRangeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // range - computed: false, optional: false, required: true
        this._range = new MonitoringSloWindowsBasedSliMetricMeanInRangeRangeOutputReference(this, "range");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._timeSeries !== undefined) {
            hasAnyValues = true;
            internalValueResult.timeSeries = this._timeSeries;
        }
        if (this._range?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.range = this._range?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._timeSeries = undefined;
            this._range.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._timeSeries = value.timeSeries;
            this._range.internalValue = value.range;
        }
    }
    get timeSeries() {
        return this.getStringAttribute('time_series');
    }
    set timeSeries(value) {
        this._timeSeries = value;
    }
    // Temporarily expose input value. Use with caution.
    get timeSeriesInput() {
        return this._timeSeries;
    }
    get range() {
        return this._range;
    }
    putRange(value) {
        this._range.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get rangeInput() {
        return this._range.internalValue;
    }
}
exports.MonitoringSloWindowsBasedSliMetricMeanInRangeOutputReference = MonitoringSloWindowsBasedSliMetricMeanInRangeOutputReference;
_t = JSII_RTTI_SYMBOL_1;
MonitoringSloWindowsBasedSliMetricMeanInRangeOutputReference[_t] = { fqn: "@cdktf/provider-google.monitoringSlo.MonitoringSloWindowsBasedSliMetricMeanInRangeOutputReference", version: "14.13.1" };
function monitoringSloWindowsBasedSliMetricSumInRangeRangeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max: cdktf.numberToTerraform(struct.max),
        min: cdktf.numberToTerraform(struct.min),
    };
}
exports.monitoringSloWindowsBasedSliMetricSumInRangeRangeToTerraform = monitoringSloWindowsBasedSliMetricSumInRangeRangeToTerraform;
function monitoringSloWindowsBasedSliMetricSumInRangeRangeToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        max: {
            value: cdktf.numberToHclTerraform(struct.max),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        min: {
            value: cdktf.numberToHclTerraform(struct.min),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.monitoringSloWindowsBasedSliMetricSumInRangeRangeToHclTerraform = monitoringSloWindowsBasedSliMetricSumInRangeRangeToHclTerraform;
class MonitoringSloWindowsBasedSliMetricSumInRangeRangeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._max !== undefined) {
            hasAnyValues = true;
            internalValueResult.max = this._max;
        }
        if (this._min !== undefined) {
            hasAnyValues = true;
            internalValueResult.min = this._min;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._max = undefined;
            this._min = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._max = value.max;
            this._min = value.min;
        }
    }
    get max() {
        return this.getNumberAttribute('max');
    }
    set max(value) {
        this._max = value;
    }
    resetMax() {
        this._max = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxInput() {
        return this._max;
    }
    get min() {
        return this.getNumberAttribute('min');
    }
    set min(value) {
        this._min = value;
    }
    resetMin() {
        this._min = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minInput() {
        return this._min;
    }
}
exports.MonitoringSloWindowsBasedSliMetricSumInRangeRangeOutputReference = MonitoringSloWindowsBasedSliMetricSumInRangeRangeOutputReference;
_u = JSII_RTTI_SYMBOL_1;
MonitoringSloWindowsBasedSliMetricSumInRangeRangeOutputReference[_u] = { fqn: "@cdktf/provider-google.monitoringSlo.MonitoringSloWindowsBasedSliMetricSumInRangeRangeOutputReference", version: "14.13.1" };
function monitoringSloWindowsBasedSliMetricSumInRangeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        time_series: cdktf.stringToTerraform(struct.timeSeries),
        range: monitoringSloWindowsBasedSliMetricSumInRangeRangeToTerraform(struct.range),
    };
}
exports.monitoringSloWindowsBasedSliMetricSumInRangeToTerraform = monitoringSloWindowsBasedSliMetricSumInRangeToTerraform;
function monitoringSloWindowsBasedSliMetricSumInRangeToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        time_series: {
            value: cdktf.stringToHclTerraform(struct.timeSeries),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        range: {
            value: monitoringSloWindowsBasedSliMetricSumInRangeRangeToHclTerraform(struct.range),
            isBlock: true,
            type: "list",
            storageClassType: "MonitoringSloWindowsBasedSliMetricSumInRangeRangeList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.monitoringSloWindowsBasedSliMetricSumInRangeToHclTerraform = monitoringSloWindowsBasedSliMetricSumInRangeToHclTerraform;
class MonitoringSloWindowsBasedSliMetricSumInRangeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // range - computed: false, optional: false, required: true
        this._range = new MonitoringSloWindowsBasedSliMetricSumInRangeRangeOutputReference(this, "range");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._timeSeries !== undefined) {
            hasAnyValues = true;
            internalValueResult.timeSeries = this._timeSeries;
        }
        if (this._range?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.range = this._range?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._timeSeries = undefined;
            this._range.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._timeSeries = value.timeSeries;
            this._range.internalValue = value.range;
        }
    }
    get timeSeries() {
        return this.getStringAttribute('time_series');
    }
    set timeSeries(value) {
        this._timeSeries = value;
    }
    // Temporarily expose input value. Use with caution.
    get timeSeriesInput() {
        return this._timeSeries;
    }
    get range() {
        return this._range;
    }
    putRange(value) {
        this._range.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get rangeInput() {
        return this._range.internalValue;
    }
}
exports.MonitoringSloWindowsBasedSliMetricSumInRangeOutputReference = MonitoringSloWindowsBasedSliMetricSumInRangeOutputReference;
_v = JSII_RTTI_SYMBOL_1;
MonitoringSloWindowsBasedSliMetricSumInRangeOutputReference[_v] = { fqn: "@cdktf/provider-google.monitoringSlo.MonitoringSloWindowsBasedSliMetricSumInRangeOutputReference", version: "14.13.1" };
function monitoringSloWindowsBasedSliToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        good_bad_metric_filter: cdktf.stringToTerraform(struct.goodBadMetricFilter),
        window_period: cdktf.stringToTerraform(struct.windowPeriod),
        good_total_ratio_threshold: monitoringSloWindowsBasedSliGoodTotalRatioThresholdToTerraform(struct.goodTotalRatioThreshold),
        metric_mean_in_range: monitoringSloWindowsBasedSliMetricMeanInRangeToTerraform(struct.metricMeanInRange),
        metric_sum_in_range: monitoringSloWindowsBasedSliMetricSumInRangeToTerraform(struct.metricSumInRange),
    };
}
exports.monitoringSloWindowsBasedSliToTerraform = monitoringSloWindowsBasedSliToTerraform;
function monitoringSloWindowsBasedSliToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        good_bad_metric_filter: {
            value: cdktf.stringToHclTerraform(struct.goodBadMetricFilter),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        window_period: {
            value: cdktf.stringToHclTerraform(struct.windowPeriod),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        good_total_ratio_threshold: {
            value: monitoringSloWindowsBasedSliGoodTotalRatioThresholdToHclTerraform(struct.goodTotalRatioThreshold),
            isBlock: true,
            type: "list",
            storageClassType: "MonitoringSloWindowsBasedSliGoodTotalRatioThresholdList",
        },
        metric_mean_in_range: {
            value: monitoringSloWindowsBasedSliMetricMeanInRangeToHclTerraform(struct.metricMeanInRange),
            isBlock: true,
            type: "list",
            storageClassType: "MonitoringSloWindowsBasedSliMetricMeanInRangeList",
        },
        metric_sum_in_range: {
            value: monitoringSloWindowsBasedSliMetricSumInRangeToHclTerraform(struct.metricSumInRange),
            isBlock: true,
            type: "list",
            storageClassType: "MonitoringSloWindowsBasedSliMetricSumInRangeList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.monitoringSloWindowsBasedSliToHclTerraform = monitoringSloWindowsBasedSliToHclTerraform;
class MonitoringSloWindowsBasedSliOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // good_total_ratio_threshold - computed: false, optional: true, required: false
        this._goodTotalRatioThreshold = new MonitoringSloWindowsBasedSliGoodTotalRatioThresholdOutputReference(this, "good_total_ratio_threshold");
        // metric_mean_in_range - computed: false, optional: true, required: false
        this._metricMeanInRange = new MonitoringSloWindowsBasedSliMetricMeanInRangeOutputReference(this, "metric_mean_in_range");
        // metric_sum_in_range - computed: false, optional: true, required: false
        this._metricSumInRange = new MonitoringSloWindowsBasedSliMetricSumInRangeOutputReference(this, "metric_sum_in_range");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._goodBadMetricFilter !== undefined) {
            hasAnyValues = true;
            internalValueResult.goodBadMetricFilter = this._goodBadMetricFilter;
        }
        if (this._windowPeriod !== undefined) {
            hasAnyValues = true;
            internalValueResult.windowPeriod = this._windowPeriod;
        }
        if (this._goodTotalRatioThreshold?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.goodTotalRatioThreshold = this._goodTotalRatioThreshold?.internalValue;
        }
        if (this._metricMeanInRange?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.metricMeanInRange = this._metricMeanInRange?.internalValue;
        }
        if (this._metricSumInRange?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.metricSumInRange = this._metricSumInRange?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._goodBadMetricFilter = undefined;
            this._windowPeriod = undefined;
            this._goodTotalRatioThreshold.internalValue = undefined;
            this._metricMeanInRange.internalValue = undefined;
            this._metricSumInRange.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._goodBadMetricFilter = value.goodBadMetricFilter;
            this._windowPeriod = value.windowPeriod;
            this._goodTotalRatioThreshold.internalValue = value.goodTotalRatioThreshold;
            this._metricMeanInRange.internalValue = value.metricMeanInRange;
            this._metricSumInRange.internalValue = value.metricSumInRange;
        }
    }
    get goodBadMetricFilter() {
        return this.getStringAttribute('good_bad_metric_filter');
    }
    set goodBadMetricFilter(value) {
        this._goodBadMetricFilter = value;
    }
    resetGoodBadMetricFilter() {
        this._goodBadMetricFilter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get goodBadMetricFilterInput() {
        return this._goodBadMetricFilter;
    }
    get windowPeriod() {
        return this.getStringAttribute('window_period');
    }
    set windowPeriod(value) {
        this._windowPeriod = value;
    }
    resetWindowPeriod() {
        this._windowPeriod = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get windowPeriodInput() {
        return this._windowPeriod;
    }
    get goodTotalRatioThreshold() {
        return this._goodTotalRatioThreshold;
    }
    putGoodTotalRatioThreshold(value) {
        this._goodTotalRatioThreshold.internalValue = value;
    }
    resetGoodTotalRatioThreshold() {
        this._goodTotalRatioThreshold.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get goodTotalRatioThresholdInput() {
        return this._goodTotalRatioThreshold.internalValue;
    }
    get metricMeanInRange() {
        return this._metricMeanInRange;
    }
    putMetricMeanInRange(value) {
        this._metricMeanInRange.internalValue = value;
    }
    resetMetricMeanInRange() {
        this._metricMeanInRange.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get metricMeanInRangeInput() {
        return this._metricMeanInRange.internalValue;
    }
    get metricSumInRange() {
        return this._metricSumInRange;
    }
    putMetricSumInRange(value) {
        this._metricSumInRange.internalValue = value;
    }
    resetMetricSumInRange() {
        this._metricSumInRange.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get metricSumInRangeInput() {
        return this._metricSumInRange.internalValue;
    }
}
exports.MonitoringSloWindowsBasedSliOutputReference = MonitoringSloWindowsBasedSliOutputReference;
_w = JSII_RTTI_SYMBOL_1;
MonitoringSloWindowsBasedSliOutputReference[_w] = { fqn: "@cdktf/provider-google.monitoringSlo.MonitoringSloWindowsBasedSliOutputReference", version: "14.13.1" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/monitoring_slo google_monitoring_slo}
*/
class MonitoringSlo extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a MonitoringSlo resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the MonitoringSlo to import
    * @param importFromId The id of the existing MonitoringSlo that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/monitoring_slo#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the MonitoringSlo to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_monitoring_slo", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/monitoring_slo google_monitoring_slo} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options MonitoringSloConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_monitoring_slo',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // basic_sli - computed: false, optional: true, required: false
        this._basicSli = new MonitoringSloBasicSliOutputReference(this, "basic_sli");
        // request_based_sli - computed: false, optional: true, required: false
        this._requestBasedSli = new MonitoringSloRequestBasedSliOutputReference(this, "request_based_sli");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new MonitoringSloTimeoutsOutputReference(this, "timeouts");
        // windows_based_sli - computed: false, optional: true, required: false
        this._windowsBasedSli = new MonitoringSloWindowsBasedSliOutputReference(this, "windows_based_sli");
        this._calendarPeriod = config.calendarPeriod;
        this._displayName = config.displayName;
        this._goal = config.goal;
        this._id = config.id;
        this._project = config.project;
        this._rollingPeriodDays = config.rollingPeriodDays;
        this._service = config.service;
        this._sloId = config.sloId;
        this._userLabels = config.userLabels;
        this._basicSli.internalValue = config.basicSli;
        this._requestBasedSli.internalValue = config.requestBasedSli;
        this._timeouts.internalValue = config.timeouts;
        this._windowsBasedSli.internalValue = config.windowsBasedSli;
    }
    get calendarPeriod() {
        return this.getStringAttribute('calendar_period');
    }
    set calendarPeriod(value) {
        this._calendarPeriod = value;
    }
    resetCalendarPeriod() {
        this._calendarPeriod = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get calendarPeriodInput() {
        return this._calendarPeriod;
    }
    get displayName() {
        return this.getStringAttribute('display_name');
    }
    set displayName(value) {
        this._displayName = value;
    }
    resetDisplayName() {
        this._displayName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get displayNameInput() {
        return this._displayName;
    }
    get goal() {
        return this.getNumberAttribute('goal');
    }
    set goal(value) {
        this._goal = value;
    }
    // Temporarily expose input value. Use with caution.
    get goalInput() {
        return this._goal;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get rollingPeriodDays() {
        return this.getNumberAttribute('rolling_period_days');
    }
    set rollingPeriodDays(value) {
        this._rollingPeriodDays = value;
    }
    resetRollingPeriodDays() {
        this._rollingPeriodDays = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rollingPeriodDaysInput() {
        return this._rollingPeriodDays;
    }
    get service() {
        return this.getStringAttribute('service');
    }
    set service(value) {
        this._service = value;
    }
    // Temporarily expose input value. Use with caution.
    get serviceInput() {
        return this._service;
    }
    get sloId() {
        return this.getStringAttribute('slo_id');
    }
    set sloId(value) {
        this._sloId = value;
    }
    resetSloId() {
        this._sloId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sloIdInput() {
        return this._sloId;
    }
    get userLabels() {
        return this.getStringMapAttribute('user_labels');
    }
    set userLabels(value) {
        this._userLabels = value;
    }
    resetUserLabels() {
        this._userLabels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get userLabelsInput() {
        return this._userLabels;
    }
    get basicSli() {
        return this._basicSli;
    }
    putBasicSli(value) {
        this._basicSli.internalValue = value;
    }
    resetBasicSli() {
        this._basicSli.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get basicSliInput() {
        return this._basicSli.internalValue;
    }
    get requestBasedSli() {
        return this._requestBasedSli;
    }
    putRequestBasedSli(value) {
        this._requestBasedSli.internalValue = value;
    }
    resetRequestBasedSli() {
        this._requestBasedSli.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestBasedSliInput() {
        return this._requestBasedSli.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    get windowsBasedSli() {
        return this._windowsBasedSli;
    }
    putWindowsBasedSli(value) {
        this._windowsBasedSli.internalValue = value;
    }
    resetWindowsBasedSli() {
        this._windowsBasedSli.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get windowsBasedSliInput() {
        return this._windowsBasedSli.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            calendar_period: cdktf.stringToTerraform(this._calendarPeriod),
            display_name: cdktf.stringToTerraform(this._displayName),
            goal: cdktf.numberToTerraform(this._goal),
            id: cdktf.stringToTerraform(this._id),
            project: cdktf.stringToTerraform(this._project),
            rolling_period_days: cdktf.numberToTerraform(this._rollingPeriodDays),
            service: cdktf.stringToTerraform(this._service),
            slo_id: cdktf.stringToTerraform(this._sloId),
            user_labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._userLabels),
            basic_sli: monitoringSloBasicSliToTerraform(this._basicSli.internalValue),
            request_based_sli: monitoringSloRequestBasedSliToTerraform(this._requestBasedSli.internalValue),
            timeouts: monitoringSloTimeoutsToTerraform(this._timeouts.internalValue),
            windows_based_sli: monitoringSloWindowsBasedSliToTerraform(this._windowsBasedSli.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            calendar_period: {
                value: cdktf.stringToHclTerraform(this._calendarPeriod),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            display_name: {
                value: cdktf.stringToHclTerraform(this._displayName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            goal: {
                value: cdktf.numberToHclTerraform(this._goal),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            project: {
                value: cdktf.stringToHclTerraform(this._project),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            rolling_period_days: {
                value: cdktf.numberToHclTerraform(this._rollingPeriodDays),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            service: {
                value: cdktf.stringToHclTerraform(this._service),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            slo_id: {
                value: cdktf.stringToHclTerraform(this._sloId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            user_labels: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._userLabels),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            basic_sli: {
                value: monitoringSloBasicSliToHclTerraform(this._basicSli.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "MonitoringSloBasicSliList",
            },
            request_based_sli: {
                value: monitoringSloRequestBasedSliToHclTerraform(this._requestBasedSli.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "MonitoringSloRequestBasedSliList",
            },
            timeouts: {
                value: monitoringSloTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "MonitoringSloTimeouts",
            },
            windows_based_sli: {
                value: monitoringSloWindowsBasedSliToHclTerraform(this._windowsBasedSli.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "MonitoringSloWindowsBasedSliList",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.MonitoringSlo = MonitoringSlo;
_x = JSII_RTTI_SYMBOL_1;
MonitoringSlo[_x] = { fqn: "@cdktf/provider-google.monitoringSlo.MonitoringSlo", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
MonitoringSlo.tfResourceType = "google_monitoring_slo";
//# sourceMappingURL=data:application/json;base64,