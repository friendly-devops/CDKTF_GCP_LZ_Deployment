"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17;
Object.defineProperty(exports, "__esModule", { value: true });
exports.gkeonpremBareMetalAdminClusterLoadBalancerManualLbConfigToHclTerraform = exports.gkeonpremBareMetalAdminClusterLoadBalancerManualLbConfigToTerraform = exports.GkeonpremBareMetalAdminClusterControlPlaneOutputReference = exports.gkeonpremBareMetalAdminClusterControlPlaneToHclTerraform = exports.gkeonpremBareMetalAdminClusterControlPlaneToTerraform = exports.GkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigOutputReference = exports.gkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigToHclTerraform = exports.gkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigToTerraform = exports.GkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigOutputReference = exports.gkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigToHclTerraform = exports.gkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigToTerraform = exports.GkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsList = exports.GkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsOutputReference = exports.gkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsToHclTerraform = exports.gkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsToTerraform = exports.GkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsList = exports.GkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsOutputReference = exports.gkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsToHclTerraform = exports.gkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsToTerraform = exports.GkeonpremBareMetalAdminClusterControlPlaneApiServerArgsList = exports.GkeonpremBareMetalAdminClusterControlPlaneApiServerArgsOutputReference = exports.gkeonpremBareMetalAdminClusterControlPlaneApiServerArgsToHclTerraform = exports.gkeonpremBareMetalAdminClusterControlPlaneApiServerArgsToTerraform = exports.GkeonpremBareMetalAdminClusterClusterOperationsOutputReference = exports.gkeonpremBareMetalAdminClusterClusterOperationsToHclTerraform = exports.gkeonpremBareMetalAdminClusterClusterOperationsToTerraform = exports.GkeonpremBareMetalAdminClusterValidationCheckList = exports.GkeonpremBareMetalAdminClusterValidationCheckOutputReference = exports.gkeonpremBareMetalAdminClusterValidationCheckToHclTerraform = exports.gkeonpremBareMetalAdminClusterValidationCheckToTerraform = exports.GkeonpremBareMetalAdminClusterValidationCheckStatusList = exports.GkeonpremBareMetalAdminClusterValidationCheckStatusOutputReference = exports.gkeonpremBareMetalAdminClusterValidationCheckStatusToHclTerraform = exports.gkeonpremBareMetalAdminClusterValidationCheckStatusToTerraform = exports.GkeonpremBareMetalAdminClusterValidationCheckStatusResultList = exports.GkeonpremBareMetalAdminClusterValidationCheckStatusResultOutputReference = exports.gkeonpremBareMetalAdminClusterValidationCheckStatusResultToHclTerraform = exports.gkeonpremBareMetalAdminClusterValidationCheckStatusResultToTerraform = exports.GkeonpremBareMetalAdminClusterStatusList = exports.GkeonpremBareMetalAdminClusterStatusOutputReference = exports.gkeonpremBareMetalAdminClusterStatusToHclTerraform = exports.gkeonpremBareMetalAdminClusterStatusToTerraform = exports.GkeonpremBareMetalAdminClusterStatusConditionsList = exports.GkeonpremBareMetalAdminClusterStatusConditionsOutputReference = exports.gkeonpremBareMetalAdminClusterStatusConditionsToHclTerraform = exports.gkeonpremBareMetalAdminClusterStatusConditionsToTerraform = exports.GkeonpremBareMetalAdminClusterFleetList = exports.GkeonpremBareMetalAdminClusterFleetOutputReference = exports.gkeonpremBareMetalAdminClusterFleetToHclTerraform = exports.gkeonpremBareMetalAdminClusterFleetToTerraform = void 0;
exports.GkeonpremBareMetalAdminClusterStorageOutputReference = exports.gkeonpremBareMetalAdminClusterStorageToHclTerraform = exports.gkeonpremBareMetalAdminClusterStorageToTerraform = exports.GkeonpremBareMetalAdminClusterStorageLvpShareConfigOutputReference = exports.gkeonpremBareMetalAdminClusterStorageLvpShareConfigToHclTerraform = exports.gkeonpremBareMetalAdminClusterStorageLvpShareConfigToTerraform = exports.GkeonpremBareMetalAdminClusterStorageLvpShareConfigLvpConfigOutputReference = exports.gkeonpremBareMetalAdminClusterStorageLvpShareConfigLvpConfigToHclTerraform = exports.gkeonpremBareMetalAdminClusterStorageLvpShareConfigLvpConfigToTerraform = exports.GkeonpremBareMetalAdminClusterStorageLvpNodeMountsConfigOutputReference = exports.gkeonpremBareMetalAdminClusterStorageLvpNodeMountsConfigToHclTerraform = exports.gkeonpremBareMetalAdminClusterStorageLvpNodeMountsConfigToTerraform = exports.GkeonpremBareMetalAdminClusterSecurityConfigOutputReference = exports.gkeonpremBareMetalAdminClusterSecurityConfigToHclTerraform = exports.gkeonpremBareMetalAdminClusterSecurityConfigToTerraform = exports.GkeonpremBareMetalAdminClusterSecurityConfigAuthorizationOutputReference = exports.gkeonpremBareMetalAdminClusterSecurityConfigAuthorizationToHclTerraform = exports.gkeonpremBareMetalAdminClusterSecurityConfigAuthorizationToTerraform = exports.GkeonpremBareMetalAdminClusterSecurityConfigAuthorizationAdminUsersList = exports.GkeonpremBareMetalAdminClusterSecurityConfigAuthorizationAdminUsersOutputReference = exports.gkeonpremBareMetalAdminClusterSecurityConfigAuthorizationAdminUsersToHclTerraform = exports.gkeonpremBareMetalAdminClusterSecurityConfigAuthorizationAdminUsersToTerraform = exports.GkeonpremBareMetalAdminClusterProxyOutputReference = exports.gkeonpremBareMetalAdminClusterProxyToHclTerraform = exports.gkeonpremBareMetalAdminClusterProxyToTerraform = exports.GkeonpremBareMetalAdminClusterNodeConfigOutputReference = exports.gkeonpremBareMetalAdminClusterNodeConfigToHclTerraform = exports.gkeonpremBareMetalAdminClusterNodeConfigToTerraform = exports.GkeonpremBareMetalAdminClusterNodeAccessConfigOutputReference = exports.gkeonpremBareMetalAdminClusterNodeAccessConfigToHclTerraform = exports.gkeonpremBareMetalAdminClusterNodeAccessConfigToTerraform = exports.GkeonpremBareMetalAdminClusterNetworkConfigOutputReference = exports.gkeonpremBareMetalAdminClusterNetworkConfigToHclTerraform = exports.gkeonpremBareMetalAdminClusterNetworkConfigToTerraform = exports.GkeonpremBareMetalAdminClusterNetworkConfigIslandModeCidrOutputReference = exports.gkeonpremBareMetalAdminClusterNetworkConfigIslandModeCidrToHclTerraform = exports.gkeonpremBareMetalAdminClusterNetworkConfigIslandModeCidrToTerraform = exports.GkeonpremBareMetalAdminClusterMaintenanceConfigOutputReference = exports.gkeonpremBareMetalAdminClusterMaintenanceConfigToHclTerraform = exports.gkeonpremBareMetalAdminClusterMaintenanceConfigToTerraform = exports.GkeonpremBareMetalAdminClusterLoadBalancerOutputReference = exports.gkeonpremBareMetalAdminClusterLoadBalancerToHclTerraform = exports.gkeonpremBareMetalAdminClusterLoadBalancerToTerraform = exports.GkeonpremBareMetalAdminClusterLoadBalancerVipConfigOutputReference = exports.gkeonpremBareMetalAdminClusterLoadBalancerVipConfigToHclTerraform = exports.gkeonpremBareMetalAdminClusterLoadBalancerVipConfigToTerraform = exports.GkeonpremBareMetalAdminClusterLoadBalancerPortConfigOutputReference = exports.gkeonpremBareMetalAdminClusterLoadBalancerPortConfigToHclTerraform = exports.gkeonpremBareMetalAdminClusterLoadBalancerPortConfigToTerraform = exports.GkeonpremBareMetalAdminClusterLoadBalancerManualLbConfigOutputReference = void 0;
exports.GkeonpremBareMetalAdminCluster = exports.GkeonpremBareMetalAdminClusterTimeoutsOutputReference = exports.gkeonpremBareMetalAdminClusterTimeoutsToHclTerraform = exports.gkeonpremBareMetalAdminClusterTimeoutsToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function gkeonpremBareMetalAdminClusterFleetToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.gkeonpremBareMetalAdminClusterFleetToTerraform = gkeonpremBareMetalAdminClusterFleetToTerraform;
function gkeonpremBareMetalAdminClusterFleetToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.gkeonpremBareMetalAdminClusterFleetToHclTerraform = gkeonpremBareMetalAdminClusterFleetToHclTerraform;
class GkeonpremBareMetalAdminClusterFleetOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // membership - computed: true, optional: false, required: false
    get membership() {
        return this.getStringAttribute('membership');
    }
}
exports.GkeonpremBareMetalAdminClusterFleetOutputReference = GkeonpremBareMetalAdminClusterFleetOutputReference;
_a = JSII_RTTI_SYMBOL_1;
GkeonpremBareMetalAdminClusterFleetOutputReference[_a] = { fqn: "@cdktf/provider-google.gkeonpremBareMetalAdminCluster.GkeonpremBareMetalAdminClusterFleetOutputReference", version: "14.13.1" };
class GkeonpremBareMetalAdminClusterFleetList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new GkeonpremBareMetalAdminClusterFleetOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.GkeonpremBareMetalAdminClusterFleetList = GkeonpremBareMetalAdminClusterFleetList;
_b = JSII_RTTI_SYMBOL_1;
GkeonpremBareMetalAdminClusterFleetList[_b] = { fqn: "@cdktf/provider-google.gkeonpremBareMetalAdminCluster.GkeonpremBareMetalAdminClusterFleetList", version: "14.13.1" };
function gkeonpremBareMetalAdminClusterStatusConditionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.gkeonpremBareMetalAdminClusterStatusConditionsToTerraform = gkeonpremBareMetalAdminClusterStatusConditionsToTerraform;
function gkeonpremBareMetalAdminClusterStatusConditionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.gkeonpremBareMetalAdminClusterStatusConditionsToHclTerraform = gkeonpremBareMetalAdminClusterStatusConditionsToHclTerraform;
class GkeonpremBareMetalAdminClusterStatusConditionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // last_transition_time - computed: true, optional: false, required: false
    get lastTransitionTime() {
        return this.getStringAttribute('last_transition_time');
    }
    // message - computed: true, optional: false, required: false
    get message() {
        return this.getStringAttribute('message');
    }
    // reason - computed: true, optional: false, required: false
    get reason() {
        return this.getStringAttribute('reason');
    }
    // state - computed: true, optional: false, required: false
    get state() {
        return this.getStringAttribute('state');
    }
    // type - computed: true, optional: false, required: false
    get type() {
        return this.getStringAttribute('type');
    }
}
exports.GkeonpremBareMetalAdminClusterStatusConditionsOutputReference = GkeonpremBareMetalAdminClusterStatusConditionsOutputReference;
_c = JSII_RTTI_SYMBOL_1;
GkeonpremBareMetalAdminClusterStatusConditionsOutputReference[_c] = { fqn: "@cdktf/provider-google.gkeonpremBareMetalAdminCluster.GkeonpremBareMetalAdminClusterStatusConditionsOutputReference", version: "14.13.1" };
class GkeonpremBareMetalAdminClusterStatusConditionsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new GkeonpremBareMetalAdminClusterStatusConditionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.GkeonpremBareMetalAdminClusterStatusConditionsList = GkeonpremBareMetalAdminClusterStatusConditionsList;
_d = JSII_RTTI_SYMBOL_1;
GkeonpremBareMetalAdminClusterStatusConditionsList[_d] = { fqn: "@cdktf/provider-google.gkeonpremBareMetalAdminCluster.GkeonpremBareMetalAdminClusterStatusConditionsList", version: "14.13.1" };
function gkeonpremBareMetalAdminClusterStatusToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.gkeonpremBareMetalAdminClusterStatusToTerraform = gkeonpremBareMetalAdminClusterStatusToTerraform;
function gkeonpremBareMetalAdminClusterStatusToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.gkeonpremBareMetalAdminClusterStatusToHclTerraform = gkeonpremBareMetalAdminClusterStatusToHclTerraform;
class GkeonpremBareMetalAdminClusterStatusOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // conditions - computed: true, optional: false, required: false
        this._conditions = new GkeonpremBareMetalAdminClusterStatusConditionsList(this, "conditions", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    get conditions() {
        return this._conditions;
    }
    // error_message - computed: true, optional: false, required: false
    get errorMessage() {
        return this.getStringAttribute('error_message');
    }
}
exports.GkeonpremBareMetalAdminClusterStatusOutputReference = GkeonpremBareMetalAdminClusterStatusOutputReference;
_e = JSII_RTTI_SYMBOL_1;
GkeonpremBareMetalAdminClusterStatusOutputReference[_e] = { fqn: "@cdktf/provider-google.gkeonpremBareMetalAdminCluster.GkeonpremBareMetalAdminClusterStatusOutputReference", version: "14.13.1" };
class GkeonpremBareMetalAdminClusterStatusList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new GkeonpremBareMetalAdminClusterStatusOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.GkeonpremBareMetalAdminClusterStatusList = GkeonpremBareMetalAdminClusterStatusList;
_f = JSII_RTTI_SYMBOL_1;
GkeonpremBareMetalAdminClusterStatusList[_f] = { fqn: "@cdktf/provider-google.gkeonpremBareMetalAdminCluster.GkeonpremBareMetalAdminClusterStatusList", version: "14.13.1" };
function gkeonpremBareMetalAdminClusterValidationCheckStatusResultToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.gkeonpremBareMetalAdminClusterValidationCheckStatusResultToTerraform = gkeonpremBareMetalAdminClusterValidationCheckStatusResultToTerraform;
function gkeonpremBareMetalAdminClusterValidationCheckStatusResultToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.gkeonpremBareMetalAdminClusterValidationCheckStatusResultToHclTerraform = gkeonpremBareMetalAdminClusterValidationCheckStatusResultToHclTerraform;
class GkeonpremBareMetalAdminClusterValidationCheckStatusResultOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // category - computed: true, optional: false, required: false
    get category() {
        return this.getStringAttribute('category');
    }
    // description - computed: true, optional: false, required: false
    get description() {
        return this.getStringAttribute('description');
    }
    // details - computed: true, optional: false, required: false
    get details() {
        return this.getStringAttribute('details');
    }
    // options - computed: true, optional: false, required: false
    get options() {
        return this.getStringAttribute('options');
    }
    // reason - computed: true, optional: false, required: false
    get reason() {
        return this.getStringAttribute('reason');
    }
}
exports.GkeonpremBareMetalAdminClusterValidationCheckStatusResultOutputReference = GkeonpremBareMetalAdminClusterValidationCheckStatusResultOutputReference;
_g = JSII_RTTI_SYMBOL_1;
GkeonpremBareMetalAdminClusterValidationCheckStatusResultOutputReference[_g] = { fqn: "@cdktf/provider-google.gkeonpremBareMetalAdminCluster.GkeonpremBareMetalAdminClusterValidationCheckStatusResultOutputReference", version: "14.13.1" };
class GkeonpremBareMetalAdminClusterValidationCheckStatusResultList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new GkeonpremBareMetalAdminClusterValidationCheckStatusResultOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.GkeonpremBareMetalAdminClusterValidationCheckStatusResultList = GkeonpremBareMetalAdminClusterValidationCheckStatusResultList;
_h = JSII_RTTI_SYMBOL_1;
GkeonpremBareMetalAdminClusterValidationCheckStatusResultList[_h] = { fqn: "@cdktf/provider-google.gkeonpremBareMetalAdminCluster.GkeonpremBareMetalAdminClusterValidationCheckStatusResultList", version: "14.13.1" };
function gkeonpremBareMetalAdminClusterValidationCheckStatusToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.gkeonpremBareMetalAdminClusterValidationCheckStatusToTerraform = gkeonpremBareMetalAdminClusterValidationCheckStatusToTerraform;
function gkeonpremBareMetalAdminClusterValidationCheckStatusToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.gkeonpremBareMetalAdminClusterValidationCheckStatusToHclTerraform = gkeonpremBareMetalAdminClusterValidationCheckStatusToHclTerraform;
class GkeonpremBareMetalAdminClusterValidationCheckStatusOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // result - computed: true, optional: false, required: false
        this._result = new GkeonpremBareMetalAdminClusterValidationCheckStatusResultList(this, "result", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    get result() {
        return this._result;
    }
}
exports.GkeonpremBareMetalAdminClusterValidationCheckStatusOutputReference = GkeonpremBareMetalAdminClusterValidationCheckStatusOutputReference;
_j = JSII_RTTI_SYMBOL_1;
GkeonpremBareMetalAdminClusterValidationCheckStatusOutputReference[_j] = { fqn: "@cdktf/provider-google.gkeonpremBareMetalAdminCluster.GkeonpremBareMetalAdminClusterValidationCheckStatusOutputReference", version: "14.13.1" };
class GkeonpremBareMetalAdminClusterValidationCheckStatusList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new GkeonpremBareMetalAdminClusterValidationCheckStatusOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.GkeonpremBareMetalAdminClusterValidationCheckStatusList = GkeonpremBareMetalAdminClusterValidationCheckStatusList;
_k = JSII_RTTI_SYMBOL_1;
GkeonpremBareMetalAdminClusterValidationCheckStatusList[_k] = { fqn: "@cdktf/provider-google.gkeonpremBareMetalAdminCluster.GkeonpremBareMetalAdminClusterValidationCheckStatusList", version: "14.13.1" };
function gkeonpremBareMetalAdminClusterValidationCheckToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.gkeonpremBareMetalAdminClusterValidationCheckToTerraform = gkeonpremBareMetalAdminClusterValidationCheckToTerraform;
function gkeonpremBareMetalAdminClusterValidationCheckToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.gkeonpremBareMetalAdminClusterValidationCheckToHclTerraform = gkeonpremBareMetalAdminClusterValidationCheckToHclTerraform;
class GkeonpremBareMetalAdminClusterValidationCheckOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // status - computed: true, optional: false, required: false
        this._status = new GkeonpremBareMetalAdminClusterValidationCheckStatusList(this, "status", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // options - computed: true, optional: false, required: false
    get options() {
        return this.getStringAttribute('options');
    }
    // scenario - computed: true, optional: false, required: false
    get scenario() {
        return this.getStringAttribute('scenario');
    }
    get status() {
        return this._status;
    }
}
exports.GkeonpremBareMetalAdminClusterValidationCheckOutputReference = GkeonpremBareMetalAdminClusterValidationCheckOutputReference;
_l = JSII_RTTI_SYMBOL_1;
GkeonpremBareMetalAdminClusterValidationCheckOutputReference[_l] = { fqn: "@cdktf/provider-google.gkeonpremBareMetalAdminCluster.GkeonpremBareMetalAdminClusterValidationCheckOutputReference", version: "14.13.1" };
class GkeonpremBareMetalAdminClusterValidationCheckList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new GkeonpremBareMetalAdminClusterValidationCheckOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.GkeonpremBareMetalAdminClusterValidationCheckList = GkeonpremBareMetalAdminClusterValidationCheckList;
_m = JSII_RTTI_SYMBOL_1;
GkeonpremBareMetalAdminClusterValidationCheckList[_m] = { fqn: "@cdktf/provider-google.gkeonpremBareMetalAdminCluster.GkeonpremBareMetalAdminClusterValidationCheckList", version: "14.13.1" };
function gkeonpremBareMetalAdminClusterClusterOperationsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enable_application_logs: cdktf.booleanToTerraform(struct.enableApplicationLogs),
    };
}
exports.gkeonpremBareMetalAdminClusterClusterOperationsToTerraform = gkeonpremBareMetalAdminClusterClusterOperationsToTerraform;
function gkeonpremBareMetalAdminClusterClusterOperationsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enable_application_logs: {
            value: cdktf.booleanToHclTerraform(struct.enableApplicationLogs),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeonpremBareMetalAdminClusterClusterOperationsToHclTerraform = gkeonpremBareMetalAdminClusterClusterOperationsToHclTerraform;
class GkeonpremBareMetalAdminClusterClusterOperationsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enableApplicationLogs !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableApplicationLogs = this._enableApplicationLogs;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enableApplicationLogs = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enableApplicationLogs = value.enableApplicationLogs;
        }
    }
    get enableApplicationLogs() {
        return this.getBooleanAttribute('enable_application_logs');
    }
    set enableApplicationLogs(value) {
        this._enableApplicationLogs = value;
    }
    resetEnableApplicationLogs() {
        this._enableApplicationLogs = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableApplicationLogsInput() {
        return this._enableApplicationLogs;
    }
}
exports.GkeonpremBareMetalAdminClusterClusterOperationsOutputReference = GkeonpremBareMetalAdminClusterClusterOperationsOutputReference;
_o = JSII_RTTI_SYMBOL_1;
GkeonpremBareMetalAdminClusterClusterOperationsOutputReference[_o] = { fqn: "@cdktf/provider-google.gkeonpremBareMetalAdminCluster.GkeonpremBareMetalAdminClusterClusterOperationsOutputReference", version: "14.13.1" };
function gkeonpremBareMetalAdminClusterControlPlaneApiServerArgsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        argument: cdktf.stringToTerraform(struct.argument),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.gkeonpremBareMetalAdminClusterControlPlaneApiServerArgsToTerraform = gkeonpremBareMetalAdminClusterControlPlaneApiServerArgsToTerraform;
function gkeonpremBareMetalAdminClusterControlPlaneApiServerArgsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        argument: {
            value: cdktf.stringToHclTerraform(struct.argument),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeonpremBareMetalAdminClusterControlPlaneApiServerArgsToHclTerraform = gkeonpremBareMetalAdminClusterControlPlaneApiServerArgsToHclTerraform;
class GkeonpremBareMetalAdminClusterControlPlaneApiServerArgsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._argument !== undefined) {
            hasAnyValues = true;
            internalValueResult.argument = this._argument;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._argument = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._argument = value.argument;
            this._value = value.value;
        }
    }
    get argument() {
        return this.getStringAttribute('argument');
    }
    set argument(value) {
        this._argument = value;
    }
    // Temporarily expose input value. Use with caution.
    get argumentInput() {
        return this._argument;
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.GkeonpremBareMetalAdminClusterControlPlaneApiServerArgsOutputReference = GkeonpremBareMetalAdminClusterControlPlaneApiServerArgsOutputReference;
_p = JSII_RTTI_SYMBOL_1;
GkeonpremBareMetalAdminClusterControlPlaneApiServerArgsOutputReference[_p] = { fqn: "@cdktf/provider-google.gkeonpremBareMetalAdminCluster.GkeonpremBareMetalAdminClusterControlPlaneApiServerArgsOutputReference", version: "14.13.1" };
class GkeonpremBareMetalAdminClusterControlPlaneApiServerArgsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new GkeonpremBareMetalAdminClusterControlPlaneApiServerArgsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.GkeonpremBareMetalAdminClusterControlPlaneApiServerArgsList = GkeonpremBareMetalAdminClusterControlPlaneApiServerArgsList;
_q = JSII_RTTI_SYMBOL_1;
GkeonpremBareMetalAdminClusterControlPlaneApiServerArgsList[_q] = { fqn: "@cdktf/provider-google.gkeonpremBareMetalAdminCluster.GkeonpremBareMetalAdminClusterControlPlaneApiServerArgsList", version: "14.13.1" };
function gkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        labels: cdktf.hashMapper(cdktf.stringToTerraform)(struct.labels),
        node_ip: cdktf.stringToTerraform(struct.nodeIp),
    };
}
exports.gkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsToTerraform = gkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsToTerraform;
function gkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        labels: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.labels),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        node_ip: {
            value: cdktf.stringToHclTerraform(struct.nodeIp),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsToHclTerraform = gkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsToHclTerraform;
class GkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._labels !== undefined) {
            hasAnyValues = true;
            internalValueResult.labels = this._labels;
        }
        if (this._nodeIp !== undefined) {
            hasAnyValues = true;
            internalValueResult.nodeIp = this._nodeIp;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._labels = undefined;
            this._nodeIp = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._labels = value.labels;
            this._nodeIp = value.nodeIp;
        }
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get nodeIp() {
        return this.getStringAttribute('node_ip');
    }
    set nodeIp(value) {
        this._nodeIp = value;
    }
    resetNodeIp() {
        this._nodeIp = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nodeIpInput() {
        return this._nodeIp;
    }
}
exports.GkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsOutputReference = GkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsOutputReference;
_r = JSII_RTTI_SYMBOL_1;
GkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsOutputReference[_r] = { fqn: "@cdktf/provider-google.gkeonpremBareMetalAdminCluster.GkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsOutputReference", version: "14.13.1" };
class GkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new GkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.GkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsList = GkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsList;
_s = JSII_RTTI_SYMBOL_1;
GkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsList[_s] = { fqn: "@cdktf/provider-google.gkeonpremBareMetalAdminCluster.GkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsList", version: "14.13.1" };
function gkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        effect: cdktf.stringToTerraform(struct.effect),
        key: cdktf.stringToTerraform(struct.key),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.gkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsToTerraform = gkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsToTerraform;
function gkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        effect: {
            value: cdktf.stringToHclTerraform(struct.effect),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        key: {
            value: cdktf.stringToHclTerraform(struct.key),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsToHclTerraform = gkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsToHclTerraform;
class GkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._effect !== undefined) {
            hasAnyValues = true;
            internalValueResult.effect = this._effect;
        }
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._effect = undefined;
            this._key = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._effect = value.effect;
            this._key = value.key;
            this._value = value.value;
        }
    }
    get effect() {
        return this.getStringAttribute('effect');
    }
    set effect(value) {
        this._effect = value;
    }
    resetEffect() {
        this._effect = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get effectInput() {
        return this._effect;
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    resetKey() {
        this._key = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    resetValue() {
        this._value = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.GkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsOutputReference = GkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsOutputReference;
_t = JSII_RTTI_SYMBOL_1;
GkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsOutputReference[_t] = { fqn: "@cdktf/provider-google.gkeonpremBareMetalAdminCluster.GkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsOutputReference", version: "14.13.1" };
class GkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new GkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.GkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsList = GkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsList;
_u = JSII_RTTI_SYMBOL_1;
GkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsList[_u] = { fqn: "@cdktf/provider-google.gkeonpremBareMetalAdminCluster.GkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsList", version: "14.13.1" };
function gkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        labels: cdktf.hashMapper(cdktf.stringToTerraform)(struct.labels),
        operating_system: cdktf.stringToTerraform(struct.operatingSystem),
        node_configs: cdktf.listMapper(gkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsToTerraform, true)(struct.nodeConfigs),
        taints: cdktf.listMapper(gkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsToTerraform, true)(struct.taints),
    };
}
exports.gkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigToTerraform = gkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigToTerraform;
function gkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        labels: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.labels),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        operating_system: {
            value: cdktf.stringToHclTerraform(struct.operatingSystem),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        node_configs: {
            value: cdktf.listMapperHcl(gkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsToHclTerraform, true)(struct.nodeConfigs),
            isBlock: true,
            type: "list",
            storageClassType: "GkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsList",
        },
        taints: {
            value: cdktf.listMapperHcl(gkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsToHclTerraform, true)(struct.taints),
            isBlock: true,
            type: "list",
            storageClassType: "GkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigToHclTerraform = gkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigToHclTerraform;
class GkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // node_configs - computed: false, optional: true, required: false
        this._nodeConfigs = new GkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsList(this, "node_configs", false);
        // taints - computed: false, optional: true, required: false
        this._taints = new GkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsList(this, "taints", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._labels !== undefined) {
            hasAnyValues = true;
            internalValueResult.labels = this._labels;
        }
        if (this._operatingSystem !== undefined) {
            hasAnyValues = true;
            internalValueResult.operatingSystem = this._operatingSystem;
        }
        if (this._nodeConfigs?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.nodeConfigs = this._nodeConfigs?.internalValue;
        }
        if (this._taints?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.taints = this._taints?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._labels = undefined;
            this._operatingSystem = undefined;
            this._nodeConfigs.internalValue = undefined;
            this._taints.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._labels = value.labels;
            this._operatingSystem = value.operatingSystem;
            this._nodeConfigs.internalValue = value.nodeConfigs;
            this._taints.internalValue = value.taints;
        }
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get operatingSystem() {
        return this.getStringAttribute('operating_system');
    }
    set operatingSystem(value) {
        this._operatingSystem = value;
    }
    resetOperatingSystem() {
        this._operatingSystem = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get operatingSystemInput() {
        return this._operatingSystem;
    }
    get nodeConfigs() {
        return this._nodeConfigs;
    }
    putNodeConfigs(value) {
        this._nodeConfigs.internalValue = value;
    }
    resetNodeConfigs() {
        this._nodeConfigs.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nodeConfigsInput() {
        return this._nodeConfigs.internalValue;
    }
    get taints() {
        return this._taints;
    }
    putTaints(value) {
        this._taints.internalValue = value;
    }
    resetTaints() {
        this._taints.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get taintsInput() {
        return this._taints.internalValue;
    }
}
exports.GkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigOutputReference = GkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigOutputReference;
_v = JSII_RTTI_SYMBOL_1;
GkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigOutputReference[_v] = { fqn: "@cdktf/provider-google.gkeonpremBareMetalAdminCluster.GkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigOutputReference", version: "14.13.1" };
function gkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        node_pool_config: gkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigToTerraform(struct.nodePoolConfig),
    };
}
exports.gkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigToTerraform = gkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigToTerraform;
function gkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        node_pool_config: {
            value: gkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigToHclTerraform(struct.nodePoolConfig),
            isBlock: true,
            type: "list",
            storageClassType: "GkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigToHclTerraform = gkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigToHclTerraform;
class GkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // node_pool_config - computed: false, optional: false, required: true
        this._nodePoolConfig = new GkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigOutputReference(this, "node_pool_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._nodePoolConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.nodePoolConfig = this._nodePoolConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._nodePoolConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._nodePoolConfig.internalValue = value.nodePoolConfig;
        }
    }
    get nodePoolConfig() {
        return this._nodePoolConfig;
    }
    putNodePoolConfig(value) {
        this._nodePoolConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get nodePoolConfigInput() {
        return this._nodePoolConfig.internalValue;
    }
}
exports.GkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigOutputReference = GkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigOutputReference;
_w = JSII_RTTI_SYMBOL_1;
GkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigOutputReference[_w] = { fqn: "@cdktf/provider-google.gkeonpremBareMetalAdminCluster.GkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigOutputReference", version: "14.13.1" };
function gkeonpremBareMetalAdminClusterControlPlaneToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        api_server_args: cdktf.listMapper(gkeonpremBareMetalAdminClusterControlPlaneApiServerArgsToTerraform, true)(struct.apiServerArgs),
        control_plane_node_pool_config: gkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigToTerraform(struct.controlPlaneNodePoolConfig),
    };
}
exports.gkeonpremBareMetalAdminClusterControlPlaneToTerraform = gkeonpremBareMetalAdminClusterControlPlaneToTerraform;
function gkeonpremBareMetalAdminClusterControlPlaneToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        api_server_args: {
            value: cdktf.listMapperHcl(gkeonpremBareMetalAdminClusterControlPlaneApiServerArgsToHclTerraform, true)(struct.apiServerArgs),
            isBlock: true,
            type: "list",
            storageClassType: "GkeonpremBareMetalAdminClusterControlPlaneApiServerArgsList",
        },
        control_plane_node_pool_config: {
            value: gkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigToHclTerraform(struct.controlPlaneNodePoolConfig),
            isBlock: true,
            type: "list",
            storageClassType: "GkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeonpremBareMetalAdminClusterControlPlaneToHclTerraform = gkeonpremBareMetalAdminClusterControlPlaneToHclTerraform;
class GkeonpremBareMetalAdminClusterControlPlaneOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // api_server_args - computed: false, optional: true, required: false
        this._apiServerArgs = new GkeonpremBareMetalAdminClusterControlPlaneApiServerArgsList(this, "api_server_args", false);
        // control_plane_node_pool_config - computed: false, optional: false, required: true
        this._controlPlaneNodePoolConfig = new GkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigOutputReference(this, "control_plane_node_pool_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._apiServerArgs?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.apiServerArgs = this._apiServerArgs?.internalValue;
        }
        if (this._controlPlaneNodePoolConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.controlPlaneNodePoolConfig = this._controlPlaneNodePoolConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._apiServerArgs.internalValue = undefined;
            this._controlPlaneNodePoolConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._apiServerArgs.internalValue = value.apiServerArgs;
            this._controlPlaneNodePoolConfig.internalValue = value.controlPlaneNodePoolConfig;
        }
    }
    get apiServerArgs() {
        return this._apiServerArgs;
    }
    putApiServerArgs(value) {
        this._apiServerArgs.internalValue = value;
    }
    resetApiServerArgs() {
        this._apiServerArgs.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get apiServerArgsInput() {
        return this._apiServerArgs.internalValue;
    }
    get controlPlaneNodePoolConfig() {
        return this._controlPlaneNodePoolConfig;
    }
    putControlPlaneNodePoolConfig(value) {
        this._controlPlaneNodePoolConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get controlPlaneNodePoolConfigInput() {
        return this._controlPlaneNodePoolConfig.internalValue;
    }
}
exports.GkeonpremBareMetalAdminClusterControlPlaneOutputReference = GkeonpremBareMetalAdminClusterControlPlaneOutputReference;
_x = JSII_RTTI_SYMBOL_1;
GkeonpremBareMetalAdminClusterControlPlaneOutputReference[_x] = { fqn: "@cdktf/provider-google.gkeonpremBareMetalAdminCluster.GkeonpremBareMetalAdminClusterControlPlaneOutputReference", version: "14.13.1" };
function gkeonpremBareMetalAdminClusterLoadBalancerManualLbConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.gkeonpremBareMetalAdminClusterLoadBalancerManualLbConfigToTerraform = gkeonpremBareMetalAdminClusterLoadBalancerManualLbConfigToTerraform;
function gkeonpremBareMetalAdminClusterLoadBalancerManualLbConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeonpremBareMetalAdminClusterLoadBalancerManualLbConfigToHclTerraform = gkeonpremBareMetalAdminClusterLoadBalancerManualLbConfigToHclTerraform;
class GkeonpremBareMetalAdminClusterLoadBalancerManualLbConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
}
exports.GkeonpremBareMetalAdminClusterLoadBalancerManualLbConfigOutputReference = GkeonpremBareMetalAdminClusterLoadBalancerManualLbConfigOutputReference;
_y = JSII_RTTI_SYMBOL_1;
GkeonpremBareMetalAdminClusterLoadBalancerManualLbConfigOutputReference[_y] = { fqn: "@cdktf/provider-google.gkeonpremBareMetalAdminCluster.GkeonpremBareMetalAdminClusterLoadBalancerManualLbConfigOutputReference", version: "14.13.1" };
function gkeonpremBareMetalAdminClusterLoadBalancerPortConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        control_plane_load_balancer_port: cdktf.numberToTerraform(struct.controlPlaneLoadBalancerPort),
    };
}
exports.gkeonpremBareMetalAdminClusterLoadBalancerPortConfigToTerraform = gkeonpremBareMetalAdminClusterLoadBalancerPortConfigToTerraform;
function gkeonpremBareMetalAdminClusterLoadBalancerPortConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        control_plane_load_balancer_port: {
            value: cdktf.numberToHclTerraform(struct.controlPlaneLoadBalancerPort),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeonpremBareMetalAdminClusterLoadBalancerPortConfigToHclTerraform = gkeonpremBareMetalAdminClusterLoadBalancerPortConfigToHclTerraform;
class GkeonpremBareMetalAdminClusterLoadBalancerPortConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._controlPlaneLoadBalancerPort !== undefined) {
            hasAnyValues = true;
            internalValueResult.controlPlaneLoadBalancerPort = this._controlPlaneLoadBalancerPort;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._controlPlaneLoadBalancerPort = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._controlPlaneLoadBalancerPort = value.controlPlaneLoadBalancerPort;
        }
    }
    get controlPlaneLoadBalancerPort() {
        return this.getNumberAttribute('control_plane_load_balancer_port');
    }
    set controlPlaneLoadBalancerPort(value) {
        this._controlPlaneLoadBalancerPort = value;
    }
    // Temporarily expose input value. Use with caution.
    get controlPlaneLoadBalancerPortInput() {
        return this._controlPlaneLoadBalancerPort;
    }
}
exports.GkeonpremBareMetalAdminClusterLoadBalancerPortConfigOutputReference = GkeonpremBareMetalAdminClusterLoadBalancerPortConfigOutputReference;
_z = JSII_RTTI_SYMBOL_1;
GkeonpremBareMetalAdminClusterLoadBalancerPortConfigOutputReference[_z] = { fqn: "@cdktf/provider-google.gkeonpremBareMetalAdminCluster.GkeonpremBareMetalAdminClusterLoadBalancerPortConfigOutputReference", version: "14.13.1" };
function gkeonpremBareMetalAdminClusterLoadBalancerVipConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        control_plane_vip: cdktf.stringToTerraform(struct.controlPlaneVip),
    };
}
exports.gkeonpremBareMetalAdminClusterLoadBalancerVipConfigToTerraform = gkeonpremBareMetalAdminClusterLoadBalancerVipConfigToTerraform;
function gkeonpremBareMetalAdminClusterLoadBalancerVipConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        control_plane_vip: {
            value: cdktf.stringToHclTerraform(struct.controlPlaneVip),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeonpremBareMetalAdminClusterLoadBalancerVipConfigToHclTerraform = gkeonpremBareMetalAdminClusterLoadBalancerVipConfigToHclTerraform;
class GkeonpremBareMetalAdminClusterLoadBalancerVipConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._controlPlaneVip !== undefined) {
            hasAnyValues = true;
            internalValueResult.controlPlaneVip = this._controlPlaneVip;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._controlPlaneVip = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._controlPlaneVip = value.controlPlaneVip;
        }
    }
    get controlPlaneVip() {
        return this.getStringAttribute('control_plane_vip');
    }
    set controlPlaneVip(value) {
        this._controlPlaneVip = value;
    }
    // Temporarily expose input value. Use with caution.
    get controlPlaneVipInput() {
        return this._controlPlaneVip;
    }
}
exports.GkeonpremBareMetalAdminClusterLoadBalancerVipConfigOutputReference = GkeonpremBareMetalAdminClusterLoadBalancerVipConfigOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
GkeonpremBareMetalAdminClusterLoadBalancerVipConfigOutputReference[_0] = { fqn: "@cdktf/provider-google.gkeonpremBareMetalAdminCluster.GkeonpremBareMetalAdminClusterLoadBalancerVipConfigOutputReference", version: "14.13.1" };
function gkeonpremBareMetalAdminClusterLoadBalancerToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        manual_lb_config: gkeonpremBareMetalAdminClusterLoadBalancerManualLbConfigToTerraform(struct.manualLbConfig),
        port_config: gkeonpremBareMetalAdminClusterLoadBalancerPortConfigToTerraform(struct.portConfig),
        vip_config: gkeonpremBareMetalAdminClusterLoadBalancerVipConfigToTerraform(struct.vipConfig),
    };
}
exports.gkeonpremBareMetalAdminClusterLoadBalancerToTerraform = gkeonpremBareMetalAdminClusterLoadBalancerToTerraform;
function gkeonpremBareMetalAdminClusterLoadBalancerToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        manual_lb_config: {
            value: gkeonpremBareMetalAdminClusterLoadBalancerManualLbConfigToHclTerraform(struct.manualLbConfig),
            isBlock: true,
            type: "list",
            storageClassType: "GkeonpremBareMetalAdminClusterLoadBalancerManualLbConfigList",
        },
        port_config: {
            value: gkeonpremBareMetalAdminClusterLoadBalancerPortConfigToHclTerraform(struct.portConfig),
            isBlock: true,
            type: "list",
            storageClassType: "GkeonpremBareMetalAdminClusterLoadBalancerPortConfigList",
        },
        vip_config: {
            value: gkeonpremBareMetalAdminClusterLoadBalancerVipConfigToHclTerraform(struct.vipConfig),
            isBlock: true,
            type: "list",
            storageClassType: "GkeonpremBareMetalAdminClusterLoadBalancerVipConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeonpremBareMetalAdminClusterLoadBalancerToHclTerraform = gkeonpremBareMetalAdminClusterLoadBalancerToHclTerraform;
class GkeonpremBareMetalAdminClusterLoadBalancerOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // manual_lb_config - computed: false, optional: true, required: false
        this._manualLbConfig = new GkeonpremBareMetalAdminClusterLoadBalancerManualLbConfigOutputReference(this, "manual_lb_config");
        // port_config - computed: false, optional: false, required: true
        this._portConfig = new GkeonpremBareMetalAdminClusterLoadBalancerPortConfigOutputReference(this, "port_config");
        // vip_config - computed: false, optional: false, required: true
        this._vipConfig = new GkeonpremBareMetalAdminClusterLoadBalancerVipConfigOutputReference(this, "vip_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._manualLbConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.manualLbConfig = this._manualLbConfig?.internalValue;
        }
        if (this._portConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.portConfig = this._portConfig?.internalValue;
        }
        if (this._vipConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.vipConfig = this._vipConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._manualLbConfig.internalValue = undefined;
            this._portConfig.internalValue = undefined;
            this._vipConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._manualLbConfig.internalValue = value.manualLbConfig;
            this._portConfig.internalValue = value.portConfig;
            this._vipConfig.internalValue = value.vipConfig;
        }
    }
    get manualLbConfig() {
        return this._manualLbConfig;
    }
    putManualLbConfig(value) {
        this._manualLbConfig.internalValue = value;
    }
    resetManualLbConfig() {
        this._manualLbConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get manualLbConfigInput() {
        return this._manualLbConfig.internalValue;
    }
    get portConfig() {
        return this._portConfig;
    }
    putPortConfig(value) {
        this._portConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get portConfigInput() {
        return this._portConfig.internalValue;
    }
    get vipConfig() {
        return this._vipConfig;
    }
    putVipConfig(value) {
        this._vipConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get vipConfigInput() {
        return this._vipConfig.internalValue;
    }
}
exports.GkeonpremBareMetalAdminClusterLoadBalancerOutputReference = GkeonpremBareMetalAdminClusterLoadBalancerOutputReference;
_1 = JSII_RTTI_SYMBOL_1;
GkeonpremBareMetalAdminClusterLoadBalancerOutputReference[_1] = { fqn: "@cdktf/provider-google.gkeonpremBareMetalAdminCluster.GkeonpremBareMetalAdminClusterLoadBalancerOutputReference", version: "14.13.1" };
function gkeonpremBareMetalAdminClusterMaintenanceConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        maintenance_address_cidr_blocks: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.maintenanceAddressCidrBlocks),
    };
}
exports.gkeonpremBareMetalAdminClusterMaintenanceConfigToTerraform = gkeonpremBareMetalAdminClusterMaintenanceConfigToTerraform;
function gkeonpremBareMetalAdminClusterMaintenanceConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        maintenance_address_cidr_blocks: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.maintenanceAddressCidrBlocks),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeonpremBareMetalAdminClusterMaintenanceConfigToHclTerraform = gkeonpremBareMetalAdminClusterMaintenanceConfigToHclTerraform;
class GkeonpremBareMetalAdminClusterMaintenanceConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._maintenanceAddressCidrBlocks !== undefined) {
            hasAnyValues = true;
            internalValueResult.maintenanceAddressCidrBlocks = this._maintenanceAddressCidrBlocks;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._maintenanceAddressCidrBlocks = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._maintenanceAddressCidrBlocks = value.maintenanceAddressCidrBlocks;
        }
    }
    get maintenanceAddressCidrBlocks() {
        return this.getListAttribute('maintenance_address_cidr_blocks');
    }
    set maintenanceAddressCidrBlocks(value) {
        this._maintenanceAddressCidrBlocks = value;
    }
    // Temporarily expose input value. Use with caution.
    get maintenanceAddressCidrBlocksInput() {
        return this._maintenanceAddressCidrBlocks;
    }
}
exports.GkeonpremBareMetalAdminClusterMaintenanceConfigOutputReference = GkeonpremBareMetalAdminClusterMaintenanceConfigOutputReference;
_2 = JSII_RTTI_SYMBOL_1;
GkeonpremBareMetalAdminClusterMaintenanceConfigOutputReference[_2] = { fqn: "@cdktf/provider-google.gkeonpremBareMetalAdminCluster.GkeonpremBareMetalAdminClusterMaintenanceConfigOutputReference", version: "14.13.1" };
function gkeonpremBareMetalAdminClusterNetworkConfigIslandModeCidrToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        pod_address_cidr_blocks: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.podAddressCidrBlocks),
        service_address_cidr_blocks: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.serviceAddressCidrBlocks),
    };
}
exports.gkeonpremBareMetalAdminClusterNetworkConfigIslandModeCidrToTerraform = gkeonpremBareMetalAdminClusterNetworkConfigIslandModeCidrToTerraform;
function gkeonpremBareMetalAdminClusterNetworkConfigIslandModeCidrToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        pod_address_cidr_blocks: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.podAddressCidrBlocks),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        service_address_cidr_blocks: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.serviceAddressCidrBlocks),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeonpremBareMetalAdminClusterNetworkConfigIslandModeCidrToHclTerraform = gkeonpremBareMetalAdminClusterNetworkConfigIslandModeCidrToHclTerraform;
class GkeonpremBareMetalAdminClusterNetworkConfigIslandModeCidrOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._podAddressCidrBlocks !== undefined) {
            hasAnyValues = true;
            internalValueResult.podAddressCidrBlocks = this._podAddressCidrBlocks;
        }
        if (this._serviceAddressCidrBlocks !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceAddressCidrBlocks = this._serviceAddressCidrBlocks;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._podAddressCidrBlocks = undefined;
            this._serviceAddressCidrBlocks = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._podAddressCidrBlocks = value.podAddressCidrBlocks;
            this._serviceAddressCidrBlocks = value.serviceAddressCidrBlocks;
        }
    }
    get podAddressCidrBlocks() {
        return this.getListAttribute('pod_address_cidr_blocks');
    }
    set podAddressCidrBlocks(value) {
        this._podAddressCidrBlocks = value;
    }
    // Temporarily expose input value. Use with caution.
    get podAddressCidrBlocksInput() {
        return this._podAddressCidrBlocks;
    }
    get serviceAddressCidrBlocks() {
        return this.getListAttribute('service_address_cidr_blocks');
    }
    set serviceAddressCidrBlocks(value) {
        this._serviceAddressCidrBlocks = value;
    }
    // Temporarily expose input value. Use with caution.
    get serviceAddressCidrBlocksInput() {
        return this._serviceAddressCidrBlocks;
    }
}
exports.GkeonpremBareMetalAdminClusterNetworkConfigIslandModeCidrOutputReference = GkeonpremBareMetalAdminClusterNetworkConfigIslandModeCidrOutputReference;
_3 = JSII_RTTI_SYMBOL_1;
GkeonpremBareMetalAdminClusterNetworkConfigIslandModeCidrOutputReference[_3] = { fqn: "@cdktf/provider-google.gkeonpremBareMetalAdminCluster.GkeonpremBareMetalAdminClusterNetworkConfigIslandModeCidrOutputReference", version: "14.13.1" };
function gkeonpremBareMetalAdminClusterNetworkConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        island_mode_cidr: gkeonpremBareMetalAdminClusterNetworkConfigIslandModeCidrToTerraform(struct.islandModeCidr),
    };
}
exports.gkeonpremBareMetalAdminClusterNetworkConfigToTerraform = gkeonpremBareMetalAdminClusterNetworkConfigToTerraform;
function gkeonpremBareMetalAdminClusterNetworkConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        island_mode_cidr: {
            value: gkeonpremBareMetalAdminClusterNetworkConfigIslandModeCidrToHclTerraform(struct.islandModeCidr),
            isBlock: true,
            type: "list",
            storageClassType: "GkeonpremBareMetalAdminClusterNetworkConfigIslandModeCidrList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeonpremBareMetalAdminClusterNetworkConfigToHclTerraform = gkeonpremBareMetalAdminClusterNetworkConfigToHclTerraform;
class GkeonpremBareMetalAdminClusterNetworkConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // island_mode_cidr - computed: false, optional: true, required: false
        this._islandModeCidr = new GkeonpremBareMetalAdminClusterNetworkConfigIslandModeCidrOutputReference(this, "island_mode_cidr");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._islandModeCidr?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.islandModeCidr = this._islandModeCidr?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._islandModeCidr.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._islandModeCidr.internalValue = value.islandModeCidr;
        }
    }
    get islandModeCidr() {
        return this._islandModeCidr;
    }
    putIslandModeCidr(value) {
        this._islandModeCidr.internalValue = value;
    }
    resetIslandModeCidr() {
        this._islandModeCidr.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get islandModeCidrInput() {
        return this._islandModeCidr.internalValue;
    }
}
exports.GkeonpremBareMetalAdminClusterNetworkConfigOutputReference = GkeonpremBareMetalAdminClusterNetworkConfigOutputReference;
_4 = JSII_RTTI_SYMBOL_1;
GkeonpremBareMetalAdminClusterNetworkConfigOutputReference[_4] = { fqn: "@cdktf/provider-google.gkeonpremBareMetalAdminCluster.GkeonpremBareMetalAdminClusterNetworkConfigOutputReference", version: "14.13.1" };
function gkeonpremBareMetalAdminClusterNodeAccessConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        login_user: cdktf.stringToTerraform(struct.loginUser),
    };
}
exports.gkeonpremBareMetalAdminClusterNodeAccessConfigToTerraform = gkeonpremBareMetalAdminClusterNodeAccessConfigToTerraform;
function gkeonpremBareMetalAdminClusterNodeAccessConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        login_user: {
            value: cdktf.stringToHclTerraform(struct.loginUser),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeonpremBareMetalAdminClusterNodeAccessConfigToHclTerraform = gkeonpremBareMetalAdminClusterNodeAccessConfigToHclTerraform;
class GkeonpremBareMetalAdminClusterNodeAccessConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._loginUser !== undefined) {
            hasAnyValues = true;
            internalValueResult.loginUser = this._loginUser;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._loginUser = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._loginUser = value.loginUser;
        }
    }
    get loginUser() {
        return this.getStringAttribute('login_user');
    }
    set loginUser(value) {
        this._loginUser = value;
    }
    resetLoginUser() {
        this._loginUser = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loginUserInput() {
        return this._loginUser;
    }
}
exports.GkeonpremBareMetalAdminClusterNodeAccessConfigOutputReference = GkeonpremBareMetalAdminClusterNodeAccessConfigOutputReference;
_5 = JSII_RTTI_SYMBOL_1;
GkeonpremBareMetalAdminClusterNodeAccessConfigOutputReference[_5] = { fqn: "@cdktf/provider-google.gkeonpremBareMetalAdminCluster.GkeonpremBareMetalAdminClusterNodeAccessConfigOutputReference", version: "14.13.1" };
function gkeonpremBareMetalAdminClusterNodeConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max_pods_per_node: cdktf.numberToTerraform(struct.maxPodsPerNode),
    };
}
exports.gkeonpremBareMetalAdminClusterNodeConfigToTerraform = gkeonpremBareMetalAdminClusterNodeConfigToTerraform;
function gkeonpremBareMetalAdminClusterNodeConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        max_pods_per_node: {
            value: cdktf.numberToHclTerraform(struct.maxPodsPerNode),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeonpremBareMetalAdminClusterNodeConfigToHclTerraform = gkeonpremBareMetalAdminClusterNodeConfigToHclTerraform;
class GkeonpremBareMetalAdminClusterNodeConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._maxPodsPerNode !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxPodsPerNode = this._maxPodsPerNode;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._maxPodsPerNode = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._maxPodsPerNode = value.maxPodsPerNode;
        }
    }
    get maxPodsPerNode() {
        return this.getNumberAttribute('max_pods_per_node');
    }
    set maxPodsPerNode(value) {
        this._maxPodsPerNode = value;
    }
    resetMaxPodsPerNode() {
        this._maxPodsPerNode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxPodsPerNodeInput() {
        return this._maxPodsPerNode;
    }
}
exports.GkeonpremBareMetalAdminClusterNodeConfigOutputReference = GkeonpremBareMetalAdminClusterNodeConfigOutputReference;
_6 = JSII_RTTI_SYMBOL_1;
GkeonpremBareMetalAdminClusterNodeConfigOutputReference[_6] = { fqn: "@cdktf/provider-google.gkeonpremBareMetalAdminCluster.GkeonpremBareMetalAdminClusterNodeConfigOutputReference", version: "14.13.1" };
function gkeonpremBareMetalAdminClusterProxyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        no_proxy: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.noProxy),
        uri: cdktf.stringToTerraform(struct.uri),
    };
}
exports.gkeonpremBareMetalAdminClusterProxyToTerraform = gkeonpremBareMetalAdminClusterProxyToTerraform;
function gkeonpremBareMetalAdminClusterProxyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        no_proxy: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.noProxy),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        uri: {
            value: cdktf.stringToHclTerraform(struct.uri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeonpremBareMetalAdminClusterProxyToHclTerraform = gkeonpremBareMetalAdminClusterProxyToHclTerraform;
class GkeonpremBareMetalAdminClusterProxyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._noProxy !== undefined) {
            hasAnyValues = true;
            internalValueResult.noProxy = this._noProxy;
        }
        if (this._uri !== undefined) {
            hasAnyValues = true;
            internalValueResult.uri = this._uri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._noProxy = undefined;
            this._uri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._noProxy = value.noProxy;
            this._uri = value.uri;
        }
    }
    get noProxy() {
        return this.getListAttribute('no_proxy');
    }
    set noProxy(value) {
        this._noProxy = value;
    }
    resetNoProxy() {
        this._noProxy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get noProxyInput() {
        return this._noProxy;
    }
    get uri() {
        return this.getStringAttribute('uri');
    }
    set uri(value) {
        this._uri = value;
    }
    // Temporarily expose input value. Use with caution.
    get uriInput() {
        return this._uri;
    }
}
exports.GkeonpremBareMetalAdminClusterProxyOutputReference = GkeonpremBareMetalAdminClusterProxyOutputReference;
_7 = JSII_RTTI_SYMBOL_1;
GkeonpremBareMetalAdminClusterProxyOutputReference[_7] = { fqn: "@cdktf/provider-google.gkeonpremBareMetalAdminCluster.GkeonpremBareMetalAdminClusterProxyOutputReference", version: "14.13.1" };
function gkeonpremBareMetalAdminClusterSecurityConfigAuthorizationAdminUsersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        username: cdktf.stringToTerraform(struct.username),
    };
}
exports.gkeonpremBareMetalAdminClusterSecurityConfigAuthorizationAdminUsersToTerraform = gkeonpremBareMetalAdminClusterSecurityConfigAuthorizationAdminUsersToTerraform;
function gkeonpremBareMetalAdminClusterSecurityConfigAuthorizationAdminUsersToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        username: {
            value: cdktf.stringToHclTerraform(struct.username),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeonpremBareMetalAdminClusterSecurityConfigAuthorizationAdminUsersToHclTerraform = gkeonpremBareMetalAdminClusterSecurityConfigAuthorizationAdminUsersToHclTerraform;
class GkeonpremBareMetalAdminClusterSecurityConfigAuthorizationAdminUsersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._username !== undefined) {
            hasAnyValues = true;
            internalValueResult.username = this._username;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._username = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._username = value.username;
        }
    }
    get username() {
        return this.getStringAttribute('username');
    }
    set username(value) {
        this._username = value;
    }
    // Temporarily expose input value. Use with caution.
    get usernameInput() {
        return this._username;
    }
}
exports.GkeonpremBareMetalAdminClusterSecurityConfigAuthorizationAdminUsersOutputReference = GkeonpremBareMetalAdminClusterSecurityConfigAuthorizationAdminUsersOutputReference;
_8 = JSII_RTTI_SYMBOL_1;
GkeonpremBareMetalAdminClusterSecurityConfigAuthorizationAdminUsersOutputReference[_8] = { fqn: "@cdktf/provider-google.gkeonpremBareMetalAdminCluster.GkeonpremBareMetalAdminClusterSecurityConfigAuthorizationAdminUsersOutputReference", version: "14.13.1" };
class GkeonpremBareMetalAdminClusterSecurityConfigAuthorizationAdminUsersList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new GkeonpremBareMetalAdminClusterSecurityConfigAuthorizationAdminUsersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.GkeonpremBareMetalAdminClusterSecurityConfigAuthorizationAdminUsersList = GkeonpremBareMetalAdminClusterSecurityConfigAuthorizationAdminUsersList;
_9 = JSII_RTTI_SYMBOL_1;
GkeonpremBareMetalAdminClusterSecurityConfigAuthorizationAdminUsersList[_9] = { fqn: "@cdktf/provider-google.gkeonpremBareMetalAdminCluster.GkeonpremBareMetalAdminClusterSecurityConfigAuthorizationAdminUsersList", version: "14.13.1" };
function gkeonpremBareMetalAdminClusterSecurityConfigAuthorizationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        admin_users: cdktf.listMapper(gkeonpremBareMetalAdminClusterSecurityConfigAuthorizationAdminUsersToTerraform, true)(struct.adminUsers),
    };
}
exports.gkeonpremBareMetalAdminClusterSecurityConfigAuthorizationToTerraform = gkeonpremBareMetalAdminClusterSecurityConfigAuthorizationToTerraform;
function gkeonpremBareMetalAdminClusterSecurityConfigAuthorizationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        admin_users: {
            value: cdktf.listMapperHcl(gkeonpremBareMetalAdminClusterSecurityConfigAuthorizationAdminUsersToHclTerraform, true)(struct.adminUsers),
            isBlock: true,
            type: "list",
            storageClassType: "GkeonpremBareMetalAdminClusterSecurityConfigAuthorizationAdminUsersList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeonpremBareMetalAdminClusterSecurityConfigAuthorizationToHclTerraform = gkeonpremBareMetalAdminClusterSecurityConfigAuthorizationToHclTerraform;
class GkeonpremBareMetalAdminClusterSecurityConfigAuthorizationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // admin_users - computed: false, optional: false, required: true
        this._adminUsers = new GkeonpremBareMetalAdminClusterSecurityConfigAuthorizationAdminUsersList(this, "admin_users", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._adminUsers?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.adminUsers = this._adminUsers?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._adminUsers.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._adminUsers.internalValue = value.adminUsers;
        }
    }
    get adminUsers() {
        return this._adminUsers;
    }
    putAdminUsers(value) {
        this._adminUsers.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get adminUsersInput() {
        return this._adminUsers.internalValue;
    }
}
exports.GkeonpremBareMetalAdminClusterSecurityConfigAuthorizationOutputReference = GkeonpremBareMetalAdminClusterSecurityConfigAuthorizationOutputReference;
_10 = JSII_RTTI_SYMBOL_1;
GkeonpremBareMetalAdminClusterSecurityConfigAuthorizationOutputReference[_10] = { fqn: "@cdktf/provider-google.gkeonpremBareMetalAdminCluster.GkeonpremBareMetalAdminClusterSecurityConfigAuthorizationOutputReference", version: "14.13.1" };
function gkeonpremBareMetalAdminClusterSecurityConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        authorization: gkeonpremBareMetalAdminClusterSecurityConfigAuthorizationToTerraform(struct.authorization),
    };
}
exports.gkeonpremBareMetalAdminClusterSecurityConfigToTerraform = gkeonpremBareMetalAdminClusterSecurityConfigToTerraform;
function gkeonpremBareMetalAdminClusterSecurityConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        authorization: {
            value: gkeonpremBareMetalAdminClusterSecurityConfigAuthorizationToHclTerraform(struct.authorization),
            isBlock: true,
            type: "list",
            storageClassType: "GkeonpremBareMetalAdminClusterSecurityConfigAuthorizationList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeonpremBareMetalAdminClusterSecurityConfigToHclTerraform = gkeonpremBareMetalAdminClusterSecurityConfigToHclTerraform;
class GkeonpremBareMetalAdminClusterSecurityConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // authorization - computed: false, optional: true, required: false
        this._authorization = new GkeonpremBareMetalAdminClusterSecurityConfigAuthorizationOutputReference(this, "authorization");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._authorization?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.authorization = this._authorization?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._authorization.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._authorization.internalValue = value.authorization;
        }
    }
    get authorization() {
        return this._authorization;
    }
    putAuthorization(value) {
        this._authorization.internalValue = value;
    }
    resetAuthorization() {
        this._authorization.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authorizationInput() {
        return this._authorization.internalValue;
    }
}
exports.GkeonpremBareMetalAdminClusterSecurityConfigOutputReference = GkeonpremBareMetalAdminClusterSecurityConfigOutputReference;
_11 = JSII_RTTI_SYMBOL_1;
GkeonpremBareMetalAdminClusterSecurityConfigOutputReference[_11] = { fqn: "@cdktf/provider-google.gkeonpremBareMetalAdminCluster.GkeonpremBareMetalAdminClusterSecurityConfigOutputReference", version: "14.13.1" };
function gkeonpremBareMetalAdminClusterStorageLvpNodeMountsConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        path: cdktf.stringToTerraform(struct.path),
        storage_class: cdktf.stringToTerraform(struct.storageClass),
    };
}
exports.gkeonpremBareMetalAdminClusterStorageLvpNodeMountsConfigToTerraform = gkeonpremBareMetalAdminClusterStorageLvpNodeMountsConfigToTerraform;
function gkeonpremBareMetalAdminClusterStorageLvpNodeMountsConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        path: {
            value: cdktf.stringToHclTerraform(struct.path),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        storage_class: {
            value: cdktf.stringToHclTerraform(struct.storageClass),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeonpremBareMetalAdminClusterStorageLvpNodeMountsConfigToHclTerraform = gkeonpremBareMetalAdminClusterStorageLvpNodeMountsConfigToHclTerraform;
class GkeonpremBareMetalAdminClusterStorageLvpNodeMountsConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._path !== undefined) {
            hasAnyValues = true;
            internalValueResult.path = this._path;
        }
        if (this._storageClass !== undefined) {
            hasAnyValues = true;
            internalValueResult.storageClass = this._storageClass;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._path = undefined;
            this._storageClass = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._path = value.path;
            this._storageClass = value.storageClass;
        }
    }
    get path() {
        return this.getStringAttribute('path');
    }
    set path(value) {
        this._path = value;
    }
    // Temporarily expose input value. Use with caution.
    get pathInput() {
        return this._path;
    }
    get storageClass() {
        return this.getStringAttribute('storage_class');
    }
    set storageClass(value) {
        this._storageClass = value;
    }
    // Temporarily expose input value. Use with caution.
    get storageClassInput() {
        return this._storageClass;
    }
}
exports.GkeonpremBareMetalAdminClusterStorageLvpNodeMountsConfigOutputReference = GkeonpremBareMetalAdminClusterStorageLvpNodeMountsConfigOutputReference;
_12 = JSII_RTTI_SYMBOL_1;
GkeonpremBareMetalAdminClusterStorageLvpNodeMountsConfigOutputReference[_12] = { fqn: "@cdktf/provider-google.gkeonpremBareMetalAdminCluster.GkeonpremBareMetalAdminClusterStorageLvpNodeMountsConfigOutputReference", version: "14.13.1" };
function gkeonpremBareMetalAdminClusterStorageLvpShareConfigLvpConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        path: cdktf.stringToTerraform(struct.path),
        storage_class: cdktf.stringToTerraform(struct.storageClass),
    };
}
exports.gkeonpremBareMetalAdminClusterStorageLvpShareConfigLvpConfigToTerraform = gkeonpremBareMetalAdminClusterStorageLvpShareConfigLvpConfigToTerraform;
function gkeonpremBareMetalAdminClusterStorageLvpShareConfigLvpConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        path: {
            value: cdktf.stringToHclTerraform(struct.path),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        storage_class: {
            value: cdktf.stringToHclTerraform(struct.storageClass),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeonpremBareMetalAdminClusterStorageLvpShareConfigLvpConfigToHclTerraform = gkeonpremBareMetalAdminClusterStorageLvpShareConfigLvpConfigToHclTerraform;
class GkeonpremBareMetalAdminClusterStorageLvpShareConfigLvpConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._path !== undefined) {
            hasAnyValues = true;
            internalValueResult.path = this._path;
        }
        if (this._storageClass !== undefined) {
            hasAnyValues = true;
            internalValueResult.storageClass = this._storageClass;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._path = undefined;
            this._storageClass = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._path = value.path;
            this._storageClass = value.storageClass;
        }
    }
    get path() {
        return this.getStringAttribute('path');
    }
    set path(value) {
        this._path = value;
    }
    // Temporarily expose input value. Use with caution.
    get pathInput() {
        return this._path;
    }
    get storageClass() {
        return this.getStringAttribute('storage_class');
    }
    set storageClass(value) {
        this._storageClass = value;
    }
    // Temporarily expose input value. Use with caution.
    get storageClassInput() {
        return this._storageClass;
    }
}
exports.GkeonpremBareMetalAdminClusterStorageLvpShareConfigLvpConfigOutputReference = GkeonpremBareMetalAdminClusterStorageLvpShareConfigLvpConfigOutputReference;
_13 = JSII_RTTI_SYMBOL_1;
GkeonpremBareMetalAdminClusterStorageLvpShareConfigLvpConfigOutputReference[_13] = { fqn: "@cdktf/provider-google.gkeonpremBareMetalAdminCluster.GkeonpremBareMetalAdminClusterStorageLvpShareConfigLvpConfigOutputReference", version: "14.13.1" };
function gkeonpremBareMetalAdminClusterStorageLvpShareConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        shared_path_pv_count: cdktf.numberToTerraform(struct.sharedPathPvCount),
        lvp_config: gkeonpremBareMetalAdminClusterStorageLvpShareConfigLvpConfigToTerraform(struct.lvpConfig),
    };
}
exports.gkeonpremBareMetalAdminClusterStorageLvpShareConfigToTerraform = gkeonpremBareMetalAdminClusterStorageLvpShareConfigToTerraform;
function gkeonpremBareMetalAdminClusterStorageLvpShareConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        shared_path_pv_count: {
            value: cdktf.numberToHclTerraform(struct.sharedPathPvCount),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        lvp_config: {
            value: gkeonpremBareMetalAdminClusterStorageLvpShareConfigLvpConfigToHclTerraform(struct.lvpConfig),
            isBlock: true,
            type: "list",
            storageClassType: "GkeonpremBareMetalAdminClusterStorageLvpShareConfigLvpConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeonpremBareMetalAdminClusterStorageLvpShareConfigToHclTerraform = gkeonpremBareMetalAdminClusterStorageLvpShareConfigToHclTerraform;
class GkeonpremBareMetalAdminClusterStorageLvpShareConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // lvp_config - computed: false, optional: false, required: true
        this._lvpConfig = new GkeonpremBareMetalAdminClusterStorageLvpShareConfigLvpConfigOutputReference(this, "lvp_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._sharedPathPvCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.sharedPathPvCount = this._sharedPathPvCount;
        }
        if (this._lvpConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.lvpConfig = this._lvpConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._sharedPathPvCount = undefined;
            this._lvpConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._sharedPathPvCount = value.sharedPathPvCount;
            this._lvpConfig.internalValue = value.lvpConfig;
        }
    }
    get sharedPathPvCount() {
        return this.getNumberAttribute('shared_path_pv_count');
    }
    set sharedPathPvCount(value) {
        this._sharedPathPvCount = value;
    }
    resetSharedPathPvCount() {
        this._sharedPathPvCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sharedPathPvCountInput() {
        return this._sharedPathPvCount;
    }
    get lvpConfig() {
        return this._lvpConfig;
    }
    putLvpConfig(value) {
        this._lvpConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get lvpConfigInput() {
        return this._lvpConfig.internalValue;
    }
}
exports.GkeonpremBareMetalAdminClusterStorageLvpShareConfigOutputReference = GkeonpremBareMetalAdminClusterStorageLvpShareConfigOutputReference;
_14 = JSII_RTTI_SYMBOL_1;
GkeonpremBareMetalAdminClusterStorageLvpShareConfigOutputReference[_14] = { fqn: "@cdktf/provider-google.gkeonpremBareMetalAdminCluster.GkeonpremBareMetalAdminClusterStorageLvpShareConfigOutputReference", version: "14.13.1" };
function gkeonpremBareMetalAdminClusterStorageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        lvp_node_mounts_config: gkeonpremBareMetalAdminClusterStorageLvpNodeMountsConfigToTerraform(struct.lvpNodeMountsConfig),
        lvp_share_config: gkeonpremBareMetalAdminClusterStorageLvpShareConfigToTerraform(struct.lvpShareConfig),
    };
}
exports.gkeonpremBareMetalAdminClusterStorageToTerraform = gkeonpremBareMetalAdminClusterStorageToTerraform;
function gkeonpremBareMetalAdminClusterStorageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        lvp_node_mounts_config: {
            value: gkeonpremBareMetalAdminClusterStorageLvpNodeMountsConfigToHclTerraform(struct.lvpNodeMountsConfig),
            isBlock: true,
            type: "list",
            storageClassType: "GkeonpremBareMetalAdminClusterStorageLvpNodeMountsConfigList",
        },
        lvp_share_config: {
            value: gkeonpremBareMetalAdminClusterStorageLvpShareConfigToHclTerraform(struct.lvpShareConfig),
            isBlock: true,
            type: "list",
            storageClassType: "GkeonpremBareMetalAdminClusterStorageLvpShareConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeonpremBareMetalAdminClusterStorageToHclTerraform = gkeonpremBareMetalAdminClusterStorageToHclTerraform;
class GkeonpremBareMetalAdminClusterStorageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // lvp_node_mounts_config - computed: false, optional: false, required: true
        this._lvpNodeMountsConfig = new GkeonpremBareMetalAdminClusterStorageLvpNodeMountsConfigOutputReference(this, "lvp_node_mounts_config");
        // lvp_share_config - computed: false, optional: false, required: true
        this._lvpShareConfig = new GkeonpremBareMetalAdminClusterStorageLvpShareConfigOutputReference(this, "lvp_share_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._lvpNodeMountsConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.lvpNodeMountsConfig = this._lvpNodeMountsConfig?.internalValue;
        }
        if (this._lvpShareConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.lvpShareConfig = this._lvpShareConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._lvpNodeMountsConfig.internalValue = undefined;
            this._lvpShareConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._lvpNodeMountsConfig.internalValue = value.lvpNodeMountsConfig;
            this._lvpShareConfig.internalValue = value.lvpShareConfig;
        }
    }
    get lvpNodeMountsConfig() {
        return this._lvpNodeMountsConfig;
    }
    putLvpNodeMountsConfig(value) {
        this._lvpNodeMountsConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get lvpNodeMountsConfigInput() {
        return this._lvpNodeMountsConfig.internalValue;
    }
    get lvpShareConfig() {
        return this._lvpShareConfig;
    }
    putLvpShareConfig(value) {
        this._lvpShareConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get lvpShareConfigInput() {
        return this._lvpShareConfig.internalValue;
    }
}
exports.GkeonpremBareMetalAdminClusterStorageOutputReference = GkeonpremBareMetalAdminClusterStorageOutputReference;
_15 = JSII_RTTI_SYMBOL_1;
GkeonpremBareMetalAdminClusterStorageOutputReference[_15] = { fqn: "@cdktf/provider-google.gkeonpremBareMetalAdminCluster.GkeonpremBareMetalAdminClusterStorageOutputReference", version: "14.13.1" };
function gkeonpremBareMetalAdminClusterTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.gkeonpremBareMetalAdminClusterTimeoutsToTerraform = gkeonpremBareMetalAdminClusterTimeoutsToTerraform;
function gkeonpremBareMetalAdminClusterTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeonpremBareMetalAdminClusterTimeoutsToHclTerraform = gkeonpremBareMetalAdminClusterTimeoutsToHclTerraform;
class GkeonpremBareMetalAdminClusterTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.GkeonpremBareMetalAdminClusterTimeoutsOutputReference = GkeonpremBareMetalAdminClusterTimeoutsOutputReference;
_16 = JSII_RTTI_SYMBOL_1;
GkeonpremBareMetalAdminClusterTimeoutsOutputReference[_16] = { fqn: "@cdktf/provider-google.gkeonpremBareMetalAdminCluster.GkeonpremBareMetalAdminClusterTimeoutsOutputReference", version: "14.13.1" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/gkeonprem_bare_metal_admin_cluster google_gkeonprem_bare_metal_admin_cluster}
*/
class GkeonpremBareMetalAdminCluster extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a GkeonpremBareMetalAdminCluster resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the GkeonpremBareMetalAdminCluster to import
    * @param importFromId The id of the existing GkeonpremBareMetalAdminCluster that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/gkeonprem_bare_metal_admin_cluster#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the GkeonpremBareMetalAdminCluster to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_gkeonprem_bare_metal_admin_cluster", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/gkeonprem_bare_metal_admin_cluster google_gkeonprem_bare_metal_admin_cluster} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options GkeonpremBareMetalAdminClusterConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_gkeonprem_bare_metal_admin_cluster',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // effective_annotations - computed: true, optional: false, required: false
        this._effectiveAnnotations = new cdktf.StringMap(this, "effective_annotations");
        // fleet - computed: true, optional: false, required: false
        this._fleet = new GkeonpremBareMetalAdminClusterFleetList(this, "fleet", false);
        // status - computed: true, optional: false, required: false
        this._status = new GkeonpremBareMetalAdminClusterStatusList(this, "status", false);
        // validation_check - computed: true, optional: false, required: false
        this._validationCheck = new GkeonpremBareMetalAdminClusterValidationCheckList(this, "validation_check", false);
        // cluster_operations - computed: false, optional: true, required: false
        this._clusterOperations = new GkeonpremBareMetalAdminClusterClusterOperationsOutputReference(this, "cluster_operations");
        // control_plane - computed: false, optional: true, required: false
        this._controlPlane = new GkeonpremBareMetalAdminClusterControlPlaneOutputReference(this, "control_plane");
        // load_balancer - computed: false, optional: true, required: false
        this._loadBalancer = new GkeonpremBareMetalAdminClusterLoadBalancerOutputReference(this, "load_balancer");
        // maintenance_config - computed: false, optional: true, required: false
        this._maintenanceConfig = new GkeonpremBareMetalAdminClusterMaintenanceConfigOutputReference(this, "maintenance_config");
        // network_config - computed: false, optional: true, required: false
        this._networkConfig = new GkeonpremBareMetalAdminClusterNetworkConfigOutputReference(this, "network_config");
        // node_access_config - computed: false, optional: true, required: false
        this._nodeAccessConfig = new GkeonpremBareMetalAdminClusterNodeAccessConfigOutputReference(this, "node_access_config");
        // node_config - computed: false, optional: true, required: false
        this._nodeConfig = new GkeonpremBareMetalAdminClusterNodeConfigOutputReference(this, "node_config");
        // proxy - computed: false, optional: true, required: false
        this._proxy = new GkeonpremBareMetalAdminClusterProxyOutputReference(this, "proxy");
        // security_config - computed: false, optional: true, required: false
        this._securityConfig = new GkeonpremBareMetalAdminClusterSecurityConfigOutputReference(this, "security_config");
        // storage - computed: false, optional: true, required: false
        this._storage = new GkeonpremBareMetalAdminClusterStorageOutputReference(this, "storage");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new GkeonpremBareMetalAdminClusterTimeoutsOutputReference(this, "timeouts");
        this._annotations = config.annotations;
        this._bareMetalVersion = config.bareMetalVersion;
        this._description = config.description;
        this._id = config.id;
        this._location = config.location;
        this._name = config.name;
        this._project = config.project;
        this._clusterOperations.internalValue = config.clusterOperations;
        this._controlPlane.internalValue = config.controlPlane;
        this._loadBalancer.internalValue = config.loadBalancer;
        this._maintenanceConfig.internalValue = config.maintenanceConfig;
        this._networkConfig.internalValue = config.networkConfig;
        this._nodeAccessConfig.internalValue = config.nodeAccessConfig;
        this._nodeConfig.internalValue = config.nodeConfig;
        this._proxy.internalValue = config.proxy;
        this._securityConfig.internalValue = config.securityConfig;
        this._storage.internalValue = config.storage;
        this._timeouts.internalValue = config.timeouts;
    }
    get annotations() {
        return this.getStringMapAttribute('annotations');
    }
    set annotations(value) {
        this._annotations = value;
    }
    resetAnnotations() {
        this._annotations = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get annotationsInput() {
        return this._annotations;
    }
    get bareMetalVersion() {
        return this.getStringAttribute('bare_metal_version');
    }
    set bareMetalVersion(value) {
        this._bareMetalVersion = value;
    }
    resetBareMetalVersion() {
        this._bareMetalVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bareMetalVersionInput() {
        return this._bareMetalVersion;
    }
    // create_time - computed: true, optional: false, required: false
    get createTime() {
        return this.getStringAttribute('create_time');
    }
    // delete_time - computed: true, optional: false, required: false
    get deleteTime() {
        return this.getStringAttribute('delete_time');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get effectiveAnnotations() {
        return this._effectiveAnnotations;
    }
    // endpoint - computed: true, optional: false, required: false
    get endpoint() {
        return this.getStringAttribute('endpoint');
    }
    // etag - computed: true, optional: false, required: false
    get etag() {
        return this.getStringAttribute('etag');
    }
    get fleet() {
        return this._fleet;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // local_name - computed: true, optional: false, required: false
    get localName() {
        return this.getStringAttribute('local_name');
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    // reconciling - computed: true, optional: false, required: false
    get reconciling() {
        return this.getBooleanAttribute('reconciling');
    }
    // state - computed: true, optional: false, required: false
    get state() {
        return this.getStringAttribute('state');
    }
    get status() {
        return this._status;
    }
    // uid - computed: true, optional: false, required: false
    get uid() {
        return this.getStringAttribute('uid');
    }
    // update_time - computed: true, optional: false, required: false
    get updateTime() {
        return this.getStringAttribute('update_time');
    }
    get validationCheck() {
        return this._validationCheck;
    }
    get clusterOperations() {
        return this._clusterOperations;
    }
    putClusterOperations(value) {
        this._clusterOperations.internalValue = value;
    }
    resetClusterOperations() {
        this._clusterOperations.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clusterOperationsInput() {
        return this._clusterOperations.internalValue;
    }
    get controlPlane() {
        return this._controlPlane;
    }
    putControlPlane(value) {
        this._controlPlane.internalValue = value;
    }
    resetControlPlane() {
        this._controlPlane.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get controlPlaneInput() {
        return this._controlPlane.internalValue;
    }
    get loadBalancer() {
        return this._loadBalancer;
    }
    putLoadBalancer(value) {
        this._loadBalancer.internalValue = value;
    }
    resetLoadBalancer() {
        this._loadBalancer.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loadBalancerInput() {
        return this._loadBalancer.internalValue;
    }
    get maintenanceConfig() {
        return this._maintenanceConfig;
    }
    putMaintenanceConfig(value) {
        this._maintenanceConfig.internalValue = value;
    }
    resetMaintenanceConfig() {
        this._maintenanceConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maintenanceConfigInput() {
        return this._maintenanceConfig.internalValue;
    }
    get networkConfig() {
        return this._networkConfig;
    }
    putNetworkConfig(value) {
        this._networkConfig.internalValue = value;
    }
    resetNetworkConfig() {
        this._networkConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkConfigInput() {
        return this._networkConfig.internalValue;
    }
    get nodeAccessConfig() {
        return this._nodeAccessConfig;
    }
    putNodeAccessConfig(value) {
        this._nodeAccessConfig.internalValue = value;
    }
    resetNodeAccessConfig() {
        this._nodeAccessConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nodeAccessConfigInput() {
        return this._nodeAccessConfig.internalValue;
    }
    get nodeConfig() {
        return this._nodeConfig;
    }
    putNodeConfig(value) {
        this._nodeConfig.internalValue = value;
    }
    resetNodeConfig() {
        this._nodeConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nodeConfigInput() {
        return this._nodeConfig.internalValue;
    }
    get proxy() {
        return this._proxy;
    }
    putProxy(value) {
        this._proxy.internalValue = value;
    }
    resetProxy() {
        this._proxy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get proxyInput() {
        return this._proxy.internalValue;
    }
    get securityConfig() {
        return this._securityConfig;
    }
    putSecurityConfig(value) {
        this._securityConfig.internalValue = value;
    }
    resetSecurityConfig() {
        this._securityConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityConfigInput() {
        return this._securityConfig.internalValue;
    }
    get storage() {
        return this._storage;
    }
    putStorage(value) {
        this._storage.internalValue = value;
    }
    resetStorage() {
        this._storage.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get storageInput() {
        return this._storage.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            annotations: cdktf.hashMapper(cdktf.stringToTerraform)(this._annotations),
            bare_metal_version: cdktf.stringToTerraform(this._bareMetalVersion),
            description: cdktf.stringToTerraform(this._description),
            id: cdktf.stringToTerraform(this._id),
            location: cdktf.stringToTerraform(this._location),
            name: cdktf.stringToTerraform(this._name),
            project: cdktf.stringToTerraform(this._project),
            cluster_operations: gkeonpremBareMetalAdminClusterClusterOperationsToTerraform(this._clusterOperations.internalValue),
            control_plane: gkeonpremBareMetalAdminClusterControlPlaneToTerraform(this._controlPlane.internalValue),
            load_balancer: gkeonpremBareMetalAdminClusterLoadBalancerToTerraform(this._loadBalancer.internalValue),
            maintenance_config: gkeonpremBareMetalAdminClusterMaintenanceConfigToTerraform(this._maintenanceConfig.internalValue),
            network_config: gkeonpremBareMetalAdminClusterNetworkConfigToTerraform(this._networkConfig.internalValue),
            node_access_config: gkeonpremBareMetalAdminClusterNodeAccessConfigToTerraform(this._nodeAccessConfig.internalValue),
            node_config: gkeonpremBareMetalAdminClusterNodeConfigToTerraform(this._nodeConfig.internalValue),
            proxy: gkeonpremBareMetalAdminClusterProxyToTerraform(this._proxy.internalValue),
            security_config: gkeonpremBareMetalAdminClusterSecurityConfigToTerraform(this._securityConfig.internalValue),
            storage: gkeonpremBareMetalAdminClusterStorageToTerraform(this._storage.internalValue),
            timeouts: gkeonpremBareMetalAdminClusterTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            annotations: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._annotations),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            bare_metal_version: {
                value: cdktf.stringToHclTerraform(this._bareMetalVersion),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            description: {
                value: cdktf.stringToHclTerraform(this._description),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            location: {
                value: cdktf.stringToHclTerraform(this._location),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            name: {
                value: cdktf.stringToHclTerraform(this._name),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            project: {
                value: cdktf.stringToHclTerraform(this._project),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            cluster_operations: {
                value: gkeonpremBareMetalAdminClusterClusterOperationsToHclTerraform(this._clusterOperations.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "GkeonpremBareMetalAdminClusterClusterOperationsList",
            },
            control_plane: {
                value: gkeonpremBareMetalAdminClusterControlPlaneToHclTerraform(this._controlPlane.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "GkeonpremBareMetalAdminClusterControlPlaneList",
            },
            load_balancer: {
                value: gkeonpremBareMetalAdminClusterLoadBalancerToHclTerraform(this._loadBalancer.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "GkeonpremBareMetalAdminClusterLoadBalancerList",
            },
            maintenance_config: {
                value: gkeonpremBareMetalAdminClusterMaintenanceConfigToHclTerraform(this._maintenanceConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "GkeonpremBareMetalAdminClusterMaintenanceConfigList",
            },
            network_config: {
                value: gkeonpremBareMetalAdminClusterNetworkConfigToHclTerraform(this._networkConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "GkeonpremBareMetalAdminClusterNetworkConfigList",
            },
            node_access_config: {
                value: gkeonpremBareMetalAdminClusterNodeAccessConfigToHclTerraform(this._nodeAccessConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "GkeonpremBareMetalAdminClusterNodeAccessConfigList",
            },
            node_config: {
                value: gkeonpremBareMetalAdminClusterNodeConfigToHclTerraform(this._nodeConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "GkeonpremBareMetalAdminClusterNodeConfigList",
            },
            proxy: {
                value: gkeonpremBareMetalAdminClusterProxyToHclTerraform(this._proxy.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "GkeonpremBareMetalAdminClusterProxyList",
            },
            security_config: {
                value: gkeonpremBareMetalAdminClusterSecurityConfigToHclTerraform(this._securityConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "GkeonpremBareMetalAdminClusterSecurityConfigList",
            },
            storage: {
                value: gkeonpremBareMetalAdminClusterStorageToHclTerraform(this._storage.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "GkeonpremBareMetalAdminClusterStorageList",
            },
            timeouts: {
                value: gkeonpremBareMetalAdminClusterTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "GkeonpremBareMetalAdminClusterTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.GkeonpremBareMetalAdminCluster = GkeonpremBareMetalAdminCluster;
_17 = JSII_RTTI_SYMBOL_1;
GkeonpremBareMetalAdminCluster[_17] = { fqn: "@cdktf/provider-google.gkeonpremBareMetalAdminCluster.GkeonpremBareMetalAdminCluster", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
GkeonpremBareMetalAdminCluster.tfResourceType = "google_gkeonprem_bare_metal_admin_cluster";
//# sourceMappingURL=data:application/json;base64,