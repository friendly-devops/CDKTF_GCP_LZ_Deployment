"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataGoogleOracleDatabaseCloudExadataInfrastructures = exports.DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresList = exports.DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresOutputReference = exports.dataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresToHclTerraform = exports.dataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresToTerraform = exports.DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesList = exports.DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesOutputReference = exports.dataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesToHclTerraform = exports.dataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesToTerraform = exports.DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesMaintenanceWindowList = exports.DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesMaintenanceWindowOutputReference = exports.dataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesMaintenanceWindowToHclTerraform = exports.dataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesMaintenanceWindowToTerraform = exports.DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesCustomerContactsList = exports.DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesCustomerContactsOutputReference = exports.dataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesCustomerContactsToHclTerraform = exports.dataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesCustomerContactsToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function dataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesCustomerContactsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.dataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesCustomerContactsToTerraform = dataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesCustomerContactsToTerraform;
function dataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesCustomerContactsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.dataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesCustomerContactsToHclTerraform = dataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesCustomerContactsToHclTerraform;
class DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesCustomerContactsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // email - computed: true, optional: false, required: false
    get email() {
        return this.getStringAttribute('email');
    }
}
exports.DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesCustomerContactsOutputReference = DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesCustomerContactsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesCustomerContactsOutputReference[_a] = { fqn: "@cdktf/provider-google.dataGoogleOracleDatabaseCloudExadataInfrastructures.DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesCustomerContactsOutputReference", version: "14.13.1" };
class DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesCustomerContactsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesCustomerContactsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesCustomerContactsList = DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesCustomerContactsList;
_b = JSII_RTTI_SYMBOL_1;
DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesCustomerContactsList[_b] = { fqn: "@cdktf/provider-google.dataGoogleOracleDatabaseCloudExadataInfrastructures.DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesCustomerContactsList", version: "14.13.1" };
function dataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesMaintenanceWindowToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.dataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesMaintenanceWindowToTerraform = dataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesMaintenanceWindowToTerraform;
function dataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesMaintenanceWindowToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.dataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesMaintenanceWindowToHclTerraform = dataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesMaintenanceWindowToHclTerraform;
class DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesMaintenanceWindowOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // custom_action_timeout_mins - computed: true, optional: false, required: false
    get customActionTimeoutMins() {
        return this.getNumberAttribute('custom_action_timeout_mins');
    }
    // days_of_week - computed: true, optional: false, required: false
    get daysOfWeek() {
        return this.getListAttribute('days_of_week');
    }
    // hours_of_day - computed: true, optional: false, required: false
    get hoursOfDay() {
        return this.getNumberListAttribute('hours_of_day');
    }
    // is_custom_action_timeout_enabled - computed: true, optional: false, required: false
    get isCustomActionTimeoutEnabled() {
        return this.getBooleanAttribute('is_custom_action_timeout_enabled');
    }
    // lead_time_week - computed: true, optional: false, required: false
    get leadTimeWeek() {
        return this.getNumberAttribute('lead_time_week');
    }
    // months - computed: true, optional: false, required: false
    get months() {
        return this.getListAttribute('months');
    }
    // patching_mode - computed: true, optional: false, required: false
    get patchingMode() {
        return this.getStringAttribute('patching_mode');
    }
    // preference - computed: true, optional: false, required: false
    get preference() {
        return this.getStringAttribute('preference');
    }
    // weeks_of_month - computed: true, optional: false, required: false
    get weeksOfMonth() {
        return this.getNumberListAttribute('weeks_of_month');
    }
}
exports.DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesMaintenanceWindowOutputReference = DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesMaintenanceWindowOutputReference;
_c = JSII_RTTI_SYMBOL_1;
DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesMaintenanceWindowOutputReference[_c] = { fqn: "@cdktf/provider-google.dataGoogleOracleDatabaseCloudExadataInfrastructures.DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesMaintenanceWindowOutputReference", version: "14.13.1" };
class DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesMaintenanceWindowList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesMaintenanceWindowOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesMaintenanceWindowList = DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesMaintenanceWindowList;
_d = JSII_RTTI_SYMBOL_1;
DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesMaintenanceWindowList[_d] = { fqn: "@cdktf/provider-google.dataGoogleOracleDatabaseCloudExadataInfrastructures.DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesMaintenanceWindowList", version: "14.13.1" };
function dataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.dataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesToTerraform = dataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesToTerraform;
function dataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.dataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesToHclTerraform = dataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesToHclTerraform;
class DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // customer_contacts - computed: true, optional: false, required: false
        this._customerContacts = new DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesCustomerContactsList(this, "customer_contacts", false);
        // maintenance_window - computed: true, optional: false, required: false
        this._maintenanceWindow = new DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesMaintenanceWindowList(this, "maintenance_window", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // activated_storage_count - computed: true, optional: false, required: false
    get activatedStorageCount() {
        return this.getNumberAttribute('activated_storage_count');
    }
    // additional_storage_count - computed: true, optional: false, required: false
    get additionalStorageCount() {
        return this.getNumberAttribute('additional_storage_count');
    }
    // available_storage_size_gb - computed: true, optional: false, required: false
    get availableStorageSizeGb() {
        return this.getNumberAttribute('available_storage_size_gb');
    }
    // compute_count - computed: true, optional: false, required: false
    get computeCount() {
        return this.getNumberAttribute('compute_count');
    }
    // cpu_count - computed: true, optional: false, required: false
    get cpuCount() {
        return this.getNumberAttribute('cpu_count');
    }
    get customerContacts() {
        return this._customerContacts;
    }
    // data_storage_size_tb - computed: true, optional: false, required: false
    get dataStorageSizeTb() {
        return this.getNumberAttribute('data_storage_size_tb');
    }
    // db_node_storage_size_gb - computed: true, optional: false, required: false
    get dbNodeStorageSizeGb() {
        return this.getNumberAttribute('db_node_storage_size_gb');
    }
    // db_server_version - computed: true, optional: false, required: false
    get dbServerVersion() {
        return this.getStringAttribute('db_server_version');
    }
    get maintenanceWindow() {
        return this._maintenanceWindow;
    }
    // max_cpu_count - computed: true, optional: false, required: false
    get maxCpuCount() {
        return this.getNumberAttribute('max_cpu_count');
    }
    // max_data_storage_tb - computed: true, optional: false, required: false
    get maxDataStorageTb() {
        return this.getNumberAttribute('max_data_storage_tb');
    }
    // max_db_node_storage_size_gb - computed: true, optional: false, required: false
    get maxDbNodeStorageSizeGb() {
        return this.getNumberAttribute('max_db_node_storage_size_gb');
    }
    // max_memory_gb - computed: true, optional: false, required: false
    get maxMemoryGb() {
        return this.getNumberAttribute('max_memory_gb');
    }
    // memory_size_gb - computed: true, optional: false, required: false
    get memorySizeGb() {
        return this.getNumberAttribute('memory_size_gb');
    }
    // monthly_db_server_version - computed: true, optional: false, required: false
    get monthlyDbServerVersion() {
        return this.getStringAttribute('monthly_db_server_version');
    }
    // monthly_storage_server_version - computed: true, optional: false, required: false
    get monthlyStorageServerVersion() {
        return this.getStringAttribute('monthly_storage_server_version');
    }
    // next_maintenance_run_id - computed: true, optional: false, required: false
    get nextMaintenanceRunId() {
        return this.getStringAttribute('next_maintenance_run_id');
    }
    // next_maintenance_run_time - computed: true, optional: false, required: false
    get nextMaintenanceRunTime() {
        return this.getStringAttribute('next_maintenance_run_time');
    }
    // next_security_maintenance_run_time - computed: true, optional: false, required: false
    get nextSecurityMaintenanceRunTime() {
        return this.getStringAttribute('next_security_maintenance_run_time');
    }
    // oci_url - computed: true, optional: false, required: false
    get ociUrl() {
        return this.getStringAttribute('oci_url');
    }
    // ocid - computed: true, optional: false, required: false
    get ocid() {
        return this.getStringAttribute('ocid');
    }
    // shape - computed: true, optional: false, required: false
    get shape() {
        return this.getStringAttribute('shape');
    }
    // state - computed: true, optional: false, required: false
    get state() {
        return this.getStringAttribute('state');
    }
    // storage_count - computed: true, optional: false, required: false
    get storageCount() {
        return this.getNumberAttribute('storage_count');
    }
    // storage_server_version - computed: true, optional: false, required: false
    get storageServerVersion() {
        return this.getStringAttribute('storage_server_version');
    }
    // total_storage_size_gb - computed: true, optional: false, required: false
    get totalStorageSizeGb() {
        return this.getNumberAttribute('total_storage_size_gb');
    }
}
exports.DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesOutputReference = DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesOutputReference;
_e = JSII_RTTI_SYMBOL_1;
DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesOutputReference[_e] = { fqn: "@cdktf/provider-google.dataGoogleOracleDatabaseCloudExadataInfrastructures.DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesOutputReference", version: "14.13.1" };
class DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesList = DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesList;
_f = JSII_RTTI_SYMBOL_1;
DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesList[_f] = { fqn: "@cdktf/provider-google.dataGoogleOracleDatabaseCloudExadataInfrastructures.DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesList", version: "14.13.1" };
function dataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.dataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresToTerraform = dataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresToTerraform;
function dataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.dataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresToHclTerraform = dataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresToHclTerraform;
class DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // effective_labels - computed: true, optional: false, required: false
        this._effectiveLabels = new cdktf.StringMap(this, "effective_labels");
        // labels - computed: true, optional: false, required: false
        this._labels = new cdktf.StringMap(this, "labels");
        // properties - computed: true, optional: false, required: false
        this._properties = new DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresPropertiesList(this, "properties", false);
        // terraform_labels - computed: true, optional: false, required: false
        this._terraformLabels = new cdktf.StringMap(this, "terraform_labels");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // cloud_exadata_infrastructure_id - computed: true, optional: false, required: false
    get cloudExadataInfrastructureId() {
        return this.getStringAttribute('cloud_exadata_infrastructure_id');
    }
    // create_time - computed: true, optional: false, required: false
    get createTime() {
        return this.getStringAttribute('create_time');
    }
    // deletion_protection - computed: true, optional: false, required: false
    get deletionProtection() {
        return this.getBooleanAttribute('deletion_protection');
    }
    // display_name - computed: true, optional: false, required: false
    get displayName() {
        return this.getStringAttribute('display_name');
    }
    get effectiveLabels() {
        return this._effectiveLabels;
    }
    // entitlement_id - computed: true, optional: false, required: false
    get entitlementId() {
        return this.getStringAttribute('entitlement_id');
    }
    // gcp_oracle_zone - computed: true, optional: false, required: false
    get gcpOracleZone() {
        return this.getStringAttribute('gcp_oracle_zone');
    }
    get labels() {
        return this._labels;
    }
    // location - computed: true, optional: false, required: false
    get location() {
        return this.getStringAttribute('location');
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    // project - computed: true, optional: false, required: false
    get project() {
        return this.getStringAttribute('project');
    }
    get properties() {
        return this._properties;
    }
    get terraformLabels() {
        return this._terraformLabels;
    }
}
exports.DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresOutputReference = DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresOutputReference;
_g = JSII_RTTI_SYMBOL_1;
DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresOutputReference[_g] = { fqn: "@cdktf/provider-google.dataGoogleOracleDatabaseCloudExadataInfrastructures.DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresOutputReference", version: "14.13.1" };
class DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresList = DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresList;
_h = JSII_RTTI_SYMBOL_1;
DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresList[_h] = { fqn: "@cdktf/provider-google.dataGoogleOracleDatabaseCloudExadataInfrastructures.DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresList", version: "14.13.1" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/data-sources/oracle_database_cloud_exadata_infrastructures google_oracle_database_cloud_exadata_infrastructures}
*/
class DataGoogleOracleDatabaseCloudExadataInfrastructures extends cdktf.TerraformDataSource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a DataGoogleOracleDatabaseCloudExadataInfrastructures resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the DataGoogleOracleDatabaseCloudExadataInfrastructures to import
    * @param importFromId The id of the existing DataGoogleOracleDatabaseCloudExadataInfrastructures that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/data-sources/oracle_database_cloud_exadata_infrastructures#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the DataGoogleOracleDatabaseCloudExadataInfrastructures to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_oracle_database_cloud_exadata_infrastructures", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/data-sources/oracle_database_cloud_exadata_infrastructures google_oracle_database_cloud_exadata_infrastructures} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataGoogleOracleDatabaseCloudExadataInfrastructuresConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_oracle_database_cloud_exadata_infrastructures',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // ==========
        // ATTRIBUTES
        // ==========
        // cloud_exadata_infrastructures - computed: true, optional: false, required: false
        this._cloudExadataInfrastructures = new DataGoogleOracleDatabaseCloudExadataInfrastructuresCloudExadataInfrastructuresList(this, "cloud_exadata_infrastructures", false);
        this._id = config.id;
        this._location = config.location;
        this._project = config.project;
    }
    get cloudExadataInfrastructures() {
        return this._cloudExadataInfrastructures;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
            location: cdktf.stringToTerraform(this._location),
            project: cdktf.stringToTerraform(this._project),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            location: {
                value: cdktf.stringToHclTerraform(this._location),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            project: {
                value: cdktf.stringToHclTerraform(this._project),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.DataGoogleOracleDatabaseCloudExadataInfrastructures = DataGoogleOracleDatabaseCloudExadataInfrastructures;
_j = JSII_RTTI_SYMBOL_1;
DataGoogleOracleDatabaseCloudExadataInfrastructures[_j] = { fqn: "@cdktf/provider-google.dataGoogleOracleDatabaseCloudExadataInfrastructures.DataGoogleOracleDatabaseCloudExadataInfrastructures", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
DataGoogleOracleDatabaseCloudExadataInfrastructures.tfResourceType = "google_oracle_database_cloud_exadata_infrastructures";
//# sourceMappingURL=data:application/json;base64,