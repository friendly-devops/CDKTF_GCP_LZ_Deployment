"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18;
Object.defineProperty(exports, "__esModule", { value: true });
exports.cloudbuildTriggerBuildSecretToHclTerraform = exports.cloudbuildTriggerBuildSecretToTerraform = exports.CloudbuildTriggerBuildOptionsOutputReference = exports.cloudbuildTriggerBuildOptionsToHclTerraform = exports.cloudbuildTriggerBuildOptionsToTerraform = exports.CloudbuildTriggerBuildOptionsVolumesList = exports.CloudbuildTriggerBuildOptionsVolumesOutputReference = exports.cloudbuildTriggerBuildOptionsVolumesToHclTerraform = exports.cloudbuildTriggerBuildOptionsVolumesToTerraform = exports.CloudbuildTriggerBuildAvailableSecretsOutputReference = exports.cloudbuildTriggerBuildAvailableSecretsToHclTerraform = exports.cloudbuildTriggerBuildAvailableSecretsToTerraform = exports.CloudbuildTriggerBuildAvailableSecretsSecretManagerList = exports.CloudbuildTriggerBuildAvailableSecretsSecretManagerOutputReference = exports.cloudbuildTriggerBuildAvailableSecretsSecretManagerToHclTerraform = exports.cloudbuildTriggerBuildAvailableSecretsSecretManagerToTerraform = exports.CloudbuildTriggerBuildArtifactsOutputReference = exports.cloudbuildTriggerBuildArtifactsToHclTerraform = exports.cloudbuildTriggerBuildArtifactsToTerraform = exports.CloudbuildTriggerBuildArtifactsPythonPackagesList = exports.CloudbuildTriggerBuildArtifactsPythonPackagesOutputReference = exports.cloudbuildTriggerBuildArtifactsPythonPackagesToHclTerraform = exports.cloudbuildTriggerBuildArtifactsPythonPackagesToTerraform = exports.CloudbuildTriggerBuildArtifactsObjectsOutputReference = exports.cloudbuildTriggerBuildArtifactsObjectsToHclTerraform = exports.cloudbuildTriggerBuildArtifactsObjectsToTerraform = exports.CloudbuildTriggerBuildArtifactsObjectsTimingList = exports.CloudbuildTriggerBuildArtifactsObjectsTimingOutputReference = exports.cloudbuildTriggerBuildArtifactsObjectsTimingToHclTerraform = exports.cloudbuildTriggerBuildArtifactsObjectsTimingToTerraform = exports.CloudbuildTriggerBuildArtifactsNpmPackagesList = exports.CloudbuildTriggerBuildArtifactsNpmPackagesOutputReference = exports.cloudbuildTriggerBuildArtifactsNpmPackagesToHclTerraform = exports.cloudbuildTriggerBuildArtifactsNpmPackagesToTerraform = exports.CloudbuildTriggerBuildArtifactsMavenArtifactsList = exports.CloudbuildTriggerBuildArtifactsMavenArtifactsOutputReference = exports.cloudbuildTriggerBuildArtifactsMavenArtifactsToHclTerraform = exports.cloudbuildTriggerBuildArtifactsMavenArtifactsToTerraform = exports.CloudbuildTriggerBitbucketServerTriggerConfigOutputReference = exports.cloudbuildTriggerBitbucketServerTriggerConfigToHclTerraform = exports.cloudbuildTriggerBitbucketServerTriggerConfigToTerraform = exports.CloudbuildTriggerBitbucketServerTriggerConfigPushOutputReference = exports.cloudbuildTriggerBitbucketServerTriggerConfigPushToHclTerraform = exports.cloudbuildTriggerBitbucketServerTriggerConfigPushToTerraform = exports.CloudbuildTriggerBitbucketServerTriggerConfigPullRequestOutputReference = exports.cloudbuildTriggerBitbucketServerTriggerConfigPullRequestToHclTerraform = exports.cloudbuildTriggerBitbucketServerTriggerConfigPullRequestToTerraform = exports.CloudbuildTriggerApprovalConfigOutputReference = exports.cloudbuildTriggerApprovalConfigToHclTerraform = exports.cloudbuildTriggerApprovalConfigToTerraform = void 0;
exports.cloudbuildTriggerTimeoutsToTerraform = exports.CloudbuildTriggerSourceToBuildOutputReference = exports.cloudbuildTriggerSourceToBuildToHclTerraform = exports.cloudbuildTriggerSourceToBuildToTerraform = exports.CloudbuildTriggerRepositoryEventConfigOutputReference = exports.cloudbuildTriggerRepositoryEventConfigToHclTerraform = exports.cloudbuildTriggerRepositoryEventConfigToTerraform = exports.CloudbuildTriggerRepositoryEventConfigPushOutputReference = exports.cloudbuildTriggerRepositoryEventConfigPushToHclTerraform = exports.cloudbuildTriggerRepositoryEventConfigPushToTerraform = exports.CloudbuildTriggerRepositoryEventConfigPullRequestOutputReference = exports.cloudbuildTriggerRepositoryEventConfigPullRequestToHclTerraform = exports.cloudbuildTriggerRepositoryEventConfigPullRequestToTerraform = exports.CloudbuildTriggerPubsubConfigOutputReference = exports.cloudbuildTriggerPubsubConfigToHclTerraform = exports.cloudbuildTriggerPubsubConfigToTerraform = exports.CloudbuildTriggerGithubOutputReference = exports.cloudbuildTriggerGithubToHclTerraform = exports.cloudbuildTriggerGithubToTerraform = exports.CloudbuildTriggerGithubPushOutputReference = exports.cloudbuildTriggerGithubPushToHclTerraform = exports.cloudbuildTriggerGithubPushToTerraform = exports.CloudbuildTriggerGithubPullRequestOutputReference = exports.cloudbuildTriggerGithubPullRequestToHclTerraform = exports.cloudbuildTriggerGithubPullRequestToTerraform = exports.CloudbuildTriggerGitFileSourceOutputReference = exports.cloudbuildTriggerGitFileSourceToHclTerraform = exports.cloudbuildTriggerGitFileSourceToTerraform = exports.CloudbuildTriggerBuildOutputReference = exports.cloudbuildTriggerBuildToHclTerraform = exports.cloudbuildTriggerBuildToTerraform = exports.CloudbuildTriggerBuildStepList = exports.CloudbuildTriggerBuildStepOutputReference = exports.cloudbuildTriggerBuildStepToHclTerraform = exports.cloudbuildTriggerBuildStepToTerraform = exports.CloudbuildTriggerBuildStepVolumesList = exports.CloudbuildTriggerBuildStepVolumesOutputReference = exports.cloudbuildTriggerBuildStepVolumesToHclTerraform = exports.cloudbuildTriggerBuildStepVolumesToTerraform = exports.CloudbuildTriggerBuildSourceOutputReference = exports.cloudbuildTriggerBuildSourceToHclTerraform = exports.cloudbuildTriggerBuildSourceToTerraform = exports.CloudbuildTriggerBuildSourceStorageSourceOutputReference = exports.cloudbuildTriggerBuildSourceStorageSourceToHclTerraform = exports.cloudbuildTriggerBuildSourceStorageSourceToTerraform = exports.CloudbuildTriggerBuildSourceRepoSourceOutputReference = exports.cloudbuildTriggerBuildSourceRepoSourceToHclTerraform = exports.cloudbuildTriggerBuildSourceRepoSourceToTerraform = exports.CloudbuildTriggerBuildSecretList = exports.CloudbuildTriggerBuildSecretOutputReference = void 0;
exports.CloudbuildTrigger = exports.CloudbuildTriggerWebhookConfigOutputReference = exports.cloudbuildTriggerWebhookConfigToHclTerraform = exports.cloudbuildTriggerWebhookConfigToTerraform = exports.CloudbuildTriggerTriggerTemplateOutputReference = exports.cloudbuildTriggerTriggerTemplateToHclTerraform = exports.cloudbuildTriggerTriggerTemplateToTerraform = exports.CloudbuildTriggerTimeoutsOutputReference = exports.cloudbuildTriggerTimeoutsToHclTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function cloudbuildTriggerApprovalConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        approval_required: cdktf.booleanToTerraform(struct.approvalRequired),
    };
}
exports.cloudbuildTriggerApprovalConfigToTerraform = cloudbuildTriggerApprovalConfigToTerraform;
function cloudbuildTriggerApprovalConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        approval_required: {
            value: cdktf.booleanToHclTerraform(struct.approvalRequired),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildTriggerApprovalConfigToHclTerraform = cloudbuildTriggerApprovalConfigToHclTerraform;
class CloudbuildTriggerApprovalConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._approvalRequired !== undefined) {
            hasAnyValues = true;
            internalValueResult.approvalRequired = this._approvalRequired;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._approvalRequired = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._approvalRequired = value.approvalRequired;
        }
    }
    get approvalRequired() {
        return this.getBooleanAttribute('approval_required');
    }
    set approvalRequired(value) {
        this._approvalRequired = value;
    }
    resetApprovalRequired() {
        this._approvalRequired = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get approvalRequiredInput() {
        return this._approvalRequired;
    }
}
exports.CloudbuildTriggerApprovalConfigOutputReference = CloudbuildTriggerApprovalConfigOutputReference;
_a = JSII_RTTI_SYMBOL_1;
CloudbuildTriggerApprovalConfigOutputReference[_a] = { fqn: "@cdktf/provider-google.cloudbuildTrigger.CloudbuildTriggerApprovalConfigOutputReference", version: "14.13.1" };
function cloudbuildTriggerBitbucketServerTriggerConfigPullRequestToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        branch: cdktf.stringToTerraform(struct.branch),
        comment_control: cdktf.stringToTerraform(struct.commentControl),
        invert_regex: cdktf.booleanToTerraform(struct.invertRegex),
    };
}
exports.cloudbuildTriggerBitbucketServerTriggerConfigPullRequestToTerraform = cloudbuildTriggerBitbucketServerTriggerConfigPullRequestToTerraform;
function cloudbuildTriggerBitbucketServerTriggerConfigPullRequestToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        branch: {
            value: cdktf.stringToHclTerraform(struct.branch),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        comment_control: {
            value: cdktf.stringToHclTerraform(struct.commentControl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        invert_regex: {
            value: cdktf.booleanToHclTerraform(struct.invertRegex),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildTriggerBitbucketServerTriggerConfigPullRequestToHclTerraform = cloudbuildTriggerBitbucketServerTriggerConfigPullRequestToHclTerraform;
class CloudbuildTriggerBitbucketServerTriggerConfigPullRequestOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._branch !== undefined) {
            hasAnyValues = true;
            internalValueResult.branch = this._branch;
        }
        if (this._commentControl !== undefined) {
            hasAnyValues = true;
            internalValueResult.commentControl = this._commentControl;
        }
        if (this._invertRegex !== undefined) {
            hasAnyValues = true;
            internalValueResult.invertRegex = this._invertRegex;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._branch = undefined;
            this._commentControl = undefined;
            this._invertRegex = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._branch = value.branch;
            this._commentControl = value.commentControl;
            this._invertRegex = value.invertRegex;
        }
    }
    get branch() {
        return this.getStringAttribute('branch');
    }
    set branch(value) {
        this._branch = value;
    }
    // Temporarily expose input value. Use with caution.
    get branchInput() {
        return this._branch;
    }
    get commentControl() {
        return this.getStringAttribute('comment_control');
    }
    set commentControl(value) {
        this._commentControl = value;
    }
    resetCommentControl() {
        this._commentControl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get commentControlInput() {
        return this._commentControl;
    }
    get invertRegex() {
        return this.getBooleanAttribute('invert_regex');
    }
    set invertRegex(value) {
        this._invertRegex = value;
    }
    resetInvertRegex() {
        this._invertRegex = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get invertRegexInput() {
        return this._invertRegex;
    }
}
exports.CloudbuildTriggerBitbucketServerTriggerConfigPullRequestOutputReference = CloudbuildTriggerBitbucketServerTriggerConfigPullRequestOutputReference;
_b = JSII_RTTI_SYMBOL_1;
CloudbuildTriggerBitbucketServerTriggerConfigPullRequestOutputReference[_b] = { fqn: "@cdktf/provider-google.cloudbuildTrigger.CloudbuildTriggerBitbucketServerTriggerConfigPullRequestOutputReference", version: "14.13.1" };
function cloudbuildTriggerBitbucketServerTriggerConfigPushToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        branch: cdktf.stringToTerraform(struct.branch),
        invert_regex: cdktf.booleanToTerraform(struct.invertRegex),
        tag: cdktf.stringToTerraform(struct.tag),
    };
}
exports.cloudbuildTriggerBitbucketServerTriggerConfigPushToTerraform = cloudbuildTriggerBitbucketServerTriggerConfigPushToTerraform;
function cloudbuildTriggerBitbucketServerTriggerConfigPushToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        branch: {
            value: cdktf.stringToHclTerraform(struct.branch),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        invert_regex: {
            value: cdktf.booleanToHclTerraform(struct.invertRegex),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        tag: {
            value: cdktf.stringToHclTerraform(struct.tag),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildTriggerBitbucketServerTriggerConfigPushToHclTerraform = cloudbuildTriggerBitbucketServerTriggerConfigPushToHclTerraform;
class CloudbuildTriggerBitbucketServerTriggerConfigPushOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._branch !== undefined) {
            hasAnyValues = true;
            internalValueResult.branch = this._branch;
        }
        if (this._invertRegex !== undefined) {
            hasAnyValues = true;
            internalValueResult.invertRegex = this._invertRegex;
        }
        if (this._tag !== undefined) {
            hasAnyValues = true;
            internalValueResult.tag = this._tag;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._branch = undefined;
            this._invertRegex = undefined;
            this._tag = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._branch = value.branch;
            this._invertRegex = value.invertRegex;
            this._tag = value.tag;
        }
    }
    get branch() {
        return this.getStringAttribute('branch');
    }
    set branch(value) {
        this._branch = value;
    }
    resetBranch() {
        this._branch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get branchInput() {
        return this._branch;
    }
    get invertRegex() {
        return this.getBooleanAttribute('invert_regex');
    }
    set invertRegex(value) {
        this._invertRegex = value;
    }
    resetInvertRegex() {
        this._invertRegex = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get invertRegexInput() {
        return this._invertRegex;
    }
    get tag() {
        return this.getStringAttribute('tag');
    }
    set tag(value) {
        this._tag = value;
    }
    resetTag() {
        this._tag = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagInput() {
        return this._tag;
    }
}
exports.CloudbuildTriggerBitbucketServerTriggerConfigPushOutputReference = CloudbuildTriggerBitbucketServerTriggerConfigPushOutputReference;
_c = JSII_RTTI_SYMBOL_1;
CloudbuildTriggerBitbucketServerTriggerConfigPushOutputReference[_c] = { fqn: "@cdktf/provider-google.cloudbuildTrigger.CloudbuildTriggerBitbucketServerTriggerConfigPushOutputReference", version: "14.13.1" };
function cloudbuildTriggerBitbucketServerTriggerConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bitbucket_server_config_resource: cdktf.stringToTerraform(struct.bitbucketServerConfigResource),
        project_key: cdktf.stringToTerraform(struct.projectKey),
        repo_slug: cdktf.stringToTerraform(struct.repoSlug),
        pull_request: cloudbuildTriggerBitbucketServerTriggerConfigPullRequestToTerraform(struct.pullRequest),
        push: cloudbuildTriggerBitbucketServerTriggerConfigPushToTerraform(struct.push),
    };
}
exports.cloudbuildTriggerBitbucketServerTriggerConfigToTerraform = cloudbuildTriggerBitbucketServerTriggerConfigToTerraform;
function cloudbuildTriggerBitbucketServerTriggerConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        bitbucket_server_config_resource: {
            value: cdktf.stringToHclTerraform(struct.bitbucketServerConfigResource),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        project_key: {
            value: cdktf.stringToHclTerraform(struct.projectKey),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        repo_slug: {
            value: cdktf.stringToHclTerraform(struct.repoSlug),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        pull_request: {
            value: cloudbuildTriggerBitbucketServerTriggerConfigPullRequestToHclTerraform(struct.pullRequest),
            isBlock: true,
            type: "list",
            storageClassType: "CloudbuildTriggerBitbucketServerTriggerConfigPullRequestList",
        },
        push: {
            value: cloudbuildTriggerBitbucketServerTriggerConfigPushToHclTerraform(struct.push),
            isBlock: true,
            type: "list",
            storageClassType: "CloudbuildTriggerBitbucketServerTriggerConfigPushList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildTriggerBitbucketServerTriggerConfigToHclTerraform = cloudbuildTriggerBitbucketServerTriggerConfigToHclTerraform;
class CloudbuildTriggerBitbucketServerTriggerConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // pull_request - computed: false, optional: true, required: false
        this._pullRequest = new CloudbuildTriggerBitbucketServerTriggerConfigPullRequestOutputReference(this, "pull_request");
        // push - computed: false, optional: true, required: false
        this._push = new CloudbuildTriggerBitbucketServerTriggerConfigPushOutputReference(this, "push");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bitbucketServerConfigResource !== undefined) {
            hasAnyValues = true;
            internalValueResult.bitbucketServerConfigResource = this._bitbucketServerConfigResource;
        }
        if (this._projectKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.projectKey = this._projectKey;
        }
        if (this._repoSlug !== undefined) {
            hasAnyValues = true;
            internalValueResult.repoSlug = this._repoSlug;
        }
        if (this._pullRequest?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.pullRequest = this._pullRequest?.internalValue;
        }
        if (this._push?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.push = this._push?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bitbucketServerConfigResource = undefined;
            this._projectKey = undefined;
            this._repoSlug = undefined;
            this._pullRequest.internalValue = undefined;
            this._push.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bitbucketServerConfigResource = value.bitbucketServerConfigResource;
            this._projectKey = value.projectKey;
            this._repoSlug = value.repoSlug;
            this._pullRequest.internalValue = value.pullRequest;
            this._push.internalValue = value.push;
        }
    }
    get bitbucketServerConfigResource() {
        return this.getStringAttribute('bitbucket_server_config_resource');
    }
    set bitbucketServerConfigResource(value) {
        this._bitbucketServerConfigResource = value;
    }
    // Temporarily expose input value. Use with caution.
    get bitbucketServerConfigResourceInput() {
        return this._bitbucketServerConfigResource;
    }
    get projectKey() {
        return this.getStringAttribute('project_key');
    }
    set projectKey(value) {
        this._projectKey = value;
    }
    // Temporarily expose input value. Use with caution.
    get projectKeyInput() {
        return this._projectKey;
    }
    get repoSlug() {
        return this.getStringAttribute('repo_slug');
    }
    set repoSlug(value) {
        this._repoSlug = value;
    }
    // Temporarily expose input value. Use with caution.
    get repoSlugInput() {
        return this._repoSlug;
    }
    get pullRequest() {
        return this._pullRequest;
    }
    putPullRequest(value) {
        this._pullRequest.internalValue = value;
    }
    resetPullRequest() {
        this._pullRequest.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pullRequestInput() {
        return this._pullRequest.internalValue;
    }
    get push() {
        return this._push;
    }
    putPush(value) {
        this._push.internalValue = value;
    }
    resetPush() {
        this._push.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pushInput() {
        return this._push.internalValue;
    }
}
exports.CloudbuildTriggerBitbucketServerTriggerConfigOutputReference = CloudbuildTriggerBitbucketServerTriggerConfigOutputReference;
_d = JSII_RTTI_SYMBOL_1;
CloudbuildTriggerBitbucketServerTriggerConfigOutputReference[_d] = { fqn: "@cdktf/provider-google.cloudbuildTrigger.CloudbuildTriggerBitbucketServerTriggerConfigOutputReference", version: "14.13.1" };
function cloudbuildTriggerBuildArtifactsMavenArtifactsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        artifact_id: cdktf.stringToTerraform(struct.artifactId),
        group_id: cdktf.stringToTerraform(struct.groupId),
        path: cdktf.stringToTerraform(struct.path),
        repository: cdktf.stringToTerraform(struct.repository),
        version: cdktf.stringToTerraform(struct.version),
    };
}
exports.cloudbuildTriggerBuildArtifactsMavenArtifactsToTerraform = cloudbuildTriggerBuildArtifactsMavenArtifactsToTerraform;
function cloudbuildTriggerBuildArtifactsMavenArtifactsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        artifact_id: {
            value: cdktf.stringToHclTerraform(struct.artifactId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        group_id: {
            value: cdktf.stringToHclTerraform(struct.groupId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        path: {
            value: cdktf.stringToHclTerraform(struct.path),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        repository: {
            value: cdktf.stringToHclTerraform(struct.repository),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        version: {
            value: cdktf.stringToHclTerraform(struct.version),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildTriggerBuildArtifactsMavenArtifactsToHclTerraform = cloudbuildTriggerBuildArtifactsMavenArtifactsToHclTerraform;
class CloudbuildTriggerBuildArtifactsMavenArtifactsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._artifactId !== undefined) {
            hasAnyValues = true;
            internalValueResult.artifactId = this._artifactId;
        }
        if (this._groupId !== undefined) {
            hasAnyValues = true;
            internalValueResult.groupId = this._groupId;
        }
        if (this._path !== undefined) {
            hasAnyValues = true;
            internalValueResult.path = this._path;
        }
        if (this._repository !== undefined) {
            hasAnyValues = true;
            internalValueResult.repository = this._repository;
        }
        if (this._version !== undefined) {
            hasAnyValues = true;
            internalValueResult.version = this._version;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._artifactId = undefined;
            this._groupId = undefined;
            this._path = undefined;
            this._repository = undefined;
            this._version = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._artifactId = value.artifactId;
            this._groupId = value.groupId;
            this._path = value.path;
            this._repository = value.repository;
            this._version = value.version;
        }
    }
    get artifactId() {
        return this.getStringAttribute('artifact_id');
    }
    set artifactId(value) {
        this._artifactId = value;
    }
    resetArtifactId() {
        this._artifactId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get artifactIdInput() {
        return this._artifactId;
    }
    get groupId() {
        return this.getStringAttribute('group_id');
    }
    set groupId(value) {
        this._groupId = value;
    }
    resetGroupId() {
        this._groupId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get groupIdInput() {
        return this._groupId;
    }
    get path() {
        return this.getStringAttribute('path');
    }
    set path(value) {
        this._path = value;
    }
    resetPath() {
        this._path = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pathInput() {
        return this._path;
    }
    get repository() {
        return this.getStringAttribute('repository');
    }
    set repository(value) {
        this._repository = value;
    }
    resetRepository() {
        this._repository = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get repositoryInput() {
        return this._repository;
    }
    get version() {
        return this.getStringAttribute('version');
    }
    set version(value) {
        this._version = value;
    }
    resetVersion() {
        this._version = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get versionInput() {
        return this._version;
    }
}
exports.CloudbuildTriggerBuildArtifactsMavenArtifactsOutputReference = CloudbuildTriggerBuildArtifactsMavenArtifactsOutputReference;
_e = JSII_RTTI_SYMBOL_1;
CloudbuildTriggerBuildArtifactsMavenArtifactsOutputReference[_e] = { fqn: "@cdktf/provider-google.cloudbuildTrigger.CloudbuildTriggerBuildArtifactsMavenArtifactsOutputReference", version: "14.13.1" };
class CloudbuildTriggerBuildArtifactsMavenArtifactsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new CloudbuildTriggerBuildArtifactsMavenArtifactsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.CloudbuildTriggerBuildArtifactsMavenArtifactsList = CloudbuildTriggerBuildArtifactsMavenArtifactsList;
_f = JSII_RTTI_SYMBOL_1;
CloudbuildTriggerBuildArtifactsMavenArtifactsList[_f] = { fqn: "@cdktf/provider-google.cloudbuildTrigger.CloudbuildTriggerBuildArtifactsMavenArtifactsList", version: "14.13.1" };
function cloudbuildTriggerBuildArtifactsNpmPackagesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        package_path: cdktf.stringToTerraform(struct.packagePath),
        repository: cdktf.stringToTerraform(struct.repository),
    };
}
exports.cloudbuildTriggerBuildArtifactsNpmPackagesToTerraform = cloudbuildTriggerBuildArtifactsNpmPackagesToTerraform;
function cloudbuildTriggerBuildArtifactsNpmPackagesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        package_path: {
            value: cdktf.stringToHclTerraform(struct.packagePath),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        repository: {
            value: cdktf.stringToHclTerraform(struct.repository),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildTriggerBuildArtifactsNpmPackagesToHclTerraform = cloudbuildTriggerBuildArtifactsNpmPackagesToHclTerraform;
class CloudbuildTriggerBuildArtifactsNpmPackagesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._packagePath !== undefined) {
            hasAnyValues = true;
            internalValueResult.packagePath = this._packagePath;
        }
        if (this._repository !== undefined) {
            hasAnyValues = true;
            internalValueResult.repository = this._repository;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._packagePath = undefined;
            this._repository = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._packagePath = value.packagePath;
            this._repository = value.repository;
        }
    }
    get packagePath() {
        return this.getStringAttribute('package_path');
    }
    set packagePath(value) {
        this._packagePath = value;
    }
    resetPackagePath() {
        this._packagePath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get packagePathInput() {
        return this._packagePath;
    }
    get repository() {
        return this.getStringAttribute('repository');
    }
    set repository(value) {
        this._repository = value;
    }
    resetRepository() {
        this._repository = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get repositoryInput() {
        return this._repository;
    }
}
exports.CloudbuildTriggerBuildArtifactsNpmPackagesOutputReference = CloudbuildTriggerBuildArtifactsNpmPackagesOutputReference;
_g = JSII_RTTI_SYMBOL_1;
CloudbuildTriggerBuildArtifactsNpmPackagesOutputReference[_g] = { fqn: "@cdktf/provider-google.cloudbuildTrigger.CloudbuildTriggerBuildArtifactsNpmPackagesOutputReference", version: "14.13.1" };
class CloudbuildTriggerBuildArtifactsNpmPackagesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new CloudbuildTriggerBuildArtifactsNpmPackagesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.CloudbuildTriggerBuildArtifactsNpmPackagesList = CloudbuildTriggerBuildArtifactsNpmPackagesList;
_h = JSII_RTTI_SYMBOL_1;
CloudbuildTriggerBuildArtifactsNpmPackagesList[_h] = { fqn: "@cdktf/provider-google.cloudbuildTrigger.CloudbuildTriggerBuildArtifactsNpmPackagesList", version: "14.13.1" };
function cloudbuildTriggerBuildArtifactsObjectsTimingToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.cloudbuildTriggerBuildArtifactsObjectsTimingToTerraform = cloudbuildTriggerBuildArtifactsObjectsTimingToTerraform;
function cloudbuildTriggerBuildArtifactsObjectsTimingToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.cloudbuildTriggerBuildArtifactsObjectsTimingToHclTerraform = cloudbuildTriggerBuildArtifactsObjectsTimingToHclTerraform;
class CloudbuildTriggerBuildArtifactsObjectsTimingOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // end_time - computed: true, optional: false, required: false
    get endTime() {
        return this.getStringAttribute('end_time');
    }
    // start_time - computed: true, optional: false, required: false
    get startTime() {
        return this.getStringAttribute('start_time');
    }
}
exports.CloudbuildTriggerBuildArtifactsObjectsTimingOutputReference = CloudbuildTriggerBuildArtifactsObjectsTimingOutputReference;
_j = JSII_RTTI_SYMBOL_1;
CloudbuildTriggerBuildArtifactsObjectsTimingOutputReference[_j] = { fqn: "@cdktf/provider-google.cloudbuildTrigger.CloudbuildTriggerBuildArtifactsObjectsTimingOutputReference", version: "14.13.1" };
class CloudbuildTriggerBuildArtifactsObjectsTimingList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new CloudbuildTriggerBuildArtifactsObjectsTimingOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.CloudbuildTriggerBuildArtifactsObjectsTimingList = CloudbuildTriggerBuildArtifactsObjectsTimingList;
_k = JSII_RTTI_SYMBOL_1;
CloudbuildTriggerBuildArtifactsObjectsTimingList[_k] = { fqn: "@cdktf/provider-google.cloudbuildTrigger.CloudbuildTriggerBuildArtifactsObjectsTimingList", version: "14.13.1" };
function cloudbuildTriggerBuildArtifactsObjectsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        location: cdktf.stringToTerraform(struct.location),
        paths: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.paths),
    };
}
exports.cloudbuildTriggerBuildArtifactsObjectsToTerraform = cloudbuildTriggerBuildArtifactsObjectsToTerraform;
function cloudbuildTriggerBuildArtifactsObjectsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        location: {
            value: cdktf.stringToHclTerraform(struct.location),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        paths: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.paths),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildTriggerBuildArtifactsObjectsToHclTerraform = cloudbuildTriggerBuildArtifactsObjectsToHclTerraform;
class CloudbuildTriggerBuildArtifactsObjectsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // timing - computed: true, optional: false, required: false
        this._timing = new CloudbuildTriggerBuildArtifactsObjectsTimingList(this, "timing", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._location !== undefined) {
            hasAnyValues = true;
            internalValueResult.location = this._location;
        }
        if (this._paths !== undefined) {
            hasAnyValues = true;
            internalValueResult.paths = this._paths;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._location = undefined;
            this._paths = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._location = value.location;
            this._paths = value.paths;
        }
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    resetLocation() {
        this._location = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    get paths() {
        return this.getListAttribute('paths');
    }
    set paths(value) {
        this._paths = value;
    }
    resetPaths() {
        this._paths = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pathsInput() {
        return this._paths;
    }
    get timing() {
        return this._timing;
    }
}
exports.CloudbuildTriggerBuildArtifactsObjectsOutputReference = CloudbuildTriggerBuildArtifactsObjectsOutputReference;
_l = JSII_RTTI_SYMBOL_1;
CloudbuildTriggerBuildArtifactsObjectsOutputReference[_l] = { fqn: "@cdktf/provider-google.cloudbuildTrigger.CloudbuildTriggerBuildArtifactsObjectsOutputReference", version: "14.13.1" };
function cloudbuildTriggerBuildArtifactsPythonPackagesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        paths: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.paths),
        repository: cdktf.stringToTerraform(struct.repository),
    };
}
exports.cloudbuildTriggerBuildArtifactsPythonPackagesToTerraform = cloudbuildTriggerBuildArtifactsPythonPackagesToTerraform;
function cloudbuildTriggerBuildArtifactsPythonPackagesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        paths: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.paths),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        repository: {
            value: cdktf.stringToHclTerraform(struct.repository),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildTriggerBuildArtifactsPythonPackagesToHclTerraform = cloudbuildTriggerBuildArtifactsPythonPackagesToHclTerraform;
class CloudbuildTriggerBuildArtifactsPythonPackagesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._paths !== undefined) {
            hasAnyValues = true;
            internalValueResult.paths = this._paths;
        }
        if (this._repository !== undefined) {
            hasAnyValues = true;
            internalValueResult.repository = this._repository;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._paths = undefined;
            this._repository = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._paths = value.paths;
            this._repository = value.repository;
        }
    }
    get paths() {
        return this.getListAttribute('paths');
    }
    set paths(value) {
        this._paths = value;
    }
    resetPaths() {
        this._paths = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pathsInput() {
        return this._paths;
    }
    get repository() {
        return this.getStringAttribute('repository');
    }
    set repository(value) {
        this._repository = value;
    }
    resetRepository() {
        this._repository = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get repositoryInput() {
        return this._repository;
    }
}
exports.CloudbuildTriggerBuildArtifactsPythonPackagesOutputReference = CloudbuildTriggerBuildArtifactsPythonPackagesOutputReference;
_m = JSII_RTTI_SYMBOL_1;
CloudbuildTriggerBuildArtifactsPythonPackagesOutputReference[_m] = { fqn: "@cdktf/provider-google.cloudbuildTrigger.CloudbuildTriggerBuildArtifactsPythonPackagesOutputReference", version: "14.13.1" };
class CloudbuildTriggerBuildArtifactsPythonPackagesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new CloudbuildTriggerBuildArtifactsPythonPackagesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.CloudbuildTriggerBuildArtifactsPythonPackagesList = CloudbuildTriggerBuildArtifactsPythonPackagesList;
_o = JSII_RTTI_SYMBOL_1;
CloudbuildTriggerBuildArtifactsPythonPackagesList[_o] = { fqn: "@cdktf/provider-google.cloudbuildTrigger.CloudbuildTriggerBuildArtifactsPythonPackagesList", version: "14.13.1" };
function cloudbuildTriggerBuildArtifactsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        images: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.images),
        maven_artifacts: cdktf.listMapper(cloudbuildTriggerBuildArtifactsMavenArtifactsToTerraform, true)(struct.mavenArtifacts),
        npm_packages: cdktf.listMapper(cloudbuildTriggerBuildArtifactsNpmPackagesToTerraform, true)(struct.npmPackages),
        objects: cloudbuildTriggerBuildArtifactsObjectsToTerraform(struct.objects),
        python_packages: cdktf.listMapper(cloudbuildTriggerBuildArtifactsPythonPackagesToTerraform, true)(struct.pythonPackages),
    };
}
exports.cloudbuildTriggerBuildArtifactsToTerraform = cloudbuildTriggerBuildArtifactsToTerraform;
function cloudbuildTriggerBuildArtifactsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        images: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.images),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        maven_artifacts: {
            value: cdktf.listMapperHcl(cloudbuildTriggerBuildArtifactsMavenArtifactsToHclTerraform, true)(struct.mavenArtifacts),
            isBlock: true,
            type: "list",
            storageClassType: "CloudbuildTriggerBuildArtifactsMavenArtifactsList",
        },
        npm_packages: {
            value: cdktf.listMapperHcl(cloudbuildTriggerBuildArtifactsNpmPackagesToHclTerraform, true)(struct.npmPackages),
            isBlock: true,
            type: "list",
            storageClassType: "CloudbuildTriggerBuildArtifactsNpmPackagesList",
        },
        objects: {
            value: cloudbuildTriggerBuildArtifactsObjectsToHclTerraform(struct.objects),
            isBlock: true,
            type: "list",
            storageClassType: "CloudbuildTriggerBuildArtifactsObjectsList",
        },
        python_packages: {
            value: cdktf.listMapperHcl(cloudbuildTriggerBuildArtifactsPythonPackagesToHclTerraform, true)(struct.pythonPackages),
            isBlock: true,
            type: "list",
            storageClassType: "CloudbuildTriggerBuildArtifactsPythonPackagesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildTriggerBuildArtifactsToHclTerraform = cloudbuildTriggerBuildArtifactsToHclTerraform;
class CloudbuildTriggerBuildArtifactsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // maven_artifacts - computed: false, optional: true, required: false
        this._mavenArtifacts = new CloudbuildTriggerBuildArtifactsMavenArtifactsList(this, "maven_artifacts", false);
        // npm_packages - computed: false, optional: true, required: false
        this._npmPackages = new CloudbuildTriggerBuildArtifactsNpmPackagesList(this, "npm_packages", false);
        // objects - computed: false, optional: true, required: false
        this._objects = new CloudbuildTriggerBuildArtifactsObjectsOutputReference(this, "objects");
        // python_packages - computed: false, optional: true, required: false
        this._pythonPackages = new CloudbuildTriggerBuildArtifactsPythonPackagesList(this, "python_packages", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._images !== undefined) {
            hasAnyValues = true;
            internalValueResult.images = this._images;
        }
        if (this._mavenArtifacts?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mavenArtifacts = this._mavenArtifacts?.internalValue;
        }
        if (this._npmPackages?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.npmPackages = this._npmPackages?.internalValue;
        }
        if (this._objects?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.objects = this._objects?.internalValue;
        }
        if (this._pythonPackages?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.pythonPackages = this._pythonPackages?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._images = undefined;
            this._mavenArtifacts.internalValue = undefined;
            this._npmPackages.internalValue = undefined;
            this._objects.internalValue = undefined;
            this._pythonPackages.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._images = value.images;
            this._mavenArtifacts.internalValue = value.mavenArtifacts;
            this._npmPackages.internalValue = value.npmPackages;
            this._objects.internalValue = value.objects;
            this._pythonPackages.internalValue = value.pythonPackages;
        }
    }
    get images() {
        return this.getListAttribute('images');
    }
    set images(value) {
        this._images = value;
    }
    resetImages() {
        this._images = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imagesInput() {
        return this._images;
    }
    get mavenArtifacts() {
        return this._mavenArtifacts;
    }
    putMavenArtifacts(value) {
        this._mavenArtifacts.internalValue = value;
    }
    resetMavenArtifacts() {
        this._mavenArtifacts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mavenArtifactsInput() {
        return this._mavenArtifacts.internalValue;
    }
    get npmPackages() {
        return this._npmPackages;
    }
    putNpmPackages(value) {
        this._npmPackages.internalValue = value;
    }
    resetNpmPackages() {
        this._npmPackages.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get npmPackagesInput() {
        return this._npmPackages.internalValue;
    }
    get objects() {
        return this._objects;
    }
    putObjects(value) {
        this._objects.internalValue = value;
    }
    resetObjects() {
        this._objects.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get objectsInput() {
        return this._objects.internalValue;
    }
    get pythonPackages() {
        return this._pythonPackages;
    }
    putPythonPackages(value) {
        this._pythonPackages.internalValue = value;
    }
    resetPythonPackages() {
        this._pythonPackages.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pythonPackagesInput() {
        return this._pythonPackages.internalValue;
    }
}
exports.CloudbuildTriggerBuildArtifactsOutputReference = CloudbuildTriggerBuildArtifactsOutputReference;
_p = JSII_RTTI_SYMBOL_1;
CloudbuildTriggerBuildArtifactsOutputReference[_p] = { fqn: "@cdktf/provider-google.cloudbuildTrigger.CloudbuildTriggerBuildArtifactsOutputReference", version: "14.13.1" };
function cloudbuildTriggerBuildAvailableSecretsSecretManagerToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        env: cdktf.stringToTerraform(struct.env),
        version_name: cdktf.stringToTerraform(struct.versionName),
    };
}
exports.cloudbuildTriggerBuildAvailableSecretsSecretManagerToTerraform = cloudbuildTriggerBuildAvailableSecretsSecretManagerToTerraform;
function cloudbuildTriggerBuildAvailableSecretsSecretManagerToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        env: {
            value: cdktf.stringToHclTerraform(struct.env),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        version_name: {
            value: cdktf.stringToHclTerraform(struct.versionName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildTriggerBuildAvailableSecretsSecretManagerToHclTerraform = cloudbuildTriggerBuildAvailableSecretsSecretManagerToHclTerraform;
class CloudbuildTriggerBuildAvailableSecretsSecretManagerOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._env !== undefined) {
            hasAnyValues = true;
            internalValueResult.env = this._env;
        }
        if (this._versionName !== undefined) {
            hasAnyValues = true;
            internalValueResult.versionName = this._versionName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._env = undefined;
            this._versionName = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._env = value.env;
            this._versionName = value.versionName;
        }
    }
    get env() {
        return this.getStringAttribute('env');
    }
    set env(value) {
        this._env = value;
    }
    // Temporarily expose input value. Use with caution.
    get envInput() {
        return this._env;
    }
    get versionName() {
        return this.getStringAttribute('version_name');
    }
    set versionName(value) {
        this._versionName = value;
    }
    // Temporarily expose input value. Use with caution.
    get versionNameInput() {
        return this._versionName;
    }
}
exports.CloudbuildTriggerBuildAvailableSecretsSecretManagerOutputReference = CloudbuildTriggerBuildAvailableSecretsSecretManagerOutputReference;
_q = JSII_RTTI_SYMBOL_1;
CloudbuildTriggerBuildAvailableSecretsSecretManagerOutputReference[_q] = { fqn: "@cdktf/provider-google.cloudbuildTrigger.CloudbuildTriggerBuildAvailableSecretsSecretManagerOutputReference", version: "14.13.1" };
class CloudbuildTriggerBuildAvailableSecretsSecretManagerList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new CloudbuildTriggerBuildAvailableSecretsSecretManagerOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.CloudbuildTriggerBuildAvailableSecretsSecretManagerList = CloudbuildTriggerBuildAvailableSecretsSecretManagerList;
_r = JSII_RTTI_SYMBOL_1;
CloudbuildTriggerBuildAvailableSecretsSecretManagerList[_r] = { fqn: "@cdktf/provider-google.cloudbuildTrigger.CloudbuildTriggerBuildAvailableSecretsSecretManagerList", version: "14.13.1" };
function cloudbuildTriggerBuildAvailableSecretsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        secret_manager: cdktf.listMapper(cloudbuildTriggerBuildAvailableSecretsSecretManagerToTerraform, true)(struct.secretManager),
    };
}
exports.cloudbuildTriggerBuildAvailableSecretsToTerraform = cloudbuildTriggerBuildAvailableSecretsToTerraform;
function cloudbuildTriggerBuildAvailableSecretsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        secret_manager: {
            value: cdktf.listMapperHcl(cloudbuildTriggerBuildAvailableSecretsSecretManagerToHclTerraform, true)(struct.secretManager),
            isBlock: true,
            type: "list",
            storageClassType: "CloudbuildTriggerBuildAvailableSecretsSecretManagerList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildTriggerBuildAvailableSecretsToHclTerraform = cloudbuildTriggerBuildAvailableSecretsToHclTerraform;
class CloudbuildTriggerBuildAvailableSecretsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // secret_manager - computed: false, optional: false, required: true
        this._secretManager = new CloudbuildTriggerBuildAvailableSecretsSecretManagerList(this, "secret_manager", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._secretManager?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.secretManager = this._secretManager?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._secretManager.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._secretManager.internalValue = value.secretManager;
        }
    }
    get secretManager() {
        return this._secretManager;
    }
    putSecretManager(value) {
        this._secretManager.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get secretManagerInput() {
        return this._secretManager.internalValue;
    }
}
exports.CloudbuildTriggerBuildAvailableSecretsOutputReference = CloudbuildTriggerBuildAvailableSecretsOutputReference;
_s = JSII_RTTI_SYMBOL_1;
CloudbuildTriggerBuildAvailableSecretsOutputReference[_s] = { fqn: "@cdktf/provider-google.cloudbuildTrigger.CloudbuildTriggerBuildAvailableSecretsOutputReference", version: "14.13.1" };
function cloudbuildTriggerBuildOptionsVolumesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        path: cdktf.stringToTerraform(struct.path),
    };
}
exports.cloudbuildTriggerBuildOptionsVolumesToTerraform = cloudbuildTriggerBuildOptionsVolumesToTerraform;
function cloudbuildTriggerBuildOptionsVolumesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        path: {
            value: cdktf.stringToHclTerraform(struct.path),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildTriggerBuildOptionsVolumesToHclTerraform = cloudbuildTriggerBuildOptionsVolumesToHclTerraform;
class CloudbuildTriggerBuildOptionsVolumesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._path !== undefined) {
            hasAnyValues = true;
            internalValueResult.path = this._path;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
            this._path = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
            this._path = value.path;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get path() {
        return this.getStringAttribute('path');
    }
    set path(value) {
        this._path = value;
    }
    resetPath() {
        this._path = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pathInput() {
        return this._path;
    }
}
exports.CloudbuildTriggerBuildOptionsVolumesOutputReference = CloudbuildTriggerBuildOptionsVolumesOutputReference;
_t = JSII_RTTI_SYMBOL_1;
CloudbuildTriggerBuildOptionsVolumesOutputReference[_t] = { fqn: "@cdktf/provider-google.cloudbuildTrigger.CloudbuildTriggerBuildOptionsVolumesOutputReference", version: "14.13.1" };
class CloudbuildTriggerBuildOptionsVolumesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new CloudbuildTriggerBuildOptionsVolumesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.CloudbuildTriggerBuildOptionsVolumesList = CloudbuildTriggerBuildOptionsVolumesList;
_u = JSII_RTTI_SYMBOL_1;
CloudbuildTriggerBuildOptionsVolumesList[_u] = { fqn: "@cdktf/provider-google.cloudbuildTrigger.CloudbuildTriggerBuildOptionsVolumesList", version: "14.13.1" };
function cloudbuildTriggerBuildOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        disk_size_gb: cdktf.numberToTerraform(struct.diskSizeGb),
        dynamic_substitutions: cdktf.booleanToTerraform(struct.dynamicSubstitutions),
        env: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.env),
        log_streaming_option: cdktf.stringToTerraform(struct.logStreamingOption),
        logging: cdktf.stringToTerraform(struct.logging),
        machine_type: cdktf.stringToTerraform(struct.machineType),
        requested_verify_option: cdktf.stringToTerraform(struct.requestedVerifyOption),
        secret_env: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.secretEnv),
        source_provenance_hash: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.sourceProvenanceHash),
        substitution_option: cdktf.stringToTerraform(struct.substitutionOption),
        worker_pool: cdktf.stringToTerraform(struct.workerPool),
        volumes: cdktf.listMapper(cloudbuildTriggerBuildOptionsVolumesToTerraform, true)(struct.volumes),
    };
}
exports.cloudbuildTriggerBuildOptionsToTerraform = cloudbuildTriggerBuildOptionsToTerraform;
function cloudbuildTriggerBuildOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        disk_size_gb: {
            value: cdktf.numberToHclTerraform(struct.diskSizeGb),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        dynamic_substitutions: {
            value: cdktf.booleanToHclTerraform(struct.dynamicSubstitutions),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        env: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.env),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        log_streaming_option: {
            value: cdktf.stringToHclTerraform(struct.logStreamingOption),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        logging: {
            value: cdktf.stringToHclTerraform(struct.logging),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        machine_type: {
            value: cdktf.stringToHclTerraform(struct.machineType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        requested_verify_option: {
            value: cdktf.stringToHclTerraform(struct.requestedVerifyOption),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        secret_env: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.secretEnv),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        source_provenance_hash: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.sourceProvenanceHash),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        substitution_option: {
            value: cdktf.stringToHclTerraform(struct.substitutionOption),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        worker_pool: {
            value: cdktf.stringToHclTerraform(struct.workerPool),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        volumes: {
            value: cdktf.listMapperHcl(cloudbuildTriggerBuildOptionsVolumesToHclTerraform, true)(struct.volumes),
            isBlock: true,
            type: "list",
            storageClassType: "CloudbuildTriggerBuildOptionsVolumesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildTriggerBuildOptionsToHclTerraform = cloudbuildTriggerBuildOptionsToHclTerraform;
class CloudbuildTriggerBuildOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // volumes - computed: false, optional: true, required: false
        this._volumes = new CloudbuildTriggerBuildOptionsVolumesList(this, "volumes", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._diskSizeGb !== undefined) {
            hasAnyValues = true;
            internalValueResult.diskSizeGb = this._diskSizeGb;
        }
        if (this._dynamicSubstitutions !== undefined) {
            hasAnyValues = true;
            internalValueResult.dynamicSubstitutions = this._dynamicSubstitutions;
        }
        if (this._env !== undefined) {
            hasAnyValues = true;
            internalValueResult.env = this._env;
        }
        if (this._logStreamingOption !== undefined) {
            hasAnyValues = true;
            internalValueResult.logStreamingOption = this._logStreamingOption;
        }
        if (this._logging !== undefined) {
            hasAnyValues = true;
            internalValueResult.logging = this._logging;
        }
        if (this._machineType !== undefined) {
            hasAnyValues = true;
            internalValueResult.machineType = this._machineType;
        }
        if (this._requestedVerifyOption !== undefined) {
            hasAnyValues = true;
            internalValueResult.requestedVerifyOption = this._requestedVerifyOption;
        }
        if (this._secretEnv !== undefined) {
            hasAnyValues = true;
            internalValueResult.secretEnv = this._secretEnv;
        }
        if (this._sourceProvenanceHash !== undefined) {
            hasAnyValues = true;
            internalValueResult.sourceProvenanceHash = this._sourceProvenanceHash;
        }
        if (this._substitutionOption !== undefined) {
            hasAnyValues = true;
            internalValueResult.substitutionOption = this._substitutionOption;
        }
        if (this._workerPool !== undefined) {
            hasAnyValues = true;
            internalValueResult.workerPool = this._workerPool;
        }
        if (this._volumes?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.volumes = this._volumes?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._diskSizeGb = undefined;
            this._dynamicSubstitutions = undefined;
            this._env = undefined;
            this._logStreamingOption = undefined;
            this._logging = undefined;
            this._machineType = undefined;
            this._requestedVerifyOption = undefined;
            this._secretEnv = undefined;
            this._sourceProvenanceHash = undefined;
            this._substitutionOption = undefined;
            this._workerPool = undefined;
            this._volumes.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._diskSizeGb = value.diskSizeGb;
            this._dynamicSubstitutions = value.dynamicSubstitutions;
            this._env = value.env;
            this._logStreamingOption = value.logStreamingOption;
            this._logging = value.logging;
            this._machineType = value.machineType;
            this._requestedVerifyOption = value.requestedVerifyOption;
            this._secretEnv = value.secretEnv;
            this._sourceProvenanceHash = value.sourceProvenanceHash;
            this._substitutionOption = value.substitutionOption;
            this._workerPool = value.workerPool;
            this._volumes.internalValue = value.volumes;
        }
    }
    get diskSizeGb() {
        return this.getNumberAttribute('disk_size_gb');
    }
    set diskSizeGb(value) {
        this._diskSizeGb = value;
    }
    resetDiskSizeGb() {
        this._diskSizeGb = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get diskSizeGbInput() {
        return this._diskSizeGb;
    }
    get dynamicSubstitutions() {
        return this.getBooleanAttribute('dynamic_substitutions');
    }
    set dynamicSubstitutions(value) {
        this._dynamicSubstitutions = value;
    }
    resetDynamicSubstitutions() {
        this._dynamicSubstitutions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dynamicSubstitutionsInput() {
        return this._dynamicSubstitutions;
    }
    get env() {
        return this.getListAttribute('env');
    }
    set env(value) {
        this._env = value;
    }
    resetEnv() {
        this._env = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get envInput() {
        return this._env;
    }
    get logStreamingOption() {
        return this.getStringAttribute('log_streaming_option');
    }
    set logStreamingOption(value) {
        this._logStreamingOption = value;
    }
    resetLogStreamingOption() {
        this._logStreamingOption = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logStreamingOptionInput() {
        return this._logStreamingOption;
    }
    get logging() {
        return this.getStringAttribute('logging');
    }
    set logging(value) {
        this._logging = value;
    }
    resetLogging() {
        this._logging = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loggingInput() {
        return this._logging;
    }
    get machineType() {
        return this.getStringAttribute('machine_type');
    }
    set machineType(value) {
        this._machineType = value;
    }
    resetMachineType() {
        this._machineType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get machineTypeInput() {
        return this._machineType;
    }
    get requestedVerifyOption() {
        return this.getStringAttribute('requested_verify_option');
    }
    set requestedVerifyOption(value) {
        this._requestedVerifyOption = value;
    }
    resetRequestedVerifyOption() {
        this._requestedVerifyOption = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestedVerifyOptionInput() {
        return this._requestedVerifyOption;
    }
    get secretEnv() {
        return this.getListAttribute('secret_env');
    }
    set secretEnv(value) {
        this._secretEnv = value;
    }
    resetSecretEnv() {
        this._secretEnv = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secretEnvInput() {
        return this._secretEnv;
    }
    get sourceProvenanceHash() {
        return this.getListAttribute('source_provenance_hash');
    }
    set sourceProvenanceHash(value) {
        this._sourceProvenanceHash = value;
    }
    resetSourceProvenanceHash() {
        this._sourceProvenanceHash = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sourceProvenanceHashInput() {
        return this._sourceProvenanceHash;
    }
    get substitutionOption() {
        return this.getStringAttribute('substitution_option');
    }
    set substitutionOption(value) {
        this._substitutionOption = value;
    }
    resetSubstitutionOption() {
        this._substitutionOption = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get substitutionOptionInput() {
        return this._substitutionOption;
    }
    get workerPool() {
        return this.getStringAttribute('worker_pool');
    }
    set workerPool(value) {
        this._workerPool = value;
    }
    resetWorkerPool() {
        this._workerPool = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get workerPoolInput() {
        return this._workerPool;
    }
    get volumes() {
        return this._volumes;
    }
    putVolumes(value) {
        this._volumes.internalValue = value;
    }
    resetVolumes() {
        this._volumes.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get volumesInput() {
        return this._volumes.internalValue;
    }
}
exports.CloudbuildTriggerBuildOptionsOutputReference = CloudbuildTriggerBuildOptionsOutputReference;
_v = JSII_RTTI_SYMBOL_1;
CloudbuildTriggerBuildOptionsOutputReference[_v] = { fqn: "@cdktf/provider-google.cloudbuildTrigger.CloudbuildTriggerBuildOptionsOutputReference", version: "14.13.1" };
function cloudbuildTriggerBuildSecretToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        kms_key_name: cdktf.stringToTerraform(struct.kmsKeyName),
        secret_env: cdktf.hashMapper(cdktf.stringToTerraform)(struct.secretEnv),
    };
}
exports.cloudbuildTriggerBuildSecretToTerraform = cloudbuildTriggerBuildSecretToTerraform;
function cloudbuildTriggerBuildSecretToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        kms_key_name: {
            value: cdktf.stringToHclTerraform(struct.kmsKeyName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        secret_env: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.secretEnv),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildTriggerBuildSecretToHclTerraform = cloudbuildTriggerBuildSecretToHclTerraform;
class CloudbuildTriggerBuildSecretOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._kmsKeyName !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyName = this._kmsKeyName;
        }
        if (this._secretEnv !== undefined) {
            hasAnyValues = true;
            internalValueResult.secretEnv = this._secretEnv;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._kmsKeyName = undefined;
            this._secretEnv = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._kmsKeyName = value.kmsKeyName;
            this._secretEnv = value.secretEnv;
        }
    }
    get kmsKeyName() {
        return this.getStringAttribute('kms_key_name');
    }
    set kmsKeyName(value) {
        this._kmsKeyName = value;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyNameInput() {
        return this._kmsKeyName;
    }
    get secretEnv() {
        return this.getStringMapAttribute('secret_env');
    }
    set secretEnv(value) {
        this._secretEnv = value;
    }
    resetSecretEnv() {
        this._secretEnv = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secretEnvInput() {
        return this._secretEnv;
    }
}
exports.CloudbuildTriggerBuildSecretOutputReference = CloudbuildTriggerBuildSecretOutputReference;
_w = JSII_RTTI_SYMBOL_1;
CloudbuildTriggerBuildSecretOutputReference[_w] = { fqn: "@cdktf/provider-google.cloudbuildTrigger.CloudbuildTriggerBuildSecretOutputReference", version: "14.13.1" };
class CloudbuildTriggerBuildSecretList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new CloudbuildTriggerBuildSecretOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.CloudbuildTriggerBuildSecretList = CloudbuildTriggerBuildSecretList;
_x = JSII_RTTI_SYMBOL_1;
CloudbuildTriggerBuildSecretList[_x] = { fqn: "@cdktf/provider-google.cloudbuildTrigger.CloudbuildTriggerBuildSecretList", version: "14.13.1" };
function cloudbuildTriggerBuildSourceRepoSourceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        branch_name: cdktf.stringToTerraform(struct.branchName),
        commit_sha: cdktf.stringToTerraform(struct.commitSha),
        dir: cdktf.stringToTerraform(struct.dir),
        invert_regex: cdktf.booleanToTerraform(struct.invertRegex),
        project_id: cdktf.stringToTerraform(struct.projectId),
        repo_name: cdktf.stringToTerraform(struct.repoName),
        substitutions: cdktf.hashMapper(cdktf.stringToTerraform)(struct.substitutions),
        tag_name: cdktf.stringToTerraform(struct.tagName),
    };
}
exports.cloudbuildTriggerBuildSourceRepoSourceToTerraform = cloudbuildTriggerBuildSourceRepoSourceToTerraform;
function cloudbuildTriggerBuildSourceRepoSourceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        branch_name: {
            value: cdktf.stringToHclTerraform(struct.branchName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        commit_sha: {
            value: cdktf.stringToHclTerraform(struct.commitSha),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        dir: {
            value: cdktf.stringToHclTerraform(struct.dir),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        invert_regex: {
            value: cdktf.booleanToHclTerraform(struct.invertRegex),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        project_id: {
            value: cdktf.stringToHclTerraform(struct.projectId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        repo_name: {
            value: cdktf.stringToHclTerraform(struct.repoName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        substitutions: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.substitutions),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        tag_name: {
            value: cdktf.stringToHclTerraform(struct.tagName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildTriggerBuildSourceRepoSourceToHclTerraform = cloudbuildTriggerBuildSourceRepoSourceToHclTerraform;
class CloudbuildTriggerBuildSourceRepoSourceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._branchName !== undefined) {
            hasAnyValues = true;
            internalValueResult.branchName = this._branchName;
        }
        if (this._commitSha !== undefined) {
            hasAnyValues = true;
            internalValueResult.commitSha = this._commitSha;
        }
        if (this._dir !== undefined) {
            hasAnyValues = true;
            internalValueResult.dir = this._dir;
        }
        if (this._invertRegex !== undefined) {
            hasAnyValues = true;
            internalValueResult.invertRegex = this._invertRegex;
        }
        if (this._projectId !== undefined) {
            hasAnyValues = true;
            internalValueResult.projectId = this._projectId;
        }
        if (this._repoName !== undefined) {
            hasAnyValues = true;
            internalValueResult.repoName = this._repoName;
        }
        if (this._substitutions !== undefined) {
            hasAnyValues = true;
            internalValueResult.substitutions = this._substitutions;
        }
        if (this._tagName !== undefined) {
            hasAnyValues = true;
            internalValueResult.tagName = this._tagName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._branchName = undefined;
            this._commitSha = undefined;
            this._dir = undefined;
            this._invertRegex = undefined;
            this._projectId = undefined;
            this._repoName = undefined;
            this._substitutions = undefined;
            this._tagName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._branchName = value.branchName;
            this._commitSha = value.commitSha;
            this._dir = value.dir;
            this._invertRegex = value.invertRegex;
            this._projectId = value.projectId;
            this._repoName = value.repoName;
            this._substitutions = value.substitutions;
            this._tagName = value.tagName;
        }
    }
    get branchName() {
        return this.getStringAttribute('branch_name');
    }
    set branchName(value) {
        this._branchName = value;
    }
    resetBranchName() {
        this._branchName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get branchNameInput() {
        return this._branchName;
    }
    get commitSha() {
        return this.getStringAttribute('commit_sha');
    }
    set commitSha(value) {
        this._commitSha = value;
    }
    resetCommitSha() {
        this._commitSha = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get commitShaInput() {
        return this._commitSha;
    }
    get dir() {
        return this.getStringAttribute('dir');
    }
    set dir(value) {
        this._dir = value;
    }
    resetDir() {
        this._dir = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dirInput() {
        return this._dir;
    }
    get invertRegex() {
        return this.getBooleanAttribute('invert_regex');
    }
    set invertRegex(value) {
        this._invertRegex = value;
    }
    resetInvertRegex() {
        this._invertRegex = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get invertRegexInput() {
        return this._invertRegex;
    }
    get projectId() {
        return this.getStringAttribute('project_id');
    }
    set projectId(value) {
        this._projectId = value;
    }
    resetProjectId() {
        this._projectId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectIdInput() {
        return this._projectId;
    }
    get repoName() {
        return this.getStringAttribute('repo_name');
    }
    set repoName(value) {
        this._repoName = value;
    }
    // Temporarily expose input value. Use with caution.
    get repoNameInput() {
        return this._repoName;
    }
    get substitutions() {
        return this.getStringMapAttribute('substitutions');
    }
    set substitutions(value) {
        this._substitutions = value;
    }
    resetSubstitutions() {
        this._substitutions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get substitutionsInput() {
        return this._substitutions;
    }
    get tagName() {
        return this.getStringAttribute('tag_name');
    }
    set tagName(value) {
        this._tagName = value;
    }
    resetTagName() {
        this._tagName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagNameInput() {
        return this._tagName;
    }
}
exports.CloudbuildTriggerBuildSourceRepoSourceOutputReference = CloudbuildTriggerBuildSourceRepoSourceOutputReference;
_y = JSII_RTTI_SYMBOL_1;
CloudbuildTriggerBuildSourceRepoSourceOutputReference[_y] = { fqn: "@cdktf/provider-google.cloudbuildTrigger.CloudbuildTriggerBuildSourceRepoSourceOutputReference", version: "14.13.1" };
function cloudbuildTriggerBuildSourceStorageSourceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket: cdktf.stringToTerraform(struct.bucket),
        generation: cdktf.stringToTerraform(struct.generation),
        object: cdktf.stringToTerraform(struct.object),
    };
}
exports.cloudbuildTriggerBuildSourceStorageSourceToTerraform = cloudbuildTriggerBuildSourceStorageSourceToTerraform;
function cloudbuildTriggerBuildSourceStorageSourceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        bucket: {
            value: cdktf.stringToHclTerraform(struct.bucket),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        generation: {
            value: cdktf.stringToHclTerraform(struct.generation),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        object: {
            value: cdktf.stringToHclTerraform(struct.object),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildTriggerBuildSourceStorageSourceToHclTerraform = cloudbuildTriggerBuildSourceStorageSourceToHclTerraform;
class CloudbuildTriggerBuildSourceStorageSourceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucket !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucket = this._bucket;
        }
        if (this._generation !== undefined) {
            hasAnyValues = true;
            internalValueResult.generation = this._generation;
        }
        if (this._object !== undefined) {
            hasAnyValues = true;
            internalValueResult.object = this._object;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucket = undefined;
            this._generation = undefined;
            this._object = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucket = value.bucket;
            this._generation = value.generation;
            this._object = value.object;
        }
    }
    get bucket() {
        return this.getStringAttribute('bucket');
    }
    set bucket(value) {
        this._bucket = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketInput() {
        return this._bucket;
    }
    get generation() {
        return this.getStringAttribute('generation');
    }
    set generation(value) {
        this._generation = value;
    }
    resetGeneration() {
        this._generation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get generationInput() {
        return this._generation;
    }
    get object() {
        return this.getStringAttribute('object');
    }
    set object(value) {
        this._object = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectInput() {
        return this._object;
    }
}
exports.CloudbuildTriggerBuildSourceStorageSourceOutputReference = CloudbuildTriggerBuildSourceStorageSourceOutputReference;
_z = JSII_RTTI_SYMBOL_1;
CloudbuildTriggerBuildSourceStorageSourceOutputReference[_z] = { fqn: "@cdktf/provider-google.cloudbuildTrigger.CloudbuildTriggerBuildSourceStorageSourceOutputReference", version: "14.13.1" };
function cloudbuildTriggerBuildSourceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        repo_source: cloudbuildTriggerBuildSourceRepoSourceToTerraform(struct.repoSource),
        storage_source: cloudbuildTriggerBuildSourceStorageSourceToTerraform(struct.storageSource),
    };
}
exports.cloudbuildTriggerBuildSourceToTerraform = cloudbuildTriggerBuildSourceToTerraform;
function cloudbuildTriggerBuildSourceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        repo_source: {
            value: cloudbuildTriggerBuildSourceRepoSourceToHclTerraform(struct.repoSource),
            isBlock: true,
            type: "list",
            storageClassType: "CloudbuildTriggerBuildSourceRepoSourceList",
        },
        storage_source: {
            value: cloudbuildTriggerBuildSourceStorageSourceToHclTerraform(struct.storageSource),
            isBlock: true,
            type: "list",
            storageClassType: "CloudbuildTriggerBuildSourceStorageSourceList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildTriggerBuildSourceToHclTerraform = cloudbuildTriggerBuildSourceToHclTerraform;
class CloudbuildTriggerBuildSourceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // repo_source - computed: false, optional: true, required: false
        this._repoSource = new CloudbuildTriggerBuildSourceRepoSourceOutputReference(this, "repo_source");
        // storage_source - computed: false, optional: true, required: false
        this._storageSource = new CloudbuildTriggerBuildSourceStorageSourceOutputReference(this, "storage_source");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._repoSource?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.repoSource = this._repoSource?.internalValue;
        }
        if (this._storageSource?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.storageSource = this._storageSource?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._repoSource.internalValue = undefined;
            this._storageSource.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._repoSource.internalValue = value.repoSource;
            this._storageSource.internalValue = value.storageSource;
        }
    }
    get repoSource() {
        return this._repoSource;
    }
    putRepoSource(value) {
        this._repoSource.internalValue = value;
    }
    resetRepoSource() {
        this._repoSource.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get repoSourceInput() {
        return this._repoSource.internalValue;
    }
    get storageSource() {
        return this._storageSource;
    }
    putStorageSource(value) {
        this._storageSource.internalValue = value;
    }
    resetStorageSource() {
        this._storageSource.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get storageSourceInput() {
        return this._storageSource.internalValue;
    }
}
exports.CloudbuildTriggerBuildSourceOutputReference = CloudbuildTriggerBuildSourceOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
CloudbuildTriggerBuildSourceOutputReference[_0] = { fqn: "@cdktf/provider-google.cloudbuildTrigger.CloudbuildTriggerBuildSourceOutputReference", version: "14.13.1" };
function cloudbuildTriggerBuildStepVolumesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        path: cdktf.stringToTerraform(struct.path),
    };
}
exports.cloudbuildTriggerBuildStepVolumesToTerraform = cloudbuildTriggerBuildStepVolumesToTerraform;
function cloudbuildTriggerBuildStepVolumesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        path: {
            value: cdktf.stringToHclTerraform(struct.path),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildTriggerBuildStepVolumesToHclTerraform = cloudbuildTriggerBuildStepVolumesToHclTerraform;
class CloudbuildTriggerBuildStepVolumesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._path !== undefined) {
            hasAnyValues = true;
            internalValueResult.path = this._path;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
            this._path = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
            this._path = value.path;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get path() {
        return this.getStringAttribute('path');
    }
    set path(value) {
        this._path = value;
    }
    // Temporarily expose input value. Use with caution.
    get pathInput() {
        return this._path;
    }
}
exports.CloudbuildTriggerBuildStepVolumesOutputReference = CloudbuildTriggerBuildStepVolumesOutputReference;
_1 = JSII_RTTI_SYMBOL_1;
CloudbuildTriggerBuildStepVolumesOutputReference[_1] = { fqn: "@cdktf/provider-google.cloudbuildTrigger.CloudbuildTriggerBuildStepVolumesOutputReference", version: "14.13.1" };
class CloudbuildTriggerBuildStepVolumesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new CloudbuildTriggerBuildStepVolumesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.CloudbuildTriggerBuildStepVolumesList = CloudbuildTriggerBuildStepVolumesList;
_2 = JSII_RTTI_SYMBOL_1;
CloudbuildTriggerBuildStepVolumesList[_2] = { fqn: "@cdktf/provider-google.cloudbuildTrigger.CloudbuildTriggerBuildStepVolumesList", version: "14.13.1" };
function cloudbuildTriggerBuildStepToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allow_exit_codes: cdktf.listMapper(cdktf.numberToTerraform, false)(struct.allowExitCodes),
        allow_failure: cdktf.booleanToTerraform(struct.allowFailure),
        args: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.args),
        dir: cdktf.stringToTerraform(struct.dir),
        entrypoint: cdktf.stringToTerraform(struct.entrypoint),
        env: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.env),
        id: cdktf.stringToTerraform(struct.id),
        name: cdktf.stringToTerraform(struct.name),
        script: cdktf.stringToTerraform(struct.script),
        secret_env: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.secretEnv),
        timeout: cdktf.stringToTerraform(struct.timeout),
        timing: cdktf.stringToTerraform(struct.timing),
        wait_for: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.waitFor),
        volumes: cdktf.listMapper(cloudbuildTriggerBuildStepVolumesToTerraform, true)(struct.volumes),
    };
}
exports.cloudbuildTriggerBuildStepToTerraform = cloudbuildTriggerBuildStepToTerraform;
function cloudbuildTriggerBuildStepToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        allow_exit_codes: {
            value: cdktf.listMapperHcl(cdktf.numberToHclTerraform, false)(struct.allowExitCodes),
            isBlock: false,
            type: "list",
            storageClassType: "numberList",
        },
        allow_failure: {
            value: cdktf.booleanToHclTerraform(struct.allowFailure),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        args: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.args),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        dir: {
            value: cdktf.stringToHclTerraform(struct.dir),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        entrypoint: {
            value: cdktf.stringToHclTerraform(struct.entrypoint),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        env: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.env),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        id: {
            value: cdktf.stringToHclTerraform(struct.id),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        script: {
            value: cdktf.stringToHclTerraform(struct.script),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        secret_env: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.secretEnv),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        timeout: {
            value: cdktf.stringToHclTerraform(struct.timeout),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        timing: {
            value: cdktf.stringToHclTerraform(struct.timing),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        wait_for: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.waitFor),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        volumes: {
            value: cdktf.listMapperHcl(cloudbuildTriggerBuildStepVolumesToHclTerraform, true)(struct.volumes),
            isBlock: true,
            type: "list",
            storageClassType: "CloudbuildTriggerBuildStepVolumesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildTriggerBuildStepToHclTerraform = cloudbuildTriggerBuildStepToHclTerraform;
class CloudbuildTriggerBuildStepOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // volumes - computed: false, optional: true, required: false
        this._volumes = new CloudbuildTriggerBuildStepVolumesList(this, "volumes", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowExitCodes !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowExitCodes = this._allowExitCodes;
        }
        if (this._allowFailure !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowFailure = this._allowFailure;
        }
        if (this._args !== undefined) {
            hasAnyValues = true;
            internalValueResult.args = this._args;
        }
        if (this._dir !== undefined) {
            hasAnyValues = true;
            internalValueResult.dir = this._dir;
        }
        if (this._entrypoint !== undefined) {
            hasAnyValues = true;
            internalValueResult.entrypoint = this._entrypoint;
        }
        if (this._env !== undefined) {
            hasAnyValues = true;
            internalValueResult.env = this._env;
        }
        if (this._id !== undefined) {
            hasAnyValues = true;
            internalValueResult.id = this._id;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._script !== undefined) {
            hasAnyValues = true;
            internalValueResult.script = this._script;
        }
        if (this._secretEnv !== undefined) {
            hasAnyValues = true;
            internalValueResult.secretEnv = this._secretEnv;
        }
        if (this._timeout !== undefined) {
            hasAnyValues = true;
            internalValueResult.timeout = this._timeout;
        }
        if (this._timing !== undefined) {
            hasAnyValues = true;
            internalValueResult.timing = this._timing;
        }
        if (this._waitFor !== undefined) {
            hasAnyValues = true;
            internalValueResult.waitFor = this._waitFor;
        }
        if (this._volumes?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.volumes = this._volumes?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._allowExitCodes = undefined;
            this._allowFailure = undefined;
            this._args = undefined;
            this._dir = undefined;
            this._entrypoint = undefined;
            this._env = undefined;
            this._id = undefined;
            this._name = undefined;
            this._script = undefined;
            this._secretEnv = undefined;
            this._timeout = undefined;
            this._timing = undefined;
            this._waitFor = undefined;
            this._volumes.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._allowExitCodes = value.allowExitCodes;
            this._allowFailure = value.allowFailure;
            this._args = value.args;
            this._dir = value.dir;
            this._entrypoint = value.entrypoint;
            this._env = value.env;
            this._id = value.id;
            this._name = value.name;
            this._script = value.script;
            this._secretEnv = value.secretEnv;
            this._timeout = value.timeout;
            this._timing = value.timing;
            this._waitFor = value.waitFor;
            this._volumes.internalValue = value.volumes;
        }
    }
    get allowExitCodes() {
        return this.getNumberListAttribute('allow_exit_codes');
    }
    set allowExitCodes(value) {
        this._allowExitCodes = value;
    }
    resetAllowExitCodes() {
        this._allowExitCodes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowExitCodesInput() {
        return this._allowExitCodes;
    }
    get allowFailure() {
        return this.getBooleanAttribute('allow_failure');
    }
    set allowFailure(value) {
        this._allowFailure = value;
    }
    resetAllowFailure() {
        this._allowFailure = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowFailureInput() {
        return this._allowFailure;
    }
    get args() {
        return this.getListAttribute('args');
    }
    set args(value) {
        this._args = value;
    }
    resetArgs() {
        this._args = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get argsInput() {
        return this._args;
    }
    get dir() {
        return this.getStringAttribute('dir');
    }
    set dir(value) {
        this._dir = value;
    }
    resetDir() {
        this._dir = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dirInput() {
        return this._dir;
    }
    get entrypoint() {
        return this.getStringAttribute('entrypoint');
    }
    set entrypoint(value) {
        this._entrypoint = value;
    }
    resetEntrypoint() {
        this._entrypoint = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get entrypointInput() {
        return this._entrypoint;
    }
    get env() {
        return this.getListAttribute('env');
    }
    set env(value) {
        this._env = value;
    }
    resetEnv() {
        this._env = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get envInput() {
        return this._env;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get script() {
        return this.getStringAttribute('script');
    }
    set script(value) {
        this._script = value;
    }
    resetScript() {
        this._script = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scriptInput() {
        return this._script;
    }
    get secretEnv() {
        return this.getListAttribute('secret_env');
    }
    set secretEnv(value) {
        this._secretEnv = value;
    }
    resetSecretEnv() {
        this._secretEnv = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secretEnvInput() {
        return this._secretEnv;
    }
    get timeout() {
        return this.getStringAttribute('timeout');
    }
    set timeout(value) {
        this._timeout = value;
    }
    resetTimeout() {
        this._timeout = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutInput() {
        return this._timeout;
    }
    get timing() {
        return this.getStringAttribute('timing');
    }
    set timing(value) {
        this._timing = value;
    }
    resetTiming() {
        this._timing = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timingInput() {
        return this._timing;
    }
    get waitFor() {
        return this.getListAttribute('wait_for');
    }
    set waitFor(value) {
        this._waitFor = value;
    }
    resetWaitFor() {
        this._waitFor = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get waitForInput() {
        return this._waitFor;
    }
    get volumes() {
        return this._volumes;
    }
    putVolumes(value) {
        this._volumes.internalValue = value;
    }
    resetVolumes() {
        this._volumes.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get volumesInput() {
        return this._volumes.internalValue;
    }
}
exports.CloudbuildTriggerBuildStepOutputReference = CloudbuildTriggerBuildStepOutputReference;
_3 = JSII_RTTI_SYMBOL_1;
CloudbuildTriggerBuildStepOutputReference[_3] = { fqn: "@cdktf/provider-google.cloudbuildTrigger.CloudbuildTriggerBuildStepOutputReference", version: "14.13.1" };
class CloudbuildTriggerBuildStepList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new CloudbuildTriggerBuildStepOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.CloudbuildTriggerBuildStepList = CloudbuildTriggerBuildStepList;
_4 = JSII_RTTI_SYMBOL_1;
CloudbuildTriggerBuildStepList[_4] = { fqn: "@cdktf/provider-google.cloudbuildTrigger.CloudbuildTriggerBuildStepList", version: "14.13.1" };
function cloudbuildTriggerBuildToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        images: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.images),
        logs_bucket: cdktf.stringToTerraform(struct.logsBucket),
        queue_ttl: cdktf.stringToTerraform(struct.queueTtl),
        substitutions: cdktf.hashMapper(cdktf.stringToTerraform)(struct.substitutions),
        tags: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.tags),
        timeout: cdktf.stringToTerraform(struct.timeout),
        artifacts: cloudbuildTriggerBuildArtifactsToTerraform(struct.artifacts),
        available_secrets: cloudbuildTriggerBuildAvailableSecretsToTerraform(struct.availableSecrets),
        options: cloudbuildTriggerBuildOptionsToTerraform(struct.options),
        secret: cdktf.listMapper(cloudbuildTriggerBuildSecretToTerraform, true)(struct.secret),
        source: cloudbuildTriggerBuildSourceToTerraform(struct.source),
        step: cdktf.listMapper(cloudbuildTriggerBuildStepToTerraform, true)(struct.step),
    };
}
exports.cloudbuildTriggerBuildToTerraform = cloudbuildTriggerBuildToTerraform;
function cloudbuildTriggerBuildToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        images: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.images),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        logs_bucket: {
            value: cdktf.stringToHclTerraform(struct.logsBucket),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        queue_ttl: {
            value: cdktf.stringToHclTerraform(struct.queueTtl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        substitutions: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.substitutions),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        tags: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.tags),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        timeout: {
            value: cdktf.stringToHclTerraform(struct.timeout),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        artifacts: {
            value: cloudbuildTriggerBuildArtifactsToHclTerraform(struct.artifacts),
            isBlock: true,
            type: "list",
            storageClassType: "CloudbuildTriggerBuildArtifactsList",
        },
        available_secrets: {
            value: cloudbuildTriggerBuildAvailableSecretsToHclTerraform(struct.availableSecrets),
            isBlock: true,
            type: "list",
            storageClassType: "CloudbuildTriggerBuildAvailableSecretsList",
        },
        options: {
            value: cloudbuildTriggerBuildOptionsToHclTerraform(struct.options),
            isBlock: true,
            type: "list",
            storageClassType: "CloudbuildTriggerBuildOptionsList",
        },
        secret: {
            value: cdktf.listMapperHcl(cloudbuildTriggerBuildSecretToHclTerraform, true)(struct.secret),
            isBlock: true,
            type: "list",
            storageClassType: "CloudbuildTriggerBuildSecretList",
        },
        source: {
            value: cloudbuildTriggerBuildSourceToHclTerraform(struct.source),
            isBlock: true,
            type: "list",
            storageClassType: "CloudbuildTriggerBuildSourceList",
        },
        step: {
            value: cdktf.listMapperHcl(cloudbuildTriggerBuildStepToHclTerraform, true)(struct.step),
            isBlock: true,
            type: "list",
            storageClassType: "CloudbuildTriggerBuildStepList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildTriggerBuildToHclTerraform = cloudbuildTriggerBuildToHclTerraform;
class CloudbuildTriggerBuildOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // artifacts - computed: false, optional: true, required: false
        this._artifacts = new CloudbuildTriggerBuildArtifactsOutputReference(this, "artifacts");
        // available_secrets - computed: false, optional: true, required: false
        this._availableSecrets = new CloudbuildTriggerBuildAvailableSecretsOutputReference(this, "available_secrets");
        // options - computed: false, optional: true, required: false
        this._options = new CloudbuildTriggerBuildOptionsOutputReference(this, "options");
        // secret - computed: false, optional: true, required: false
        this._secret = new CloudbuildTriggerBuildSecretList(this, "secret", false);
        // source - computed: false, optional: true, required: false
        this._source = new CloudbuildTriggerBuildSourceOutputReference(this, "source");
        // step - computed: false, optional: false, required: true
        this._step = new CloudbuildTriggerBuildStepList(this, "step", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._images !== undefined) {
            hasAnyValues = true;
            internalValueResult.images = this._images;
        }
        if (this._logsBucket !== undefined) {
            hasAnyValues = true;
            internalValueResult.logsBucket = this._logsBucket;
        }
        if (this._queueTtl !== undefined) {
            hasAnyValues = true;
            internalValueResult.queueTtl = this._queueTtl;
        }
        if (this._substitutions !== undefined) {
            hasAnyValues = true;
            internalValueResult.substitutions = this._substitutions;
        }
        if (this._tags !== undefined) {
            hasAnyValues = true;
            internalValueResult.tags = this._tags;
        }
        if (this._timeout !== undefined) {
            hasAnyValues = true;
            internalValueResult.timeout = this._timeout;
        }
        if (this._artifacts?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.artifacts = this._artifacts?.internalValue;
        }
        if (this._availableSecrets?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.availableSecrets = this._availableSecrets?.internalValue;
        }
        if (this._options?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.options = this._options?.internalValue;
        }
        if (this._secret?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.secret = this._secret?.internalValue;
        }
        if (this._source?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.source = this._source?.internalValue;
        }
        if (this._step?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.step = this._step?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._images = undefined;
            this._logsBucket = undefined;
            this._queueTtl = undefined;
            this._substitutions = undefined;
            this._tags = undefined;
            this._timeout = undefined;
            this._artifacts.internalValue = undefined;
            this._availableSecrets.internalValue = undefined;
            this._options.internalValue = undefined;
            this._secret.internalValue = undefined;
            this._source.internalValue = undefined;
            this._step.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._images = value.images;
            this._logsBucket = value.logsBucket;
            this._queueTtl = value.queueTtl;
            this._substitutions = value.substitutions;
            this._tags = value.tags;
            this._timeout = value.timeout;
            this._artifacts.internalValue = value.artifacts;
            this._availableSecrets.internalValue = value.availableSecrets;
            this._options.internalValue = value.options;
            this._secret.internalValue = value.secret;
            this._source.internalValue = value.source;
            this._step.internalValue = value.step;
        }
    }
    get images() {
        return this.getListAttribute('images');
    }
    set images(value) {
        this._images = value;
    }
    resetImages() {
        this._images = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imagesInput() {
        return this._images;
    }
    get logsBucket() {
        return this.getStringAttribute('logs_bucket');
    }
    set logsBucket(value) {
        this._logsBucket = value;
    }
    resetLogsBucket() {
        this._logsBucket = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logsBucketInput() {
        return this._logsBucket;
    }
    get queueTtl() {
        return this.getStringAttribute('queue_ttl');
    }
    set queueTtl(value) {
        this._queueTtl = value;
    }
    resetQueueTtl() {
        this._queueTtl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get queueTtlInput() {
        return this._queueTtl;
    }
    get substitutions() {
        return this.getStringMapAttribute('substitutions');
    }
    set substitutions(value) {
        this._substitutions = value;
    }
    resetSubstitutions() {
        this._substitutions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get substitutionsInput() {
        return this._substitutions;
    }
    get tags() {
        return this.getListAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get timeout() {
        return this.getStringAttribute('timeout');
    }
    set timeout(value) {
        this._timeout = value;
    }
    resetTimeout() {
        this._timeout = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutInput() {
        return this._timeout;
    }
    get artifacts() {
        return this._artifacts;
    }
    putArtifacts(value) {
        this._artifacts.internalValue = value;
    }
    resetArtifacts() {
        this._artifacts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get artifactsInput() {
        return this._artifacts.internalValue;
    }
    get availableSecrets() {
        return this._availableSecrets;
    }
    putAvailableSecrets(value) {
        this._availableSecrets.internalValue = value;
    }
    resetAvailableSecrets() {
        this._availableSecrets.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get availableSecretsInput() {
        return this._availableSecrets.internalValue;
    }
    get options() {
        return this._options;
    }
    putOptions(value) {
        this._options.internalValue = value;
    }
    resetOptions() {
        this._options.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get optionsInput() {
        return this._options.internalValue;
    }
    get secret() {
        return this._secret;
    }
    putSecret(value) {
        this._secret.internalValue = value;
    }
    resetSecret() {
        this._secret.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secretInput() {
        return this._secret.internalValue;
    }
    get source() {
        return this._source;
    }
    putSource(value) {
        this._source.internalValue = value;
    }
    resetSource() {
        this._source.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sourceInput() {
        return this._source.internalValue;
    }
    get step() {
        return this._step;
    }
    putStep(value) {
        this._step.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get stepInput() {
        return this._step.internalValue;
    }
}
exports.CloudbuildTriggerBuildOutputReference = CloudbuildTriggerBuildOutputReference;
_5 = JSII_RTTI_SYMBOL_1;
CloudbuildTriggerBuildOutputReference[_5] = { fqn: "@cdktf/provider-google.cloudbuildTrigger.CloudbuildTriggerBuildOutputReference", version: "14.13.1" };
function cloudbuildTriggerGitFileSourceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bitbucket_server_config: cdktf.stringToTerraform(struct.bitbucketServerConfig),
        github_enterprise_config: cdktf.stringToTerraform(struct.githubEnterpriseConfig),
        path: cdktf.stringToTerraform(struct.path),
        repo_type: cdktf.stringToTerraform(struct.repoType),
        repository: cdktf.stringToTerraform(struct.repository),
        revision: cdktf.stringToTerraform(struct.revision),
        uri: cdktf.stringToTerraform(struct.uri),
    };
}
exports.cloudbuildTriggerGitFileSourceToTerraform = cloudbuildTriggerGitFileSourceToTerraform;
function cloudbuildTriggerGitFileSourceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        bitbucket_server_config: {
            value: cdktf.stringToHclTerraform(struct.bitbucketServerConfig),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        github_enterprise_config: {
            value: cdktf.stringToHclTerraform(struct.githubEnterpriseConfig),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        path: {
            value: cdktf.stringToHclTerraform(struct.path),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        repo_type: {
            value: cdktf.stringToHclTerraform(struct.repoType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        repository: {
            value: cdktf.stringToHclTerraform(struct.repository),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        revision: {
            value: cdktf.stringToHclTerraform(struct.revision),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        uri: {
            value: cdktf.stringToHclTerraform(struct.uri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildTriggerGitFileSourceToHclTerraform = cloudbuildTriggerGitFileSourceToHclTerraform;
class CloudbuildTriggerGitFileSourceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bitbucketServerConfig !== undefined) {
            hasAnyValues = true;
            internalValueResult.bitbucketServerConfig = this._bitbucketServerConfig;
        }
        if (this._githubEnterpriseConfig !== undefined) {
            hasAnyValues = true;
            internalValueResult.githubEnterpriseConfig = this._githubEnterpriseConfig;
        }
        if (this._path !== undefined) {
            hasAnyValues = true;
            internalValueResult.path = this._path;
        }
        if (this._repoType !== undefined) {
            hasAnyValues = true;
            internalValueResult.repoType = this._repoType;
        }
        if (this._repository !== undefined) {
            hasAnyValues = true;
            internalValueResult.repository = this._repository;
        }
        if (this._revision !== undefined) {
            hasAnyValues = true;
            internalValueResult.revision = this._revision;
        }
        if (this._uri !== undefined) {
            hasAnyValues = true;
            internalValueResult.uri = this._uri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bitbucketServerConfig = undefined;
            this._githubEnterpriseConfig = undefined;
            this._path = undefined;
            this._repoType = undefined;
            this._repository = undefined;
            this._revision = undefined;
            this._uri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bitbucketServerConfig = value.bitbucketServerConfig;
            this._githubEnterpriseConfig = value.githubEnterpriseConfig;
            this._path = value.path;
            this._repoType = value.repoType;
            this._repository = value.repository;
            this._revision = value.revision;
            this._uri = value.uri;
        }
    }
    get bitbucketServerConfig() {
        return this.getStringAttribute('bitbucket_server_config');
    }
    set bitbucketServerConfig(value) {
        this._bitbucketServerConfig = value;
    }
    resetBitbucketServerConfig() {
        this._bitbucketServerConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bitbucketServerConfigInput() {
        return this._bitbucketServerConfig;
    }
    get githubEnterpriseConfig() {
        return this.getStringAttribute('github_enterprise_config');
    }
    set githubEnterpriseConfig(value) {
        this._githubEnterpriseConfig = value;
    }
    resetGithubEnterpriseConfig() {
        this._githubEnterpriseConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get githubEnterpriseConfigInput() {
        return this._githubEnterpriseConfig;
    }
    get path() {
        return this.getStringAttribute('path');
    }
    set path(value) {
        this._path = value;
    }
    // Temporarily expose input value. Use with caution.
    get pathInput() {
        return this._path;
    }
    get repoType() {
        return this.getStringAttribute('repo_type');
    }
    set repoType(value) {
        this._repoType = value;
    }
    // Temporarily expose input value. Use with caution.
    get repoTypeInput() {
        return this._repoType;
    }
    get repository() {
        return this.getStringAttribute('repository');
    }
    set repository(value) {
        this._repository = value;
    }
    resetRepository() {
        this._repository = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get repositoryInput() {
        return this._repository;
    }
    get revision() {
        return this.getStringAttribute('revision');
    }
    set revision(value) {
        this._revision = value;
    }
    resetRevision() {
        this._revision = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get revisionInput() {
        return this._revision;
    }
    get uri() {
        return this.getStringAttribute('uri');
    }
    set uri(value) {
        this._uri = value;
    }
    resetUri() {
        this._uri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get uriInput() {
        return this._uri;
    }
}
exports.CloudbuildTriggerGitFileSourceOutputReference = CloudbuildTriggerGitFileSourceOutputReference;
_6 = JSII_RTTI_SYMBOL_1;
CloudbuildTriggerGitFileSourceOutputReference[_6] = { fqn: "@cdktf/provider-google.cloudbuildTrigger.CloudbuildTriggerGitFileSourceOutputReference", version: "14.13.1" };
function cloudbuildTriggerGithubPullRequestToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        branch: cdktf.stringToTerraform(struct.branch),
        comment_control: cdktf.stringToTerraform(struct.commentControl),
        invert_regex: cdktf.booleanToTerraform(struct.invertRegex),
    };
}
exports.cloudbuildTriggerGithubPullRequestToTerraform = cloudbuildTriggerGithubPullRequestToTerraform;
function cloudbuildTriggerGithubPullRequestToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        branch: {
            value: cdktf.stringToHclTerraform(struct.branch),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        comment_control: {
            value: cdktf.stringToHclTerraform(struct.commentControl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        invert_regex: {
            value: cdktf.booleanToHclTerraform(struct.invertRegex),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildTriggerGithubPullRequestToHclTerraform = cloudbuildTriggerGithubPullRequestToHclTerraform;
class CloudbuildTriggerGithubPullRequestOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._branch !== undefined) {
            hasAnyValues = true;
            internalValueResult.branch = this._branch;
        }
        if (this._commentControl !== undefined) {
            hasAnyValues = true;
            internalValueResult.commentControl = this._commentControl;
        }
        if (this._invertRegex !== undefined) {
            hasAnyValues = true;
            internalValueResult.invertRegex = this._invertRegex;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._branch = undefined;
            this._commentControl = undefined;
            this._invertRegex = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._branch = value.branch;
            this._commentControl = value.commentControl;
            this._invertRegex = value.invertRegex;
        }
    }
    get branch() {
        return this.getStringAttribute('branch');
    }
    set branch(value) {
        this._branch = value;
    }
    // Temporarily expose input value. Use with caution.
    get branchInput() {
        return this._branch;
    }
    get commentControl() {
        return this.getStringAttribute('comment_control');
    }
    set commentControl(value) {
        this._commentControl = value;
    }
    resetCommentControl() {
        this._commentControl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get commentControlInput() {
        return this._commentControl;
    }
    get invertRegex() {
        return this.getBooleanAttribute('invert_regex');
    }
    set invertRegex(value) {
        this._invertRegex = value;
    }
    resetInvertRegex() {
        this._invertRegex = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get invertRegexInput() {
        return this._invertRegex;
    }
}
exports.CloudbuildTriggerGithubPullRequestOutputReference = CloudbuildTriggerGithubPullRequestOutputReference;
_7 = JSII_RTTI_SYMBOL_1;
CloudbuildTriggerGithubPullRequestOutputReference[_7] = { fqn: "@cdktf/provider-google.cloudbuildTrigger.CloudbuildTriggerGithubPullRequestOutputReference", version: "14.13.1" };
function cloudbuildTriggerGithubPushToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        branch: cdktf.stringToTerraform(struct.branch),
        invert_regex: cdktf.booleanToTerraform(struct.invertRegex),
        tag: cdktf.stringToTerraform(struct.tag),
    };
}
exports.cloudbuildTriggerGithubPushToTerraform = cloudbuildTriggerGithubPushToTerraform;
function cloudbuildTriggerGithubPushToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        branch: {
            value: cdktf.stringToHclTerraform(struct.branch),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        invert_regex: {
            value: cdktf.booleanToHclTerraform(struct.invertRegex),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        tag: {
            value: cdktf.stringToHclTerraform(struct.tag),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildTriggerGithubPushToHclTerraform = cloudbuildTriggerGithubPushToHclTerraform;
class CloudbuildTriggerGithubPushOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._branch !== undefined) {
            hasAnyValues = true;
            internalValueResult.branch = this._branch;
        }
        if (this._invertRegex !== undefined) {
            hasAnyValues = true;
            internalValueResult.invertRegex = this._invertRegex;
        }
        if (this._tag !== undefined) {
            hasAnyValues = true;
            internalValueResult.tag = this._tag;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._branch = undefined;
            this._invertRegex = undefined;
            this._tag = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._branch = value.branch;
            this._invertRegex = value.invertRegex;
            this._tag = value.tag;
        }
    }
    get branch() {
        return this.getStringAttribute('branch');
    }
    set branch(value) {
        this._branch = value;
    }
    resetBranch() {
        this._branch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get branchInput() {
        return this._branch;
    }
    get invertRegex() {
        return this.getBooleanAttribute('invert_regex');
    }
    set invertRegex(value) {
        this._invertRegex = value;
    }
    resetInvertRegex() {
        this._invertRegex = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get invertRegexInput() {
        return this._invertRegex;
    }
    get tag() {
        return this.getStringAttribute('tag');
    }
    set tag(value) {
        this._tag = value;
    }
    resetTag() {
        this._tag = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagInput() {
        return this._tag;
    }
}
exports.CloudbuildTriggerGithubPushOutputReference = CloudbuildTriggerGithubPushOutputReference;
_8 = JSII_RTTI_SYMBOL_1;
CloudbuildTriggerGithubPushOutputReference[_8] = { fqn: "@cdktf/provider-google.cloudbuildTrigger.CloudbuildTriggerGithubPushOutputReference", version: "14.13.1" };
function cloudbuildTriggerGithubToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enterprise_config_resource_name: cdktf.stringToTerraform(struct.enterpriseConfigResourceName),
        name: cdktf.stringToTerraform(struct.name),
        owner: cdktf.stringToTerraform(struct.owner),
        pull_request: cloudbuildTriggerGithubPullRequestToTerraform(struct.pullRequest),
        push: cloudbuildTriggerGithubPushToTerraform(struct.push),
    };
}
exports.cloudbuildTriggerGithubToTerraform = cloudbuildTriggerGithubToTerraform;
function cloudbuildTriggerGithubToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enterprise_config_resource_name: {
            value: cdktf.stringToHclTerraform(struct.enterpriseConfigResourceName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        owner: {
            value: cdktf.stringToHclTerraform(struct.owner),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        pull_request: {
            value: cloudbuildTriggerGithubPullRequestToHclTerraform(struct.pullRequest),
            isBlock: true,
            type: "list",
            storageClassType: "CloudbuildTriggerGithubPullRequestList",
        },
        push: {
            value: cloudbuildTriggerGithubPushToHclTerraform(struct.push),
            isBlock: true,
            type: "list",
            storageClassType: "CloudbuildTriggerGithubPushList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildTriggerGithubToHclTerraform = cloudbuildTriggerGithubToHclTerraform;
class CloudbuildTriggerGithubOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // pull_request - computed: false, optional: true, required: false
        this._pullRequest = new CloudbuildTriggerGithubPullRequestOutputReference(this, "pull_request");
        // push - computed: false, optional: true, required: false
        this._push = new CloudbuildTriggerGithubPushOutputReference(this, "push");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enterpriseConfigResourceName !== undefined) {
            hasAnyValues = true;
            internalValueResult.enterpriseConfigResourceName = this._enterpriseConfigResourceName;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._owner !== undefined) {
            hasAnyValues = true;
            internalValueResult.owner = this._owner;
        }
        if (this._pullRequest?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.pullRequest = this._pullRequest?.internalValue;
        }
        if (this._push?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.push = this._push?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enterpriseConfigResourceName = undefined;
            this._name = undefined;
            this._owner = undefined;
            this._pullRequest.internalValue = undefined;
            this._push.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enterpriseConfigResourceName = value.enterpriseConfigResourceName;
            this._name = value.name;
            this._owner = value.owner;
            this._pullRequest.internalValue = value.pullRequest;
            this._push.internalValue = value.push;
        }
    }
    get enterpriseConfigResourceName() {
        return this.getStringAttribute('enterprise_config_resource_name');
    }
    set enterpriseConfigResourceName(value) {
        this._enterpriseConfigResourceName = value;
    }
    resetEnterpriseConfigResourceName() {
        this._enterpriseConfigResourceName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enterpriseConfigResourceNameInput() {
        return this._enterpriseConfigResourceName;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get owner() {
        return this.getStringAttribute('owner');
    }
    set owner(value) {
        this._owner = value;
    }
    resetOwner() {
        this._owner = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ownerInput() {
        return this._owner;
    }
    get pullRequest() {
        return this._pullRequest;
    }
    putPullRequest(value) {
        this._pullRequest.internalValue = value;
    }
    resetPullRequest() {
        this._pullRequest.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pullRequestInput() {
        return this._pullRequest.internalValue;
    }
    get push() {
        return this._push;
    }
    putPush(value) {
        this._push.internalValue = value;
    }
    resetPush() {
        this._push.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pushInput() {
        return this._push.internalValue;
    }
}
exports.CloudbuildTriggerGithubOutputReference = CloudbuildTriggerGithubOutputReference;
_9 = JSII_RTTI_SYMBOL_1;
CloudbuildTriggerGithubOutputReference[_9] = { fqn: "@cdktf/provider-google.cloudbuildTrigger.CloudbuildTriggerGithubOutputReference", version: "14.13.1" };
function cloudbuildTriggerPubsubConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        service_account_email: cdktf.stringToTerraform(struct.serviceAccountEmail),
        topic: cdktf.stringToTerraform(struct.topic),
    };
}
exports.cloudbuildTriggerPubsubConfigToTerraform = cloudbuildTriggerPubsubConfigToTerraform;
function cloudbuildTriggerPubsubConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        service_account_email: {
            value: cdktf.stringToHclTerraform(struct.serviceAccountEmail),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        topic: {
            value: cdktf.stringToHclTerraform(struct.topic),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildTriggerPubsubConfigToHclTerraform = cloudbuildTriggerPubsubConfigToHclTerraform;
class CloudbuildTriggerPubsubConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._serviceAccountEmail !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceAccountEmail = this._serviceAccountEmail;
        }
        if (this._topic !== undefined) {
            hasAnyValues = true;
            internalValueResult.topic = this._topic;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._serviceAccountEmail = undefined;
            this._topic = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._serviceAccountEmail = value.serviceAccountEmail;
            this._topic = value.topic;
        }
    }
    get serviceAccountEmail() {
        return this.getStringAttribute('service_account_email');
    }
    set serviceAccountEmail(value) {
        this._serviceAccountEmail = value;
    }
    resetServiceAccountEmail() {
        this._serviceAccountEmail = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceAccountEmailInput() {
        return this._serviceAccountEmail;
    }
    // state - computed: true, optional: false, required: false
    get state() {
        return this.getStringAttribute('state');
    }
    // subscription - computed: true, optional: false, required: false
    get subscription() {
        return this.getStringAttribute('subscription');
    }
    get topic() {
        return this.getStringAttribute('topic');
    }
    set topic(value) {
        this._topic = value;
    }
    // Temporarily expose input value. Use with caution.
    get topicInput() {
        return this._topic;
    }
}
exports.CloudbuildTriggerPubsubConfigOutputReference = CloudbuildTriggerPubsubConfigOutputReference;
_10 = JSII_RTTI_SYMBOL_1;
CloudbuildTriggerPubsubConfigOutputReference[_10] = { fqn: "@cdktf/provider-google.cloudbuildTrigger.CloudbuildTriggerPubsubConfigOutputReference", version: "14.13.1" };
function cloudbuildTriggerRepositoryEventConfigPullRequestToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        branch: cdktf.stringToTerraform(struct.branch),
        comment_control: cdktf.stringToTerraform(struct.commentControl),
        invert_regex: cdktf.booleanToTerraform(struct.invertRegex),
    };
}
exports.cloudbuildTriggerRepositoryEventConfigPullRequestToTerraform = cloudbuildTriggerRepositoryEventConfigPullRequestToTerraform;
function cloudbuildTriggerRepositoryEventConfigPullRequestToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        branch: {
            value: cdktf.stringToHclTerraform(struct.branch),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        comment_control: {
            value: cdktf.stringToHclTerraform(struct.commentControl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        invert_regex: {
            value: cdktf.booleanToHclTerraform(struct.invertRegex),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildTriggerRepositoryEventConfigPullRequestToHclTerraform = cloudbuildTriggerRepositoryEventConfigPullRequestToHclTerraform;
class CloudbuildTriggerRepositoryEventConfigPullRequestOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._branch !== undefined) {
            hasAnyValues = true;
            internalValueResult.branch = this._branch;
        }
        if (this._commentControl !== undefined) {
            hasAnyValues = true;
            internalValueResult.commentControl = this._commentControl;
        }
        if (this._invertRegex !== undefined) {
            hasAnyValues = true;
            internalValueResult.invertRegex = this._invertRegex;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._branch = undefined;
            this._commentControl = undefined;
            this._invertRegex = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._branch = value.branch;
            this._commentControl = value.commentControl;
            this._invertRegex = value.invertRegex;
        }
    }
    get branch() {
        return this.getStringAttribute('branch');
    }
    set branch(value) {
        this._branch = value;
    }
    resetBranch() {
        this._branch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get branchInput() {
        return this._branch;
    }
    get commentControl() {
        return this.getStringAttribute('comment_control');
    }
    set commentControl(value) {
        this._commentControl = value;
    }
    resetCommentControl() {
        this._commentControl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get commentControlInput() {
        return this._commentControl;
    }
    get invertRegex() {
        return this.getBooleanAttribute('invert_regex');
    }
    set invertRegex(value) {
        this._invertRegex = value;
    }
    resetInvertRegex() {
        this._invertRegex = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get invertRegexInput() {
        return this._invertRegex;
    }
}
exports.CloudbuildTriggerRepositoryEventConfigPullRequestOutputReference = CloudbuildTriggerRepositoryEventConfigPullRequestOutputReference;
_11 = JSII_RTTI_SYMBOL_1;
CloudbuildTriggerRepositoryEventConfigPullRequestOutputReference[_11] = { fqn: "@cdktf/provider-google.cloudbuildTrigger.CloudbuildTriggerRepositoryEventConfigPullRequestOutputReference", version: "14.13.1" };
function cloudbuildTriggerRepositoryEventConfigPushToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        branch: cdktf.stringToTerraform(struct.branch),
        invert_regex: cdktf.booleanToTerraform(struct.invertRegex),
        tag: cdktf.stringToTerraform(struct.tag),
    };
}
exports.cloudbuildTriggerRepositoryEventConfigPushToTerraform = cloudbuildTriggerRepositoryEventConfigPushToTerraform;
function cloudbuildTriggerRepositoryEventConfigPushToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        branch: {
            value: cdktf.stringToHclTerraform(struct.branch),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        invert_regex: {
            value: cdktf.booleanToHclTerraform(struct.invertRegex),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        tag: {
            value: cdktf.stringToHclTerraform(struct.tag),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildTriggerRepositoryEventConfigPushToHclTerraform = cloudbuildTriggerRepositoryEventConfigPushToHclTerraform;
class CloudbuildTriggerRepositoryEventConfigPushOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._branch !== undefined) {
            hasAnyValues = true;
            internalValueResult.branch = this._branch;
        }
        if (this._invertRegex !== undefined) {
            hasAnyValues = true;
            internalValueResult.invertRegex = this._invertRegex;
        }
        if (this._tag !== undefined) {
            hasAnyValues = true;
            internalValueResult.tag = this._tag;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._branch = undefined;
            this._invertRegex = undefined;
            this._tag = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._branch = value.branch;
            this._invertRegex = value.invertRegex;
            this._tag = value.tag;
        }
    }
    get branch() {
        return this.getStringAttribute('branch');
    }
    set branch(value) {
        this._branch = value;
    }
    resetBranch() {
        this._branch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get branchInput() {
        return this._branch;
    }
    get invertRegex() {
        return this.getBooleanAttribute('invert_regex');
    }
    set invertRegex(value) {
        this._invertRegex = value;
    }
    resetInvertRegex() {
        this._invertRegex = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get invertRegexInput() {
        return this._invertRegex;
    }
    get tag() {
        return this.getStringAttribute('tag');
    }
    set tag(value) {
        this._tag = value;
    }
    resetTag() {
        this._tag = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagInput() {
        return this._tag;
    }
}
exports.CloudbuildTriggerRepositoryEventConfigPushOutputReference = CloudbuildTriggerRepositoryEventConfigPushOutputReference;
_12 = JSII_RTTI_SYMBOL_1;
CloudbuildTriggerRepositoryEventConfigPushOutputReference[_12] = { fqn: "@cdktf/provider-google.cloudbuildTrigger.CloudbuildTriggerRepositoryEventConfigPushOutputReference", version: "14.13.1" };
function cloudbuildTriggerRepositoryEventConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        repository: cdktf.stringToTerraform(struct.repository),
        pull_request: cloudbuildTriggerRepositoryEventConfigPullRequestToTerraform(struct.pullRequest),
        push: cloudbuildTriggerRepositoryEventConfigPushToTerraform(struct.push),
    };
}
exports.cloudbuildTriggerRepositoryEventConfigToTerraform = cloudbuildTriggerRepositoryEventConfigToTerraform;
function cloudbuildTriggerRepositoryEventConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        repository: {
            value: cdktf.stringToHclTerraform(struct.repository),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        pull_request: {
            value: cloudbuildTriggerRepositoryEventConfigPullRequestToHclTerraform(struct.pullRequest),
            isBlock: true,
            type: "list",
            storageClassType: "CloudbuildTriggerRepositoryEventConfigPullRequestList",
        },
        push: {
            value: cloudbuildTriggerRepositoryEventConfigPushToHclTerraform(struct.push),
            isBlock: true,
            type: "list",
            storageClassType: "CloudbuildTriggerRepositoryEventConfigPushList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildTriggerRepositoryEventConfigToHclTerraform = cloudbuildTriggerRepositoryEventConfigToHclTerraform;
class CloudbuildTriggerRepositoryEventConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // pull_request - computed: false, optional: true, required: false
        this._pullRequest = new CloudbuildTriggerRepositoryEventConfigPullRequestOutputReference(this, "pull_request");
        // push - computed: false, optional: true, required: false
        this._push = new CloudbuildTriggerRepositoryEventConfigPushOutputReference(this, "push");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._repository !== undefined) {
            hasAnyValues = true;
            internalValueResult.repository = this._repository;
        }
        if (this._pullRequest?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.pullRequest = this._pullRequest?.internalValue;
        }
        if (this._push?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.push = this._push?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._repository = undefined;
            this._pullRequest.internalValue = undefined;
            this._push.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._repository = value.repository;
            this._pullRequest.internalValue = value.pullRequest;
            this._push.internalValue = value.push;
        }
    }
    get repository() {
        return this.getStringAttribute('repository');
    }
    set repository(value) {
        this._repository = value;
    }
    resetRepository() {
        this._repository = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get repositoryInput() {
        return this._repository;
    }
    get pullRequest() {
        return this._pullRequest;
    }
    putPullRequest(value) {
        this._pullRequest.internalValue = value;
    }
    resetPullRequest() {
        this._pullRequest.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pullRequestInput() {
        return this._pullRequest.internalValue;
    }
    get push() {
        return this._push;
    }
    putPush(value) {
        this._push.internalValue = value;
    }
    resetPush() {
        this._push.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pushInput() {
        return this._push.internalValue;
    }
}
exports.CloudbuildTriggerRepositoryEventConfigOutputReference = CloudbuildTriggerRepositoryEventConfigOutputReference;
_13 = JSII_RTTI_SYMBOL_1;
CloudbuildTriggerRepositoryEventConfigOutputReference[_13] = { fqn: "@cdktf/provider-google.cloudbuildTrigger.CloudbuildTriggerRepositoryEventConfigOutputReference", version: "14.13.1" };
function cloudbuildTriggerSourceToBuildToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bitbucket_server_config: cdktf.stringToTerraform(struct.bitbucketServerConfig),
        github_enterprise_config: cdktf.stringToTerraform(struct.githubEnterpriseConfig),
        ref: cdktf.stringToTerraform(struct.ref),
        repo_type: cdktf.stringToTerraform(struct.repoType),
        repository: cdktf.stringToTerraform(struct.repository),
        uri: cdktf.stringToTerraform(struct.uri),
    };
}
exports.cloudbuildTriggerSourceToBuildToTerraform = cloudbuildTriggerSourceToBuildToTerraform;
function cloudbuildTriggerSourceToBuildToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        bitbucket_server_config: {
            value: cdktf.stringToHclTerraform(struct.bitbucketServerConfig),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        github_enterprise_config: {
            value: cdktf.stringToHclTerraform(struct.githubEnterpriseConfig),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        ref: {
            value: cdktf.stringToHclTerraform(struct.ref),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        repo_type: {
            value: cdktf.stringToHclTerraform(struct.repoType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        repository: {
            value: cdktf.stringToHclTerraform(struct.repository),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        uri: {
            value: cdktf.stringToHclTerraform(struct.uri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildTriggerSourceToBuildToHclTerraform = cloudbuildTriggerSourceToBuildToHclTerraform;
class CloudbuildTriggerSourceToBuildOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bitbucketServerConfig !== undefined) {
            hasAnyValues = true;
            internalValueResult.bitbucketServerConfig = this._bitbucketServerConfig;
        }
        if (this._githubEnterpriseConfig !== undefined) {
            hasAnyValues = true;
            internalValueResult.githubEnterpriseConfig = this._githubEnterpriseConfig;
        }
        if (this._ref !== undefined) {
            hasAnyValues = true;
            internalValueResult.ref = this._ref;
        }
        if (this._repoType !== undefined) {
            hasAnyValues = true;
            internalValueResult.repoType = this._repoType;
        }
        if (this._repository !== undefined) {
            hasAnyValues = true;
            internalValueResult.repository = this._repository;
        }
        if (this._uri !== undefined) {
            hasAnyValues = true;
            internalValueResult.uri = this._uri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bitbucketServerConfig = undefined;
            this._githubEnterpriseConfig = undefined;
            this._ref = undefined;
            this._repoType = undefined;
            this._repository = undefined;
            this._uri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bitbucketServerConfig = value.bitbucketServerConfig;
            this._githubEnterpriseConfig = value.githubEnterpriseConfig;
            this._ref = value.ref;
            this._repoType = value.repoType;
            this._repository = value.repository;
            this._uri = value.uri;
        }
    }
    get bitbucketServerConfig() {
        return this.getStringAttribute('bitbucket_server_config');
    }
    set bitbucketServerConfig(value) {
        this._bitbucketServerConfig = value;
    }
    resetBitbucketServerConfig() {
        this._bitbucketServerConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bitbucketServerConfigInput() {
        return this._bitbucketServerConfig;
    }
    get githubEnterpriseConfig() {
        return this.getStringAttribute('github_enterprise_config');
    }
    set githubEnterpriseConfig(value) {
        this._githubEnterpriseConfig = value;
    }
    resetGithubEnterpriseConfig() {
        this._githubEnterpriseConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get githubEnterpriseConfigInput() {
        return this._githubEnterpriseConfig;
    }
    get ref() {
        return this.getStringAttribute('ref');
    }
    set ref(value) {
        this._ref = value;
    }
    // Temporarily expose input value. Use with caution.
    get refInput() {
        return this._ref;
    }
    get repoType() {
        return this.getStringAttribute('repo_type');
    }
    set repoType(value) {
        this._repoType = value;
    }
    // Temporarily expose input value. Use with caution.
    get repoTypeInput() {
        return this._repoType;
    }
    get repository() {
        return this.getStringAttribute('repository');
    }
    set repository(value) {
        this._repository = value;
    }
    resetRepository() {
        this._repository = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get repositoryInput() {
        return this._repository;
    }
    get uri() {
        return this.getStringAttribute('uri');
    }
    set uri(value) {
        this._uri = value;
    }
    resetUri() {
        this._uri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get uriInput() {
        return this._uri;
    }
}
exports.CloudbuildTriggerSourceToBuildOutputReference = CloudbuildTriggerSourceToBuildOutputReference;
_14 = JSII_RTTI_SYMBOL_1;
CloudbuildTriggerSourceToBuildOutputReference[_14] = { fqn: "@cdktf/provider-google.cloudbuildTrigger.CloudbuildTriggerSourceToBuildOutputReference", version: "14.13.1" };
function cloudbuildTriggerTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.cloudbuildTriggerTimeoutsToTerraform = cloudbuildTriggerTimeoutsToTerraform;
function cloudbuildTriggerTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildTriggerTimeoutsToHclTerraform = cloudbuildTriggerTimeoutsToHclTerraform;
class CloudbuildTriggerTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.CloudbuildTriggerTimeoutsOutputReference = CloudbuildTriggerTimeoutsOutputReference;
_15 = JSII_RTTI_SYMBOL_1;
CloudbuildTriggerTimeoutsOutputReference[_15] = { fqn: "@cdktf/provider-google.cloudbuildTrigger.CloudbuildTriggerTimeoutsOutputReference", version: "14.13.1" };
function cloudbuildTriggerTriggerTemplateToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        branch_name: cdktf.stringToTerraform(struct.branchName),
        commit_sha: cdktf.stringToTerraform(struct.commitSha),
        dir: cdktf.stringToTerraform(struct.dir),
        invert_regex: cdktf.booleanToTerraform(struct.invertRegex),
        project_id: cdktf.stringToTerraform(struct.projectId),
        repo_name: cdktf.stringToTerraform(struct.repoName),
        tag_name: cdktf.stringToTerraform(struct.tagName),
    };
}
exports.cloudbuildTriggerTriggerTemplateToTerraform = cloudbuildTriggerTriggerTemplateToTerraform;
function cloudbuildTriggerTriggerTemplateToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        branch_name: {
            value: cdktf.stringToHclTerraform(struct.branchName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        commit_sha: {
            value: cdktf.stringToHclTerraform(struct.commitSha),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        dir: {
            value: cdktf.stringToHclTerraform(struct.dir),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        invert_regex: {
            value: cdktf.booleanToHclTerraform(struct.invertRegex),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        project_id: {
            value: cdktf.stringToHclTerraform(struct.projectId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        repo_name: {
            value: cdktf.stringToHclTerraform(struct.repoName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        tag_name: {
            value: cdktf.stringToHclTerraform(struct.tagName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildTriggerTriggerTemplateToHclTerraform = cloudbuildTriggerTriggerTemplateToHclTerraform;
class CloudbuildTriggerTriggerTemplateOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._branchName !== undefined) {
            hasAnyValues = true;
            internalValueResult.branchName = this._branchName;
        }
        if (this._commitSha !== undefined) {
            hasAnyValues = true;
            internalValueResult.commitSha = this._commitSha;
        }
        if (this._dir !== undefined) {
            hasAnyValues = true;
            internalValueResult.dir = this._dir;
        }
        if (this._invertRegex !== undefined) {
            hasAnyValues = true;
            internalValueResult.invertRegex = this._invertRegex;
        }
        if (this._projectId !== undefined) {
            hasAnyValues = true;
            internalValueResult.projectId = this._projectId;
        }
        if (this._repoName !== undefined) {
            hasAnyValues = true;
            internalValueResult.repoName = this._repoName;
        }
        if (this._tagName !== undefined) {
            hasAnyValues = true;
            internalValueResult.tagName = this._tagName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._branchName = undefined;
            this._commitSha = undefined;
            this._dir = undefined;
            this._invertRegex = undefined;
            this._projectId = undefined;
            this._repoName = undefined;
            this._tagName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._branchName = value.branchName;
            this._commitSha = value.commitSha;
            this._dir = value.dir;
            this._invertRegex = value.invertRegex;
            this._projectId = value.projectId;
            this._repoName = value.repoName;
            this._tagName = value.tagName;
        }
    }
    get branchName() {
        return this.getStringAttribute('branch_name');
    }
    set branchName(value) {
        this._branchName = value;
    }
    resetBranchName() {
        this._branchName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get branchNameInput() {
        return this._branchName;
    }
    get commitSha() {
        return this.getStringAttribute('commit_sha');
    }
    set commitSha(value) {
        this._commitSha = value;
    }
    resetCommitSha() {
        this._commitSha = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get commitShaInput() {
        return this._commitSha;
    }
    get dir() {
        return this.getStringAttribute('dir');
    }
    set dir(value) {
        this._dir = value;
    }
    resetDir() {
        this._dir = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dirInput() {
        return this._dir;
    }
    get invertRegex() {
        return this.getBooleanAttribute('invert_regex');
    }
    set invertRegex(value) {
        this._invertRegex = value;
    }
    resetInvertRegex() {
        this._invertRegex = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get invertRegexInput() {
        return this._invertRegex;
    }
    get projectId() {
        return this.getStringAttribute('project_id');
    }
    set projectId(value) {
        this._projectId = value;
    }
    resetProjectId() {
        this._projectId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectIdInput() {
        return this._projectId;
    }
    get repoName() {
        return this.getStringAttribute('repo_name');
    }
    set repoName(value) {
        this._repoName = value;
    }
    resetRepoName() {
        this._repoName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get repoNameInput() {
        return this._repoName;
    }
    get tagName() {
        return this.getStringAttribute('tag_name');
    }
    set tagName(value) {
        this._tagName = value;
    }
    resetTagName() {
        this._tagName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagNameInput() {
        return this._tagName;
    }
}
exports.CloudbuildTriggerTriggerTemplateOutputReference = CloudbuildTriggerTriggerTemplateOutputReference;
_16 = JSII_RTTI_SYMBOL_1;
CloudbuildTriggerTriggerTemplateOutputReference[_16] = { fqn: "@cdktf/provider-google.cloudbuildTrigger.CloudbuildTriggerTriggerTemplateOutputReference", version: "14.13.1" };
function cloudbuildTriggerWebhookConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        secret: cdktf.stringToTerraform(struct.secret),
    };
}
exports.cloudbuildTriggerWebhookConfigToTerraform = cloudbuildTriggerWebhookConfigToTerraform;
function cloudbuildTriggerWebhookConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        secret: {
            value: cdktf.stringToHclTerraform(struct.secret),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildTriggerWebhookConfigToHclTerraform = cloudbuildTriggerWebhookConfigToHclTerraform;
class CloudbuildTriggerWebhookConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._secret !== undefined) {
            hasAnyValues = true;
            internalValueResult.secret = this._secret;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._secret = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._secret = value.secret;
        }
    }
    get secret() {
        return this.getStringAttribute('secret');
    }
    set secret(value) {
        this._secret = value;
    }
    // Temporarily expose input value. Use with caution.
    get secretInput() {
        return this._secret;
    }
    // state - computed: true, optional: false, required: false
    get state() {
        return this.getStringAttribute('state');
    }
}
exports.CloudbuildTriggerWebhookConfigOutputReference = CloudbuildTriggerWebhookConfigOutputReference;
_17 = JSII_RTTI_SYMBOL_1;
CloudbuildTriggerWebhookConfigOutputReference[_17] = { fqn: "@cdktf/provider-google.cloudbuildTrigger.CloudbuildTriggerWebhookConfigOutputReference", version: "14.13.1" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/cloudbuild_trigger google_cloudbuild_trigger}
*/
class CloudbuildTrigger extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a CloudbuildTrigger resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the CloudbuildTrigger to import
    * @param importFromId The id of the existing CloudbuildTrigger that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/cloudbuild_trigger#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the CloudbuildTrigger to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_cloudbuild_trigger", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/cloudbuild_trigger google_cloudbuild_trigger} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options CloudbuildTriggerConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'google_cloudbuild_trigger',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // approval_config - computed: false, optional: true, required: false
        this._approvalConfig = new CloudbuildTriggerApprovalConfigOutputReference(this, "approval_config");
        // bitbucket_server_trigger_config - computed: false, optional: true, required: false
        this._bitbucketServerTriggerConfig = new CloudbuildTriggerBitbucketServerTriggerConfigOutputReference(this, "bitbucket_server_trigger_config");
        // build - computed: false, optional: true, required: false
        this._build = new CloudbuildTriggerBuildOutputReference(this, "build");
        // git_file_source - computed: false, optional: true, required: false
        this._gitFileSource = new CloudbuildTriggerGitFileSourceOutputReference(this, "git_file_source");
        // github - computed: false, optional: true, required: false
        this._github = new CloudbuildTriggerGithubOutputReference(this, "github");
        // pubsub_config - computed: false, optional: true, required: false
        this._pubsubConfig = new CloudbuildTriggerPubsubConfigOutputReference(this, "pubsub_config");
        // repository_event_config - computed: false, optional: true, required: false
        this._repositoryEventConfig = new CloudbuildTriggerRepositoryEventConfigOutputReference(this, "repository_event_config");
        // source_to_build - computed: false, optional: true, required: false
        this._sourceToBuild = new CloudbuildTriggerSourceToBuildOutputReference(this, "source_to_build");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new CloudbuildTriggerTimeoutsOutputReference(this, "timeouts");
        // trigger_template - computed: false, optional: true, required: false
        this._triggerTemplate = new CloudbuildTriggerTriggerTemplateOutputReference(this, "trigger_template");
        // webhook_config - computed: false, optional: true, required: false
        this._webhookConfig = new CloudbuildTriggerWebhookConfigOutputReference(this, "webhook_config");
        this._description = config.description;
        this._disabled = config.disabled;
        this._filename = config.filename;
        this._filter = config.filter;
        this._id = config.id;
        this._ignoredFiles = config.ignoredFiles;
        this._includeBuildLogs = config.includeBuildLogs;
        this._includedFiles = config.includedFiles;
        this._location = config.location;
        this._name = config.name;
        this._project = config.project;
        this._serviceAccount = config.serviceAccount;
        this._substitutions = config.substitutions;
        this._tags = config.tags;
        this._approvalConfig.internalValue = config.approvalConfig;
        this._bitbucketServerTriggerConfig.internalValue = config.bitbucketServerTriggerConfig;
        this._build.internalValue = config.buildAttribute;
        this._gitFileSource.internalValue = config.gitFileSource;
        this._github.internalValue = config.github;
        this._pubsubConfig.internalValue = config.pubsubConfig;
        this._repositoryEventConfig.internalValue = config.repositoryEventConfig;
        this._sourceToBuild.internalValue = config.sourceToBuild;
        this._timeouts.internalValue = config.timeouts;
        this._triggerTemplate.internalValue = config.triggerTemplate;
        this._webhookConfig.internalValue = config.webhookConfig;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // create_time - computed: true, optional: false, required: false
    get createTime() {
        return this.getStringAttribute('create_time');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get disabled() {
        return this.getBooleanAttribute('disabled');
    }
    set disabled(value) {
        this._disabled = value;
    }
    resetDisabled() {
        this._disabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get disabledInput() {
        return this._disabled;
    }
    get filename() {
        return this.getStringAttribute('filename');
    }
    set filename(value) {
        this._filename = value;
    }
    resetFilename() {
        this._filename = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get filenameInput() {
        return this._filename;
    }
    get filter() {
        return this.getStringAttribute('filter');
    }
    set filter(value) {
        this._filter = value;
    }
    resetFilter() {
        this._filter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get filterInput() {
        return this._filter;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get ignoredFiles() {
        return this.getListAttribute('ignored_files');
    }
    set ignoredFiles(value) {
        this._ignoredFiles = value;
    }
    resetIgnoredFiles() {
        this._ignoredFiles = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ignoredFilesInput() {
        return this._ignoredFiles;
    }
    get includeBuildLogs() {
        return this.getStringAttribute('include_build_logs');
    }
    set includeBuildLogs(value) {
        this._includeBuildLogs = value;
    }
    resetIncludeBuildLogs() {
        this._includeBuildLogs = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeBuildLogsInput() {
        return this._includeBuildLogs;
    }
    get includedFiles() {
        return this.getListAttribute('included_files');
    }
    set includedFiles(value) {
        this._includedFiles = value;
    }
    resetIncludedFiles() {
        this._includedFiles = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includedFilesInput() {
        return this._includedFiles;
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    resetLocation() {
        this._location = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get serviceAccount() {
        return this.getStringAttribute('service_account');
    }
    set serviceAccount(value) {
        this._serviceAccount = value;
    }
    resetServiceAccount() {
        this._serviceAccount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceAccountInput() {
        return this._serviceAccount;
    }
    get substitutions() {
        return this.getStringMapAttribute('substitutions');
    }
    set substitutions(value) {
        this._substitutions = value;
    }
    resetSubstitutions() {
        this._substitutions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get substitutionsInput() {
        return this._substitutions;
    }
    get tags() {
        return this.getListAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // trigger_id - computed: true, optional: false, required: false
    get triggerId() {
        return this.getStringAttribute('trigger_id');
    }
    get approvalConfig() {
        return this._approvalConfig;
    }
    putApprovalConfig(value) {
        this._approvalConfig.internalValue = value;
    }
    resetApprovalConfig() {
        this._approvalConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get approvalConfigInput() {
        return this._approvalConfig.internalValue;
    }
    get bitbucketServerTriggerConfig() {
        return this._bitbucketServerTriggerConfig;
    }
    putBitbucketServerTriggerConfig(value) {
        this._bitbucketServerTriggerConfig.internalValue = value;
    }
    resetBitbucketServerTriggerConfig() {
        this._bitbucketServerTriggerConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bitbucketServerTriggerConfigInput() {
        return this._bitbucketServerTriggerConfig.internalValue;
    }
    get buildAttribute() {
        return this._build;
    }
    putBuildAttribute(value) {
        this._build.internalValue = value;
    }
    resetBuildAttribute() {
        this._build.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get buildAttributeInput() {
        return this._build.internalValue;
    }
    get gitFileSource() {
        return this._gitFileSource;
    }
    putGitFileSource(value) {
        this._gitFileSource.internalValue = value;
    }
    resetGitFileSource() {
        this._gitFileSource.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gitFileSourceInput() {
        return this._gitFileSource.internalValue;
    }
    get github() {
        return this._github;
    }
    putGithub(value) {
        this._github.internalValue = value;
    }
    resetGithub() {
        this._github.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get githubInput() {
        return this._github.internalValue;
    }
    get pubsubConfig() {
        return this._pubsubConfig;
    }
    putPubsubConfig(value) {
        this._pubsubConfig.internalValue = value;
    }
    resetPubsubConfig() {
        this._pubsubConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pubsubConfigInput() {
        return this._pubsubConfig.internalValue;
    }
    get repositoryEventConfig() {
        return this._repositoryEventConfig;
    }
    putRepositoryEventConfig(value) {
        this._repositoryEventConfig.internalValue = value;
    }
    resetRepositoryEventConfig() {
        this._repositoryEventConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get repositoryEventConfigInput() {
        return this._repositoryEventConfig.internalValue;
    }
    get sourceToBuild() {
        return this._sourceToBuild;
    }
    putSourceToBuild(value) {
        this._sourceToBuild.internalValue = value;
    }
    resetSourceToBuild() {
        this._sourceToBuild.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sourceToBuildInput() {
        return this._sourceToBuild.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    get triggerTemplate() {
        return this._triggerTemplate;
    }
    putTriggerTemplate(value) {
        this._triggerTemplate.internalValue = value;
    }
    resetTriggerTemplate() {
        this._triggerTemplate.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get triggerTemplateInput() {
        return this._triggerTemplate.internalValue;
    }
    get webhookConfig() {
        return this._webhookConfig;
    }
    putWebhookConfig(value) {
        this._webhookConfig.internalValue = value;
    }
    resetWebhookConfig() {
        this._webhookConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get webhookConfigInput() {
        return this._webhookConfig.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            description: cdktf.stringToTerraform(this._description),
            disabled: cdktf.booleanToTerraform(this._disabled),
            filename: cdktf.stringToTerraform(this._filename),
            filter: cdktf.stringToTerraform(this._filter),
            id: cdktf.stringToTerraform(this._id),
            ignored_files: cdktf.listMapper(cdktf.stringToTerraform, false)(this._ignoredFiles),
            include_build_logs: cdktf.stringToTerraform(this._includeBuildLogs),
            included_files: cdktf.listMapper(cdktf.stringToTerraform, false)(this._includedFiles),
            location: cdktf.stringToTerraform(this._location),
            name: cdktf.stringToTerraform(this._name),
            project: cdktf.stringToTerraform(this._project),
            service_account: cdktf.stringToTerraform(this._serviceAccount),
            substitutions: cdktf.hashMapper(cdktf.stringToTerraform)(this._substitutions),
            tags: cdktf.listMapper(cdktf.stringToTerraform, false)(this._tags),
            approval_config: cloudbuildTriggerApprovalConfigToTerraform(this._approvalConfig.internalValue),
            bitbucket_server_trigger_config: cloudbuildTriggerBitbucketServerTriggerConfigToTerraform(this._bitbucketServerTriggerConfig.internalValue),
            build: cloudbuildTriggerBuildToTerraform(this._build.internalValue),
            git_file_source: cloudbuildTriggerGitFileSourceToTerraform(this._gitFileSource.internalValue),
            github: cloudbuildTriggerGithubToTerraform(this._github.internalValue),
            pubsub_config: cloudbuildTriggerPubsubConfigToTerraform(this._pubsubConfig.internalValue),
            repository_event_config: cloudbuildTriggerRepositoryEventConfigToTerraform(this._repositoryEventConfig.internalValue),
            source_to_build: cloudbuildTriggerSourceToBuildToTerraform(this._sourceToBuild.internalValue),
            timeouts: cloudbuildTriggerTimeoutsToTerraform(this._timeouts.internalValue),
            trigger_template: cloudbuildTriggerTriggerTemplateToTerraform(this._triggerTemplate.internalValue),
            webhook_config: cloudbuildTriggerWebhookConfigToTerraform(this._webhookConfig.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            description: {
                value: cdktf.stringToHclTerraform(this._description),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            disabled: {
                value: cdktf.booleanToHclTerraform(this._disabled),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            filename: {
                value: cdktf.stringToHclTerraform(this._filename),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            filter: {
                value: cdktf.stringToHclTerraform(this._filter),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            ignored_files: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._ignoredFiles),
                isBlock: false,
                type: "list",
                storageClassType: "stringList",
            },
            include_build_logs: {
                value: cdktf.stringToHclTerraform(this._includeBuildLogs),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            included_files: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._includedFiles),
                isBlock: false,
                type: "list",
                storageClassType: "stringList",
            },
            location: {
                value: cdktf.stringToHclTerraform(this._location),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            name: {
                value: cdktf.stringToHclTerraform(this._name),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            project: {
                value: cdktf.stringToHclTerraform(this._project),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            service_account: {
                value: cdktf.stringToHclTerraform(this._serviceAccount),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            substitutions: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._substitutions),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            tags: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._tags),
                isBlock: false,
                type: "list",
                storageClassType: "stringList",
            },
            approval_config: {
                value: cloudbuildTriggerApprovalConfigToHclTerraform(this._approvalConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "CloudbuildTriggerApprovalConfigList",
            },
            bitbucket_server_trigger_config: {
                value: cloudbuildTriggerBitbucketServerTriggerConfigToHclTerraform(this._bitbucketServerTriggerConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "CloudbuildTriggerBitbucketServerTriggerConfigList",
            },
            build: {
                value: cloudbuildTriggerBuildToHclTerraform(this._build.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "CloudbuildTriggerBuildList",
            },
            git_file_source: {
                value: cloudbuildTriggerGitFileSourceToHclTerraform(this._gitFileSource.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "CloudbuildTriggerGitFileSourceList",
            },
            github: {
                value: cloudbuildTriggerGithubToHclTerraform(this._github.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "CloudbuildTriggerGithubList",
            },
            pubsub_config: {
                value: cloudbuildTriggerPubsubConfigToHclTerraform(this._pubsubConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "CloudbuildTriggerPubsubConfigList",
            },
            repository_event_config: {
                value: cloudbuildTriggerRepositoryEventConfigToHclTerraform(this._repositoryEventConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "CloudbuildTriggerRepositoryEventConfigList",
            },
            source_to_build: {
                value: cloudbuildTriggerSourceToBuildToHclTerraform(this._sourceToBuild.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "CloudbuildTriggerSourceToBuildList",
            },
            timeouts: {
                value: cloudbuildTriggerTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "CloudbuildTriggerTimeouts",
            },
            trigger_template: {
                value: cloudbuildTriggerTriggerTemplateToHclTerraform(this._triggerTemplate.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "CloudbuildTriggerTriggerTemplateList",
            },
            webhook_config: {
                value: cloudbuildTriggerWebhookConfigToHclTerraform(this._webhookConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "CloudbuildTriggerWebhookConfigList",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.CloudbuildTrigger = CloudbuildTrigger;
_18 = JSII_RTTI_SYMBOL_1;
CloudbuildTrigger[_18] = { fqn: "@cdktf/provider-google.cloudbuildTrigger.CloudbuildTrigger", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
CloudbuildTrigger.tfResourceType = "google_cloudbuild_trigger";
//# sourceMappingURL=data:application/json;base64,