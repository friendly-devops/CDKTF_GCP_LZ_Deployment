"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiscoveryEngineTargetSite = exports.DiscoveryEngineTargetSiteTimeoutsOutputReference = exports.discoveryEngineTargetSiteTimeoutsToHclTerraform = exports.discoveryEngineTargetSiteTimeoutsToTerraform = exports.DiscoveryEngineTargetSiteSiteVerificationInfoList = exports.DiscoveryEngineTargetSiteSiteVerificationInfoOutputReference = exports.discoveryEngineTargetSiteSiteVerificationInfoToHclTerraform = exports.discoveryEngineTargetSiteSiteVerificationInfoToTerraform = exports.DiscoveryEngineTargetSiteFailureReasonList = exports.DiscoveryEngineTargetSiteFailureReasonOutputReference = exports.discoveryEngineTargetSiteFailureReasonToHclTerraform = exports.discoveryEngineTargetSiteFailureReasonToTerraform = exports.DiscoveryEngineTargetSiteFailureReasonQuotaFailureList = exports.DiscoveryEngineTargetSiteFailureReasonQuotaFailureOutputReference = exports.discoveryEngineTargetSiteFailureReasonQuotaFailureToHclTerraform = exports.discoveryEngineTargetSiteFailureReasonQuotaFailureToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function discoveryEngineTargetSiteFailureReasonQuotaFailureToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.discoveryEngineTargetSiteFailureReasonQuotaFailureToTerraform = discoveryEngineTargetSiteFailureReasonQuotaFailureToTerraform;
function discoveryEngineTargetSiteFailureReasonQuotaFailureToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.discoveryEngineTargetSiteFailureReasonQuotaFailureToHclTerraform = discoveryEngineTargetSiteFailureReasonQuotaFailureToHclTerraform;
class DiscoveryEngineTargetSiteFailureReasonQuotaFailureOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // total_required_quota - computed: true, optional: false, required: false
    get totalRequiredQuota() {
        return this.getNumberAttribute('total_required_quota');
    }
}
exports.DiscoveryEngineTargetSiteFailureReasonQuotaFailureOutputReference = DiscoveryEngineTargetSiteFailureReasonQuotaFailureOutputReference;
_a = JSII_RTTI_SYMBOL_1;
DiscoveryEngineTargetSiteFailureReasonQuotaFailureOutputReference[_a] = { fqn: "@cdktf/provider-google.discoveryEngineTargetSite.DiscoveryEngineTargetSiteFailureReasonQuotaFailureOutputReference", version: "14.13.1" };
class DiscoveryEngineTargetSiteFailureReasonQuotaFailureList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DiscoveryEngineTargetSiteFailureReasonQuotaFailureOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DiscoveryEngineTargetSiteFailureReasonQuotaFailureList = DiscoveryEngineTargetSiteFailureReasonQuotaFailureList;
_b = JSII_RTTI_SYMBOL_1;
DiscoveryEngineTargetSiteFailureReasonQuotaFailureList[_b] = { fqn: "@cdktf/provider-google.discoveryEngineTargetSite.DiscoveryEngineTargetSiteFailureReasonQuotaFailureList", version: "14.13.1" };
function discoveryEngineTargetSiteFailureReasonToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.discoveryEngineTargetSiteFailureReasonToTerraform = discoveryEngineTargetSiteFailureReasonToTerraform;
function discoveryEngineTargetSiteFailureReasonToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.discoveryEngineTargetSiteFailureReasonToHclTerraform = discoveryEngineTargetSiteFailureReasonToHclTerraform;
class DiscoveryEngineTargetSiteFailureReasonOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // quota_failure - computed: true, optional: false, required: false
        this._quotaFailure = new DiscoveryEngineTargetSiteFailureReasonQuotaFailureList(this, "quota_failure", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    get quotaFailure() {
        return this._quotaFailure;
    }
}
exports.DiscoveryEngineTargetSiteFailureReasonOutputReference = DiscoveryEngineTargetSiteFailureReasonOutputReference;
_c = JSII_RTTI_SYMBOL_1;
DiscoveryEngineTargetSiteFailureReasonOutputReference[_c] = { fqn: "@cdktf/provider-google.discoveryEngineTargetSite.DiscoveryEngineTargetSiteFailureReasonOutputReference", version: "14.13.1" };
class DiscoveryEngineTargetSiteFailureReasonList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DiscoveryEngineTargetSiteFailureReasonOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DiscoveryEngineTargetSiteFailureReasonList = DiscoveryEngineTargetSiteFailureReasonList;
_d = JSII_RTTI_SYMBOL_1;
DiscoveryEngineTargetSiteFailureReasonList[_d] = { fqn: "@cdktf/provider-google.discoveryEngineTargetSite.DiscoveryEngineTargetSiteFailureReasonList", version: "14.13.1" };
function discoveryEngineTargetSiteSiteVerificationInfoToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.discoveryEngineTargetSiteSiteVerificationInfoToTerraform = discoveryEngineTargetSiteSiteVerificationInfoToTerraform;
function discoveryEngineTargetSiteSiteVerificationInfoToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.discoveryEngineTargetSiteSiteVerificationInfoToHclTerraform = discoveryEngineTargetSiteSiteVerificationInfoToHclTerraform;
class DiscoveryEngineTargetSiteSiteVerificationInfoOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // site_verification_state - computed: true, optional: false, required: false
    get siteVerificationState() {
        return this.getStringAttribute('site_verification_state');
    }
    // verify_time - computed: true, optional: false, required: false
    get verifyTime() {
        return this.getStringAttribute('verify_time');
    }
}
exports.DiscoveryEngineTargetSiteSiteVerificationInfoOutputReference = DiscoveryEngineTargetSiteSiteVerificationInfoOutputReference;
_e = JSII_RTTI_SYMBOL_1;
DiscoveryEngineTargetSiteSiteVerificationInfoOutputReference[_e] = { fqn: "@cdktf/provider-google.discoveryEngineTargetSite.DiscoveryEngineTargetSiteSiteVerificationInfoOutputReference", version: "14.13.1" };
class DiscoveryEngineTargetSiteSiteVerificationInfoList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DiscoveryEngineTargetSiteSiteVerificationInfoOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DiscoveryEngineTargetSiteSiteVerificationInfoList = DiscoveryEngineTargetSiteSiteVerificationInfoList;
_f = JSII_RTTI_SYMBOL_1;
DiscoveryEngineTargetSiteSiteVerificationInfoList[_f] = { fqn: "@cdktf/provider-google.discoveryEngineTargetSite.DiscoveryEngineTargetSiteSiteVerificationInfoList", version: "14.13.1" };
function discoveryEngineTargetSiteTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
    };
}
exports.discoveryEngineTargetSiteTimeoutsToTerraform = discoveryEngineTargetSiteTimeoutsToTerraform;
function discoveryEngineTargetSiteTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.discoveryEngineTargetSiteTimeoutsToHclTerraform = discoveryEngineTargetSiteTimeoutsToHclTerraform;
class DiscoveryEngineTargetSiteTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
}
exports.DiscoveryEngineTargetSiteTimeoutsOutputReference = DiscoveryEngineTargetSiteTimeoutsOutputReference;
_g = JSII_RTTI_SYMBOL_1;
DiscoveryEngineTargetSiteTimeoutsOutputReference[_g] = { fqn: "@cdktf/provider-google.discoveryEngineTargetSite.DiscoveryEngineTargetSiteTimeoutsOutputReference", version: "14.13.1" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/discovery_engine_target_site google_discovery_engine_target_site}
*/
class DiscoveryEngineTargetSite extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a DiscoveryEngineTargetSite resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the DiscoveryEngineTargetSite to import
    * @param importFromId The id of the existing DiscoveryEngineTargetSite that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/discovery_engine_target_site#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the DiscoveryEngineTargetSite to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_discovery_engine_target_site", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/discovery_engine_target_site google_discovery_engine_target_site} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DiscoveryEngineTargetSiteConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_discovery_engine_target_site',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // failure_reason - computed: true, optional: false, required: false
        this._failureReason = new DiscoveryEngineTargetSiteFailureReasonList(this, "failure_reason", false);
        // site_verification_info - computed: true, optional: false, required: false
        this._siteVerificationInfo = new DiscoveryEngineTargetSiteSiteVerificationInfoList(this, "site_verification_info", false);
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new DiscoveryEngineTargetSiteTimeoutsOutputReference(this, "timeouts");
        this._dataStoreId = config.dataStoreId;
        this._exactMatch = config.exactMatch;
        this._id = config.id;
        this._location = config.location;
        this._project = config.project;
        this._providedUriPattern = config.providedUriPattern;
        this._type = config.type;
        this._timeouts.internalValue = config.timeouts;
    }
    get dataStoreId() {
        return this.getStringAttribute('data_store_id');
    }
    set dataStoreId(value) {
        this._dataStoreId = value;
    }
    // Temporarily expose input value. Use with caution.
    get dataStoreIdInput() {
        return this._dataStoreId;
    }
    get exactMatch() {
        return this.getBooleanAttribute('exact_match');
    }
    set exactMatch(value) {
        this._exactMatch = value;
    }
    resetExactMatch() {
        this._exactMatch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get exactMatchInput() {
        return this._exactMatch;
    }
    get failureReason() {
        return this._failureReason;
    }
    // generated_uri_pattern - computed: true, optional: false, required: false
    get generatedUriPattern() {
        return this.getStringAttribute('generated_uri_pattern');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // indexing_status - computed: true, optional: false, required: false
    get indexingStatus() {
        return this.getStringAttribute('indexing_status');
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get providedUriPattern() {
        return this.getStringAttribute('provided_uri_pattern');
    }
    set providedUriPattern(value) {
        this._providedUriPattern = value;
    }
    // Temporarily expose input value. Use with caution.
    get providedUriPatternInput() {
        return this._providedUriPattern;
    }
    // root_domain_uri - computed: true, optional: false, required: false
    get rootDomainUri() {
        return this.getStringAttribute('root_domain_uri');
    }
    get siteVerificationInfo() {
        return this._siteVerificationInfo;
    }
    // target_site_id - computed: true, optional: false, required: false
    get targetSiteId() {
        return this.getStringAttribute('target_site_id');
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    resetType() {
        this._type = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    // update_time - computed: true, optional: false, required: false
    get updateTime() {
        return this.getStringAttribute('update_time');
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            data_store_id: cdktf.stringToTerraform(this._dataStoreId),
            exact_match: cdktf.booleanToTerraform(this._exactMatch),
            id: cdktf.stringToTerraform(this._id),
            location: cdktf.stringToTerraform(this._location),
            project: cdktf.stringToTerraform(this._project),
            provided_uri_pattern: cdktf.stringToTerraform(this._providedUriPattern),
            type: cdktf.stringToTerraform(this._type),
            timeouts: discoveryEngineTargetSiteTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            data_store_id: {
                value: cdktf.stringToHclTerraform(this._dataStoreId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            exact_match: {
                value: cdktf.booleanToHclTerraform(this._exactMatch),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            location: {
                value: cdktf.stringToHclTerraform(this._location),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            project: {
                value: cdktf.stringToHclTerraform(this._project),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            provided_uri_pattern: {
                value: cdktf.stringToHclTerraform(this._providedUriPattern),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            type: {
                value: cdktf.stringToHclTerraform(this._type),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            timeouts: {
                value: discoveryEngineTargetSiteTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "DiscoveryEngineTargetSiteTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.DiscoveryEngineTargetSite = DiscoveryEngineTargetSite;
_h = JSII_RTTI_SYMBOL_1;
DiscoveryEngineTargetSite[_h] = { fqn: "@cdktf/provider-google.discoveryEngineTargetSite.DiscoveryEngineTargetSite", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
DiscoveryEngineTargetSite.tfResourceType = "google_discovery_engine_target_site";
//# sourceMappingURL=data:application/json;base64,