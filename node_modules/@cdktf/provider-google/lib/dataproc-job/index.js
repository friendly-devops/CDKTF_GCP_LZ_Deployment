"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v;
Object.defineProperty(exports, "__esModule", { value: true });
exports.dataprocJobSparksqlConfigToTerraform = exports.DataprocJobSparksqlConfigLoggingConfigOutputReference = exports.dataprocJobSparksqlConfigLoggingConfigToHclTerraform = exports.dataprocJobSparksqlConfigLoggingConfigToTerraform = exports.DataprocJobSparkConfigOutputReference = exports.dataprocJobSparkConfigToHclTerraform = exports.dataprocJobSparkConfigToTerraform = exports.DataprocJobSparkConfigLoggingConfigOutputReference = exports.dataprocJobSparkConfigLoggingConfigToHclTerraform = exports.dataprocJobSparkConfigLoggingConfigToTerraform = exports.DataprocJobSchedulingOutputReference = exports.dataprocJobSchedulingToHclTerraform = exports.dataprocJobSchedulingToTerraform = exports.DataprocJobReferenceOutputReference = exports.dataprocJobReferenceToHclTerraform = exports.dataprocJobReferenceToTerraform = exports.DataprocJobPysparkConfigOutputReference = exports.dataprocJobPysparkConfigToHclTerraform = exports.dataprocJobPysparkConfigToTerraform = exports.DataprocJobPysparkConfigLoggingConfigOutputReference = exports.dataprocJobPysparkConfigLoggingConfigToHclTerraform = exports.dataprocJobPysparkConfigLoggingConfigToTerraform = exports.DataprocJobPrestoConfigOutputReference = exports.dataprocJobPrestoConfigToHclTerraform = exports.dataprocJobPrestoConfigToTerraform = exports.DataprocJobPrestoConfigLoggingConfigOutputReference = exports.dataprocJobPrestoConfigLoggingConfigToHclTerraform = exports.dataprocJobPrestoConfigLoggingConfigToTerraform = exports.DataprocJobPlacementOutputReference = exports.dataprocJobPlacementToHclTerraform = exports.dataprocJobPlacementToTerraform = exports.DataprocJobPigConfigOutputReference = exports.dataprocJobPigConfigToHclTerraform = exports.dataprocJobPigConfigToTerraform = exports.DataprocJobPigConfigLoggingConfigOutputReference = exports.dataprocJobPigConfigLoggingConfigToHclTerraform = exports.dataprocJobPigConfigLoggingConfigToTerraform = exports.DataprocJobHiveConfigOutputReference = exports.dataprocJobHiveConfigToHclTerraform = exports.dataprocJobHiveConfigToTerraform = exports.DataprocJobHadoopConfigOutputReference = exports.dataprocJobHadoopConfigToHclTerraform = exports.dataprocJobHadoopConfigToTerraform = exports.DataprocJobHadoopConfigLoggingConfigOutputReference = exports.dataprocJobHadoopConfigLoggingConfigToHclTerraform = exports.dataprocJobHadoopConfigLoggingConfigToTerraform = exports.DataprocJobStatusList = exports.DataprocJobStatusOutputReference = exports.dataprocJobStatusToHclTerraform = exports.dataprocJobStatusToTerraform = void 0;
exports.DataprocJob = exports.DataprocJobTimeoutsOutputReference = exports.dataprocJobTimeoutsToHclTerraform = exports.dataprocJobTimeoutsToTerraform = exports.DataprocJobSparksqlConfigOutputReference = exports.dataprocJobSparksqlConfigToHclTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function dataprocJobStatusToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.dataprocJobStatusToTerraform = dataprocJobStatusToTerraform;
function dataprocJobStatusToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.dataprocJobStatusToHclTerraform = dataprocJobStatusToHclTerraform;
class DataprocJobStatusOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // details - computed: true, optional: false, required: false
    get details() {
        return this.getStringAttribute('details');
    }
    // state - computed: true, optional: false, required: false
    get state() {
        return this.getStringAttribute('state');
    }
    // state_start_time - computed: true, optional: false, required: false
    get stateStartTime() {
        return this.getStringAttribute('state_start_time');
    }
    // substate - computed: true, optional: false, required: false
    get substate() {
        return this.getStringAttribute('substate');
    }
}
exports.DataprocJobStatusOutputReference = DataprocJobStatusOutputReference;
_a = JSII_RTTI_SYMBOL_1;
DataprocJobStatusOutputReference[_a] = { fqn: "@cdktf/provider-google.dataprocJob.DataprocJobStatusOutputReference", version: "14.13.1" };
class DataprocJobStatusList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataprocJobStatusOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataprocJobStatusList = DataprocJobStatusList;
_b = JSII_RTTI_SYMBOL_1;
DataprocJobStatusList[_b] = { fqn: "@cdktf/provider-google.dataprocJob.DataprocJobStatusList", version: "14.13.1" };
function dataprocJobHadoopConfigLoggingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        driver_log_levels: cdktf.hashMapper(cdktf.stringToTerraform)(struct.driverLogLevels),
    };
}
exports.dataprocJobHadoopConfigLoggingConfigToTerraform = dataprocJobHadoopConfigLoggingConfigToTerraform;
function dataprocJobHadoopConfigLoggingConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        driver_log_levels: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.driverLogLevels),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocJobHadoopConfigLoggingConfigToHclTerraform = dataprocJobHadoopConfigLoggingConfigToHclTerraform;
class DataprocJobHadoopConfigLoggingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._driverLogLevels !== undefined) {
            hasAnyValues = true;
            internalValueResult.driverLogLevels = this._driverLogLevels;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._driverLogLevels = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._driverLogLevels = value.driverLogLevels;
        }
    }
    get driverLogLevels() {
        return this.getStringMapAttribute('driver_log_levels');
    }
    set driverLogLevels(value) {
        this._driverLogLevels = value;
    }
    // Temporarily expose input value. Use with caution.
    get driverLogLevelsInput() {
        return this._driverLogLevels;
    }
}
exports.DataprocJobHadoopConfigLoggingConfigOutputReference = DataprocJobHadoopConfigLoggingConfigOutputReference;
_c = JSII_RTTI_SYMBOL_1;
DataprocJobHadoopConfigLoggingConfigOutputReference[_c] = { fqn: "@cdktf/provider-google.dataprocJob.DataprocJobHadoopConfigLoggingConfigOutputReference", version: "14.13.1" };
function dataprocJobHadoopConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        archive_uris: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.archiveUris),
        args: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.args),
        file_uris: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.fileUris),
        jar_file_uris: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.jarFileUris),
        main_class: cdktf.stringToTerraform(struct.mainClass),
        main_jar_file_uri: cdktf.stringToTerraform(struct.mainJarFileUri),
        properties: cdktf.hashMapper(cdktf.stringToTerraform)(struct.properties),
        logging_config: dataprocJobHadoopConfigLoggingConfigToTerraform(struct.loggingConfig),
    };
}
exports.dataprocJobHadoopConfigToTerraform = dataprocJobHadoopConfigToTerraform;
function dataprocJobHadoopConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        archive_uris: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.archiveUris),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        args: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.args),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        file_uris: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.fileUris),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        jar_file_uris: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.jarFileUris),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        main_class: {
            value: cdktf.stringToHclTerraform(struct.mainClass),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        main_jar_file_uri: {
            value: cdktf.stringToHclTerraform(struct.mainJarFileUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        properties: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.properties),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        logging_config: {
            value: dataprocJobHadoopConfigLoggingConfigToHclTerraform(struct.loggingConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocJobHadoopConfigLoggingConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocJobHadoopConfigToHclTerraform = dataprocJobHadoopConfigToHclTerraform;
class DataprocJobHadoopConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // logging_config - computed: false, optional: true, required: false
        this._loggingConfig = new DataprocJobHadoopConfigLoggingConfigOutputReference(this, "logging_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._archiveUris !== undefined) {
            hasAnyValues = true;
            internalValueResult.archiveUris = this._archiveUris;
        }
        if (this._args !== undefined) {
            hasAnyValues = true;
            internalValueResult.args = this._args;
        }
        if (this._fileUris !== undefined) {
            hasAnyValues = true;
            internalValueResult.fileUris = this._fileUris;
        }
        if (this._jarFileUris !== undefined) {
            hasAnyValues = true;
            internalValueResult.jarFileUris = this._jarFileUris;
        }
        if (this._mainClass !== undefined) {
            hasAnyValues = true;
            internalValueResult.mainClass = this._mainClass;
        }
        if (this._mainJarFileUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.mainJarFileUri = this._mainJarFileUri;
        }
        if (this._properties !== undefined) {
            hasAnyValues = true;
            internalValueResult.properties = this._properties;
        }
        if (this._loggingConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.loggingConfig = this._loggingConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._archiveUris = undefined;
            this._args = undefined;
            this._fileUris = undefined;
            this._jarFileUris = undefined;
            this._mainClass = undefined;
            this._mainJarFileUri = undefined;
            this._properties = undefined;
            this._loggingConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._archiveUris = value.archiveUris;
            this._args = value.args;
            this._fileUris = value.fileUris;
            this._jarFileUris = value.jarFileUris;
            this._mainClass = value.mainClass;
            this._mainJarFileUri = value.mainJarFileUri;
            this._properties = value.properties;
            this._loggingConfig.internalValue = value.loggingConfig;
        }
    }
    get archiveUris() {
        return this.getListAttribute('archive_uris');
    }
    set archiveUris(value) {
        this._archiveUris = value;
    }
    resetArchiveUris() {
        this._archiveUris = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get archiveUrisInput() {
        return this._archiveUris;
    }
    get args() {
        return this.getListAttribute('args');
    }
    set args(value) {
        this._args = value;
    }
    resetArgs() {
        this._args = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get argsInput() {
        return this._args;
    }
    get fileUris() {
        return this.getListAttribute('file_uris');
    }
    set fileUris(value) {
        this._fileUris = value;
    }
    resetFileUris() {
        this._fileUris = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fileUrisInput() {
        return this._fileUris;
    }
    get jarFileUris() {
        return this.getListAttribute('jar_file_uris');
    }
    set jarFileUris(value) {
        this._jarFileUris = value;
    }
    resetJarFileUris() {
        this._jarFileUris = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jarFileUrisInput() {
        return this._jarFileUris;
    }
    get mainClass() {
        return this.getStringAttribute('main_class');
    }
    set mainClass(value) {
        this._mainClass = value;
    }
    resetMainClass() {
        this._mainClass = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mainClassInput() {
        return this._mainClass;
    }
    get mainJarFileUri() {
        return this.getStringAttribute('main_jar_file_uri');
    }
    set mainJarFileUri(value) {
        this._mainJarFileUri = value;
    }
    resetMainJarFileUri() {
        this._mainJarFileUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mainJarFileUriInput() {
        return this._mainJarFileUri;
    }
    get properties() {
        return this.getStringMapAttribute('properties');
    }
    set properties(value) {
        this._properties = value;
    }
    resetProperties() {
        this._properties = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get propertiesInput() {
        return this._properties;
    }
    get loggingConfig() {
        return this._loggingConfig;
    }
    putLoggingConfig(value) {
        this._loggingConfig.internalValue = value;
    }
    resetLoggingConfig() {
        this._loggingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loggingConfigInput() {
        return this._loggingConfig.internalValue;
    }
}
exports.DataprocJobHadoopConfigOutputReference = DataprocJobHadoopConfigOutputReference;
_d = JSII_RTTI_SYMBOL_1;
DataprocJobHadoopConfigOutputReference[_d] = { fqn: "@cdktf/provider-google.dataprocJob.DataprocJobHadoopConfigOutputReference", version: "14.13.1" };
function dataprocJobHiveConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        continue_on_failure: cdktf.booleanToTerraform(struct.continueOnFailure),
        jar_file_uris: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.jarFileUris),
        properties: cdktf.hashMapper(cdktf.stringToTerraform)(struct.properties),
        query_file_uri: cdktf.stringToTerraform(struct.queryFileUri),
        query_list: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.queryList),
        script_variables: cdktf.hashMapper(cdktf.stringToTerraform)(struct.scriptVariables),
    };
}
exports.dataprocJobHiveConfigToTerraform = dataprocJobHiveConfigToTerraform;
function dataprocJobHiveConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        continue_on_failure: {
            value: cdktf.booleanToHclTerraform(struct.continueOnFailure),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        jar_file_uris: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.jarFileUris),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        properties: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.properties),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        query_file_uri: {
            value: cdktf.stringToHclTerraform(struct.queryFileUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        query_list: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.queryList),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        script_variables: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.scriptVariables),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocJobHiveConfigToHclTerraform = dataprocJobHiveConfigToHclTerraform;
class DataprocJobHiveConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._continueOnFailure !== undefined) {
            hasAnyValues = true;
            internalValueResult.continueOnFailure = this._continueOnFailure;
        }
        if (this._jarFileUris !== undefined) {
            hasAnyValues = true;
            internalValueResult.jarFileUris = this._jarFileUris;
        }
        if (this._properties !== undefined) {
            hasAnyValues = true;
            internalValueResult.properties = this._properties;
        }
        if (this._queryFileUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.queryFileUri = this._queryFileUri;
        }
        if (this._queryList !== undefined) {
            hasAnyValues = true;
            internalValueResult.queryList = this._queryList;
        }
        if (this._scriptVariables !== undefined) {
            hasAnyValues = true;
            internalValueResult.scriptVariables = this._scriptVariables;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._continueOnFailure = undefined;
            this._jarFileUris = undefined;
            this._properties = undefined;
            this._queryFileUri = undefined;
            this._queryList = undefined;
            this._scriptVariables = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._continueOnFailure = value.continueOnFailure;
            this._jarFileUris = value.jarFileUris;
            this._properties = value.properties;
            this._queryFileUri = value.queryFileUri;
            this._queryList = value.queryList;
            this._scriptVariables = value.scriptVariables;
        }
    }
    get continueOnFailure() {
        return this.getBooleanAttribute('continue_on_failure');
    }
    set continueOnFailure(value) {
        this._continueOnFailure = value;
    }
    resetContinueOnFailure() {
        this._continueOnFailure = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get continueOnFailureInput() {
        return this._continueOnFailure;
    }
    get jarFileUris() {
        return this.getListAttribute('jar_file_uris');
    }
    set jarFileUris(value) {
        this._jarFileUris = value;
    }
    resetJarFileUris() {
        this._jarFileUris = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jarFileUrisInput() {
        return this._jarFileUris;
    }
    get properties() {
        return this.getStringMapAttribute('properties');
    }
    set properties(value) {
        this._properties = value;
    }
    resetProperties() {
        this._properties = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get propertiesInput() {
        return this._properties;
    }
    get queryFileUri() {
        return this.getStringAttribute('query_file_uri');
    }
    set queryFileUri(value) {
        this._queryFileUri = value;
    }
    resetQueryFileUri() {
        this._queryFileUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get queryFileUriInput() {
        return this._queryFileUri;
    }
    get queryList() {
        return this.getListAttribute('query_list');
    }
    set queryList(value) {
        this._queryList = value;
    }
    resetQueryList() {
        this._queryList = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get queryListInput() {
        return this._queryList;
    }
    get scriptVariables() {
        return this.getStringMapAttribute('script_variables');
    }
    set scriptVariables(value) {
        this._scriptVariables = value;
    }
    resetScriptVariables() {
        this._scriptVariables = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scriptVariablesInput() {
        return this._scriptVariables;
    }
}
exports.DataprocJobHiveConfigOutputReference = DataprocJobHiveConfigOutputReference;
_e = JSII_RTTI_SYMBOL_1;
DataprocJobHiveConfigOutputReference[_e] = { fqn: "@cdktf/provider-google.dataprocJob.DataprocJobHiveConfigOutputReference", version: "14.13.1" };
function dataprocJobPigConfigLoggingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        driver_log_levels: cdktf.hashMapper(cdktf.stringToTerraform)(struct.driverLogLevels),
    };
}
exports.dataprocJobPigConfigLoggingConfigToTerraform = dataprocJobPigConfigLoggingConfigToTerraform;
function dataprocJobPigConfigLoggingConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        driver_log_levels: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.driverLogLevels),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocJobPigConfigLoggingConfigToHclTerraform = dataprocJobPigConfigLoggingConfigToHclTerraform;
class DataprocJobPigConfigLoggingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._driverLogLevels !== undefined) {
            hasAnyValues = true;
            internalValueResult.driverLogLevels = this._driverLogLevels;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._driverLogLevels = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._driverLogLevels = value.driverLogLevels;
        }
    }
    get driverLogLevels() {
        return this.getStringMapAttribute('driver_log_levels');
    }
    set driverLogLevels(value) {
        this._driverLogLevels = value;
    }
    // Temporarily expose input value. Use with caution.
    get driverLogLevelsInput() {
        return this._driverLogLevels;
    }
}
exports.DataprocJobPigConfigLoggingConfigOutputReference = DataprocJobPigConfigLoggingConfigOutputReference;
_f = JSII_RTTI_SYMBOL_1;
DataprocJobPigConfigLoggingConfigOutputReference[_f] = { fqn: "@cdktf/provider-google.dataprocJob.DataprocJobPigConfigLoggingConfigOutputReference", version: "14.13.1" };
function dataprocJobPigConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        continue_on_failure: cdktf.booleanToTerraform(struct.continueOnFailure),
        jar_file_uris: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.jarFileUris),
        properties: cdktf.hashMapper(cdktf.stringToTerraform)(struct.properties),
        query_file_uri: cdktf.stringToTerraform(struct.queryFileUri),
        query_list: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.queryList),
        script_variables: cdktf.hashMapper(cdktf.stringToTerraform)(struct.scriptVariables),
        logging_config: dataprocJobPigConfigLoggingConfigToTerraform(struct.loggingConfig),
    };
}
exports.dataprocJobPigConfigToTerraform = dataprocJobPigConfigToTerraform;
function dataprocJobPigConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        continue_on_failure: {
            value: cdktf.booleanToHclTerraform(struct.continueOnFailure),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        jar_file_uris: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.jarFileUris),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        properties: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.properties),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        query_file_uri: {
            value: cdktf.stringToHclTerraform(struct.queryFileUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        query_list: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.queryList),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        script_variables: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.scriptVariables),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        logging_config: {
            value: dataprocJobPigConfigLoggingConfigToHclTerraform(struct.loggingConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocJobPigConfigLoggingConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocJobPigConfigToHclTerraform = dataprocJobPigConfigToHclTerraform;
class DataprocJobPigConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // logging_config - computed: false, optional: true, required: false
        this._loggingConfig = new DataprocJobPigConfigLoggingConfigOutputReference(this, "logging_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._continueOnFailure !== undefined) {
            hasAnyValues = true;
            internalValueResult.continueOnFailure = this._continueOnFailure;
        }
        if (this._jarFileUris !== undefined) {
            hasAnyValues = true;
            internalValueResult.jarFileUris = this._jarFileUris;
        }
        if (this._properties !== undefined) {
            hasAnyValues = true;
            internalValueResult.properties = this._properties;
        }
        if (this._queryFileUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.queryFileUri = this._queryFileUri;
        }
        if (this._queryList !== undefined) {
            hasAnyValues = true;
            internalValueResult.queryList = this._queryList;
        }
        if (this._scriptVariables !== undefined) {
            hasAnyValues = true;
            internalValueResult.scriptVariables = this._scriptVariables;
        }
        if (this._loggingConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.loggingConfig = this._loggingConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._continueOnFailure = undefined;
            this._jarFileUris = undefined;
            this._properties = undefined;
            this._queryFileUri = undefined;
            this._queryList = undefined;
            this._scriptVariables = undefined;
            this._loggingConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._continueOnFailure = value.continueOnFailure;
            this._jarFileUris = value.jarFileUris;
            this._properties = value.properties;
            this._queryFileUri = value.queryFileUri;
            this._queryList = value.queryList;
            this._scriptVariables = value.scriptVariables;
            this._loggingConfig.internalValue = value.loggingConfig;
        }
    }
    get continueOnFailure() {
        return this.getBooleanAttribute('continue_on_failure');
    }
    set continueOnFailure(value) {
        this._continueOnFailure = value;
    }
    resetContinueOnFailure() {
        this._continueOnFailure = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get continueOnFailureInput() {
        return this._continueOnFailure;
    }
    get jarFileUris() {
        return this.getListAttribute('jar_file_uris');
    }
    set jarFileUris(value) {
        this._jarFileUris = value;
    }
    resetJarFileUris() {
        this._jarFileUris = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jarFileUrisInput() {
        return this._jarFileUris;
    }
    get properties() {
        return this.getStringMapAttribute('properties');
    }
    set properties(value) {
        this._properties = value;
    }
    resetProperties() {
        this._properties = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get propertiesInput() {
        return this._properties;
    }
    get queryFileUri() {
        return this.getStringAttribute('query_file_uri');
    }
    set queryFileUri(value) {
        this._queryFileUri = value;
    }
    resetQueryFileUri() {
        this._queryFileUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get queryFileUriInput() {
        return this._queryFileUri;
    }
    get queryList() {
        return this.getListAttribute('query_list');
    }
    set queryList(value) {
        this._queryList = value;
    }
    resetQueryList() {
        this._queryList = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get queryListInput() {
        return this._queryList;
    }
    get scriptVariables() {
        return this.getStringMapAttribute('script_variables');
    }
    set scriptVariables(value) {
        this._scriptVariables = value;
    }
    resetScriptVariables() {
        this._scriptVariables = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scriptVariablesInput() {
        return this._scriptVariables;
    }
    get loggingConfig() {
        return this._loggingConfig;
    }
    putLoggingConfig(value) {
        this._loggingConfig.internalValue = value;
    }
    resetLoggingConfig() {
        this._loggingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loggingConfigInput() {
        return this._loggingConfig.internalValue;
    }
}
exports.DataprocJobPigConfigOutputReference = DataprocJobPigConfigOutputReference;
_g = JSII_RTTI_SYMBOL_1;
DataprocJobPigConfigOutputReference[_g] = { fqn: "@cdktf/provider-google.dataprocJob.DataprocJobPigConfigOutputReference", version: "14.13.1" };
function dataprocJobPlacementToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cluster_name: cdktf.stringToTerraform(struct.clusterName),
    };
}
exports.dataprocJobPlacementToTerraform = dataprocJobPlacementToTerraform;
function dataprocJobPlacementToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cluster_name: {
            value: cdktf.stringToHclTerraform(struct.clusterName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocJobPlacementToHclTerraform = dataprocJobPlacementToHclTerraform;
class DataprocJobPlacementOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._clusterName !== undefined) {
            hasAnyValues = true;
            internalValueResult.clusterName = this._clusterName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._clusterName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._clusterName = value.clusterName;
        }
    }
    get clusterName() {
        return this.getStringAttribute('cluster_name');
    }
    set clusterName(value) {
        this._clusterName = value;
    }
    // Temporarily expose input value. Use with caution.
    get clusterNameInput() {
        return this._clusterName;
    }
    // cluster_uuid - computed: true, optional: false, required: false
    get clusterUuid() {
        return this.getStringAttribute('cluster_uuid');
    }
}
exports.DataprocJobPlacementOutputReference = DataprocJobPlacementOutputReference;
_h = JSII_RTTI_SYMBOL_1;
DataprocJobPlacementOutputReference[_h] = { fqn: "@cdktf/provider-google.dataprocJob.DataprocJobPlacementOutputReference", version: "14.13.1" };
function dataprocJobPrestoConfigLoggingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        driver_log_levels: cdktf.hashMapper(cdktf.stringToTerraform)(struct.driverLogLevels),
    };
}
exports.dataprocJobPrestoConfigLoggingConfigToTerraform = dataprocJobPrestoConfigLoggingConfigToTerraform;
function dataprocJobPrestoConfigLoggingConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        driver_log_levels: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.driverLogLevels),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocJobPrestoConfigLoggingConfigToHclTerraform = dataprocJobPrestoConfigLoggingConfigToHclTerraform;
class DataprocJobPrestoConfigLoggingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._driverLogLevels !== undefined) {
            hasAnyValues = true;
            internalValueResult.driverLogLevels = this._driverLogLevels;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._driverLogLevels = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._driverLogLevels = value.driverLogLevels;
        }
    }
    get driverLogLevels() {
        return this.getStringMapAttribute('driver_log_levels');
    }
    set driverLogLevels(value) {
        this._driverLogLevels = value;
    }
    // Temporarily expose input value. Use with caution.
    get driverLogLevelsInput() {
        return this._driverLogLevels;
    }
}
exports.DataprocJobPrestoConfigLoggingConfigOutputReference = DataprocJobPrestoConfigLoggingConfigOutputReference;
_j = JSII_RTTI_SYMBOL_1;
DataprocJobPrestoConfigLoggingConfigOutputReference[_j] = { fqn: "@cdktf/provider-google.dataprocJob.DataprocJobPrestoConfigLoggingConfigOutputReference", version: "14.13.1" };
function dataprocJobPrestoConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        client_tags: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.clientTags),
        continue_on_failure: cdktf.booleanToTerraform(struct.continueOnFailure),
        output_format: cdktf.stringToTerraform(struct.outputFormat),
        properties: cdktf.hashMapper(cdktf.stringToTerraform)(struct.properties),
        query_file_uri: cdktf.stringToTerraform(struct.queryFileUri),
        query_list: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.queryList),
        logging_config: dataprocJobPrestoConfigLoggingConfigToTerraform(struct.loggingConfig),
    };
}
exports.dataprocJobPrestoConfigToTerraform = dataprocJobPrestoConfigToTerraform;
function dataprocJobPrestoConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        client_tags: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.clientTags),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        continue_on_failure: {
            value: cdktf.booleanToHclTerraform(struct.continueOnFailure),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        output_format: {
            value: cdktf.stringToHclTerraform(struct.outputFormat),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        properties: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.properties),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        query_file_uri: {
            value: cdktf.stringToHclTerraform(struct.queryFileUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        query_list: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.queryList),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        logging_config: {
            value: dataprocJobPrestoConfigLoggingConfigToHclTerraform(struct.loggingConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocJobPrestoConfigLoggingConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocJobPrestoConfigToHclTerraform = dataprocJobPrestoConfigToHclTerraform;
class DataprocJobPrestoConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // logging_config - computed: false, optional: true, required: false
        this._loggingConfig = new DataprocJobPrestoConfigLoggingConfigOutputReference(this, "logging_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._clientTags !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientTags = this._clientTags;
        }
        if (this._continueOnFailure !== undefined) {
            hasAnyValues = true;
            internalValueResult.continueOnFailure = this._continueOnFailure;
        }
        if (this._outputFormat !== undefined) {
            hasAnyValues = true;
            internalValueResult.outputFormat = this._outputFormat;
        }
        if (this._properties !== undefined) {
            hasAnyValues = true;
            internalValueResult.properties = this._properties;
        }
        if (this._queryFileUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.queryFileUri = this._queryFileUri;
        }
        if (this._queryList !== undefined) {
            hasAnyValues = true;
            internalValueResult.queryList = this._queryList;
        }
        if (this._loggingConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.loggingConfig = this._loggingConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._clientTags = undefined;
            this._continueOnFailure = undefined;
            this._outputFormat = undefined;
            this._properties = undefined;
            this._queryFileUri = undefined;
            this._queryList = undefined;
            this._loggingConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._clientTags = value.clientTags;
            this._continueOnFailure = value.continueOnFailure;
            this._outputFormat = value.outputFormat;
            this._properties = value.properties;
            this._queryFileUri = value.queryFileUri;
            this._queryList = value.queryList;
            this._loggingConfig.internalValue = value.loggingConfig;
        }
    }
    get clientTags() {
        return this.getListAttribute('client_tags');
    }
    set clientTags(value) {
        this._clientTags = value;
    }
    resetClientTags() {
        this._clientTags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientTagsInput() {
        return this._clientTags;
    }
    get continueOnFailure() {
        return this.getBooleanAttribute('continue_on_failure');
    }
    set continueOnFailure(value) {
        this._continueOnFailure = value;
    }
    resetContinueOnFailure() {
        this._continueOnFailure = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get continueOnFailureInput() {
        return this._continueOnFailure;
    }
    get outputFormat() {
        return this.getStringAttribute('output_format');
    }
    set outputFormat(value) {
        this._outputFormat = value;
    }
    resetOutputFormat() {
        this._outputFormat = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get outputFormatInput() {
        return this._outputFormat;
    }
    get properties() {
        return this.getStringMapAttribute('properties');
    }
    set properties(value) {
        this._properties = value;
    }
    resetProperties() {
        this._properties = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get propertiesInput() {
        return this._properties;
    }
    get queryFileUri() {
        return this.getStringAttribute('query_file_uri');
    }
    set queryFileUri(value) {
        this._queryFileUri = value;
    }
    resetQueryFileUri() {
        this._queryFileUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get queryFileUriInput() {
        return this._queryFileUri;
    }
    get queryList() {
        return this.getListAttribute('query_list');
    }
    set queryList(value) {
        this._queryList = value;
    }
    resetQueryList() {
        this._queryList = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get queryListInput() {
        return this._queryList;
    }
    get loggingConfig() {
        return this._loggingConfig;
    }
    putLoggingConfig(value) {
        this._loggingConfig.internalValue = value;
    }
    resetLoggingConfig() {
        this._loggingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loggingConfigInput() {
        return this._loggingConfig.internalValue;
    }
}
exports.DataprocJobPrestoConfigOutputReference = DataprocJobPrestoConfigOutputReference;
_k = JSII_RTTI_SYMBOL_1;
DataprocJobPrestoConfigOutputReference[_k] = { fqn: "@cdktf/provider-google.dataprocJob.DataprocJobPrestoConfigOutputReference", version: "14.13.1" };
function dataprocJobPysparkConfigLoggingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        driver_log_levels: cdktf.hashMapper(cdktf.stringToTerraform)(struct.driverLogLevels),
    };
}
exports.dataprocJobPysparkConfigLoggingConfigToTerraform = dataprocJobPysparkConfigLoggingConfigToTerraform;
function dataprocJobPysparkConfigLoggingConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        driver_log_levels: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.driverLogLevels),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocJobPysparkConfigLoggingConfigToHclTerraform = dataprocJobPysparkConfigLoggingConfigToHclTerraform;
class DataprocJobPysparkConfigLoggingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._driverLogLevels !== undefined) {
            hasAnyValues = true;
            internalValueResult.driverLogLevels = this._driverLogLevels;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._driverLogLevels = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._driverLogLevels = value.driverLogLevels;
        }
    }
    get driverLogLevels() {
        return this.getStringMapAttribute('driver_log_levels');
    }
    set driverLogLevels(value) {
        this._driverLogLevels = value;
    }
    // Temporarily expose input value. Use with caution.
    get driverLogLevelsInput() {
        return this._driverLogLevels;
    }
}
exports.DataprocJobPysparkConfigLoggingConfigOutputReference = DataprocJobPysparkConfigLoggingConfigOutputReference;
_l = JSII_RTTI_SYMBOL_1;
DataprocJobPysparkConfigLoggingConfigOutputReference[_l] = { fqn: "@cdktf/provider-google.dataprocJob.DataprocJobPysparkConfigLoggingConfigOutputReference", version: "14.13.1" };
function dataprocJobPysparkConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        archive_uris: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.archiveUris),
        args: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.args),
        file_uris: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.fileUris),
        jar_file_uris: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.jarFileUris),
        main_python_file_uri: cdktf.stringToTerraform(struct.mainPythonFileUri),
        properties: cdktf.hashMapper(cdktf.stringToTerraform)(struct.properties),
        python_file_uris: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.pythonFileUris),
        logging_config: dataprocJobPysparkConfigLoggingConfigToTerraform(struct.loggingConfig),
    };
}
exports.dataprocJobPysparkConfigToTerraform = dataprocJobPysparkConfigToTerraform;
function dataprocJobPysparkConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        archive_uris: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.archiveUris),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        args: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.args),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        file_uris: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.fileUris),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        jar_file_uris: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.jarFileUris),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        main_python_file_uri: {
            value: cdktf.stringToHclTerraform(struct.mainPythonFileUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        properties: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.properties),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        python_file_uris: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.pythonFileUris),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        logging_config: {
            value: dataprocJobPysparkConfigLoggingConfigToHclTerraform(struct.loggingConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocJobPysparkConfigLoggingConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocJobPysparkConfigToHclTerraform = dataprocJobPysparkConfigToHclTerraform;
class DataprocJobPysparkConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // logging_config - computed: false, optional: true, required: false
        this._loggingConfig = new DataprocJobPysparkConfigLoggingConfigOutputReference(this, "logging_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._archiveUris !== undefined) {
            hasAnyValues = true;
            internalValueResult.archiveUris = this._archiveUris;
        }
        if (this._args !== undefined) {
            hasAnyValues = true;
            internalValueResult.args = this._args;
        }
        if (this._fileUris !== undefined) {
            hasAnyValues = true;
            internalValueResult.fileUris = this._fileUris;
        }
        if (this._jarFileUris !== undefined) {
            hasAnyValues = true;
            internalValueResult.jarFileUris = this._jarFileUris;
        }
        if (this._mainPythonFileUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.mainPythonFileUri = this._mainPythonFileUri;
        }
        if (this._properties !== undefined) {
            hasAnyValues = true;
            internalValueResult.properties = this._properties;
        }
        if (this._pythonFileUris !== undefined) {
            hasAnyValues = true;
            internalValueResult.pythonFileUris = this._pythonFileUris;
        }
        if (this._loggingConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.loggingConfig = this._loggingConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._archiveUris = undefined;
            this._args = undefined;
            this._fileUris = undefined;
            this._jarFileUris = undefined;
            this._mainPythonFileUri = undefined;
            this._properties = undefined;
            this._pythonFileUris = undefined;
            this._loggingConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._archiveUris = value.archiveUris;
            this._args = value.args;
            this._fileUris = value.fileUris;
            this._jarFileUris = value.jarFileUris;
            this._mainPythonFileUri = value.mainPythonFileUri;
            this._properties = value.properties;
            this._pythonFileUris = value.pythonFileUris;
            this._loggingConfig.internalValue = value.loggingConfig;
        }
    }
    get archiveUris() {
        return this.getListAttribute('archive_uris');
    }
    set archiveUris(value) {
        this._archiveUris = value;
    }
    resetArchiveUris() {
        this._archiveUris = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get archiveUrisInput() {
        return this._archiveUris;
    }
    get args() {
        return this.getListAttribute('args');
    }
    set args(value) {
        this._args = value;
    }
    resetArgs() {
        this._args = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get argsInput() {
        return this._args;
    }
    get fileUris() {
        return this.getListAttribute('file_uris');
    }
    set fileUris(value) {
        this._fileUris = value;
    }
    resetFileUris() {
        this._fileUris = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fileUrisInput() {
        return this._fileUris;
    }
    get jarFileUris() {
        return this.getListAttribute('jar_file_uris');
    }
    set jarFileUris(value) {
        this._jarFileUris = value;
    }
    resetJarFileUris() {
        this._jarFileUris = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jarFileUrisInput() {
        return this._jarFileUris;
    }
    get mainPythonFileUri() {
        return this.getStringAttribute('main_python_file_uri');
    }
    set mainPythonFileUri(value) {
        this._mainPythonFileUri = value;
    }
    // Temporarily expose input value. Use with caution.
    get mainPythonFileUriInput() {
        return this._mainPythonFileUri;
    }
    get properties() {
        return this.getStringMapAttribute('properties');
    }
    set properties(value) {
        this._properties = value;
    }
    resetProperties() {
        this._properties = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get propertiesInput() {
        return this._properties;
    }
    get pythonFileUris() {
        return this.getListAttribute('python_file_uris');
    }
    set pythonFileUris(value) {
        this._pythonFileUris = value;
    }
    resetPythonFileUris() {
        this._pythonFileUris = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pythonFileUrisInput() {
        return this._pythonFileUris;
    }
    get loggingConfig() {
        return this._loggingConfig;
    }
    putLoggingConfig(value) {
        this._loggingConfig.internalValue = value;
    }
    resetLoggingConfig() {
        this._loggingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loggingConfigInput() {
        return this._loggingConfig.internalValue;
    }
}
exports.DataprocJobPysparkConfigOutputReference = DataprocJobPysparkConfigOutputReference;
_m = JSII_RTTI_SYMBOL_1;
DataprocJobPysparkConfigOutputReference[_m] = { fqn: "@cdktf/provider-google.dataprocJob.DataprocJobPysparkConfigOutputReference", version: "14.13.1" };
function dataprocJobReferenceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        job_id: cdktf.stringToTerraform(struct.jobId),
    };
}
exports.dataprocJobReferenceToTerraform = dataprocJobReferenceToTerraform;
function dataprocJobReferenceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        job_id: {
            value: cdktf.stringToHclTerraform(struct.jobId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocJobReferenceToHclTerraform = dataprocJobReferenceToHclTerraform;
class DataprocJobReferenceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._jobId !== undefined) {
            hasAnyValues = true;
            internalValueResult.jobId = this._jobId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._jobId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._jobId = value.jobId;
        }
    }
    get jobId() {
        return this.getStringAttribute('job_id');
    }
    set jobId(value) {
        this._jobId = value;
    }
    resetJobId() {
        this._jobId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jobIdInput() {
        return this._jobId;
    }
}
exports.DataprocJobReferenceOutputReference = DataprocJobReferenceOutputReference;
_o = JSII_RTTI_SYMBOL_1;
DataprocJobReferenceOutputReference[_o] = { fqn: "@cdktf/provider-google.dataprocJob.DataprocJobReferenceOutputReference", version: "14.13.1" };
function dataprocJobSchedulingToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max_failures_per_hour: cdktf.numberToTerraform(struct.maxFailuresPerHour),
        max_failures_total: cdktf.numberToTerraform(struct.maxFailuresTotal),
    };
}
exports.dataprocJobSchedulingToTerraform = dataprocJobSchedulingToTerraform;
function dataprocJobSchedulingToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        max_failures_per_hour: {
            value: cdktf.numberToHclTerraform(struct.maxFailuresPerHour),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        max_failures_total: {
            value: cdktf.numberToHclTerraform(struct.maxFailuresTotal),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocJobSchedulingToHclTerraform = dataprocJobSchedulingToHclTerraform;
class DataprocJobSchedulingOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._maxFailuresPerHour !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxFailuresPerHour = this._maxFailuresPerHour;
        }
        if (this._maxFailuresTotal !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxFailuresTotal = this._maxFailuresTotal;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._maxFailuresPerHour = undefined;
            this._maxFailuresTotal = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._maxFailuresPerHour = value.maxFailuresPerHour;
            this._maxFailuresTotal = value.maxFailuresTotal;
        }
    }
    get maxFailuresPerHour() {
        return this.getNumberAttribute('max_failures_per_hour');
    }
    set maxFailuresPerHour(value) {
        this._maxFailuresPerHour = value;
    }
    // Temporarily expose input value. Use with caution.
    get maxFailuresPerHourInput() {
        return this._maxFailuresPerHour;
    }
    get maxFailuresTotal() {
        return this.getNumberAttribute('max_failures_total');
    }
    set maxFailuresTotal(value) {
        this._maxFailuresTotal = value;
    }
    // Temporarily expose input value. Use with caution.
    get maxFailuresTotalInput() {
        return this._maxFailuresTotal;
    }
}
exports.DataprocJobSchedulingOutputReference = DataprocJobSchedulingOutputReference;
_p = JSII_RTTI_SYMBOL_1;
DataprocJobSchedulingOutputReference[_p] = { fqn: "@cdktf/provider-google.dataprocJob.DataprocJobSchedulingOutputReference", version: "14.13.1" };
function dataprocJobSparkConfigLoggingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        driver_log_levels: cdktf.hashMapper(cdktf.stringToTerraform)(struct.driverLogLevels),
    };
}
exports.dataprocJobSparkConfigLoggingConfigToTerraform = dataprocJobSparkConfigLoggingConfigToTerraform;
function dataprocJobSparkConfigLoggingConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        driver_log_levels: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.driverLogLevels),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocJobSparkConfigLoggingConfigToHclTerraform = dataprocJobSparkConfigLoggingConfigToHclTerraform;
class DataprocJobSparkConfigLoggingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._driverLogLevels !== undefined) {
            hasAnyValues = true;
            internalValueResult.driverLogLevels = this._driverLogLevels;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._driverLogLevels = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._driverLogLevels = value.driverLogLevels;
        }
    }
    get driverLogLevels() {
        return this.getStringMapAttribute('driver_log_levels');
    }
    set driverLogLevels(value) {
        this._driverLogLevels = value;
    }
    // Temporarily expose input value. Use with caution.
    get driverLogLevelsInput() {
        return this._driverLogLevels;
    }
}
exports.DataprocJobSparkConfigLoggingConfigOutputReference = DataprocJobSparkConfigLoggingConfigOutputReference;
_q = JSII_RTTI_SYMBOL_1;
DataprocJobSparkConfigLoggingConfigOutputReference[_q] = { fqn: "@cdktf/provider-google.dataprocJob.DataprocJobSparkConfigLoggingConfigOutputReference", version: "14.13.1" };
function dataprocJobSparkConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        archive_uris: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.archiveUris),
        args: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.args),
        file_uris: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.fileUris),
        jar_file_uris: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.jarFileUris),
        main_class: cdktf.stringToTerraform(struct.mainClass),
        main_jar_file_uri: cdktf.stringToTerraform(struct.mainJarFileUri),
        properties: cdktf.hashMapper(cdktf.stringToTerraform)(struct.properties),
        logging_config: dataprocJobSparkConfigLoggingConfigToTerraform(struct.loggingConfig),
    };
}
exports.dataprocJobSparkConfigToTerraform = dataprocJobSparkConfigToTerraform;
function dataprocJobSparkConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        archive_uris: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.archiveUris),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        args: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.args),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        file_uris: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.fileUris),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        jar_file_uris: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.jarFileUris),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        main_class: {
            value: cdktf.stringToHclTerraform(struct.mainClass),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        main_jar_file_uri: {
            value: cdktf.stringToHclTerraform(struct.mainJarFileUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        properties: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.properties),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        logging_config: {
            value: dataprocJobSparkConfigLoggingConfigToHclTerraform(struct.loggingConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocJobSparkConfigLoggingConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocJobSparkConfigToHclTerraform = dataprocJobSparkConfigToHclTerraform;
class DataprocJobSparkConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // logging_config - computed: false, optional: true, required: false
        this._loggingConfig = new DataprocJobSparkConfigLoggingConfigOutputReference(this, "logging_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._archiveUris !== undefined) {
            hasAnyValues = true;
            internalValueResult.archiveUris = this._archiveUris;
        }
        if (this._args !== undefined) {
            hasAnyValues = true;
            internalValueResult.args = this._args;
        }
        if (this._fileUris !== undefined) {
            hasAnyValues = true;
            internalValueResult.fileUris = this._fileUris;
        }
        if (this._jarFileUris !== undefined) {
            hasAnyValues = true;
            internalValueResult.jarFileUris = this._jarFileUris;
        }
        if (this._mainClass !== undefined) {
            hasAnyValues = true;
            internalValueResult.mainClass = this._mainClass;
        }
        if (this._mainJarFileUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.mainJarFileUri = this._mainJarFileUri;
        }
        if (this._properties !== undefined) {
            hasAnyValues = true;
            internalValueResult.properties = this._properties;
        }
        if (this._loggingConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.loggingConfig = this._loggingConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._archiveUris = undefined;
            this._args = undefined;
            this._fileUris = undefined;
            this._jarFileUris = undefined;
            this._mainClass = undefined;
            this._mainJarFileUri = undefined;
            this._properties = undefined;
            this._loggingConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._archiveUris = value.archiveUris;
            this._args = value.args;
            this._fileUris = value.fileUris;
            this._jarFileUris = value.jarFileUris;
            this._mainClass = value.mainClass;
            this._mainJarFileUri = value.mainJarFileUri;
            this._properties = value.properties;
            this._loggingConfig.internalValue = value.loggingConfig;
        }
    }
    get archiveUris() {
        return this.getListAttribute('archive_uris');
    }
    set archiveUris(value) {
        this._archiveUris = value;
    }
    resetArchiveUris() {
        this._archiveUris = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get archiveUrisInput() {
        return this._archiveUris;
    }
    get args() {
        return this.getListAttribute('args');
    }
    set args(value) {
        this._args = value;
    }
    resetArgs() {
        this._args = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get argsInput() {
        return this._args;
    }
    get fileUris() {
        return this.getListAttribute('file_uris');
    }
    set fileUris(value) {
        this._fileUris = value;
    }
    resetFileUris() {
        this._fileUris = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fileUrisInput() {
        return this._fileUris;
    }
    get jarFileUris() {
        return this.getListAttribute('jar_file_uris');
    }
    set jarFileUris(value) {
        this._jarFileUris = value;
    }
    resetJarFileUris() {
        this._jarFileUris = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jarFileUrisInput() {
        return this._jarFileUris;
    }
    get mainClass() {
        return this.getStringAttribute('main_class');
    }
    set mainClass(value) {
        this._mainClass = value;
    }
    resetMainClass() {
        this._mainClass = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mainClassInput() {
        return this._mainClass;
    }
    get mainJarFileUri() {
        return this.getStringAttribute('main_jar_file_uri');
    }
    set mainJarFileUri(value) {
        this._mainJarFileUri = value;
    }
    resetMainJarFileUri() {
        this._mainJarFileUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mainJarFileUriInput() {
        return this._mainJarFileUri;
    }
    get properties() {
        return this.getStringMapAttribute('properties');
    }
    set properties(value) {
        this._properties = value;
    }
    resetProperties() {
        this._properties = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get propertiesInput() {
        return this._properties;
    }
    get loggingConfig() {
        return this._loggingConfig;
    }
    putLoggingConfig(value) {
        this._loggingConfig.internalValue = value;
    }
    resetLoggingConfig() {
        this._loggingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loggingConfigInput() {
        return this._loggingConfig.internalValue;
    }
}
exports.DataprocJobSparkConfigOutputReference = DataprocJobSparkConfigOutputReference;
_r = JSII_RTTI_SYMBOL_1;
DataprocJobSparkConfigOutputReference[_r] = { fqn: "@cdktf/provider-google.dataprocJob.DataprocJobSparkConfigOutputReference", version: "14.13.1" };
function dataprocJobSparksqlConfigLoggingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        driver_log_levels: cdktf.hashMapper(cdktf.stringToTerraform)(struct.driverLogLevels),
    };
}
exports.dataprocJobSparksqlConfigLoggingConfigToTerraform = dataprocJobSparksqlConfigLoggingConfigToTerraform;
function dataprocJobSparksqlConfigLoggingConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        driver_log_levels: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.driverLogLevels),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocJobSparksqlConfigLoggingConfigToHclTerraform = dataprocJobSparksqlConfigLoggingConfigToHclTerraform;
class DataprocJobSparksqlConfigLoggingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._driverLogLevels !== undefined) {
            hasAnyValues = true;
            internalValueResult.driverLogLevels = this._driverLogLevels;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._driverLogLevels = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._driverLogLevels = value.driverLogLevels;
        }
    }
    get driverLogLevels() {
        return this.getStringMapAttribute('driver_log_levels');
    }
    set driverLogLevels(value) {
        this._driverLogLevels = value;
    }
    // Temporarily expose input value. Use with caution.
    get driverLogLevelsInput() {
        return this._driverLogLevels;
    }
}
exports.DataprocJobSparksqlConfigLoggingConfigOutputReference = DataprocJobSparksqlConfigLoggingConfigOutputReference;
_s = JSII_RTTI_SYMBOL_1;
DataprocJobSparksqlConfigLoggingConfigOutputReference[_s] = { fqn: "@cdktf/provider-google.dataprocJob.DataprocJobSparksqlConfigLoggingConfigOutputReference", version: "14.13.1" };
function dataprocJobSparksqlConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        jar_file_uris: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.jarFileUris),
        properties: cdktf.hashMapper(cdktf.stringToTerraform)(struct.properties),
        query_file_uri: cdktf.stringToTerraform(struct.queryFileUri),
        query_list: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.queryList),
        script_variables: cdktf.hashMapper(cdktf.stringToTerraform)(struct.scriptVariables),
        logging_config: dataprocJobSparksqlConfigLoggingConfigToTerraform(struct.loggingConfig),
    };
}
exports.dataprocJobSparksqlConfigToTerraform = dataprocJobSparksqlConfigToTerraform;
function dataprocJobSparksqlConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        jar_file_uris: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.jarFileUris),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        properties: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.properties),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        query_file_uri: {
            value: cdktf.stringToHclTerraform(struct.queryFileUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        query_list: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.queryList),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        script_variables: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.scriptVariables),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        logging_config: {
            value: dataprocJobSparksqlConfigLoggingConfigToHclTerraform(struct.loggingConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocJobSparksqlConfigLoggingConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocJobSparksqlConfigToHclTerraform = dataprocJobSparksqlConfigToHclTerraform;
class DataprocJobSparksqlConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // logging_config - computed: false, optional: true, required: false
        this._loggingConfig = new DataprocJobSparksqlConfigLoggingConfigOutputReference(this, "logging_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._jarFileUris !== undefined) {
            hasAnyValues = true;
            internalValueResult.jarFileUris = this._jarFileUris;
        }
        if (this._properties !== undefined) {
            hasAnyValues = true;
            internalValueResult.properties = this._properties;
        }
        if (this._queryFileUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.queryFileUri = this._queryFileUri;
        }
        if (this._queryList !== undefined) {
            hasAnyValues = true;
            internalValueResult.queryList = this._queryList;
        }
        if (this._scriptVariables !== undefined) {
            hasAnyValues = true;
            internalValueResult.scriptVariables = this._scriptVariables;
        }
        if (this._loggingConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.loggingConfig = this._loggingConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._jarFileUris = undefined;
            this._properties = undefined;
            this._queryFileUri = undefined;
            this._queryList = undefined;
            this._scriptVariables = undefined;
            this._loggingConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._jarFileUris = value.jarFileUris;
            this._properties = value.properties;
            this._queryFileUri = value.queryFileUri;
            this._queryList = value.queryList;
            this._scriptVariables = value.scriptVariables;
            this._loggingConfig.internalValue = value.loggingConfig;
        }
    }
    get jarFileUris() {
        return this.getListAttribute('jar_file_uris');
    }
    set jarFileUris(value) {
        this._jarFileUris = value;
    }
    resetJarFileUris() {
        this._jarFileUris = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jarFileUrisInput() {
        return this._jarFileUris;
    }
    get properties() {
        return this.getStringMapAttribute('properties');
    }
    set properties(value) {
        this._properties = value;
    }
    resetProperties() {
        this._properties = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get propertiesInput() {
        return this._properties;
    }
    get queryFileUri() {
        return this.getStringAttribute('query_file_uri');
    }
    set queryFileUri(value) {
        this._queryFileUri = value;
    }
    resetQueryFileUri() {
        this._queryFileUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get queryFileUriInput() {
        return this._queryFileUri;
    }
    get queryList() {
        return this.getListAttribute('query_list');
    }
    set queryList(value) {
        this._queryList = value;
    }
    resetQueryList() {
        this._queryList = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get queryListInput() {
        return this._queryList;
    }
    get scriptVariables() {
        return this.getStringMapAttribute('script_variables');
    }
    set scriptVariables(value) {
        this._scriptVariables = value;
    }
    resetScriptVariables() {
        this._scriptVariables = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scriptVariablesInput() {
        return this._scriptVariables;
    }
    get loggingConfig() {
        return this._loggingConfig;
    }
    putLoggingConfig(value) {
        this._loggingConfig.internalValue = value;
    }
    resetLoggingConfig() {
        this._loggingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loggingConfigInput() {
        return this._loggingConfig.internalValue;
    }
}
exports.DataprocJobSparksqlConfigOutputReference = DataprocJobSparksqlConfigOutputReference;
_t = JSII_RTTI_SYMBOL_1;
DataprocJobSparksqlConfigOutputReference[_t] = { fqn: "@cdktf/provider-google.dataprocJob.DataprocJobSparksqlConfigOutputReference", version: "14.13.1" };
function dataprocJobTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
    };
}
exports.dataprocJobTimeoutsToTerraform = dataprocJobTimeoutsToTerraform;
function dataprocJobTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocJobTimeoutsToHclTerraform = dataprocJobTimeoutsToHclTerraform;
class DataprocJobTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
}
exports.DataprocJobTimeoutsOutputReference = DataprocJobTimeoutsOutputReference;
_u = JSII_RTTI_SYMBOL_1;
DataprocJobTimeoutsOutputReference[_u] = { fqn: "@cdktf/provider-google.dataprocJob.DataprocJobTimeoutsOutputReference", version: "14.13.1" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/dataproc_job google_dataproc_job}
*/
class DataprocJob extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a DataprocJob resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the DataprocJob to import
    * @param importFromId The id of the existing DataprocJob that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/dataproc_job#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the DataprocJob to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_dataproc_job", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/dataproc_job google_dataproc_job} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataprocJobConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_dataproc_job',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // effective_labels - computed: true, optional: false, required: false
        this._effectiveLabels = new cdktf.StringMap(this, "effective_labels");
        // status - computed: true, optional: false, required: false
        this._status = new DataprocJobStatusList(this, "status", false);
        // terraform_labels - computed: true, optional: false, required: false
        this._terraformLabels = new cdktf.StringMap(this, "terraform_labels");
        // hadoop_config - computed: false, optional: true, required: false
        this._hadoopConfig = new DataprocJobHadoopConfigOutputReference(this, "hadoop_config");
        // hive_config - computed: false, optional: true, required: false
        this._hiveConfig = new DataprocJobHiveConfigOutputReference(this, "hive_config");
        // pig_config - computed: false, optional: true, required: false
        this._pigConfig = new DataprocJobPigConfigOutputReference(this, "pig_config");
        // placement - computed: false, optional: false, required: true
        this._placement = new DataprocJobPlacementOutputReference(this, "placement");
        // presto_config - computed: false, optional: true, required: false
        this._prestoConfig = new DataprocJobPrestoConfigOutputReference(this, "presto_config");
        // pyspark_config - computed: false, optional: true, required: false
        this._pysparkConfig = new DataprocJobPysparkConfigOutputReference(this, "pyspark_config");
        // reference - computed: false, optional: true, required: false
        this._reference = new DataprocJobReferenceOutputReference(this, "reference");
        // scheduling - computed: false, optional: true, required: false
        this._scheduling = new DataprocJobSchedulingOutputReference(this, "scheduling");
        // spark_config - computed: false, optional: true, required: false
        this._sparkConfig = new DataprocJobSparkConfigOutputReference(this, "spark_config");
        // sparksql_config - computed: false, optional: true, required: false
        this._sparksqlConfig = new DataprocJobSparksqlConfigOutputReference(this, "sparksql_config");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new DataprocJobTimeoutsOutputReference(this, "timeouts");
        this._forceDelete = config.forceDelete;
        this._id = config.id;
        this._labels = config.labels;
        this._project = config.project;
        this._region = config.region;
        this._hadoopConfig.internalValue = config.hadoopConfig;
        this._hiveConfig.internalValue = config.hiveConfig;
        this._pigConfig.internalValue = config.pigConfig;
        this._placement.internalValue = config.placement;
        this._prestoConfig.internalValue = config.prestoConfig;
        this._pysparkConfig.internalValue = config.pysparkConfig;
        this._reference.internalValue = config.reference;
        this._scheduling.internalValue = config.scheduling;
        this._sparkConfig.internalValue = config.sparkConfig;
        this._sparksqlConfig.internalValue = config.sparksqlConfig;
        this._timeouts.internalValue = config.timeouts;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // driver_controls_files_uri - computed: true, optional: false, required: false
    get driverControlsFilesUri() {
        return this.getStringAttribute('driver_controls_files_uri');
    }
    // driver_output_resource_uri - computed: true, optional: false, required: false
    get driverOutputResourceUri() {
        return this.getStringAttribute('driver_output_resource_uri');
    }
    get effectiveLabels() {
        return this._effectiveLabels;
    }
    get forceDelete() {
        return this.getBooleanAttribute('force_delete');
    }
    set forceDelete(value) {
        this._forceDelete = value;
    }
    resetForceDelete() {
        this._forceDelete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get forceDeleteInput() {
        return this._forceDelete;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get region() {
        return this.getStringAttribute('region');
    }
    set region(value) {
        this._region = value;
    }
    resetRegion() {
        this._region = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get regionInput() {
        return this._region;
    }
    get status() {
        return this._status;
    }
    get terraformLabels() {
        return this._terraformLabels;
    }
    get hadoopConfig() {
        return this._hadoopConfig;
    }
    putHadoopConfig(value) {
        this._hadoopConfig.internalValue = value;
    }
    resetHadoopConfig() {
        this._hadoopConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hadoopConfigInput() {
        return this._hadoopConfig.internalValue;
    }
    get hiveConfig() {
        return this._hiveConfig;
    }
    putHiveConfig(value) {
        this._hiveConfig.internalValue = value;
    }
    resetHiveConfig() {
        this._hiveConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hiveConfigInput() {
        return this._hiveConfig.internalValue;
    }
    get pigConfig() {
        return this._pigConfig;
    }
    putPigConfig(value) {
        this._pigConfig.internalValue = value;
    }
    resetPigConfig() {
        this._pigConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pigConfigInput() {
        return this._pigConfig.internalValue;
    }
    get placement() {
        return this._placement;
    }
    putPlacement(value) {
        this._placement.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get placementInput() {
        return this._placement.internalValue;
    }
    get prestoConfig() {
        return this._prestoConfig;
    }
    putPrestoConfig(value) {
        this._prestoConfig.internalValue = value;
    }
    resetPrestoConfig() {
        this._prestoConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get prestoConfigInput() {
        return this._prestoConfig.internalValue;
    }
    get pysparkConfig() {
        return this._pysparkConfig;
    }
    putPysparkConfig(value) {
        this._pysparkConfig.internalValue = value;
    }
    resetPysparkConfig() {
        this._pysparkConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pysparkConfigInput() {
        return this._pysparkConfig.internalValue;
    }
    get reference() {
        return this._reference;
    }
    putReference(value) {
        this._reference.internalValue = value;
    }
    resetReference() {
        this._reference.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get referenceInput() {
        return this._reference.internalValue;
    }
    get scheduling() {
        return this._scheduling;
    }
    putScheduling(value) {
        this._scheduling.internalValue = value;
    }
    resetScheduling() {
        this._scheduling.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get schedulingInput() {
        return this._scheduling.internalValue;
    }
    get sparkConfig() {
        return this._sparkConfig;
    }
    putSparkConfig(value) {
        this._sparkConfig.internalValue = value;
    }
    resetSparkConfig() {
        this._sparkConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sparkConfigInput() {
        return this._sparkConfig.internalValue;
    }
    get sparksqlConfig() {
        return this._sparksqlConfig;
    }
    putSparksqlConfig(value) {
        this._sparksqlConfig.internalValue = value;
    }
    resetSparksqlConfig() {
        this._sparksqlConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sparksqlConfigInput() {
        return this._sparksqlConfig.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            force_delete: cdktf.booleanToTerraform(this._forceDelete),
            id: cdktf.stringToTerraform(this._id),
            labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._labels),
            project: cdktf.stringToTerraform(this._project),
            region: cdktf.stringToTerraform(this._region),
            hadoop_config: dataprocJobHadoopConfigToTerraform(this._hadoopConfig.internalValue),
            hive_config: dataprocJobHiveConfigToTerraform(this._hiveConfig.internalValue),
            pig_config: dataprocJobPigConfigToTerraform(this._pigConfig.internalValue),
            placement: dataprocJobPlacementToTerraform(this._placement.internalValue),
            presto_config: dataprocJobPrestoConfigToTerraform(this._prestoConfig.internalValue),
            pyspark_config: dataprocJobPysparkConfigToTerraform(this._pysparkConfig.internalValue),
            reference: dataprocJobReferenceToTerraform(this._reference.internalValue),
            scheduling: dataprocJobSchedulingToTerraform(this._scheduling.internalValue),
            spark_config: dataprocJobSparkConfigToTerraform(this._sparkConfig.internalValue),
            sparksql_config: dataprocJobSparksqlConfigToTerraform(this._sparksqlConfig.internalValue),
            timeouts: dataprocJobTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            force_delete: {
                value: cdktf.booleanToHclTerraform(this._forceDelete),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            labels: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._labels),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            project: {
                value: cdktf.stringToHclTerraform(this._project),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            region: {
                value: cdktf.stringToHclTerraform(this._region),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            hadoop_config: {
                value: dataprocJobHadoopConfigToHclTerraform(this._hadoopConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "DataprocJobHadoopConfigList",
            },
            hive_config: {
                value: dataprocJobHiveConfigToHclTerraform(this._hiveConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "DataprocJobHiveConfigList",
            },
            pig_config: {
                value: dataprocJobPigConfigToHclTerraform(this._pigConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "DataprocJobPigConfigList",
            },
            placement: {
                value: dataprocJobPlacementToHclTerraform(this._placement.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "DataprocJobPlacementList",
            },
            presto_config: {
                value: dataprocJobPrestoConfigToHclTerraform(this._prestoConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "DataprocJobPrestoConfigList",
            },
            pyspark_config: {
                value: dataprocJobPysparkConfigToHclTerraform(this._pysparkConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "DataprocJobPysparkConfigList",
            },
            reference: {
                value: dataprocJobReferenceToHclTerraform(this._reference.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "DataprocJobReferenceList",
            },
            scheduling: {
                value: dataprocJobSchedulingToHclTerraform(this._scheduling.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "DataprocJobSchedulingList",
            },
            spark_config: {
                value: dataprocJobSparkConfigToHclTerraform(this._sparkConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "DataprocJobSparkConfigList",
            },
            sparksql_config: {
                value: dataprocJobSparksqlConfigToHclTerraform(this._sparksqlConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "DataprocJobSparksqlConfigList",
            },
            timeouts: {
                value: dataprocJobTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "DataprocJobTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.DataprocJob = DataprocJob;
_v = JSII_RTTI_SYMBOL_1;
DataprocJob[_v] = { fqn: "@cdktf/provider-google.dataprocJob.DataprocJob", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
DataprocJob.tfResourceType = "google_dataproc_job";
//# sourceMappingURL=data:application/json;base64,