"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiscoveryEngineDataStore = exports.DiscoveryEngineDataStoreTimeoutsOutputReference = exports.discoveryEngineDataStoreTimeoutsToHclTerraform = exports.discoveryEngineDataStoreTimeoutsToTerraform = exports.DiscoveryEngineDataStoreDocumentProcessingConfigOutputReference = exports.discoveryEngineDataStoreDocumentProcessingConfigToHclTerraform = exports.discoveryEngineDataStoreDocumentProcessingConfigToTerraform = exports.DiscoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesList = exports.DiscoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesOutputReference = exports.discoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesToHclTerraform = exports.discoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesToTerraform = exports.DiscoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesOcrParsingConfigOutputReference = exports.discoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesOcrParsingConfigToHclTerraform = exports.discoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesOcrParsingConfigToTerraform = exports.DiscoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesLayoutParsingConfigOutputReference = exports.discoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesLayoutParsingConfigToHclTerraform = exports.discoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesLayoutParsingConfigToTerraform = exports.DiscoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesDigitalParsingConfigOutputReference = exports.discoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesDigitalParsingConfigToHclTerraform = exports.discoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesDigitalParsingConfigToTerraform = exports.DiscoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigOutputReference = exports.discoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigToHclTerraform = exports.discoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigToTerraform = exports.DiscoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigOcrParsingConfigOutputReference = exports.discoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigOcrParsingConfigToHclTerraform = exports.discoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigOcrParsingConfigToTerraform = exports.DiscoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigLayoutParsingConfigOutputReference = exports.discoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigLayoutParsingConfigToHclTerraform = exports.discoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigLayoutParsingConfigToTerraform = exports.DiscoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigDigitalParsingConfigOutputReference = exports.discoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigDigitalParsingConfigToHclTerraform = exports.discoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigDigitalParsingConfigToTerraform = exports.DiscoveryEngineDataStoreDocumentProcessingConfigChunkingConfigOutputReference = exports.discoveryEngineDataStoreDocumentProcessingConfigChunkingConfigToHclTerraform = exports.discoveryEngineDataStoreDocumentProcessingConfigChunkingConfigToTerraform = exports.DiscoveryEngineDataStoreDocumentProcessingConfigChunkingConfigLayoutBasedChunkingConfigOutputReference = exports.discoveryEngineDataStoreDocumentProcessingConfigChunkingConfigLayoutBasedChunkingConfigToHclTerraform = exports.discoveryEngineDataStoreDocumentProcessingConfigChunkingConfigLayoutBasedChunkingConfigToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function discoveryEngineDataStoreDocumentProcessingConfigChunkingConfigLayoutBasedChunkingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        chunk_size: cdktf.numberToTerraform(struct.chunkSize),
        include_ancestor_headings: cdktf.booleanToTerraform(struct.includeAncestorHeadings),
    };
}
exports.discoveryEngineDataStoreDocumentProcessingConfigChunkingConfigLayoutBasedChunkingConfigToTerraform = discoveryEngineDataStoreDocumentProcessingConfigChunkingConfigLayoutBasedChunkingConfigToTerraform;
function discoveryEngineDataStoreDocumentProcessingConfigChunkingConfigLayoutBasedChunkingConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        chunk_size: {
            value: cdktf.numberToHclTerraform(struct.chunkSize),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        include_ancestor_headings: {
            value: cdktf.booleanToHclTerraform(struct.includeAncestorHeadings),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.discoveryEngineDataStoreDocumentProcessingConfigChunkingConfigLayoutBasedChunkingConfigToHclTerraform = discoveryEngineDataStoreDocumentProcessingConfigChunkingConfigLayoutBasedChunkingConfigToHclTerraform;
class DiscoveryEngineDataStoreDocumentProcessingConfigChunkingConfigLayoutBasedChunkingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._chunkSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.chunkSize = this._chunkSize;
        }
        if (this._includeAncestorHeadings !== undefined) {
            hasAnyValues = true;
            internalValueResult.includeAncestorHeadings = this._includeAncestorHeadings;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._chunkSize = undefined;
            this._includeAncestorHeadings = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._chunkSize = value.chunkSize;
            this._includeAncestorHeadings = value.includeAncestorHeadings;
        }
    }
    get chunkSize() {
        return this.getNumberAttribute('chunk_size');
    }
    set chunkSize(value) {
        this._chunkSize = value;
    }
    resetChunkSize() {
        this._chunkSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get chunkSizeInput() {
        return this._chunkSize;
    }
    get includeAncestorHeadings() {
        return this.getBooleanAttribute('include_ancestor_headings');
    }
    set includeAncestorHeadings(value) {
        this._includeAncestorHeadings = value;
    }
    resetIncludeAncestorHeadings() {
        this._includeAncestorHeadings = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeAncestorHeadingsInput() {
        return this._includeAncestorHeadings;
    }
}
exports.DiscoveryEngineDataStoreDocumentProcessingConfigChunkingConfigLayoutBasedChunkingConfigOutputReference = DiscoveryEngineDataStoreDocumentProcessingConfigChunkingConfigLayoutBasedChunkingConfigOutputReference;
_a = JSII_RTTI_SYMBOL_1;
DiscoveryEngineDataStoreDocumentProcessingConfigChunkingConfigLayoutBasedChunkingConfigOutputReference[_a] = { fqn: "@cdktf/provider-google.discoveryEngineDataStore.DiscoveryEngineDataStoreDocumentProcessingConfigChunkingConfigLayoutBasedChunkingConfigOutputReference", version: "14.13.1" };
function discoveryEngineDataStoreDocumentProcessingConfigChunkingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        layout_based_chunking_config: discoveryEngineDataStoreDocumentProcessingConfigChunkingConfigLayoutBasedChunkingConfigToTerraform(struct.layoutBasedChunkingConfig),
    };
}
exports.discoveryEngineDataStoreDocumentProcessingConfigChunkingConfigToTerraform = discoveryEngineDataStoreDocumentProcessingConfigChunkingConfigToTerraform;
function discoveryEngineDataStoreDocumentProcessingConfigChunkingConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        layout_based_chunking_config: {
            value: discoveryEngineDataStoreDocumentProcessingConfigChunkingConfigLayoutBasedChunkingConfigToHclTerraform(struct.layoutBasedChunkingConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DiscoveryEngineDataStoreDocumentProcessingConfigChunkingConfigLayoutBasedChunkingConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.discoveryEngineDataStoreDocumentProcessingConfigChunkingConfigToHclTerraform = discoveryEngineDataStoreDocumentProcessingConfigChunkingConfigToHclTerraform;
class DiscoveryEngineDataStoreDocumentProcessingConfigChunkingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // layout_based_chunking_config - computed: false, optional: true, required: false
        this._layoutBasedChunkingConfig = new DiscoveryEngineDataStoreDocumentProcessingConfigChunkingConfigLayoutBasedChunkingConfigOutputReference(this, "layout_based_chunking_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._layoutBasedChunkingConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.layoutBasedChunkingConfig = this._layoutBasedChunkingConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._layoutBasedChunkingConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._layoutBasedChunkingConfig.internalValue = value.layoutBasedChunkingConfig;
        }
    }
    get layoutBasedChunkingConfig() {
        return this._layoutBasedChunkingConfig;
    }
    putLayoutBasedChunkingConfig(value) {
        this._layoutBasedChunkingConfig.internalValue = value;
    }
    resetLayoutBasedChunkingConfig() {
        this._layoutBasedChunkingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get layoutBasedChunkingConfigInput() {
        return this._layoutBasedChunkingConfig.internalValue;
    }
}
exports.DiscoveryEngineDataStoreDocumentProcessingConfigChunkingConfigOutputReference = DiscoveryEngineDataStoreDocumentProcessingConfigChunkingConfigOutputReference;
_b = JSII_RTTI_SYMBOL_1;
DiscoveryEngineDataStoreDocumentProcessingConfigChunkingConfigOutputReference[_b] = { fqn: "@cdktf/provider-google.discoveryEngineDataStore.DiscoveryEngineDataStoreDocumentProcessingConfigChunkingConfigOutputReference", version: "14.13.1" };
function discoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigDigitalParsingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.discoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigDigitalParsingConfigToTerraform = discoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigDigitalParsingConfigToTerraform;
function discoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigDigitalParsingConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.discoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigDigitalParsingConfigToHclTerraform = discoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigDigitalParsingConfigToHclTerraform;
class DiscoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigDigitalParsingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DiscoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigDigitalParsingConfigOutputReference = DiscoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigDigitalParsingConfigOutputReference;
_c = JSII_RTTI_SYMBOL_1;
DiscoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigDigitalParsingConfigOutputReference[_c] = { fqn: "@cdktf/provider-google.discoveryEngineDataStore.DiscoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigDigitalParsingConfigOutputReference", version: "14.13.1" };
function discoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigLayoutParsingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.discoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigLayoutParsingConfigToTerraform = discoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigLayoutParsingConfigToTerraform;
function discoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigLayoutParsingConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.discoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigLayoutParsingConfigToHclTerraform = discoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigLayoutParsingConfigToHclTerraform;
class DiscoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigLayoutParsingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DiscoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigLayoutParsingConfigOutputReference = DiscoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigLayoutParsingConfigOutputReference;
_d = JSII_RTTI_SYMBOL_1;
DiscoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigLayoutParsingConfigOutputReference[_d] = { fqn: "@cdktf/provider-google.discoveryEngineDataStore.DiscoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigLayoutParsingConfigOutputReference", version: "14.13.1" };
function discoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigOcrParsingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        use_native_text: cdktf.booleanToTerraform(struct.useNativeText),
    };
}
exports.discoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigOcrParsingConfigToTerraform = discoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigOcrParsingConfigToTerraform;
function discoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigOcrParsingConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        use_native_text: {
            value: cdktf.booleanToHclTerraform(struct.useNativeText),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.discoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigOcrParsingConfigToHclTerraform = discoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigOcrParsingConfigToHclTerraform;
class DiscoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigOcrParsingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._useNativeText !== undefined) {
            hasAnyValues = true;
            internalValueResult.useNativeText = this._useNativeText;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._useNativeText = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._useNativeText = value.useNativeText;
        }
    }
    get useNativeText() {
        return this.getBooleanAttribute('use_native_text');
    }
    set useNativeText(value) {
        this._useNativeText = value;
    }
    resetUseNativeText() {
        this._useNativeText = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get useNativeTextInput() {
        return this._useNativeText;
    }
}
exports.DiscoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigOcrParsingConfigOutputReference = DiscoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigOcrParsingConfigOutputReference;
_e = JSII_RTTI_SYMBOL_1;
DiscoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigOcrParsingConfigOutputReference[_e] = { fqn: "@cdktf/provider-google.discoveryEngineDataStore.DiscoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigOcrParsingConfigOutputReference", version: "14.13.1" };
function discoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        digital_parsing_config: discoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigDigitalParsingConfigToTerraform(struct.digitalParsingConfig),
        layout_parsing_config: discoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigLayoutParsingConfigToTerraform(struct.layoutParsingConfig),
        ocr_parsing_config: discoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigOcrParsingConfigToTerraform(struct.ocrParsingConfig),
    };
}
exports.discoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigToTerraform = discoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigToTerraform;
function discoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        digital_parsing_config: {
            value: discoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigDigitalParsingConfigToHclTerraform(struct.digitalParsingConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DiscoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigDigitalParsingConfigList",
        },
        layout_parsing_config: {
            value: discoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigLayoutParsingConfigToHclTerraform(struct.layoutParsingConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DiscoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigLayoutParsingConfigList",
        },
        ocr_parsing_config: {
            value: discoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigOcrParsingConfigToHclTerraform(struct.ocrParsingConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DiscoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigOcrParsingConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.discoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigToHclTerraform = discoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigToHclTerraform;
class DiscoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // digital_parsing_config - computed: false, optional: true, required: false
        this._digitalParsingConfig = new DiscoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigDigitalParsingConfigOutputReference(this, "digital_parsing_config");
        // layout_parsing_config - computed: false, optional: true, required: false
        this._layoutParsingConfig = new DiscoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigLayoutParsingConfigOutputReference(this, "layout_parsing_config");
        // ocr_parsing_config - computed: false, optional: true, required: false
        this._ocrParsingConfig = new DiscoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigOcrParsingConfigOutputReference(this, "ocr_parsing_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._digitalParsingConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.digitalParsingConfig = this._digitalParsingConfig?.internalValue;
        }
        if (this._layoutParsingConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.layoutParsingConfig = this._layoutParsingConfig?.internalValue;
        }
        if (this._ocrParsingConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ocrParsingConfig = this._ocrParsingConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._digitalParsingConfig.internalValue = undefined;
            this._layoutParsingConfig.internalValue = undefined;
            this._ocrParsingConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._digitalParsingConfig.internalValue = value.digitalParsingConfig;
            this._layoutParsingConfig.internalValue = value.layoutParsingConfig;
            this._ocrParsingConfig.internalValue = value.ocrParsingConfig;
        }
    }
    get digitalParsingConfig() {
        return this._digitalParsingConfig;
    }
    putDigitalParsingConfig(value) {
        this._digitalParsingConfig.internalValue = value;
    }
    resetDigitalParsingConfig() {
        this._digitalParsingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get digitalParsingConfigInput() {
        return this._digitalParsingConfig.internalValue;
    }
    get layoutParsingConfig() {
        return this._layoutParsingConfig;
    }
    putLayoutParsingConfig(value) {
        this._layoutParsingConfig.internalValue = value;
    }
    resetLayoutParsingConfig() {
        this._layoutParsingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get layoutParsingConfigInput() {
        return this._layoutParsingConfig.internalValue;
    }
    get ocrParsingConfig() {
        return this._ocrParsingConfig;
    }
    putOcrParsingConfig(value) {
        this._ocrParsingConfig.internalValue = value;
    }
    resetOcrParsingConfig() {
        this._ocrParsingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ocrParsingConfigInput() {
        return this._ocrParsingConfig.internalValue;
    }
}
exports.DiscoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigOutputReference = DiscoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigOutputReference;
_f = JSII_RTTI_SYMBOL_1;
DiscoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigOutputReference[_f] = { fqn: "@cdktf/provider-google.discoveryEngineDataStore.DiscoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigOutputReference", version: "14.13.1" };
function discoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesDigitalParsingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.discoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesDigitalParsingConfigToTerraform = discoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesDigitalParsingConfigToTerraform;
function discoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesDigitalParsingConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.discoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesDigitalParsingConfigToHclTerraform = discoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesDigitalParsingConfigToHclTerraform;
class DiscoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesDigitalParsingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DiscoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesDigitalParsingConfigOutputReference = DiscoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesDigitalParsingConfigOutputReference;
_g = JSII_RTTI_SYMBOL_1;
DiscoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesDigitalParsingConfigOutputReference[_g] = { fqn: "@cdktf/provider-google.discoveryEngineDataStore.DiscoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesDigitalParsingConfigOutputReference", version: "14.13.1" };
function discoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesLayoutParsingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.discoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesLayoutParsingConfigToTerraform = discoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesLayoutParsingConfigToTerraform;
function discoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesLayoutParsingConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.discoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesLayoutParsingConfigToHclTerraform = discoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesLayoutParsingConfigToHclTerraform;
class DiscoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesLayoutParsingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DiscoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesLayoutParsingConfigOutputReference = DiscoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesLayoutParsingConfigOutputReference;
_h = JSII_RTTI_SYMBOL_1;
DiscoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesLayoutParsingConfigOutputReference[_h] = { fqn: "@cdktf/provider-google.discoveryEngineDataStore.DiscoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesLayoutParsingConfigOutputReference", version: "14.13.1" };
function discoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesOcrParsingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        use_native_text: cdktf.booleanToTerraform(struct.useNativeText),
    };
}
exports.discoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesOcrParsingConfigToTerraform = discoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesOcrParsingConfigToTerraform;
function discoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesOcrParsingConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        use_native_text: {
            value: cdktf.booleanToHclTerraform(struct.useNativeText),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.discoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesOcrParsingConfigToHclTerraform = discoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesOcrParsingConfigToHclTerraform;
class DiscoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesOcrParsingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._useNativeText !== undefined) {
            hasAnyValues = true;
            internalValueResult.useNativeText = this._useNativeText;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._useNativeText = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._useNativeText = value.useNativeText;
        }
    }
    get useNativeText() {
        return this.getBooleanAttribute('use_native_text');
    }
    set useNativeText(value) {
        this._useNativeText = value;
    }
    resetUseNativeText() {
        this._useNativeText = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get useNativeTextInput() {
        return this._useNativeText;
    }
}
exports.DiscoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesOcrParsingConfigOutputReference = DiscoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesOcrParsingConfigOutputReference;
_j = JSII_RTTI_SYMBOL_1;
DiscoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesOcrParsingConfigOutputReference[_j] = { fqn: "@cdktf/provider-google.discoveryEngineDataStore.DiscoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesOcrParsingConfigOutputReference", version: "14.13.1" };
function discoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        file_type: cdktf.stringToTerraform(struct.fileType),
        digital_parsing_config: discoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesDigitalParsingConfigToTerraform(struct.digitalParsingConfig),
        layout_parsing_config: discoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesLayoutParsingConfigToTerraform(struct.layoutParsingConfig),
        ocr_parsing_config: discoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesOcrParsingConfigToTerraform(struct.ocrParsingConfig),
    };
}
exports.discoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesToTerraform = discoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesToTerraform;
function discoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        file_type: {
            value: cdktf.stringToHclTerraform(struct.fileType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        digital_parsing_config: {
            value: discoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesDigitalParsingConfigToHclTerraform(struct.digitalParsingConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DiscoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesDigitalParsingConfigList",
        },
        layout_parsing_config: {
            value: discoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesLayoutParsingConfigToHclTerraform(struct.layoutParsingConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DiscoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesLayoutParsingConfigList",
        },
        ocr_parsing_config: {
            value: discoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesOcrParsingConfigToHclTerraform(struct.ocrParsingConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DiscoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesOcrParsingConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.discoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesToHclTerraform = discoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesToHclTerraform;
class DiscoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // digital_parsing_config - computed: false, optional: true, required: false
        this._digitalParsingConfig = new DiscoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesDigitalParsingConfigOutputReference(this, "digital_parsing_config");
        // layout_parsing_config - computed: false, optional: true, required: false
        this._layoutParsingConfig = new DiscoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesLayoutParsingConfigOutputReference(this, "layout_parsing_config");
        // ocr_parsing_config - computed: false, optional: true, required: false
        this._ocrParsingConfig = new DiscoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesOcrParsingConfigOutputReference(this, "ocr_parsing_config");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._fileType !== undefined) {
            hasAnyValues = true;
            internalValueResult.fileType = this._fileType;
        }
        if (this._digitalParsingConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.digitalParsingConfig = this._digitalParsingConfig?.internalValue;
        }
        if (this._layoutParsingConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.layoutParsingConfig = this._layoutParsingConfig?.internalValue;
        }
        if (this._ocrParsingConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ocrParsingConfig = this._ocrParsingConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._fileType = undefined;
            this._digitalParsingConfig.internalValue = undefined;
            this._layoutParsingConfig.internalValue = undefined;
            this._ocrParsingConfig.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._fileType = value.fileType;
            this._digitalParsingConfig.internalValue = value.digitalParsingConfig;
            this._layoutParsingConfig.internalValue = value.layoutParsingConfig;
            this._ocrParsingConfig.internalValue = value.ocrParsingConfig;
        }
    }
    get fileType() {
        return this.getStringAttribute('file_type');
    }
    set fileType(value) {
        this._fileType = value;
    }
    // Temporarily expose input value. Use with caution.
    get fileTypeInput() {
        return this._fileType;
    }
    get digitalParsingConfig() {
        return this._digitalParsingConfig;
    }
    putDigitalParsingConfig(value) {
        this._digitalParsingConfig.internalValue = value;
    }
    resetDigitalParsingConfig() {
        this._digitalParsingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get digitalParsingConfigInput() {
        return this._digitalParsingConfig.internalValue;
    }
    get layoutParsingConfig() {
        return this._layoutParsingConfig;
    }
    putLayoutParsingConfig(value) {
        this._layoutParsingConfig.internalValue = value;
    }
    resetLayoutParsingConfig() {
        this._layoutParsingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get layoutParsingConfigInput() {
        return this._layoutParsingConfig.internalValue;
    }
    get ocrParsingConfig() {
        return this._ocrParsingConfig;
    }
    putOcrParsingConfig(value) {
        this._ocrParsingConfig.internalValue = value;
    }
    resetOcrParsingConfig() {
        this._ocrParsingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ocrParsingConfigInput() {
        return this._ocrParsingConfig.internalValue;
    }
}
exports.DiscoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesOutputReference = DiscoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesOutputReference;
_k = JSII_RTTI_SYMBOL_1;
DiscoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesOutputReference[_k] = { fqn: "@cdktf/provider-google.discoveryEngineDataStore.DiscoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesOutputReference", version: "14.13.1" };
class DiscoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DiscoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DiscoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesList = DiscoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesList;
_l = JSII_RTTI_SYMBOL_1;
DiscoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesList[_l] = { fqn: "@cdktf/provider-google.discoveryEngineDataStore.DiscoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesList", version: "14.13.1" };
function discoveryEngineDataStoreDocumentProcessingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        chunking_config: discoveryEngineDataStoreDocumentProcessingConfigChunkingConfigToTerraform(struct.chunkingConfig),
        default_parsing_config: discoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigToTerraform(struct.defaultParsingConfig),
        parsing_config_overrides: cdktf.listMapper(discoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesToTerraform, true)(struct.parsingConfigOverrides),
    };
}
exports.discoveryEngineDataStoreDocumentProcessingConfigToTerraform = discoveryEngineDataStoreDocumentProcessingConfigToTerraform;
function discoveryEngineDataStoreDocumentProcessingConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        chunking_config: {
            value: discoveryEngineDataStoreDocumentProcessingConfigChunkingConfigToHclTerraform(struct.chunkingConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DiscoveryEngineDataStoreDocumentProcessingConfigChunkingConfigList",
        },
        default_parsing_config: {
            value: discoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigToHclTerraform(struct.defaultParsingConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DiscoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigList",
        },
        parsing_config_overrides: {
            value: cdktf.listMapperHcl(discoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesToHclTerraform, true)(struct.parsingConfigOverrides),
            isBlock: true,
            type: "set",
            storageClassType: "DiscoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.discoveryEngineDataStoreDocumentProcessingConfigToHclTerraform = discoveryEngineDataStoreDocumentProcessingConfigToHclTerraform;
class DiscoveryEngineDataStoreDocumentProcessingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // chunking_config - computed: false, optional: true, required: false
        this._chunkingConfig = new DiscoveryEngineDataStoreDocumentProcessingConfigChunkingConfigOutputReference(this, "chunking_config");
        // default_parsing_config - computed: false, optional: true, required: false
        this._defaultParsingConfig = new DiscoveryEngineDataStoreDocumentProcessingConfigDefaultParsingConfigOutputReference(this, "default_parsing_config");
        // parsing_config_overrides - computed: false, optional: true, required: false
        this._parsingConfigOverrides = new DiscoveryEngineDataStoreDocumentProcessingConfigParsingConfigOverridesList(this, "parsing_config_overrides", true);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._chunkingConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.chunkingConfig = this._chunkingConfig?.internalValue;
        }
        if (this._defaultParsingConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultParsingConfig = this._defaultParsingConfig?.internalValue;
        }
        if (this._parsingConfigOverrides?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.parsingConfigOverrides = this._parsingConfigOverrides?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._chunkingConfig.internalValue = undefined;
            this._defaultParsingConfig.internalValue = undefined;
            this._parsingConfigOverrides.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._chunkingConfig.internalValue = value.chunkingConfig;
            this._defaultParsingConfig.internalValue = value.defaultParsingConfig;
            this._parsingConfigOverrides.internalValue = value.parsingConfigOverrides;
        }
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get chunkingConfig() {
        return this._chunkingConfig;
    }
    putChunkingConfig(value) {
        this._chunkingConfig.internalValue = value;
    }
    resetChunkingConfig() {
        this._chunkingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get chunkingConfigInput() {
        return this._chunkingConfig.internalValue;
    }
    get defaultParsingConfig() {
        return this._defaultParsingConfig;
    }
    putDefaultParsingConfig(value) {
        this._defaultParsingConfig.internalValue = value;
    }
    resetDefaultParsingConfig() {
        this._defaultParsingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultParsingConfigInput() {
        return this._defaultParsingConfig.internalValue;
    }
    get parsingConfigOverrides() {
        return this._parsingConfigOverrides;
    }
    putParsingConfigOverrides(value) {
        this._parsingConfigOverrides.internalValue = value;
    }
    resetParsingConfigOverrides() {
        this._parsingConfigOverrides.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parsingConfigOverridesInput() {
        return this._parsingConfigOverrides.internalValue;
    }
}
exports.DiscoveryEngineDataStoreDocumentProcessingConfigOutputReference = DiscoveryEngineDataStoreDocumentProcessingConfigOutputReference;
_m = JSII_RTTI_SYMBOL_1;
DiscoveryEngineDataStoreDocumentProcessingConfigOutputReference[_m] = { fqn: "@cdktf/provider-google.discoveryEngineDataStore.DiscoveryEngineDataStoreDocumentProcessingConfigOutputReference", version: "14.13.1" };
function discoveryEngineDataStoreTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.discoveryEngineDataStoreTimeoutsToTerraform = discoveryEngineDataStoreTimeoutsToTerraform;
function discoveryEngineDataStoreTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.discoveryEngineDataStoreTimeoutsToHclTerraform = discoveryEngineDataStoreTimeoutsToHclTerraform;
class DiscoveryEngineDataStoreTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.DiscoveryEngineDataStoreTimeoutsOutputReference = DiscoveryEngineDataStoreTimeoutsOutputReference;
_o = JSII_RTTI_SYMBOL_1;
DiscoveryEngineDataStoreTimeoutsOutputReference[_o] = { fqn: "@cdktf/provider-google.discoveryEngineDataStore.DiscoveryEngineDataStoreTimeoutsOutputReference", version: "14.13.1" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/discovery_engine_data_store google_discovery_engine_data_store}
*/
class DiscoveryEngineDataStore extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a DiscoveryEngineDataStore resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the DiscoveryEngineDataStore to import
    * @param importFromId The id of the existing DiscoveryEngineDataStore that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/discovery_engine_data_store#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the DiscoveryEngineDataStore to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_discovery_engine_data_store", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/discovery_engine_data_store google_discovery_engine_data_store} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DiscoveryEngineDataStoreConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_discovery_engine_data_store',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // document_processing_config - computed: false, optional: true, required: false
        this._documentProcessingConfig = new DiscoveryEngineDataStoreDocumentProcessingConfigOutputReference(this, "document_processing_config");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new DiscoveryEngineDataStoreTimeoutsOutputReference(this, "timeouts");
        this._contentConfig = config.contentConfig;
        this._createAdvancedSiteSearch = config.createAdvancedSiteSearch;
        this._dataStoreId = config.dataStoreId;
        this._displayName = config.displayName;
        this._id = config.id;
        this._industryVertical = config.industryVertical;
        this._location = config.location;
        this._project = config.project;
        this._skipDefaultSchemaCreation = config.skipDefaultSchemaCreation;
        this._solutionTypes = config.solutionTypes;
        this._documentProcessingConfig.internalValue = config.documentProcessingConfig;
        this._timeouts.internalValue = config.timeouts;
    }
    get contentConfig() {
        return this.getStringAttribute('content_config');
    }
    set contentConfig(value) {
        this._contentConfig = value;
    }
    // Temporarily expose input value. Use with caution.
    get contentConfigInput() {
        return this._contentConfig;
    }
    get createAdvancedSiteSearch() {
        return this.getBooleanAttribute('create_advanced_site_search');
    }
    set createAdvancedSiteSearch(value) {
        this._createAdvancedSiteSearch = value;
    }
    resetCreateAdvancedSiteSearch() {
        this._createAdvancedSiteSearch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createAdvancedSiteSearchInput() {
        return this._createAdvancedSiteSearch;
    }
    // create_time - computed: true, optional: false, required: false
    get createTime() {
        return this.getStringAttribute('create_time');
    }
    get dataStoreId() {
        return this.getStringAttribute('data_store_id');
    }
    set dataStoreId(value) {
        this._dataStoreId = value;
    }
    // Temporarily expose input value. Use with caution.
    get dataStoreIdInput() {
        return this._dataStoreId;
    }
    // default_schema_id - computed: true, optional: false, required: false
    get defaultSchemaId() {
        return this.getStringAttribute('default_schema_id');
    }
    get displayName() {
        return this.getStringAttribute('display_name');
    }
    set displayName(value) {
        this._displayName = value;
    }
    // Temporarily expose input value. Use with caution.
    get displayNameInput() {
        return this._displayName;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get industryVertical() {
        return this.getStringAttribute('industry_vertical');
    }
    set industryVertical(value) {
        this._industryVertical = value;
    }
    // Temporarily expose input value. Use with caution.
    get industryVerticalInput() {
        return this._industryVertical;
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get skipDefaultSchemaCreation() {
        return this.getBooleanAttribute('skip_default_schema_creation');
    }
    set skipDefaultSchemaCreation(value) {
        this._skipDefaultSchemaCreation = value;
    }
    resetSkipDefaultSchemaCreation() {
        this._skipDefaultSchemaCreation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get skipDefaultSchemaCreationInput() {
        return this._skipDefaultSchemaCreation;
    }
    get solutionTypes() {
        return this.getListAttribute('solution_types');
    }
    set solutionTypes(value) {
        this._solutionTypes = value;
    }
    resetSolutionTypes() {
        this._solutionTypes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get solutionTypesInput() {
        return this._solutionTypes;
    }
    get documentProcessingConfig() {
        return this._documentProcessingConfig;
    }
    putDocumentProcessingConfig(value) {
        this._documentProcessingConfig.internalValue = value;
    }
    resetDocumentProcessingConfig() {
        this._documentProcessingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get documentProcessingConfigInput() {
        return this._documentProcessingConfig.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            content_config: cdktf.stringToTerraform(this._contentConfig),
            create_advanced_site_search: cdktf.booleanToTerraform(this._createAdvancedSiteSearch),
            data_store_id: cdktf.stringToTerraform(this._dataStoreId),
            display_name: cdktf.stringToTerraform(this._displayName),
            id: cdktf.stringToTerraform(this._id),
            industry_vertical: cdktf.stringToTerraform(this._industryVertical),
            location: cdktf.stringToTerraform(this._location),
            project: cdktf.stringToTerraform(this._project),
            skip_default_schema_creation: cdktf.booleanToTerraform(this._skipDefaultSchemaCreation),
            solution_types: cdktf.listMapper(cdktf.stringToTerraform, false)(this._solutionTypes),
            document_processing_config: discoveryEngineDataStoreDocumentProcessingConfigToTerraform(this._documentProcessingConfig.internalValue),
            timeouts: discoveryEngineDataStoreTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            content_config: {
                value: cdktf.stringToHclTerraform(this._contentConfig),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            create_advanced_site_search: {
                value: cdktf.booleanToHclTerraform(this._createAdvancedSiteSearch),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            data_store_id: {
                value: cdktf.stringToHclTerraform(this._dataStoreId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            display_name: {
                value: cdktf.stringToHclTerraform(this._displayName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            industry_vertical: {
                value: cdktf.stringToHclTerraform(this._industryVertical),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            location: {
                value: cdktf.stringToHclTerraform(this._location),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            project: {
                value: cdktf.stringToHclTerraform(this._project),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            skip_default_schema_creation: {
                value: cdktf.booleanToHclTerraform(this._skipDefaultSchemaCreation),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            solution_types: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._solutionTypes),
                isBlock: false,
                type: "list",
                storageClassType: "stringList",
            },
            document_processing_config: {
                value: discoveryEngineDataStoreDocumentProcessingConfigToHclTerraform(this._documentProcessingConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "DiscoveryEngineDataStoreDocumentProcessingConfigList",
            },
            timeouts: {
                value: discoveryEngineDataStoreTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "DiscoveryEngineDataStoreTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.DiscoveryEngineDataStore = DiscoveryEngineDataStore;
_p = JSII_RTTI_SYMBOL_1;
DiscoveryEngineDataStore[_p] = { fqn: "@cdktf/provider-google.discoveryEngineDataStore.DiscoveryEngineDataStore", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
DiscoveryEngineDataStore.tfResourceType = "google_discovery_engine_data_store";
//# sourceMappingURL=data:application/json;base64,