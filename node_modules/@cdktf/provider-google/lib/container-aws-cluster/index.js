"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v;
Object.defineProperty(exports, "__esModule", { value: true });
exports.containerAwsClusterTimeoutsToHclTerraform = exports.containerAwsClusterTimeoutsToTerraform = exports.ContainerAwsClusterNetworkingOutputReference = exports.containerAwsClusterNetworkingToHclTerraform = exports.containerAwsClusterNetworkingToTerraform = exports.ContainerAwsClusterFleetOutputReference = exports.containerAwsClusterFleetToHclTerraform = exports.containerAwsClusterFleetToTerraform = exports.ContainerAwsClusterControlPlaneOutputReference = exports.containerAwsClusterControlPlaneToHclTerraform = exports.containerAwsClusterControlPlaneToTerraform = exports.ContainerAwsClusterControlPlaneSshConfigOutputReference = exports.containerAwsClusterControlPlaneSshConfigToHclTerraform = exports.containerAwsClusterControlPlaneSshConfigToTerraform = exports.ContainerAwsClusterControlPlaneRootVolumeOutputReference = exports.containerAwsClusterControlPlaneRootVolumeToHclTerraform = exports.containerAwsClusterControlPlaneRootVolumeToTerraform = exports.ContainerAwsClusterControlPlaneProxyConfigOutputReference = exports.containerAwsClusterControlPlaneProxyConfigToHclTerraform = exports.containerAwsClusterControlPlaneProxyConfigToTerraform = exports.ContainerAwsClusterControlPlaneMainVolumeOutputReference = exports.containerAwsClusterControlPlaneMainVolumeToHclTerraform = exports.containerAwsClusterControlPlaneMainVolumeToTerraform = exports.ContainerAwsClusterControlPlaneDatabaseEncryptionOutputReference = exports.containerAwsClusterControlPlaneDatabaseEncryptionToHclTerraform = exports.containerAwsClusterControlPlaneDatabaseEncryptionToTerraform = exports.ContainerAwsClusterControlPlaneConfigEncryptionOutputReference = exports.containerAwsClusterControlPlaneConfigEncryptionToHclTerraform = exports.containerAwsClusterControlPlaneConfigEncryptionToTerraform = exports.ContainerAwsClusterControlPlaneAwsServicesAuthenticationOutputReference = exports.containerAwsClusterControlPlaneAwsServicesAuthenticationToHclTerraform = exports.containerAwsClusterControlPlaneAwsServicesAuthenticationToTerraform = exports.ContainerAwsClusterBinaryAuthorizationOutputReference = exports.containerAwsClusterBinaryAuthorizationToHclTerraform = exports.containerAwsClusterBinaryAuthorizationToTerraform = exports.ContainerAwsClusterAuthorizationOutputReference = exports.containerAwsClusterAuthorizationToHclTerraform = exports.containerAwsClusterAuthorizationToTerraform = exports.ContainerAwsClusterAuthorizationAdminUsersList = exports.ContainerAwsClusterAuthorizationAdminUsersOutputReference = exports.containerAwsClusterAuthorizationAdminUsersToHclTerraform = exports.containerAwsClusterAuthorizationAdminUsersToTerraform = exports.ContainerAwsClusterAuthorizationAdminGroupsList = exports.ContainerAwsClusterAuthorizationAdminGroupsOutputReference = exports.containerAwsClusterAuthorizationAdminGroupsToHclTerraform = exports.containerAwsClusterAuthorizationAdminGroupsToTerraform = exports.ContainerAwsClusterWorkloadIdentityConfigList = exports.ContainerAwsClusterWorkloadIdentityConfigOutputReference = exports.containerAwsClusterWorkloadIdentityConfigToHclTerraform = exports.containerAwsClusterWorkloadIdentityConfigToTerraform = void 0;
exports.ContainerAwsCluster = exports.ContainerAwsClusterTimeoutsOutputReference = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function containerAwsClusterWorkloadIdentityConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.containerAwsClusterWorkloadIdentityConfigToTerraform = containerAwsClusterWorkloadIdentityConfigToTerraform;
function containerAwsClusterWorkloadIdentityConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.containerAwsClusterWorkloadIdentityConfigToHclTerraform = containerAwsClusterWorkloadIdentityConfigToHclTerraform;
class ContainerAwsClusterWorkloadIdentityConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // identity_provider - computed: true, optional: false, required: false
    get identityProvider() {
        return this.getStringAttribute('identity_provider');
    }
    // issuer_uri - computed: true, optional: false, required: false
    get issuerUri() {
        return this.getStringAttribute('issuer_uri');
    }
    // workload_pool - computed: true, optional: false, required: false
    get workloadPool() {
        return this.getStringAttribute('workload_pool');
    }
}
exports.ContainerAwsClusterWorkloadIdentityConfigOutputReference = ContainerAwsClusterWorkloadIdentityConfigOutputReference;
_a = JSII_RTTI_SYMBOL_1;
ContainerAwsClusterWorkloadIdentityConfigOutputReference[_a] = { fqn: "@cdktf/provider-google.containerAwsCluster.ContainerAwsClusterWorkloadIdentityConfigOutputReference", version: "14.13.1" };
class ContainerAwsClusterWorkloadIdentityConfigList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ContainerAwsClusterWorkloadIdentityConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ContainerAwsClusterWorkloadIdentityConfigList = ContainerAwsClusterWorkloadIdentityConfigList;
_b = JSII_RTTI_SYMBOL_1;
ContainerAwsClusterWorkloadIdentityConfigList[_b] = { fqn: "@cdktf/provider-google.containerAwsCluster.ContainerAwsClusterWorkloadIdentityConfigList", version: "14.13.1" };
function containerAwsClusterAuthorizationAdminGroupsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        group: cdktf.stringToTerraform(struct.group),
    };
}
exports.containerAwsClusterAuthorizationAdminGroupsToTerraform = containerAwsClusterAuthorizationAdminGroupsToTerraform;
function containerAwsClusterAuthorizationAdminGroupsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        group: {
            value: cdktf.stringToHclTerraform(struct.group),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.containerAwsClusterAuthorizationAdminGroupsToHclTerraform = containerAwsClusterAuthorizationAdminGroupsToHclTerraform;
class ContainerAwsClusterAuthorizationAdminGroupsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._group !== undefined) {
            hasAnyValues = true;
            internalValueResult.group = this._group;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._group = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._group = value.group;
        }
    }
    get group() {
        return this.getStringAttribute('group');
    }
    set group(value) {
        this._group = value;
    }
    // Temporarily expose input value. Use with caution.
    get groupInput() {
        return this._group;
    }
}
exports.ContainerAwsClusterAuthorizationAdminGroupsOutputReference = ContainerAwsClusterAuthorizationAdminGroupsOutputReference;
_c = JSII_RTTI_SYMBOL_1;
ContainerAwsClusterAuthorizationAdminGroupsOutputReference[_c] = { fqn: "@cdktf/provider-google.containerAwsCluster.ContainerAwsClusterAuthorizationAdminGroupsOutputReference", version: "14.13.1" };
class ContainerAwsClusterAuthorizationAdminGroupsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ContainerAwsClusterAuthorizationAdminGroupsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ContainerAwsClusterAuthorizationAdminGroupsList = ContainerAwsClusterAuthorizationAdminGroupsList;
_d = JSII_RTTI_SYMBOL_1;
ContainerAwsClusterAuthorizationAdminGroupsList[_d] = { fqn: "@cdktf/provider-google.containerAwsCluster.ContainerAwsClusterAuthorizationAdminGroupsList", version: "14.13.1" };
function containerAwsClusterAuthorizationAdminUsersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        username: cdktf.stringToTerraform(struct.username),
    };
}
exports.containerAwsClusterAuthorizationAdminUsersToTerraform = containerAwsClusterAuthorizationAdminUsersToTerraform;
function containerAwsClusterAuthorizationAdminUsersToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        username: {
            value: cdktf.stringToHclTerraform(struct.username),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.containerAwsClusterAuthorizationAdminUsersToHclTerraform = containerAwsClusterAuthorizationAdminUsersToHclTerraform;
class ContainerAwsClusterAuthorizationAdminUsersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._username !== undefined) {
            hasAnyValues = true;
            internalValueResult.username = this._username;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._username = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._username = value.username;
        }
    }
    get username() {
        return this.getStringAttribute('username');
    }
    set username(value) {
        this._username = value;
    }
    // Temporarily expose input value. Use with caution.
    get usernameInput() {
        return this._username;
    }
}
exports.ContainerAwsClusterAuthorizationAdminUsersOutputReference = ContainerAwsClusterAuthorizationAdminUsersOutputReference;
_e = JSII_RTTI_SYMBOL_1;
ContainerAwsClusterAuthorizationAdminUsersOutputReference[_e] = { fqn: "@cdktf/provider-google.containerAwsCluster.ContainerAwsClusterAuthorizationAdminUsersOutputReference", version: "14.13.1" };
class ContainerAwsClusterAuthorizationAdminUsersList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ContainerAwsClusterAuthorizationAdminUsersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ContainerAwsClusterAuthorizationAdminUsersList = ContainerAwsClusterAuthorizationAdminUsersList;
_f = JSII_RTTI_SYMBOL_1;
ContainerAwsClusterAuthorizationAdminUsersList[_f] = { fqn: "@cdktf/provider-google.containerAwsCluster.ContainerAwsClusterAuthorizationAdminUsersList", version: "14.13.1" };
function containerAwsClusterAuthorizationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        admin_groups: cdktf.listMapper(containerAwsClusterAuthorizationAdminGroupsToTerraform, true)(struct.adminGroups),
        admin_users: cdktf.listMapper(containerAwsClusterAuthorizationAdminUsersToTerraform, true)(struct.adminUsers),
    };
}
exports.containerAwsClusterAuthorizationToTerraform = containerAwsClusterAuthorizationToTerraform;
function containerAwsClusterAuthorizationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        admin_groups: {
            value: cdktf.listMapperHcl(containerAwsClusterAuthorizationAdminGroupsToHclTerraform, true)(struct.adminGroups),
            isBlock: true,
            type: "list",
            storageClassType: "ContainerAwsClusterAuthorizationAdminGroupsList",
        },
        admin_users: {
            value: cdktf.listMapperHcl(containerAwsClusterAuthorizationAdminUsersToHclTerraform, true)(struct.adminUsers),
            isBlock: true,
            type: "list",
            storageClassType: "ContainerAwsClusterAuthorizationAdminUsersList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.containerAwsClusterAuthorizationToHclTerraform = containerAwsClusterAuthorizationToHclTerraform;
class ContainerAwsClusterAuthorizationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // admin_groups - computed: false, optional: true, required: false
        this._adminGroups = new ContainerAwsClusterAuthorizationAdminGroupsList(this, "admin_groups", false);
        // admin_users - computed: false, optional: false, required: true
        this._adminUsers = new ContainerAwsClusterAuthorizationAdminUsersList(this, "admin_users", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._adminGroups?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.adminGroups = this._adminGroups?.internalValue;
        }
        if (this._adminUsers?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.adminUsers = this._adminUsers?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._adminGroups.internalValue = undefined;
            this._adminUsers.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._adminGroups.internalValue = value.adminGroups;
            this._adminUsers.internalValue = value.adminUsers;
        }
    }
    get adminGroups() {
        return this._adminGroups;
    }
    putAdminGroups(value) {
        this._adminGroups.internalValue = value;
    }
    resetAdminGroups() {
        this._adminGroups.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get adminGroupsInput() {
        return this._adminGroups.internalValue;
    }
    get adminUsers() {
        return this._adminUsers;
    }
    putAdminUsers(value) {
        this._adminUsers.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get adminUsersInput() {
        return this._adminUsers.internalValue;
    }
}
exports.ContainerAwsClusterAuthorizationOutputReference = ContainerAwsClusterAuthorizationOutputReference;
_g = JSII_RTTI_SYMBOL_1;
ContainerAwsClusterAuthorizationOutputReference[_g] = { fqn: "@cdktf/provider-google.containerAwsCluster.ContainerAwsClusterAuthorizationOutputReference", version: "14.13.1" };
function containerAwsClusterBinaryAuthorizationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        evaluation_mode: cdktf.stringToTerraform(struct.evaluationMode),
    };
}
exports.containerAwsClusterBinaryAuthorizationToTerraform = containerAwsClusterBinaryAuthorizationToTerraform;
function containerAwsClusterBinaryAuthorizationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        evaluation_mode: {
            value: cdktf.stringToHclTerraform(struct.evaluationMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.containerAwsClusterBinaryAuthorizationToHclTerraform = containerAwsClusterBinaryAuthorizationToHclTerraform;
class ContainerAwsClusterBinaryAuthorizationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._evaluationMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.evaluationMode = this._evaluationMode;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._evaluationMode = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._evaluationMode = value.evaluationMode;
        }
    }
    get evaluationMode() {
        return this.getStringAttribute('evaluation_mode');
    }
    set evaluationMode(value) {
        this._evaluationMode = value;
    }
    resetEvaluationMode() {
        this._evaluationMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get evaluationModeInput() {
        return this._evaluationMode;
    }
}
exports.ContainerAwsClusterBinaryAuthorizationOutputReference = ContainerAwsClusterBinaryAuthorizationOutputReference;
_h = JSII_RTTI_SYMBOL_1;
ContainerAwsClusterBinaryAuthorizationOutputReference[_h] = { fqn: "@cdktf/provider-google.containerAwsCluster.ContainerAwsClusterBinaryAuthorizationOutputReference", version: "14.13.1" };
function containerAwsClusterControlPlaneAwsServicesAuthenticationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        role_session_name: cdktf.stringToTerraform(struct.roleSessionName),
    };
}
exports.containerAwsClusterControlPlaneAwsServicesAuthenticationToTerraform = containerAwsClusterControlPlaneAwsServicesAuthenticationToTerraform;
function containerAwsClusterControlPlaneAwsServicesAuthenticationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        role_arn: {
            value: cdktf.stringToHclTerraform(struct.roleArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        role_session_name: {
            value: cdktf.stringToHclTerraform(struct.roleSessionName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.containerAwsClusterControlPlaneAwsServicesAuthenticationToHclTerraform = containerAwsClusterControlPlaneAwsServicesAuthenticationToHclTerraform;
class ContainerAwsClusterControlPlaneAwsServicesAuthenticationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._roleArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.roleArn = this._roleArn;
        }
        if (this._roleSessionName !== undefined) {
            hasAnyValues = true;
            internalValueResult.roleSessionName = this._roleSessionName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._roleArn = undefined;
            this._roleSessionName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._roleArn = value.roleArn;
            this._roleSessionName = value.roleSessionName;
        }
    }
    get roleArn() {
        return this.getStringAttribute('role_arn');
    }
    set roleArn(value) {
        this._roleArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get roleArnInput() {
        return this._roleArn;
    }
    get roleSessionName() {
        return this.getStringAttribute('role_session_name');
    }
    set roleSessionName(value) {
        this._roleSessionName = value;
    }
    resetRoleSessionName() {
        this._roleSessionName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get roleSessionNameInput() {
        return this._roleSessionName;
    }
}
exports.ContainerAwsClusterControlPlaneAwsServicesAuthenticationOutputReference = ContainerAwsClusterControlPlaneAwsServicesAuthenticationOutputReference;
_j = JSII_RTTI_SYMBOL_1;
ContainerAwsClusterControlPlaneAwsServicesAuthenticationOutputReference[_j] = { fqn: "@cdktf/provider-google.containerAwsCluster.ContainerAwsClusterControlPlaneAwsServicesAuthenticationOutputReference", version: "14.13.1" };
function containerAwsClusterControlPlaneConfigEncryptionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        kms_key_arn: cdktf.stringToTerraform(struct.kmsKeyArn),
    };
}
exports.containerAwsClusterControlPlaneConfigEncryptionToTerraform = containerAwsClusterControlPlaneConfigEncryptionToTerraform;
function containerAwsClusterControlPlaneConfigEncryptionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        kms_key_arn: {
            value: cdktf.stringToHclTerraform(struct.kmsKeyArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.containerAwsClusterControlPlaneConfigEncryptionToHclTerraform = containerAwsClusterControlPlaneConfigEncryptionToHclTerraform;
class ContainerAwsClusterControlPlaneConfigEncryptionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._kmsKeyArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyArn = this._kmsKeyArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._kmsKeyArn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._kmsKeyArn = value.kmsKeyArn;
        }
    }
    get kmsKeyArn() {
        return this.getStringAttribute('kms_key_arn');
    }
    set kmsKeyArn(value) {
        this._kmsKeyArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyArnInput() {
        return this._kmsKeyArn;
    }
}
exports.ContainerAwsClusterControlPlaneConfigEncryptionOutputReference = ContainerAwsClusterControlPlaneConfigEncryptionOutputReference;
_k = JSII_RTTI_SYMBOL_1;
ContainerAwsClusterControlPlaneConfigEncryptionOutputReference[_k] = { fqn: "@cdktf/provider-google.containerAwsCluster.ContainerAwsClusterControlPlaneConfigEncryptionOutputReference", version: "14.13.1" };
function containerAwsClusterControlPlaneDatabaseEncryptionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        kms_key_arn: cdktf.stringToTerraform(struct.kmsKeyArn),
    };
}
exports.containerAwsClusterControlPlaneDatabaseEncryptionToTerraform = containerAwsClusterControlPlaneDatabaseEncryptionToTerraform;
function containerAwsClusterControlPlaneDatabaseEncryptionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        kms_key_arn: {
            value: cdktf.stringToHclTerraform(struct.kmsKeyArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.containerAwsClusterControlPlaneDatabaseEncryptionToHclTerraform = containerAwsClusterControlPlaneDatabaseEncryptionToHclTerraform;
class ContainerAwsClusterControlPlaneDatabaseEncryptionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._kmsKeyArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyArn = this._kmsKeyArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._kmsKeyArn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._kmsKeyArn = value.kmsKeyArn;
        }
    }
    get kmsKeyArn() {
        return this.getStringAttribute('kms_key_arn');
    }
    set kmsKeyArn(value) {
        this._kmsKeyArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyArnInput() {
        return this._kmsKeyArn;
    }
}
exports.ContainerAwsClusterControlPlaneDatabaseEncryptionOutputReference = ContainerAwsClusterControlPlaneDatabaseEncryptionOutputReference;
_l = JSII_RTTI_SYMBOL_1;
ContainerAwsClusterControlPlaneDatabaseEncryptionOutputReference[_l] = { fqn: "@cdktf/provider-google.containerAwsCluster.ContainerAwsClusterControlPlaneDatabaseEncryptionOutputReference", version: "14.13.1" };
function containerAwsClusterControlPlaneMainVolumeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        iops: cdktf.numberToTerraform(struct.iops),
        kms_key_arn: cdktf.stringToTerraform(struct.kmsKeyArn),
        size_gib: cdktf.numberToTerraform(struct.sizeGib),
        throughput: cdktf.numberToTerraform(struct.throughput),
        volume_type: cdktf.stringToTerraform(struct.volumeType),
    };
}
exports.containerAwsClusterControlPlaneMainVolumeToTerraform = containerAwsClusterControlPlaneMainVolumeToTerraform;
function containerAwsClusterControlPlaneMainVolumeToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        iops: {
            value: cdktf.numberToHclTerraform(struct.iops),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        kms_key_arn: {
            value: cdktf.stringToHclTerraform(struct.kmsKeyArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        size_gib: {
            value: cdktf.numberToHclTerraform(struct.sizeGib),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        throughput: {
            value: cdktf.numberToHclTerraform(struct.throughput),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        volume_type: {
            value: cdktf.stringToHclTerraform(struct.volumeType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.containerAwsClusterControlPlaneMainVolumeToHclTerraform = containerAwsClusterControlPlaneMainVolumeToHclTerraform;
class ContainerAwsClusterControlPlaneMainVolumeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._iops !== undefined) {
            hasAnyValues = true;
            internalValueResult.iops = this._iops;
        }
        if (this._kmsKeyArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyArn = this._kmsKeyArn;
        }
        if (this._sizeGib !== undefined) {
            hasAnyValues = true;
            internalValueResult.sizeGib = this._sizeGib;
        }
        if (this._throughput !== undefined) {
            hasAnyValues = true;
            internalValueResult.throughput = this._throughput;
        }
        if (this._volumeType !== undefined) {
            hasAnyValues = true;
            internalValueResult.volumeType = this._volumeType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._iops = undefined;
            this._kmsKeyArn = undefined;
            this._sizeGib = undefined;
            this._throughput = undefined;
            this._volumeType = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._iops = value.iops;
            this._kmsKeyArn = value.kmsKeyArn;
            this._sizeGib = value.sizeGib;
            this._throughput = value.throughput;
            this._volumeType = value.volumeType;
        }
    }
    get iops() {
        return this.getNumberAttribute('iops');
    }
    set iops(value) {
        this._iops = value;
    }
    resetIops() {
        this._iops = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get iopsInput() {
        return this._iops;
    }
    get kmsKeyArn() {
        return this.getStringAttribute('kms_key_arn');
    }
    set kmsKeyArn(value) {
        this._kmsKeyArn = value;
    }
    resetKmsKeyArn() {
        this._kmsKeyArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyArnInput() {
        return this._kmsKeyArn;
    }
    get sizeGib() {
        return this.getNumberAttribute('size_gib');
    }
    set sizeGib(value) {
        this._sizeGib = value;
    }
    resetSizeGib() {
        this._sizeGib = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sizeGibInput() {
        return this._sizeGib;
    }
    get throughput() {
        return this.getNumberAttribute('throughput');
    }
    set throughput(value) {
        this._throughput = value;
    }
    resetThroughput() {
        this._throughput = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get throughputInput() {
        return this._throughput;
    }
    get volumeType() {
        return this.getStringAttribute('volume_type');
    }
    set volumeType(value) {
        this._volumeType = value;
    }
    resetVolumeType() {
        this._volumeType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get volumeTypeInput() {
        return this._volumeType;
    }
}
exports.ContainerAwsClusterControlPlaneMainVolumeOutputReference = ContainerAwsClusterControlPlaneMainVolumeOutputReference;
_m = JSII_RTTI_SYMBOL_1;
ContainerAwsClusterControlPlaneMainVolumeOutputReference[_m] = { fqn: "@cdktf/provider-google.containerAwsCluster.ContainerAwsClusterControlPlaneMainVolumeOutputReference", version: "14.13.1" };
function containerAwsClusterControlPlaneProxyConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        secret_arn: cdktf.stringToTerraform(struct.secretArn),
        secret_version: cdktf.stringToTerraform(struct.secretVersion),
    };
}
exports.containerAwsClusterControlPlaneProxyConfigToTerraform = containerAwsClusterControlPlaneProxyConfigToTerraform;
function containerAwsClusterControlPlaneProxyConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        secret_arn: {
            value: cdktf.stringToHclTerraform(struct.secretArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        secret_version: {
            value: cdktf.stringToHclTerraform(struct.secretVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.containerAwsClusterControlPlaneProxyConfigToHclTerraform = containerAwsClusterControlPlaneProxyConfigToHclTerraform;
class ContainerAwsClusterControlPlaneProxyConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._secretArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.secretArn = this._secretArn;
        }
        if (this._secretVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.secretVersion = this._secretVersion;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._secretArn = undefined;
            this._secretVersion = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._secretArn = value.secretArn;
            this._secretVersion = value.secretVersion;
        }
    }
    get secretArn() {
        return this.getStringAttribute('secret_arn');
    }
    set secretArn(value) {
        this._secretArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get secretArnInput() {
        return this._secretArn;
    }
    get secretVersion() {
        return this.getStringAttribute('secret_version');
    }
    set secretVersion(value) {
        this._secretVersion = value;
    }
    // Temporarily expose input value. Use with caution.
    get secretVersionInput() {
        return this._secretVersion;
    }
}
exports.ContainerAwsClusterControlPlaneProxyConfigOutputReference = ContainerAwsClusterControlPlaneProxyConfigOutputReference;
_o = JSII_RTTI_SYMBOL_1;
ContainerAwsClusterControlPlaneProxyConfigOutputReference[_o] = { fqn: "@cdktf/provider-google.containerAwsCluster.ContainerAwsClusterControlPlaneProxyConfigOutputReference", version: "14.13.1" };
function containerAwsClusterControlPlaneRootVolumeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        iops: cdktf.numberToTerraform(struct.iops),
        kms_key_arn: cdktf.stringToTerraform(struct.kmsKeyArn),
        size_gib: cdktf.numberToTerraform(struct.sizeGib),
        throughput: cdktf.numberToTerraform(struct.throughput),
        volume_type: cdktf.stringToTerraform(struct.volumeType),
    };
}
exports.containerAwsClusterControlPlaneRootVolumeToTerraform = containerAwsClusterControlPlaneRootVolumeToTerraform;
function containerAwsClusterControlPlaneRootVolumeToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        iops: {
            value: cdktf.numberToHclTerraform(struct.iops),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        kms_key_arn: {
            value: cdktf.stringToHclTerraform(struct.kmsKeyArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        size_gib: {
            value: cdktf.numberToHclTerraform(struct.sizeGib),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        throughput: {
            value: cdktf.numberToHclTerraform(struct.throughput),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        volume_type: {
            value: cdktf.stringToHclTerraform(struct.volumeType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.containerAwsClusterControlPlaneRootVolumeToHclTerraform = containerAwsClusterControlPlaneRootVolumeToHclTerraform;
class ContainerAwsClusterControlPlaneRootVolumeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._iops !== undefined) {
            hasAnyValues = true;
            internalValueResult.iops = this._iops;
        }
        if (this._kmsKeyArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyArn = this._kmsKeyArn;
        }
        if (this._sizeGib !== undefined) {
            hasAnyValues = true;
            internalValueResult.sizeGib = this._sizeGib;
        }
        if (this._throughput !== undefined) {
            hasAnyValues = true;
            internalValueResult.throughput = this._throughput;
        }
        if (this._volumeType !== undefined) {
            hasAnyValues = true;
            internalValueResult.volumeType = this._volumeType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._iops = undefined;
            this._kmsKeyArn = undefined;
            this._sizeGib = undefined;
            this._throughput = undefined;
            this._volumeType = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._iops = value.iops;
            this._kmsKeyArn = value.kmsKeyArn;
            this._sizeGib = value.sizeGib;
            this._throughput = value.throughput;
            this._volumeType = value.volumeType;
        }
    }
    get iops() {
        return this.getNumberAttribute('iops');
    }
    set iops(value) {
        this._iops = value;
    }
    resetIops() {
        this._iops = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get iopsInput() {
        return this._iops;
    }
    get kmsKeyArn() {
        return this.getStringAttribute('kms_key_arn');
    }
    set kmsKeyArn(value) {
        this._kmsKeyArn = value;
    }
    resetKmsKeyArn() {
        this._kmsKeyArn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyArnInput() {
        return this._kmsKeyArn;
    }
    get sizeGib() {
        return this.getNumberAttribute('size_gib');
    }
    set sizeGib(value) {
        this._sizeGib = value;
    }
    resetSizeGib() {
        this._sizeGib = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sizeGibInput() {
        return this._sizeGib;
    }
    get throughput() {
        return this.getNumberAttribute('throughput');
    }
    set throughput(value) {
        this._throughput = value;
    }
    resetThroughput() {
        this._throughput = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get throughputInput() {
        return this._throughput;
    }
    get volumeType() {
        return this.getStringAttribute('volume_type');
    }
    set volumeType(value) {
        this._volumeType = value;
    }
    resetVolumeType() {
        this._volumeType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get volumeTypeInput() {
        return this._volumeType;
    }
}
exports.ContainerAwsClusterControlPlaneRootVolumeOutputReference = ContainerAwsClusterControlPlaneRootVolumeOutputReference;
_p = JSII_RTTI_SYMBOL_1;
ContainerAwsClusterControlPlaneRootVolumeOutputReference[_p] = { fqn: "@cdktf/provider-google.containerAwsCluster.ContainerAwsClusterControlPlaneRootVolumeOutputReference", version: "14.13.1" };
function containerAwsClusterControlPlaneSshConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        ec2_key_pair: cdktf.stringToTerraform(struct.ec2KeyPair),
    };
}
exports.containerAwsClusterControlPlaneSshConfigToTerraform = containerAwsClusterControlPlaneSshConfigToTerraform;
function containerAwsClusterControlPlaneSshConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        ec2_key_pair: {
            value: cdktf.stringToHclTerraform(struct.ec2KeyPair),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.containerAwsClusterControlPlaneSshConfigToHclTerraform = containerAwsClusterControlPlaneSshConfigToHclTerraform;
class ContainerAwsClusterControlPlaneSshConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._ec2KeyPair !== undefined) {
            hasAnyValues = true;
            internalValueResult.ec2KeyPair = this._ec2KeyPair;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._ec2KeyPair = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._ec2KeyPair = value.ec2KeyPair;
        }
    }
    get ec2KeyPair() {
        return this.getStringAttribute('ec2_key_pair');
    }
    set ec2KeyPair(value) {
        this._ec2KeyPair = value;
    }
    // Temporarily expose input value. Use with caution.
    get ec2KeyPairInput() {
        return this._ec2KeyPair;
    }
}
exports.ContainerAwsClusterControlPlaneSshConfigOutputReference = ContainerAwsClusterControlPlaneSshConfigOutputReference;
_q = JSII_RTTI_SYMBOL_1;
ContainerAwsClusterControlPlaneSshConfigOutputReference[_q] = { fqn: "@cdktf/provider-google.containerAwsCluster.ContainerAwsClusterControlPlaneSshConfigOutputReference", version: "14.13.1" };
function containerAwsClusterControlPlaneToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        iam_instance_profile: cdktf.stringToTerraform(struct.iamInstanceProfile),
        instance_type: cdktf.stringToTerraform(struct.instanceType),
        security_group_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.securityGroupIds),
        subnet_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.subnetIds),
        tags: cdktf.hashMapper(cdktf.stringToTerraform)(struct.tags),
        version: cdktf.stringToTerraform(struct.version),
        aws_services_authentication: containerAwsClusterControlPlaneAwsServicesAuthenticationToTerraform(struct.awsServicesAuthentication),
        config_encryption: containerAwsClusterControlPlaneConfigEncryptionToTerraform(struct.configEncryption),
        database_encryption: containerAwsClusterControlPlaneDatabaseEncryptionToTerraform(struct.databaseEncryption),
        main_volume: containerAwsClusterControlPlaneMainVolumeToTerraform(struct.mainVolume),
        proxy_config: containerAwsClusterControlPlaneProxyConfigToTerraform(struct.proxyConfig),
        root_volume: containerAwsClusterControlPlaneRootVolumeToTerraform(struct.rootVolume),
        ssh_config: containerAwsClusterControlPlaneSshConfigToTerraform(struct.sshConfig),
    };
}
exports.containerAwsClusterControlPlaneToTerraform = containerAwsClusterControlPlaneToTerraform;
function containerAwsClusterControlPlaneToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        iam_instance_profile: {
            value: cdktf.stringToHclTerraform(struct.iamInstanceProfile),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        instance_type: {
            value: cdktf.stringToHclTerraform(struct.instanceType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        security_group_ids: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.securityGroupIds),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        subnet_ids: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.subnetIds),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        tags: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.tags),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        version: {
            value: cdktf.stringToHclTerraform(struct.version),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        aws_services_authentication: {
            value: containerAwsClusterControlPlaneAwsServicesAuthenticationToHclTerraform(struct.awsServicesAuthentication),
            isBlock: true,
            type: "list",
            storageClassType: "ContainerAwsClusterControlPlaneAwsServicesAuthenticationList",
        },
        config_encryption: {
            value: containerAwsClusterControlPlaneConfigEncryptionToHclTerraform(struct.configEncryption),
            isBlock: true,
            type: "list",
            storageClassType: "ContainerAwsClusterControlPlaneConfigEncryptionList",
        },
        database_encryption: {
            value: containerAwsClusterControlPlaneDatabaseEncryptionToHclTerraform(struct.databaseEncryption),
            isBlock: true,
            type: "list",
            storageClassType: "ContainerAwsClusterControlPlaneDatabaseEncryptionList",
        },
        main_volume: {
            value: containerAwsClusterControlPlaneMainVolumeToHclTerraform(struct.mainVolume),
            isBlock: true,
            type: "list",
            storageClassType: "ContainerAwsClusterControlPlaneMainVolumeList",
        },
        proxy_config: {
            value: containerAwsClusterControlPlaneProxyConfigToHclTerraform(struct.proxyConfig),
            isBlock: true,
            type: "list",
            storageClassType: "ContainerAwsClusterControlPlaneProxyConfigList",
        },
        root_volume: {
            value: containerAwsClusterControlPlaneRootVolumeToHclTerraform(struct.rootVolume),
            isBlock: true,
            type: "list",
            storageClassType: "ContainerAwsClusterControlPlaneRootVolumeList",
        },
        ssh_config: {
            value: containerAwsClusterControlPlaneSshConfigToHclTerraform(struct.sshConfig),
            isBlock: true,
            type: "list",
            storageClassType: "ContainerAwsClusterControlPlaneSshConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.containerAwsClusterControlPlaneToHclTerraform = containerAwsClusterControlPlaneToHclTerraform;
class ContainerAwsClusterControlPlaneOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // aws_services_authentication - computed: false, optional: false, required: true
        this._awsServicesAuthentication = new ContainerAwsClusterControlPlaneAwsServicesAuthenticationOutputReference(this, "aws_services_authentication");
        // config_encryption - computed: false, optional: false, required: true
        this._configEncryption = new ContainerAwsClusterControlPlaneConfigEncryptionOutputReference(this, "config_encryption");
        // database_encryption - computed: false, optional: false, required: true
        this._databaseEncryption = new ContainerAwsClusterControlPlaneDatabaseEncryptionOutputReference(this, "database_encryption");
        // main_volume - computed: false, optional: true, required: false
        this._mainVolume = new ContainerAwsClusterControlPlaneMainVolumeOutputReference(this, "main_volume");
        // proxy_config - computed: false, optional: true, required: false
        this._proxyConfig = new ContainerAwsClusterControlPlaneProxyConfigOutputReference(this, "proxy_config");
        // root_volume - computed: false, optional: true, required: false
        this._rootVolume = new ContainerAwsClusterControlPlaneRootVolumeOutputReference(this, "root_volume");
        // ssh_config - computed: false, optional: true, required: false
        this._sshConfig = new ContainerAwsClusterControlPlaneSshConfigOutputReference(this, "ssh_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._iamInstanceProfile !== undefined) {
            hasAnyValues = true;
            internalValueResult.iamInstanceProfile = this._iamInstanceProfile;
        }
        if (this._instanceType !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceType = this._instanceType;
        }
        if (this._securityGroupIds !== undefined) {
            hasAnyValues = true;
            internalValueResult.securityGroupIds = this._securityGroupIds;
        }
        if (this._subnetIds !== undefined) {
            hasAnyValues = true;
            internalValueResult.subnetIds = this._subnetIds;
        }
        if (this._tags !== undefined) {
            hasAnyValues = true;
            internalValueResult.tags = this._tags;
        }
        if (this._version !== undefined) {
            hasAnyValues = true;
            internalValueResult.version = this._version;
        }
        if (this._awsServicesAuthentication?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.awsServicesAuthentication = this._awsServicesAuthentication?.internalValue;
        }
        if (this._configEncryption?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.configEncryption = this._configEncryption?.internalValue;
        }
        if (this._databaseEncryption?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.databaseEncryption = this._databaseEncryption?.internalValue;
        }
        if (this._mainVolume?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mainVolume = this._mainVolume?.internalValue;
        }
        if (this._proxyConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.proxyConfig = this._proxyConfig?.internalValue;
        }
        if (this._rootVolume?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.rootVolume = this._rootVolume?.internalValue;
        }
        if (this._sshConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sshConfig = this._sshConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._iamInstanceProfile = undefined;
            this._instanceType = undefined;
            this._securityGroupIds = undefined;
            this._subnetIds = undefined;
            this._tags = undefined;
            this._version = undefined;
            this._awsServicesAuthentication.internalValue = undefined;
            this._configEncryption.internalValue = undefined;
            this._databaseEncryption.internalValue = undefined;
            this._mainVolume.internalValue = undefined;
            this._proxyConfig.internalValue = undefined;
            this._rootVolume.internalValue = undefined;
            this._sshConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._iamInstanceProfile = value.iamInstanceProfile;
            this._instanceType = value.instanceType;
            this._securityGroupIds = value.securityGroupIds;
            this._subnetIds = value.subnetIds;
            this._tags = value.tags;
            this._version = value.version;
            this._awsServicesAuthentication.internalValue = value.awsServicesAuthentication;
            this._configEncryption.internalValue = value.configEncryption;
            this._databaseEncryption.internalValue = value.databaseEncryption;
            this._mainVolume.internalValue = value.mainVolume;
            this._proxyConfig.internalValue = value.proxyConfig;
            this._rootVolume.internalValue = value.rootVolume;
            this._sshConfig.internalValue = value.sshConfig;
        }
    }
    get iamInstanceProfile() {
        return this.getStringAttribute('iam_instance_profile');
    }
    set iamInstanceProfile(value) {
        this._iamInstanceProfile = value;
    }
    // Temporarily expose input value. Use with caution.
    get iamInstanceProfileInput() {
        return this._iamInstanceProfile;
    }
    get instanceType() {
        return this.getStringAttribute('instance_type');
    }
    set instanceType(value) {
        this._instanceType = value;
    }
    resetInstanceType() {
        this._instanceType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceTypeInput() {
        return this._instanceType;
    }
    get securityGroupIds() {
        return this.getListAttribute('security_group_ids');
    }
    set securityGroupIds(value) {
        this._securityGroupIds = value;
    }
    resetSecurityGroupIds() {
        this._securityGroupIds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityGroupIdsInput() {
        return this._securityGroupIds;
    }
    get subnetIds() {
        return this.getListAttribute('subnet_ids');
    }
    set subnetIds(value) {
        this._subnetIds = value;
    }
    // Temporarily expose input value. Use with caution.
    get subnetIdsInput() {
        return this._subnetIds;
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get version() {
        return this.getStringAttribute('version');
    }
    set version(value) {
        this._version = value;
    }
    // Temporarily expose input value. Use with caution.
    get versionInput() {
        return this._version;
    }
    get awsServicesAuthentication() {
        return this._awsServicesAuthentication;
    }
    putAwsServicesAuthentication(value) {
        this._awsServicesAuthentication.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get awsServicesAuthenticationInput() {
        return this._awsServicesAuthentication.internalValue;
    }
    get configEncryption() {
        return this._configEncryption;
    }
    putConfigEncryption(value) {
        this._configEncryption.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get configEncryptionInput() {
        return this._configEncryption.internalValue;
    }
    get databaseEncryption() {
        return this._databaseEncryption;
    }
    putDatabaseEncryption(value) {
        this._databaseEncryption.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get databaseEncryptionInput() {
        return this._databaseEncryption.internalValue;
    }
    get mainVolume() {
        return this._mainVolume;
    }
    putMainVolume(value) {
        this._mainVolume.internalValue = value;
    }
    resetMainVolume() {
        this._mainVolume.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mainVolumeInput() {
        return this._mainVolume.internalValue;
    }
    get proxyConfig() {
        return this._proxyConfig;
    }
    putProxyConfig(value) {
        this._proxyConfig.internalValue = value;
    }
    resetProxyConfig() {
        this._proxyConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get proxyConfigInput() {
        return this._proxyConfig.internalValue;
    }
    get rootVolume() {
        return this._rootVolume;
    }
    putRootVolume(value) {
        this._rootVolume.internalValue = value;
    }
    resetRootVolume() {
        this._rootVolume.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rootVolumeInput() {
        return this._rootVolume.internalValue;
    }
    get sshConfig() {
        return this._sshConfig;
    }
    putSshConfig(value) {
        this._sshConfig.internalValue = value;
    }
    resetSshConfig() {
        this._sshConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sshConfigInput() {
        return this._sshConfig.internalValue;
    }
}
exports.ContainerAwsClusterControlPlaneOutputReference = ContainerAwsClusterControlPlaneOutputReference;
_r = JSII_RTTI_SYMBOL_1;
ContainerAwsClusterControlPlaneOutputReference[_r] = { fqn: "@cdktf/provider-google.containerAwsCluster.ContainerAwsClusterControlPlaneOutputReference", version: "14.13.1" };
function containerAwsClusterFleetToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        project: cdktf.stringToTerraform(struct.project),
    };
}
exports.containerAwsClusterFleetToTerraform = containerAwsClusterFleetToTerraform;
function containerAwsClusterFleetToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        project: {
            value: cdktf.stringToHclTerraform(struct.project),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.containerAwsClusterFleetToHclTerraform = containerAwsClusterFleetToHclTerraform;
class ContainerAwsClusterFleetOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._project !== undefined) {
            hasAnyValues = true;
            internalValueResult.project = this._project;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._project = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._project = value.project;
        }
    }
    // membership - computed: true, optional: false, required: false
    get membership() {
        return this.getStringAttribute('membership');
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
}
exports.ContainerAwsClusterFleetOutputReference = ContainerAwsClusterFleetOutputReference;
_s = JSII_RTTI_SYMBOL_1;
ContainerAwsClusterFleetOutputReference[_s] = { fqn: "@cdktf/provider-google.containerAwsCluster.ContainerAwsClusterFleetOutputReference", version: "14.13.1" };
function containerAwsClusterNetworkingToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        per_node_pool_sg_rules_disabled: cdktf.booleanToTerraform(struct.perNodePoolSgRulesDisabled),
        pod_address_cidr_blocks: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.podAddressCidrBlocks),
        service_address_cidr_blocks: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.serviceAddressCidrBlocks),
        vpc_id: cdktf.stringToTerraform(struct.vpcId),
    };
}
exports.containerAwsClusterNetworkingToTerraform = containerAwsClusterNetworkingToTerraform;
function containerAwsClusterNetworkingToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        per_node_pool_sg_rules_disabled: {
            value: cdktf.booleanToHclTerraform(struct.perNodePoolSgRulesDisabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        pod_address_cidr_blocks: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.podAddressCidrBlocks),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        service_address_cidr_blocks: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.serviceAddressCidrBlocks),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        vpc_id: {
            value: cdktf.stringToHclTerraform(struct.vpcId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.containerAwsClusterNetworkingToHclTerraform = containerAwsClusterNetworkingToHclTerraform;
class ContainerAwsClusterNetworkingOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._perNodePoolSgRulesDisabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.perNodePoolSgRulesDisabled = this._perNodePoolSgRulesDisabled;
        }
        if (this._podAddressCidrBlocks !== undefined) {
            hasAnyValues = true;
            internalValueResult.podAddressCidrBlocks = this._podAddressCidrBlocks;
        }
        if (this._serviceAddressCidrBlocks !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceAddressCidrBlocks = this._serviceAddressCidrBlocks;
        }
        if (this._vpcId !== undefined) {
            hasAnyValues = true;
            internalValueResult.vpcId = this._vpcId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._perNodePoolSgRulesDisabled = undefined;
            this._podAddressCidrBlocks = undefined;
            this._serviceAddressCidrBlocks = undefined;
            this._vpcId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._perNodePoolSgRulesDisabled = value.perNodePoolSgRulesDisabled;
            this._podAddressCidrBlocks = value.podAddressCidrBlocks;
            this._serviceAddressCidrBlocks = value.serviceAddressCidrBlocks;
            this._vpcId = value.vpcId;
        }
    }
    get perNodePoolSgRulesDisabled() {
        return this.getBooleanAttribute('per_node_pool_sg_rules_disabled');
    }
    set perNodePoolSgRulesDisabled(value) {
        this._perNodePoolSgRulesDisabled = value;
    }
    resetPerNodePoolSgRulesDisabled() {
        this._perNodePoolSgRulesDisabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get perNodePoolSgRulesDisabledInput() {
        return this._perNodePoolSgRulesDisabled;
    }
    get podAddressCidrBlocks() {
        return this.getListAttribute('pod_address_cidr_blocks');
    }
    set podAddressCidrBlocks(value) {
        this._podAddressCidrBlocks = value;
    }
    // Temporarily expose input value. Use with caution.
    get podAddressCidrBlocksInput() {
        return this._podAddressCidrBlocks;
    }
    get serviceAddressCidrBlocks() {
        return this.getListAttribute('service_address_cidr_blocks');
    }
    set serviceAddressCidrBlocks(value) {
        this._serviceAddressCidrBlocks = value;
    }
    // Temporarily expose input value. Use with caution.
    get serviceAddressCidrBlocksInput() {
        return this._serviceAddressCidrBlocks;
    }
    get vpcId() {
        return this.getStringAttribute('vpc_id');
    }
    set vpcId(value) {
        this._vpcId = value;
    }
    // Temporarily expose input value. Use with caution.
    get vpcIdInput() {
        return this._vpcId;
    }
}
exports.ContainerAwsClusterNetworkingOutputReference = ContainerAwsClusterNetworkingOutputReference;
_t = JSII_RTTI_SYMBOL_1;
ContainerAwsClusterNetworkingOutputReference[_t] = { fqn: "@cdktf/provider-google.containerAwsCluster.ContainerAwsClusterNetworkingOutputReference", version: "14.13.1" };
function containerAwsClusterTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.containerAwsClusterTimeoutsToTerraform = containerAwsClusterTimeoutsToTerraform;
function containerAwsClusterTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.containerAwsClusterTimeoutsToHclTerraform = containerAwsClusterTimeoutsToHclTerraform;
class ContainerAwsClusterTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.ContainerAwsClusterTimeoutsOutputReference = ContainerAwsClusterTimeoutsOutputReference;
_u = JSII_RTTI_SYMBOL_1;
ContainerAwsClusterTimeoutsOutputReference[_u] = { fqn: "@cdktf/provider-google.containerAwsCluster.ContainerAwsClusterTimeoutsOutputReference", version: "14.13.1" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/container_aws_cluster google_container_aws_cluster}
*/
class ContainerAwsCluster extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a ContainerAwsCluster resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the ContainerAwsCluster to import
    * @param importFromId The id of the existing ContainerAwsCluster that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/container_aws_cluster#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the ContainerAwsCluster to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_container_aws_cluster", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/container_aws_cluster google_container_aws_cluster} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ContainerAwsClusterConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_container_aws_cluster',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // effective_annotations - computed: true, optional: false, required: false
        this._effectiveAnnotations = new cdktf.StringMap(this, "effective_annotations");
        // workload_identity_config - computed: true, optional: false, required: false
        this._workloadIdentityConfig = new ContainerAwsClusterWorkloadIdentityConfigList(this, "workload_identity_config", false);
        // authorization - computed: false, optional: false, required: true
        this._authorization = new ContainerAwsClusterAuthorizationOutputReference(this, "authorization");
        // binary_authorization - computed: false, optional: true, required: false
        this._binaryAuthorization = new ContainerAwsClusterBinaryAuthorizationOutputReference(this, "binary_authorization");
        // control_plane - computed: false, optional: false, required: true
        this._controlPlane = new ContainerAwsClusterControlPlaneOutputReference(this, "control_plane");
        // fleet - computed: false, optional: false, required: true
        this._fleet = new ContainerAwsClusterFleetOutputReference(this, "fleet");
        // networking - computed: false, optional: false, required: true
        this._networking = new ContainerAwsClusterNetworkingOutputReference(this, "networking");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new ContainerAwsClusterTimeoutsOutputReference(this, "timeouts");
        this._annotations = config.annotations;
        this._awsRegion = config.awsRegion;
        this._description = config.description;
        this._id = config.id;
        this._location = config.location;
        this._name = config.name;
        this._project = config.project;
        this._authorization.internalValue = config.authorization;
        this._binaryAuthorization.internalValue = config.binaryAuthorization;
        this._controlPlane.internalValue = config.controlPlane;
        this._fleet.internalValue = config.fleet;
        this._networking.internalValue = config.networking;
        this._timeouts.internalValue = config.timeouts;
    }
    get annotations() {
        return this.getStringMapAttribute('annotations');
    }
    set annotations(value) {
        this._annotations = value;
    }
    resetAnnotations() {
        this._annotations = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get annotationsInput() {
        return this._annotations;
    }
    get awsRegion() {
        return this.getStringAttribute('aws_region');
    }
    set awsRegion(value) {
        this._awsRegion = value;
    }
    // Temporarily expose input value. Use with caution.
    get awsRegionInput() {
        return this._awsRegion;
    }
    // create_time - computed: true, optional: false, required: false
    get createTime() {
        return this.getStringAttribute('create_time');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get effectiveAnnotations() {
        return this._effectiveAnnotations;
    }
    // endpoint - computed: true, optional: false, required: false
    get endpoint() {
        return this.getStringAttribute('endpoint');
    }
    // etag - computed: true, optional: false, required: false
    get etag() {
        return this.getStringAttribute('etag');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    // reconciling - computed: true, optional: false, required: false
    get reconciling() {
        return this.getBooleanAttribute('reconciling');
    }
    // state - computed: true, optional: false, required: false
    get state() {
        return this.getStringAttribute('state');
    }
    // uid - computed: true, optional: false, required: false
    get uid() {
        return this.getStringAttribute('uid');
    }
    // update_time - computed: true, optional: false, required: false
    get updateTime() {
        return this.getStringAttribute('update_time');
    }
    get workloadIdentityConfig() {
        return this._workloadIdentityConfig;
    }
    get authorization() {
        return this._authorization;
    }
    putAuthorization(value) {
        this._authorization.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get authorizationInput() {
        return this._authorization.internalValue;
    }
    get binaryAuthorization() {
        return this._binaryAuthorization;
    }
    putBinaryAuthorization(value) {
        this._binaryAuthorization.internalValue = value;
    }
    resetBinaryAuthorization() {
        this._binaryAuthorization.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get binaryAuthorizationInput() {
        return this._binaryAuthorization.internalValue;
    }
    get controlPlane() {
        return this._controlPlane;
    }
    putControlPlane(value) {
        this._controlPlane.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get controlPlaneInput() {
        return this._controlPlane.internalValue;
    }
    get fleet() {
        return this._fleet;
    }
    putFleet(value) {
        this._fleet.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get fleetInput() {
        return this._fleet.internalValue;
    }
    get networking() {
        return this._networking;
    }
    putNetworking(value) {
        this._networking.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get networkingInput() {
        return this._networking.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            annotations: cdktf.hashMapper(cdktf.stringToTerraform)(this._annotations),
            aws_region: cdktf.stringToTerraform(this._awsRegion),
            description: cdktf.stringToTerraform(this._description),
            id: cdktf.stringToTerraform(this._id),
            location: cdktf.stringToTerraform(this._location),
            name: cdktf.stringToTerraform(this._name),
            project: cdktf.stringToTerraform(this._project),
            authorization: containerAwsClusterAuthorizationToTerraform(this._authorization.internalValue),
            binary_authorization: containerAwsClusterBinaryAuthorizationToTerraform(this._binaryAuthorization.internalValue),
            control_plane: containerAwsClusterControlPlaneToTerraform(this._controlPlane.internalValue),
            fleet: containerAwsClusterFleetToTerraform(this._fleet.internalValue),
            networking: containerAwsClusterNetworkingToTerraform(this._networking.internalValue),
            timeouts: containerAwsClusterTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            annotations: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._annotations),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            aws_region: {
                value: cdktf.stringToHclTerraform(this._awsRegion),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            description: {
                value: cdktf.stringToHclTerraform(this._description),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            location: {
                value: cdktf.stringToHclTerraform(this._location),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            name: {
                value: cdktf.stringToHclTerraform(this._name),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            project: {
                value: cdktf.stringToHclTerraform(this._project),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            authorization: {
                value: containerAwsClusterAuthorizationToHclTerraform(this._authorization.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ContainerAwsClusterAuthorizationList",
            },
            binary_authorization: {
                value: containerAwsClusterBinaryAuthorizationToHclTerraform(this._binaryAuthorization.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ContainerAwsClusterBinaryAuthorizationList",
            },
            control_plane: {
                value: containerAwsClusterControlPlaneToHclTerraform(this._controlPlane.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ContainerAwsClusterControlPlaneList",
            },
            fleet: {
                value: containerAwsClusterFleetToHclTerraform(this._fleet.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ContainerAwsClusterFleetList",
            },
            networking: {
                value: containerAwsClusterNetworkingToHclTerraform(this._networking.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ContainerAwsClusterNetworkingList",
            },
            timeouts: {
                value: containerAwsClusterTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "ContainerAwsClusterTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.ContainerAwsCluster = ContainerAwsCluster;
_v = JSII_RTTI_SYMBOL_1;
ContainerAwsCluster[_v] = { fqn: "@cdktf/provider-google.containerAwsCluster.ContainerAwsCluster", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
ContainerAwsCluster.tfResourceType = "google_container_aws_cluster";
//# sourceMappingURL=data:application/json;base64,