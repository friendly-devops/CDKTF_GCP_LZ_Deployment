"use strict";
var _a, _b, _c, _d, _e, _f, _g;
Object.defineProperty(exports, "__esModule", { value: true });
exports.VertexAiFeatureOnlineStore = exports.VertexAiFeatureOnlineStoreTimeoutsOutputReference = exports.vertexAiFeatureOnlineStoreTimeoutsToHclTerraform = exports.vertexAiFeatureOnlineStoreTimeoutsToTerraform = exports.VertexAiFeatureOnlineStoreOptimizedOutputReference = exports.vertexAiFeatureOnlineStoreOptimizedToHclTerraform = exports.vertexAiFeatureOnlineStoreOptimizedToTerraform = exports.VertexAiFeatureOnlineStoreDedicatedServingEndpointOutputReference = exports.vertexAiFeatureOnlineStoreDedicatedServingEndpointToHclTerraform = exports.vertexAiFeatureOnlineStoreDedicatedServingEndpointToTerraform = exports.VertexAiFeatureOnlineStoreDedicatedServingEndpointPrivateServiceConnectConfigOutputReference = exports.vertexAiFeatureOnlineStoreDedicatedServingEndpointPrivateServiceConnectConfigToHclTerraform = exports.vertexAiFeatureOnlineStoreDedicatedServingEndpointPrivateServiceConnectConfigToTerraform = exports.VertexAiFeatureOnlineStoreBigtableOutputReference = exports.vertexAiFeatureOnlineStoreBigtableToHclTerraform = exports.vertexAiFeatureOnlineStoreBigtableToTerraform = exports.VertexAiFeatureOnlineStoreBigtableAutoScalingOutputReference = exports.vertexAiFeatureOnlineStoreBigtableAutoScalingToHclTerraform = exports.vertexAiFeatureOnlineStoreBigtableAutoScalingToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function vertexAiFeatureOnlineStoreBigtableAutoScalingToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cpu_utilization_target: cdktf.numberToTerraform(struct.cpuUtilizationTarget),
        max_node_count: cdktf.numberToTerraform(struct.maxNodeCount),
        min_node_count: cdktf.numberToTerraform(struct.minNodeCount),
    };
}
exports.vertexAiFeatureOnlineStoreBigtableAutoScalingToTerraform = vertexAiFeatureOnlineStoreBigtableAutoScalingToTerraform;
function vertexAiFeatureOnlineStoreBigtableAutoScalingToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cpu_utilization_target: {
            value: cdktf.numberToHclTerraform(struct.cpuUtilizationTarget),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        max_node_count: {
            value: cdktf.numberToHclTerraform(struct.maxNodeCount),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        min_node_count: {
            value: cdktf.numberToHclTerraform(struct.minNodeCount),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.vertexAiFeatureOnlineStoreBigtableAutoScalingToHclTerraform = vertexAiFeatureOnlineStoreBigtableAutoScalingToHclTerraform;
class VertexAiFeatureOnlineStoreBigtableAutoScalingOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cpuUtilizationTarget !== undefined) {
            hasAnyValues = true;
            internalValueResult.cpuUtilizationTarget = this._cpuUtilizationTarget;
        }
        if (this._maxNodeCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxNodeCount = this._maxNodeCount;
        }
        if (this._minNodeCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.minNodeCount = this._minNodeCount;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cpuUtilizationTarget = undefined;
            this._maxNodeCount = undefined;
            this._minNodeCount = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cpuUtilizationTarget = value.cpuUtilizationTarget;
            this._maxNodeCount = value.maxNodeCount;
            this._minNodeCount = value.minNodeCount;
        }
    }
    get cpuUtilizationTarget() {
        return this.getNumberAttribute('cpu_utilization_target');
    }
    set cpuUtilizationTarget(value) {
        this._cpuUtilizationTarget = value;
    }
    resetCpuUtilizationTarget() {
        this._cpuUtilizationTarget = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cpuUtilizationTargetInput() {
        return this._cpuUtilizationTarget;
    }
    get maxNodeCount() {
        return this.getNumberAttribute('max_node_count');
    }
    set maxNodeCount(value) {
        this._maxNodeCount = value;
    }
    // Temporarily expose input value. Use with caution.
    get maxNodeCountInput() {
        return this._maxNodeCount;
    }
    get minNodeCount() {
        return this.getNumberAttribute('min_node_count');
    }
    set minNodeCount(value) {
        this._minNodeCount = value;
    }
    // Temporarily expose input value. Use with caution.
    get minNodeCountInput() {
        return this._minNodeCount;
    }
}
exports.VertexAiFeatureOnlineStoreBigtableAutoScalingOutputReference = VertexAiFeatureOnlineStoreBigtableAutoScalingOutputReference;
_a = JSII_RTTI_SYMBOL_1;
VertexAiFeatureOnlineStoreBigtableAutoScalingOutputReference[_a] = { fqn: "@cdktf/provider-google.vertexAiFeatureOnlineStore.VertexAiFeatureOnlineStoreBigtableAutoScalingOutputReference", version: "14.13.1" };
function vertexAiFeatureOnlineStoreBigtableToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        auto_scaling: vertexAiFeatureOnlineStoreBigtableAutoScalingToTerraform(struct.autoScaling),
    };
}
exports.vertexAiFeatureOnlineStoreBigtableToTerraform = vertexAiFeatureOnlineStoreBigtableToTerraform;
function vertexAiFeatureOnlineStoreBigtableToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        auto_scaling: {
            value: vertexAiFeatureOnlineStoreBigtableAutoScalingToHclTerraform(struct.autoScaling),
            isBlock: true,
            type: "list",
            storageClassType: "VertexAiFeatureOnlineStoreBigtableAutoScalingList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.vertexAiFeatureOnlineStoreBigtableToHclTerraform = vertexAiFeatureOnlineStoreBigtableToHclTerraform;
class VertexAiFeatureOnlineStoreBigtableOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // auto_scaling - computed: false, optional: false, required: true
        this._autoScaling = new VertexAiFeatureOnlineStoreBigtableAutoScalingOutputReference(this, "auto_scaling");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._autoScaling?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.autoScaling = this._autoScaling?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._autoScaling.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._autoScaling.internalValue = value.autoScaling;
        }
    }
    get autoScaling() {
        return this._autoScaling;
    }
    putAutoScaling(value) {
        this._autoScaling.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get autoScalingInput() {
        return this._autoScaling.internalValue;
    }
}
exports.VertexAiFeatureOnlineStoreBigtableOutputReference = VertexAiFeatureOnlineStoreBigtableOutputReference;
_b = JSII_RTTI_SYMBOL_1;
VertexAiFeatureOnlineStoreBigtableOutputReference[_b] = { fqn: "@cdktf/provider-google.vertexAiFeatureOnlineStore.VertexAiFeatureOnlineStoreBigtableOutputReference", version: "14.13.1" };
function vertexAiFeatureOnlineStoreDedicatedServingEndpointPrivateServiceConnectConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enable_private_service_connect: cdktf.booleanToTerraform(struct.enablePrivateServiceConnect),
        project_allowlist: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.projectAllowlist),
    };
}
exports.vertexAiFeatureOnlineStoreDedicatedServingEndpointPrivateServiceConnectConfigToTerraform = vertexAiFeatureOnlineStoreDedicatedServingEndpointPrivateServiceConnectConfigToTerraform;
function vertexAiFeatureOnlineStoreDedicatedServingEndpointPrivateServiceConnectConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enable_private_service_connect: {
            value: cdktf.booleanToHclTerraform(struct.enablePrivateServiceConnect),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        project_allowlist: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.projectAllowlist),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.vertexAiFeatureOnlineStoreDedicatedServingEndpointPrivateServiceConnectConfigToHclTerraform = vertexAiFeatureOnlineStoreDedicatedServingEndpointPrivateServiceConnectConfigToHclTerraform;
class VertexAiFeatureOnlineStoreDedicatedServingEndpointPrivateServiceConnectConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enablePrivateServiceConnect !== undefined) {
            hasAnyValues = true;
            internalValueResult.enablePrivateServiceConnect = this._enablePrivateServiceConnect;
        }
        if (this._projectAllowlist !== undefined) {
            hasAnyValues = true;
            internalValueResult.projectAllowlist = this._projectAllowlist;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enablePrivateServiceConnect = undefined;
            this._projectAllowlist = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enablePrivateServiceConnect = value.enablePrivateServiceConnect;
            this._projectAllowlist = value.projectAllowlist;
        }
    }
    get enablePrivateServiceConnect() {
        return this.getBooleanAttribute('enable_private_service_connect');
    }
    set enablePrivateServiceConnect(value) {
        this._enablePrivateServiceConnect = value;
    }
    // Temporarily expose input value. Use with caution.
    get enablePrivateServiceConnectInput() {
        return this._enablePrivateServiceConnect;
    }
    get projectAllowlist() {
        return this.getListAttribute('project_allowlist');
    }
    set projectAllowlist(value) {
        this._projectAllowlist = value;
    }
    resetProjectAllowlist() {
        this._projectAllowlist = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectAllowlistInput() {
        return this._projectAllowlist;
    }
}
exports.VertexAiFeatureOnlineStoreDedicatedServingEndpointPrivateServiceConnectConfigOutputReference = VertexAiFeatureOnlineStoreDedicatedServingEndpointPrivateServiceConnectConfigOutputReference;
_c = JSII_RTTI_SYMBOL_1;
VertexAiFeatureOnlineStoreDedicatedServingEndpointPrivateServiceConnectConfigOutputReference[_c] = { fqn: "@cdktf/provider-google.vertexAiFeatureOnlineStore.VertexAiFeatureOnlineStoreDedicatedServingEndpointPrivateServiceConnectConfigOutputReference", version: "14.13.1" };
function vertexAiFeatureOnlineStoreDedicatedServingEndpointToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        private_service_connect_config: vertexAiFeatureOnlineStoreDedicatedServingEndpointPrivateServiceConnectConfigToTerraform(struct.privateServiceConnectConfig),
    };
}
exports.vertexAiFeatureOnlineStoreDedicatedServingEndpointToTerraform = vertexAiFeatureOnlineStoreDedicatedServingEndpointToTerraform;
function vertexAiFeatureOnlineStoreDedicatedServingEndpointToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        private_service_connect_config: {
            value: vertexAiFeatureOnlineStoreDedicatedServingEndpointPrivateServiceConnectConfigToHclTerraform(struct.privateServiceConnectConfig),
            isBlock: true,
            type: "list",
            storageClassType: "VertexAiFeatureOnlineStoreDedicatedServingEndpointPrivateServiceConnectConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.vertexAiFeatureOnlineStoreDedicatedServingEndpointToHclTerraform = vertexAiFeatureOnlineStoreDedicatedServingEndpointToHclTerraform;
class VertexAiFeatureOnlineStoreDedicatedServingEndpointOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // private_service_connect_config - computed: false, optional: true, required: false
        this._privateServiceConnectConfig = new VertexAiFeatureOnlineStoreDedicatedServingEndpointPrivateServiceConnectConfigOutputReference(this, "private_service_connect_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._privateServiceConnectConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.privateServiceConnectConfig = this._privateServiceConnectConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._privateServiceConnectConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._privateServiceConnectConfig.internalValue = value.privateServiceConnectConfig;
        }
    }
    // public_endpoint_domain_name - computed: true, optional: false, required: false
    get publicEndpointDomainName() {
        return this.getStringAttribute('public_endpoint_domain_name');
    }
    // service_attachment - computed: true, optional: false, required: false
    get serviceAttachment() {
        return this.getStringAttribute('service_attachment');
    }
    get privateServiceConnectConfig() {
        return this._privateServiceConnectConfig;
    }
    putPrivateServiceConnectConfig(value) {
        this._privateServiceConnectConfig.internalValue = value;
    }
    resetPrivateServiceConnectConfig() {
        this._privateServiceConnectConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get privateServiceConnectConfigInput() {
        return this._privateServiceConnectConfig.internalValue;
    }
}
exports.VertexAiFeatureOnlineStoreDedicatedServingEndpointOutputReference = VertexAiFeatureOnlineStoreDedicatedServingEndpointOutputReference;
_d = JSII_RTTI_SYMBOL_1;
VertexAiFeatureOnlineStoreDedicatedServingEndpointOutputReference[_d] = { fqn: "@cdktf/provider-google.vertexAiFeatureOnlineStore.VertexAiFeatureOnlineStoreDedicatedServingEndpointOutputReference", version: "14.13.1" };
function vertexAiFeatureOnlineStoreOptimizedToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.vertexAiFeatureOnlineStoreOptimizedToTerraform = vertexAiFeatureOnlineStoreOptimizedToTerraform;
function vertexAiFeatureOnlineStoreOptimizedToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.vertexAiFeatureOnlineStoreOptimizedToHclTerraform = vertexAiFeatureOnlineStoreOptimizedToHclTerraform;
class VertexAiFeatureOnlineStoreOptimizedOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.VertexAiFeatureOnlineStoreOptimizedOutputReference = VertexAiFeatureOnlineStoreOptimizedOutputReference;
_e = JSII_RTTI_SYMBOL_1;
VertexAiFeatureOnlineStoreOptimizedOutputReference[_e] = { fqn: "@cdktf/provider-google.vertexAiFeatureOnlineStore.VertexAiFeatureOnlineStoreOptimizedOutputReference", version: "14.13.1" };
function vertexAiFeatureOnlineStoreTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.vertexAiFeatureOnlineStoreTimeoutsToTerraform = vertexAiFeatureOnlineStoreTimeoutsToTerraform;
function vertexAiFeatureOnlineStoreTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.vertexAiFeatureOnlineStoreTimeoutsToHclTerraform = vertexAiFeatureOnlineStoreTimeoutsToHclTerraform;
class VertexAiFeatureOnlineStoreTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.VertexAiFeatureOnlineStoreTimeoutsOutputReference = VertexAiFeatureOnlineStoreTimeoutsOutputReference;
_f = JSII_RTTI_SYMBOL_1;
VertexAiFeatureOnlineStoreTimeoutsOutputReference[_f] = { fqn: "@cdktf/provider-google.vertexAiFeatureOnlineStore.VertexAiFeatureOnlineStoreTimeoutsOutputReference", version: "14.13.1" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/vertex_ai_feature_online_store google_vertex_ai_feature_online_store}
*/
class VertexAiFeatureOnlineStore extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a VertexAiFeatureOnlineStore resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the VertexAiFeatureOnlineStore to import
    * @param importFromId The id of the existing VertexAiFeatureOnlineStore that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/vertex_ai_feature_online_store#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the VertexAiFeatureOnlineStore to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_vertex_ai_feature_online_store", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/vertex_ai_feature_online_store google_vertex_ai_feature_online_store} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options VertexAiFeatureOnlineStoreConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_vertex_ai_feature_online_store',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // effective_labels - computed: true, optional: false, required: false
        this._effectiveLabels = new cdktf.StringMap(this, "effective_labels");
        // terraform_labels - computed: true, optional: false, required: false
        this._terraformLabels = new cdktf.StringMap(this, "terraform_labels");
        // bigtable - computed: false, optional: true, required: false
        this._bigtable = new VertexAiFeatureOnlineStoreBigtableOutputReference(this, "bigtable");
        // dedicated_serving_endpoint - computed: false, optional: true, required: false
        this._dedicatedServingEndpoint = new VertexAiFeatureOnlineStoreDedicatedServingEndpointOutputReference(this, "dedicated_serving_endpoint");
        // optimized - computed: false, optional: true, required: false
        this._optimized = new VertexAiFeatureOnlineStoreOptimizedOutputReference(this, "optimized");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new VertexAiFeatureOnlineStoreTimeoutsOutputReference(this, "timeouts");
        this._forceDestroy = config.forceDestroy;
        this._id = config.id;
        this._labels = config.labels;
        this._name = config.name;
        this._project = config.project;
        this._region = config.region;
        this._bigtable.internalValue = config.bigtable;
        this._dedicatedServingEndpoint.internalValue = config.dedicatedServingEndpoint;
        this._optimized.internalValue = config.optimized;
        this._timeouts.internalValue = config.timeouts;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // create_time - computed: true, optional: false, required: false
    get createTime() {
        return this.getStringAttribute('create_time');
    }
    get effectiveLabels() {
        return this._effectiveLabels;
    }
    // etag - computed: true, optional: false, required: false
    get etag() {
        return this.getStringAttribute('etag');
    }
    get forceDestroy() {
        return this.getBooleanAttribute('force_destroy');
    }
    set forceDestroy(value) {
        this._forceDestroy = value;
    }
    resetForceDestroy() {
        this._forceDestroy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get forceDestroyInput() {
        return this._forceDestroy;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get region() {
        return this.getStringAttribute('region');
    }
    set region(value) {
        this._region = value;
    }
    resetRegion() {
        this._region = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get regionInput() {
        return this._region;
    }
    // state - computed: true, optional: false, required: false
    get state() {
        return this.getStringAttribute('state');
    }
    get terraformLabels() {
        return this._terraformLabels;
    }
    // update_time - computed: true, optional: false, required: false
    get updateTime() {
        return this.getStringAttribute('update_time');
    }
    get bigtable() {
        return this._bigtable;
    }
    putBigtable(value) {
        this._bigtable.internalValue = value;
    }
    resetBigtable() {
        this._bigtable.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bigtableInput() {
        return this._bigtable.internalValue;
    }
    get dedicatedServingEndpoint() {
        return this._dedicatedServingEndpoint;
    }
    putDedicatedServingEndpoint(value) {
        this._dedicatedServingEndpoint.internalValue = value;
    }
    resetDedicatedServingEndpoint() {
        this._dedicatedServingEndpoint.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dedicatedServingEndpointInput() {
        return this._dedicatedServingEndpoint.internalValue;
    }
    get optimized() {
        return this._optimized;
    }
    putOptimized(value) {
        this._optimized.internalValue = value;
    }
    resetOptimized() {
        this._optimized.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get optimizedInput() {
        return this._optimized.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            force_destroy: cdktf.booleanToTerraform(this._forceDestroy),
            id: cdktf.stringToTerraform(this._id),
            labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._labels),
            name: cdktf.stringToTerraform(this._name),
            project: cdktf.stringToTerraform(this._project),
            region: cdktf.stringToTerraform(this._region),
            bigtable: vertexAiFeatureOnlineStoreBigtableToTerraform(this._bigtable.internalValue),
            dedicated_serving_endpoint: vertexAiFeatureOnlineStoreDedicatedServingEndpointToTerraform(this._dedicatedServingEndpoint.internalValue),
            optimized: vertexAiFeatureOnlineStoreOptimizedToTerraform(this._optimized.internalValue),
            timeouts: vertexAiFeatureOnlineStoreTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            force_destroy: {
                value: cdktf.booleanToHclTerraform(this._forceDestroy),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            labels: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._labels),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            name: {
                value: cdktf.stringToHclTerraform(this._name),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            project: {
                value: cdktf.stringToHclTerraform(this._project),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            region: {
                value: cdktf.stringToHclTerraform(this._region),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            bigtable: {
                value: vertexAiFeatureOnlineStoreBigtableToHclTerraform(this._bigtable.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "VertexAiFeatureOnlineStoreBigtableList",
            },
            dedicated_serving_endpoint: {
                value: vertexAiFeatureOnlineStoreDedicatedServingEndpointToHclTerraform(this._dedicatedServingEndpoint.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "VertexAiFeatureOnlineStoreDedicatedServingEndpointList",
            },
            optimized: {
                value: vertexAiFeatureOnlineStoreOptimizedToHclTerraform(this._optimized.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "VertexAiFeatureOnlineStoreOptimizedList",
            },
            timeouts: {
                value: vertexAiFeatureOnlineStoreTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "VertexAiFeatureOnlineStoreTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.VertexAiFeatureOnlineStore = VertexAiFeatureOnlineStore;
_g = JSII_RTTI_SYMBOL_1;
VertexAiFeatureOnlineStore[_g] = { fqn: "@cdktf/provider-google.vertexAiFeatureOnlineStore.VertexAiFeatureOnlineStore", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
VertexAiFeatureOnlineStore.tfResourceType = "google_vertex_ai_feature_online_store";
//# sourceMappingURL=data:application/json;base64,