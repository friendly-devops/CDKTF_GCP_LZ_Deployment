"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataprocBatch = exports.DataprocBatchTimeoutsOutputReference = exports.dataprocBatchTimeoutsToHclTerraform = exports.dataprocBatchTimeoutsToTerraform = exports.DataprocBatchSparkSqlBatchOutputReference = exports.dataprocBatchSparkSqlBatchToHclTerraform = exports.dataprocBatchSparkSqlBatchToTerraform = exports.DataprocBatchSparkRBatchOutputReference = exports.dataprocBatchSparkRBatchToHclTerraform = exports.dataprocBatchSparkRBatchToTerraform = exports.DataprocBatchSparkBatchOutputReference = exports.dataprocBatchSparkBatchToHclTerraform = exports.dataprocBatchSparkBatchToTerraform = exports.DataprocBatchRuntimeConfigOutputReference = exports.dataprocBatchRuntimeConfigToHclTerraform = exports.dataprocBatchRuntimeConfigToTerraform = exports.DataprocBatchRuntimeConfigAutotuningConfigOutputReference = exports.dataprocBatchRuntimeConfigAutotuningConfigToHclTerraform = exports.dataprocBatchRuntimeConfigAutotuningConfigToTerraform = exports.DataprocBatchPysparkBatchOutputReference = exports.dataprocBatchPysparkBatchToHclTerraform = exports.dataprocBatchPysparkBatchToTerraform = exports.DataprocBatchEnvironmentConfigOutputReference = exports.dataprocBatchEnvironmentConfigToHclTerraform = exports.dataprocBatchEnvironmentConfigToTerraform = exports.DataprocBatchEnvironmentConfigPeripheralsConfigOutputReference = exports.dataprocBatchEnvironmentConfigPeripheralsConfigToHclTerraform = exports.dataprocBatchEnvironmentConfigPeripheralsConfigToTerraform = exports.DataprocBatchEnvironmentConfigPeripheralsConfigSparkHistoryServerConfigOutputReference = exports.dataprocBatchEnvironmentConfigPeripheralsConfigSparkHistoryServerConfigToHclTerraform = exports.dataprocBatchEnvironmentConfigPeripheralsConfigSparkHistoryServerConfigToTerraform = exports.DataprocBatchEnvironmentConfigExecutionConfigOutputReference = exports.dataprocBatchEnvironmentConfigExecutionConfigToHclTerraform = exports.dataprocBatchEnvironmentConfigExecutionConfigToTerraform = exports.DataprocBatchStateHistoryList = exports.DataprocBatchStateHistoryOutputReference = exports.dataprocBatchStateHistoryToHclTerraform = exports.dataprocBatchStateHistoryToTerraform = exports.DataprocBatchRuntimeInfoList = exports.DataprocBatchRuntimeInfoOutputReference = exports.dataprocBatchRuntimeInfoToHclTerraform = exports.dataprocBatchRuntimeInfoToTerraform = exports.DataprocBatchRuntimeInfoCurrentUsageList = exports.DataprocBatchRuntimeInfoCurrentUsageOutputReference = exports.dataprocBatchRuntimeInfoCurrentUsageToHclTerraform = exports.dataprocBatchRuntimeInfoCurrentUsageToTerraform = exports.DataprocBatchRuntimeInfoApproximateUsageList = exports.DataprocBatchRuntimeInfoApproximateUsageOutputReference = exports.dataprocBatchRuntimeInfoApproximateUsageToHclTerraform = exports.dataprocBatchRuntimeInfoApproximateUsageToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function dataprocBatchRuntimeInfoApproximateUsageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.dataprocBatchRuntimeInfoApproximateUsageToTerraform = dataprocBatchRuntimeInfoApproximateUsageToTerraform;
function dataprocBatchRuntimeInfoApproximateUsageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.dataprocBatchRuntimeInfoApproximateUsageToHclTerraform = dataprocBatchRuntimeInfoApproximateUsageToHclTerraform;
class DataprocBatchRuntimeInfoApproximateUsageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // accelerator_type - computed: true, optional: false, required: false
    get acceleratorType() {
        return this.getStringAttribute('accelerator_type');
    }
    // milli_accelerator_seconds - computed: true, optional: false, required: false
    get milliAcceleratorSeconds() {
        return this.getStringAttribute('milli_accelerator_seconds');
    }
    // milli_dcu_seconds - computed: true, optional: false, required: false
    get milliDcuSeconds() {
        return this.getStringAttribute('milli_dcu_seconds');
    }
    // shuffle_storage_gb_seconds - computed: true, optional: false, required: false
    get shuffleStorageGbSeconds() {
        return this.getStringAttribute('shuffle_storage_gb_seconds');
    }
}
exports.DataprocBatchRuntimeInfoApproximateUsageOutputReference = DataprocBatchRuntimeInfoApproximateUsageOutputReference;
_a = JSII_RTTI_SYMBOL_1;
DataprocBatchRuntimeInfoApproximateUsageOutputReference[_a] = { fqn: "@cdktf/provider-google.dataprocBatch.DataprocBatchRuntimeInfoApproximateUsageOutputReference", version: "14.13.1" };
class DataprocBatchRuntimeInfoApproximateUsageList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataprocBatchRuntimeInfoApproximateUsageOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataprocBatchRuntimeInfoApproximateUsageList = DataprocBatchRuntimeInfoApproximateUsageList;
_b = JSII_RTTI_SYMBOL_1;
DataprocBatchRuntimeInfoApproximateUsageList[_b] = { fqn: "@cdktf/provider-google.dataprocBatch.DataprocBatchRuntimeInfoApproximateUsageList", version: "14.13.1" };
function dataprocBatchRuntimeInfoCurrentUsageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.dataprocBatchRuntimeInfoCurrentUsageToTerraform = dataprocBatchRuntimeInfoCurrentUsageToTerraform;
function dataprocBatchRuntimeInfoCurrentUsageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.dataprocBatchRuntimeInfoCurrentUsageToHclTerraform = dataprocBatchRuntimeInfoCurrentUsageToHclTerraform;
class DataprocBatchRuntimeInfoCurrentUsageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // accelerator_type - computed: true, optional: false, required: false
    get acceleratorType() {
        return this.getStringAttribute('accelerator_type');
    }
    // milli_accelerator - computed: true, optional: false, required: false
    get milliAccelerator() {
        return this.getStringAttribute('milli_accelerator');
    }
    // milli_dcu - computed: true, optional: false, required: false
    get milliDcu() {
        return this.getStringAttribute('milli_dcu');
    }
    // milli_dcu_premium - computed: true, optional: false, required: false
    get milliDcuPremium() {
        return this.getStringAttribute('milli_dcu_premium');
    }
    // shuffle_storage_gb - computed: true, optional: false, required: false
    get shuffleStorageGb() {
        return this.getStringAttribute('shuffle_storage_gb');
    }
    // shuffle_storage_gb_premium - computed: true, optional: false, required: false
    get shuffleStorageGbPremium() {
        return this.getStringAttribute('shuffle_storage_gb_premium');
    }
    // snapshot_time - computed: true, optional: false, required: false
    get snapshotTime() {
        return this.getStringAttribute('snapshot_time');
    }
}
exports.DataprocBatchRuntimeInfoCurrentUsageOutputReference = DataprocBatchRuntimeInfoCurrentUsageOutputReference;
_c = JSII_RTTI_SYMBOL_1;
DataprocBatchRuntimeInfoCurrentUsageOutputReference[_c] = { fqn: "@cdktf/provider-google.dataprocBatch.DataprocBatchRuntimeInfoCurrentUsageOutputReference", version: "14.13.1" };
class DataprocBatchRuntimeInfoCurrentUsageList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataprocBatchRuntimeInfoCurrentUsageOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataprocBatchRuntimeInfoCurrentUsageList = DataprocBatchRuntimeInfoCurrentUsageList;
_d = JSII_RTTI_SYMBOL_1;
DataprocBatchRuntimeInfoCurrentUsageList[_d] = { fqn: "@cdktf/provider-google.dataprocBatch.DataprocBatchRuntimeInfoCurrentUsageList", version: "14.13.1" };
function dataprocBatchRuntimeInfoToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.dataprocBatchRuntimeInfoToTerraform = dataprocBatchRuntimeInfoToTerraform;
function dataprocBatchRuntimeInfoToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.dataprocBatchRuntimeInfoToHclTerraform = dataprocBatchRuntimeInfoToHclTerraform;
class DataprocBatchRuntimeInfoOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // approximate_usage - computed: true, optional: false, required: false
        this._approximateUsage = new DataprocBatchRuntimeInfoApproximateUsageList(this, "approximate_usage", false);
        // current_usage - computed: true, optional: false, required: false
        this._currentUsage = new DataprocBatchRuntimeInfoCurrentUsageList(this, "current_usage", false);
        // endpoints - computed: true, optional: false, required: false
        this._endpoints = new cdktf.StringMap(this, "endpoints");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    get approximateUsage() {
        return this._approximateUsage;
    }
    get currentUsage() {
        return this._currentUsage;
    }
    // diagnostic_output_uri - computed: true, optional: false, required: false
    get diagnosticOutputUri() {
        return this.getStringAttribute('diagnostic_output_uri');
    }
    get endpoints() {
        return this._endpoints;
    }
    // output_uri - computed: true, optional: false, required: false
    get outputUri() {
        return this.getStringAttribute('output_uri');
    }
}
exports.DataprocBatchRuntimeInfoOutputReference = DataprocBatchRuntimeInfoOutputReference;
_e = JSII_RTTI_SYMBOL_1;
DataprocBatchRuntimeInfoOutputReference[_e] = { fqn: "@cdktf/provider-google.dataprocBatch.DataprocBatchRuntimeInfoOutputReference", version: "14.13.1" };
class DataprocBatchRuntimeInfoList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataprocBatchRuntimeInfoOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataprocBatchRuntimeInfoList = DataprocBatchRuntimeInfoList;
_f = JSII_RTTI_SYMBOL_1;
DataprocBatchRuntimeInfoList[_f] = { fqn: "@cdktf/provider-google.dataprocBatch.DataprocBatchRuntimeInfoList", version: "14.13.1" };
function dataprocBatchStateHistoryToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.dataprocBatchStateHistoryToTerraform = dataprocBatchStateHistoryToTerraform;
function dataprocBatchStateHistoryToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.dataprocBatchStateHistoryToHclTerraform = dataprocBatchStateHistoryToHclTerraform;
class DataprocBatchStateHistoryOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // state - computed: true, optional: false, required: false
    get state() {
        return this.getStringAttribute('state');
    }
    // state_message - computed: true, optional: false, required: false
    get stateMessage() {
        return this.getStringAttribute('state_message');
    }
    // state_start_time - computed: true, optional: false, required: false
    get stateStartTime() {
        return this.getStringAttribute('state_start_time');
    }
}
exports.DataprocBatchStateHistoryOutputReference = DataprocBatchStateHistoryOutputReference;
_g = JSII_RTTI_SYMBOL_1;
DataprocBatchStateHistoryOutputReference[_g] = { fqn: "@cdktf/provider-google.dataprocBatch.DataprocBatchStateHistoryOutputReference", version: "14.13.1" };
class DataprocBatchStateHistoryList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataprocBatchStateHistoryOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataprocBatchStateHistoryList = DataprocBatchStateHistoryList;
_h = JSII_RTTI_SYMBOL_1;
DataprocBatchStateHistoryList[_h] = { fqn: "@cdktf/provider-google.dataprocBatch.DataprocBatchStateHistoryList", version: "14.13.1" };
function dataprocBatchEnvironmentConfigExecutionConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        kms_key: cdktf.stringToTerraform(struct.kmsKey),
        network_tags: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.networkTags),
        network_uri: cdktf.stringToTerraform(struct.networkUri),
        service_account: cdktf.stringToTerraform(struct.serviceAccount),
        staging_bucket: cdktf.stringToTerraform(struct.stagingBucket),
        subnetwork_uri: cdktf.stringToTerraform(struct.subnetworkUri),
        ttl: cdktf.stringToTerraform(struct.ttl),
    };
}
exports.dataprocBatchEnvironmentConfigExecutionConfigToTerraform = dataprocBatchEnvironmentConfigExecutionConfigToTerraform;
function dataprocBatchEnvironmentConfigExecutionConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        kms_key: {
            value: cdktf.stringToHclTerraform(struct.kmsKey),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        network_tags: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.networkTags),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        network_uri: {
            value: cdktf.stringToHclTerraform(struct.networkUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        service_account: {
            value: cdktf.stringToHclTerraform(struct.serviceAccount),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        staging_bucket: {
            value: cdktf.stringToHclTerraform(struct.stagingBucket),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        subnetwork_uri: {
            value: cdktf.stringToHclTerraform(struct.subnetworkUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        ttl: {
            value: cdktf.stringToHclTerraform(struct.ttl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocBatchEnvironmentConfigExecutionConfigToHclTerraform = dataprocBatchEnvironmentConfigExecutionConfigToHclTerraform;
class DataprocBatchEnvironmentConfigExecutionConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._kmsKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKey = this._kmsKey;
        }
        if (this._networkTags !== undefined) {
            hasAnyValues = true;
            internalValueResult.networkTags = this._networkTags;
        }
        if (this._networkUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.networkUri = this._networkUri;
        }
        if (this._serviceAccount !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceAccount = this._serviceAccount;
        }
        if (this._stagingBucket !== undefined) {
            hasAnyValues = true;
            internalValueResult.stagingBucket = this._stagingBucket;
        }
        if (this._subnetworkUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.subnetworkUri = this._subnetworkUri;
        }
        if (this._ttl !== undefined) {
            hasAnyValues = true;
            internalValueResult.ttl = this._ttl;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._kmsKey = undefined;
            this._networkTags = undefined;
            this._networkUri = undefined;
            this._serviceAccount = undefined;
            this._stagingBucket = undefined;
            this._subnetworkUri = undefined;
            this._ttl = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._kmsKey = value.kmsKey;
            this._networkTags = value.networkTags;
            this._networkUri = value.networkUri;
            this._serviceAccount = value.serviceAccount;
            this._stagingBucket = value.stagingBucket;
            this._subnetworkUri = value.subnetworkUri;
            this._ttl = value.ttl;
        }
    }
    get kmsKey() {
        return this.getStringAttribute('kms_key');
    }
    set kmsKey(value) {
        this._kmsKey = value;
    }
    resetKmsKey() {
        this._kmsKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyInput() {
        return this._kmsKey;
    }
    get networkTags() {
        return this.getListAttribute('network_tags');
    }
    set networkTags(value) {
        this._networkTags = value;
    }
    resetNetworkTags() {
        this._networkTags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkTagsInput() {
        return this._networkTags;
    }
    get networkUri() {
        return this.getStringAttribute('network_uri');
    }
    set networkUri(value) {
        this._networkUri = value;
    }
    resetNetworkUri() {
        this._networkUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkUriInput() {
        return this._networkUri;
    }
    get serviceAccount() {
        return this.getStringAttribute('service_account');
    }
    set serviceAccount(value) {
        this._serviceAccount = value;
    }
    resetServiceAccount() {
        this._serviceAccount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceAccountInput() {
        return this._serviceAccount;
    }
    get stagingBucket() {
        return this.getStringAttribute('staging_bucket');
    }
    set stagingBucket(value) {
        this._stagingBucket = value;
    }
    resetStagingBucket() {
        this._stagingBucket = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stagingBucketInput() {
        return this._stagingBucket;
    }
    get subnetworkUri() {
        return this.getStringAttribute('subnetwork_uri');
    }
    set subnetworkUri(value) {
        this._subnetworkUri = value;
    }
    resetSubnetworkUri() {
        this._subnetworkUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subnetworkUriInput() {
        return this._subnetworkUri;
    }
    get ttl() {
        return this.getStringAttribute('ttl');
    }
    set ttl(value) {
        this._ttl = value;
    }
    resetTtl() {
        this._ttl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ttlInput() {
        return this._ttl;
    }
}
exports.DataprocBatchEnvironmentConfigExecutionConfigOutputReference = DataprocBatchEnvironmentConfigExecutionConfigOutputReference;
_j = JSII_RTTI_SYMBOL_1;
DataprocBatchEnvironmentConfigExecutionConfigOutputReference[_j] = { fqn: "@cdktf/provider-google.dataprocBatch.DataprocBatchEnvironmentConfigExecutionConfigOutputReference", version: "14.13.1" };
function dataprocBatchEnvironmentConfigPeripheralsConfigSparkHistoryServerConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        dataproc_cluster: cdktf.stringToTerraform(struct.dataprocCluster),
    };
}
exports.dataprocBatchEnvironmentConfigPeripheralsConfigSparkHistoryServerConfigToTerraform = dataprocBatchEnvironmentConfigPeripheralsConfigSparkHistoryServerConfigToTerraform;
function dataprocBatchEnvironmentConfigPeripheralsConfigSparkHistoryServerConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        dataproc_cluster: {
            value: cdktf.stringToHclTerraform(struct.dataprocCluster),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocBatchEnvironmentConfigPeripheralsConfigSparkHistoryServerConfigToHclTerraform = dataprocBatchEnvironmentConfigPeripheralsConfigSparkHistoryServerConfigToHclTerraform;
class DataprocBatchEnvironmentConfigPeripheralsConfigSparkHistoryServerConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dataprocCluster !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataprocCluster = this._dataprocCluster;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._dataprocCluster = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._dataprocCluster = value.dataprocCluster;
        }
    }
    get dataprocCluster() {
        return this.getStringAttribute('dataproc_cluster');
    }
    set dataprocCluster(value) {
        this._dataprocCluster = value;
    }
    resetDataprocCluster() {
        this._dataprocCluster = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataprocClusterInput() {
        return this._dataprocCluster;
    }
}
exports.DataprocBatchEnvironmentConfigPeripheralsConfigSparkHistoryServerConfigOutputReference = DataprocBatchEnvironmentConfigPeripheralsConfigSparkHistoryServerConfigOutputReference;
_k = JSII_RTTI_SYMBOL_1;
DataprocBatchEnvironmentConfigPeripheralsConfigSparkHistoryServerConfigOutputReference[_k] = { fqn: "@cdktf/provider-google.dataprocBatch.DataprocBatchEnvironmentConfigPeripheralsConfigSparkHistoryServerConfigOutputReference", version: "14.13.1" };
function dataprocBatchEnvironmentConfigPeripheralsConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        metastore_service: cdktf.stringToTerraform(struct.metastoreService),
        spark_history_server_config: dataprocBatchEnvironmentConfigPeripheralsConfigSparkHistoryServerConfigToTerraform(struct.sparkHistoryServerConfig),
    };
}
exports.dataprocBatchEnvironmentConfigPeripheralsConfigToTerraform = dataprocBatchEnvironmentConfigPeripheralsConfigToTerraform;
function dataprocBatchEnvironmentConfigPeripheralsConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        metastore_service: {
            value: cdktf.stringToHclTerraform(struct.metastoreService),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        spark_history_server_config: {
            value: dataprocBatchEnvironmentConfigPeripheralsConfigSparkHistoryServerConfigToHclTerraform(struct.sparkHistoryServerConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocBatchEnvironmentConfigPeripheralsConfigSparkHistoryServerConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocBatchEnvironmentConfigPeripheralsConfigToHclTerraform = dataprocBatchEnvironmentConfigPeripheralsConfigToHclTerraform;
class DataprocBatchEnvironmentConfigPeripheralsConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // spark_history_server_config - computed: false, optional: true, required: false
        this._sparkHistoryServerConfig = new DataprocBatchEnvironmentConfigPeripheralsConfigSparkHistoryServerConfigOutputReference(this, "spark_history_server_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._metastoreService !== undefined) {
            hasAnyValues = true;
            internalValueResult.metastoreService = this._metastoreService;
        }
        if (this._sparkHistoryServerConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sparkHistoryServerConfig = this._sparkHistoryServerConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._metastoreService = undefined;
            this._sparkHistoryServerConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._metastoreService = value.metastoreService;
            this._sparkHistoryServerConfig.internalValue = value.sparkHistoryServerConfig;
        }
    }
    get metastoreService() {
        return this.getStringAttribute('metastore_service');
    }
    set metastoreService(value) {
        this._metastoreService = value;
    }
    resetMetastoreService() {
        this._metastoreService = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get metastoreServiceInput() {
        return this._metastoreService;
    }
    get sparkHistoryServerConfig() {
        return this._sparkHistoryServerConfig;
    }
    putSparkHistoryServerConfig(value) {
        this._sparkHistoryServerConfig.internalValue = value;
    }
    resetSparkHistoryServerConfig() {
        this._sparkHistoryServerConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sparkHistoryServerConfigInput() {
        return this._sparkHistoryServerConfig.internalValue;
    }
}
exports.DataprocBatchEnvironmentConfigPeripheralsConfigOutputReference = DataprocBatchEnvironmentConfigPeripheralsConfigOutputReference;
_l = JSII_RTTI_SYMBOL_1;
DataprocBatchEnvironmentConfigPeripheralsConfigOutputReference[_l] = { fqn: "@cdktf/provider-google.dataprocBatch.DataprocBatchEnvironmentConfigPeripheralsConfigOutputReference", version: "14.13.1" };
function dataprocBatchEnvironmentConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        execution_config: dataprocBatchEnvironmentConfigExecutionConfigToTerraform(struct.executionConfig),
        peripherals_config: dataprocBatchEnvironmentConfigPeripheralsConfigToTerraform(struct.peripheralsConfig),
    };
}
exports.dataprocBatchEnvironmentConfigToTerraform = dataprocBatchEnvironmentConfigToTerraform;
function dataprocBatchEnvironmentConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        execution_config: {
            value: dataprocBatchEnvironmentConfigExecutionConfigToHclTerraform(struct.executionConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocBatchEnvironmentConfigExecutionConfigList",
        },
        peripherals_config: {
            value: dataprocBatchEnvironmentConfigPeripheralsConfigToHclTerraform(struct.peripheralsConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocBatchEnvironmentConfigPeripheralsConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocBatchEnvironmentConfigToHclTerraform = dataprocBatchEnvironmentConfigToHclTerraform;
class DataprocBatchEnvironmentConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // execution_config - computed: false, optional: true, required: false
        this._executionConfig = new DataprocBatchEnvironmentConfigExecutionConfigOutputReference(this, "execution_config");
        // peripherals_config - computed: false, optional: true, required: false
        this._peripheralsConfig = new DataprocBatchEnvironmentConfigPeripheralsConfigOutputReference(this, "peripherals_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._executionConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.executionConfig = this._executionConfig?.internalValue;
        }
        if (this._peripheralsConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.peripheralsConfig = this._peripheralsConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._executionConfig.internalValue = undefined;
            this._peripheralsConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._executionConfig.internalValue = value.executionConfig;
            this._peripheralsConfig.internalValue = value.peripheralsConfig;
        }
    }
    get executionConfig() {
        return this._executionConfig;
    }
    putExecutionConfig(value) {
        this._executionConfig.internalValue = value;
    }
    resetExecutionConfig() {
        this._executionConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get executionConfigInput() {
        return this._executionConfig.internalValue;
    }
    get peripheralsConfig() {
        return this._peripheralsConfig;
    }
    putPeripheralsConfig(value) {
        this._peripheralsConfig.internalValue = value;
    }
    resetPeripheralsConfig() {
        this._peripheralsConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get peripheralsConfigInput() {
        return this._peripheralsConfig.internalValue;
    }
}
exports.DataprocBatchEnvironmentConfigOutputReference = DataprocBatchEnvironmentConfigOutputReference;
_m = JSII_RTTI_SYMBOL_1;
DataprocBatchEnvironmentConfigOutputReference[_m] = { fqn: "@cdktf/provider-google.dataprocBatch.DataprocBatchEnvironmentConfigOutputReference", version: "14.13.1" };
function dataprocBatchPysparkBatchToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        archive_uris: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.archiveUris),
        args: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.args),
        file_uris: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.fileUris),
        jar_file_uris: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.jarFileUris),
        main_python_file_uri: cdktf.stringToTerraform(struct.mainPythonFileUri),
        python_file_uris: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.pythonFileUris),
    };
}
exports.dataprocBatchPysparkBatchToTerraform = dataprocBatchPysparkBatchToTerraform;
function dataprocBatchPysparkBatchToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        archive_uris: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.archiveUris),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        args: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.args),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        file_uris: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.fileUris),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        jar_file_uris: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.jarFileUris),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        main_python_file_uri: {
            value: cdktf.stringToHclTerraform(struct.mainPythonFileUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        python_file_uris: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.pythonFileUris),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocBatchPysparkBatchToHclTerraform = dataprocBatchPysparkBatchToHclTerraform;
class DataprocBatchPysparkBatchOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._archiveUris !== undefined) {
            hasAnyValues = true;
            internalValueResult.archiveUris = this._archiveUris;
        }
        if (this._args !== undefined) {
            hasAnyValues = true;
            internalValueResult.args = this._args;
        }
        if (this._fileUris !== undefined) {
            hasAnyValues = true;
            internalValueResult.fileUris = this._fileUris;
        }
        if (this._jarFileUris !== undefined) {
            hasAnyValues = true;
            internalValueResult.jarFileUris = this._jarFileUris;
        }
        if (this._mainPythonFileUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.mainPythonFileUri = this._mainPythonFileUri;
        }
        if (this._pythonFileUris !== undefined) {
            hasAnyValues = true;
            internalValueResult.pythonFileUris = this._pythonFileUris;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._archiveUris = undefined;
            this._args = undefined;
            this._fileUris = undefined;
            this._jarFileUris = undefined;
            this._mainPythonFileUri = undefined;
            this._pythonFileUris = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._archiveUris = value.archiveUris;
            this._args = value.args;
            this._fileUris = value.fileUris;
            this._jarFileUris = value.jarFileUris;
            this._mainPythonFileUri = value.mainPythonFileUri;
            this._pythonFileUris = value.pythonFileUris;
        }
    }
    get archiveUris() {
        return this.getListAttribute('archive_uris');
    }
    set archiveUris(value) {
        this._archiveUris = value;
    }
    resetArchiveUris() {
        this._archiveUris = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get archiveUrisInput() {
        return this._archiveUris;
    }
    get args() {
        return this.getListAttribute('args');
    }
    set args(value) {
        this._args = value;
    }
    resetArgs() {
        this._args = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get argsInput() {
        return this._args;
    }
    get fileUris() {
        return this.getListAttribute('file_uris');
    }
    set fileUris(value) {
        this._fileUris = value;
    }
    resetFileUris() {
        this._fileUris = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fileUrisInput() {
        return this._fileUris;
    }
    get jarFileUris() {
        return this.getListAttribute('jar_file_uris');
    }
    set jarFileUris(value) {
        this._jarFileUris = value;
    }
    resetJarFileUris() {
        this._jarFileUris = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jarFileUrisInput() {
        return this._jarFileUris;
    }
    get mainPythonFileUri() {
        return this.getStringAttribute('main_python_file_uri');
    }
    set mainPythonFileUri(value) {
        this._mainPythonFileUri = value;
    }
    resetMainPythonFileUri() {
        this._mainPythonFileUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mainPythonFileUriInput() {
        return this._mainPythonFileUri;
    }
    get pythonFileUris() {
        return this.getListAttribute('python_file_uris');
    }
    set pythonFileUris(value) {
        this._pythonFileUris = value;
    }
    resetPythonFileUris() {
        this._pythonFileUris = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pythonFileUrisInput() {
        return this._pythonFileUris;
    }
}
exports.DataprocBatchPysparkBatchOutputReference = DataprocBatchPysparkBatchOutputReference;
_o = JSII_RTTI_SYMBOL_1;
DataprocBatchPysparkBatchOutputReference[_o] = { fqn: "@cdktf/provider-google.dataprocBatch.DataprocBatchPysparkBatchOutputReference", version: "14.13.1" };
function dataprocBatchRuntimeConfigAutotuningConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        scenarios: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.scenarios),
    };
}
exports.dataprocBatchRuntimeConfigAutotuningConfigToTerraform = dataprocBatchRuntimeConfigAutotuningConfigToTerraform;
function dataprocBatchRuntimeConfigAutotuningConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        scenarios: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.scenarios),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocBatchRuntimeConfigAutotuningConfigToHclTerraform = dataprocBatchRuntimeConfigAutotuningConfigToHclTerraform;
class DataprocBatchRuntimeConfigAutotuningConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._scenarios !== undefined) {
            hasAnyValues = true;
            internalValueResult.scenarios = this._scenarios;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._scenarios = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._scenarios = value.scenarios;
        }
    }
    get scenarios() {
        return this.getListAttribute('scenarios');
    }
    set scenarios(value) {
        this._scenarios = value;
    }
    resetScenarios() {
        this._scenarios = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scenariosInput() {
        return this._scenarios;
    }
}
exports.DataprocBatchRuntimeConfigAutotuningConfigOutputReference = DataprocBatchRuntimeConfigAutotuningConfigOutputReference;
_p = JSII_RTTI_SYMBOL_1;
DataprocBatchRuntimeConfigAutotuningConfigOutputReference[_p] = { fqn: "@cdktf/provider-google.dataprocBatch.DataprocBatchRuntimeConfigAutotuningConfigOutputReference", version: "14.13.1" };
function dataprocBatchRuntimeConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cohort: cdktf.stringToTerraform(struct.cohort),
        container_image: cdktf.stringToTerraform(struct.containerImage),
        properties: cdktf.hashMapper(cdktf.stringToTerraform)(struct.properties),
        version: cdktf.stringToTerraform(struct.version),
        autotuning_config: dataprocBatchRuntimeConfigAutotuningConfigToTerraform(struct.autotuningConfig),
    };
}
exports.dataprocBatchRuntimeConfigToTerraform = dataprocBatchRuntimeConfigToTerraform;
function dataprocBatchRuntimeConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cohort: {
            value: cdktf.stringToHclTerraform(struct.cohort),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        container_image: {
            value: cdktf.stringToHclTerraform(struct.containerImage),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        properties: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.properties),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        version: {
            value: cdktf.stringToHclTerraform(struct.version),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        autotuning_config: {
            value: dataprocBatchRuntimeConfigAutotuningConfigToHclTerraform(struct.autotuningConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocBatchRuntimeConfigAutotuningConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocBatchRuntimeConfigToHclTerraform = dataprocBatchRuntimeConfigToHclTerraform;
class DataprocBatchRuntimeConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // effective_properties - computed: true, optional: false, required: false
        this._effectiveProperties = new cdktf.StringMap(this, "effective_properties");
        // autotuning_config - computed: false, optional: true, required: false
        this._autotuningConfig = new DataprocBatchRuntimeConfigAutotuningConfigOutputReference(this, "autotuning_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cohort !== undefined) {
            hasAnyValues = true;
            internalValueResult.cohort = this._cohort;
        }
        if (this._containerImage !== undefined) {
            hasAnyValues = true;
            internalValueResult.containerImage = this._containerImage;
        }
        if (this._properties !== undefined) {
            hasAnyValues = true;
            internalValueResult.properties = this._properties;
        }
        if (this._version !== undefined) {
            hasAnyValues = true;
            internalValueResult.version = this._version;
        }
        if (this._autotuningConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.autotuningConfig = this._autotuningConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cohort = undefined;
            this._containerImage = undefined;
            this._properties = undefined;
            this._version = undefined;
            this._autotuningConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cohort = value.cohort;
            this._containerImage = value.containerImage;
            this._properties = value.properties;
            this._version = value.version;
            this._autotuningConfig.internalValue = value.autotuningConfig;
        }
    }
    get cohort() {
        return this.getStringAttribute('cohort');
    }
    set cohort(value) {
        this._cohort = value;
    }
    resetCohort() {
        this._cohort = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cohortInput() {
        return this._cohort;
    }
    get containerImage() {
        return this.getStringAttribute('container_image');
    }
    set containerImage(value) {
        this._containerImage = value;
    }
    resetContainerImage() {
        this._containerImage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get containerImageInput() {
        return this._containerImage;
    }
    get effectiveProperties() {
        return this._effectiveProperties;
    }
    get properties() {
        return this.getStringMapAttribute('properties');
    }
    set properties(value) {
        this._properties = value;
    }
    resetProperties() {
        this._properties = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get propertiesInput() {
        return this._properties;
    }
    get version() {
        return this.getStringAttribute('version');
    }
    set version(value) {
        this._version = value;
    }
    resetVersion() {
        this._version = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get versionInput() {
        return this._version;
    }
    get autotuningConfig() {
        return this._autotuningConfig;
    }
    putAutotuningConfig(value) {
        this._autotuningConfig.internalValue = value;
    }
    resetAutotuningConfig() {
        this._autotuningConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autotuningConfigInput() {
        return this._autotuningConfig.internalValue;
    }
}
exports.DataprocBatchRuntimeConfigOutputReference = DataprocBatchRuntimeConfigOutputReference;
_q = JSII_RTTI_SYMBOL_1;
DataprocBatchRuntimeConfigOutputReference[_q] = { fqn: "@cdktf/provider-google.dataprocBatch.DataprocBatchRuntimeConfigOutputReference", version: "14.13.1" };
function dataprocBatchSparkBatchToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        archive_uris: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.archiveUris),
        args: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.args),
        file_uris: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.fileUris),
        jar_file_uris: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.jarFileUris),
        main_class: cdktf.stringToTerraform(struct.mainClass),
        main_jar_file_uri: cdktf.stringToTerraform(struct.mainJarFileUri),
    };
}
exports.dataprocBatchSparkBatchToTerraform = dataprocBatchSparkBatchToTerraform;
function dataprocBatchSparkBatchToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        archive_uris: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.archiveUris),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        args: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.args),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        file_uris: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.fileUris),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        jar_file_uris: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.jarFileUris),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        main_class: {
            value: cdktf.stringToHclTerraform(struct.mainClass),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        main_jar_file_uri: {
            value: cdktf.stringToHclTerraform(struct.mainJarFileUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocBatchSparkBatchToHclTerraform = dataprocBatchSparkBatchToHclTerraform;
class DataprocBatchSparkBatchOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._archiveUris !== undefined) {
            hasAnyValues = true;
            internalValueResult.archiveUris = this._archiveUris;
        }
        if (this._args !== undefined) {
            hasAnyValues = true;
            internalValueResult.args = this._args;
        }
        if (this._fileUris !== undefined) {
            hasAnyValues = true;
            internalValueResult.fileUris = this._fileUris;
        }
        if (this._jarFileUris !== undefined) {
            hasAnyValues = true;
            internalValueResult.jarFileUris = this._jarFileUris;
        }
        if (this._mainClass !== undefined) {
            hasAnyValues = true;
            internalValueResult.mainClass = this._mainClass;
        }
        if (this._mainJarFileUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.mainJarFileUri = this._mainJarFileUri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._archiveUris = undefined;
            this._args = undefined;
            this._fileUris = undefined;
            this._jarFileUris = undefined;
            this._mainClass = undefined;
            this._mainJarFileUri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._archiveUris = value.archiveUris;
            this._args = value.args;
            this._fileUris = value.fileUris;
            this._jarFileUris = value.jarFileUris;
            this._mainClass = value.mainClass;
            this._mainJarFileUri = value.mainJarFileUri;
        }
    }
    get archiveUris() {
        return this.getListAttribute('archive_uris');
    }
    set archiveUris(value) {
        this._archiveUris = value;
    }
    resetArchiveUris() {
        this._archiveUris = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get archiveUrisInput() {
        return this._archiveUris;
    }
    get args() {
        return this.getListAttribute('args');
    }
    set args(value) {
        this._args = value;
    }
    resetArgs() {
        this._args = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get argsInput() {
        return this._args;
    }
    get fileUris() {
        return this.getListAttribute('file_uris');
    }
    set fileUris(value) {
        this._fileUris = value;
    }
    resetFileUris() {
        this._fileUris = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fileUrisInput() {
        return this._fileUris;
    }
    get jarFileUris() {
        return this.getListAttribute('jar_file_uris');
    }
    set jarFileUris(value) {
        this._jarFileUris = value;
    }
    resetJarFileUris() {
        this._jarFileUris = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jarFileUrisInput() {
        return this._jarFileUris;
    }
    get mainClass() {
        return this.getStringAttribute('main_class');
    }
    set mainClass(value) {
        this._mainClass = value;
    }
    resetMainClass() {
        this._mainClass = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mainClassInput() {
        return this._mainClass;
    }
    get mainJarFileUri() {
        return this.getStringAttribute('main_jar_file_uri');
    }
    set mainJarFileUri(value) {
        this._mainJarFileUri = value;
    }
    resetMainJarFileUri() {
        this._mainJarFileUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mainJarFileUriInput() {
        return this._mainJarFileUri;
    }
}
exports.DataprocBatchSparkBatchOutputReference = DataprocBatchSparkBatchOutputReference;
_r = JSII_RTTI_SYMBOL_1;
DataprocBatchSparkBatchOutputReference[_r] = { fqn: "@cdktf/provider-google.dataprocBatch.DataprocBatchSparkBatchOutputReference", version: "14.13.1" };
function dataprocBatchSparkRBatchToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        archive_uris: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.archiveUris),
        args: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.args),
        file_uris: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.fileUris),
        main_r_file_uri: cdktf.stringToTerraform(struct.mainRFileUri),
    };
}
exports.dataprocBatchSparkRBatchToTerraform = dataprocBatchSparkRBatchToTerraform;
function dataprocBatchSparkRBatchToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        archive_uris: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.archiveUris),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        args: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.args),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        file_uris: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.fileUris),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        main_r_file_uri: {
            value: cdktf.stringToHclTerraform(struct.mainRFileUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocBatchSparkRBatchToHclTerraform = dataprocBatchSparkRBatchToHclTerraform;
class DataprocBatchSparkRBatchOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._archiveUris !== undefined) {
            hasAnyValues = true;
            internalValueResult.archiveUris = this._archiveUris;
        }
        if (this._args !== undefined) {
            hasAnyValues = true;
            internalValueResult.args = this._args;
        }
        if (this._fileUris !== undefined) {
            hasAnyValues = true;
            internalValueResult.fileUris = this._fileUris;
        }
        if (this._mainRFileUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.mainRFileUri = this._mainRFileUri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._archiveUris = undefined;
            this._args = undefined;
            this._fileUris = undefined;
            this._mainRFileUri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._archiveUris = value.archiveUris;
            this._args = value.args;
            this._fileUris = value.fileUris;
            this._mainRFileUri = value.mainRFileUri;
        }
    }
    get archiveUris() {
        return this.getListAttribute('archive_uris');
    }
    set archiveUris(value) {
        this._archiveUris = value;
    }
    resetArchiveUris() {
        this._archiveUris = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get archiveUrisInput() {
        return this._archiveUris;
    }
    get args() {
        return this.getListAttribute('args');
    }
    set args(value) {
        this._args = value;
    }
    resetArgs() {
        this._args = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get argsInput() {
        return this._args;
    }
    get fileUris() {
        return this.getListAttribute('file_uris');
    }
    set fileUris(value) {
        this._fileUris = value;
    }
    resetFileUris() {
        this._fileUris = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fileUrisInput() {
        return this._fileUris;
    }
    get mainRFileUri() {
        return this.getStringAttribute('main_r_file_uri');
    }
    set mainRFileUri(value) {
        this._mainRFileUri = value;
    }
    resetMainRFileUri() {
        this._mainRFileUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mainRFileUriInput() {
        return this._mainRFileUri;
    }
}
exports.DataprocBatchSparkRBatchOutputReference = DataprocBatchSparkRBatchOutputReference;
_s = JSII_RTTI_SYMBOL_1;
DataprocBatchSparkRBatchOutputReference[_s] = { fqn: "@cdktf/provider-google.dataprocBatch.DataprocBatchSparkRBatchOutputReference", version: "14.13.1" };
function dataprocBatchSparkSqlBatchToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        jar_file_uris: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.jarFileUris),
        query_file_uri: cdktf.stringToTerraform(struct.queryFileUri),
        query_variables: cdktf.hashMapper(cdktf.stringToTerraform)(struct.queryVariables),
    };
}
exports.dataprocBatchSparkSqlBatchToTerraform = dataprocBatchSparkSqlBatchToTerraform;
function dataprocBatchSparkSqlBatchToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        jar_file_uris: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.jarFileUris),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        query_file_uri: {
            value: cdktf.stringToHclTerraform(struct.queryFileUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        query_variables: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.queryVariables),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocBatchSparkSqlBatchToHclTerraform = dataprocBatchSparkSqlBatchToHclTerraform;
class DataprocBatchSparkSqlBatchOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._jarFileUris !== undefined) {
            hasAnyValues = true;
            internalValueResult.jarFileUris = this._jarFileUris;
        }
        if (this._queryFileUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.queryFileUri = this._queryFileUri;
        }
        if (this._queryVariables !== undefined) {
            hasAnyValues = true;
            internalValueResult.queryVariables = this._queryVariables;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._jarFileUris = undefined;
            this._queryFileUri = undefined;
            this._queryVariables = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._jarFileUris = value.jarFileUris;
            this._queryFileUri = value.queryFileUri;
            this._queryVariables = value.queryVariables;
        }
    }
    get jarFileUris() {
        return this.getListAttribute('jar_file_uris');
    }
    set jarFileUris(value) {
        this._jarFileUris = value;
    }
    resetJarFileUris() {
        this._jarFileUris = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jarFileUrisInput() {
        return this._jarFileUris;
    }
    get queryFileUri() {
        return this.getStringAttribute('query_file_uri');
    }
    set queryFileUri(value) {
        this._queryFileUri = value;
    }
    resetQueryFileUri() {
        this._queryFileUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get queryFileUriInput() {
        return this._queryFileUri;
    }
    get queryVariables() {
        return this.getStringMapAttribute('query_variables');
    }
    set queryVariables(value) {
        this._queryVariables = value;
    }
    resetQueryVariables() {
        this._queryVariables = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get queryVariablesInput() {
        return this._queryVariables;
    }
}
exports.DataprocBatchSparkSqlBatchOutputReference = DataprocBatchSparkSqlBatchOutputReference;
_t = JSII_RTTI_SYMBOL_1;
DataprocBatchSparkSqlBatchOutputReference[_t] = { fqn: "@cdktf/provider-google.dataprocBatch.DataprocBatchSparkSqlBatchOutputReference", version: "14.13.1" };
function dataprocBatchTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.dataprocBatchTimeoutsToTerraform = dataprocBatchTimeoutsToTerraform;
function dataprocBatchTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocBatchTimeoutsToHclTerraform = dataprocBatchTimeoutsToHclTerraform;
class DataprocBatchTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.DataprocBatchTimeoutsOutputReference = DataprocBatchTimeoutsOutputReference;
_u = JSII_RTTI_SYMBOL_1;
DataprocBatchTimeoutsOutputReference[_u] = { fqn: "@cdktf/provider-google.dataprocBatch.DataprocBatchTimeoutsOutputReference", version: "14.13.1" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/dataproc_batch google_dataproc_batch}
*/
class DataprocBatch extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a DataprocBatch resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the DataprocBatch to import
    * @param importFromId The id of the existing DataprocBatch that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/dataproc_batch#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the DataprocBatch to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_dataproc_batch", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/dataproc_batch google_dataproc_batch} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataprocBatchConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'google_dataproc_batch',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // effective_labels - computed: true, optional: false, required: false
        this._effectiveLabels = new cdktf.StringMap(this, "effective_labels");
        // runtime_info - computed: true, optional: false, required: false
        this._runtimeInfo = new DataprocBatchRuntimeInfoList(this, "runtime_info", false);
        // state_history - computed: true, optional: false, required: false
        this._stateHistory = new DataprocBatchStateHistoryList(this, "state_history", false);
        // terraform_labels - computed: true, optional: false, required: false
        this._terraformLabels = new cdktf.StringMap(this, "terraform_labels");
        // environment_config - computed: false, optional: true, required: false
        this._environmentConfig = new DataprocBatchEnvironmentConfigOutputReference(this, "environment_config");
        // pyspark_batch - computed: false, optional: true, required: false
        this._pysparkBatch = new DataprocBatchPysparkBatchOutputReference(this, "pyspark_batch");
        // runtime_config - computed: false, optional: true, required: false
        this._runtimeConfig = new DataprocBatchRuntimeConfigOutputReference(this, "runtime_config");
        // spark_batch - computed: false, optional: true, required: false
        this._sparkBatch = new DataprocBatchSparkBatchOutputReference(this, "spark_batch");
        // spark_r_batch - computed: false, optional: true, required: false
        this._sparkRBatch = new DataprocBatchSparkRBatchOutputReference(this, "spark_r_batch");
        // spark_sql_batch - computed: false, optional: true, required: false
        this._sparkSqlBatch = new DataprocBatchSparkSqlBatchOutputReference(this, "spark_sql_batch");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new DataprocBatchTimeoutsOutputReference(this, "timeouts");
        this._batchId = config.batchId;
        this._id = config.id;
        this._labels = config.labels;
        this._location = config.location;
        this._project = config.project;
        this._environmentConfig.internalValue = config.environmentConfig;
        this._pysparkBatch.internalValue = config.pysparkBatch;
        this._runtimeConfig.internalValue = config.runtimeConfig;
        this._sparkBatch.internalValue = config.sparkBatch;
        this._sparkRBatch.internalValue = config.sparkRBatch;
        this._sparkSqlBatch.internalValue = config.sparkSqlBatch;
        this._timeouts.internalValue = config.timeouts;
    }
    get batchId() {
        return this.getStringAttribute('batch_id');
    }
    set batchId(value) {
        this._batchId = value;
    }
    resetBatchId() {
        this._batchId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get batchIdInput() {
        return this._batchId;
    }
    // create_time - computed: true, optional: false, required: false
    get createTime() {
        return this.getStringAttribute('create_time');
    }
    // creator - computed: true, optional: false, required: false
    get creator() {
        return this.getStringAttribute('creator');
    }
    get effectiveLabels() {
        return this._effectiveLabels;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    resetLocation() {
        this._location = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    // operation - computed: true, optional: false, required: false
    get operation() {
        return this.getStringAttribute('operation');
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get runtimeInfo() {
        return this._runtimeInfo;
    }
    // state - computed: true, optional: false, required: false
    get state() {
        return this.getStringAttribute('state');
    }
    get stateHistory() {
        return this._stateHistory;
    }
    // state_message - computed: true, optional: false, required: false
    get stateMessage() {
        return this.getStringAttribute('state_message');
    }
    // state_time - computed: true, optional: false, required: false
    get stateTime() {
        return this.getStringAttribute('state_time');
    }
    get terraformLabels() {
        return this._terraformLabels;
    }
    // uuid - computed: true, optional: false, required: false
    get uuid() {
        return this.getStringAttribute('uuid');
    }
    get environmentConfig() {
        return this._environmentConfig;
    }
    putEnvironmentConfig(value) {
        this._environmentConfig.internalValue = value;
    }
    resetEnvironmentConfig() {
        this._environmentConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get environmentConfigInput() {
        return this._environmentConfig.internalValue;
    }
    get pysparkBatch() {
        return this._pysparkBatch;
    }
    putPysparkBatch(value) {
        this._pysparkBatch.internalValue = value;
    }
    resetPysparkBatch() {
        this._pysparkBatch.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pysparkBatchInput() {
        return this._pysparkBatch.internalValue;
    }
    get runtimeConfig() {
        return this._runtimeConfig;
    }
    putRuntimeConfig(value) {
        this._runtimeConfig.internalValue = value;
    }
    resetRuntimeConfig() {
        this._runtimeConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get runtimeConfigInput() {
        return this._runtimeConfig.internalValue;
    }
    get sparkBatch() {
        return this._sparkBatch;
    }
    putSparkBatch(value) {
        this._sparkBatch.internalValue = value;
    }
    resetSparkBatch() {
        this._sparkBatch.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sparkBatchInput() {
        return this._sparkBatch.internalValue;
    }
    get sparkRBatch() {
        return this._sparkRBatch;
    }
    putSparkRBatch(value) {
        this._sparkRBatch.internalValue = value;
    }
    resetSparkRBatch() {
        this._sparkRBatch.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sparkRBatchInput() {
        return this._sparkRBatch.internalValue;
    }
    get sparkSqlBatch() {
        return this._sparkSqlBatch;
    }
    putSparkSqlBatch(value) {
        this._sparkSqlBatch.internalValue = value;
    }
    resetSparkSqlBatch() {
        this._sparkSqlBatch.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sparkSqlBatchInput() {
        return this._sparkSqlBatch.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            batch_id: cdktf.stringToTerraform(this._batchId),
            id: cdktf.stringToTerraform(this._id),
            labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._labels),
            location: cdktf.stringToTerraform(this._location),
            project: cdktf.stringToTerraform(this._project),
            environment_config: dataprocBatchEnvironmentConfigToTerraform(this._environmentConfig.internalValue),
            pyspark_batch: dataprocBatchPysparkBatchToTerraform(this._pysparkBatch.internalValue),
            runtime_config: dataprocBatchRuntimeConfigToTerraform(this._runtimeConfig.internalValue),
            spark_batch: dataprocBatchSparkBatchToTerraform(this._sparkBatch.internalValue),
            spark_r_batch: dataprocBatchSparkRBatchToTerraform(this._sparkRBatch.internalValue),
            spark_sql_batch: dataprocBatchSparkSqlBatchToTerraform(this._sparkSqlBatch.internalValue),
            timeouts: dataprocBatchTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            batch_id: {
                value: cdktf.stringToHclTerraform(this._batchId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            labels: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._labels),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            location: {
                value: cdktf.stringToHclTerraform(this._location),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            project: {
                value: cdktf.stringToHclTerraform(this._project),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            environment_config: {
                value: dataprocBatchEnvironmentConfigToHclTerraform(this._environmentConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "DataprocBatchEnvironmentConfigList",
            },
            pyspark_batch: {
                value: dataprocBatchPysparkBatchToHclTerraform(this._pysparkBatch.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "DataprocBatchPysparkBatchList",
            },
            runtime_config: {
                value: dataprocBatchRuntimeConfigToHclTerraform(this._runtimeConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "DataprocBatchRuntimeConfigList",
            },
            spark_batch: {
                value: dataprocBatchSparkBatchToHclTerraform(this._sparkBatch.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "DataprocBatchSparkBatchList",
            },
            spark_r_batch: {
                value: dataprocBatchSparkRBatchToHclTerraform(this._sparkRBatch.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "DataprocBatchSparkRBatchList",
            },
            spark_sql_batch: {
                value: dataprocBatchSparkSqlBatchToHclTerraform(this._sparkSqlBatch.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "DataprocBatchSparkSqlBatchList",
            },
            timeouts: {
                value: dataprocBatchTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "DataprocBatchTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.DataprocBatch = DataprocBatch;
_v = JSII_RTTI_SYMBOL_1;
DataprocBatch[_v] = { fqn: "@cdktf/provider-google.dataprocBatch.DataprocBatch", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
DataprocBatch.tfResourceType = "google_dataproc_batch";
//# sourceMappingURL=data:application/json;base64,