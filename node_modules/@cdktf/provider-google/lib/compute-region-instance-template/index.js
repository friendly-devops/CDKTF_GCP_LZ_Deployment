"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6;
Object.defineProperty(exports, "__esModule", { value: true });
exports.computeRegionInstanceTemplateSchedulingLocalSsdRecoveryTimeoutToHclTerraform = exports.computeRegionInstanceTemplateSchedulingLocalSsdRecoveryTimeoutToTerraform = exports.ComputeRegionInstanceTemplateReservationAffinityOutputReference = exports.computeRegionInstanceTemplateReservationAffinityToHclTerraform = exports.computeRegionInstanceTemplateReservationAffinityToTerraform = exports.ComputeRegionInstanceTemplateReservationAffinitySpecificReservationOutputReference = exports.computeRegionInstanceTemplateReservationAffinitySpecificReservationToHclTerraform = exports.computeRegionInstanceTemplateReservationAffinitySpecificReservationToTerraform = exports.ComputeRegionInstanceTemplateNetworkPerformanceConfigOutputReference = exports.computeRegionInstanceTemplateNetworkPerformanceConfigToHclTerraform = exports.computeRegionInstanceTemplateNetworkPerformanceConfigToTerraform = exports.ComputeRegionInstanceTemplateNetworkInterfaceList = exports.ComputeRegionInstanceTemplateNetworkInterfaceOutputReference = exports.computeRegionInstanceTemplateNetworkInterfaceToHclTerraform = exports.computeRegionInstanceTemplateNetworkInterfaceToTerraform = exports.ComputeRegionInstanceTemplateNetworkInterfaceIpv6AccessConfigList = exports.ComputeRegionInstanceTemplateNetworkInterfaceIpv6AccessConfigOutputReference = exports.computeRegionInstanceTemplateNetworkInterfaceIpv6AccessConfigToHclTerraform = exports.computeRegionInstanceTemplateNetworkInterfaceIpv6AccessConfigToTerraform = exports.ComputeRegionInstanceTemplateNetworkInterfaceAliasIpRangeList = exports.ComputeRegionInstanceTemplateNetworkInterfaceAliasIpRangeOutputReference = exports.computeRegionInstanceTemplateNetworkInterfaceAliasIpRangeToHclTerraform = exports.computeRegionInstanceTemplateNetworkInterfaceAliasIpRangeToTerraform = exports.ComputeRegionInstanceTemplateNetworkInterfaceAccessConfigList = exports.ComputeRegionInstanceTemplateNetworkInterfaceAccessConfigOutputReference = exports.computeRegionInstanceTemplateNetworkInterfaceAccessConfigToHclTerraform = exports.computeRegionInstanceTemplateNetworkInterfaceAccessConfigToTerraform = exports.ComputeRegionInstanceTemplateGuestAcceleratorList = exports.ComputeRegionInstanceTemplateGuestAcceleratorOutputReference = exports.computeRegionInstanceTemplateGuestAcceleratorToHclTerraform = exports.computeRegionInstanceTemplateGuestAcceleratorToTerraform = exports.ComputeRegionInstanceTemplateDiskList = exports.ComputeRegionInstanceTemplateDiskOutputReference = exports.computeRegionInstanceTemplateDiskToHclTerraform = exports.computeRegionInstanceTemplateDiskToTerraform = exports.ComputeRegionInstanceTemplateDiskSourceSnapshotEncryptionKeyOutputReference = exports.computeRegionInstanceTemplateDiskSourceSnapshotEncryptionKeyToHclTerraform = exports.computeRegionInstanceTemplateDiskSourceSnapshotEncryptionKeyToTerraform = exports.ComputeRegionInstanceTemplateDiskSourceImageEncryptionKeyOutputReference = exports.computeRegionInstanceTemplateDiskSourceImageEncryptionKeyToHclTerraform = exports.computeRegionInstanceTemplateDiskSourceImageEncryptionKeyToTerraform = exports.ComputeRegionInstanceTemplateDiskDiskEncryptionKeyOutputReference = exports.computeRegionInstanceTemplateDiskDiskEncryptionKeyToHclTerraform = exports.computeRegionInstanceTemplateDiskDiskEncryptionKeyToTerraform = exports.ComputeRegionInstanceTemplateConfidentialInstanceConfigOutputReference = exports.computeRegionInstanceTemplateConfidentialInstanceConfigToHclTerraform = exports.computeRegionInstanceTemplateConfidentialInstanceConfigToTerraform = exports.ComputeRegionInstanceTemplateAdvancedMachineFeaturesOutputReference = exports.computeRegionInstanceTemplateAdvancedMachineFeaturesToHclTerraform = exports.computeRegionInstanceTemplateAdvancedMachineFeaturesToTerraform = void 0;
exports.ComputeRegionInstanceTemplate = exports.ComputeRegionInstanceTemplateTimeoutsOutputReference = exports.computeRegionInstanceTemplateTimeoutsToHclTerraform = exports.computeRegionInstanceTemplateTimeoutsToTerraform = exports.ComputeRegionInstanceTemplateShieldedInstanceConfigOutputReference = exports.computeRegionInstanceTemplateShieldedInstanceConfigToHclTerraform = exports.computeRegionInstanceTemplateShieldedInstanceConfigToTerraform = exports.ComputeRegionInstanceTemplateServiceAccountOutputReference = exports.computeRegionInstanceTemplateServiceAccountToHclTerraform = exports.computeRegionInstanceTemplateServiceAccountToTerraform = exports.ComputeRegionInstanceTemplateSchedulingOutputReference = exports.computeRegionInstanceTemplateSchedulingToHclTerraform = exports.computeRegionInstanceTemplateSchedulingToTerraform = exports.ComputeRegionInstanceTemplateSchedulingOnInstanceStopActionOutputReference = exports.computeRegionInstanceTemplateSchedulingOnInstanceStopActionToHclTerraform = exports.computeRegionInstanceTemplateSchedulingOnInstanceStopActionToTerraform = exports.ComputeRegionInstanceTemplateSchedulingNodeAffinitiesList = exports.ComputeRegionInstanceTemplateSchedulingNodeAffinitiesOutputReference = exports.computeRegionInstanceTemplateSchedulingNodeAffinitiesToHclTerraform = exports.computeRegionInstanceTemplateSchedulingNodeAffinitiesToTerraform = exports.ComputeRegionInstanceTemplateSchedulingMaxRunDurationOutputReference = exports.computeRegionInstanceTemplateSchedulingMaxRunDurationToHclTerraform = exports.computeRegionInstanceTemplateSchedulingMaxRunDurationToTerraform = exports.ComputeRegionInstanceTemplateSchedulingLocalSsdRecoveryTimeoutList = exports.ComputeRegionInstanceTemplateSchedulingLocalSsdRecoveryTimeoutOutputReference = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function computeRegionInstanceTemplateAdvancedMachineFeaturesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enable_nested_virtualization: cdktf.booleanToTerraform(struct.enableNestedVirtualization),
        enable_uefi_networking: cdktf.booleanToTerraform(struct.enableUefiNetworking),
        performance_monitoring_unit: cdktf.stringToTerraform(struct.performanceMonitoringUnit),
        threads_per_core: cdktf.numberToTerraform(struct.threadsPerCore),
        turbo_mode: cdktf.stringToTerraform(struct.turboMode),
        visible_core_count: cdktf.numberToTerraform(struct.visibleCoreCount),
    };
}
exports.computeRegionInstanceTemplateAdvancedMachineFeaturesToTerraform = computeRegionInstanceTemplateAdvancedMachineFeaturesToTerraform;
function computeRegionInstanceTemplateAdvancedMachineFeaturesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enable_nested_virtualization: {
            value: cdktf.booleanToHclTerraform(struct.enableNestedVirtualization),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        enable_uefi_networking: {
            value: cdktf.booleanToHclTerraform(struct.enableUefiNetworking),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        performance_monitoring_unit: {
            value: cdktf.stringToHclTerraform(struct.performanceMonitoringUnit),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        threads_per_core: {
            value: cdktf.numberToHclTerraform(struct.threadsPerCore),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        turbo_mode: {
            value: cdktf.stringToHclTerraform(struct.turboMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        visible_core_count: {
            value: cdktf.numberToHclTerraform(struct.visibleCoreCount),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeRegionInstanceTemplateAdvancedMachineFeaturesToHclTerraform = computeRegionInstanceTemplateAdvancedMachineFeaturesToHclTerraform;
class ComputeRegionInstanceTemplateAdvancedMachineFeaturesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enableNestedVirtualization !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableNestedVirtualization = this._enableNestedVirtualization;
        }
        if (this._enableUefiNetworking !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableUefiNetworking = this._enableUefiNetworking;
        }
        if (this._performanceMonitoringUnit !== undefined) {
            hasAnyValues = true;
            internalValueResult.performanceMonitoringUnit = this._performanceMonitoringUnit;
        }
        if (this._threadsPerCore !== undefined) {
            hasAnyValues = true;
            internalValueResult.threadsPerCore = this._threadsPerCore;
        }
        if (this._turboMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.turboMode = this._turboMode;
        }
        if (this._visibleCoreCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.visibleCoreCount = this._visibleCoreCount;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enableNestedVirtualization = undefined;
            this._enableUefiNetworking = undefined;
            this._performanceMonitoringUnit = undefined;
            this._threadsPerCore = undefined;
            this._turboMode = undefined;
            this._visibleCoreCount = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enableNestedVirtualization = value.enableNestedVirtualization;
            this._enableUefiNetworking = value.enableUefiNetworking;
            this._performanceMonitoringUnit = value.performanceMonitoringUnit;
            this._threadsPerCore = value.threadsPerCore;
            this._turboMode = value.turboMode;
            this._visibleCoreCount = value.visibleCoreCount;
        }
    }
    get enableNestedVirtualization() {
        return this.getBooleanAttribute('enable_nested_virtualization');
    }
    set enableNestedVirtualization(value) {
        this._enableNestedVirtualization = value;
    }
    resetEnableNestedVirtualization() {
        this._enableNestedVirtualization = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableNestedVirtualizationInput() {
        return this._enableNestedVirtualization;
    }
    get enableUefiNetworking() {
        return this.getBooleanAttribute('enable_uefi_networking');
    }
    set enableUefiNetworking(value) {
        this._enableUefiNetworking = value;
    }
    resetEnableUefiNetworking() {
        this._enableUefiNetworking = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableUefiNetworkingInput() {
        return this._enableUefiNetworking;
    }
    get performanceMonitoringUnit() {
        return this.getStringAttribute('performance_monitoring_unit');
    }
    set performanceMonitoringUnit(value) {
        this._performanceMonitoringUnit = value;
    }
    resetPerformanceMonitoringUnit() {
        this._performanceMonitoringUnit = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get performanceMonitoringUnitInput() {
        return this._performanceMonitoringUnit;
    }
    get threadsPerCore() {
        return this.getNumberAttribute('threads_per_core');
    }
    set threadsPerCore(value) {
        this._threadsPerCore = value;
    }
    resetThreadsPerCore() {
        this._threadsPerCore = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get threadsPerCoreInput() {
        return this._threadsPerCore;
    }
    get turboMode() {
        return this.getStringAttribute('turbo_mode');
    }
    set turboMode(value) {
        this._turboMode = value;
    }
    resetTurboMode() {
        this._turboMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get turboModeInput() {
        return this._turboMode;
    }
    get visibleCoreCount() {
        return this.getNumberAttribute('visible_core_count');
    }
    set visibleCoreCount(value) {
        this._visibleCoreCount = value;
    }
    resetVisibleCoreCount() {
        this._visibleCoreCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get visibleCoreCountInput() {
        return this._visibleCoreCount;
    }
}
exports.ComputeRegionInstanceTemplateAdvancedMachineFeaturesOutputReference = ComputeRegionInstanceTemplateAdvancedMachineFeaturesOutputReference;
_a = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceTemplateAdvancedMachineFeaturesOutputReference[_a] = { fqn: "@cdktf/provider-google.computeRegionInstanceTemplate.ComputeRegionInstanceTemplateAdvancedMachineFeaturesOutputReference", version: "14.13.1" };
function computeRegionInstanceTemplateConfidentialInstanceConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        confidential_instance_type: cdktf.stringToTerraform(struct.confidentialInstanceType),
        enable_confidential_compute: cdktf.booleanToTerraform(struct.enableConfidentialCompute),
    };
}
exports.computeRegionInstanceTemplateConfidentialInstanceConfigToTerraform = computeRegionInstanceTemplateConfidentialInstanceConfigToTerraform;
function computeRegionInstanceTemplateConfidentialInstanceConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        confidential_instance_type: {
            value: cdktf.stringToHclTerraform(struct.confidentialInstanceType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        enable_confidential_compute: {
            value: cdktf.booleanToHclTerraform(struct.enableConfidentialCompute),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeRegionInstanceTemplateConfidentialInstanceConfigToHclTerraform = computeRegionInstanceTemplateConfidentialInstanceConfigToHclTerraform;
class ComputeRegionInstanceTemplateConfidentialInstanceConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._confidentialInstanceType !== undefined) {
            hasAnyValues = true;
            internalValueResult.confidentialInstanceType = this._confidentialInstanceType;
        }
        if (this._enableConfidentialCompute !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableConfidentialCompute = this._enableConfidentialCompute;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._confidentialInstanceType = undefined;
            this._enableConfidentialCompute = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._confidentialInstanceType = value.confidentialInstanceType;
            this._enableConfidentialCompute = value.enableConfidentialCompute;
        }
    }
    get confidentialInstanceType() {
        return this.getStringAttribute('confidential_instance_type');
    }
    set confidentialInstanceType(value) {
        this._confidentialInstanceType = value;
    }
    resetConfidentialInstanceType() {
        this._confidentialInstanceType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get confidentialInstanceTypeInput() {
        return this._confidentialInstanceType;
    }
    get enableConfidentialCompute() {
        return this.getBooleanAttribute('enable_confidential_compute');
    }
    set enableConfidentialCompute(value) {
        this._enableConfidentialCompute = value;
    }
    resetEnableConfidentialCompute() {
        this._enableConfidentialCompute = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableConfidentialComputeInput() {
        return this._enableConfidentialCompute;
    }
}
exports.ComputeRegionInstanceTemplateConfidentialInstanceConfigOutputReference = ComputeRegionInstanceTemplateConfidentialInstanceConfigOutputReference;
_b = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceTemplateConfidentialInstanceConfigOutputReference[_b] = { fqn: "@cdktf/provider-google.computeRegionInstanceTemplate.ComputeRegionInstanceTemplateConfidentialInstanceConfigOutputReference", version: "14.13.1" };
function computeRegionInstanceTemplateDiskDiskEncryptionKeyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        kms_key_self_link: cdktf.stringToTerraform(struct.kmsKeySelfLink),
    };
}
exports.computeRegionInstanceTemplateDiskDiskEncryptionKeyToTerraform = computeRegionInstanceTemplateDiskDiskEncryptionKeyToTerraform;
function computeRegionInstanceTemplateDiskDiskEncryptionKeyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        kms_key_self_link: {
            value: cdktf.stringToHclTerraform(struct.kmsKeySelfLink),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeRegionInstanceTemplateDiskDiskEncryptionKeyToHclTerraform = computeRegionInstanceTemplateDiskDiskEncryptionKeyToHclTerraform;
class ComputeRegionInstanceTemplateDiskDiskEncryptionKeyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._kmsKeySelfLink !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeySelfLink = this._kmsKeySelfLink;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._kmsKeySelfLink = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._kmsKeySelfLink = value.kmsKeySelfLink;
        }
    }
    get kmsKeySelfLink() {
        return this.getStringAttribute('kms_key_self_link');
    }
    set kmsKeySelfLink(value) {
        this._kmsKeySelfLink = value;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeySelfLinkInput() {
        return this._kmsKeySelfLink;
    }
}
exports.ComputeRegionInstanceTemplateDiskDiskEncryptionKeyOutputReference = ComputeRegionInstanceTemplateDiskDiskEncryptionKeyOutputReference;
_c = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceTemplateDiskDiskEncryptionKeyOutputReference[_c] = { fqn: "@cdktf/provider-google.computeRegionInstanceTemplate.ComputeRegionInstanceTemplateDiskDiskEncryptionKeyOutputReference", version: "14.13.1" };
function computeRegionInstanceTemplateDiskSourceImageEncryptionKeyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        kms_key_self_link: cdktf.stringToTerraform(struct.kmsKeySelfLink),
        kms_key_service_account: cdktf.stringToTerraform(struct.kmsKeyServiceAccount),
    };
}
exports.computeRegionInstanceTemplateDiskSourceImageEncryptionKeyToTerraform = computeRegionInstanceTemplateDiskSourceImageEncryptionKeyToTerraform;
function computeRegionInstanceTemplateDiskSourceImageEncryptionKeyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        kms_key_self_link: {
            value: cdktf.stringToHclTerraform(struct.kmsKeySelfLink),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        kms_key_service_account: {
            value: cdktf.stringToHclTerraform(struct.kmsKeyServiceAccount),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeRegionInstanceTemplateDiskSourceImageEncryptionKeyToHclTerraform = computeRegionInstanceTemplateDiskSourceImageEncryptionKeyToHclTerraform;
class ComputeRegionInstanceTemplateDiskSourceImageEncryptionKeyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._kmsKeySelfLink !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeySelfLink = this._kmsKeySelfLink;
        }
        if (this._kmsKeyServiceAccount !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyServiceAccount = this._kmsKeyServiceAccount;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._kmsKeySelfLink = undefined;
            this._kmsKeyServiceAccount = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._kmsKeySelfLink = value.kmsKeySelfLink;
            this._kmsKeyServiceAccount = value.kmsKeyServiceAccount;
        }
    }
    get kmsKeySelfLink() {
        return this.getStringAttribute('kms_key_self_link');
    }
    set kmsKeySelfLink(value) {
        this._kmsKeySelfLink = value;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeySelfLinkInput() {
        return this._kmsKeySelfLink;
    }
    get kmsKeyServiceAccount() {
        return this.getStringAttribute('kms_key_service_account');
    }
    set kmsKeyServiceAccount(value) {
        this._kmsKeyServiceAccount = value;
    }
    resetKmsKeyServiceAccount() {
        this._kmsKeyServiceAccount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyServiceAccountInput() {
        return this._kmsKeyServiceAccount;
    }
}
exports.ComputeRegionInstanceTemplateDiskSourceImageEncryptionKeyOutputReference = ComputeRegionInstanceTemplateDiskSourceImageEncryptionKeyOutputReference;
_d = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceTemplateDiskSourceImageEncryptionKeyOutputReference[_d] = { fqn: "@cdktf/provider-google.computeRegionInstanceTemplate.ComputeRegionInstanceTemplateDiskSourceImageEncryptionKeyOutputReference", version: "14.13.1" };
function computeRegionInstanceTemplateDiskSourceSnapshotEncryptionKeyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        kms_key_self_link: cdktf.stringToTerraform(struct.kmsKeySelfLink),
        kms_key_service_account: cdktf.stringToTerraform(struct.kmsKeyServiceAccount),
    };
}
exports.computeRegionInstanceTemplateDiskSourceSnapshotEncryptionKeyToTerraform = computeRegionInstanceTemplateDiskSourceSnapshotEncryptionKeyToTerraform;
function computeRegionInstanceTemplateDiskSourceSnapshotEncryptionKeyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        kms_key_self_link: {
            value: cdktf.stringToHclTerraform(struct.kmsKeySelfLink),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        kms_key_service_account: {
            value: cdktf.stringToHclTerraform(struct.kmsKeyServiceAccount),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeRegionInstanceTemplateDiskSourceSnapshotEncryptionKeyToHclTerraform = computeRegionInstanceTemplateDiskSourceSnapshotEncryptionKeyToHclTerraform;
class ComputeRegionInstanceTemplateDiskSourceSnapshotEncryptionKeyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._kmsKeySelfLink !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeySelfLink = this._kmsKeySelfLink;
        }
        if (this._kmsKeyServiceAccount !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyServiceAccount = this._kmsKeyServiceAccount;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._kmsKeySelfLink = undefined;
            this._kmsKeyServiceAccount = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._kmsKeySelfLink = value.kmsKeySelfLink;
            this._kmsKeyServiceAccount = value.kmsKeyServiceAccount;
        }
    }
    get kmsKeySelfLink() {
        return this.getStringAttribute('kms_key_self_link');
    }
    set kmsKeySelfLink(value) {
        this._kmsKeySelfLink = value;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeySelfLinkInput() {
        return this._kmsKeySelfLink;
    }
    get kmsKeyServiceAccount() {
        return this.getStringAttribute('kms_key_service_account');
    }
    set kmsKeyServiceAccount(value) {
        this._kmsKeyServiceAccount = value;
    }
    resetKmsKeyServiceAccount() {
        this._kmsKeyServiceAccount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyServiceAccountInput() {
        return this._kmsKeyServiceAccount;
    }
}
exports.ComputeRegionInstanceTemplateDiskSourceSnapshotEncryptionKeyOutputReference = ComputeRegionInstanceTemplateDiskSourceSnapshotEncryptionKeyOutputReference;
_e = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceTemplateDiskSourceSnapshotEncryptionKeyOutputReference[_e] = { fqn: "@cdktf/provider-google.computeRegionInstanceTemplate.ComputeRegionInstanceTemplateDiskSourceSnapshotEncryptionKeyOutputReference", version: "14.13.1" };
function computeRegionInstanceTemplateDiskToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        auto_delete: cdktf.booleanToTerraform(struct.autoDelete),
        boot: cdktf.booleanToTerraform(struct.boot),
        device_name: cdktf.stringToTerraform(struct.deviceName),
        disk_name: cdktf.stringToTerraform(struct.diskName),
        disk_size_gb: cdktf.numberToTerraform(struct.diskSizeGb),
        disk_type: cdktf.stringToTerraform(struct.diskType),
        interface: cdktf.stringToTerraform(struct.interface),
        labels: cdktf.hashMapper(cdktf.stringToTerraform)(struct.labels),
        mode: cdktf.stringToTerraform(struct.mode),
        provisioned_iops: cdktf.numberToTerraform(struct.provisionedIops),
        provisioned_throughput: cdktf.numberToTerraform(struct.provisionedThroughput),
        resource_manager_tags: cdktf.hashMapper(cdktf.stringToTerraform)(struct.resourceManagerTags),
        resource_policies: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.resourcePolicies),
        source: cdktf.stringToTerraform(struct.source),
        source_image: cdktf.stringToTerraform(struct.sourceImage),
        source_snapshot: cdktf.stringToTerraform(struct.sourceSnapshot),
        type: cdktf.stringToTerraform(struct.type),
        disk_encryption_key: computeRegionInstanceTemplateDiskDiskEncryptionKeyToTerraform(struct.diskEncryptionKey),
        source_image_encryption_key: computeRegionInstanceTemplateDiskSourceImageEncryptionKeyToTerraform(struct.sourceImageEncryptionKey),
        source_snapshot_encryption_key: computeRegionInstanceTemplateDiskSourceSnapshotEncryptionKeyToTerraform(struct.sourceSnapshotEncryptionKey),
    };
}
exports.computeRegionInstanceTemplateDiskToTerraform = computeRegionInstanceTemplateDiskToTerraform;
function computeRegionInstanceTemplateDiskToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        auto_delete: {
            value: cdktf.booleanToHclTerraform(struct.autoDelete),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        boot: {
            value: cdktf.booleanToHclTerraform(struct.boot),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        device_name: {
            value: cdktf.stringToHclTerraform(struct.deviceName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        disk_name: {
            value: cdktf.stringToHclTerraform(struct.diskName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        disk_size_gb: {
            value: cdktf.numberToHclTerraform(struct.diskSizeGb),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        disk_type: {
            value: cdktf.stringToHclTerraform(struct.diskType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        interface: {
            value: cdktf.stringToHclTerraform(struct.interface),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        labels: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.labels),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        mode: {
            value: cdktf.stringToHclTerraform(struct.mode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        provisioned_iops: {
            value: cdktf.numberToHclTerraform(struct.provisionedIops),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        provisioned_throughput: {
            value: cdktf.numberToHclTerraform(struct.provisionedThroughput),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        resource_manager_tags: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.resourceManagerTags),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        resource_policies: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.resourcePolicies),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        source: {
            value: cdktf.stringToHclTerraform(struct.source),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        source_image: {
            value: cdktf.stringToHclTerraform(struct.sourceImage),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        source_snapshot: {
            value: cdktf.stringToHclTerraform(struct.sourceSnapshot),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        type: {
            value: cdktf.stringToHclTerraform(struct.type),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        disk_encryption_key: {
            value: computeRegionInstanceTemplateDiskDiskEncryptionKeyToHclTerraform(struct.diskEncryptionKey),
            isBlock: true,
            type: "list",
            storageClassType: "ComputeRegionInstanceTemplateDiskDiskEncryptionKeyList",
        },
        source_image_encryption_key: {
            value: computeRegionInstanceTemplateDiskSourceImageEncryptionKeyToHclTerraform(struct.sourceImageEncryptionKey),
            isBlock: true,
            type: "list",
            storageClassType: "ComputeRegionInstanceTemplateDiskSourceImageEncryptionKeyList",
        },
        source_snapshot_encryption_key: {
            value: computeRegionInstanceTemplateDiskSourceSnapshotEncryptionKeyToHclTerraform(struct.sourceSnapshotEncryptionKey),
            isBlock: true,
            type: "list",
            storageClassType: "ComputeRegionInstanceTemplateDiskSourceSnapshotEncryptionKeyList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeRegionInstanceTemplateDiskToHclTerraform = computeRegionInstanceTemplateDiskToHclTerraform;
class ComputeRegionInstanceTemplateDiskOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // disk_encryption_key - computed: false, optional: true, required: false
        this._diskEncryptionKey = new ComputeRegionInstanceTemplateDiskDiskEncryptionKeyOutputReference(this, "disk_encryption_key");
        // source_image_encryption_key - computed: false, optional: true, required: false
        this._sourceImageEncryptionKey = new ComputeRegionInstanceTemplateDiskSourceImageEncryptionKeyOutputReference(this, "source_image_encryption_key");
        // source_snapshot_encryption_key - computed: false, optional: true, required: false
        this._sourceSnapshotEncryptionKey = new ComputeRegionInstanceTemplateDiskSourceSnapshotEncryptionKeyOutputReference(this, "source_snapshot_encryption_key");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._autoDelete !== undefined) {
            hasAnyValues = true;
            internalValueResult.autoDelete = this._autoDelete;
        }
        if (this._boot !== undefined) {
            hasAnyValues = true;
            internalValueResult.boot = this._boot;
        }
        if (this._deviceName !== undefined) {
            hasAnyValues = true;
            internalValueResult.deviceName = this._deviceName;
        }
        if (this._diskName !== undefined) {
            hasAnyValues = true;
            internalValueResult.diskName = this._diskName;
        }
        if (this._diskSizeGb !== undefined) {
            hasAnyValues = true;
            internalValueResult.diskSizeGb = this._diskSizeGb;
        }
        if (this._diskType !== undefined) {
            hasAnyValues = true;
            internalValueResult.diskType = this._diskType;
        }
        if (this._interface !== undefined) {
            hasAnyValues = true;
            internalValueResult.interface = this._interface;
        }
        if (this._labels !== undefined) {
            hasAnyValues = true;
            internalValueResult.labels = this._labels;
        }
        if (this._mode !== undefined) {
            hasAnyValues = true;
            internalValueResult.mode = this._mode;
        }
        if (this._provisionedIops !== undefined) {
            hasAnyValues = true;
            internalValueResult.provisionedIops = this._provisionedIops;
        }
        if (this._provisionedThroughput !== undefined) {
            hasAnyValues = true;
            internalValueResult.provisionedThroughput = this._provisionedThroughput;
        }
        if (this._resourceManagerTags !== undefined) {
            hasAnyValues = true;
            internalValueResult.resourceManagerTags = this._resourceManagerTags;
        }
        if (this._resourcePolicies !== undefined) {
            hasAnyValues = true;
            internalValueResult.resourcePolicies = this._resourcePolicies;
        }
        if (this._source !== undefined) {
            hasAnyValues = true;
            internalValueResult.source = this._source;
        }
        if (this._sourceImage !== undefined) {
            hasAnyValues = true;
            internalValueResult.sourceImage = this._sourceImage;
        }
        if (this._sourceSnapshot !== undefined) {
            hasAnyValues = true;
            internalValueResult.sourceSnapshot = this._sourceSnapshot;
        }
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        if (this._diskEncryptionKey?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.diskEncryptionKey = this._diskEncryptionKey?.internalValue;
        }
        if (this._sourceImageEncryptionKey?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sourceImageEncryptionKey = this._sourceImageEncryptionKey?.internalValue;
        }
        if (this._sourceSnapshotEncryptionKey?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sourceSnapshotEncryptionKey = this._sourceSnapshotEncryptionKey?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._autoDelete = undefined;
            this._boot = undefined;
            this._deviceName = undefined;
            this._diskName = undefined;
            this._diskSizeGb = undefined;
            this._diskType = undefined;
            this._interface = undefined;
            this._labels = undefined;
            this._mode = undefined;
            this._provisionedIops = undefined;
            this._provisionedThroughput = undefined;
            this._resourceManagerTags = undefined;
            this._resourcePolicies = undefined;
            this._source = undefined;
            this._sourceImage = undefined;
            this._sourceSnapshot = undefined;
            this._type = undefined;
            this._diskEncryptionKey.internalValue = undefined;
            this._sourceImageEncryptionKey.internalValue = undefined;
            this._sourceSnapshotEncryptionKey.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._autoDelete = value.autoDelete;
            this._boot = value.boot;
            this._deviceName = value.deviceName;
            this._diskName = value.diskName;
            this._diskSizeGb = value.diskSizeGb;
            this._diskType = value.diskType;
            this._interface = value.interface;
            this._labels = value.labels;
            this._mode = value.mode;
            this._provisionedIops = value.provisionedIops;
            this._provisionedThroughput = value.provisionedThroughput;
            this._resourceManagerTags = value.resourceManagerTags;
            this._resourcePolicies = value.resourcePolicies;
            this._source = value.source;
            this._sourceImage = value.sourceImage;
            this._sourceSnapshot = value.sourceSnapshot;
            this._type = value.type;
            this._diskEncryptionKey.internalValue = value.diskEncryptionKey;
            this._sourceImageEncryptionKey.internalValue = value.sourceImageEncryptionKey;
            this._sourceSnapshotEncryptionKey.internalValue = value.sourceSnapshotEncryptionKey;
        }
    }
    get autoDelete() {
        return this.getBooleanAttribute('auto_delete');
    }
    set autoDelete(value) {
        this._autoDelete = value;
    }
    resetAutoDelete() {
        this._autoDelete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoDeleteInput() {
        return this._autoDelete;
    }
    get boot() {
        return this.getBooleanAttribute('boot');
    }
    set boot(value) {
        this._boot = value;
    }
    resetBoot() {
        this._boot = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bootInput() {
        return this._boot;
    }
    get deviceName() {
        return this.getStringAttribute('device_name');
    }
    set deviceName(value) {
        this._deviceName = value;
    }
    resetDeviceName() {
        this._deviceName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deviceNameInput() {
        return this._deviceName;
    }
    get diskName() {
        return this.getStringAttribute('disk_name');
    }
    set diskName(value) {
        this._diskName = value;
    }
    resetDiskName() {
        this._diskName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get diskNameInput() {
        return this._diskName;
    }
    get diskSizeGb() {
        return this.getNumberAttribute('disk_size_gb');
    }
    set diskSizeGb(value) {
        this._diskSizeGb = value;
    }
    resetDiskSizeGb() {
        this._diskSizeGb = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get diskSizeGbInput() {
        return this._diskSizeGb;
    }
    get diskType() {
        return this.getStringAttribute('disk_type');
    }
    set diskType(value) {
        this._diskType = value;
    }
    resetDiskType() {
        this._diskType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get diskTypeInput() {
        return this._diskType;
    }
    get interface() {
        return this.getStringAttribute('interface');
    }
    set interface(value) {
        this._interface = value;
    }
    resetInterface() {
        this._interface = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get interfaceInput() {
        return this._interface;
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get mode() {
        return this.getStringAttribute('mode');
    }
    set mode(value) {
        this._mode = value;
    }
    resetMode() {
        this._mode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get modeInput() {
        return this._mode;
    }
    get provisionedIops() {
        return this.getNumberAttribute('provisioned_iops');
    }
    set provisionedIops(value) {
        this._provisionedIops = value;
    }
    resetProvisionedIops() {
        this._provisionedIops = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get provisionedIopsInput() {
        return this._provisionedIops;
    }
    get provisionedThroughput() {
        return this.getNumberAttribute('provisioned_throughput');
    }
    set provisionedThroughput(value) {
        this._provisionedThroughput = value;
    }
    resetProvisionedThroughput() {
        this._provisionedThroughput = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get provisionedThroughputInput() {
        return this._provisionedThroughput;
    }
    get resourceManagerTags() {
        return this.getStringMapAttribute('resource_manager_tags');
    }
    set resourceManagerTags(value) {
        this._resourceManagerTags = value;
    }
    resetResourceManagerTags() {
        this._resourceManagerTags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceManagerTagsInput() {
        return this._resourceManagerTags;
    }
    get resourcePolicies() {
        return this.getListAttribute('resource_policies');
    }
    set resourcePolicies(value) {
        this._resourcePolicies = value;
    }
    resetResourcePolicies() {
        this._resourcePolicies = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourcePoliciesInput() {
        return this._resourcePolicies;
    }
    get source() {
        return this.getStringAttribute('source');
    }
    set source(value) {
        this._source = value;
    }
    resetSource() {
        this._source = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sourceInput() {
        return this._source;
    }
    get sourceImage() {
        return this.getStringAttribute('source_image');
    }
    set sourceImage(value) {
        this._sourceImage = value;
    }
    resetSourceImage() {
        this._sourceImage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sourceImageInput() {
        return this._sourceImage;
    }
    get sourceSnapshot() {
        return this.getStringAttribute('source_snapshot');
    }
    set sourceSnapshot(value) {
        this._sourceSnapshot = value;
    }
    resetSourceSnapshot() {
        this._sourceSnapshot = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sourceSnapshotInput() {
        return this._sourceSnapshot;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    resetType() {
        this._type = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    get diskEncryptionKey() {
        return this._diskEncryptionKey;
    }
    putDiskEncryptionKey(value) {
        this._diskEncryptionKey.internalValue = value;
    }
    resetDiskEncryptionKey() {
        this._diskEncryptionKey.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get diskEncryptionKeyInput() {
        return this._diskEncryptionKey.internalValue;
    }
    get sourceImageEncryptionKey() {
        return this._sourceImageEncryptionKey;
    }
    putSourceImageEncryptionKey(value) {
        this._sourceImageEncryptionKey.internalValue = value;
    }
    resetSourceImageEncryptionKey() {
        this._sourceImageEncryptionKey.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sourceImageEncryptionKeyInput() {
        return this._sourceImageEncryptionKey.internalValue;
    }
    get sourceSnapshotEncryptionKey() {
        return this._sourceSnapshotEncryptionKey;
    }
    putSourceSnapshotEncryptionKey(value) {
        this._sourceSnapshotEncryptionKey.internalValue = value;
    }
    resetSourceSnapshotEncryptionKey() {
        this._sourceSnapshotEncryptionKey.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sourceSnapshotEncryptionKeyInput() {
        return this._sourceSnapshotEncryptionKey.internalValue;
    }
}
exports.ComputeRegionInstanceTemplateDiskOutputReference = ComputeRegionInstanceTemplateDiskOutputReference;
_f = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceTemplateDiskOutputReference[_f] = { fqn: "@cdktf/provider-google.computeRegionInstanceTemplate.ComputeRegionInstanceTemplateDiskOutputReference", version: "14.13.1" };
class ComputeRegionInstanceTemplateDiskList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeRegionInstanceTemplateDiskOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeRegionInstanceTemplateDiskList = ComputeRegionInstanceTemplateDiskList;
_g = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceTemplateDiskList[_g] = { fqn: "@cdktf/provider-google.computeRegionInstanceTemplate.ComputeRegionInstanceTemplateDiskList", version: "14.13.1" };
function computeRegionInstanceTemplateGuestAcceleratorToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        count: cdktf.numberToTerraform(struct.count),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.computeRegionInstanceTemplateGuestAcceleratorToTerraform = computeRegionInstanceTemplateGuestAcceleratorToTerraform;
function computeRegionInstanceTemplateGuestAcceleratorToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        count: {
            value: cdktf.numberToHclTerraform(struct.count),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        type: {
            value: cdktf.stringToHclTerraform(struct.type),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeRegionInstanceTemplateGuestAcceleratorToHclTerraform = computeRegionInstanceTemplateGuestAcceleratorToHclTerraform;
class ComputeRegionInstanceTemplateGuestAcceleratorOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._count !== undefined) {
            hasAnyValues = true;
            internalValueResult.count = this._count;
        }
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._count = undefined;
            this._type = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._count = value.count;
            this._type = value.type;
        }
    }
    get count() {
        return this.getNumberAttribute('count');
    }
    set count(value) {
        this._count = value;
    }
    // Temporarily expose input value. Use with caution.
    get countInput() {
        return this._count;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
}
exports.ComputeRegionInstanceTemplateGuestAcceleratorOutputReference = ComputeRegionInstanceTemplateGuestAcceleratorOutputReference;
_h = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceTemplateGuestAcceleratorOutputReference[_h] = { fqn: "@cdktf/provider-google.computeRegionInstanceTemplate.ComputeRegionInstanceTemplateGuestAcceleratorOutputReference", version: "14.13.1" };
class ComputeRegionInstanceTemplateGuestAcceleratorList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeRegionInstanceTemplateGuestAcceleratorOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeRegionInstanceTemplateGuestAcceleratorList = ComputeRegionInstanceTemplateGuestAcceleratorList;
_j = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceTemplateGuestAcceleratorList[_j] = { fqn: "@cdktf/provider-google.computeRegionInstanceTemplate.ComputeRegionInstanceTemplateGuestAcceleratorList", version: "14.13.1" };
function computeRegionInstanceTemplateNetworkInterfaceAccessConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        nat_ip: cdktf.stringToTerraform(struct.natIp),
        network_tier: cdktf.stringToTerraform(struct.networkTier),
    };
}
exports.computeRegionInstanceTemplateNetworkInterfaceAccessConfigToTerraform = computeRegionInstanceTemplateNetworkInterfaceAccessConfigToTerraform;
function computeRegionInstanceTemplateNetworkInterfaceAccessConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        nat_ip: {
            value: cdktf.stringToHclTerraform(struct.natIp),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        network_tier: {
            value: cdktf.stringToHclTerraform(struct.networkTier),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeRegionInstanceTemplateNetworkInterfaceAccessConfigToHclTerraform = computeRegionInstanceTemplateNetworkInterfaceAccessConfigToHclTerraform;
class ComputeRegionInstanceTemplateNetworkInterfaceAccessConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._natIp !== undefined) {
            hasAnyValues = true;
            internalValueResult.natIp = this._natIp;
        }
        if (this._networkTier !== undefined) {
            hasAnyValues = true;
            internalValueResult.networkTier = this._networkTier;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._natIp = undefined;
            this._networkTier = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._natIp = value.natIp;
            this._networkTier = value.networkTier;
        }
    }
    get natIp() {
        return this.getStringAttribute('nat_ip');
    }
    set natIp(value) {
        this._natIp = value;
    }
    resetNatIp() {
        this._natIp = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get natIpInput() {
        return this._natIp;
    }
    get networkTier() {
        return this.getStringAttribute('network_tier');
    }
    set networkTier(value) {
        this._networkTier = value;
    }
    resetNetworkTier() {
        this._networkTier = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkTierInput() {
        return this._networkTier;
    }
    // public_ptr_domain_name - computed: true, optional: false, required: false
    get publicPtrDomainName() {
        return this.getStringAttribute('public_ptr_domain_name');
    }
}
exports.ComputeRegionInstanceTemplateNetworkInterfaceAccessConfigOutputReference = ComputeRegionInstanceTemplateNetworkInterfaceAccessConfigOutputReference;
_k = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceTemplateNetworkInterfaceAccessConfigOutputReference[_k] = { fqn: "@cdktf/provider-google.computeRegionInstanceTemplate.ComputeRegionInstanceTemplateNetworkInterfaceAccessConfigOutputReference", version: "14.13.1" };
class ComputeRegionInstanceTemplateNetworkInterfaceAccessConfigList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeRegionInstanceTemplateNetworkInterfaceAccessConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeRegionInstanceTemplateNetworkInterfaceAccessConfigList = ComputeRegionInstanceTemplateNetworkInterfaceAccessConfigList;
_l = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceTemplateNetworkInterfaceAccessConfigList[_l] = { fqn: "@cdktf/provider-google.computeRegionInstanceTemplate.ComputeRegionInstanceTemplateNetworkInterfaceAccessConfigList", version: "14.13.1" };
function computeRegionInstanceTemplateNetworkInterfaceAliasIpRangeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        ip_cidr_range: cdktf.stringToTerraform(struct.ipCidrRange),
        subnetwork_range_name: cdktf.stringToTerraform(struct.subnetworkRangeName),
    };
}
exports.computeRegionInstanceTemplateNetworkInterfaceAliasIpRangeToTerraform = computeRegionInstanceTemplateNetworkInterfaceAliasIpRangeToTerraform;
function computeRegionInstanceTemplateNetworkInterfaceAliasIpRangeToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        ip_cidr_range: {
            value: cdktf.stringToHclTerraform(struct.ipCidrRange),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        subnetwork_range_name: {
            value: cdktf.stringToHclTerraform(struct.subnetworkRangeName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeRegionInstanceTemplateNetworkInterfaceAliasIpRangeToHclTerraform = computeRegionInstanceTemplateNetworkInterfaceAliasIpRangeToHclTerraform;
class ComputeRegionInstanceTemplateNetworkInterfaceAliasIpRangeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._ipCidrRange !== undefined) {
            hasAnyValues = true;
            internalValueResult.ipCidrRange = this._ipCidrRange;
        }
        if (this._subnetworkRangeName !== undefined) {
            hasAnyValues = true;
            internalValueResult.subnetworkRangeName = this._subnetworkRangeName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._ipCidrRange = undefined;
            this._subnetworkRangeName = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._ipCidrRange = value.ipCidrRange;
            this._subnetworkRangeName = value.subnetworkRangeName;
        }
    }
    get ipCidrRange() {
        return this.getStringAttribute('ip_cidr_range');
    }
    set ipCidrRange(value) {
        this._ipCidrRange = value;
    }
    // Temporarily expose input value. Use with caution.
    get ipCidrRangeInput() {
        return this._ipCidrRange;
    }
    get subnetworkRangeName() {
        return this.getStringAttribute('subnetwork_range_name');
    }
    set subnetworkRangeName(value) {
        this._subnetworkRangeName = value;
    }
    resetSubnetworkRangeName() {
        this._subnetworkRangeName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subnetworkRangeNameInput() {
        return this._subnetworkRangeName;
    }
}
exports.ComputeRegionInstanceTemplateNetworkInterfaceAliasIpRangeOutputReference = ComputeRegionInstanceTemplateNetworkInterfaceAliasIpRangeOutputReference;
_m = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceTemplateNetworkInterfaceAliasIpRangeOutputReference[_m] = { fqn: "@cdktf/provider-google.computeRegionInstanceTemplate.ComputeRegionInstanceTemplateNetworkInterfaceAliasIpRangeOutputReference", version: "14.13.1" };
class ComputeRegionInstanceTemplateNetworkInterfaceAliasIpRangeList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeRegionInstanceTemplateNetworkInterfaceAliasIpRangeOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeRegionInstanceTemplateNetworkInterfaceAliasIpRangeList = ComputeRegionInstanceTemplateNetworkInterfaceAliasIpRangeList;
_o = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceTemplateNetworkInterfaceAliasIpRangeList[_o] = { fqn: "@cdktf/provider-google.computeRegionInstanceTemplate.ComputeRegionInstanceTemplateNetworkInterfaceAliasIpRangeList", version: "14.13.1" };
function computeRegionInstanceTemplateNetworkInterfaceIpv6AccessConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        network_tier: cdktf.stringToTerraform(struct.networkTier),
    };
}
exports.computeRegionInstanceTemplateNetworkInterfaceIpv6AccessConfigToTerraform = computeRegionInstanceTemplateNetworkInterfaceIpv6AccessConfigToTerraform;
function computeRegionInstanceTemplateNetworkInterfaceIpv6AccessConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        network_tier: {
            value: cdktf.stringToHclTerraform(struct.networkTier),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeRegionInstanceTemplateNetworkInterfaceIpv6AccessConfigToHclTerraform = computeRegionInstanceTemplateNetworkInterfaceIpv6AccessConfigToHclTerraform;
class ComputeRegionInstanceTemplateNetworkInterfaceIpv6AccessConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._networkTier !== undefined) {
            hasAnyValues = true;
            internalValueResult.networkTier = this._networkTier;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._networkTier = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._networkTier = value.networkTier;
        }
    }
    // external_ipv6 - computed: true, optional: false, required: false
    get externalIpv6() {
        return this.getStringAttribute('external_ipv6');
    }
    // external_ipv6_prefix_length - computed: true, optional: false, required: false
    get externalIpv6PrefixLength() {
        return this.getStringAttribute('external_ipv6_prefix_length');
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get networkTier() {
        return this.getStringAttribute('network_tier');
    }
    set networkTier(value) {
        this._networkTier = value;
    }
    // Temporarily expose input value. Use with caution.
    get networkTierInput() {
        return this._networkTier;
    }
    // public_ptr_domain_name - computed: true, optional: false, required: false
    get publicPtrDomainName() {
        return this.getStringAttribute('public_ptr_domain_name');
    }
}
exports.ComputeRegionInstanceTemplateNetworkInterfaceIpv6AccessConfigOutputReference = ComputeRegionInstanceTemplateNetworkInterfaceIpv6AccessConfigOutputReference;
_p = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceTemplateNetworkInterfaceIpv6AccessConfigOutputReference[_p] = { fqn: "@cdktf/provider-google.computeRegionInstanceTemplate.ComputeRegionInstanceTemplateNetworkInterfaceIpv6AccessConfigOutputReference", version: "14.13.1" };
class ComputeRegionInstanceTemplateNetworkInterfaceIpv6AccessConfigList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeRegionInstanceTemplateNetworkInterfaceIpv6AccessConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeRegionInstanceTemplateNetworkInterfaceIpv6AccessConfigList = ComputeRegionInstanceTemplateNetworkInterfaceIpv6AccessConfigList;
_q = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceTemplateNetworkInterfaceIpv6AccessConfigList[_q] = { fqn: "@cdktf/provider-google.computeRegionInstanceTemplate.ComputeRegionInstanceTemplateNetworkInterfaceIpv6AccessConfigList", version: "14.13.1" };
function computeRegionInstanceTemplateNetworkInterfaceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        internal_ipv6_prefix_length: cdktf.numberToTerraform(struct.internalIpv6PrefixLength),
        ipv6_address: cdktf.stringToTerraform(struct.ipv6Address),
        network: cdktf.stringToTerraform(struct.network),
        network_ip: cdktf.stringToTerraform(struct.networkIp),
        nic_type: cdktf.stringToTerraform(struct.nicType),
        queue_count: cdktf.numberToTerraform(struct.queueCount),
        stack_type: cdktf.stringToTerraform(struct.stackType),
        subnetwork: cdktf.stringToTerraform(struct.subnetwork),
        subnetwork_project: cdktf.stringToTerraform(struct.subnetworkProject),
        access_config: cdktf.listMapper(computeRegionInstanceTemplateNetworkInterfaceAccessConfigToTerraform, true)(struct.accessConfig),
        alias_ip_range: cdktf.listMapper(computeRegionInstanceTemplateNetworkInterfaceAliasIpRangeToTerraform, true)(struct.aliasIpRange),
        ipv6_access_config: cdktf.listMapper(computeRegionInstanceTemplateNetworkInterfaceIpv6AccessConfigToTerraform, true)(struct.ipv6AccessConfig),
    };
}
exports.computeRegionInstanceTemplateNetworkInterfaceToTerraform = computeRegionInstanceTemplateNetworkInterfaceToTerraform;
function computeRegionInstanceTemplateNetworkInterfaceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        internal_ipv6_prefix_length: {
            value: cdktf.numberToHclTerraform(struct.internalIpv6PrefixLength),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        ipv6_address: {
            value: cdktf.stringToHclTerraform(struct.ipv6Address),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        network: {
            value: cdktf.stringToHclTerraform(struct.network),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        network_ip: {
            value: cdktf.stringToHclTerraform(struct.networkIp),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        nic_type: {
            value: cdktf.stringToHclTerraform(struct.nicType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        queue_count: {
            value: cdktf.numberToHclTerraform(struct.queueCount),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        stack_type: {
            value: cdktf.stringToHclTerraform(struct.stackType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        subnetwork: {
            value: cdktf.stringToHclTerraform(struct.subnetwork),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        subnetwork_project: {
            value: cdktf.stringToHclTerraform(struct.subnetworkProject),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        access_config: {
            value: cdktf.listMapperHcl(computeRegionInstanceTemplateNetworkInterfaceAccessConfigToHclTerraform, true)(struct.accessConfig),
            isBlock: true,
            type: "list",
            storageClassType: "ComputeRegionInstanceTemplateNetworkInterfaceAccessConfigList",
        },
        alias_ip_range: {
            value: cdktf.listMapperHcl(computeRegionInstanceTemplateNetworkInterfaceAliasIpRangeToHclTerraform, true)(struct.aliasIpRange),
            isBlock: true,
            type: "list",
            storageClassType: "ComputeRegionInstanceTemplateNetworkInterfaceAliasIpRangeList",
        },
        ipv6_access_config: {
            value: cdktf.listMapperHcl(computeRegionInstanceTemplateNetworkInterfaceIpv6AccessConfigToHclTerraform, true)(struct.ipv6AccessConfig),
            isBlock: true,
            type: "list",
            storageClassType: "ComputeRegionInstanceTemplateNetworkInterfaceIpv6AccessConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeRegionInstanceTemplateNetworkInterfaceToHclTerraform = computeRegionInstanceTemplateNetworkInterfaceToHclTerraform;
class ComputeRegionInstanceTemplateNetworkInterfaceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // access_config - computed: false, optional: true, required: false
        this._accessConfig = new ComputeRegionInstanceTemplateNetworkInterfaceAccessConfigList(this, "access_config", false);
        // alias_ip_range - computed: false, optional: true, required: false
        this._aliasIpRange = new ComputeRegionInstanceTemplateNetworkInterfaceAliasIpRangeList(this, "alias_ip_range", false);
        // ipv6_access_config - computed: false, optional: true, required: false
        this._ipv6AccessConfig = new ComputeRegionInstanceTemplateNetworkInterfaceIpv6AccessConfigList(this, "ipv6_access_config", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._internalIpv6PrefixLength !== undefined) {
            hasAnyValues = true;
            internalValueResult.internalIpv6PrefixLength = this._internalIpv6PrefixLength;
        }
        if (this._ipv6Address !== undefined) {
            hasAnyValues = true;
            internalValueResult.ipv6Address = this._ipv6Address;
        }
        if (this._network !== undefined) {
            hasAnyValues = true;
            internalValueResult.network = this._network;
        }
        if (this._networkIp !== undefined) {
            hasAnyValues = true;
            internalValueResult.networkIp = this._networkIp;
        }
        if (this._nicType !== undefined) {
            hasAnyValues = true;
            internalValueResult.nicType = this._nicType;
        }
        if (this._queueCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.queueCount = this._queueCount;
        }
        if (this._stackType !== undefined) {
            hasAnyValues = true;
            internalValueResult.stackType = this._stackType;
        }
        if (this._subnetwork !== undefined) {
            hasAnyValues = true;
            internalValueResult.subnetwork = this._subnetwork;
        }
        if (this._subnetworkProject !== undefined) {
            hasAnyValues = true;
            internalValueResult.subnetworkProject = this._subnetworkProject;
        }
        if (this._accessConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.accessConfig = this._accessConfig?.internalValue;
        }
        if (this._aliasIpRange?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.aliasIpRange = this._aliasIpRange?.internalValue;
        }
        if (this._ipv6AccessConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ipv6AccessConfig = this._ipv6AccessConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._internalIpv6PrefixLength = undefined;
            this._ipv6Address = undefined;
            this._network = undefined;
            this._networkIp = undefined;
            this._nicType = undefined;
            this._queueCount = undefined;
            this._stackType = undefined;
            this._subnetwork = undefined;
            this._subnetworkProject = undefined;
            this._accessConfig.internalValue = undefined;
            this._aliasIpRange.internalValue = undefined;
            this._ipv6AccessConfig.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._internalIpv6PrefixLength = value.internalIpv6PrefixLength;
            this._ipv6Address = value.ipv6Address;
            this._network = value.network;
            this._networkIp = value.networkIp;
            this._nicType = value.nicType;
            this._queueCount = value.queueCount;
            this._stackType = value.stackType;
            this._subnetwork = value.subnetwork;
            this._subnetworkProject = value.subnetworkProject;
            this._accessConfig.internalValue = value.accessConfig;
            this._aliasIpRange.internalValue = value.aliasIpRange;
            this._ipv6AccessConfig.internalValue = value.ipv6AccessConfig;
        }
    }
    get internalIpv6PrefixLength() {
        return this.getNumberAttribute('internal_ipv6_prefix_length');
    }
    set internalIpv6PrefixLength(value) {
        this._internalIpv6PrefixLength = value;
    }
    resetInternalIpv6PrefixLength() {
        this._internalIpv6PrefixLength = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get internalIpv6PrefixLengthInput() {
        return this._internalIpv6PrefixLength;
    }
    // ipv6_access_type - computed: true, optional: false, required: false
    get ipv6AccessType() {
        return this.getStringAttribute('ipv6_access_type');
    }
    get ipv6Address() {
        return this.getStringAttribute('ipv6_address');
    }
    set ipv6Address(value) {
        this._ipv6Address = value;
    }
    resetIpv6Address() {
        this._ipv6Address = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ipv6AddressInput() {
        return this._ipv6Address;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get network() {
        return this.getStringAttribute('network');
    }
    set network(value) {
        this._network = value;
    }
    resetNetwork() {
        this._network = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkInput() {
        return this._network;
    }
    get networkIp() {
        return this.getStringAttribute('network_ip');
    }
    set networkIp(value) {
        this._networkIp = value;
    }
    resetNetworkIp() {
        this._networkIp = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkIpInput() {
        return this._networkIp;
    }
    get nicType() {
        return this.getStringAttribute('nic_type');
    }
    set nicType(value) {
        this._nicType = value;
    }
    resetNicType() {
        this._nicType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nicTypeInput() {
        return this._nicType;
    }
    get queueCount() {
        return this.getNumberAttribute('queue_count');
    }
    set queueCount(value) {
        this._queueCount = value;
    }
    resetQueueCount() {
        this._queueCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get queueCountInput() {
        return this._queueCount;
    }
    get stackType() {
        return this.getStringAttribute('stack_type');
    }
    set stackType(value) {
        this._stackType = value;
    }
    resetStackType() {
        this._stackType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stackTypeInput() {
        return this._stackType;
    }
    get subnetwork() {
        return this.getStringAttribute('subnetwork');
    }
    set subnetwork(value) {
        this._subnetwork = value;
    }
    resetSubnetwork() {
        this._subnetwork = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subnetworkInput() {
        return this._subnetwork;
    }
    get subnetworkProject() {
        return this.getStringAttribute('subnetwork_project');
    }
    set subnetworkProject(value) {
        this._subnetworkProject = value;
    }
    resetSubnetworkProject() {
        this._subnetworkProject = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subnetworkProjectInput() {
        return this._subnetworkProject;
    }
    get accessConfig() {
        return this._accessConfig;
    }
    putAccessConfig(value) {
        this._accessConfig.internalValue = value;
    }
    resetAccessConfig() {
        this._accessConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accessConfigInput() {
        return this._accessConfig.internalValue;
    }
    get aliasIpRange() {
        return this._aliasIpRange;
    }
    putAliasIpRange(value) {
        this._aliasIpRange.internalValue = value;
    }
    resetAliasIpRange() {
        this._aliasIpRange.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get aliasIpRangeInput() {
        return this._aliasIpRange.internalValue;
    }
    get ipv6AccessConfig() {
        return this._ipv6AccessConfig;
    }
    putIpv6AccessConfig(value) {
        this._ipv6AccessConfig.internalValue = value;
    }
    resetIpv6AccessConfig() {
        this._ipv6AccessConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ipv6AccessConfigInput() {
        return this._ipv6AccessConfig.internalValue;
    }
}
exports.ComputeRegionInstanceTemplateNetworkInterfaceOutputReference = ComputeRegionInstanceTemplateNetworkInterfaceOutputReference;
_r = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceTemplateNetworkInterfaceOutputReference[_r] = { fqn: "@cdktf/provider-google.computeRegionInstanceTemplate.ComputeRegionInstanceTemplateNetworkInterfaceOutputReference", version: "14.13.1" };
class ComputeRegionInstanceTemplateNetworkInterfaceList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeRegionInstanceTemplateNetworkInterfaceOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeRegionInstanceTemplateNetworkInterfaceList = ComputeRegionInstanceTemplateNetworkInterfaceList;
_s = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceTemplateNetworkInterfaceList[_s] = { fqn: "@cdktf/provider-google.computeRegionInstanceTemplate.ComputeRegionInstanceTemplateNetworkInterfaceList", version: "14.13.1" };
function computeRegionInstanceTemplateNetworkPerformanceConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        total_egress_bandwidth_tier: cdktf.stringToTerraform(struct.totalEgressBandwidthTier),
    };
}
exports.computeRegionInstanceTemplateNetworkPerformanceConfigToTerraform = computeRegionInstanceTemplateNetworkPerformanceConfigToTerraform;
function computeRegionInstanceTemplateNetworkPerformanceConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        total_egress_bandwidth_tier: {
            value: cdktf.stringToHclTerraform(struct.totalEgressBandwidthTier),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeRegionInstanceTemplateNetworkPerformanceConfigToHclTerraform = computeRegionInstanceTemplateNetworkPerformanceConfigToHclTerraform;
class ComputeRegionInstanceTemplateNetworkPerformanceConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._totalEgressBandwidthTier !== undefined) {
            hasAnyValues = true;
            internalValueResult.totalEgressBandwidthTier = this._totalEgressBandwidthTier;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._totalEgressBandwidthTier = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._totalEgressBandwidthTier = value.totalEgressBandwidthTier;
        }
    }
    get totalEgressBandwidthTier() {
        return this.getStringAttribute('total_egress_bandwidth_tier');
    }
    set totalEgressBandwidthTier(value) {
        this._totalEgressBandwidthTier = value;
    }
    // Temporarily expose input value. Use with caution.
    get totalEgressBandwidthTierInput() {
        return this._totalEgressBandwidthTier;
    }
}
exports.ComputeRegionInstanceTemplateNetworkPerformanceConfigOutputReference = ComputeRegionInstanceTemplateNetworkPerformanceConfigOutputReference;
_t = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceTemplateNetworkPerformanceConfigOutputReference[_t] = { fqn: "@cdktf/provider-google.computeRegionInstanceTemplate.ComputeRegionInstanceTemplateNetworkPerformanceConfigOutputReference", version: "14.13.1" };
function computeRegionInstanceTemplateReservationAffinitySpecificReservationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.values),
    };
}
exports.computeRegionInstanceTemplateReservationAffinitySpecificReservationToTerraform = computeRegionInstanceTemplateReservationAffinitySpecificReservationToTerraform;
function computeRegionInstanceTemplateReservationAffinitySpecificReservationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        key: {
            value: cdktf.stringToHclTerraform(struct.key),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        values: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.values),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeRegionInstanceTemplateReservationAffinitySpecificReservationToHclTerraform = computeRegionInstanceTemplateReservationAffinitySpecificReservationToHclTerraform;
class ComputeRegionInstanceTemplateReservationAffinitySpecificReservationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._values !== undefined) {
            hasAnyValues = true;
            internalValueResult.values = this._values;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._key = undefined;
            this._values = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._key = value.key;
            this._values = value.values;
        }
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get values() {
        return this.getListAttribute('values');
    }
    set values(value) {
        this._values = value;
    }
    // Temporarily expose input value. Use with caution.
    get valuesInput() {
        return this._values;
    }
}
exports.ComputeRegionInstanceTemplateReservationAffinitySpecificReservationOutputReference = ComputeRegionInstanceTemplateReservationAffinitySpecificReservationOutputReference;
_u = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceTemplateReservationAffinitySpecificReservationOutputReference[_u] = { fqn: "@cdktf/provider-google.computeRegionInstanceTemplate.ComputeRegionInstanceTemplateReservationAffinitySpecificReservationOutputReference", version: "14.13.1" };
function computeRegionInstanceTemplateReservationAffinityToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        type: cdktf.stringToTerraform(struct.type),
        specific_reservation: computeRegionInstanceTemplateReservationAffinitySpecificReservationToTerraform(struct.specificReservation),
    };
}
exports.computeRegionInstanceTemplateReservationAffinityToTerraform = computeRegionInstanceTemplateReservationAffinityToTerraform;
function computeRegionInstanceTemplateReservationAffinityToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        type: {
            value: cdktf.stringToHclTerraform(struct.type),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        specific_reservation: {
            value: computeRegionInstanceTemplateReservationAffinitySpecificReservationToHclTerraform(struct.specificReservation),
            isBlock: true,
            type: "list",
            storageClassType: "ComputeRegionInstanceTemplateReservationAffinitySpecificReservationList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeRegionInstanceTemplateReservationAffinityToHclTerraform = computeRegionInstanceTemplateReservationAffinityToHclTerraform;
class ComputeRegionInstanceTemplateReservationAffinityOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // specific_reservation - computed: false, optional: true, required: false
        this._specificReservation = new ComputeRegionInstanceTemplateReservationAffinitySpecificReservationOutputReference(this, "specific_reservation");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        if (this._specificReservation?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.specificReservation = this._specificReservation?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._type = undefined;
            this._specificReservation.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._type = value.type;
            this._specificReservation.internalValue = value.specificReservation;
        }
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    get specificReservation() {
        return this._specificReservation;
    }
    putSpecificReservation(value) {
        this._specificReservation.internalValue = value;
    }
    resetSpecificReservation() {
        this._specificReservation.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get specificReservationInput() {
        return this._specificReservation.internalValue;
    }
}
exports.ComputeRegionInstanceTemplateReservationAffinityOutputReference = ComputeRegionInstanceTemplateReservationAffinityOutputReference;
_v = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceTemplateReservationAffinityOutputReference[_v] = { fqn: "@cdktf/provider-google.computeRegionInstanceTemplate.ComputeRegionInstanceTemplateReservationAffinityOutputReference", version: "14.13.1" };
function computeRegionInstanceTemplateSchedulingLocalSsdRecoveryTimeoutToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        nanos: cdktf.numberToTerraform(struct.nanos),
        seconds: cdktf.numberToTerraform(struct.seconds),
    };
}
exports.computeRegionInstanceTemplateSchedulingLocalSsdRecoveryTimeoutToTerraform = computeRegionInstanceTemplateSchedulingLocalSsdRecoveryTimeoutToTerraform;
function computeRegionInstanceTemplateSchedulingLocalSsdRecoveryTimeoutToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        nanos: {
            value: cdktf.numberToHclTerraform(struct.nanos),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        seconds: {
            value: cdktf.numberToHclTerraform(struct.seconds),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeRegionInstanceTemplateSchedulingLocalSsdRecoveryTimeoutToHclTerraform = computeRegionInstanceTemplateSchedulingLocalSsdRecoveryTimeoutToHclTerraform;
class ComputeRegionInstanceTemplateSchedulingLocalSsdRecoveryTimeoutOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._nanos !== undefined) {
            hasAnyValues = true;
            internalValueResult.nanos = this._nanos;
        }
        if (this._seconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.seconds = this._seconds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._nanos = undefined;
            this._seconds = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._nanos = value.nanos;
            this._seconds = value.seconds;
        }
    }
    get nanos() {
        return this.getNumberAttribute('nanos');
    }
    set nanos(value) {
        this._nanos = value;
    }
    resetNanos() {
        this._nanos = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nanosInput() {
        return this._nanos;
    }
    get seconds() {
        return this.getNumberAttribute('seconds');
    }
    set seconds(value) {
        this._seconds = value;
    }
    // Temporarily expose input value. Use with caution.
    get secondsInput() {
        return this._seconds;
    }
}
exports.ComputeRegionInstanceTemplateSchedulingLocalSsdRecoveryTimeoutOutputReference = ComputeRegionInstanceTemplateSchedulingLocalSsdRecoveryTimeoutOutputReference;
_w = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceTemplateSchedulingLocalSsdRecoveryTimeoutOutputReference[_w] = { fqn: "@cdktf/provider-google.computeRegionInstanceTemplate.ComputeRegionInstanceTemplateSchedulingLocalSsdRecoveryTimeoutOutputReference", version: "14.13.1" };
class ComputeRegionInstanceTemplateSchedulingLocalSsdRecoveryTimeoutList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeRegionInstanceTemplateSchedulingLocalSsdRecoveryTimeoutOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeRegionInstanceTemplateSchedulingLocalSsdRecoveryTimeoutList = ComputeRegionInstanceTemplateSchedulingLocalSsdRecoveryTimeoutList;
_x = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceTemplateSchedulingLocalSsdRecoveryTimeoutList[_x] = { fqn: "@cdktf/provider-google.computeRegionInstanceTemplate.ComputeRegionInstanceTemplateSchedulingLocalSsdRecoveryTimeoutList", version: "14.13.1" };
function computeRegionInstanceTemplateSchedulingMaxRunDurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        nanos: cdktf.numberToTerraform(struct.nanos),
        seconds: cdktf.numberToTerraform(struct.seconds),
    };
}
exports.computeRegionInstanceTemplateSchedulingMaxRunDurationToTerraform = computeRegionInstanceTemplateSchedulingMaxRunDurationToTerraform;
function computeRegionInstanceTemplateSchedulingMaxRunDurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        nanos: {
            value: cdktf.numberToHclTerraform(struct.nanos),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        seconds: {
            value: cdktf.numberToHclTerraform(struct.seconds),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeRegionInstanceTemplateSchedulingMaxRunDurationToHclTerraform = computeRegionInstanceTemplateSchedulingMaxRunDurationToHclTerraform;
class ComputeRegionInstanceTemplateSchedulingMaxRunDurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._nanos !== undefined) {
            hasAnyValues = true;
            internalValueResult.nanos = this._nanos;
        }
        if (this._seconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.seconds = this._seconds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._nanos = undefined;
            this._seconds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._nanos = value.nanos;
            this._seconds = value.seconds;
        }
    }
    get nanos() {
        return this.getNumberAttribute('nanos');
    }
    set nanos(value) {
        this._nanos = value;
    }
    resetNanos() {
        this._nanos = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nanosInput() {
        return this._nanos;
    }
    get seconds() {
        return this.getNumberAttribute('seconds');
    }
    set seconds(value) {
        this._seconds = value;
    }
    // Temporarily expose input value. Use with caution.
    get secondsInput() {
        return this._seconds;
    }
}
exports.ComputeRegionInstanceTemplateSchedulingMaxRunDurationOutputReference = ComputeRegionInstanceTemplateSchedulingMaxRunDurationOutputReference;
_y = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceTemplateSchedulingMaxRunDurationOutputReference[_y] = { fqn: "@cdktf/provider-google.computeRegionInstanceTemplate.ComputeRegionInstanceTemplateSchedulingMaxRunDurationOutputReference", version: "14.13.1" };
function computeRegionInstanceTemplateSchedulingNodeAffinitiesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        operator: cdktf.stringToTerraform(struct.operator),
        values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.values),
    };
}
exports.computeRegionInstanceTemplateSchedulingNodeAffinitiesToTerraform = computeRegionInstanceTemplateSchedulingNodeAffinitiesToTerraform;
function computeRegionInstanceTemplateSchedulingNodeAffinitiesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        key: {
            value: cdktf.stringToHclTerraform(struct.key),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        operator: {
            value: cdktf.stringToHclTerraform(struct.operator),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        values: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.values),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeRegionInstanceTemplateSchedulingNodeAffinitiesToHclTerraform = computeRegionInstanceTemplateSchedulingNodeAffinitiesToHclTerraform;
class ComputeRegionInstanceTemplateSchedulingNodeAffinitiesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._operator !== undefined) {
            hasAnyValues = true;
            internalValueResult.operator = this._operator;
        }
        if (this._values !== undefined) {
            hasAnyValues = true;
            internalValueResult.values = this._values;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._key = undefined;
            this._operator = undefined;
            this._values = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._key = value.key;
            this._operator = value.operator;
            this._values = value.values;
        }
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get operator() {
        return this.getStringAttribute('operator');
    }
    set operator(value) {
        this._operator = value;
    }
    // Temporarily expose input value. Use with caution.
    get operatorInput() {
        return this._operator;
    }
    get values() {
        return cdktf.Fn.tolist(this.getListAttribute('values'));
    }
    set values(value) {
        this._values = value;
    }
    // Temporarily expose input value. Use with caution.
    get valuesInput() {
        return this._values;
    }
}
exports.ComputeRegionInstanceTemplateSchedulingNodeAffinitiesOutputReference = ComputeRegionInstanceTemplateSchedulingNodeAffinitiesOutputReference;
_z = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceTemplateSchedulingNodeAffinitiesOutputReference[_z] = { fqn: "@cdktf/provider-google.computeRegionInstanceTemplate.ComputeRegionInstanceTemplateSchedulingNodeAffinitiesOutputReference", version: "14.13.1" };
class ComputeRegionInstanceTemplateSchedulingNodeAffinitiesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeRegionInstanceTemplateSchedulingNodeAffinitiesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeRegionInstanceTemplateSchedulingNodeAffinitiesList = ComputeRegionInstanceTemplateSchedulingNodeAffinitiesList;
_0 = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceTemplateSchedulingNodeAffinitiesList[_0] = { fqn: "@cdktf/provider-google.computeRegionInstanceTemplate.ComputeRegionInstanceTemplateSchedulingNodeAffinitiesList", version: "14.13.1" };
function computeRegionInstanceTemplateSchedulingOnInstanceStopActionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        discard_local_ssd: cdktf.booleanToTerraform(struct.discardLocalSsd),
    };
}
exports.computeRegionInstanceTemplateSchedulingOnInstanceStopActionToTerraform = computeRegionInstanceTemplateSchedulingOnInstanceStopActionToTerraform;
function computeRegionInstanceTemplateSchedulingOnInstanceStopActionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        discard_local_ssd: {
            value: cdktf.booleanToHclTerraform(struct.discardLocalSsd),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeRegionInstanceTemplateSchedulingOnInstanceStopActionToHclTerraform = computeRegionInstanceTemplateSchedulingOnInstanceStopActionToHclTerraform;
class ComputeRegionInstanceTemplateSchedulingOnInstanceStopActionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._discardLocalSsd !== undefined) {
            hasAnyValues = true;
            internalValueResult.discardLocalSsd = this._discardLocalSsd;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._discardLocalSsd = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._discardLocalSsd = value.discardLocalSsd;
        }
    }
    get discardLocalSsd() {
        return this.getBooleanAttribute('discard_local_ssd');
    }
    set discardLocalSsd(value) {
        this._discardLocalSsd = value;
    }
    resetDiscardLocalSsd() {
        this._discardLocalSsd = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get discardLocalSsdInput() {
        return this._discardLocalSsd;
    }
}
exports.ComputeRegionInstanceTemplateSchedulingOnInstanceStopActionOutputReference = ComputeRegionInstanceTemplateSchedulingOnInstanceStopActionOutputReference;
_1 = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceTemplateSchedulingOnInstanceStopActionOutputReference[_1] = { fqn: "@cdktf/provider-google.computeRegionInstanceTemplate.ComputeRegionInstanceTemplateSchedulingOnInstanceStopActionOutputReference", version: "14.13.1" };
function computeRegionInstanceTemplateSchedulingToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        automatic_restart: cdktf.booleanToTerraform(struct.automaticRestart),
        instance_termination_action: cdktf.stringToTerraform(struct.instanceTerminationAction),
        min_node_cpus: cdktf.numberToTerraform(struct.minNodeCpus),
        on_host_maintenance: cdktf.stringToTerraform(struct.onHostMaintenance),
        preemptible: cdktf.booleanToTerraform(struct.preemptible),
        provisioning_model: cdktf.stringToTerraform(struct.provisioningModel),
        local_ssd_recovery_timeout: cdktf.listMapper(computeRegionInstanceTemplateSchedulingLocalSsdRecoveryTimeoutToTerraform, true)(struct.localSsdRecoveryTimeout),
        max_run_duration: computeRegionInstanceTemplateSchedulingMaxRunDurationToTerraform(struct.maxRunDuration),
        node_affinities: cdktf.listMapper(computeRegionInstanceTemplateSchedulingNodeAffinitiesToTerraform, true)(struct.nodeAffinities),
        on_instance_stop_action: computeRegionInstanceTemplateSchedulingOnInstanceStopActionToTerraform(struct.onInstanceStopAction),
    };
}
exports.computeRegionInstanceTemplateSchedulingToTerraform = computeRegionInstanceTemplateSchedulingToTerraform;
function computeRegionInstanceTemplateSchedulingToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        automatic_restart: {
            value: cdktf.booleanToHclTerraform(struct.automaticRestart),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        instance_termination_action: {
            value: cdktf.stringToHclTerraform(struct.instanceTerminationAction),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        min_node_cpus: {
            value: cdktf.numberToHclTerraform(struct.minNodeCpus),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        on_host_maintenance: {
            value: cdktf.stringToHclTerraform(struct.onHostMaintenance),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        preemptible: {
            value: cdktf.booleanToHclTerraform(struct.preemptible),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        provisioning_model: {
            value: cdktf.stringToHclTerraform(struct.provisioningModel),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        local_ssd_recovery_timeout: {
            value: cdktf.listMapperHcl(computeRegionInstanceTemplateSchedulingLocalSsdRecoveryTimeoutToHclTerraform, true)(struct.localSsdRecoveryTimeout),
            isBlock: true,
            type: "list",
            storageClassType: "ComputeRegionInstanceTemplateSchedulingLocalSsdRecoveryTimeoutList",
        },
        max_run_duration: {
            value: computeRegionInstanceTemplateSchedulingMaxRunDurationToHclTerraform(struct.maxRunDuration),
            isBlock: true,
            type: "list",
            storageClassType: "ComputeRegionInstanceTemplateSchedulingMaxRunDurationList",
        },
        node_affinities: {
            value: cdktf.listMapperHcl(computeRegionInstanceTemplateSchedulingNodeAffinitiesToHclTerraform, true)(struct.nodeAffinities),
            isBlock: true,
            type: "set",
            storageClassType: "ComputeRegionInstanceTemplateSchedulingNodeAffinitiesList",
        },
        on_instance_stop_action: {
            value: computeRegionInstanceTemplateSchedulingOnInstanceStopActionToHclTerraform(struct.onInstanceStopAction),
            isBlock: true,
            type: "list",
            storageClassType: "ComputeRegionInstanceTemplateSchedulingOnInstanceStopActionList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeRegionInstanceTemplateSchedulingToHclTerraform = computeRegionInstanceTemplateSchedulingToHclTerraform;
class ComputeRegionInstanceTemplateSchedulingOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // local_ssd_recovery_timeout - computed: false, optional: true, required: false
        this._localSsdRecoveryTimeout = new ComputeRegionInstanceTemplateSchedulingLocalSsdRecoveryTimeoutList(this, "local_ssd_recovery_timeout", false);
        // max_run_duration - computed: false, optional: true, required: false
        this._maxRunDuration = new ComputeRegionInstanceTemplateSchedulingMaxRunDurationOutputReference(this, "max_run_duration");
        // node_affinities - computed: false, optional: true, required: false
        this._nodeAffinities = new ComputeRegionInstanceTemplateSchedulingNodeAffinitiesList(this, "node_affinities", true);
        // on_instance_stop_action - computed: false, optional: true, required: false
        this._onInstanceStopAction = new ComputeRegionInstanceTemplateSchedulingOnInstanceStopActionOutputReference(this, "on_instance_stop_action");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._automaticRestart !== undefined) {
            hasAnyValues = true;
            internalValueResult.automaticRestart = this._automaticRestart;
        }
        if (this._instanceTerminationAction !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceTerminationAction = this._instanceTerminationAction;
        }
        if (this._minNodeCpus !== undefined) {
            hasAnyValues = true;
            internalValueResult.minNodeCpus = this._minNodeCpus;
        }
        if (this._onHostMaintenance !== undefined) {
            hasAnyValues = true;
            internalValueResult.onHostMaintenance = this._onHostMaintenance;
        }
        if (this._preemptible !== undefined) {
            hasAnyValues = true;
            internalValueResult.preemptible = this._preemptible;
        }
        if (this._provisioningModel !== undefined) {
            hasAnyValues = true;
            internalValueResult.provisioningModel = this._provisioningModel;
        }
        if (this._localSsdRecoveryTimeout?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.localSsdRecoveryTimeout = this._localSsdRecoveryTimeout?.internalValue;
        }
        if (this._maxRunDuration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxRunDuration = this._maxRunDuration?.internalValue;
        }
        if (this._nodeAffinities?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.nodeAffinities = this._nodeAffinities?.internalValue;
        }
        if (this._onInstanceStopAction?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.onInstanceStopAction = this._onInstanceStopAction?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._automaticRestart = undefined;
            this._instanceTerminationAction = undefined;
            this._minNodeCpus = undefined;
            this._onHostMaintenance = undefined;
            this._preemptible = undefined;
            this._provisioningModel = undefined;
            this._localSsdRecoveryTimeout.internalValue = undefined;
            this._maxRunDuration.internalValue = undefined;
            this._nodeAffinities.internalValue = undefined;
            this._onInstanceStopAction.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._automaticRestart = value.automaticRestart;
            this._instanceTerminationAction = value.instanceTerminationAction;
            this._minNodeCpus = value.minNodeCpus;
            this._onHostMaintenance = value.onHostMaintenance;
            this._preemptible = value.preemptible;
            this._provisioningModel = value.provisioningModel;
            this._localSsdRecoveryTimeout.internalValue = value.localSsdRecoveryTimeout;
            this._maxRunDuration.internalValue = value.maxRunDuration;
            this._nodeAffinities.internalValue = value.nodeAffinities;
            this._onInstanceStopAction.internalValue = value.onInstanceStopAction;
        }
    }
    get automaticRestart() {
        return this.getBooleanAttribute('automatic_restart');
    }
    set automaticRestart(value) {
        this._automaticRestart = value;
    }
    resetAutomaticRestart() {
        this._automaticRestart = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get automaticRestartInput() {
        return this._automaticRestart;
    }
    get instanceTerminationAction() {
        return this.getStringAttribute('instance_termination_action');
    }
    set instanceTerminationAction(value) {
        this._instanceTerminationAction = value;
    }
    resetInstanceTerminationAction() {
        this._instanceTerminationAction = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceTerminationActionInput() {
        return this._instanceTerminationAction;
    }
    get minNodeCpus() {
        return this.getNumberAttribute('min_node_cpus');
    }
    set minNodeCpus(value) {
        this._minNodeCpus = value;
    }
    resetMinNodeCpus() {
        this._minNodeCpus = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minNodeCpusInput() {
        return this._minNodeCpus;
    }
    get onHostMaintenance() {
        return this.getStringAttribute('on_host_maintenance');
    }
    set onHostMaintenance(value) {
        this._onHostMaintenance = value;
    }
    resetOnHostMaintenance() {
        this._onHostMaintenance = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get onHostMaintenanceInput() {
        return this._onHostMaintenance;
    }
    get preemptible() {
        return this.getBooleanAttribute('preemptible');
    }
    set preemptible(value) {
        this._preemptible = value;
    }
    resetPreemptible() {
        this._preemptible = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get preemptibleInput() {
        return this._preemptible;
    }
    get provisioningModel() {
        return this.getStringAttribute('provisioning_model');
    }
    set provisioningModel(value) {
        this._provisioningModel = value;
    }
    resetProvisioningModel() {
        this._provisioningModel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get provisioningModelInput() {
        return this._provisioningModel;
    }
    get localSsdRecoveryTimeout() {
        return this._localSsdRecoveryTimeout;
    }
    putLocalSsdRecoveryTimeout(value) {
        this._localSsdRecoveryTimeout.internalValue = value;
    }
    resetLocalSsdRecoveryTimeout() {
        this._localSsdRecoveryTimeout.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get localSsdRecoveryTimeoutInput() {
        return this._localSsdRecoveryTimeout.internalValue;
    }
    get maxRunDuration() {
        return this._maxRunDuration;
    }
    putMaxRunDuration(value) {
        this._maxRunDuration.internalValue = value;
    }
    resetMaxRunDuration() {
        this._maxRunDuration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxRunDurationInput() {
        return this._maxRunDuration.internalValue;
    }
    get nodeAffinities() {
        return this._nodeAffinities;
    }
    putNodeAffinities(value) {
        this._nodeAffinities.internalValue = value;
    }
    resetNodeAffinities() {
        this._nodeAffinities.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nodeAffinitiesInput() {
        return this._nodeAffinities.internalValue;
    }
    get onInstanceStopAction() {
        return this._onInstanceStopAction;
    }
    putOnInstanceStopAction(value) {
        this._onInstanceStopAction.internalValue = value;
    }
    resetOnInstanceStopAction() {
        this._onInstanceStopAction.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get onInstanceStopActionInput() {
        return this._onInstanceStopAction.internalValue;
    }
}
exports.ComputeRegionInstanceTemplateSchedulingOutputReference = ComputeRegionInstanceTemplateSchedulingOutputReference;
_2 = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceTemplateSchedulingOutputReference[_2] = { fqn: "@cdktf/provider-google.computeRegionInstanceTemplate.ComputeRegionInstanceTemplateSchedulingOutputReference", version: "14.13.1" };
function computeRegionInstanceTemplateServiceAccountToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        email: cdktf.stringToTerraform(struct.email),
        scopes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.scopes),
    };
}
exports.computeRegionInstanceTemplateServiceAccountToTerraform = computeRegionInstanceTemplateServiceAccountToTerraform;
function computeRegionInstanceTemplateServiceAccountToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        email: {
            value: cdktf.stringToHclTerraform(struct.email),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        scopes: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.scopes),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeRegionInstanceTemplateServiceAccountToHclTerraform = computeRegionInstanceTemplateServiceAccountToHclTerraform;
class ComputeRegionInstanceTemplateServiceAccountOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._email !== undefined) {
            hasAnyValues = true;
            internalValueResult.email = this._email;
        }
        if (this._scopes !== undefined) {
            hasAnyValues = true;
            internalValueResult.scopes = this._scopes;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._email = undefined;
            this._scopes = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._email = value.email;
            this._scopes = value.scopes;
        }
    }
    get email() {
        return this.getStringAttribute('email');
    }
    set email(value) {
        this._email = value;
    }
    resetEmail() {
        this._email = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get emailInput() {
        return this._email;
    }
    get scopes() {
        return cdktf.Fn.tolist(this.getListAttribute('scopes'));
    }
    set scopes(value) {
        this._scopes = value;
    }
    // Temporarily expose input value. Use with caution.
    get scopesInput() {
        return this._scopes;
    }
}
exports.ComputeRegionInstanceTemplateServiceAccountOutputReference = ComputeRegionInstanceTemplateServiceAccountOutputReference;
_3 = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceTemplateServiceAccountOutputReference[_3] = { fqn: "@cdktf/provider-google.computeRegionInstanceTemplate.ComputeRegionInstanceTemplateServiceAccountOutputReference", version: "14.13.1" };
function computeRegionInstanceTemplateShieldedInstanceConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enable_integrity_monitoring: cdktf.booleanToTerraform(struct.enableIntegrityMonitoring),
        enable_secure_boot: cdktf.booleanToTerraform(struct.enableSecureBoot),
        enable_vtpm: cdktf.booleanToTerraform(struct.enableVtpm),
    };
}
exports.computeRegionInstanceTemplateShieldedInstanceConfigToTerraform = computeRegionInstanceTemplateShieldedInstanceConfigToTerraform;
function computeRegionInstanceTemplateShieldedInstanceConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enable_integrity_monitoring: {
            value: cdktf.booleanToHclTerraform(struct.enableIntegrityMonitoring),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        enable_secure_boot: {
            value: cdktf.booleanToHclTerraform(struct.enableSecureBoot),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        enable_vtpm: {
            value: cdktf.booleanToHclTerraform(struct.enableVtpm),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeRegionInstanceTemplateShieldedInstanceConfigToHclTerraform = computeRegionInstanceTemplateShieldedInstanceConfigToHclTerraform;
class ComputeRegionInstanceTemplateShieldedInstanceConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enableIntegrityMonitoring !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableIntegrityMonitoring = this._enableIntegrityMonitoring;
        }
        if (this._enableSecureBoot !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableSecureBoot = this._enableSecureBoot;
        }
        if (this._enableVtpm !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableVtpm = this._enableVtpm;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enableIntegrityMonitoring = undefined;
            this._enableSecureBoot = undefined;
            this._enableVtpm = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enableIntegrityMonitoring = value.enableIntegrityMonitoring;
            this._enableSecureBoot = value.enableSecureBoot;
            this._enableVtpm = value.enableVtpm;
        }
    }
    get enableIntegrityMonitoring() {
        return this.getBooleanAttribute('enable_integrity_monitoring');
    }
    set enableIntegrityMonitoring(value) {
        this._enableIntegrityMonitoring = value;
    }
    resetEnableIntegrityMonitoring() {
        this._enableIntegrityMonitoring = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableIntegrityMonitoringInput() {
        return this._enableIntegrityMonitoring;
    }
    get enableSecureBoot() {
        return this.getBooleanAttribute('enable_secure_boot');
    }
    set enableSecureBoot(value) {
        this._enableSecureBoot = value;
    }
    resetEnableSecureBoot() {
        this._enableSecureBoot = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableSecureBootInput() {
        return this._enableSecureBoot;
    }
    get enableVtpm() {
        return this.getBooleanAttribute('enable_vtpm');
    }
    set enableVtpm(value) {
        this._enableVtpm = value;
    }
    resetEnableVtpm() {
        this._enableVtpm = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableVtpmInput() {
        return this._enableVtpm;
    }
}
exports.ComputeRegionInstanceTemplateShieldedInstanceConfigOutputReference = ComputeRegionInstanceTemplateShieldedInstanceConfigOutputReference;
_4 = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceTemplateShieldedInstanceConfigOutputReference[_4] = { fqn: "@cdktf/provider-google.computeRegionInstanceTemplate.ComputeRegionInstanceTemplateShieldedInstanceConfigOutputReference", version: "14.13.1" };
function computeRegionInstanceTemplateTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
    };
}
exports.computeRegionInstanceTemplateTimeoutsToTerraform = computeRegionInstanceTemplateTimeoutsToTerraform;
function computeRegionInstanceTemplateTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeRegionInstanceTemplateTimeoutsToHclTerraform = computeRegionInstanceTemplateTimeoutsToHclTerraform;
class ComputeRegionInstanceTemplateTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
}
exports.ComputeRegionInstanceTemplateTimeoutsOutputReference = ComputeRegionInstanceTemplateTimeoutsOutputReference;
_5 = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceTemplateTimeoutsOutputReference[_5] = { fqn: "@cdktf/provider-google.computeRegionInstanceTemplate.ComputeRegionInstanceTemplateTimeoutsOutputReference", version: "14.13.1" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/compute_region_instance_template google_compute_region_instance_template}
*/
class ComputeRegionInstanceTemplate extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a ComputeRegionInstanceTemplate resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the ComputeRegionInstanceTemplate to import
    * @param importFromId The id of the existing ComputeRegionInstanceTemplate that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/compute_region_instance_template#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the ComputeRegionInstanceTemplate to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_compute_region_instance_template", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/compute_region_instance_template google_compute_region_instance_template} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ComputeRegionInstanceTemplateConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_compute_region_instance_template',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // effective_labels - computed: true, optional: false, required: false
        this._effectiveLabels = new cdktf.StringMap(this, "effective_labels");
        // terraform_labels - computed: true, optional: false, required: false
        this._terraformLabels = new cdktf.StringMap(this, "terraform_labels");
        // advanced_machine_features - computed: false, optional: true, required: false
        this._advancedMachineFeatures = new ComputeRegionInstanceTemplateAdvancedMachineFeaturesOutputReference(this, "advanced_machine_features");
        // confidential_instance_config - computed: false, optional: true, required: false
        this._confidentialInstanceConfig = new ComputeRegionInstanceTemplateConfidentialInstanceConfigOutputReference(this, "confidential_instance_config");
        // disk - computed: false, optional: false, required: true
        this._disk = new ComputeRegionInstanceTemplateDiskList(this, "disk", false);
        // guest_accelerator - computed: false, optional: true, required: false
        this._guestAccelerator = new ComputeRegionInstanceTemplateGuestAcceleratorList(this, "guest_accelerator", false);
        // network_interface - computed: false, optional: true, required: false
        this._networkInterface = new ComputeRegionInstanceTemplateNetworkInterfaceList(this, "network_interface", false);
        // network_performance_config - computed: false, optional: true, required: false
        this._networkPerformanceConfig = new ComputeRegionInstanceTemplateNetworkPerformanceConfigOutputReference(this, "network_performance_config");
        // reservation_affinity - computed: false, optional: true, required: false
        this._reservationAffinity = new ComputeRegionInstanceTemplateReservationAffinityOutputReference(this, "reservation_affinity");
        // scheduling - computed: false, optional: true, required: false
        this._scheduling = new ComputeRegionInstanceTemplateSchedulingOutputReference(this, "scheduling");
        // service_account - computed: false, optional: true, required: false
        this._serviceAccount = new ComputeRegionInstanceTemplateServiceAccountOutputReference(this, "service_account");
        // shielded_instance_config - computed: false, optional: true, required: false
        this._shieldedInstanceConfig = new ComputeRegionInstanceTemplateShieldedInstanceConfigOutputReference(this, "shielded_instance_config");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new ComputeRegionInstanceTemplateTimeoutsOutputReference(this, "timeouts");
        this._canIpForward = config.canIpForward;
        this._description = config.description;
        this._id = config.id;
        this._instanceDescription = config.instanceDescription;
        this._keyRevocationActionType = config.keyRevocationActionType;
        this._labels = config.labels;
        this._machineType = config.machineType;
        this._metadata = config.metadata;
        this._metadataStartupScript = config.metadataStartupScript;
        this._minCpuPlatform = config.minCpuPlatform;
        this._name = config.name;
        this._namePrefix = config.namePrefix;
        this._project = config.project;
        this._region = config.region;
        this._resourceManagerTags = config.resourceManagerTags;
        this._resourcePolicies = config.resourcePolicies;
        this._tags = config.tags;
        this._advancedMachineFeatures.internalValue = config.advancedMachineFeatures;
        this._confidentialInstanceConfig.internalValue = config.confidentialInstanceConfig;
        this._disk.internalValue = config.disk;
        this._guestAccelerator.internalValue = config.guestAccelerator;
        this._networkInterface.internalValue = config.networkInterface;
        this._networkPerformanceConfig.internalValue = config.networkPerformanceConfig;
        this._reservationAffinity.internalValue = config.reservationAffinity;
        this._scheduling.internalValue = config.scheduling;
        this._serviceAccount.internalValue = config.serviceAccount;
        this._shieldedInstanceConfig.internalValue = config.shieldedInstanceConfig;
        this._timeouts.internalValue = config.timeouts;
    }
    get canIpForward() {
        return this.getBooleanAttribute('can_ip_forward');
    }
    set canIpForward(value) {
        this._canIpForward = value;
    }
    resetCanIpForward() {
        this._canIpForward = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get canIpForwardInput() {
        return this._canIpForward;
    }
    // creation_timestamp - computed: true, optional: false, required: false
    get creationTimestamp() {
        return this.getStringAttribute('creation_timestamp');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get effectiveLabels() {
        return this._effectiveLabels;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get instanceDescription() {
        return this.getStringAttribute('instance_description');
    }
    set instanceDescription(value) {
        this._instanceDescription = value;
    }
    resetInstanceDescription() {
        this._instanceDescription = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceDescriptionInput() {
        return this._instanceDescription;
    }
    get keyRevocationActionType() {
        return this.getStringAttribute('key_revocation_action_type');
    }
    set keyRevocationActionType(value) {
        this._keyRevocationActionType = value;
    }
    resetKeyRevocationActionType() {
        this._keyRevocationActionType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyRevocationActionTypeInput() {
        return this._keyRevocationActionType;
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get machineType() {
        return this.getStringAttribute('machine_type');
    }
    set machineType(value) {
        this._machineType = value;
    }
    // Temporarily expose input value. Use with caution.
    get machineTypeInput() {
        return this._machineType;
    }
    get metadata() {
        return this.getStringMapAttribute('metadata');
    }
    set metadata(value) {
        this._metadata = value;
    }
    resetMetadata() {
        this._metadata = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get metadataInput() {
        return this._metadata;
    }
    // metadata_fingerprint - computed: true, optional: false, required: false
    get metadataFingerprint() {
        return this.getStringAttribute('metadata_fingerprint');
    }
    get metadataStartupScript() {
        return this.getStringAttribute('metadata_startup_script');
    }
    set metadataStartupScript(value) {
        this._metadataStartupScript = value;
    }
    resetMetadataStartupScript() {
        this._metadataStartupScript = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get metadataStartupScriptInput() {
        return this._metadataStartupScript;
    }
    get minCpuPlatform() {
        return this.getStringAttribute('min_cpu_platform');
    }
    set minCpuPlatform(value) {
        this._minCpuPlatform = value;
    }
    resetMinCpuPlatform() {
        this._minCpuPlatform = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minCpuPlatformInput() {
        return this._minCpuPlatform;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get namePrefix() {
        return this.getStringAttribute('name_prefix');
    }
    set namePrefix(value) {
        this._namePrefix = value;
    }
    resetNamePrefix() {
        this._namePrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get namePrefixInput() {
        return this._namePrefix;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get region() {
        return this.getStringAttribute('region');
    }
    set region(value) {
        this._region = value;
    }
    resetRegion() {
        this._region = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get regionInput() {
        return this._region;
    }
    get resourceManagerTags() {
        return this.getStringMapAttribute('resource_manager_tags');
    }
    set resourceManagerTags(value) {
        this._resourceManagerTags = value;
    }
    resetResourceManagerTags() {
        this._resourceManagerTags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceManagerTagsInput() {
        return this._resourceManagerTags;
    }
    get resourcePolicies() {
        return this.getListAttribute('resource_policies');
    }
    set resourcePolicies(value) {
        this._resourcePolicies = value;
    }
    resetResourcePolicies() {
        this._resourcePolicies = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourcePoliciesInput() {
        return this._resourcePolicies;
    }
    // self_link - computed: true, optional: false, required: false
    get selfLink() {
        return this.getStringAttribute('self_link');
    }
    get tags() {
        return cdktf.Fn.tolist(this.getListAttribute('tags'));
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // tags_fingerprint - computed: true, optional: false, required: false
    get tagsFingerprint() {
        return this.getStringAttribute('tags_fingerprint');
    }
    get terraformLabels() {
        return this._terraformLabels;
    }
    get advancedMachineFeatures() {
        return this._advancedMachineFeatures;
    }
    putAdvancedMachineFeatures(value) {
        this._advancedMachineFeatures.internalValue = value;
    }
    resetAdvancedMachineFeatures() {
        this._advancedMachineFeatures.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get advancedMachineFeaturesInput() {
        return this._advancedMachineFeatures.internalValue;
    }
    get confidentialInstanceConfig() {
        return this._confidentialInstanceConfig;
    }
    putConfidentialInstanceConfig(value) {
        this._confidentialInstanceConfig.internalValue = value;
    }
    resetConfidentialInstanceConfig() {
        this._confidentialInstanceConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get confidentialInstanceConfigInput() {
        return this._confidentialInstanceConfig.internalValue;
    }
    get disk() {
        return this._disk;
    }
    putDisk(value) {
        this._disk.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get diskInput() {
        return this._disk.internalValue;
    }
    get guestAccelerator() {
        return this._guestAccelerator;
    }
    putGuestAccelerator(value) {
        this._guestAccelerator.internalValue = value;
    }
    resetGuestAccelerator() {
        this._guestAccelerator.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get guestAcceleratorInput() {
        return this._guestAccelerator.internalValue;
    }
    get networkInterface() {
        return this._networkInterface;
    }
    putNetworkInterface(value) {
        this._networkInterface.internalValue = value;
    }
    resetNetworkInterface() {
        this._networkInterface.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkInterfaceInput() {
        return this._networkInterface.internalValue;
    }
    get networkPerformanceConfig() {
        return this._networkPerformanceConfig;
    }
    putNetworkPerformanceConfig(value) {
        this._networkPerformanceConfig.internalValue = value;
    }
    resetNetworkPerformanceConfig() {
        this._networkPerformanceConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkPerformanceConfigInput() {
        return this._networkPerformanceConfig.internalValue;
    }
    get reservationAffinity() {
        return this._reservationAffinity;
    }
    putReservationAffinity(value) {
        this._reservationAffinity.internalValue = value;
    }
    resetReservationAffinity() {
        this._reservationAffinity.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get reservationAffinityInput() {
        return this._reservationAffinity.internalValue;
    }
    get scheduling() {
        return this._scheduling;
    }
    putScheduling(value) {
        this._scheduling.internalValue = value;
    }
    resetScheduling() {
        this._scheduling.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get schedulingInput() {
        return this._scheduling.internalValue;
    }
    get serviceAccount() {
        return this._serviceAccount;
    }
    putServiceAccount(value) {
        this._serviceAccount.internalValue = value;
    }
    resetServiceAccount() {
        this._serviceAccount.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceAccountInput() {
        return this._serviceAccount.internalValue;
    }
    get shieldedInstanceConfig() {
        return this._shieldedInstanceConfig;
    }
    putShieldedInstanceConfig(value) {
        this._shieldedInstanceConfig.internalValue = value;
    }
    resetShieldedInstanceConfig() {
        this._shieldedInstanceConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get shieldedInstanceConfigInput() {
        return this._shieldedInstanceConfig.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            can_ip_forward: cdktf.booleanToTerraform(this._canIpForward),
            description: cdktf.stringToTerraform(this._description),
            id: cdktf.stringToTerraform(this._id),
            instance_description: cdktf.stringToTerraform(this._instanceDescription),
            key_revocation_action_type: cdktf.stringToTerraform(this._keyRevocationActionType),
            labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._labels),
            machine_type: cdktf.stringToTerraform(this._machineType),
            metadata: cdktf.hashMapper(cdktf.stringToTerraform)(this._metadata),
            metadata_startup_script: cdktf.stringToTerraform(this._metadataStartupScript),
            min_cpu_platform: cdktf.stringToTerraform(this._minCpuPlatform),
            name: cdktf.stringToTerraform(this._name),
            name_prefix: cdktf.stringToTerraform(this._namePrefix),
            project: cdktf.stringToTerraform(this._project),
            region: cdktf.stringToTerraform(this._region),
            resource_manager_tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._resourceManagerTags),
            resource_policies: cdktf.listMapper(cdktf.stringToTerraform, false)(this._resourcePolicies),
            tags: cdktf.listMapper(cdktf.stringToTerraform, false)(this._tags),
            advanced_machine_features: computeRegionInstanceTemplateAdvancedMachineFeaturesToTerraform(this._advancedMachineFeatures.internalValue),
            confidential_instance_config: computeRegionInstanceTemplateConfidentialInstanceConfigToTerraform(this._confidentialInstanceConfig.internalValue),
            disk: cdktf.listMapper(computeRegionInstanceTemplateDiskToTerraform, true)(this._disk.internalValue),
            guest_accelerator: cdktf.listMapper(computeRegionInstanceTemplateGuestAcceleratorToTerraform, true)(this._guestAccelerator.internalValue),
            network_interface: cdktf.listMapper(computeRegionInstanceTemplateNetworkInterfaceToTerraform, true)(this._networkInterface.internalValue),
            network_performance_config: computeRegionInstanceTemplateNetworkPerformanceConfigToTerraform(this._networkPerformanceConfig.internalValue),
            reservation_affinity: computeRegionInstanceTemplateReservationAffinityToTerraform(this._reservationAffinity.internalValue),
            scheduling: computeRegionInstanceTemplateSchedulingToTerraform(this._scheduling.internalValue),
            service_account: computeRegionInstanceTemplateServiceAccountToTerraform(this._serviceAccount.internalValue),
            shielded_instance_config: computeRegionInstanceTemplateShieldedInstanceConfigToTerraform(this._shieldedInstanceConfig.internalValue),
            timeouts: computeRegionInstanceTemplateTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            can_ip_forward: {
                value: cdktf.booleanToHclTerraform(this._canIpForward),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            description: {
                value: cdktf.stringToHclTerraform(this._description),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            instance_description: {
                value: cdktf.stringToHclTerraform(this._instanceDescription),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            key_revocation_action_type: {
                value: cdktf.stringToHclTerraform(this._keyRevocationActionType),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            labels: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._labels),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            machine_type: {
                value: cdktf.stringToHclTerraform(this._machineType),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            metadata: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._metadata),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            metadata_startup_script: {
                value: cdktf.stringToHclTerraform(this._metadataStartupScript),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            min_cpu_platform: {
                value: cdktf.stringToHclTerraform(this._minCpuPlatform),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            name: {
                value: cdktf.stringToHclTerraform(this._name),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            name_prefix: {
                value: cdktf.stringToHclTerraform(this._namePrefix),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            project: {
                value: cdktf.stringToHclTerraform(this._project),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            region: {
                value: cdktf.stringToHclTerraform(this._region),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            resource_manager_tags: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._resourceManagerTags),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            resource_policies: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._resourcePolicies),
                isBlock: false,
                type: "list",
                storageClassType: "stringList",
            },
            tags: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._tags),
                isBlock: false,
                type: "set",
                storageClassType: "stringList",
            },
            advanced_machine_features: {
                value: computeRegionInstanceTemplateAdvancedMachineFeaturesToHclTerraform(this._advancedMachineFeatures.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ComputeRegionInstanceTemplateAdvancedMachineFeaturesList",
            },
            confidential_instance_config: {
                value: computeRegionInstanceTemplateConfidentialInstanceConfigToHclTerraform(this._confidentialInstanceConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ComputeRegionInstanceTemplateConfidentialInstanceConfigList",
            },
            disk: {
                value: cdktf.listMapperHcl(computeRegionInstanceTemplateDiskToHclTerraform, true)(this._disk.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ComputeRegionInstanceTemplateDiskList",
            },
            guest_accelerator: {
                value: cdktf.listMapperHcl(computeRegionInstanceTemplateGuestAcceleratorToHclTerraform, true)(this._guestAccelerator.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ComputeRegionInstanceTemplateGuestAcceleratorList",
            },
            network_interface: {
                value: cdktf.listMapperHcl(computeRegionInstanceTemplateNetworkInterfaceToHclTerraform, true)(this._networkInterface.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ComputeRegionInstanceTemplateNetworkInterfaceList",
            },
            network_performance_config: {
                value: computeRegionInstanceTemplateNetworkPerformanceConfigToHclTerraform(this._networkPerformanceConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ComputeRegionInstanceTemplateNetworkPerformanceConfigList",
            },
            reservation_affinity: {
                value: computeRegionInstanceTemplateReservationAffinityToHclTerraform(this._reservationAffinity.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ComputeRegionInstanceTemplateReservationAffinityList",
            },
            scheduling: {
                value: computeRegionInstanceTemplateSchedulingToHclTerraform(this._scheduling.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ComputeRegionInstanceTemplateSchedulingList",
            },
            service_account: {
                value: computeRegionInstanceTemplateServiceAccountToHclTerraform(this._serviceAccount.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ComputeRegionInstanceTemplateServiceAccountList",
            },
            shielded_instance_config: {
                value: computeRegionInstanceTemplateShieldedInstanceConfigToHclTerraform(this._shieldedInstanceConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ComputeRegionInstanceTemplateShieldedInstanceConfigList",
            },
            timeouts: {
                value: computeRegionInstanceTemplateTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "ComputeRegionInstanceTemplateTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.ComputeRegionInstanceTemplate = ComputeRegionInstanceTemplate;
_6 = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceTemplate[_6] = { fqn: "@cdktf/provider-google.computeRegionInstanceTemplate.ComputeRegionInstanceTemplate", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
ComputeRegionInstanceTemplate.tfResourceType = "google_compute_region_instance_template";
//# sourceMappingURL=data:application/json;base64,