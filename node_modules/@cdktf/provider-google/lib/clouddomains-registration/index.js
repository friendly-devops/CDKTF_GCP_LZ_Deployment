"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClouddomainsRegistration = exports.ClouddomainsRegistrationYearlyPriceOutputReference = exports.clouddomainsRegistrationYearlyPriceToHclTerraform = exports.clouddomainsRegistrationYearlyPriceToTerraform = exports.ClouddomainsRegistrationTimeoutsOutputReference = exports.clouddomainsRegistrationTimeoutsToHclTerraform = exports.clouddomainsRegistrationTimeoutsToTerraform = exports.ClouddomainsRegistrationManagementSettingsOutputReference = exports.clouddomainsRegistrationManagementSettingsToHclTerraform = exports.clouddomainsRegistrationManagementSettingsToTerraform = exports.ClouddomainsRegistrationDnsSettingsOutputReference = exports.clouddomainsRegistrationDnsSettingsToHclTerraform = exports.clouddomainsRegistrationDnsSettingsToTerraform = exports.ClouddomainsRegistrationDnsSettingsGlueRecordsList = exports.ClouddomainsRegistrationDnsSettingsGlueRecordsOutputReference = exports.clouddomainsRegistrationDnsSettingsGlueRecordsToHclTerraform = exports.clouddomainsRegistrationDnsSettingsGlueRecordsToTerraform = exports.ClouddomainsRegistrationDnsSettingsCustomDnsOutputReference = exports.clouddomainsRegistrationDnsSettingsCustomDnsToHclTerraform = exports.clouddomainsRegistrationDnsSettingsCustomDnsToTerraform = exports.ClouddomainsRegistrationDnsSettingsCustomDnsDsRecordsList = exports.ClouddomainsRegistrationDnsSettingsCustomDnsDsRecordsOutputReference = exports.clouddomainsRegistrationDnsSettingsCustomDnsDsRecordsToHclTerraform = exports.clouddomainsRegistrationDnsSettingsCustomDnsDsRecordsToTerraform = exports.ClouddomainsRegistrationContactSettingsOutputReference = exports.clouddomainsRegistrationContactSettingsToHclTerraform = exports.clouddomainsRegistrationContactSettingsToTerraform = exports.ClouddomainsRegistrationContactSettingsTechnicalContactOutputReference = exports.clouddomainsRegistrationContactSettingsTechnicalContactToHclTerraform = exports.clouddomainsRegistrationContactSettingsTechnicalContactToTerraform = exports.ClouddomainsRegistrationContactSettingsTechnicalContactPostalAddressOutputReference = exports.clouddomainsRegistrationContactSettingsTechnicalContactPostalAddressToHclTerraform = exports.clouddomainsRegistrationContactSettingsTechnicalContactPostalAddressToTerraform = exports.ClouddomainsRegistrationContactSettingsRegistrantContactOutputReference = exports.clouddomainsRegistrationContactSettingsRegistrantContactToHclTerraform = exports.clouddomainsRegistrationContactSettingsRegistrantContactToTerraform = exports.ClouddomainsRegistrationContactSettingsRegistrantContactPostalAddressOutputReference = exports.clouddomainsRegistrationContactSettingsRegistrantContactPostalAddressToHclTerraform = exports.clouddomainsRegistrationContactSettingsRegistrantContactPostalAddressToTerraform = exports.ClouddomainsRegistrationContactSettingsAdminContactOutputReference = exports.clouddomainsRegistrationContactSettingsAdminContactToHclTerraform = exports.clouddomainsRegistrationContactSettingsAdminContactToTerraform = exports.ClouddomainsRegistrationContactSettingsAdminContactPostalAddressOutputReference = exports.clouddomainsRegistrationContactSettingsAdminContactPostalAddressToHclTerraform = exports.clouddomainsRegistrationContactSettingsAdminContactPostalAddressToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function clouddomainsRegistrationContactSettingsAdminContactPostalAddressToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        address_lines: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.addressLines),
        administrative_area: cdktf.stringToTerraform(struct.administrativeArea),
        locality: cdktf.stringToTerraform(struct.locality),
        organization: cdktf.stringToTerraform(struct.organization),
        postal_code: cdktf.stringToTerraform(struct.postalCode),
        recipients: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.recipients),
        region_code: cdktf.stringToTerraform(struct.regionCode),
    };
}
exports.clouddomainsRegistrationContactSettingsAdminContactPostalAddressToTerraform = clouddomainsRegistrationContactSettingsAdminContactPostalAddressToTerraform;
function clouddomainsRegistrationContactSettingsAdminContactPostalAddressToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        address_lines: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.addressLines),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        administrative_area: {
            value: cdktf.stringToHclTerraform(struct.administrativeArea),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        locality: {
            value: cdktf.stringToHclTerraform(struct.locality),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        organization: {
            value: cdktf.stringToHclTerraform(struct.organization),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        postal_code: {
            value: cdktf.stringToHclTerraform(struct.postalCode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        recipients: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.recipients),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        region_code: {
            value: cdktf.stringToHclTerraform(struct.regionCode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.clouddomainsRegistrationContactSettingsAdminContactPostalAddressToHclTerraform = clouddomainsRegistrationContactSettingsAdminContactPostalAddressToHclTerraform;
class ClouddomainsRegistrationContactSettingsAdminContactPostalAddressOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._addressLines !== undefined) {
            hasAnyValues = true;
            internalValueResult.addressLines = this._addressLines;
        }
        if (this._administrativeArea !== undefined) {
            hasAnyValues = true;
            internalValueResult.administrativeArea = this._administrativeArea;
        }
        if (this._locality !== undefined) {
            hasAnyValues = true;
            internalValueResult.locality = this._locality;
        }
        if (this._organization !== undefined) {
            hasAnyValues = true;
            internalValueResult.organization = this._organization;
        }
        if (this._postalCode !== undefined) {
            hasAnyValues = true;
            internalValueResult.postalCode = this._postalCode;
        }
        if (this._recipients !== undefined) {
            hasAnyValues = true;
            internalValueResult.recipients = this._recipients;
        }
        if (this._regionCode !== undefined) {
            hasAnyValues = true;
            internalValueResult.regionCode = this._regionCode;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._addressLines = undefined;
            this._administrativeArea = undefined;
            this._locality = undefined;
            this._organization = undefined;
            this._postalCode = undefined;
            this._recipients = undefined;
            this._regionCode = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._addressLines = value.addressLines;
            this._administrativeArea = value.administrativeArea;
            this._locality = value.locality;
            this._organization = value.organization;
            this._postalCode = value.postalCode;
            this._recipients = value.recipients;
            this._regionCode = value.regionCode;
        }
    }
    get addressLines() {
        return this.getListAttribute('address_lines');
    }
    set addressLines(value) {
        this._addressLines = value;
    }
    resetAddressLines() {
        this._addressLines = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get addressLinesInput() {
        return this._addressLines;
    }
    get administrativeArea() {
        return this.getStringAttribute('administrative_area');
    }
    set administrativeArea(value) {
        this._administrativeArea = value;
    }
    resetAdministrativeArea() {
        this._administrativeArea = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get administrativeAreaInput() {
        return this._administrativeArea;
    }
    get locality() {
        return this.getStringAttribute('locality');
    }
    set locality(value) {
        this._locality = value;
    }
    resetLocality() {
        this._locality = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get localityInput() {
        return this._locality;
    }
    get organization() {
        return this.getStringAttribute('organization');
    }
    set organization(value) {
        this._organization = value;
    }
    resetOrganization() {
        this._organization = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get organizationInput() {
        return this._organization;
    }
    get postalCode() {
        return this.getStringAttribute('postal_code');
    }
    set postalCode(value) {
        this._postalCode = value;
    }
    resetPostalCode() {
        this._postalCode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get postalCodeInput() {
        return this._postalCode;
    }
    get recipients() {
        return this.getListAttribute('recipients');
    }
    set recipients(value) {
        this._recipients = value;
    }
    resetRecipients() {
        this._recipients = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get recipientsInput() {
        return this._recipients;
    }
    get regionCode() {
        return this.getStringAttribute('region_code');
    }
    set regionCode(value) {
        this._regionCode = value;
    }
    // Temporarily expose input value. Use with caution.
    get regionCodeInput() {
        return this._regionCode;
    }
}
exports.ClouddomainsRegistrationContactSettingsAdminContactPostalAddressOutputReference = ClouddomainsRegistrationContactSettingsAdminContactPostalAddressOutputReference;
_a = JSII_RTTI_SYMBOL_1;
ClouddomainsRegistrationContactSettingsAdminContactPostalAddressOutputReference[_a] = { fqn: "@cdktf/provider-google.clouddomainsRegistration.ClouddomainsRegistrationContactSettingsAdminContactPostalAddressOutputReference", version: "14.13.1" };
function clouddomainsRegistrationContactSettingsAdminContactToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        email: cdktf.stringToTerraform(struct.email),
        fax_number: cdktf.stringToTerraform(struct.faxNumber),
        phone_number: cdktf.stringToTerraform(struct.phoneNumber),
        postal_address: clouddomainsRegistrationContactSettingsAdminContactPostalAddressToTerraform(struct.postalAddress),
    };
}
exports.clouddomainsRegistrationContactSettingsAdminContactToTerraform = clouddomainsRegistrationContactSettingsAdminContactToTerraform;
function clouddomainsRegistrationContactSettingsAdminContactToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        email: {
            value: cdktf.stringToHclTerraform(struct.email),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        fax_number: {
            value: cdktf.stringToHclTerraform(struct.faxNumber),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        phone_number: {
            value: cdktf.stringToHclTerraform(struct.phoneNumber),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        postal_address: {
            value: clouddomainsRegistrationContactSettingsAdminContactPostalAddressToHclTerraform(struct.postalAddress),
            isBlock: true,
            type: "list",
            storageClassType: "ClouddomainsRegistrationContactSettingsAdminContactPostalAddressList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.clouddomainsRegistrationContactSettingsAdminContactToHclTerraform = clouddomainsRegistrationContactSettingsAdminContactToHclTerraform;
class ClouddomainsRegistrationContactSettingsAdminContactOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // postal_address - computed: false, optional: false, required: true
        this._postalAddress = new ClouddomainsRegistrationContactSettingsAdminContactPostalAddressOutputReference(this, "postal_address");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._email !== undefined) {
            hasAnyValues = true;
            internalValueResult.email = this._email;
        }
        if (this._faxNumber !== undefined) {
            hasAnyValues = true;
            internalValueResult.faxNumber = this._faxNumber;
        }
        if (this._phoneNumber !== undefined) {
            hasAnyValues = true;
            internalValueResult.phoneNumber = this._phoneNumber;
        }
        if (this._postalAddress?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.postalAddress = this._postalAddress?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._email = undefined;
            this._faxNumber = undefined;
            this._phoneNumber = undefined;
            this._postalAddress.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._email = value.email;
            this._faxNumber = value.faxNumber;
            this._phoneNumber = value.phoneNumber;
            this._postalAddress.internalValue = value.postalAddress;
        }
    }
    get email() {
        return this.getStringAttribute('email');
    }
    set email(value) {
        this._email = value;
    }
    // Temporarily expose input value. Use with caution.
    get emailInput() {
        return this._email;
    }
    get faxNumber() {
        return this.getStringAttribute('fax_number');
    }
    set faxNumber(value) {
        this._faxNumber = value;
    }
    resetFaxNumber() {
        this._faxNumber = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get faxNumberInput() {
        return this._faxNumber;
    }
    get phoneNumber() {
        return this.getStringAttribute('phone_number');
    }
    set phoneNumber(value) {
        this._phoneNumber = value;
    }
    // Temporarily expose input value. Use with caution.
    get phoneNumberInput() {
        return this._phoneNumber;
    }
    get postalAddress() {
        return this._postalAddress;
    }
    putPostalAddress(value) {
        this._postalAddress.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get postalAddressInput() {
        return this._postalAddress.internalValue;
    }
}
exports.ClouddomainsRegistrationContactSettingsAdminContactOutputReference = ClouddomainsRegistrationContactSettingsAdminContactOutputReference;
_b = JSII_RTTI_SYMBOL_1;
ClouddomainsRegistrationContactSettingsAdminContactOutputReference[_b] = { fqn: "@cdktf/provider-google.clouddomainsRegistration.ClouddomainsRegistrationContactSettingsAdminContactOutputReference", version: "14.13.1" };
function clouddomainsRegistrationContactSettingsRegistrantContactPostalAddressToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        address_lines: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.addressLines),
        administrative_area: cdktf.stringToTerraform(struct.administrativeArea),
        locality: cdktf.stringToTerraform(struct.locality),
        organization: cdktf.stringToTerraform(struct.organization),
        postal_code: cdktf.stringToTerraform(struct.postalCode),
        recipients: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.recipients),
        region_code: cdktf.stringToTerraform(struct.regionCode),
    };
}
exports.clouddomainsRegistrationContactSettingsRegistrantContactPostalAddressToTerraform = clouddomainsRegistrationContactSettingsRegistrantContactPostalAddressToTerraform;
function clouddomainsRegistrationContactSettingsRegistrantContactPostalAddressToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        address_lines: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.addressLines),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        administrative_area: {
            value: cdktf.stringToHclTerraform(struct.administrativeArea),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        locality: {
            value: cdktf.stringToHclTerraform(struct.locality),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        organization: {
            value: cdktf.stringToHclTerraform(struct.organization),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        postal_code: {
            value: cdktf.stringToHclTerraform(struct.postalCode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        recipients: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.recipients),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        region_code: {
            value: cdktf.stringToHclTerraform(struct.regionCode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.clouddomainsRegistrationContactSettingsRegistrantContactPostalAddressToHclTerraform = clouddomainsRegistrationContactSettingsRegistrantContactPostalAddressToHclTerraform;
class ClouddomainsRegistrationContactSettingsRegistrantContactPostalAddressOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._addressLines !== undefined) {
            hasAnyValues = true;
            internalValueResult.addressLines = this._addressLines;
        }
        if (this._administrativeArea !== undefined) {
            hasAnyValues = true;
            internalValueResult.administrativeArea = this._administrativeArea;
        }
        if (this._locality !== undefined) {
            hasAnyValues = true;
            internalValueResult.locality = this._locality;
        }
        if (this._organization !== undefined) {
            hasAnyValues = true;
            internalValueResult.organization = this._organization;
        }
        if (this._postalCode !== undefined) {
            hasAnyValues = true;
            internalValueResult.postalCode = this._postalCode;
        }
        if (this._recipients !== undefined) {
            hasAnyValues = true;
            internalValueResult.recipients = this._recipients;
        }
        if (this._regionCode !== undefined) {
            hasAnyValues = true;
            internalValueResult.regionCode = this._regionCode;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._addressLines = undefined;
            this._administrativeArea = undefined;
            this._locality = undefined;
            this._organization = undefined;
            this._postalCode = undefined;
            this._recipients = undefined;
            this._regionCode = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._addressLines = value.addressLines;
            this._administrativeArea = value.administrativeArea;
            this._locality = value.locality;
            this._organization = value.organization;
            this._postalCode = value.postalCode;
            this._recipients = value.recipients;
            this._regionCode = value.regionCode;
        }
    }
    get addressLines() {
        return this.getListAttribute('address_lines');
    }
    set addressLines(value) {
        this._addressLines = value;
    }
    resetAddressLines() {
        this._addressLines = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get addressLinesInput() {
        return this._addressLines;
    }
    get administrativeArea() {
        return this.getStringAttribute('administrative_area');
    }
    set administrativeArea(value) {
        this._administrativeArea = value;
    }
    resetAdministrativeArea() {
        this._administrativeArea = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get administrativeAreaInput() {
        return this._administrativeArea;
    }
    get locality() {
        return this.getStringAttribute('locality');
    }
    set locality(value) {
        this._locality = value;
    }
    resetLocality() {
        this._locality = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get localityInput() {
        return this._locality;
    }
    get organization() {
        return this.getStringAttribute('organization');
    }
    set organization(value) {
        this._organization = value;
    }
    resetOrganization() {
        this._organization = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get organizationInput() {
        return this._organization;
    }
    get postalCode() {
        return this.getStringAttribute('postal_code');
    }
    set postalCode(value) {
        this._postalCode = value;
    }
    resetPostalCode() {
        this._postalCode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get postalCodeInput() {
        return this._postalCode;
    }
    get recipients() {
        return this.getListAttribute('recipients');
    }
    set recipients(value) {
        this._recipients = value;
    }
    resetRecipients() {
        this._recipients = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get recipientsInput() {
        return this._recipients;
    }
    get regionCode() {
        return this.getStringAttribute('region_code');
    }
    set regionCode(value) {
        this._regionCode = value;
    }
    // Temporarily expose input value. Use with caution.
    get regionCodeInput() {
        return this._regionCode;
    }
}
exports.ClouddomainsRegistrationContactSettingsRegistrantContactPostalAddressOutputReference = ClouddomainsRegistrationContactSettingsRegistrantContactPostalAddressOutputReference;
_c = JSII_RTTI_SYMBOL_1;
ClouddomainsRegistrationContactSettingsRegistrantContactPostalAddressOutputReference[_c] = { fqn: "@cdktf/provider-google.clouddomainsRegistration.ClouddomainsRegistrationContactSettingsRegistrantContactPostalAddressOutputReference", version: "14.13.1" };
function clouddomainsRegistrationContactSettingsRegistrantContactToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        email: cdktf.stringToTerraform(struct.email),
        fax_number: cdktf.stringToTerraform(struct.faxNumber),
        phone_number: cdktf.stringToTerraform(struct.phoneNumber),
        postal_address: clouddomainsRegistrationContactSettingsRegistrantContactPostalAddressToTerraform(struct.postalAddress),
    };
}
exports.clouddomainsRegistrationContactSettingsRegistrantContactToTerraform = clouddomainsRegistrationContactSettingsRegistrantContactToTerraform;
function clouddomainsRegistrationContactSettingsRegistrantContactToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        email: {
            value: cdktf.stringToHclTerraform(struct.email),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        fax_number: {
            value: cdktf.stringToHclTerraform(struct.faxNumber),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        phone_number: {
            value: cdktf.stringToHclTerraform(struct.phoneNumber),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        postal_address: {
            value: clouddomainsRegistrationContactSettingsRegistrantContactPostalAddressToHclTerraform(struct.postalAddress),
            isBlock: true,
            type: "list",
            storageClassType: "ClouddomainsRegistrationContactSettingsRegistrantContactPostalAddressList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.clouddomainsRegistrationContactSettingsRegistrantContactToHclTerraform = clouddomainsRegistrationContactSettingsRegistrantContactToHclTerraform;
class ClouddomainsRegistrationContactSettingsRegistrantContactOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // postal_address - computed: false, optional: false, required: true
        this._postalAddress = new ClouddomainsRegistrationContactSettingsRegistrantContactPostalAddressOutputReference(this, "postal_address");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._email !== undefined) {
            hasAnyValues = true;
            internalValueResult.email = this._email;
        }
        if (this._faxNumber !== undefined) {
            hasAnyValues = true;
            internalValueResult.faxNumber = this._faxNumber;
        }
        if (this._phoneNumber !== undefined) {
            hasAnyValues = true;
            internalValueResult.phoneNumber = this._phoneNumber;
        }
        if (this._postalAddress?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.postalAddress = this._postalAddress?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._email = undefined;
            this._faxNumber = undefined;
            this._phoneNumber = undefined;
            this._postalAddress.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._email = value.email;
            this._faxNumber = value.faxNumber;
            this._phoneNumber = value.phoneNumber;
            this._postalAddress.internalValue = value.postalAddress;
        }
    }
    get email() {
        return this.getStringAttribute('email');
    }
    set email(value) {
        this._email = value;
    }
    // Temporarily expose input value. Use with caution.
    get emailInput() {
        return this._email;
    }
    get faxNumber() {
        return this.getStringAttribute('fax_number');
    }
    set faxNumber(value) {
        this._faxNumber = value;
    }
    resetFaxNumber() {
        this._faxNumber = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get faxNumberInput() {
        return this._faxNumber;
    }
    get phoneNumber() {
        return this.getStringAttribute('phone_number');
    }
    set phoneNumber(value) {
        this._phoneNumber = value;
    }
    // Temporarily expose input value. Use with caution.
    get phoneNumberInput() {
        return this._phoneNumber;
    }
    get postalAddress() {
        return this._postalAddress;
    }
    putPostalAddress(value) {
        this._postalAddress.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get postalAddressInput() {
        return this._postalAddress.internalValue;
    }
}
exports.ClouddomainsRegistrationContactSettingsRegistrantContactOutputReference = ClouddomainsRegistrationContactSettingsRegistrantContactOutputReference;
_d = JSII_RTTI_SYMBOL_1;
ClouddomainsRegistrationContactSettingsRegistrantContactOutputReference[_d] = { fqn: "@cdktf/provider-google.clouddomainsRegistration.ClouddomainsRegistrationContactSettingsRegistrantContactOutputReference", version: "14.13.1" };
function clouddomainsRegistrationContactSettingsTechnicalContactPostalAddressToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        address_lines: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.addressLines),
        administrative_area: cdktf.stringToTerraform(struct.administrativeArea),
        locality: cdktf.stringToTerraform(struct.locality),
        organization: cdktf.stringToTerraform(struct.organization),
        postal_code: cdktf.stringToTerraform(struct.postalCode),
        recipients: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.recipients),
        region_code: cdktf.stringToTerraform(struct.regionCode),
    };
}
exports.clouddomainsRegistrationContactSettingsTechnicalContactPostalAddressToTerraform = clouddomainsRegistrationContactSettingsTechnicalContactPostalAddressToTerraform;
function clouddomainsRegistrationContactSettingsTechnicalContactPostalAddressToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        address_lines: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.addressLines),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        administrative_area: {
            value: cdktf.stringToHclTerraform(struct.administrativeArea),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        locality: {
            value: cdktf.stringToHclTerraform(struct.locality),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        organization: {
            value: cdktf.stringToHclTerraform(struct.organization),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        postal_code: {
            value: cdktf.stringToHclTerraform(struct.postalCode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        recipients: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.recipients),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        region_code: {
            value: cdktf.stringToHclTerraform(struct.regionCode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.clouddomainsRegistrationContactSettingsTechnicalContactPostalAddressToHclTerraform = clouddomainsRegistrationContactSettingsTechnicalContactPostalAddressToHclTerraform;
class ClouddomainsRegistrationContactSettingsTechnicalContactPostalAddressOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._addressLines !== undefined) {
            hasAnyValues = true;
            internalValueResult.addressLines = this._addressLines;
        }
        if (this._administrativeArea !== undefined) {
            hasAnyValues = true;
            internalValueResult.administrativeArea = this._administrativeArea;
        }
        if (this._locality !== undefined) {
            hasAnyValues = true;
            internalValueResult.locality = this._locality;
        }
        if (this._organization !== undefined) {
            hasAnyValues = true;
            internalValueResult.organization = this._organization;
        }
        if (this._postalCode !== undefined) {
            hasAnyValues = true;
            internalValueResult.postalCode = this._postalCode;
        }
        if (this._recipients !== undefined) {
            hasAnyValues = true;
            internalValueResult.recipients = this._recipients;
        }
        if (this._regionCode !== undefined) {
            hasAnyValues = true;
            internalValueResult.regionCode = this._regionCode;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._addressLines = undefined;
            this._administrativeArea = undefined;
            this._locality = undefined;
            this._organization = undefined;
            this._postalCode = undefined;
            this._recipients = undefined;
            this._regionCode = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._addressLines = value.addressLines;
            this._administrativeArea = value.administrativeArea;
            this._locality = value.locality;
            this._organization = value.organization;
            this._postalCode = value.postalCode;
            this._recipients = value.recipients;
            this._regionCode = value.regionCode;
        }
    }
    get addressLines() {
        return this.getListAttribute('address_lines');
    }
    set addressLines(value) {
        this._addressLines = value;
    }
    resetAddressLines() {
        this._addressLines = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get addressLinesInput() {
        return this._addressLines;
    }
    get administrativeArea() {
        return this.getStringAttribute('administrative_area');
    }
    set administrativeArea(value) {
        this._administrativeArea = value;
    }
    resetAdministrativeArea() {
        this._administrativeArea = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get administrativeAreaInput() {
        return this._administrativeArea;
    }
    get locality() {
        return this.getStringAttribute('locality');
    }
    set locality(value) {
        this._locality = value;
    }
    resetLocality() {
        this._locality = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get localityInput() {
        return this._locality;
    }
    get organization() {
        return this.getStringAttribute('organization');
    }
    set organization(value) {
        this._organization = value;
    }
    resetOrganization() {
        this._organization = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get organizationInput() {
        return this._organization;
    }
    get postalCode() {
        return this.getStringAttribute('postal_code');
    }
    set postalCode(value) {
        this._postalCode = value;
    }
    resetPostalCode() {
        this._postalCode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get postalCodeInput() {
        return this._postalCode;
    }
    get recipients() {
        return this.getListAttribute('recipients');
    }
    set recipients(value) {
        this._recipients = value;
    }
    resetRecipients() {
        this._recipients = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get recipientsInput() {
        return this._recipients;
    }
    get regionCode() {
        return this.getStringAttribute('region_code');
    }
    set regionCode(value) {
        this._regionCode = value;
    }
    // Temporarily expose input value. Use with caution.
    get regionCodeInput() {
        return this._regionCode;
    }
}
exports.ClouddomainsRegistrationContactSettingsTechnicalContactPostalAddressOutputReference = ClouddomainsRegistrationContactSettingsTechnicalContactPostalAddressOutputReference;
_e = JSII_RTTI_SYMBOL_1;
ClouddomainsRegistrationContactSettingsTechnicalContactPostalAddressOutputReference[_e] = { fqn: "@cdktf/provider-google.clouddomainsRegistration.ClouddomainsRegistrationContactSettingsTechnicalContactPostalAddressOutputReference", version: "14.13.1" };
function clouddomainsRegistrationContactSettingsTechnicalContactToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        email: cdktf.stringToTerraform(struct.email),
        fax_number: cdktf.stringToTerraform(struct.faxNumber),
        phone_number: cdktf.stringToTerraform(struct.phoneNumber),
        postal_address: clouddomainsRegistrationContactSettingsTechnicalContactPostalAddressToTerraform(struct.postalAddress),
    };
}
exports.clouddomainsRegistrationContactSettingsTechnicalContactToTerraform = clouddomainsRegistrationContactSettingsTechnicalContactToTerraform;
function clouddomainsRegistrationContactSettingsTechnicalContactToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        email: {
            value: cdktf.stringToHclTerraform(struct.email),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        fax_number: {
            value: cdktf.stringToHclTerraform(struct.faxNumber),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        phone_number: {
            value: cdktf.stringToHclTerraform(struct.phoneNumber),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        postal_address: {
            value: clouddomainsRegistrationContactSettingsTechnicalContactPostalAddressToHclTerraform(struct.postalAddress),
            isBlock: true,
            type: "list",
            storageClassType: "ClouddomainsRegistrationContactSettingsTechnicalContactPostalAddressList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.clouddomainsRegistrationContactSettingsTechnicalContactToHclTerraform = clouddomainsRegistrationContactSettingsTechnicalContactToHclTerraform;
class ClouddomainsRegistrationContactSettingsTechnicalContactOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // postal_address - computed: false, optional: false, required: true
        this._postalAddress = new ClouddomainsRegistrationContactSettingsTechnicalContactPostalAddressOutputReference(this, "postal_address");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._email !== undefined) {
            hasAnyValues = true;
            internalValueResult.email = this._email;
        }
        if (this._faxNumber !== undefined) {
            hasAnyValues = true;
            internalValueResult.faxNumber = this._faxNumber;
        }
        if (this._phoneNumber !== undefined) {
            hasAnyValues = true;
            internalValueResult.phoneNumber = this._phoneNumber;
        }
        if (this._postalAddress?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.postalAddress = this._postalAddress?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._email = undefined;
            this._faxNumber = undefined;
            this._phoneNumber = undefined;
            this._postalAddress.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._email = value.email;
            this._faxNumber = value.faxNumber;
            this._phoneNumber = value.phoneNumber;
            this._postalAddress.internalValue = value.postalAddress;
        }
    }
    get email() {
        return this.getStringAttribute('email');
    }
    set email(value) {
        this._email = value;
    }
    // Temporarily expose input value. Use with caution.
    get emailInput() {
        return this._email;
    }
    get faxNumber() {
        return this.getStringAttribute('fax_number');
    }
    set faxNumber(value) {
        this._faxNumber = value;
    }
    resetFaxNumber() {
        this._faxNumber = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get faxNumberInput() {
        return this._faxNumber;
    }
    get phoneNumber() {
        return this.getStringAttribute('phone_number');
    }
    set phoneNumber(value) {
        this._phoneNumber = value;
    }
    // Temporarily expose input value. Use with caution.
    get phoneNumberInput() {
        return this._phoneNumber;
    }
    get postalAddress() {
        return this._postalAddress;
    }
    putPostalAddress(value) {
        this._postalAddress.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get postalAddressInput() {
        return this._postalAddress.internalValue;
    }
}
exports.ClouddomainsRegistrationContactSettingsTechnicalContactOutputReference = ClouddomainsRegistrationContactSettingsTechnicalContactOutputReference;
_f = JSII_RTTI_SYMBOL_1;
ClouddomainsRegistrationContactSettingsTechnicalContactOutputReference[_f] = { fqn: "@cdktf/provider-google.clouddomainsRegistration.ClouddomainsRegistrationContactSettingsTechnicalContactOutputReference", version: "14.13.1" };
function clouddomainsRegistrationContactSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        privacy: cdktf.stringToTerraform(struct.privacy),
        admin_contact: clouddomainsRegistrationContactSettingsAdminContactToTerraform(struct.adminContact),
        registrant_contact: clouddomainsRegistrationContactSettingsRegistrantContactToTerraform(struct.registrantContact),
        technical_contact: clouddomainsRegistrationContactSettingsTechnicalContactToTerraform(struct.technicalContact),
    };
}
exports.clouddomainsRegistrationContactSettingsToTerraform = clouddomainsRegistrationContactSettingsToTerraform;
function clouddomainsRegistrationContactSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        privacy: {
            value: cdktf.stringToHclTerraform(struct.privacy),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        admin_contact: {
            value: clouddomainsRegistrationContactSettingsAdminContactToHclTerraform(struct.adminContact),
            isBlock: true,
            type: "list",
            storageClassType: "ClouddomainsRegistrationContactSettingsAdminContactList",
        },
        registrant_contact: {
            value: clouddomainsRegistrationContactSettingsRegistrantContactToHclTerraform(struct.registrantContact),
            isBlock: true,
            type: "list",
            storageClassType: "ClouddomainsRegistrationContactSettingsRegistrantContactList",
        },
        technical_contact: {
            value: clouddomainsRegistrationContactSettingsTechnicalContactToHclTerraform(struct.technicalContact),
            isBlock: true,
            type: "list",
            storageClassType: "ClouddomainsRegistrationContactSettingsTechnicalContactList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.clouddomainsRegistrationContactSettingsToHclTerraform = clouddomainsRegistrationContactSettingsToHclTerraform;
class ClouddomainsRegistrationContactSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // admin_contact - computed: false, optional: false, required: true
        this._adminContact = new ClouddomainsRegistrationContactSettingsAdminContactOutputReference(this, "admin_contact");
        // registrant_contact - computed: false, optional: false, required: true
        this._registrantContact = new ClouddomainsRegistrationContactSettingsRegistrantContactOutputReference(this, "registrant_contact");
        // technical_contact - computed: false, optional: false, required: true
        this._technicalContact = new ClouddomainsRegistrationContactSettingsTechnicalContactOutputReference(this, "technical_contact");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._privacy !== undefined) {
            hasAnyValues = true;
            internalValueResult.privacy = this._privacy;
        }
        if (this._adminContact?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.adminContact = this._adminContact?.internalValue;
        }
        if (this._registrantContact?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.registrantContact = this._registrantContact?.internalValue;
        }
        if (this._technicalContact?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.technicalContact = this._technicalContact?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._privacy = undefined;
            this._adminContact.internalValue = undefined;
            this._registrantContact.internalValue = undefined;
            this._technicalContact.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._privacy = value.privacy;
            this._adminContact.internalValue = value.adminContact;
            this._registrantContact.internalValue = value.registrantContact;
            this._technicalContact.internalValue = value.technicalContact;
        }
    }
    get privacy() {
        return this.getStringAttribute('privacy');
    }
    set privacy(value) {
        this._privacy = value;
    }
    // Temporarily expose input value. Use with caution.
    get privacyInput() {
        return this._privacy;
    }
    get adminContact() {
        return this._adminContact;
    }
    putAdminContact(value) {
        this._adminContact.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get adminContactInput() {
        return this._adminContact.internalValue;
    }
    get registrantContact() {
        return this._registrantContact;
    }
    putRegistrantContact(value) {
        this._registrantContact.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get registrantContactInput() {
        return this._registrantContact.internalValue;
    }
    get technicalContact() {
        return this._technicalContact;
    }
    putTechnicalContact(value) {
        this._technicalContact.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get technicalContactInput() {
        return this._technicalContact.internalValue;
    }
}
exports.ClouddomainsRegistrationContactSettingsOutputReference = ClouddomainsRegistrationContactSettingsOutputReference;
_g = JSII_RTTI_SYMBOL_1;
ClouddomainsRegistrationContactSettingsOutputReference[_g] = { fqn: "@cdktf/provider-google.clouddomainsRegistration.ClouddomainsRegistrationContactSettingsOutputReference", version: "14.13.1" };
function clouddomainsRegistrationDnsSettingsCustomDnsDsRecordsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        algorithm: cdktf.stringToTerraform(struct.algorithm),
        digest: cdktf.stringToTerraform(struct.digest),
        digest_type: cdktf.stringToTerraform(struct.digestType),
        key_tag: cdktf.numberToTerraform(struct.keyTag),
    };
}
exports.clouddomainsRegistrationDnsSettingsCustomDnsDsRecordsToTerraform = clouddomainsRegistrationDnsSettingsCustomDnsDsRecordsToTerraform;
function clouddomainsRegistrationDnsSettingsCustomDnsDsRecordsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        algorithm: {
            value: cdktf.stringToHclTerraform(struct.algorithm),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        digest: {
            value: cdktf.stringToHclTerraform(struct.digest),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        digest_type: {
            value: cdktf.stringToHclTerraform(struct.digestType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        key_tag: {
            value: cdktf.numberToHclTerraform(struct.keyTag),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.clouddomainsRegistrationDnsSettingsCustomDnsDsRecordsToHclTerraform = clouddomainsRegistrationDnsSettingsCustomDnsDsRecordsToHclTerraform;
class ClouddomainsRegistrationDnsSettingsCustomDnsDsRecordsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._algorithm !== undefined) {
            hasAnyValues = true;
            internalValueResult.algorithm = this._algorithm;
        }
        if (this._digest !== undefined) {
            hasAnyValues = true;
            internalValueResult.digest = this._digest;
        }
        if (this._digestType !== undefined) {
            hasAnyValues = true;
            internalValueResult.digestType = this._digestType;
        }
        if (this._keyTag !== undefined) {
            hasAnyValues = true;
            internalValueResult.keyTag = this._keyTag;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._algorithm = undefined;
            this._digest = undefined;
            this._digestType = undefined;
            this._keyTag = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._algorithm = value.algorithm;
            this._digest = value.digest;
            this._digestType = value.digestType;
            this._keyTag = value.keyTag;
        }
    }
    get algorithm() {
        return this.getStringAttribute('algorithm');
    }
    set algorithm(value) {
        this._algorithm = value;
    }
    resetAlgorithm() {
        this._algorithm = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get algorithmInput() {
        return this._algorithm;
    }
    get digest() {
        return this.getStringAttribute('digest');
    }
    set digest(value) {
        this._digest = value;
    }
    resetDigest() {
        this._digest = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get digestInput() {
        return this._digest;
    }
    get digestType() {
        return this.getStringAttribute('digest_type');
    }
    set digestType(value) {
        this._digestType = value;
    }
    resetDigestType() {
        this._digestType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get digestTypeInput() {
        return this._digestType;
    }
    get keyTag() {
        return this.getNumberAttribute('key_tag');
    }
    set keyTag(value) {
        this._keyTag = value;
    }
    resetKeyTag() {
        this._keyTag = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyTagInput() {
        return this._keyTag;
    }
}
exports.ClouddomainsRegistrationDnsSettingsCustomDnsDsRecordsOutputReference = ClouddomainsRegistrationDnsSettingsCustomDnsDsRecordsOutputReference;
_h = JSII_RTTI_SYMBOL_1;
ClouddomainsRegistrationDnsSettingsCustomDnsDsRecordsOutputReference[_h] = { fqn: "@cdktf/provider-google.clouddomainsRegistration.ClouddomainsRegistrationDnsSettingsCustomDnsDsRecordsOutputReference", version: "14.13.1" };
class ClouddomainsRegistrationDnsSettingsCustomDnsDsRecordsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ClouddomainsRegistrationDnsSettingsCustomDnsDsRecordsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ClouddomainsRegistrationDnsSettingsCustomDnsDsRecordsList = ClouddomainsRegistrationDnsSettingsCustomDnsDsRecordsList;
_j = JSII_RTTI_SYMBOL_1;
ClouddomainsRegistrationDnsSettingsCustomDnsDsRecordsList[_j] = { fqn: "@cdktf/provider-google.clouddomainsRegistration.ClouddomainsRegistrationDnsSettingsCustomDnsDsRecordsList", version: "14.13.1" };
function clouddomainsRegistrationDnsSettingsCustomDnsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name_servers: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.nameServers),
        ds_records: cdktf.listMapper(clouddomainsRegistrationDnsSettingsCustomDnsDsRecordsToTerraform, true)(struct.dsRecords),
    };
}
exports.clouddomainsRegistrationDnsSettingsCustomDnsToTerraform = clouddomainsRegistrationDnsSettingsCustomDnsToTerraform;
function clouddomainsRegistrationDnsSettingsCustomDnsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name_servers: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.nameServers),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        ds_records: {
            value: cdktf.listMapperHcl(clouddomainsRegistrationDnsSettingsCustomDnsDsRecordsToHclTerraform, true)(struct.dsRecords),
            isBlock: true,
            type: "list",
            storageClassType: "ClouddomainsRegistrationDnsSettingsCustomDnsDsRecordsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.clouddomainsRegistrationDnsSettingsCustomDnsToHclTerraform = clouddomainsRegistrationDnsSettingsCustomDnsToHclTerraform;
class ClouddomainsRegistrationDnsSettingsCustomDnsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // ds_records - computed: false, optional: true, required: false
        this._dsRecords = new ClouddomainsRegistrationDnsSettingsCustomDnsDsRecordsList(this, "ds_records", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._nameServers !== undefined) {
            hasAnyValues = true;
            internalValueResult.nameServers = this._nameServers;
        }
        if (this._dsRecords?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dsRecords = this._dsRecords?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._nameServers = undefined;
            this._dsRecords.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._nameServers = value.nameServers;
            this._dsRecords.internalValue = value.dsRecords;
        }
    }
    get nameServers() {
        return this.getListAttribute('name_servers');
    }
    set nameServers(value) {
        this._nameServers = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameServersInput() {
        return this._nameServers;
    }
    get dsRecords() {
        return this._dsRecords;
    }
    putDsRecords(value) {
        this._dsRecords.internalValue = value;
    }
    resetDsRecords() {
        this._dsRecords.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dsRecordsInput() {
        return this._dsRecords.internalValue;
    }
}
exports.ClouddomainsRegistrationDnsSettingsCustomDnsOutputReference = ClouddomainsRegistrationDnsSettingsCustomDnsOutputReference;
_k = JSII_RTTI_SYMBOL_1;
ClouddomainsRegistrationDnsSettingsCustomDnsOutputReference[_k] = { fqn: "@cdktf/provider-google.clouddomainsRegistration.ClouddomainsRegistrationDnsSettingsCustomDnsOutputReference", version: "14.13.1" };
function clouddomainsRegistrationDnsSettingsGlueRecordsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        host_name: cdktf.stringToTerraform(struct.hostName),
        ipv4_addresses: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.ipv4Addresses),
        ipv6_addresses: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.ipv6Addresses),
    };
}
exports.clouddomainsRegistrationDnsSettingsGlueRecordsToTerraform = clouddomainsRegistrationDnsSettingsGlueRecordsToTerraform;
function clouddomainsRegistrationDnsSettingsGlueRecordsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        host_name: {
            value: cdktf.stringToHclTerraform(struct.hostName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        ipv4_addresses: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.ipv4Addresses),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        ipv6_addresses: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.ipv6Addresses),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.clouddomainsRegistrationDnsSettingsGlueRecordsToHclTerraform = clouddomainsRegistrationDnsSettingsGlueRecordsToHclTerraform;
class ClouddomainsRegistrationDnsSettingsGlueRecordsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hostName !== undefined) {
            hasAnyValues = true;
            internalValueResult.hostName = this._hostName;
        }
        if (this._ipv4Addresses !== undefined) {
            hasAnyValues = true;
            internalValueResult.ipv4Addresses = this._ipv4Addresses;
        }
        if (this._ipv6Addresses !== undefined) {
            hasAnyValues = true;
            internalValueResult.ipv6Addresses = this._ipv6Addresses;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._hostName = undefined;
            this._ipv4Addresses = undefined;
            this._ipv6Addresses = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._hostName = value.hostName;
            this._ipv4Addresses = value.ipv4Addresses;
            this._ipv6Addresses = value.ipv6Addresses;
        }
    }
    get hostName() {
        return this.getStringAttribute('host_name');
    }
    set hostName(value) {
        this._hostName = value;
    }
    // Temporarily expose input value. Use with caution.
    get hostNameInput() {
        return this._hostName;
    }
    get ipv4Addresses() {
        return this.getListAttribute('ipv4_addresses');
    }
    set ipv4Addresses(value) {
        this._ipv4Addresses = value;
    }
    resetIpv4Addresses() {
        this._ipv4Addresses = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ipv4AddressesInput() {
        return this._ipv4Addresses;
    }
    get ipv6Addresses() {
        return this.getListAttribute('ipv6_addresses');
    }
    set ipv6Addresses(value) {
        this._ipv6Addresses = value;
    }
    resetIpv6Addresses() {
        this._ipv6Addresses = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ipv6AddressesInput() {
        return this._ipv6Addresses;
    }
}
exports.ClouddomainsRegistrationDnsSettingsGlueRecordsOutputReference = ClouddomainsRegistrationDnsSettingsGlueRecordsOutputReference;
_l = JSII_RTTI_SYMBOL_1;
ClouddomainsRegistrationDnsSettingsGlueRecordsOutputReference[_l] = { fqn: "@cdktf/provider-google.clouddomainsRegistration.ClouddomainsRegistrationDnsSettingsGlueRecordsOutputReference", version: "14.13.1" };
class ClouddomainsRegistrationDnsSettingsGlueRecordsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ClouddomainsRegistrationDnsSettingsGlueRecordsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ClouddomainsRegistrationDnsSettingsGlueRecordsList = ClouddomainsRegistrationDnsSettingsGlueRecordsList;
_m = JSII_RTTI_SYMBOL_1;
ClouddomainsRegistrationDnsSettingsGlueRecordsList[_m] = { fqn: "@cdktf/provider-google.clouddomainsRegistration.ClouddomainsRegistrationDnsSettingsGlueRecordsList", version: "14.13.1" };
function clouddomainsRegistrationDnsSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        custom_dns: clouddomainsRegistrationDnsSettingsCustomDnsToTerraform(struct.customDns),
        glue_records: cdktf.listMapper(clouddomainsRegistrationDnsSettingsGlueRecordsToTerraform, true)(struct.glueRecords),
    };
}
exports.clouddomainsRegistrationDnsSettingsToTerraform = clouddomainsRegistrationDnsSettingsToTerraform;
function clouddomainsRegistrationDnsSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        custom_dns: {
            value: clouddomainsRegistrationDnsSettingsCustomDnsToHclTerraform(struct.customDns),
            isBlock: true,
            type: "list",
            storageClassType: "ClouddomainsRegistrationDnsSettingsCustomDnsList",
        },
        glue_records: {
            value: cdktf.listMapperHcl(clouddomainsRegistrationDnsSettingsGlueRecordsToHclTerraform, true)(struct.glueRecords),
            isBlock: true,
            type: "list",
            storageClassType: "ClouddomainsRegistrationDnsSettingsGlueRecordsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.clouddomainsRegistrationDnsSettingsToHclTerraform = clouddomainsRegistrationDnsSettingsToHclTerraform;
class ClouddomainsRegistrationDnsSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // custom_dns - computed: false, optional: true, required: false
        this._customDns = new ClouddomainsRegistrationDnsSettingsCustomDnsOutputReference(this, "custom_dns");
        // glue_records - computed: false, optional: true, required: false
        this._glueRecords = new ClouddomainsRegistrationDnsSettingsGlueRecordsList(this, "glue_records", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._customDns?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customDns = this._customDns?.internalValue;
        }
        if (this._glueRecords?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.glueRecords = this._glueRecords?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._customDns.internalValue = undefined;
            this._glueRecords.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._customDns.internalValue = value.customDns;
            this._glueRecords.internalValue = value.glueRecords;
        }
    }
    get customDns() {
        return this._customDns;
    }
    putCustomDns(value) {
        this._customDns.internalValue = value;
    }
    resetCustomDns() {
        this._customDns.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customDnsInput() {
        return this._customDns.internalValue;
    }
    get glueRecords() {
        return this._glueRecords;
    }
    putGlueRecords(value) {
        this._glueRecords.internalValue = value;
    }
    resetGlueRecords() {
        this._glueRecords.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get glueRecordsInput() {
        return this._glueRecords.internalValue;
    }
}
exports.ClouddomainsRegistrationDnsSettingsOutputReference = ClouddomainsRegistrationDnsSettingsOutputReference;
_o = JSII_RTTI_SYMBOL_1;
ClouddomainsRegistrationDnsSettingsOutputReference[_o] = { fqn: "@cdktf/provider-google.clouddomainsRegistration.ClouddomainsRegistrationDnsSettingsOutputReference", version: "14.13.1" };
function clouddomainsRegistrationManagementSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        preferred_renewal_method: cdktf.stringToTerraform(struct.preferredRenewalMethod),
        transfer_lock_state: cdktf.stringToTerraform(struct.transferLockState),
    };
}
exports.clouddomainsRegistrationManagementSettingsToTerraform = clouddomainsRegistrationManagementSettingsToTerraform;
function clouddomainsRegistrationManagementSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        preferred_renewal_method: {
            value: cdktf.stringToHclTerraform(struct.preferredRenewalMethod),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        transfer_lock_state: {
            value: cdktf.stringToHclTerraform(struct.transferLockState),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.clouddomainsRegistrationManagementSettingsToHclTerraform = clouddomainsRegistrationManagementSettingsToHclTerraform;
class ClouddomainsRegistrationManagementSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._preferredRenewalMethod !== undefined) {
            hasAnyValues = true;
            internalValueResult.preferredRenewalMethod = this._preferredRenewalMethod;
        }
        if (this._transferLockState !== undefined) {
            hasAnyValues = true;
            internalValueResult.transferLockState = this._transferLockState;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._preferredRenewalMethod = undefined;
            this._transferLockState = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._preferredRenewalMethod = value.preferredRenewalMethod;
            this._transferLockState = value.transferLockState;
        }
    }
    get preferredRenewalMethod() {
        return this.getStringAttribute('preferred_renewal_method');
    }
    set preferredRenewalMethod(value) {
        this._preferredRenewalMethod = value;
    }
    resetPreferredRenewalMethod() {
        this._preferredRenewalMethod = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get preferredRenewalMethodInput() {
        return this._preferredRenewalMethod;
    }
    // renewal_method - computed: true, optional: false, required: false
    get renewalMethod() {
        return this.getStringAttribute('renewal_method');
    }
    get transferLockState() {
        return this.getStringAttribute('transfer_lock_state');
    }
    set transferLockState(value) {
        this._transferLockState = value;
    }
    resetTransferLockState() {
        this._transferLockState = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get transferLockStateInput() {
        return this._transferLockState;
    }
}
exports.ClouddomainsRegistrationManagementSettingsOutputReference = ClouddomainsRegistrationManagementSettingsOutputReference;
_p = JSII_RTTI_SYMBOL_1;
ClouddomainsRegistrationManagementSettingsOutputReference[_p] = { fqn: "@cdktf/provider-google.clouddomainsRegistration.ClouddomainsRegistrationManagementSettingsOutputReference", version: "14.13.1" };
function clouddomainsRegistrationTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.clouddomainsRegistrationTimeoutsToTerraform = clouddomainsRegistrationTimeoutsToTerraform;
function clouddomainsRegistrationTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.clouddomainsRegistrationTimeoutsToHclTerraform = clouddomainsRegistrationTimeoutsToHclTerraform;
class ClouddomainsRegistrationTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.ClouddomainsRegistrationTimeoutsOutputReference = ClouddomainsRegistrationTimeoutsOutputReference;
_q = JSII_RTTI_SYMBOL_1;
ClouddomainsRegistrationTimeoutsOutputReference[_q] = { fqn: "@cdktf/provider-google.clouddomainsRegistration.ClouddomainsRegistrationTimeoutsOutputReference", version: "14.13.1" };
function clouddomainsRegistrationYearlyPriceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        currency_code: cdktf.stringToTerraform(struct.currencyCode),
        units: cdktf.stringToTerraform(struct.units),
    };
}
exports.clouddomainsRegistrationYearlyPriceToTerraform = clouddomainsRegistrationYearlyPriceToTerraform;
function clouddomainsRegistrationYearlyPriceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        currency_code: {
            value: cdktf.stringToHclTerraform(struct.currencyCode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        units: {
            value: cdktf.stringToHclTerraform(struct.units),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.clouddomainsRegistrationYearlyPriceToHclTerraform = clouddomainsRegistrationYearlyPriceToHclTerraform;
class ClouddomainsRegistrationYearlyPriceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._currencyCode !== undefined) {
            hasAnyValues = true;
            internalValueResult.currencyCode = this._currencyCode;
        }
        if (this._units !== undefined) {
            hasAnyValues = true;
            internalValueResult.units = this._units;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._currencyCode = undefined;
            this._units = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._currencyCode = value.currencyCode;
            this._units = value.units;
        }
    }
    get currencyCode() {
        return this.getStringAttribute('currency_code');
    }
    set currencyCode(value) {
        this._currencyCode = value;
    }
    resetCurrencyCode() {
        this._currencyCode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get currencyCodeInput() {
        return this._currencyCode;
    }
    get units() {
        return this.getStringAttribute('units');
    }
    set units(value) {
        this._units = value;
    }
    resetUnits() {
        this._units = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get unitsInput() {
        return this._units;
    }
}
exports.ClouddomainsRegistrationYearlyPriceOutputReference = ClouddomainsRegistrationYearlyPriceOutputReference;
_r = JSII_RTTI_SYMBOL_1;
ClouddomainsRegistrationYearlyPriceOutputReference[_r] = { fqn: "@cdktf/provider-google.clouddomainsRegistration.ClouddomainsRegistrationYearlyPriceOutputReference", version: "14.13.1" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/clouddomains_registration google_clouddomains_registration}
*/
class ClouddomainsRegistration extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a ClouddomainsRegistration resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the ClouddomainsRegistration to import
    * @param importFromId The id of the existing ClouddomainsRegistration that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/clouddomains_registration#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the ClouddomainsRegistration to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_clouddomains_registration", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/clouddomains_registration google_clouddomains_registration} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ClouddomainsRegistrationConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_clouddomains_registration',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // effective_labels - computed: true, optional: false, required: false
        this._effectiveLabels = new cdktf.StringMap(this, "effective_labels");
        // terraform_labels - computed: true, optional: false, required: false
        this._terraformLabels = new cdktf.StringMap(this, "terraform_labels");
        // contact_settings - computed: false, optional: false, required: true
        this._contactSettings = new ClouddomainsRegistrationContactSettingsOutputReference(this, "contact_settings");
        // dns_settings - computed: false, optional: true, required: false
        this._dnsSettings = new ClouddomainsRegistrationDnsSettingsOutputReference(this, "dns_settings");
        // management_settings - computed: false, optional: true, required: false
        this._managementSettings = new ClouddomainsRegistrationManagementSettingsOutputReference(this, "management_settings");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new ClouddomainsRegistrationTimeoutsOutputReference(this, "timeouts");
        // yearly_price - computed: false, optional: false, required: true
        this._yearlyPrice = new ClouddomainsRegistrationYearlyPriceOutputReference(this, "yearly_price");
        this._contactNotices = config.contactNotices;
        this._domainName = config.domainName;
        this._domainNotices = config.domainNotices;
        this._id = config.id;
        this._labels = config.labels;
        this._location = config.location;
        this._project = config.project;
        this._contactSettings.internalValue = config.contactSettings;
        this._dnsSettings.internalValue = config.dnsSettings;
        this._managementSettings.internalValue = config.managementSettings;
        this._timeouts.internalValue = config.timeouts;
        this._yearlyPrice.internalValue = config.yearlyPrice;
    }
    get contactNotices() {
        return this.getListAttribute('contact_notices');
    }
    set contactNotices(value) {
        this._contactNotices = value;
    }
    resetContactNotices() {
        this._contactNotices = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get contactNoticesInput() {
        return this._contactNotices;
    }
    // create_time - computed: true, optional: false, required: false
    get createTime() {
        return this.getStringAttribute('create_time');
    }
    get domainName() {
        return this.getStringAttribute('domain_name');
    }
    set domainName(value) {
        this._domainName = value;
    }
    // Temporarily expose input value. Use with caution.
    get domainNameInput() {
        return this._domainName;
    }
    get domainNotices() {
        return this.getListAttribute('domain_notices');
    }
    set domainNotices(value) {
        this._domainNotices = value;
    }
    resetDomainNotices() {
        this._domainNotices = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get domainNoticesInput() {
        return this._domainNotices;
    }
    get effectiveLabels() {
        return this._effectiveLabels;
    }
    // expire_time - computed: true, optional: false, required: false
    get expireTime() {
        return this.getStringAttribute('expire_time');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // issues - computed: true, optional: false, required: false
    get issues() {
        return this.getListAttribute('issues');
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    // register_failure_reason - computed: true, optional: false, required: false
    get registerFailureReason() {
        return this.getStringAttribute('register_failure_reason');
    }
    // state - computed: true, optional: false, required: false
    get state() {
        return this.getStringAttribute('state');
    }
    // supported_privacy - computed: true, optional: false, required: false
    get supportedPrivacy() {
        return this.getListAttribute('supported_privacy');
    }
    get terraformLabels() {
        return this._terraformLabels;
    }
    get contactSettings() {
        return this._contactSettings;
    }
    putContactSettings(value) {
        this._contactSettings.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get contactSettingsInput() {
        return this._contactSettings.internalValue;
    }
    get dnsSettings() {
        return this._dnsSettings;
    }
    putDnsSettings(value) {
        this._dnsSettings.internalValue = value;
    }
    resetDnsSettings() {
        this._dnsSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dnsSettingsInput() {
        return this._dnsSettings.internalValue;
    }
    get managementSettings() {
        return this._managementSettings;
    }
    putManagementSettings(value) {
        this._managementSettings.internalValue = value;
    }
    resetManagementSettings() {
        this._managementSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get managementSettingsInput() {
        return this._managementSettings.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    get yearlyPrice() {
        return this._yearlyPrice;
    }
    putYearlyPrice(value) {
        this._yearlyPrice.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get yearlyPriceInput() {
        return this._yearlyPrice.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            contact_notices: cdktf.listMapper(cdktf.stringToTerraform, false)(this._contactNotices),
            domain_name: cdktf.stringToTerraform(this._domainName),
            domain_notices: cdktf.listMapper(cdktf.stringToTerraform, false)(this._domainNotices),
            id: cdktf.stringToTerraform(this._id),
            labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._labels),
            location: cdktf.stringToTerraform(this._location),
            project: cdktf.stringToTerraform(this._project),
            contact_settings: clouddomainsRegistrationContactSettingsToTerraform(this._contactSettings.internalValue),
            dns_settings: clouddomainsRegistrationDnsSettingsToTerraform(this._dnsSettings.internalValue),
            management_settings: clouddomainsRegistrationManagementSettingsToTerraform(this._managementSettings.internalValue),
            timeouts: clouddomainsRegistrationTimeoutsToTerraform(this._timeouts.internalValue),
            yearly_price: clouddomainsRegistrationYearlyPriceToTerraform(this._yearlyPrice.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            contact_notices: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._contactNotices),
                isBlock: false,
                type: "list",
                storageClassType: "stringList",
            },
            domain_name: {
                value: cdktf.stringToHclTerraform(this._domainName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            domain_notices: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._domainNotices),
                isBlock: false,
                type: "list",
                storageClassType: "stringList",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            labels: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._labels),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            location: {
                value: cdktf.stringToHclTerraform(this._location),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            project: {
                value: cdktf.stringToHclTerraform(this._project),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            contact_settings: {
                value: clouddomainsRegistrationContactSettingsToHclTerraform(this._contactSettings.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ClouddomainsRegistrationContactSettingsList",
            },
            dns_settings: {
                value: clouddomainsRegistrationDnsSettingsToHclTerraform(this._dnsSettings.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ClouddomainsRegistrationDnsSettingsList",
            },
            management_settings: {
                value: clouddomainsRegistrationManagementSettingsToHclTerraform(this._managementSettings.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ClouddomainsRegistrationManagementSettingsList",
            },
            timeouts: {
                value: clouddomainsRegistrationTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "ClouddomainsRegistrationTimeouts",
            },
            yearly_price: {
                value: clouddomainsRegistrationYearlyPriceToHclTerraform(this._yearlyPrice.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ClouddomainsRegistrationYearlyPriceList",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.ClouddomainsRegistration = ClouddomainsRegistration;
_s = JSII_RTTI_SYMBOL_1;
ClouddomainsRegistration[_s] = { fqn: "@cdktf/provider-google.clouddomainsRegistration.ClouddomainsRegistration", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
ClouddomainsRegistration.tfResourceType = "google_clouddomains_registration";
//# sourceMappingURL=data:application/json;base64,