"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkSecurityServerTlsPolicy = exports.NetworkSecurityServerTlsPolicyTimeoutsOutputReference = exports.networkSecurityServerTlsPolicyTimeoutsToHclTerraform = exports.networkSecurityServerTlsPolicyTimeoutsToTerraform = exports.NetworkSecurityServerTlsPolicyServerCertificateOutputReference = exports.networkSecurityServerTlsPolicyServerCertificateToHclTerraform = exports.networkSecurityServerTlsPolicyServerCertificateToTerraform = exports.NetworkSecurityServerTlsPolicyServerCertificateGrpcEndpointOutputReference = exports.networkSecurityServerTlsPolicyServerCertificateGrpcEndpointToHclTerraform = exports.networkSecurityServerTlsPolicyServerCertificateGrpcEndpointToTerraform = exports.NetworkSecurityServerTlsPolicyServerCertificateCertificateProviderInstanceOutputReference = exports.networkSecurityServerTlsPolicyServerCertificateCertificateProviderInstanceToHclTerraform = exports.networkSecurityServerTlsPolicyServerCertificateCertificateProviderInstanceToTerraform = exports.NetworkSecurityServerTlsPolicyMtlsPolicyOutputReference = exports.networkSecurityServerTlsPolicyMtlsPolicyToHclTerraform = exports.networkSecurityServerTlsPolicyMtlsPolicyToTerraform = exports.NetworkSecurityServerTlsPolicyMtlsPolicyClientValidationCaList = exports.NetworkSecurityServerTlsPolicyMtlsPolicyClientValidationCaOutputReference = exports.networkSecurityServerTlsPolicyMtlsPolicyClientValidationCaToHclTerraform = exports.networkSecurityServerTlsPolicyMtlsPolicyClientValidationCaToTerraform = exports.NetworkSecurityServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutputReference = exports.networkSecurityServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointToHclTerraform = exports.networkSecurityServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointToTerraform = exports.NetworkSecurityServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutputReference = exports.networkSecurityServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceToHclTerraform = exports.networkSecurityServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function networkSecurityServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        plugin_instance: cdktf.stringToTerraform(struct.pluginInstance),
    };
}
exports.networkSecurityServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceToTerraform = networkSecurityServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceToTerraform;
function networkSecurityServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        plugin_instance: {
            value: cdktf.stringToHclTerraform(struct.pluginInstance),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.networkSecurityServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceToHclTerraform = networkSecurityServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceToHclTerraform;
class NetworkSecurityServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._pluginInstance !== undefined) {
            hasAnyValues = true;
            internalValueResult.pluginInstance = this._pluginInstance;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._pluginInstance = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._pluginInstance = value.pluginInstance;
        }
    }
    get pluginInstance() {
        return this.getStringAttribute('plugin_instance');
    }
    set pluginInstance(value) {
        this._pluginInstance = value;
    }
    // Temporarily expose input value. Use with caution.
    get pluginInstanceInput() {
        return this._pluginInstance;
    }
}
exports.NetworkSecurityServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutputReference = NetworkSecurityServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutputReference;
_a = JSII_RTTI_SYMBOL_1;
NetworkSecurityServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutputReference[_a] = { fqn: "@cdktf/provider-google.networkSecurityServerTlsPolicy.NetworkSecurityServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutputReference", version: "14.13.1" };
function networkSecurityServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        target_uri: cdktf.stringToTerraform(struct.targetUri),
    };
}
exports.networkSecurityServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointToTerraform = networkSecurityServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointToTerraform;
function networkSecurityServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        target_uri: {
            value: cdktf.stringToHclTerraform(struct.targetUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.networkSecurityServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointToHclTerraform = networkSecurityServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointToHclTerraform;
class NetworkSecurityServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._targetUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetUri = this._targetUri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._targetUri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._targetUri = value.targetUri;
        }
    }
    get targetUri() {
        return this.getStringAttribute('target_uri');
    }
    set targetUri(value) {
        this._targetUri = value;
    }
    // Temporarily expose input value. Use with caution.
    get targetUriInput() {
        return this._targetUri;
    }
}
exports.NetworkSecurityServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutputReference = NetworkSecurityServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutputReference;
_b = JSII_RTTI_SYMBOL_1;
NetworkSecurityServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutputReference[_b] = { fqn: "@cdktf/provider-google.networkSecurityServerTlsPolicy.NetworkSecurityServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutputReference", version: "14.13.1" };
function networkSecurityServerTlsPolicyMtlsPolicyClientValidationCaToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        certificate_provider_instance: networkSecurityServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceToTerraform(struct.certificateProviderInstance),
        grpc_endpoint: networkSecurityServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointToTerraform(struct.grpcEndpoint),
    };
}
exports.networkSecurityServerTlsPolicyMtlsPolicyClientValidationCaToTerraform = networkSecurityServerTlsPolicyMtlsPolicyClientValidationCaToTerraform;
function networkSecurityServerTlsPolicyMtlsPolicyClientValidationCaToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        certificate_provider_instance: {
            value: networkSecurityServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceToHclTerraform(struct.certificateProviderInstance),
            isBlock: true,
            type: "list",
            storageClassType: "NetworkSecurityServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceList",
        },
        grpc_endpoint: {
            value: networkSecurityServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointToHclTerraform(struct.grpcEndpoint),
            isBlock: true,
            type: "list",
            storageClassType: "NetworkSecurityServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.networkSecurityServerTlsPolicyMtlsPolicyClientValidationCaToHclTerraform = networkSecurityServerTlsPolicyMtlsPolicyClientValidationCaToHclTerraform;
class NetworkSecurityServerTlsPolicyMtlsPolicyClientValidationCaOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // certificate_provider_instance - computed: false, optional: true, required: false
        this._certificateProviderInstance = new NetworkSecurityServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceOutputReference(this, "certificate_provider_instance");
        // grpc_endpoint - computed: false, optional: true, required: false
        this._grpcEndpoint = new NetworkSecurityServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointOutputReference(this, "grpc_endpoint");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._certificateProviderInstance?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.certificateProviderInstance = this._certificateProviderInstance?.internalValue;
        }
        if (this._grpcEndpoint?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.grpcEndpoint = this._grpcEndpoint?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._certificateProviderInstance.internalValue = undefined;
            this._grpcEndpoint.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._certificateProviderInstance.internalValue = value.certificateProviderInstance;
            this._grpcEndpoint.internalValue = value.grpcEndpoint;
        }
    }
    get certificateProviderInstance() {
        return this._certificateProviderInstance;
    }
    putCertificateProviderInstance(value) {
        this._certificateProviderInstance.internalValue = value;
    }
    resetCertificateProviderInstance() {
        this._certificateProviderInstance.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get certificateProviderInstanceInput() {
        return this._certificateProviderInstance.internalValue;
    }
    get grpcEndpoint() {
        return this._grpcEndpoint;
    }
    putGrpcEndpoint(value) {
        this._grpcEndpoint.internalValue = value;
    }
    resetGrpcEndpoint() {
        this._grpcEndpoint.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get grpcEndpointInput() {
        return this._grpcEndpoint.internalValue;
    }
}
exports.NetworkSecurityServerTlsPolicyMtlsPolicyClientValidationCaOutputReference = NetworkSecurityServerTlsPolicyMtlsPolicyClientValidationCaOutputReference;
_c = JSII_RTTI_SYMBOL_1;
NetworkSecurityServerTlsPolicyMtlsPolicyClientValidationCaOutputReference[_c] = { fqn: "@cdktf/provider-google.networkSecurityServerTlsPolicy.NetworkSecurityServerTlsPolicyMtlsPolicyClientValidationCaOutputReference", version: "14.13.1" };
class NetworkSecurityServerTlsPolicyMtlsPolicyClientValidationCaList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new NetworkSecurityServerTlsPolicyMtlsPolicyClientValidationCaOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.NetworkSecurityServerTlsPolicyMtlsPolicyClientValidationCaList = NetworkSecurityServerTlsPolicyMtlsPolicyClientValidationCaList;
_d = JSII_RTTI_SYMBOL_1;
NetworkSecurityServerTlsPolicyMtlsPolicyClientValidationCaList[_d] = { fqn: "@cdktf/provider-google.networkSecurityServerTlsPolicy.NetworkSecurityServerTlsPolicyMtlsPolicyClientValidationCaList", version: "14.13.1" };
function networkSecurityServerTlsPolicyMtlsPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        client_validation_mode: cdktf.stringToTerraform(struct.clientValidationMode),
        client_validation_trust_config: cdktf.stringToTerraform(struct.clientValidationTrustConfig),
        client_validation_ca: cdktf.listMapper(networkSecurityServerTlsPolicyMtlsPolicyClientValidationCaToTerraform, true)(struct.clientValidationCa),
    };
}
exports.networkSecurityServerTlsPolicyMtlsPolicyToTerraform = networkSecurityServerTlsPolicyMtlsPolicyToTerraform;
function networkSecurityServerTlsPolicyMtlsPolicyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        client_validation_mode: {
            value: cdktf.stringToHclTerraform(struct.clientValidationMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        client_validation_trust_config: {
            value: cdktf.stringToHclTerraform(struct.clientValidationTrustConfig),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        client_validation_ca: {
            value: cdktf.listMapperHcl(networkSecurityServerTlsPolicyMtlsPolicyClientValidationCaToHclTerraform, true)(struct.clientValidationCa),
            isBlock: true,
            type: "list",
            storageClassType: "NetworkSecurityServerTlsPolicyMtlsPolicyClientValidationCaList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.networkSecurityServerTlsPolicyMtlsPolicyToHclTerraform = networkSecurityServerTlsPolicyMtlsPolicyToHclTerraform;
class NetworkSecurityServerTlsPolicyMtlsPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // client_validation_ca - computed: false, optional: true, required: false
        this._clientValidationCa = new NetworkSecurityServerTlsPolicyMtlsPolicyClientValidationCaList(this, "client_validation_ca", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._clientValidationMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientValidationMode = this._clientValidationMode;
        }
        if (this._clientValidationTrustConfig !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientValidationTrustConfig = this._clientValidationTrustConfig;
        }
        if (this._clientValidationCa?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientValidationCa = this._clientValidationCa?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._clientValidationMode = undefined;
            this._clientValidationTrustConfig = undefined;
            this._clientValidationCa.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._clientValidationMode = value.clientValidationMode;
            this._clientValidationTrustConfig = value.clientValidationTrustConfig;
            this._clientValidationCa.internalValue = value.clientValidationCa;
        }
    }
    get clientValidationMode() {
        return this.getStringAttribute('client_validation_mode');
    }
    set clientValidationMode(value) {
        this._clientValidationMode = value;
    }
    resetClientValidationMode() {
        this._clientValidationMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientValidationModeInput() {
        return this._clientValidationMode;
    }
    get clientValidationTrustConfig() {
        return this.getStringAttribute('client_validation_trust_config');
    }
    set clientValidationTrustConfig(value) {
        this._clientValidationTrustConfig = value;
    }
    resetClientValidationTrustConfig() {
        this._clientValidationTrustConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientValidationTrustConfigInput() {
        return this._clientValidationTrustConfig;
    }
    get clientValidationCa() {
        return this._clientValidationCa;
    }
    putClientValidationCa(value) {
        this._clientValidationCa.internalValue = value;
    }
    resetClientValidationCa() {
        this._clientValidationCa.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientValidationCaInput() {
        return this._clientValidationCa.internalValue;
    }
}
exports.NetworkSecurityServerTlsPolicyMtlsPolicyOutputReference = NetworkSecurityServerTlsPolicyMtlsPolicyOutputReference;
_e = JSII_RTTI_SYMBOL_1;
NetworkSecurityServerTlsPolicyMtlsPolicyOutputReference[_e] = { fqn: "@cdktf/provider-google.networkSecurityServerTlsPolicy.NetworkSecurityServerTlsPolicyMtlsPolicyOutputReference", version: "14.13.1" };
function networkSecurityServerTlsPolicyServerCertificateCertificateProviderInstanceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        plugin_instance: cdktf.stringToTerraform(struct.pluginInstance),
    };
}
exports.networkSecurityServerTlsPolicyServerCertificateCertificateProviderInstanceToTerraform = networkSecurityServerTlsPolicyServerCertificateCertificateProviderInstanceToTerraform;
function networkSecurityServerTlsPolicyServerCertificateCertificateProviderInstanceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        plugin_instance: {
            value: cdktf.stringToHclTerraform(struct.pluginInstance),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.networkSecurityServerTlsPolicyServerCertificateCertificateProviderInstanceToHclTerraform = networkSecurityServerTlsPolicyServerCertificateCertificateProviderInstanceToHclTerraform;
class NetworkSecurityServerTlsPolicyServerCertificateCertificateProviderInstanceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._pluginInstance !== undefined) {
            hasAnyValues = true;
            internalValueResult.pluginInstance = this._pluginInstance;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._pluginInstance = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._pluginInstance = value.pluginInstance;
        }
    }
    get pluginInstance() {
        return this.getStringAttribute('plugin_instance');
    }
    set pluginInstance(value) {
        this._pluginInstance = value;
    }
    // Temporarily expose input value. Use with caution.
    get pluginInstanceInput() {
        return this._pluginInstance;
    }
}
exports.NetworkSecurityServerTlsPolicyServerCertificateCertificateProviderInstanceOutputReference = NetworkSecurityServerTlsPolicyServerCertificateCertificateProviderInstanceOutputReference;
_f = JSII_RTTI_SYMBOL_1;
NetworkSecurityServerTlsPolicyServerCertificateCertificateProviderInstanceOutputReference[_f] = { fqn: "@cdktf/provider-google.networkSecurityServerTlsPolicy.NetworkSecurityServerTlsPolicyServerCertificateCertificateProviderInstanceOutputReference", version: "14.13.1" };
function networkSecurityServerTlsPolicyServerCertificateGrpcEndpointToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        target_uri: cdktf.stringToTerraform(struct.targetUri),
    };
}
exports.networkSecurityServerTlsPolicyServerCertificateGrpcEndpointToTerraform = networkSecurityServerTlsPolicyServerCertificateGrpcEndpointToTerraform;
function networkSecurityServerTlsPolicyServerCertificateGrpcEndpointToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        target_uri: {
            value: cdktf.stringToHclTerraform(struct.targetUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.networkSecurityServerTlsPolicyServerCertificateGrpcEndpointToHclTerraform = networkSecurityServerTlsPolicyServerCertificateGrpcEndpointToHclTerraform;
class NetworkSecurityServerTlsPolicyServerCertificateGrpcEndpointOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._targetUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetUri = this._targetUri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._targetUri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._targetUri = value.targetUri;
        }
    }
    get targetUri() {
        return this.getStringAttribute('target_uri');
    }
    set targetUri(value) {
        this._targetUri = value;
    }
    // Temporarily expose input value. Use with caution.
    get targetUriInput() {
        return this._targetUri;
    }
}
exports.NetworkSecurityServerTlsPolicyServerCertificateGrpcEndpointOutputReference = NetworkSecurityServerTlsPolicyServerCertificateGrpcEndpointOutputReference;
_g = JSII_RTTI_SYMBOL_1;
NetworkSecurityServerTlsPolicyServerCertificateGrpcEndpointOutputReference[_g] = { fqn: "@cdktf/provider-google.networkSecurityServerTlsPolicy.NetworkSecurityServerTlsPolicyServerCertificateGrpcEndpointOutputReference", version: "14.13.1" };
function networkSecurityServerTlsPolicyServerCertificateToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        certificate_provider_instance: networkSecurityServerTlsPolicyServerCertificateCertificateProviderInstanceToTerraform(struct.certificateProviderInstance),
        grpc_endpoint: networkSecurityServerTlsPolicyServerCertificateGrpcEndpointToTerraform(struct.grpcEndpoint),
    };
}
exports.networkSecurityServerTlsPolicyServerCertificateToTerraform = networkSecurityServerTlsPolicyServerCertificateToTerraform;
function networkSecurityServerTlsPolicyServerCertificateToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        certificate_provider_instance: {
            value: networkSecurityServerTlsPolicyServerCertificateCertificateProviderInstanceToHclTerraform(struct.certificateProviderInstance),
            isBlock: true,
            type: "list",
            storageClassType: "NetworkSecurityServerTlsPolicyServerCertificateCertificateProviderInstanceList",
        },
        grpc_endpoint: {
            value: networkSecurityServerTlsPolicyServerCertificateGrpcEndpointToHclTerraform(struct.grpcEndpoint),
            isBlock: true,
            type: "list",
            storageClassType: "NetworkSecurityServerTlsPolicyServerCertificateGrpcEndpointList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.networkSecurityServerTlsPolicyServerCertificateToHclTerraform = networkSecurityServerTlsPolicyServerCertificateToHclTerraform;
class NetworkSecurityServerTlsPolicyServerCertificateOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // certificate_provider_instance - computed: false, optional: true, required: false
        this._certificateProviderInstance = new NetworkSecurityServerTlsPolicyServerCertificateCertificateProviderInstanceOutputReference(this, "certificate_provider_instance");
        // grpc_endpoint - computed: false, optional: true, required: false
        this._grpcEndpoint = new NetworkSecurityServerTlsPolicyServerCertificateGrpcEndpointOutputReference(this, "grpc_endpoint");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._certificateProviderInstance?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.certificateProviderInstance = this._certificateProviderInstance?.internalValue;
        }
        if (this._grpcEndpoint?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.grpcEndpoint = this._grpcEndpoint?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._certificateProviderInstance.internalValue = undefined;
            this._grpcEndpoint.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._certificateProviderInstance.internalValue = value.certificateProviderInstance;
            this._grpcEndpoint.internalValue = value.grpcEndpoint;
        }
    }
    get certificateProviderInstance() {
        return this._certificateProviderInstance;
    }
    putCertificateProviderInstance(value) {
        this._certificateProviderInstance.internalValue = value;
    }
    resetCertificateProviderInstance() {
        this._certificateProviderInstance.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get certificateProviderInstanceInput() {
        return this._certificateProviderInstance.internalValue;
    }
    get grpcEndpoint() {
        return this._grpcEndpoint;
    }
    putGrpcEndpoint(value) {
        this._grpcEndpoint.internalValue = value;
    }
    resetGrpcEndpoint() {
        this._grpcEndpoint.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get grpcEndpointInput() {
        return this._grpcEndpoint.internalValue;
    }
}
exports.NetworkSecurityServerTlsPolicyServerCertificateOutputReference = NetworkSecurityServerTlsPolicyServerCertificateOutputReference;
_h = JSII_RTTI_SYMBOL_1;
NetworkSecurityServerTlsPolicyServerCertificateOutputReference[_h] = { fqn: "@cdktf/provider-google.networkSecurityServerTlsPolicy.NetworkSecurityServerTlsPolicyServerCertificateOutputReference", version: "14.13.1" };
function networkSecurityServerTlsPolicyTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.networkSecurityServerTlsPolicyTimeoutsToTerraform = networkSecurityServerTlsPolicyTimeoutsToTerraform;
function networkSecurityServerTlsPolicyTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.networkSecurityServerTlsPolicyTimeoutsToHclTerraform = networkSecurityServerTlsPolicyTimeoutsToHclTerraform;
class NetworkSecurityServerTlsPolicyTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.NetworkSecurityServerTlsPolicyTimeoutsOutputReference = NetworkSecurityServerTlsPolicyTimeoutsOutputReference;
_j = JSII_RTTI_SYMBOL_1;
NetworkSecurityServerTlsPolicyTimeoutsOutputReference[_j] = { fqn: "@cdktf/provider-google.networkSecurityServerTlsPolicy.NetworkSecurityServerTlsPolicyTimeoutsOutputReference", version: "14.13.1" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/network_security_server_tls_policy google_network_security_server_tls_policy}
*/
class NetworkSecurityServerTlsPolicy extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a NetworkSecurityServerTlsPolicy resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the NetworkSecurityServerTlsPolicy to import
    * @param importFromId The id of the existing NetworkSecurityServerTlsPolicy that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/network_security_server_tls_policy#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the NetworkSecurityServerTlsPolicy to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_network_security_server_tls_policy", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/network_security_server_tls_policy google_network_security_server_tls_policy} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options NetworkSecurityServerTlsPolicyConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_network_security_server_tls_policy',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // effective_labels - computed: true, optional: false, required: false
        this._effectiveLabels = new cdktf.StringMap(this, "effective_labels");
        // terraform_labels - computed: true, optional: false, required: false
        this._terraformLabels = new cdktf.StringMap(this, "terraform_labels");
        // mtls_policy - computed: false, optional: true, required: false
        this._mtlsPolicy = new NetworkSecurityServerTlsPolicyMtlsPolicyOutputReference(this, "mtls_policy");
        // server_certificate - computed: false, optional: true, required: false
        this._serverCertificate = new NetworkSecurityServerTlsPolicyServerCertificateOutputReference(this, "server_certificate");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new NetworkSecurityServerTlsPolicyTimeoutsOutputReference(this, "timeouts");
        this._allowOpen = config.allowOpen;
        this._description = config.description;
        this._id = config.id;
        this._labels = config.labels;
        this._location = config.location;
        this._name = config.name;
        this._project = config.project;
        this._mtlsPolicy.internalValue = config.mtlsPolicy;
        this._serverCertificate.internalValue = config.serverCertificate;
        this._timeouts.internalValue = config.timeouts;
    }
    get allowOpen() {
        return this.getBooleanAttribute('allow_open');
    }
    set allowOpen(value) {
        this._allowOpen = value;
    }
    resetAllowOpen() {
        this._allowOpen = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowOpenInput() {
        return this._allowOpen;
    }
    // create_time - computed: true, optional: false, required: false
    get createTime() {
        return this.getStringAttribute('create_time');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get effectiveLabels() {
        return this._effectiveLabels;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    resetLocation() {
        this._location = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get terraformLabels() {
        return this._terraformLabels;
    }
    // update_time - computed: true, optional: false, required: false
    get updateTime() {
        return this.getStringAttribute('update_time');
    }
    get mtlsPolicy() {
        return this._mtlsPolicy;
    }
    putMtlsPolicy(value) {
        this._mtlsPolicy.internalValue = value;
    }
    resetMtlsPolicy() {
        this._mtlsPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mtlsPolicyInput() {
        return this._mtlsPolicy.internalValue;
    }
    get serverCertificate() {
        return this._serverCertificate;
    }
    putServerCertificate(value) {
        this._serverCertificate.internalValue = value;
    }
    resetServerCertificate() {
        this._serverCertificate.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serverCertificateInput() {
        return this._serverCertificate.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            allow_open: cdktf.booleanToTerraform(this._allowOpen),
            description: cdktf.stringToTerraform(this._description),
            id: cdktf.stringToTerraform(this._id),
            labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._labels),
            location: cdktf.stringToTerraform(this._location),
            name: cdktf.stringToTerraform(this._name),
            project: cdktf.stringToTerraform(this._project),
            mtls_policy: networkSecurityServerTlsPolicyMtlsPolicyToTerraform(this._mtlsPolicy.internalValue),
            server_certificate: networkSecurityServerTlsPolicyServerCertificateToTerraform(this._serverCertificate.internalValue),
            timeouts: networkSecurityServerTlsPolicyTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            allow_open: {
                value: cdktf.booleanToHclTerraform(this._allowOpen),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            description: {
                value: cdktf.stringToHclTerraform(this._description),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            labels: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._labels),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            location: {
                value: cdktf.stringToHclTerraform(this._location),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            name: {
                value: cdktf.stringToHclTerraform(this._name),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            project: {
                value: cdktf.stringToHclTerraform(this._project),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            mtls_policy: {
                value: networkSecurityServerTlsPolicyMtlsPolicyToHclTerraform(this._mtlsPolicy.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "NetworkSecurityServerTlsPolicyMtlsPolicyList",
            },
            server_certificate: {
                value: networkSecurityServerTlsPolicyServerCertificateToHclTerraform(this._serverCertificate.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "NetworkSecurityServerTlsPolicyServerCertificateList",
            },
            timeouts: {
                value: networkSecurityServerTlsPolicyTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "NetworkSecurityServerTlsPolicyTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.NetworkSecurityServerTlsPolicy = NetworkSecurityServerTlsPolicy;
_k = JSII_RTTI_SYMBOL_1;
NetworkSecurityServerTlsPolicy[_k] = { fqn: "@cdktf/provider-google.networkSecurityServerTlsPolicy.NetworkSecurityServerTlsPolicy", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
NetworkSecurityServerTlsPolicy.tfResourceType = "google_network_security_server_tls_policy";
//# sourceMappingURL=data:application/json;base64,