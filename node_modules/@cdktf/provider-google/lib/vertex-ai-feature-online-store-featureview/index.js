"use strict";
var _a, _b, _c, _d, _e, _f, _g;
Object.defineProperty(exports, "__esModule", { value: true });
exports.VertexAiFeatureOnlineStoreFeatureview = exports.VertexAiFeatureOnlineStoreFeatureviewTimeoutsOutputReference = exports.vertexAiFeatureOnlineStoreFeatureviewTimeoutsToHclTerraform = exports.vertexAiFeatureOnlineStoreFeatureviewTimeoutsToTerraform = exports.VertexAiFeatureOnlineStoreFeatureviewSyncConfigOutputReference = exports.vertexAiFeatureOnlineStoreFeatureviewSyncConfigToHclTerraform = exports.vertexAiFeatureOnlineStoreFeatureviewSyncConfigToTerraform = exports.VertexAiFeatureOnlineStoreFeatureviewFeatureRegistrySourceOutputReference = exports.vertexAiFeatureOnlineStoreFeatureviewFeatureRegistrySourceToHclTerraform = exports.vertexAiFeatureOnlineStoreFeatureviewFeatureRegistrySourceToTerraform = exports.VertexAiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupsList = exports.VertexAiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupsOutputReference = exports.vertexAiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupsToHclTerraform = exports.vertexAiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupsToTerraform = exports.VertexAiFeatureOnlineStoreFeatureviewBigQuerySourceOutputReference = exports.vertexAiFeatureOnlineStoreFeatureviewBigQuerySourceToHclTerraform = exports.vertexAiFeatureOnlineStoreFeatureviewBigQuerySourceToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function vertexAiFeatureOnlineStoreFeatureviewBigQuerySourceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        entity_id_columns: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.entityIdColumns),
        uri: cdktf.stringToTerraform(struct.uri),
    };
}
exports.vertexAiFeatureOnlineStoreFeatureviewBigQuerySourceToTerraform = vertexAiFeatureOnlineStoreFeatureviewBigQuerySourceToTerraform;
function vertexAiFeatureOnlineStoreFeatureviewBigQuerySourceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        entity_id_columns: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.entityIdColumns),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        uri: {
            value: cdktf.stringToHclTerraform(struct.uri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.vertexAiFeatureOnlineStoreFeatureviewBigQuerySourceToHclTerraform = vertexAiFeatureOnlineStoreFeatureviewBigQuerySourceToHclTerraform;
class VertexAiFeatureOnlineStoreFeatureviewBigQuerySourceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._entityIdColumns !== undefined) {
            hasAnyValues = true;
            internalValueResult.entityIdColumns = this._entityIdColumns;
        }
        if (this._uri !== undefined) {
            hasAnyValues = true;
            internalValueResult.uri = this._uri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._entityIdColumns = undefined;
            this._uri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._entityIdColumns = value.entityIdColumns;
            this._uri = value.uri;
        }
    }
    get entityIdColumns() {
        return this.getListAttribute('entity_id_columns');
    }
    set entityIdColumns(value) {
        this._entityIdColumns = value;
    }
    // Temporarily expose input value. Use with caution.
    get entityIdColumnsInput() {
        return this._entityIdColumns;
    }
    get uri() {
        return this.getStringAttribute('uri');
    }
    set uri(value) {
        this._uri = value;
    }
    // Temporarily expose input value. Use with caution.
    get uriInput() {
        return this._uri;
    }
}
exports.VertexAiFeatureOnlineStoreFeatureviewBigQuerySourceOutputReference = VertexAiFeatureOnlineStoreFeatureviewBigQuerySourceOutputReference;
_a = JSII_RTTI_SYMBOL_1;
VertexAiFeatureOnlineStoreFeatureviewBigQuerySourceOutputReference[_a] = { fqn: "@cdktf/provider-google.vertexAiFeatureOnlineStoreFeatureview.VertexAiFeatureOnlineStoreFeatureviewBigQuerySourceOutputReference", version: "14.13.1" };
function vertexAiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        feature_group_id: cdktf.stringToTerraform(struct.featureGroupId),
        feature_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.featureIds),
    };
}
exports.vertexAiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupsToTerraform = vertexAiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupsToTerraform;
function vertexAiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        feature_group_id: {
            value: cdktf.stringToHclTerraform(struct.featureGroupId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        feature_ids: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.featureIds),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.vertexAiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupsToHclTerraform = vertexAiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupsToHclTerraform;
class VertexAiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._featureGroupId !== undefined) {
            hasAnyValues = true;
            internalValueResult.featureGroupId = this._featureGroupId;
        }
        if (this._featureIds !== undefined) {
            hasAnyValues = true;
            internalValueResult.featureIds = this._featureIds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._featureGroupId = undefined;
            this._featureIds = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._featureGroupId = value.featureGroupId;
            this._featureIds = value.featureIds;
        }
    }
    get featureGroupId() {
        return this.getStringAttribute('feature_group_id');
    }
    set featureGroupId(value) {
        this._featureGroupId = value;
    }
    // Temporarily expose input value. Use with caution.
    get featureGroupIdInput() {
        return this._featureGroupId;
    }
    get featureIds() {
        return this.getListAttribute('feature_ids');
    }
    set featureIds(value) {
        this._featureIds = value;
    }
    // Temporarily expose input value. Use with caution.
    get featureIdsInput() {
        return this._featureIds;
    }
}
exports.VertexAiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupsOutputReference = VertexAiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupsOutputReference;
_b = JSII_RTTI_SYMBOL_1;
VertexAiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupsOutputReference[_b] = { fqn: "@cdktf/provider-google.vertexAiFeatureOnlineStoreFeatureview.VertexAiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupsOutputReference", version: "14.13.1" };
class VertexAiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new VertexAiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.VertexAiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupsList = VertexAiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupsList;
_c = JSII_RTTI_SYMBOL_1;
VertexAiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupsList[_c] = { fqn: "@cdktf/provider-google.vertexAiFeatureOnlineStoreFeatureview.VertexAiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupsList", version: "14.13.1" };
function vertexAiFeatureOnlineStoreFeatureviewFeatureRegistrySourceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        project_number: cdktf.stringToTerraform(struct.projectNumber),
        feature_groups: cdktf.listMapper(vertexAiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupsToTerraform, true)(struct.featureGroups),
    };
}
exports.vertexAiFeatureOnlineStoreFeatureviewFeatureRegistrySourceToTerraform = vertexAiFeatureOnlineStoreFeatureviewFeatureRegistrySourceToTerraform;
function vertexAiFeatureOnlineStoreFeatureviewFeatureRegistrySourceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        project_number: {
            value: cdktf.stringToHclTerraform(struct.projectNumber),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        feature_groups: {
            value: cdktf.listMapperHcl(vertexAiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupsToHclTerraform, true)(struct.featureGroups),
            isBlock: true,
            type: "list",
            storageClassType: "VertexAiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.vertexAiFeatureOnlineStoreFeatureviewFeatureRegistrySourceToHclTerraform = vertexAiFeatureOnlineStoreFeatureviewFeatureRegistrySourceToHclTerraform;
class VertexAiFeatureOnlineStoreFeatureviewFeatureRegistrySourceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // feature_groups - computed: false, optional: false, required: true
        this._featureGroups = new VertexAiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupsList(this, "feature_groups", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._projectNumber !== undefined) {
            hasAnyValues = true;
            internalValueResult.projectNumber = this._projectNumber;
        }
        if (this._featureGroups?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.featureGroups = this._featureGroups?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._projectNumber = undefined;
            this._featureGroups.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._projectNumber = value.projectNumber;
            this._featureGroups.internalValue = value.featureGroups;
        }
    }
    get projectNumber() {
        return this.getStringAttribute('project_number');
    }
    set projectNumber(value) {
        this._projectNumber = value;
    }
    resetProjectNumber() {
        this._projectNumber = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectNumberInput() {
        return this._projectNumber;
    }
    get featureGroups() {
        return this._featureGroups;
    }
    putFeatureGroups(value) {
        this._featureGroups.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get featureGroupsInput() {
        return this._featureGroups.internalValue;
    }
}
exports.VertexAiFeatureOnlineStoreFeatureviewFeatureRegistrySourceOutputReference = VertexAiFeatureOnlineStoreFeatureviewFeatureRegistrySourceOutputReference;
_d = JSII_RTTI_SYMBOL_1;
VertexAiFeatureOnlineStoreFeatureviewFeatureRegistrySourceOutputReference[_d] = { fqn: "@cdktf/provider-google.vertexAiFeatureOnlineStoreFeatureview.VertexAiFeatureOnlineStoreFeatureviewFeatureRegistrySourceOutputReference", version: "14.13.1" };
function vertexAiFeatureOnlineStoreFeatureviewSyncConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cron: cdktf.stringToTerraform(struct.cron),
    };
}
exports.vertexAiFeatureOnlineStoreFeatureviewSyncConfigToTerraform = vertexAiFeatureOnlineStoreFeatureviewSyncConfigToTerraform;
function vertexAiFeatureOnlineStoreFeatureviewSyncConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cron: {
            value: cdktf.stringToHclTerraform(struct.cron),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.vertexAiFeatureOnlineStoreFeatureviewSyncConfigToHclTerraform = vertexAiFeatureOnlineStoreFeatureviewSyncConfigToHclTerraform;
class VertexAiFeatureOnlineStoreFeatureviewSyncConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cron !== undefined) {
            hasAnyValues = true;
            internalValueResult.cron = this._cron;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cron = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cron = value.cron;
        }
    }
    get cron() {
        return this.getStringAttribute('cron');
    }
    set cron(value) {
        this._cron = value;
    }
    resetCron() {
        this._cron = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cronInput() {
        return this._cron;
    }
}
exports.VertexAiFeatureOnlineStoreFeatureviewSyncConfigOutputReference = VertexAiFeatureOnlineStoreFeatureviewSyncConfigOutputReference;
_e = JSII_RTTI_SYMBOL_1;
VertexAiFeatureOnlineStoreFeatureviewSyncConfigOutputReference[_e] = { fqn: "@cdktf/provider-google.vertexAiFeatureOnlineStoreFeatureview.VertexAiFeatureOnlineStoreFeatureviewSyncConfigOutputReference", version: "14.13.1" };
function vertexAiFeatureOnlineStoreFeatureviewTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.vertexAiFeatureOnlineStoreFeatureviewTimeoutsToTerraform = vertexAiFeatureOnlineStoreFeatureviewTimeoutsToTerraform;
function vertexAiFeatureOnlineStoreFeatureviewTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.vertexAiFeatureOnlineStoreFeatureviewTimeoutsToHclTerraform = vertexAiFeatureOnlineStoreFeatureviewTimeoutsToHclTerraform;
class VertexAiFeatureOnlineStoreFeatureviewTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.VertexAiFeatureOnlineStoreFeatureviewTimeoutsOutputReference = VertexAiFeatureOnlineStoreFeatureviewTimeoutsOutputReference;
_f = JSII_RTTI_SYMBOL_1;
VertexAiFeatureOnlineStoreFeatureviewTimeoutsOutputReference[_f] = { fqn: "@cdktf/provider-google.vertexAiFeatureOnlineStoreFeatureview.VertexAiFeatureOnlineStoreFeatureviewTimeoutsOutputReference", version: "14.13.1" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/vertex_ai_feature_online_store_featureview google_vertex_ai_feature_online_store_featureview}
*/
class VertexAiFeatureOnlineStoreFeatureview extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a VertexAiFeatureOnlineStoreFeatureview resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the VertexAiFeatureOnlineStoreFeatureview to import
    * @param importFromId The id of the existing VertexAiFeatureOnlineStoreFeatureview that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/vertex_ai_feature_online_store_featureview#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the VertexAiFeatureOnlineStoreFeatureview to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_vertex_ai_feature_online_store_featureview", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/vertex_ai_feature_online_store_featureview google_vertex_ai_feature_online_store_featureview} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options VertexAiFeatureOnlineStoreFeatureviewConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_vertex_ai_feature_online_store_featureview',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // effective_labels - computed: true, optional: false, required: false
        this._effectiveLabels = new cdktf.StringMap(this, "effective_labels");
        // terraform_labels - computed: true, optional: false, required: false
        this._terraformLabels = new cdktf.StringMap(this, "terraform_labels");
        // big_query_source - computed: false, optional: true, required: false
        this._bigQuerySource = new VertexAiFeatureOnlineStoreFeatureviewBigQuerySourceOutputReference(this, "big_query_source");
        // feature_registry_source - computed: false, optional: true, required: false
        this._featureRegistrySource = new VertexAiFeatureOnlineStoreFeatureviewFeatureRegistrySourceOutputReference(this, "feature_registry_source");
        // sync_config - computed: false, optional: true, required: false
        this._syncConfig = new VertexAiFeatureOnlineStoreFeatureviewSyncConfigOutputReference(this, "sync_config");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new VertexAiFeatureOnlineStoreFeatureviewTimeoutsOutputReference(this, "timeouts");
        this._featureOnlineStore = config.featureOnlineStore;
        this._id = config.id;
        this._labels = config.labels;
        this._name = config.name;
        this._project = config.project;
        this._region = config.region;
        this._bigQuerySource.internalValue = config.bigQuerySource;
        this._featureRegistrySource.internalValue = config.featureRegistrySource;
        this._syncConfig.internalValue = config.syncConfig;
        this._timeouts.internalValue = config.timeouts;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // create_time - computed: true, optional: false, required: false
    get createTime() {
        return this.getStringAttribute('create_time');
    }
    get effectiveLabels() {
        return this._effectiveLabels;
    }
    get featureOnlineStore() {
        return this.getStringAttribute('feature_online_store');
    }
    set featureOnlineStore(value) {
        this._featureOnlineStore = value;
    }
    // Temporarily expose input value. Use with caution.
    get featureOnlineStoreInput() {
        return this._featureOnlineStore;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get region() {
        return this.getStringAttribute('region');
    }
    set region(value) {
        this._region = value;
    }
    // Temporarily expose input value. Use with caution.
    get regionInput() {
        return this._region;
    }
    get terraformLabels() {
        return this._terraformLabels;
    }
    // update_time - computed: true, optional: false, required: false
    get updateTime() {
        return this.getStringAttribute('update_time');
    }
    get bigQuerySource() {
        return this._bigQuerySource;
    }
    putBigQuerySource(value) {
        this._bigQuerySource.internalValue = value;
    }
    resetBigQuerySource() {
        this._bigQuerySource.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bigQuerySourceInput() {
        return this._bigQuerySource.internalValue;
    }
    get featureRegistrySource() {
        return this._featureRegistrySource;
    }
    putFeatureRegistrySource(value) {
        this._featureRegistrySource.internalValue = value;
    }
    resetFeatureRegistrySource() {
        this._featureRegistrySource.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get featureRegistrySourceInput() {
        return this._featureRegistrySource.internalValue;
    }
    get syncConfig() {
        return this._syncConfig;
    }
    putSyncConfig(value) {
        this._syncConfig.internalValue = value;
    }
    resetSyncConfig() {
        this._syncConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get syncConfigInput() {
        return this._syncConfig.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            feature_online_store: cdktf.stringToTerraform(this._featureOnlineStore),
            id: cdktf.stringToTerraform(this._id),
            labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._labels),
            name: cdktf.stringToTerraform(this._name),
            project: cdktf.stringToTerraform(this._project),
            region: cdktf.stringToTerraform(this._region),
            big_query_source: vertexAiFeatureOnlineStoreFeatureviewBigQuerySourceToTerraform(this._bigQuerySource.internalValue),
            feature_registry_source: vertexAiFeatureOnlineStoreFeatureviewFeatureRegistrySourceToTerraform(this._featureRegistrySource.internalValue),
            sync_config: vertexAiFeatureOnlineStoreFeatureviewSyncConfigToTerraform(this._syncConfig.internalValue),
            timeouts: vertexAiFeatureOnlineStoreFeatureviewTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            feature_online_store: {
                value: cdktf.stringToHclTerraform(this._featureOnlineStore),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            labels: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._labels),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            name: {
                value: cdktf.stringToHclTerraform(this._name),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            project: {
                value: cdktf.stringToHclTerraform(this._project),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            region: {
                value: cdktf.stringToHclTerraform(this._region),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            big_query_source: {
                value: vertexAiFeatureOnlineStoreFeatureviewBigQuerySourceToHclTerraform(this._bigQuerySource.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "VertexAiFeatureOnlineStoreFeatureviewBigQuerySourceList",
            },
            feature_registry_source: {
                value: vertexAiFeatureOnlineStoreFeatureviewFeatureRegistrySourceToHclTerraform(this._featureRegistrySource.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "VertexAiFeatureOnlineStoreFeatureviewFeatureRegistrySourceList",
            },
            sync_config: {
                value: vertexAiFeatureOnlineStoreFeatureviewSyncConfigToHclTerraform(this._syncConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "VertexAiFeatureOnlineStoreFeatureviewSyncConfigList",
            },
            timeouts: {
                value: vertexAiFeatureOnlineStoreFeatureviewTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "VertexAiFeatureOnlineStoreFeatureviewTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.VertexAiFeatureOnlineStoreFeatureview = VertexAiFeatureOnlineStoreFeatureview;
_g = JSII_RTTI_SYMBOL_1;
VertexAiFeatureOnlineStoreFeatureview[_g] = { fqn: "@cdktf/provider-google.vertexAiFeatureOnlineStoreFeatureview.VertexAiFeatureOnlineStoreFeatureview", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
VertexAiFeatureOnlineStoreFeatureview.tfResourceType = "google_vertex_ai_feature_online_store_featureview";
//# sourceMappingURL=data:application/json;base64,