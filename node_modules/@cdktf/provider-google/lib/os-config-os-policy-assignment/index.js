"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29;
Object.defineProperty(exports, "__esModule", { value: true });
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileRemoteToTerraform = exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileGcsOutputReference = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileGcsToHclTerraform = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileGcsToTerraform = exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecOutputReference = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecToHclTerraform = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecToTerraform = exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateOutputReference = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateToHclTerraform = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateToTerraform = exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileOutputReference = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileToHclTerraform = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileToTerraform = exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileRemoteOutputReference = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileRemoteToHclTerraform = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileRemoteToTerraform = exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileGcsOutputReference = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileGcsToHclTerraform = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileGcsToTerraform = exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceOutputReference = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceToHclTerraform = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceToTerraform = exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileOutputReference = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileToHclTerraform = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileToTerraform = exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileRemoteOutputReference = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileRemoteToHclTerraform = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileRemoteToTerraform = exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileGcsOutputReference = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileGcsToHclTerraform = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileGcsToTerraform = exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsInventoryFiltersList = exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsInventoryFiltersOutputReference = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsInventoryFiltersToHclTerraform = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsInventoryFiltersToTerraform = exports.OsConfigOsPolicyAssignmentInstanceFilterOutputReference = exports.osConfigOsPolicyAssignmentInstanceFilterToHclTerraform = exports.osConfigOsPolicyAssignmentInstanceFilterToTerraform = exports.OsConfigOsPolicyAssignmentInstanceFilterInventoriesList = exports.OsConfigOsPolicyAssignmentInstanceFilterInventoriesOutputReference = exports.osConfigOsPolicyAssignmentInstanceFilterInventoriesToHclTerraform = exports.osConfigOsPolicyAssignmentInstanceFilterInventoriesToTerraform = exports.OsConfigOsPolicyAssignmentInstanceFilterInclusionLabelsList = exports.OsConfigOsPolicyAssignmentInstanceFilterInclusionLabelsOutputReference = exports.osConfigOsPolicyAssignmentInstanceFilterInclusionLabelsToHclTerraform = exports.osConfigOsPolicyAssignmentInstanceFilterInclusionLabelsToTerraform = exports.OsConfigOsPolicyAssignmentInstanceFilterExclusionLabelsList = exports.OsConfigOsPolicyAssignmentInstanceFilterExclusionLabelsOutputReference = exports.osConfigOsPolicyAssignmentInstanceFilterExclusionLabelsToHclTerraform = exports.osConfigOsPolicyAssignmentInstanceFilterExclusionLabelsToTerraform = void 0;
exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmOutputReference = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmToHclTerraform = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmToTerraform = exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceOutputReference = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceToHclTerraform = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceToTerraform = exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceRemoteOutputReference = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceRemoteToHclTerraform = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceRemoteToTerraform = exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceGcsOutputReference = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceGcsToHclTerraform = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceGcsToTerraform = exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiOutputReference = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiToHclTerraform = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiToTerraform = exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceOutputReference = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceToHclTerraform = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceToTerraform = exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceRemoteOutputReference = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceRemoteToHclTerraform = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceRemoteToTerraform = exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceGcsOutputReference = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceGcsToHclTerraform = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceGcsToTerraform = exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgGoogetOutputReference = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgGoogetToHclTerraform = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgGoogetToTerraform = exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebOutputReference = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebToHclTerraform = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebToTerraform = exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceOutputReference = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceToHclTerraform = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceToTerraform = exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceRemoteOutputReference = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceRemoteToHclTerraform = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceRemoteToTerraform = exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceGcsOutputReference = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceGcsToHclTerraform = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceGcsToTerraform = exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgAptOutputReference = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgAptToHclTerraform = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgAptToTerraform = exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileOutputReference = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileToHclTerraform = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileToTerraform = exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileOutputReference = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileToHclTerraform = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileToTerraform = exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileRemoteOutputReference = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileRemoteToHclTerraform = void 0;
exports.OsConfigOsPolicyAssignment = exports.OsConfigOsPolicyAssignmentTimeoutsOutputReference = exports.osConfigOsPolicyAssignmentTimeoutsToHclTerraform = exports.osConfigOsPolicyAssignmentTimeoutsToTerraform = exports.OsConfigOsPolicyAssignmentRolloutOutputReference = exports.osConfigOsPolicyAssignmentRolloutToHclTerraform = exports.osConfigOsPolicyAssignmentRolloutToTerraform = exports.OsConfigOsPolicyAssignmentRolloutDisruptionBudgetOutputReference = exports.osConfigOsPolicyAssignmentRolloutDisruptionBudgetToHclTerraform = exports.osConfigOsPolicyAssignmentRolloutDisruptionBudgetToTerraform = exports.OsConfigOsPolicyAssignmentOsPoliciesList = exports.OsConfigOsPolicyAssignmentOsPoliciesOutputReference = exports.osConfigOsPolicyAssignmentOsPoliciesToHclTerraform = exports.osConfigOsPolicyAssignmentOsPoliciesToTerraform = exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsList = exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsOutputReference = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsToHclTerraform = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsToTerraform = exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesList = exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesOutputReference = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesToHclTerraform = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesToTerraform = exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryOutputReference = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryToHclTerraform = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryToTerraform = exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryZypperOutputReference = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryZypperToHclTerraform = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryZypperToTerraform = exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryYumOutputReference = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryYumToHclTerraform = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryYumToTerraform = exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryGooOutputReference = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryGooToHclTerraform = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryGooToTerraform = exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryAptOutputReference = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryAptToHclTerraform = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryAptToTerraform = exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgOutputReference = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgToHclTerraform = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgToTerraform = exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgZypperOutputReference = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgZypperToHclTerraform = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgZypperToTerraform = exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgYumOutputReference = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgYumToHclTerraform = exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgYumToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function osConfigOsPolicyAssignmentInstanceFilterExclusionLabelsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        labels: cdktf.hashMapper(cdktf.stringToTerraform)(struct.labels),
    };
}
exports.osConfigOsPolicyAssignmentInstanceFilterExclusionLabelsToTerraform = osConfigOsPolicyAssignmentInstanceFilterExclusionLabelsToTerraform;
function osConfigOsPolicyAssignmentInstanceFilterExclusionLabelsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        labels: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.labels),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.osConfigOsPolicyAssignmentInstanceFilterExclusionLabelsToHclTerraform = osConfigOsPolicyAssignmentInstanceFilterExclusionLabelsToHclTerraform;
class OsConfigOsPolicyAssignmentInstanceFilterExclusionLabelsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._labels !== undefined) {
            hasAnyValues = true;
            internalValueResult.labels = this._labels;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._labels = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._labels = value.labels;
        }
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
}
exports.OsConfigOsPolicyAssignmentInstanceFilterExclusionLabelsOutputReference = OsConfigOsPolicyAssignmentInstanceFilterExclusionLabelsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentInstanceFilterExclusionLabelsOutputReference[_a] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentInstanceFilterExclusionLabelsOutputReference", version: "14.13.1" };
class OsConfigOsPolicyAssignmentInstanceFilterExclusionLabelsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new OsConfigOsPolicyAssignmentInstanceFilterExclusionLabelsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.OsConfigOsPolicyAssignmentInstanceFilterExclusionLabelsList = OsConfigOsPolicyAssignmentInstanceFilterExclusionLabelsList;
_b = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentInstanceFilterExclusionLabelsList[_b] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentInstanceFilterExclusionLabelsList", version: "14.13.1" };
function osConfigOsPolicyAssignmentInstanceFilterInclusionLabelsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        labels: cdktf.hashMapper(cdktf.stringToTerraform)(struct.labels),
    };
}
exports.osConfigOsPolicyAssignmentInstanceFilterInclusionLabelsToTerraform = osConfigOsPolicyAssignmentInstanceFilterInclusionLabelsToTerraform;
function osConfigOsPolicyAssignmentInstanceFilterInclusionLabelsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        labels: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.labels),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.osConfigOsPolicyAssignmentInstanceFilterInclusionLabelsToHclTerraform = osConfigOsPolicyAssignmentInstanceFilterInclusionLabelsToHclTerraform;
class OsConfigOsPolicyAssignmentInstanceFilterInclusionLabelsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._labels !== undefined) {
            hasAnyValues = true;
            internalValueResult.labels = this._labels;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._labels = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._labels = value.labels;
        }
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
}
exports.OsConfigOsPolicyAssignmentInstanceFilterInclusionLabelsOutputReference = OsConfigOsPolicyAssignmentInstanceFilterInclusionLabelsOutputReference;
_c = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentInstanceFilterInclusionLabelsOutputReference[_c] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentInstanceFilterInclusionLabelsOutputReference", version: "14.13.1" };
class OsConfigOsPolicyAssignmentInstanceFilterInclusionLabelsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new OsConfigOsPolicyAssignmentInstanceFilterInclusionLabelsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.OsConfigOsPolicyAssignmentInstanceFilterInclusionLabelsList = OsConfigOsPolicyAssignmentInstanceFilterInclusionLabelsList;
_d = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentInstanceFilterInclusionLabelsList[_d] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentInstanceFilterInclusionLabelsList", version: "14.13.1" };
function osConfigOsPolicyAssignmentInstanceFilterInventoriesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        os_short_name: cdktf.stringToTerraform(struct.osShortName),
        os_version: cdktf.stringToTerraform(struct.osVersion),
    };
}
exports.osConfigOsPolicyAssignmentInstanceFilterInventoriesToTerraform = osConfigOsPolicyAssignmentInstanceFilterInventoriesToTerraform;
function osConfigOsPolicyAssignmentInstanceFilterInventoriesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        os_short_name: {
            value: cdktf.stringToHclTerraform(struct.osShortName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        os_version: {
            value: cdktf.stringToHclTerraform(struct.osVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.osConfigOsPolicyAssignmentInstanceFilterInventoriesToHclTerraform = osConfigOsPolicyAssignmentInstanceFilterInventoriesToHclTerraform;
class OsConfigOsPolicyAssignmentInstanceFilterInventoriesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._osShortName !== undefined) {
            hasAnyValues = true;
            internalValueResult.osShortName = this._osShortName;
        }
        if (this._osVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.osVersion = this._osVersion;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._osShortName = undefined;
            this._osVersion = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._osShortName = value.osShortName;
            this._osVersion = value.osVersion;
        }
    }
    get osShortName() {
        return this.getStringAttribute('os_short_name');
    }
    set osShortName(value) {
        this._osShortName = value;
    }
    // Temporarily expose input value. Use with caution.
    get osShortNameInput() {
        return this._osShortName;
    }
    get osVersion() {
        return this.getStringAttribute('os_version');
    }
    set osVersion(value) {
        this._osVersion = value;
    }
    resetOsVersion() {
        this._osVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get osVersionInput() {
        return this._osVersion;
    }
}
exports.OsConfigOsPolicyAssignmentInstanceFilterInventoriesOutputReference = OsConfigOsPolicyAssignmentInstanceFilterInventoriesOutputReference;
_e = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentInstanceFilterInventoriesOutputReference[_e] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentInstanceFilterInventoriesOutputReference", version: "14.13.1" };
class OsConfigOsPolicyAssignmentInstanceFilterInventoriesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new OsConfigOsPolicyAssignmentInstanceFilterInventoriesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.OsConfigOsPolicyAssignmentInstanceFilterInventoriesList = OsConfigOsPolicyAssignmentInstanceFilterInventoriesList;
_f = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentInstanceFilterInventoriesList[_f] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentInstanceFilterInventoriesList", version: "14.13.1" };
function osConfigOsPolicyAssignmentInstanceFilterToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        all: cdktf.booleanToTerraform(struct.all),
        exclusion_labels: cdktf.listMapper(osConfigOsPolicyAssignmentInstanceFilterExclusionLabelsToTerraform, true)(struct.exclusionLabels),
        inclusion_labels: cdktf.listMapper(osConfigOsPolicyAssignmentInstanceFilterInclusionLabelsToTerraform, true)(struct.inclusionLabels),
        inventories: cdktf.listMapper(osConfigOsPolicyAssignmentInstanceFilterInventoriesToTerraform, true)(struct.inventories),
    };
}
exports.osConfigOsPolicyAssignmentInstanceFilterToTerraform = osConfigOsPolicyAssignmentInstanceFilterToTerraform;
function osConfigOsPolicyAssignmentInstanceFilterToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        all: {
            value: cdktf.booleanToHclTerraform(struct.all),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        exclusion_labels: {
            value: cdktf.listMapperHcl(osConfigOsPolicyAssignmentInstanceFilterExclusionLabelsToHclTerraform, true)(struct.exclusionLabels),
            isBlock: true,
            type: "list",
            storageClassType: "OsConfigOsPolicyAssignmentInstanceFilterExclusionLabelsList",
        },
        inclusion_labels: {
            value: cdktf.listMapperHcl(osConfigOsPolicyAssignmentInstanceFilterInclusionLabelsToHclTerraform, true)(struct.inclusionLabels),
            isBlock: true,
            type: "list",
            storageClassType: "OsConfigOsPolicyAssignmentInstanceFilterInclusionLabelsList",
        },
        inventories: {
            value: cdktf.listMapperHcl(osConfigOsPolicyAssignmentInstanceFilterInventoriesToHclTerraform, true)(struct.inventories),
            isBlock: true,
            type: "list",
            storageClassType: "OsConfigOsPolicyAssignmentInstanceFilterInventoriesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.osConfigOsPolicyAssignmentInstanceFilterToHclTerraform = osConfigOsPolicyAssignmentInstanceFilterToHclTerraform;
class OsConfigOsPolicyAssignmentInstanceFilterOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // exclusion_labels - computed: false, optional: true, required: false
        this._exclusionLabels = new OsConfigOsPolicyAssignmentInstanceFilterExclusionLabelsList(this, "exclusion_labels", false);
        // inclusion_labels - computed: false, optional: true, required: false
        this._inclusionLabels = new OsConfigOsPolicyAssignmentInstanceFilterInclusionLabelsList(this, "inclusion_labels", false);
        // inventories - computed: false, optional: true, required: false
        this._inventories = new OsConfigOsPolicyAssignmentInstanceFilterInventoriesList(this, "inventories", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._all !== undefined) {
            hasAnyValues = true;
            internalValueResult.all = this._all;
        }
        if (this._exclusionLabels?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.exclusionLabels = this._exclusionLabels?.internalValue;
        }
        if (this._inclusionLabels?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.inclusionLabels = this._inclusionLabels?.internalValue;
        }
        if (this._inventories?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.inventories = this._inventories?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._all = undefined;
            this._exclusionLabels.internalValue = undefined;
            this._inclusionLabels.internalValue = undefined;
            this._inventories.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._all = value.all;
            this._exclusionLabels.internalValue = value.exclusionLabels;
            this._inclusionLabels.internalValue = value.inclusionLabels;
            this._inventories.internalValue = value.inventories;
        }
    }
    get all() {
        return this.getBooleanAttribute('all');
    }
    set all(value) {
        this._all = value;
    }
    resetAll() {
        this._all = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allInput() {
        return this._all;
    }
    get exclusionLabels() {
        return this._exclusionLabels;
    }
    putExclusionLabels(value) {
        this._exclusionLabels.internalValue = value;
    }
    resetExclusionLabels() {
        this._exclusionLabels.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get exclusionLabelsInput() {
        return this._exclusionLabels.internalValue;
    }
    get inclusionLabels() {
        return this._inclusionLabels;
    }
    putInclusionLabels(value) {
        this._inclusionLabels.internalValue = value;
    }
    resetInclusionLabels() {
        this._inclusionLabels.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inclusionLabelsInput() {
        return this._inclusionLabels.internalValue;
    }
    get inventories() {
        return this._inventories;
    }
    putInventories(value) {
        this._inventories.internalValue = value;
    }
    resetInventories() {
        this._inventories.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inventoriesInput() {
        return this._inventories.internalValue;
    }
}
exports.OsConfigOsPolicyAssignmentInstanceFilterOutputReference = OsConfigOsPolicyAssignmentInstanceFilterOutputReference;
_g = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentInstanceFilterOutputReference[_g] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentInstanceFilterOutputReference", version: "14.13.1" };
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsInventoryFiltersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        os_short_name: cdktf.stringToTerraform(struct.osShortName),
        os_version: cdktf.stringToTerraform(struct.osVersion),
    };
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsInventoryFiltersToTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsInventoryFiltersToTerraform;
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsInventoryFiltersToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        os_short_name: {
            value: cdktf.stringToHclTerraform(struct.osShortName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        os_version: {
            value: cdktf.stringToHclTerraform(struct.osVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsInventoryFiltersToHclTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsInventoryFiltersToHclTerraform;
class OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsInventoryFiltersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._osShortName !== undefined) {
            hasAnyValues = true;
            internalValueResult.osShortName = this._osShortName;
        }
        if (this._osVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.osVersion = this._osVersion;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._osShortName = undefined;
            this._osVersion = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._osShortName = value.osShortName;
            this._osVersion = value.osVersion;
        }
    }
    get osShortName() {
        return this.getStringAttribute('os_short_name');
    }
    set osShortName(value) {
        this._osShortName = value;
    }
    // Temporarily expose input value. Use with caution.
    get osShortNameInput() {
        return this._osShortName;
    }
    get osVersion() {
        return this.getStringAttribute('os_version');
    }
    set osVersion(value) {
        this._osVersion = value;
    }
    resetOsVersion() {
        this._osVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get osVersionInput() {
        return this._osVersion;
    }
}
exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsInventoryFiltersOutputReference = OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsInventoryFiltersOutputReference;
_h = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsInventoryFiltersOutputReference[_h] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsInventoryFiltersOutputReference", version: "14.13.1" };
class OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsInventoryFiltersList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsInventoryFiltersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsInventoryFiltersList = OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsInventoryFiltersList;
_j = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsInventoryFiltersList[_j] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsInventoryFiltersList", version: "14.13.1" };
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileGcsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket: cdktf.stringToTerraform(struct.bucket),
        generation: cdktf.numberToTerraform(struct.generation),
        object: cdktf.stringToTerraform(struct.object),
    };
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileGcsToTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileGcsToTerraform;
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileGcsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        bucket: {
            value: cdktf.stringToHclTerraform(struct.bucket),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        generation: {
            value: cdktf.numberToHclTerraform(struct.generation),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        object: {
            value: cdktf.stringToHclTerraform(struct.object),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileGcsToHclTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileGcsToHclTerraform;
class OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileGcsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucket !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucket = this._bucket;
        }
        if (this._generation !== undefined) {
            hasAnyValues = true;
            internalValueResult.generation = this._generation;
        }
        if (this._object !== undefined) {
            hasAnyValues = true;
            internalValueResult.object = this._object;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucket = undefined;
            this._generation = undefined;
            this._object = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucket = value.bucket;
            this._generation = value.generation;
            this._object = value.object;
        }
    }
    get bucket() {
        return this.getStringAttribute('bucket');
    }
    set bucket(value) {
        this._bucket = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketInput() {
        return this._bucket;
    }
    get generation() {
        return this.getNumberAttribute('generation');
    }
    set generation(value) {
        this._generation = value;
    }
    resetGeneration() {
        this._generation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get generationInput() {
        return this._generation;
    }
    get object() {
        return this.getStringAttribute('object');
    }
    set object(value) {
        this._object = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectInput() {
        return this._object;
    }
}
exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileGcsOutputReference = OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileGcsOutputReference;
_k = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileGcsOutputReference[_k] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileGcsOutputReference", version: "14.13.1" };
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileRemoteToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        sha256_checksum: cdktf.stringToTerraform(struct.sha256Checksum),
        uri: cdktf.stringToTerraform(struct.uri),
    };
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileRemoteToTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileRemoteToTerraform;
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileRemoteToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        sha256_checksum: {
            value: cdktf.stringToHclTerraform(struct.sha256Checksum),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        uri: {
            value: cdktf.stringToHclTerraform(struct.uri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileRemoteToHclTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileRemoteToHclTerraform;
class OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileRemoteOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._sha256Checksum !== undefined) {
            hasAnyValues = true;
            internalValueResult.sha256Checksum = this._sha256Checksum;
        }
        if (this._uri !== undefined) {
            hasAnyValues = true;
            internalValueResult.uri = this._uri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._sha256Checksum = undefined;
            this._uri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._sha256Checksum = value.sha256Checksum;
            this._uri = value.uri;
        }
    }
    get sha256Checksum() {
        return this.getStringAttribute('sha256_checksum');
    }
    set sha256Checksum(value) {
        this._sha256Checksum = value;
    }
    resetSha256Checksum() {
        this._sha256Checksum = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sha256ChecksumInput() {
        return this._sha256Checksum;
    }
    get uri() {
        return this.getStringAttribute('uri');
    }
    set uri(value) {
        this._uri = value;
    }
    // Temporarily expose input value. Use with caution.
    get uriInput() {
        return this._uri;
    }
}
exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileRemoteOutputReference = OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileRemoteOutputReference;
_l = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileRemoteOutputReference[_l] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileRemoteOutputReference", version: "14.13.1" };
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allow_insecure: cdktf.booleanToTerraform(struct.allowInsecure),
        local_path: cdktf.stringToTerraform(struct.localPath),
        gcs: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileGcsToTerraform(struct.gcs),
        remote: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileRemoteToTerraform(struct.remote),
    };
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileToTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileToTerraform;
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        allow_insecure: {
            value: cdktf.booleanToHclTerraform(struct.allowInsecure),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        local_path: {
            value: cdktf.stringToHclTerraform(struct.localPath),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        gcs: {
            value: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileGcsToHclTerraform(struct.gcs),
            isBlock: true,
            type: "list",
            storageClassType: "OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileGcsList",
        },
        remote: {
            value: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileRemoteToHclTerraform(struct.remote),
            isBlock: true,
            type: "list",
            storageClassType: "OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileRemoteList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileToHclTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileToHclTerraform;
class OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // gcs - computed: false, optional: true, required: false
        this._gcs = new OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileGcsOutputReference(this, "gcs");
        // remote - computed: false, optional: true, required: false
        this._remote = new OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileRemoteOutputReference(this, "remote");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowInsecure !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowInsecure = this._allowInsecure;
        }
        if (this._localPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.localPath = this._localPath;
        }
        if (this._gcs?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.gcs = this._gcs?.internalValue;
        }
        if (this._remote?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.remote = this._remote?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowInsecure = undefined;
            this._localPath = undefined;
            this._gcs.internalValue = undefined;
            this._remote.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowInsecure = value.allowInsecure;
            this._localPath = value.localPath;
            this._gcs.internalValue = value.gcs;
            this._remote.internalValue = value.remote;
        }
    }
    get allowInsecure() {
        return this.getBooleanAttribute('allow_insecure');
    }
    set allowInsecure(value) {
        this._allowInsecure = value;
    }
    resetAllowInsecure() {
        this._allowInsecure = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowInsecureInput() {
        return this._allowInsecure;
    }
    get localPath() {
        return this.getStringAttribute('local_path');
    }
    set localPath(value) {
        this._localPath = value;
    }
    resetLocalPath() {
        this._localPath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get localPathInput() {
        return this._localPath;
    }
    get gcs() {
        return this._gcs;
    }
    putGcs(value) {
        this._gcs.internalValue = value;
    }
    resetGcs() {
        this._gcs.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gcsInput() {
        return this._gcs.internalValue;
    }
    get remote() {
        return this._remote;
    }
    putRemote(value) {
        this._remote.internalValue = value;
    }
    resetRemote() {
        this._remote.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get remoteInput() {
        return this._remote.internalValue;
    }
}
exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileOutputReference = OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileOutputReference;
_m = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileOutputReference[_m] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileOutputReference", version: "14.13.1" };
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        args: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.args),
        interpreter: cdktf.stringToTerraform(struct.interpreter),
        output_file_path: cdktf.stringToTerraform(struct.outputFilePath),
        script: cdktf.stringToTerraform(struct.script),
        file: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileToTerraform(struct.file),
    };
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceToTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceToTerraform;
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        args: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.args),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        interpreter: {
            value: cdktf.stringToHclTerraform(struct.interpreter),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        output_file_path: {
            value: cdktf.stringToHclTerraform(struct.outputFilePath),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        script: {
            value: cdktf.stringToHclTerraform(struct.script),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        file: {
            value: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileToHclTerraform(struct.file),
            isBlock: true,
            type: "list",
            storageClassType: "OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceToHclTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceToHclTerraform;
class OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // file - computed: false, optional: true, required: false
        this._file = new OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceFileOutputReference(this, "file");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._args !== undefined) {
            hasAnyValues = true;
            internalValueResult.args = this._args;
        }
        if (this._interpreter !== undefined) {
            hasAnyValues = true;
            internalValueResult.interpreter = this._interpreter;
        }
        if (this._outputFilePath !== undefined) {
            hasAnyValues = true;
            internalValueResult.outputFilePath = this._outputFilePath;
        }
        if (this._script !== undefined) {
            hasAnyValues = true;
            internalValueResult.script = this._script;
        }
        if (this._file?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.file = this._file?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._args = undefined;
            this._interpreter = undefined;
            this._outputFilePath = undefined;
            this._script = undefined;
            this._file.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._args = value.args;
            this._interpreter = value.interpreter;
            this._outputFilePath = value.outputFilePath;
            this._script = value.script;
            this._file.internalValue = value.file;
        }
    }
    get args() {
        return this.getListAttribute('args');
    }
    set args(value) {
        this._args = value;
    }
    resetArgs() {
        this._args = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get argsInput() {
        return this._args;
    }
    get interpreter() {
        return this.getStringAttribute('interpreter');
    }
    set interpreter(value) {
        this._interpreter = value;
    }
    // Temporarily expose input value. Use with caution.
    get interpreterInput() {
        return this._interpreter;
    }
    get outputFilePath() {
        return this.getStringAttribute('output_file_path');
    }
    set outputFilePath(value) {
        this._outputFilePath = value;
    }
    resetOutputFilePath() {
        this._outputFilePath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get outputFilePathInput() {
        return this._outputFilePath;
    }
    get script() {
        return this.getStringAttribute('script');
    }
    set script(value) {
        this._script = value;
    }
    resetScript() {
        this._script = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scriptInput() {
        return this._script;
    }
    get file() {
        return this._file;
    }
    putFile(value) {
        this._file.internalValue = value;
    }
    resetFile() {
        this._file.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fileInput() {
        return this._file.internalValue;
    }
}
exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceOutputReference = OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceOutputReference;
_o = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceOutputReference[_o] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceOutputReference", version: "14.13.1" };
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileGcsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket: cdktf.stringToTerraform(struct.bucket),
        generation: cdktf.numberToTerraform(struct.generation),
        object: cdktf.stringToTerraform(struct.object),
    };
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileGcsToTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileGcsToTerraform;
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileGcsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        bucket: {
            value: cdktf.stringToHclTerraform(struct.bucket),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        generation: {
            value: cdktf.numberToHclTerraform(struct.generation),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        object: {
            value: cdktf.stringToHclTerraform(struct.object),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileGcsToHclTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileGcsToHclTerraform;
class OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileGcsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucket !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucket = this._bucket;
        }
        if (this._generation !== undefined) {
            hasAnyValues = true;
            internalValueResult.generation = this._generation;
        }
        if (this._object !== undefined) {
            hasAnyValues = true;
            internalValueResult.object = this._object;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucket = undefined;
            this._generation = undefined;
            this._object = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucket = value.bucket;
            this._generation = value.generation;
            this._object = value.object;
        }
    }
    get bucket() {
        return this.getStringAttribute('bucket');
    }
    set bucket(value) {
        this._bucket = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketInput() {
        return this._bucket;
    }
    get generation() {
        return this.getNumberAttribute('generation');
    }
    set generation(value) {
        this._generation = value;
    }
    resetGeneration() {
        this._generation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get generationInput() {
        return this._generation;
    }
    get object() {
        return this.getStringAttribute('object');
    }
    set object(value) {
        this._object = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectInput() {
        return this._object;
    }
}
exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileGcsOutputReference = OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileGcsOutputReference;
_p = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileGcsOutputReference[_p] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileGcsOutputReference", version: "14.13.1" };
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileRemoteToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        sha256_checksum: cdktf.stringToTerraform(struct.sha256Checksum),
        uri: cdktf.stringToTerraform(struct.uri),
    };
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileRemoteToTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileRemoteToTerraform;
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileRemoteToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        sha256_checksum: {
            value: cdktf.stringToHclTerraform(struct.sha256Checksum),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        uri: {
            value: cdktf.stringToHclTerraform(struct.uri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileRemoteToHclTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileRemoteToHclTerraform;
class OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileRemoteOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._sha256Checksum !== undefined) {
            hasAnyValues = true;
            internalValueResult.sha256Checksum = this._sha256Checksum;
        }
        if (this._uri !== undefined) {
            hasAnyValues = true;
            internalValueResult.uri = this._uri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._sha256Checksum = undefined;
            this._uri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._sha256Checksum = value.sha256Checksum;
            this._uri = value.uri;
        }
    }
    get sha256Checksum() {
        return this.getStringAttribute('sha256_checksum');
    }
    set sha256Checksum(value) {
        this._sha256Checksum = value;
    }
    resetSha256Checksum() {
        this._sha256Checksum = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sha256ChecksumInput() {
        return this._sha256Checksum;
    }
    get uri() {
        return this.getStringAttribute('uri');
    }
    set uri(value) {
        this._uri = value;
    }
    // Temporarily expose input value. Use with caution.
    get uriInput() {
        return this._uri;
    }
}
exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileRemoteOutputReference = OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileRemoteOutputReference;
_q = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileRemoteOutputReference[_q] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileRemoteOutputReference", version: "14.13.1" };
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allow_insecure: cdktf.booleanToTerraform(struct.allowInsecure),
        local_path: cdktf.stringToTerraform(struct.localPath),
        gcs: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileGcsToTerraform(struct.gcs),
        remote: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileRemoteToTerraform(struct.remote),
    };
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileToTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileToTerraform;
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        allow_insecure: {
            value: cdktf.booleanToHclTerraform(struct.allowInsecure),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        local_path: {
            value: cdktf.stringToHclTerraform(struct.localPath),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        gcs: {
            value: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileGcsToHclTerraform(struct.gcs),
            isBlock: true,
            type: "list",
            storageClassType: "OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileGcsList",
        },
        remote: {
            value: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileRemoteToHclTerraform(struct.remote),
            isBlock: true,
            type: "list",
            storageClassType: "OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileRemoteList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileToHclTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileToHclTerraform;
class OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // gcs - computed: false, optional: true, required: false
        this._gcs = new OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileGcsOutputReference(this, "gcs");
        // remote - computed: false, optional: true, required: false
        this._remote = new OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileRemoteOutputReference(this, "remote");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowInsecure !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowInsecure = this._allowInsecure;
        }
        if (this._localPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.localPath = this._localPath;
        }
        if (this._gcs?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.gcs = this._gcs?.internalValue;
        }
        if (this._remote?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.remote = this._remote?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowInsecure = undefined;
            this._localPath = undefined;
            this._gcs.internalValue = undefined;
            this._remote.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowInsecure = value.allowInsecure;
            this._localPath = value.localPath;
            this._gcs.internalValue = value.gcs;
            this._remote.internalValue = value.remote;
        }
    }
    get allowInsecure() {
        return this.getBooleanAttribute('allow_insecure');
    }
    set allowInsecure(value) {
        this._allowInsecure = value;
    }
    resetAllowInsecure() {
        this._allowInsecure = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowInsecureInput() {
        return this._allowInsecure;
    }
    get localPath() {
        return this.getStringAttribute('local_path');
    }
    set localPath(value) {
        this._localPath = value;
    }
    resetLocalPath() {
        this._localPath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get localPathInput() {
        return this._localPath;
    }
    get gcs() {
        return this._gcs;
    }
    putGcs(value) {
        this._gcs.internalValue = value;
    }
    resetGcs() {
        this._gcs.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gcsInput() {
        return this._gcs.internalValue;
    }
    get remote() {
        return this._remote;
    }
    putRemote(value) {
        this._remote.internalValue = value;
    }
    resetRemote() {
        this._remote.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get remoteInput() {
        return this._remote.internalValue;
    }
}
exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileOutputReference = OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileOutputReference;
_r = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileOutputReference[_r] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileOutputReference", version: "14.13.1" };
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        args: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.args),
        interpreter: cdktf.stringToTerraform(struct.interpreter),
        output_file_path: cdktf.stringToTerraform(struct.outputFilePath),
        script: cdktf.stringToTerraform(struct.script),
        file: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileToTerraform(struct.file),
    };
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateToTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateToTerraform;
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        args: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.args),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        interpreter: {
            value: cdktf.stringToHclTerraform(struct.interpreter),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        output_file_path: {
            value: cdktf.stringToHclTerraform(struct.outputFilePath),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        script: {
            value: cdktf.stringToHclTerraform(struct.script),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        file: {
            value: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileToHclTerraform(struct.file),
            isBlock: true,
            type: "list",
            storageClassType: "OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateToHclTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateToHclTerraform;
class OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // file - computed: false, optional: true, required: false
        this._file = new OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateFileOutputReference(this, "file");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._args !== undefined) {
            hasAnyValues = true;
            internalValueResult.args = this._args;
        }
        if (this._interpreter !== undefined) {
            hasAnyValues = true;
            internalValueResult.interpreter = this._interpreter;
        }
        if (this._outputFilePath !== undefined) {
            hasAnyValues = true;
            internalValueResult.outputFilePath = this._outputFilePath;
        }
        if (this._script !== undefined) {
            hasAnyValues = true;
            internalValueResult.script = this._script;
        }
        if (this._file?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.file = this._file?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._args = undefined;
            this._interpreter = undefined;
            this._outputFilePath = undefined;
            this._script = undefined;
            this._file.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._args = value.args;
            this._interpreter = value.interpreter;
            this._outputFilePath = value.outputFilePath;
            this._script = value.script;
            this._file.internalValue = value.file;
        }
    }
    get args() {
        return this.getListAttribute('args');
    }
    set args(value) {
        this._args = value;
    }
    resetArgs() {
        this._args = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get argsInput() {
        return this._args;
    }
    get interpreter() {
        return this.getStringAttribute('interpreter');
    }
    set interpreter(value) {
        this._interpreter = value;
    }
    // Temporarily expose input value. Use with caution.
    get interpreterInput() {
        return this._interpreter;
    }
    get outputFilePath() {
        return this.getStringAttribute('output_file_path');
    }
    set outputFilePath(value) {
        this._outputFilePath = value;
    }
    resetOutputFilePath() {
        this._outputFilePath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get outputFilePathInput() {
        return this._outputFilePath;
    }
    get script() {
        return this.getStringAttribute('script');
    }
    set script(value) {
        this._script = value;
    }
    resetScript() {
        this._script = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scriptInput() {
        return this._script;
    }
    get file() {
        return this._file;
    }
    putFile(value) {
        this._file.internalValue = value;
    }
    resetFile() {
        this._file.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fileInput() {
        return this._file.internalValue;
    }
}
exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateOutputReference = OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateOutputReference;
_s = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateOutputReference[_s] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateOutputReference", version: "14.13.1" };
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enforce: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceToTerraform(struct.enforce),
        validate: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateToTerraform(struct.validate),
    };
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecToTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecToTerraform;
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enforce: {
            value: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceToHclTerraform(struct.enforce),
            isBlock: true,
            type: "list",
            storageClassType: "OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceList",
        },
        validate: {
            value: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateToHclTerraform(struct.validate),
            isBlock: true,
            type: "list",
            storageClassType: "OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecToHclTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecToHclTerraform;
class OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // enforce - computed: false, optional: true, required: false
        this._enforce = new OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecEnforceOutputReference(this, "enforce");
        // validate - computed: false, optional: false, required: true
        this._validate = new OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecValidateOutputReference(this, "validate");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enforce?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.enforce = this._enforce?.internalValue;
        }
        if (this._validate?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.validate = this._validate?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enforce.internalValue = undefined;
            this._validate.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enforce.internalValue = value.enforce;
            this._validate.internalValue = value.validate;
        }
    }
    get enforce() {
        return this._enforce;
    }
    putEnforce(value) {
        this._enforce.internalValue = value;
    }
    resetEnforce() {
        this._enforce.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enforceInput() {
        return this._enforce.internalValue;
    }
    get validate() {
        return this._validate;
    }
    putValidate(value) {
        this._validate.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get validateInput() {
        return this._validate.internalValue;
    }
}
exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecOutputReference = OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecOutputReference;
_t = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecOutputReference[_t] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecOutputReference", version: "14.13.1" };
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileGcsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket: cdktf.stringToTerraform(struct.bucket),
        generation: cdktf.numberToTerraform(struct.generation),
        object: cdktf.stringToTerraform(struct.object),
    };
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileGcsToTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileGcsToTerraform;
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileGcsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        bucket: {
            value: cdktf.stringToHclTerraform(struct.bucket),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        generation: {
            value: cdktf.numberToHclTerraform(struct.generation),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        object: {
            value: cdktf.stringToHclTerraform(struct.object),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileGcsToHclTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileGcsToHclTerraform;
class OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileGcsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucket !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucket = this._bucket;
        }
        if (this._generation !== undefined) {
            hasAnyValues = true;
            internalValueResult.generation = this._generation;
        }
        if (this._object !== undefined) {
            hasAnyValues = true;
            internalValueResult.object = this._object;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucket = undefined;
            this._generation = undefined;
            this._object = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucket = value.bucket;
            this._generation = value.generation;
            this._object = value.object;
        }
    }
    get bucket() {
        return this.getStringAttribute('bucket');
    }
    set bucket(value) {
        this._bucket = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketInput() {
        return this._bucket;
    }
    get generation() {
        return this.getNumberAttribute('generation');
    }
    set generation(value) {
        this._generation = value;
    }
    resetGeneration() {
        this._generation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get generationInput() {
        return this._generation;
    }
    get object() {
        return this.getStringAttribute('object');
    }
    set object(value) {
        this._object = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectInput() {
        return this._object;
    }
}
exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileGcsOutputReference = OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileGcsOutputReference;
_u = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileGcsOutputReference[_u] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileGcsOutputReference", version: "14.13.1" };
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileRemoteToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        sha256_checksum: cdktf.stringToTerraform(struct.sha256Checksum),
        uri: cdktf.stringToTerraform(struct.uri),
    };
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileRemoteToTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileRemoteToTerraform;
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileRemoteToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        sha256_checksum: {
            value: cdktf.stringToHclTerraform(struct.sha256Checksum),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        uri: {
            value: cdktf.stringToHclTerraform(struct.uri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileRemoteToHclTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileRemoteToHclTerraform;
class OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileRemoteOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._sha256Checksum !== undefined) {
            hasAnyValues = true;
            internalValueResult.sha256Checksum = this._sha256Checksum;
        }
        if (this._uri !== undefined) {
            hasAnyValues = true;
            internalValueResult.uri = this._uri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._sha256Checksum = undefined;
            this._uri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._sha256Checksum = value.sha256Checksum;
            this._uri = value.uri;
        }
    }
    get sha256Checksum() {
        return this.getStringAttribute('sha256_checksum');
    }
    set sha256Checksum(value) {
        this._sha256Checksum = value;
    }
    resetSha256Checksum() {
        this._sha256Checksum = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sha256ChecksumInput() {
        return this._sha256Checksum;
    }
    get uri() {
        return this.getStringAttribute('uri');
    }
    set uri(value) {
        this._uri = value;
    }
    // Temporarily expose input value. Use with caution.
    get uriInput() {
        return this._uri;
    }
}
exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileRemoteOutputReference = OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileRemoteOutputReference;
_v = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileRemoteOutputReference[_v] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileRemoteOutputReference", version: "14.13.1" };
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allow_insecure: cdktf.booleanToTerraform(struct.allowInsecure),
        local_path: cdktf.stringToTerraform(struct.localPath),
        gcs: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileGcsToTerraform(struct.gcs),
        remote: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileRemoteToTerraform(struct.remote),
    };
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileToTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileToTerraform;
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        allow_insecure: {
            value: cdktf.booleanToHclTerraform(struct.allowInsecure),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        local_path: {
            value: cdktf.stringToHclTerraform(struct.localPath),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        gcs: {
            value: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileGcsToHclTerraform(struct.gcs),
            isBlock: true,
            type: "list",
            storageClassType: "OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileGcsList",
        },
        remote: {
            value: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileRemoteToHclTerraform(struct.remote),
            isBlock: true,
            type: "list",
            storageClassType: "OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileRemoteList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileToHclTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileToHclTerraform;
class OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // gcs - computed: false, optional: true, required: false
        this._gcs = new OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileGcsOutputReference(this, "gcs");
        // remote - computed: false, optional: true, required: false
        this._remote = new OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileRemoteOutputReference(this, "remote");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowInsecure !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowInsecure = this._allowInsecure;
        }
        if (this._localPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.localPath = this._localPath;
        }
        if (this._gcs?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.gcs = this._gcs?.internalValue;
        }
        if (this._remote?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.remote = this._remote?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowInsecure = undefined;
            this._localPath = undefined;
            this._gcs.internalValue = undefined;
            this._remote.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowInsecure = value.allowInsecure;
            this._localPath = value.localPath;
            this._gcs.internalValue = value.gcs;
            this._remote.internalValue = value.remote;
        }
    }
    get allowInsecure() {
        return this.getBooleanAttribute('allow_insecure');
    }
    set allowInsecure(value) {
        this._allowInsecure = value;
    }
    resetAllowInsecure() {
        this._allowInsecure = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowInsecureInput() {
        return this._allowInsecure;
    }
    get localPath() {
        return this.getStringAttribute('local_path');
    }
    set localPath(value) {
        this._localPath = value;
    }
    resetLocalPath() {
        this._localPath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get localPathInput() {
        return this._localPath;
    }
    get gcs() {
        return this._gcs;
    }
    putGcs(value) {
        this._gcs.internalValue = value;
    }
    resetGcs() {
        this._gcs.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gcsInput() {
        return this._gcs.internalValue;
    }
    get remote() {
        return this._remote;
    }
    putRemote(value) {
        this._remote.internalValue = value;
    }
    resetRemote() {
        this._remote.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get remoteInput() {
        return this._remote.internalValue;
    }
}
exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileOutputReference = OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileOutputReference;
_w = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileOutputReference[_w] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileOutputReference", version: "14.13.1" };
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        content: cdktf.stringToTerraform(struct.content),
        path: cdktf.stringToTerraform(struct.path),
        state: cdktf.stringToTerraform(struct.state),
        file: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileToTerraform(struct.file),
    };
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileToTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileToTerraform;
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        content: {
            value: cdktf.stringToHclTerraform(struct.content),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        path: {
            value: cdktf.stringToHclTerraform(struct.path),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        state: {
            value: cdktf.stringToHclTerraform(struct.state),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        file: {
            value: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileToHclTerraform(struct.file),
            isBlock: true,
            type: "list",
            storageClassType: "OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileToHclTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileToHclTerraform;
class OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // file - computed: false, optional: true, required: false
        this._file = new OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileFileOutputReference(this, "file");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._content !== undefined) {
            hasAnyValues = true;
            internalValueResult.content = this._content;
        }
        if (this._path !== undefined) {
            hasAnyValues = true;
            internalValueResult.path = this._path;
        }
        if (this._state !== undefined) {
            hasAnyValues = true;
            internalValueResult.state = this._state;
        }
        if (this._file?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.file = this._file?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._content = undefined;
            this._path = undefined;
            this._state = undefined;
            this._file.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._content = value.content;
            this._path = value.path;
            this._state = value.state;
            this._file.internalValue = value.file;
        }
    }
    get content() {
        return this.getStringAttribute('content');
    }
    set content(value) {
        this._content = value;
    }
    resetContent() {
        this._content = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get contentInput() {
        return this._content;
    }
    get path() {
        return this.getStringAttribute('path');
    }
    set path(value) {
        this._path = value;
    }
    // Temporarily expose input value. Use with caution.
    get pathInput() {
        return this._path;
    }
    // permissions - computed: true, optional: false, required: false
    get permissions() {
        return this.getStringAttribute('permissions');
    }
    get state() {
        return this.getStringAttribute('state');
    }
    set state(value) {
        this._state = value;
    }
    // Temporarily expose input value. Use with caution.
    get stateInput() {
        return this._state;
    }
    get file() {
        return this._file;
    }
    putFile(value) {
        this._file.internalValue = value;
    }
    resetFile() {
        this._file.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fileInput() {
        return this._file.internalValue;
    }
}
exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileOutputReference = OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileOutputReference;
_x = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileOutputReference[_x] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileOutputReference", version: "14.13.1" };
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgAptToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgAptToTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgAptToTerraform;
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgAptToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgAptToHclTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgAptToHclTerraform;
class OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgAptOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._name = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._name = value.name;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
}
exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgAptOutputReference = OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgAptOutputReference;
_y = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgAptOutputReference[_y] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgAptOutputReference", version: "14.13.1" };
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceGcsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket: cdktf.stringToTerraform(struct.bucket),
        generation: cdktf.numberToTerraform(struct.generation),
        object: cdktf.stringToTerraform(struct.object),
    };
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceGcsToTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceGcsToTerraform;
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceGcsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        bucket: {
            value: cdktf.stringToHclTerraform(struct.bucket),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        generation: {
            value: cdktf.numberToHclTerraform(struct.generation),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        object: {
            value: cdktf.stringToHclTerraform(struct.object),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceGcsToHclTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceGcsToHclTerraform;
class OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceGcsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucket !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucket = this._bucket;
        }
        if (this._generation !== undefined) {
            hasAnyValues = true;
            internalValueResult.generation = this._generation;
        }
        if (this._object !== undefined) {
            hasAnyValues = true;
            internalValueResult.object = this._object;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucket = undefined;
            this._generation = undefined;
            this._object = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucket = value.bucket;
            this._generation = value.generation;
            this._object = value.object;
        }
    }
    get bucket() {
        return this.getStringAttribute('bucket');
    }
    set bucket(value) {
        this._bucket = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketInput() {
        return this._bucket;
    }
    get generation() {
        return this.getNumberAttribute('generation');
    }
    set generation(value) {
        this._generation = value;
    }
    resetGeneration() {
        this._generation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get generationInput() {
        return this._generation;
    }
    get object() {
        return this.getStringAttribute('object');
    }
    set object(value) {
        this._object = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectInput() {
        return this._object;
    }
}
exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceGcsOutputReference = OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceGcsOutputReference;
_z = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceGcsOutputReference[_z] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceGcsOutputReference", version: "14.13.1" };
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceRemoteToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        sha256_checksum: cdktf.stringToTerraform(struct.sha256Checksum),
        uri: cdktf.stringToTerraform(struct.uri),
    };
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceRemoteToTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceRemoteToTerraform;
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceRemoteToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        sha256_checksum: {
            value: cdktf.stringToHclTerraform(struct.sha256Checksum),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        uri: {
            value: cdktf.stringToHclTerraform(struct.uri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceRemoteToHclTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceRemoteToHclTerraform;
class OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceRemoteOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._sha256Checksum !== undefined) {
            hasAnyValues = true;
            internalValueResult.sha256Checksum = this._sha256Checksum;
        }
        if (this._uri !== undefined) {
            hasAnyValues = true;
            internalValueResult.uri = this._uri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._sha256Checksum = undefined;
            this._uri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._sha256Checksum = value.sha256Checksum;
            this._uri = value.uri;
        }
    }
    get sha256Checksum() {
        return this.getStringAttribute('sha256_checksum');
    }
    set sha256Checksum(value) {
        this._sha256Checksum = value;
    }
    resetSha256Checksum() {
        this._sha256Checksum = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sha256ChecksumInput() {
        return this._sha256Checksum;
    }
    get uri() {
        return this.getStringAttribute('uri');
    }
    set uri(value) {
        this._uri = value;
    }
    // Temporarily expose input value. Use with caution.
    get uriInput() {
        return this._uri;
    }
}
exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceRemoteOutputReference = OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceRemoteOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceRemoteOutputReference[_0] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceRemoteOutputReference", version: "14.13.1" };
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allow_insecure: cdktf.booleanToTerraform(struct.allowInsecure),
        local_path: cdktf.stringToTerraform(struct.localPath),
        gcs: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceGcsToTerraform(struct.gcs),
        remote: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceRemoteToTerraform(struct.remote),
    };
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceToTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceToTerraform;
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        allow_insecure: {
            value: cdktf.booleanToHclTerraform(struct.allowInsecure),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        local_path: {
            value: cdktf.stringToHclTerraform(struct.localPath),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        gcs: {
            value: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceGcsToHclTerraform(struct.gcs),
            isBlock: true,
            type: "list",
            storageClassType: "OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceGcsList",
        },
        remote: {
            value: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceRemoteToHclTerraform(struct.remote),
            isBlock: true,
            type: "list",
            storageClassType: "OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceRemoteList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceToHclTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceToHclTerraform;
class OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // gcs - computed: false, optional: true, required: false
        this._gcs = new OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceGcsOutputReference(this, "gcs");
        // remote - computed: false, optional: true, required: false
        this._remote = new OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceRemoteOutputReference(this, "remote");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowInsecure !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowInsecure = this._allowInsecure;
        }
        if (this._localPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.localPath = this._localPath;
        }
        if (this._gcs?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.gcs = this._gcs?.internalValue;
        }
        if (this._remote?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.remote = this._remote?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowInsecure = undefined;
            this._localPath = undefined;
            this._gcs.internalValue = undefined;
            this._remote.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowInsecure = value.allowInsecure;
            this._localPath = value.localPath;
            this._gcs.internalValue = value.gcs;
            this._remote.internalValue = value.remote;
        }
    }
    get allowInsecure() {
        return this.getBooleanAttribute('allow_insecure');
    }
    set allowInsecure(value) {
        this._allowInsecure = value;
    }
    resetAllowInsecure() {
        this._allowInsecure = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowInsecureInput() {
        return this._allowInsecure;
    }
    get localPath() {
        return this.getStringAttribute('local_path');
    }
    set localPath(value) {
        this._localPath = value;
    }
    resetLocalPath() {
        this._localPath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get localPathInput() {
        return this._localPath;
    }
    get gcs() {
        return this._gcs;
    }
    putGcs(value) {
        this._gcs.internalValue = value;
    }
    resetGcs() {
        this._gcs.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gcsInput() {
        return this._gcs.internalValue;
    }
    get remote() {
        return this._remote;
    }
    putRemote(value) {
        this._remote.internalValue = value;
    }
    resetRemote() {
        this._remote.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get remoteInput() {
        return this._remote.internalValue;
    }
}
exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceOutputReference = OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceOutputReference;
_1 = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceOutputReference[_1] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceOutputReference", version: "14.13.1" };
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        pull_deps: cdktf.booleanToTerraform(struct.pullDeps),
        source: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceToTerraform(struct.source),
    };
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebToTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebToTerraform;
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        pull_deps: {
            value: cdktf.booleanToHclTerraform(struct.pullDeps),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        source: {
            value: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceToHclTerraform(struct.source),
            isBlock: true,
            type: "list",
            storageClassType: "OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebToHclTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebToHclTerraform;
class OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // source - computed: false, optional: false, required: true
        this._source = new OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebSourceOutputReference(this, "source");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._pullDeps !== undefined) {
            hasAnyValues = true;
            internalValueResult.pullDeps = this._pullDeps;
        }
        if (this._source?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.source = this._source?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._pullDeps = undefined;
            this._source.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._pullDeps = value.pullDeps;
            this._source.internalValue = value.source;
        }
    }
    get pullDeps() {
        return this.getBooleanAttribute('pull_deps');
    }
    set pullDeps(value) {
        this._pullDeps = value;
    }
    resetPullDeps() {
        this._pullDeps = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pullDepsInput() {
        return this._pullDeps;
    }
    get source() {
        return this._source;
    }
    putSource(value) {
        this._source.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get sourceInput() {
        return this._source.internalValue;
    }
}
exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebOutputReference = OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebOutputReference;
_2 = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebOutputReference[_2] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebOutputReference", version: "14.13.1" };
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgGoogetToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgGoogetToTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgGoogetToTerraform;
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgGoogetToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgGoogetToHclTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgGoogetToHclTerraform;
class OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgGoogetOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._name = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._name = value.name;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
}
exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgGoogetOutputReference = OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgGoogetOutputReference;
_3 = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgGoogetOutputReference[_3] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgGoogetOutputReference", version: "14.13.1" };
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceGcsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket: cdktf.stringToTerraform(struct.bucket),
        generation: cdktf.numberToTerraform(struct.generation),
        object: cdktf.stringToTerraform(struct.object),
    };
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceGcsToTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceGcsToTerraform;
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceGcsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        bucket: {
            value: cdktf.stringToHclTerraform(struct.bucket),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        generation: {
            value: cdktf.numberToHclTerraform(struct.generation),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        object: {
            value: cdktf.stringToHclTerraform(struct.object),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceGcsToHclTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceGcsToHclTerraform;
class OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceGcsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucket !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucket = this._bucket;
        }
        if (this._generation !== undefined) {
            hasAnyValues = true;
            internalValueResult.generation = this._generation;
        }
        if (this._object !== undefined) {
            hasAnyValues = true;
            internalValueResult.object = this._object;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucket = undefined;
            this._generation = undefined;
            this._object = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucket = value.bucket;
            this._generation = value.generation;
            this._object = value.object;
        }
    }
    get bucket() {
        return this.getStringAttribute('bucket');
    }
    set bucket(value) {
        this._bucket = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketInput() {
        return this._bucket;
    }
    get generation() {
        return this.getNumberAttribute('generation');
    }
    set generation(value) {
        this._generation = value;
    }
    resetGeneration() {
        this._generation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get generationInput() {
        return this._generation;
    }
    get object() {
        return this.getStringAttribute('object');
    }
    set object(value) {
        this._object = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectInput() {
        return this._object;
    }
}
exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceGcsOutputReference = OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceGcsOutputReference;
_4 = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceGcsOutputReference[_4] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceGcsOutputReference", version: "14.13.1" };
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceRemoteToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        sha256_checksum: cdktf.stringToTerraform(struct.sha256Checksum),
        uri: cdktf.stringToTerraform(struct.uri),
    };
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceRemoteToTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceRemoteToTerraform;
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceRemoteToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        sha256_checksum: {
            value: cdktf.stringToHclTerraform(struct.sha256Checksum),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        uri: {
            value: cdktf.stringToHclTerraform(struct.uri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceRemoteToHclTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceRemoteToHclTerraform;
class OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceRemoteOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._sha256Checksum !== undefined) {
            hasAnyValues = true;
            internalValueResult.sha256Checksum = this._sha256Checksum;
        }
        if (this._uri !== undefined) {
            hasAnyValues = true;
            internalValueResult.uri = this._uri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._sha256Checksum = undefined;
            this._uri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._sha256Checksum = value.sha256Checksum;
            this._uri = value.uri;
        }
    }
    get sha256Checksum() {
        return this.getStringAttribute('sha256_checksum');
    }
    set sha256Checksum(value) {
        this._sha256Checksum = value;
    }
    resetSha256Checksum() {
        this._sha256Checksum = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sha256ChecksumInput() {
        return this._sha256Checksum;
    }
    get uri() {
        return this.getStringAttribute('uri');
    }
    set uri(value) {
        this._uri = value;
    }
    // Temporarily expose input value. Use with caution.
    get uriInput() {
        return this._uri;
    }
}
exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceRemoteOutputReference = OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceRemoteOutputReference;
_5 = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceRemoteOutputReference[_5] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceRemoteOutputReference", version: "14.13.1" };
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allow_insecure: cdktf.booleanToTerraform(struct.allowInsecure),
        local_path: cdktf.stringToTerraform(struct.localPath),
        gcs: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceGcsToTerraform(struct.gcs),
        remote: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceRemoteToTerraform(struct.remote),
    };
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceToTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceToTerraform;
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        allow_insecure: {
            value: cdktf.booleanToHclTerraform(struct.allowInsecure),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        local_path: {
            value: cdktf.stringToHclTerraform(struct.localPath),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        gcs: {
            value: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceGcsToHclTerraform(struct.gcs),
            isBlock: true,
            type: "list",
            storageClassType: "OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceGcsList",
        },
        remote: {
            value: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceRemoteToHclTerraform(struct.remote),
            isBlock: true,
            type: "list",
            storageClassType: "OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceRemoteList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceToHclTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceToHclTerraform;
class OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // gcs - computed: false, optional: true, required: false
        this._gcs = new OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceGcsOutputReference(this, "gcs");
        // remote - computed: false, optional: true, required: false
        this._remote = new OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceRemoteOutputReference(this, "remote");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowInsecure !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowInsecure = this._allowInsecure;
        }
        if (this._localPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.localPath = this._localPath;
        }
        if (this._gcs?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.gcs = this._gcs?.internalValue;
        }
        if (this._remote?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.remote = this._remote?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowInsecure = undefined;
            this._localPath = undefined;
            this._gcs.internalValue = undefined;
            this._remote.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowInsecure = value.allowInsecure;
            this._localPath = value.localPath;
            this._gcs.internalValue = value.gcs;
            this._remote.internalValue = value.remote;
        }
    }
    get allowInsecure() {
        return this.getBooleanAttribute('allow_insecure');
    }
    set allowInsecure(value) {
        this._allowInsecure = value;
    }
    resetAllowInsecure() {
        this._allowInsecure = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowInsecureInput() {
        return this._allowInsecure;
    }
    get localPath() {
        return this.getStringAttribute('local_path');
    }
    set localPath(value) {
        this._localPath = value;
    }
    resetLocalPath() {
        this._localPath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get localPathInput() {
        return this._localPath;
    }
    get gcs() {
        return this._gcs;
    }
    putGcs(value) {
        this._gcs.internalValue = value;
    }
    resetGcs() {
        this._gcs.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gcsInput() {
        return this._gcs.internalValue;
    }
    get remote() {
        return this._remote;
    }
    putRemote(value) {
        this._remote.internalValue = value;
    }
    resetRemote() {
        this._remote.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get remoteInput() {
        return this._remote.internalValue;
    }
}
exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceOutputReference = OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceOutputReference;
_6 = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceOutputReference[_6] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceOutputReference", version: "14.13.1" };
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        properties: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.properties),
        source: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceToTerraform(struct.source),
    };
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiToTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiToTerraform;
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        properties: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.properties),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        source: {
            value: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceToHclTerraform(struct.source),
            isBlock: true,
            type: "list",
            storageClassType: "OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiToHclTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiToHclTerraform;
class OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // source - computed: false, optional: false, required: true
        this._source = new OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiSourceOutputReference(this, "source");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._properties !== undefined) {
            hasAnyValues = true;
            internalValueResult.properties = this._properties;
        }
        if (this._source?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.source = this._source?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._properties = undefined;
            this._source.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._properties = value.properties;
            this._source.internalValue = value.source;
        }
    }
    get properties() {
        return this.getListAttribute('properties');
    }
    set properties(value) {
        this._properties = value;
    }
    resetProperties() {
        this._properties = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get propertiesInput() {
        return this._properties;
    }
    get source() {
        return this._source;
    }
    putSource(value) {
        this._source.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get sourceInput() {
        return this._source.internalValue;
    }
}
exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiOutputReference = OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiOutputReference;
_7 = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiOutputReference[_7] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiOutputReference", version: "14.13.1" };
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceGcsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket: cdktf.stringToTerraform(struct.bucket),
        generation: cdktf.numberToTerraform(struct.generation),
        object: cdktf.stringToTerraform(struct.object),
    };
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceGcsToTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceGcsToTerraform;
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceGcsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        bucket: {
            value: cdktf.stringToHclTerraform(struct.bucket),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        generation: {
            value: cdktf.numberToHclTerraform(struct.generation),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        object: {
            value: cdktf.stringToHclTerraform(struct.object),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceGcsToHclTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceGcsToHclTerraform;
class OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceGcsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucket !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucket = this._bucket;
        }
        if (this._generation !== undefined) {
            hasAnyValues = true;
            internalValueResult.generation = this._generation;
        }
        if (this._object !== undefined) {
            hasAnyValues = true;
            internalValueResult.object = this._object;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucket = undefined;
            this._generation = undefined;
            this._object = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucket = value.bucket;
            this._generation = value.generation;
            this._object = value.object;
        }
    }
    get bucket() {
        return this.getStringAttribute('bucket');
    }
    set bucket(value) {
        this._bucket = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketInput() {
        return this._bucket;
    }
    get generation() {
        return this.getNumberAttribute('generation');
    }
    set generation(value) {
        this._generation = value;
    }
    resetGeneration() {
        this._generation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get generationInput() {
        return this._generation;
    }
    get object() {
        return this.getStringAttribute('object');
    }
    set object(value) {
        this._object = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectInput() {
        return this._object;
    }
}
exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceGcsOutputReference = OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceGcsOutputReference;
_8 = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceGcsOutputReference[_8] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceGcsOutputReference", version: "14.13.1" };
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceRemoteToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        sha256_checksum: cdktf.stringToTerraform(struct.sha256Checksum),
        uri: cdktf.stringToTerraform(struct.uri),
    };
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceRemoteToTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceRemoteToTerraform;
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceRemoteToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        sha256_checksum: {
            value: cdktf.stringToHclTerraform(struct.sha256Checksum),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        uri: {
            value: cdktf.stringToHclTerraform(struct.uri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceRemoteToHclTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceRemoteToHclTerraform;
class OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceRemoteOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._sha256Checksum !== undefined) {
            hasAnyValues = true;
            internalValueResult.sha256Checksum = this._sha256Checksum;
        }
        if (this._uri !== undefined) {
            hasAnyValues = true;
            internalValueResult.uri = this._uri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._sha256Checksum = undefined;
            this._uri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._sha256Checksum = value.sha256Checksum;
            this._uri = value.uri;
        }
    }
    get sha256Checksum() {
        return this.getStringAttribute('sha256_checksum');
    }
    set sha256Checksum(value) {
        this._sha256Checksum = value;
    }
    resetSha256Checksum() {
        this._sha256Checksum = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sha256ChecksumInput() {
        return this._sha256Checksum;
    }
    get uri() {
        return this.getStringAttribute('uri');
    }
    set uri(value) {
        this._uri = value;
    }
    // Temporarily expose input value. Use with caution.
    get uriInput() {
        return this._uri;
    }
}
exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceRemoteOutputReference = OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceRemoteOutputReference;
_9 = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceRemoteOutputReference[_9] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceRemoteOutputReference", version: "14.13.1" };
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allow_insecure: cdktf.booleanToTerraform(struct.allowInsecure),
        local_path: cdktf.stringToTerraform(struct.localPath),
        gcs: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceGcsToTerraform(struct.gcs),
        remote: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceRemoteToTerraform(struct.remote),
    };
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceToTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceToTerraform;
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        allow_insecure: {
            value: cdktf.booleanToHclTerraform(struct.allowInsecure),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        local_path: {
            value: cdktf.stringToHclTerraform(struct.localPath),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        gcs: {
            value: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceGcsToHclTerraform(struct.gcs),
            isBlock: true,
            type: "list",
            storageClassType: "OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceGcsList",
        },
        remote: {
            value: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceRemoteToHclTerraform(struct.remote),
            isBlock: true,
            type: "list",
            storageClassType: "OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceRemoteList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceToHclTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceToHclTerraform;
class OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // gcs - computed: false, optional: true, required: false
        this._gcs = new OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceGcsOutputReference(this, "gcs");
        // remote - computed: false, optional: true, required: false
        this._remote = new OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceRemoteOutputReference(this, "remote");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowInsecure !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowInsecure = this._allowInsecure;
        }
        if (this._localPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.localPath = this._localPath;
        }
        if (this._gcs?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.gcs = this._gcs?.internalValue;
        }
        if (this._remote?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.remote = this._remote?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowInsecure = undefined;
            this._localPath = undefined;
            this._gcs.internalValue = undefined;
            this._remote.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowInsecure = value.allowInsecure;
            this._localPath = value.localPath;
            this._gcs.internalValue = value.gcs;
            this._remote.internalValue = value.remote;
        }
    }
    get allowInsecure() {
        return this.getBooleanAttribute('allow_insecure');
    }
    set allowInsecure(value) {
        this._allowInsecure = value;
    }
    resetAllowInsecure() {
        this._allowInsecure = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowInsecureInput() {
        return this._allowInsecure;
    }
    get localPath() {
        return this.getStringAttribute('local_path');
    }
    set localPath(value) {
        this._localPath = value;
    }
    resetLocalPath() {
        this._localPath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get localPathInput() {
        return this._localPath;
    }
    get gcs() {
        return this._gcs;
    }
    putGcs(value) {
        this._gcs.internalValue = value;
    }
    resetGcs() {
        this._gcs.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gcsInput() {
        return this._gcs.internalValue;
    }
    get remote() {
        return this._remote;
    }
    putRemote(value) {
        this._remote.internalValue = value;
    }
    resetRemote() {
        this._remote.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get remoteInput() {
        return this._remote.internalValue;
    }
}
exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceOutputReference = OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceOutputReference;
_10 = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceOutputReference[_10] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceOutputReference", version: "14.13.1" };
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        pull_deps: cdktf.booleanToTerraform(struct.pullDeps),
        source: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceToTerraform(struct.source),
    };
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmToTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmToTerraform;
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        pull_deps: {
            value: cdktf.booleanToHclTerraform(struct.pullDeps),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        source: {
            value: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceToHclTerraform(struct.source),
            isBlock: true,
            type: "list",
            storageClassType: "OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmToHclTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmToHclTerraform;
class OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // source - computed: false, optional: false, required: true
        this._source = new OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmSourceOutputReference(this, "source");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._pullDeps !== undefined) {
            hasAnyValues = true;
            internalValueResult.pullDeps = this._pullDeps;
        }
        if (this._source?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.source = this._source?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._pullDeps = undefined;
            this._source.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._pullDeps = value.pullDeps;
            this._source.internalValue = value.source;
        }
    }
    get pullDeps() {
        return this.getBooleanAttribute('pull_deps');
    }
    set pullDeps(value) {
        this._pullDeps = value;
    }
    resetPullDeps() {
        this._pullDeps = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pullDepsInput() {
        return this._pullDeps;
    }
    get source() {
        return this._source;
    }
    putSource(value) {
        this._source.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get sourceInput() {
        return this._source.internalValue;
    }
}
exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmOutputReference = OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmOutputReference;
_11 = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmOutputReference[_11] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmOutputReference", version: "14.13.1" };
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgYumToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgYumToTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgYumToTerraform;
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgYumToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgYumToHclTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgYumToHclTerraform;
class OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgYumOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._name = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._name = value.name;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
}
exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgYumOutputReference = OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgYumOutputReference;
_12 = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgYumOutputReference[_12] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgYumOutputReference", version: "14.13.1" };
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgZypperToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
    };
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgZypperToTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgZypperToTerraform;
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgZypperToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgZypperToHclTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgZypperToHclTerraform;
class OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgZypperOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._name = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._name = value.name;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
}
exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgZypperOutputReference = OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgZypperOutputReference;
_13 = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgZypperOutputReference[_13] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgZypperOutputReference", version: "14.13.1" };
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        desired_state: cdktf.stringToTerraform(struct.desiredState),
        apt: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgAptToTerraform(struct.apt),
        deb: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebToTerraform(struct.deb),
        googet: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgGoogetToTerraform(struct.googet),
        msi: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiToTerraform(struct.msi),
        rpm: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmToTerraform(struct.rpm),
        yum: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgYumToTerraform(struct.yum),
        zypper: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgZypperToTerraform(struct.zypper),
    };
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgToTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgToTerraform;
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        desired_state: {
            value: cdktf.stringToHclTerraform(struct.desiredState),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        apt: {
            value: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgAptToHclTerraform(struct.apt),
            isBlock: true,
            type: "list",
            storageClassType: "OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgAptList",
        },
        deb: {
            value: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebToHclTerraform(struct.deb),
            isBlock: true,
            type: "list",
            storageClassType: "OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebList",
        },
        googet: {
            value: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgGoogetToHclTerraform(struct.googet),
            isBlock: true,
            type: "list",
            storageClassType: "OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgGoogetList",
        },
        msi: {
            value: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiToHclTerraform(struct.msi),
            isBlock: true,
            type: "list",
            storageClassType: "OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiList",
        },
        rpm: {
            value: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmToHclTerraform(struct.rpm),
            isBlock: true,
            type: "list",
            storageClassType: "OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmList",
        },
        yum: {
            value: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgYumToHclTerraform(struct.yum),
            isBlock: true,
            type: "list",
            storageClassType: "OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgYumList",
        },
        zypper: {
            value: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgZypperToHclTerraform(struct.zypper),
            isBlock: true,
            type: "list",
            storageClassType: "OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgZypperList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgToHclTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgToHclTerraform;
class OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // apt - computed: false, optional: true, required: false
        this._apt = new OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgAptOutputReference(this, "apt");
        // deb - computed: false, optional: true, required: false
        this._deb = new OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgDebOutputReference(this, "deb");
        // googet - computed: false, optional: true, required: false
        this._googet = new OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgGoogetOutputReference(this, "googet");
        // msi - computed: false, optional: true, required: false
        this._msi = new OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgMsiOutputReference(this, "msi");
        // rpm - computed: false, optional: true, required: false
        this._rpm = new OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgRpmOutputReference(this, "rpm");
        // yum - computed: false, optional: true, required: false
        this._yum = new OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgYumOutputReference(this, "yum");
        // zypper - computed: false, optional: true, required: false
        this._zypper = new OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgZypperOutputReference(this, "zypper");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._desiredState !== undefined) {
            hasAnyValues = true;
            internalValueResult.desiredState = this._desiredState;
        }
        if (this._apt?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.apt = this._apt?.internalValue;
        }
        if (this._deb?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.deb = this._deb?.internalValue;
        }
        if (this._googet?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.googet = this._googet?.internalValue;
        }
        if (this._msi?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.msi = this._msi?.internalValue;
        }
        if (this._rpm?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.rpm = this._rpm?.internalValue;
        }
        if (this._yum?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.yum = this._yum?.internalValue;
        }
        if (this._zypper?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.zypper = this._zypper?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._desiredState = undefined;
            this._apt.internalValue = undefined;
            this._deb.internalValue = undefined;
            this._googet.internalValue = undefined;
            this._msi.internalValue = undefined;
            this._rpm.internalValue = undefined;
            this._yum.internalValue = undefined;
            this._zypper.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._desiredState = value.desiredState;
            this._apt.internalValue = value.apt;
            this._deb.internalValue = value.deb;
            this._googet.internalValue = value.googet;
            this._msi.internalValue = value.msi;
            this._rpm.internalValue = value.rpm;
            this._yum.internalValue = value.yum;
            this._zypper.internalValue = value.zypper;
        }
    }
    get desiredState() {
        return this.getStringAttribute('desired_state');
    }
    set desiredState(value) {
        this._desiredState = value;
    }
    // Temporarily expose input value. Use with caution.
    get desiredStateInput() {
        return this._desiredState;
    }
    get apt() {
        return this._apt;
    }
    putApt(value) {
        this._apt.internalValue = value;
    }
    resetApt() {
        this._apt.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get aptInput() {
        return this._apt.internalValue;
    }
    get deb() {
        return this._deb;
    }
    putDeb(value) {
        this._deb.internalValue = value;
    }
    resetDeb() {
        this._deb.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get debInput() {
        return this._deb.internalValue;
    }
    get googet() {
        return this._googet;
    }
    putGooget(value) {
        this._googet.internalValue = value;
    }
    resetGooget() {
        this._googet.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get googetInput() {
        return this._googet.internalValue;
    }
    get msi() {
        return this._msi;
    }
    putMsi(value) {
        this._msi.internalValue = value;
    }
    resetMsi() {
        this._msi.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get msiInput() {
        return this._msi.internalValue;
    }
    get rpm() {
        return this._rpm;
    }
    putRpm(value) {
        this._rpm.internalValue = value;
    }
    resetRpm() {
        this._rpm.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rpmInput() {
        return this._rpm.internalValue;
    }
    get yum() {
        return this._yum;
    }
    putYum(value) {
        this._yum.internalValue = value;
    }
    resetYum() {
        this._yum.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get yumInput() {
        return this._yum.internalValue;
    }
    get zypper() {
        return this._zypper;
    }
    putZypper(value) {
        this._zypper.internalValue = value;
    }
    resetZypper() {
        this._zypper.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get zypperInput() {
        return this._zypper.internalValue;
    }
}
exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgOutputReference = OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgOutputReference;
_14 = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgOutputReference[_14] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgOutputReference", version: "14.13.1" };
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryAptToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        archive_type: cdktf.stringToTerraform(struct.archiveType),
        components: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.components),
        distribution: cdktf.stringToTerraform(struct.distribution),
        gpg_key: cdktf.stringToTerraform(struct.gpgKey),
        uri: cdktf.stringToTerraform(struct.uri),
    };
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryAptToTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryAptToTerraform;
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryAptToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        archive_type: {
            value: cdktf.stringToHclTerraform(struct.archiveType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        components: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.components),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        distribution: {
            value: cdktf.stringToHclTerraform(struct.distribution),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        gpg_key: {
            value: cdktf.stringToHclTerraform(struct.gpgKey),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        uri: {
            value: cdktf.stringToHclTerraform(struct.uri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryAptToHclTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryAptToHclTerraform;
class OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryAptOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._archiveType !== undefined) {
            hasAnyValues = true;
            internalValueResult.archiveType = this._archiveType;
        }
        if (this._components !== undefined) {
            hasAnyValues = true;
            internalValueResult.components = this._components;
        }
        if (this._distribution !== undefined) {
            hasAnyValues = true;
            internalValueResult.distribution = this._distribution;
        }
        if (this._gpgKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.gpgKey = this._gpgKey;
        }
        if (this._uri !== undefined) {
            hasAnyValues = true;
            internalValueResult.uri = this._uri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._archiveType = undefined;
            this._components = undefined;
            this._distribution = undefined;
            this._gpgKey = undefined;
            this._uri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._archiveType = value.archiveType;
            this._components = value.components;
            this._distribution = value.distribution;
            this._gpgKey = value.gpgKey;
            this._uri = value.uri;
        }
    }
    get archiveType() {
        return this.getStringAttribute('archive_type');
    }
    set archiveType(value) {
        this._archiveType = value;
    }
    // Temporarily expose input value. Use with caution.
    get archiveTypeInput() {
        return this._archiveType;
    }
    get components() {
        return this.getListAttribute('components');
    }
    set components(value) {
        this._components = value;
    }
    // Temporarily expose input value. Use with caution.
    get componentsInput() {
        return this._components;
    }
    get distribution() {
        return this.getStringAttribute('distribution');
    }
    set distribution(value) {
        this._distribution = value;
    }
    // Temporarily expose input value. Use with caution.
    get distributionInput() {
        return this._distribution;
    }
    get gpgKey() {
        return this.getStringAttribute('gpg_key');
    }
    set gpgKey(value) {
        this._gpgKey = value;
    }
    resetGpgKey() {
        this._gpgKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gpgKeyInput() {
        return this._gpgKey;
    }
    get uri() {
        return this.getStringAttribute('uri');
    }
    set uri(value) {
        this._uri = value;
    }
    // Temporarily expose input value. Use with caution.
    get uriInput() {
        return this._uri;
    }
}
exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryAptOutputReference = OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryAptOutputReference;
_15 = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryAptOutputReference[_15] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryAptOutputReference", version: "14.13.1" };
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryGooToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        url: cdktf.stringToTerraform(struct.url),
    };
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryGooToTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryGooToTerraform;
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryGooToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        url: {
            value: cdktf.stringToHclTerraform(struct.url),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryGooToHclTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryGooToHclTerraform;
class OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryGooOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._url !== undefined) {
            hasAnyValues = true;
            internalValueResult.url = this._url;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._name = undefined;
            this._url = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._name = value.name;
            this._url = value.url;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get url() {
        return this.getStringAttribute('url');
    }
    set url(value) {
        this._url = value;
    }
    // Temporarily expose input value. Use with caution.
    get urlInput() {
        return this._url;
    }
}
exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryGooOutputReference = OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryGooOutputReference;
_16 = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryGooOutputReference[_16] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryGooOutputReference", version: "14.13.1" };
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryYumToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        base_url: cdktf.stringToTerraform(struct.baseUrl),
        display_name: cdktf.stringToTerraform(struct.displayName),
        gpg_keys: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.gpgKeys),
        id: cdktf.stringToTerraform(struct.id),
    };
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryYumToTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryYumToTerraform;
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryYumToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        base_url: {
            value: cdktf.stringToHclTerraform(struct.baseUrl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        display_name: {
            value: cdktf.stringToHclTerraform(struct.displayName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        gpg_keys: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.gpgKeys),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        id: {
            value: cdktf.stringToHclTerraform(struct.id),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryYumToHclTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryYumToHclTerraform;
class OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryYumOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._baseUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.baseUrl = this._baseUrl;
        }
        if (this._displayName !== undefined) {
            hasAnyValues = true;
            internalValueResult.displayName = this._displayName;
        }
        if (this._gpgKeys !== undefined) {
            hasAnyValues = true;
            internalValueResult.gpgKeys = this._gpgKeys;
        }
        if (this._id !== undefined) {
            hasAnyValues = true;
            internalValueResult.id = this._id;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._baseUrl = undefined;
            this._displayName = undefined;
            this._gpgKeys = undefined;
            this._id = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._baseUrl = value.baseUrl;
            this._displayName = value.displayName;
            this._gpgKeys = value.gpgKeys;
            this._id = value.id;
        }
    }
    get baseUrl() {
        return this.getStringAttribute('base_url');
    }
    set baseUrl(value) {
        this._baseUrl = value;
    }
    // Temporarily expose input value. Use with caution.
    get baseUrlInput() {
        return this._baseUrl;
    }
    get displayName() {
        return this.getStringAttribute('display_name');
    }
    set displayName(value) {
        this._displayName = value;
    }
    resetDisplayName() {
        this._displayName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get displayNameInput() {
        return this._displayName;
    }
    get gpgKeys() {
        return this.getListAttribute('gpg_keys');
    }
    set gpgKeys(value) {
        this._gpgKeys = value;
    }
    resetGpgKeys() {
        this._gpgKeys = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gpgKeysInput() {
        return this._gpgKeys;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
}
exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryYumOutputReference = OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryYumOutputReference;
_17 = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryYumOutputReference[_17] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryYumOutputReference", version: "14.13.1" };
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryZypperToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        base_url: cdktf.stringToTerraform(struct.baseUrl),
        display_name: cdktf.stringToTerraform(struct.displayName),
        gpg_keys: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.gpgKeys),
        id: cdktf.stringToTerraform(struct.id),
    };
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryZypperToTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryZypperToTerraform;
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryZypperToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        base_url: {
            value: cdktf.stringToHclTerraform(struct.baseUrl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        display_name: {
            value: cdktf.stringToHclTerraform(struct.displayName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        gpg_keys: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.gpgKeys),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        id: {
            value: cdktf.stringToHclTerraform(struct.id),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryZypperToHclTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryZypperToHclTerraform;
class OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryZypperOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._baseUrl !== undefined) {
            hasAnyValues = true;
            internalValueResult.baseUrl = this._baseUrl;
        }
        if (this._displayName !== undefined) {
            hasAnyValues = true;
            internalValueResult.displayName = this._displayName;
        }
        if (this._gpgKeys !== undefined) {
            hasAnyValues = true;
            internalValueResult.gpgKeys = this._gpgKeys;
        }
        if (this._id !== undefined) {
            hasAnyValues = true;
            internalValueResult.id = this._id;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._baseUrl = undefined;
            this._displayName = undefined;
            this._gpgKeys = undefined;
            this._id = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._baseUrl = value.baseUrl;
            this._displayName = value.displayName;
            this._gpgKeys = value.gpgKeys;
            this._id = value.id;
        }
    }
    get baseUrl() {
        return this.getStringAttribute('base_url');
    }
    set baseUrl(value) {
        this._baseUrl = value;
    }
    // Temporarily expose input value. Use with caution.
    get baseUrlInput() {
        return this._baseUrl;
    }
    get displayName() {
        return this.getStringAttribute('display_name');
    }
    set displayName(value) {
        this._displayName = value;
    }
    resetDisplayName() {
        this._displayName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get displayNameInput() {
        return this._displayName;
    }
    get gpgKeys() {
        return this.getListAttribute('gpg_keys');
    }
    set gpgKeys(value) {
        this._gpgKeys = value;
    }
    resetGpgKeys() {
        this._gpgKeys = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gpgKeysInput() {
        return this._gpgKeys;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
}
exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryZypperOutputReference = OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryZypperOutputReference;
_18 = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryZypperOutputReference[_18] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryZypperOutputReference", version: "14.13.1" };
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        apt: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryAptToTerraform(struct.apt),
        goo: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryGooToTerraform(struct.goo),
        yum: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryYumToTerraform(struct.yum),
        zypper: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryZypperToTerraform(struct.zypper),
    };
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryToTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryToTerraform;
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        apt: {
            value: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryAptToHclTerraform(struct.apt),
            isBlock: true,
            type: "list",
            storageClassType: "OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryAptList",
        },
        goo: {
            value: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryGooToHclTerraform(struct.goo),
            isBlock: true,
            type: "list",
            storageClassType: "OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryGooList",
        },
        yum: {
            value: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryYumToHclTerraform(struct.yum),
            isBlock: true,
            type: "list",
            storageClassType: "OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryYumList",
        },
        zypper: {
            value: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryZypperToHclTerraform(struct.zypper),
            isBlock: true,
            type: "list",
            storageClassType: "OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryZypperList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryToHclTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryToHclTerraform;
class OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // apt - computed: false, optional: true, required: false
        this._apt = new OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryAptOutputReference(this, "apt");
        // goo - computed: false, optional: true, required: false
        this._goo = new OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryGooOutputReference(this, "goo");
        // yum - computed: false, optional: true, required: false
        this._yum = new OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryYumOutputReference(this, "yum");
        // zypper - computed: false, optional: true, required: false
        this._zypper = new OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryZypperOutputReference(this, "zypper");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._apt?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.apt = this._apt?.internalValue;
        }
        if (this._goo?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.goo = this._goo?.internalValue;
        }
        if (this._yum?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.yum = this._yum?.internalValue;
        }
        if (this._zypper?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.zypper = this._zypper?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._apt.internalValue = undefined;
            this._goo.internalValue = undefined;
            this._yum.internalValue = undefined;
            this._zypper.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._apt.internalValue = value.apt;
            this._goo.internalValue = value.goo;
            this._yum.internalValue = value.yum;
            this._zypper.internalValue = value.zypper;
        }
    }
    get apt() {
        return this._apt;
    }
    putApt(value) {
        this._apt.internalValue = value;
    }
    resetApt() {
        this._apt.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get aptInput() {
        return this._apt.internalValue;
    }
    get goo() {
        return this._goo;
    }
    putGoo(value) {
        this._goo.internalValue = value;
    }
    resetGoo() {
        this._goo.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gooInput() {
        return this._goo.internalValue;
    }
    get yum() {
        return this._yum;
    }
    putYum(value) {
        this._yum.internalValue = value;
    }
    resetYum() {
        this._yum.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get yumInput() {
        return this._yum.internalValue;
    }
    get zypper() {
        return this._zypper;
    }
    putZypper(value) {
        this._zypper.internalValue = value;
    }
    resetZypper() {
        this._zypper.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get zypperInput() {
        return this._zypper.internalValue;
    }
}
exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryOutputReference = OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryOutputReference;
_19 = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryOutputReference[_19] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryOutputReference", version: "14.13.1" };
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        id: cdktf.stringToTerraform(struct.id),
        exec: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecToTerraform(struct.exec),
        file: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileToTerraform(struct.file),
        pkg: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgToTerraform(struct.pkg),
        repository: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryToTerraform(struct.repository),
    };
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesToTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesToTerraform;
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        id: {
            value: cdktf.stringToHclTerraform(struct.id),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        exec: {
            value: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecToHclTerraform(struct.exec),
            isBlock: true,
            type: "list",
            storageClassType: "OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecList",
        },
        file: {
            value: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileToHclTerraform(struct.file),
            isBlock: true,
            type: "list",
            storageClassType: "OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileList",
        },
        pkg: {
            value: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgToHclTerraform(struct.pkg),
            isBlock: true,
            type: "list",
            storageClassType: "OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgList",
        },
        repository: {
            value: osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryToHclTerraform(struct.repository),
            isBlock: true,
            type: "list",
            storageClassType: "OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesToHclTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesToHclTerraform;
class OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // exec - computed: false, optional: true, required: false
        this._exec = new OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesExecOutputReference(this, "exec");
        // file - computed: false, optional: true, required: false
        this._file = new OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesFileOutputReference(this, "file");
        // pkg - computed: false, optional: true, required: false
        this._pkg = new OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesPkgOutputReference(this, "pkg");
        // repository - computed: false, optional: true, required: false
        this._repository = new OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesRepositoryOutputReference(this, "repository");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._id !== undefined) {
            hasAnyValues = true;
            internalValueResult.id = this._id;
        }
        if (this._exec?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.exec = this._exec?.internalValue;
        }
        if (this._file?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.file = this._file?.internalValue;
        }
        if (this._pkg?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.pkg = this._pkg?.internalValue;
        }
        if (this._repository?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.repository = this._repository?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._id = undefined;
            this._exec.internalValue = undefined;
            this._file.internalValue = undefined;
            this._pkg.internalValue = undefined;
            this._repository.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._id = value.id;
            this._exec.internalValue = value.exec;
            this._file.internalValue = value.file;
            this._pkg.internalValue = value.pkg;
            this._repository.internalValue = value.repository;
        }
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get exec() {
        return this._exec;
    }
    putExec(value) {
        this._exec.internalValue = value;
    }
    resetExec() {
        this._exec.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get execInput() {
        return this._exec.internalValue;
    }
    get file() {
        return this._file;
    }
    putFile(value) {
        this._file.internalValue = value;
    }
    resetFile() {
        this._file.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fileInput() {
        return this._file.internalValue;
    }
    get pkg() {
        return this._pkg;
    }
    putPkg(value) {
        this._pkg.internalValue = value;
    }
    resetPkg() {
        this._pkg.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pkgInput() {
        return this._pkg.internalValue;
    }
    get repository() {
        return this._repository;
    }
    putRepository(value) {
        this._repository.internalValue = value;
    }
    resetRepository() {
        this._repository.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get repositoryInput() {
        return this._repository.internalValue;
    }
}
exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesOutputReference = OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesOutputReference;
_20 = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesOutputReference[_20] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesOutputReference", version: "14.13.1" };
class OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesList = OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesList;
_21 = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesList[_21] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesList", version: "14.13.1" };
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        inventory_filters: cdktf.listMapper(osConfigOsPolicyAssignmentOsPoliciesResourceGroupsInventoryFiltersToTerraform, true)(struct.inventoryFilters),
        resources: cdktf.listMapper(osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesToTerraform, true)(struct.resources),
    };
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsToTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsToTerraform;
function osConfigOsPolicyAssignmentOsPoliciesResourceGroupsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        inventory_filters: {
            value: cdktf.listMapperHcl(osConfigOsPolicyAssignmentOsPoliciesResourceGroupsInventoryFiltersToHclTerraform, true)(struct.inventoryFilters),
            isBlock: true,
            type: "list",
            storageClassType: "OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsInventoryFiltersList",
        },
        resources: {
            value: cdktf.listMapperHcl(osConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesToHclTerraform, true)(struct.resources),
            isBlock: true,
            type: "list",
            storageClassType: "OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.osConfigOsPolicyAssignmentOsPoliciesResourceGroupsToHclTerraform = osConfigOsPolicyAssignmentOsPoliciesResourceGroupsToHclTerraform;
class OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // inventory_filters - computed: false, optional: true, required: false
        this._inventoryFilters = new OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsInventoryFiltersList(this, "inventory_filters", false);
        // resources - computed: false, optional: false, required: true
        this._resources = new OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsResourcesList(this, "resources", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._inventoryFilters?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.inventoryFilters = this._inventoryFilters?.internalValue;
        }
        if (this._resources?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.resources = this._resources?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._inventoryFilters.internalValue = undefined;
            this._resources.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._inventoryFilters.internalValue = value.inventoryFilters;
            this._resources.internalValue = value.resources;
        }
    }
    get inventoryFilters() {
        return this._inventoryFilters;
    }
    putInventoryFilters(value) {
        this._inventoryFilters.internalValue = value;
    }
    resetInventoryFilters() {
        this._inventoryFilters.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inventoryFiltersInput() {
        return this._inventoryFilters.internalValue;
    }
    get resources() {
        return this._resources;
    }
    putResources(value) {
        this._resources.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get resourcesInput() {
        return this._resources.internalValue;
    }
}
exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsOutputReference = OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsOutputReference;
_22 = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsOutputReference[_22] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsOutputReference", version: "14.13.1" };
class OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsList = OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsList;
_23 = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsList[_23] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsList", version: "14.13.1" };
function osConfigOsPolicyAssignmentOsPoliciesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allow_no_resource_group_match: cdktf.booleanToTerraform(struct.allowNoResourceGroupMatch),
        description: cdktf.stringToTerraform(struct.description),
        id: cdktf.stringToTerraform(struct.id),
        mode: cdktf.stringToTerraform(struct.mode),
        resource_groups: cdktf.listMapper(osConfigOsPolicyAssignmentOsPoliciesResourceGroupsToTerraform, true)(struct.resourceGroups),
    };
}
exports.osConfigOsPolicyAssignmentOsPoliciesToTerraform = osConfigOsPolicyAssignmentOsPoliciesToTerraform;
function osConfigOsPolicyAssignmentOsPoliciesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        allow_no_resource_group_match: {
            value: cdktf.booleanToHclTerraform(struct.allowNoResourceGroupMatch),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        description: {
            value: cdktf.stringToHclTerraform(struct.description),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        id: {
            value: cdktf.stringToHclTerraform(struct.id),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        mode: {
            value: cdktf.stringToHclTerraform(struct.mode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        resource_groups: {
            value: cdktf.listMapperHcl(osConfigOsPolicyAssignmentOsPoliciesResourceGroupsToHclTerraform, true)(struct.resourceGroups),
            isBlock: true,
            type: "list",
            storageClassType: "OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.osConfigOsPolicyAssignmentOsPoliciesToHclTerraform = osConfigOsPolicyAssignmentOsPoliciesToHclTerraform;
class OsConfigOsPolicyAssignmentOsPoliciesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // resource_groups - computed: false, optional: false, required: true
        this._resourceGroups = new OsConfigOsPolicyAssignmentOsPoliciesResourceGroupsList(this, "resource_groups", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowNoResourceGroupMatch !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowNoResourceGroupMatch = this._allowNoResourceGroupMatch;
        }
        if (this._description !== undefined) {
            hasAnyValues = true;
            internalValueResult.description = this._description;
        }
        if (this._id !== undefined) {
            hasAnyValues = true;
            internalValueResult.id = this._id;
        }
        if (this._mode !== undefined) {
            hasAnyValues = true;
            internalValueResult.mode = this._mode;
        }
        if (this._resourceGroups?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.resourceGroups = this._resourceGroups?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._allowNoResourceGroupMatch = undefined;
            this._description = undefined;
            this._id = undefined;
            this._mode = undefined;
            this._resourceGroups.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._allowNoResourceGroupMatch = value.allowNoResourceGroupMatch;
            this._description = value.description;
            this._id = value.id;
            this._mode = value.mode;
            this._resourceGroups.internalValue = value.resourceGroups;
        }
    }
    get allowNoResourceGroupMatch() {
        return this.getBooleanAttribute('allow_no_resource_group_match');
    }
    set allowNoResourceGroupMatch(value) {
        this._allowNoResourceGroupMatch = value;
    }
    resetAllowNoResourceGroupMatch() {
        this._allowNoResourceGroupMatch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowNoResourceGroupMatchInput() {
        return this._allowNoResourceGroupMatch;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get mode() {
        return this.getStringAttribute('mode');
    }
    set mode(value) {
        this._mode = value;
    }
    // Temporarily expose input value. Use with caution.
    get modeInput() {
        return this._mode;
    }
    get resourceGroups() {
        return this._resourceGroups;
    }
    putResourceGroups(value) {
        this._resourceGroups.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get resourceGroupsInput() {
        return this._resourceGroups.internalValue;
    }
}
exports.OsConfigOsPolicyAssignmentOsPoliciesOutputReference = OsConfigOsPolicyAssignmentOsPoliciesOutputReference;
_24 = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentOsPoliciesOutputReference[_24] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentOsPoliciesOutputReference", version: "14.13.1" };
class OsConfigOsPolicyAssignmentOsPoliciesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new OsConfigOsPolicyAssignmentOsPoliciesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.OsConfigOsPolicyAssignmentOsPoliciesList = OsConfigOsPolicyAssignmentOsPoliciesList;
_25 = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentOsPoliciesList[_25] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentOsPoliciesList", version: "14.13.1" };
function osConfigOsPolicyAssignmentRolloutDisruptionBudgetToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        fixed: cdktf.numberToTerraform(struct.fixed),
        percent: cdktf.numberToTerraform(struct.percent),
    };
}
exports.osConfigOsPolicyAssignmentRolloutDisruptionBudgetToTerraform = osConfigOsPolicyAssignmentRolloutDisruptionBudgetToTerraform;
function osConfigOsPolicyAssignmentRolloutDisruptionBudgetToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        fixed: {
            value: cdktf.numberToHclTerraform(struct.fixed),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        percent: {
            value: cdktf.numberToHclTerraform(struct.percent),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.osConfigOsPolicyAssignmentRolloutDisruptionBudgetToHclTerraform = osConfigOsPolicyAssignmentRolloutDisruptionBudgetToHclTerraform;
class OsConfigOsPolicyAssignmentRolloutDisruptionBudgetOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._fixed !== undefined) {
            hasAnyValues = true;
            internalValueResult.fixed = this._fixed;
        }
        if (this._percent !== undefined) {
            hasAnyValues = true;
            internalValueResult.percent = this._percent;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._fixed = undefined;
            this._percent = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._fixed = value.fixed;
            this._percent = value.percent;
        }
    }
    get fixed() {
        return this.getNumberAttribute('fixed');
    }
    set fixed(value) {
        this._fixed = value;
    }
    resetFixed() {
        this._fixed = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fixedInput() {
        return this._fixed;
    }
    get percent() {
        return this.getNumberAttribute('percent');
    }
    set percent(value) {
        this._percent = value;
    }
    resetPercent() {
        this._percent = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get percentInput() {
        return this._percent;
    }
}
exports.OsConfigOsPolicyAssignmentRolloutDisruptionBudgetOutputReference = OsConfigOsPolicyAssignmentRolloutDisruptionBudgetOutputReference;
_26 = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentRolloutDisruptionBudgetOutputReference[_26] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentRolloutDisruptionBudgetOutputReference", version: "14.13.1" };
function osConfigOsPolicyAssignmentRolloutToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        min_wait_duration: cdktf.stringToTerraform(struct.minWaitDuration),
        disruption_budget: osConfigOsPolicyAssignmentRolloutDisruptionBudgetToTerraform(struct.disruptionBudget),
    };
}
exports.osConfigOsPolicyAssignmentRolloutToTerraform = osConfigOsPolicyAssignmentRolloutToTerraform;
function osConfigOsPolicyAssignmentRolloutToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        min_wait_duration: {
            value: cdktf.stringToHclTerraform(struct.minWaitDuration),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        disruption_budget: {
            value: osConfigOsPolicyAssignmentRolloutDisruptionBudgetToHclTerraform(struct.disruptionBudget),
            isBlock: true,
            type: "list",
            storageClassType: "OsConfigOsPolicyAssignmentRolloutDisruptionBudgetList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.osConfigOsPolicyAssignmentRolloutToHclTerraform = osConfigOsPolicyAssignmentRolloutToHclTerraform;
class OsConfigOsPolicyAssignmentRolloutOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // disruption_budget - computed: false, optional: false, required: true
        this._disruptionBudget = new OsConfigOsPolicyAssignmentRolloutDisruptionBudgetOutputReference(this, "disruption_budget");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._minWaitDuration !== undefined) {
            hasAnyValues = true;
            internalValueResult.minWaitDuration = this._minWaitDuration;
        }
        if (this._disruptionBudget?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.disruptionBudget = this._disruptionBudget?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._minWaitDuration = undefined;
            this._disruptionBudget.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._minWaitDuration = value.minWaitDuration;
            this._disruptionBudget.internalValue = value.disruptionBudget;
        }
    }
    get minWaitDuration() {
        return this.getStringAttribute('min_wait_duration');
    }
    set minWaitDuration(value) {
        this._minWaitDuration = value;
    }
    // Temporarily expose input value. Use with caution.
    get minWaitDurationInput() {
        return this._minWaitDuration;
    }
    get disruptionBudget() {
        return this._disruptionBudget;
    }
    putDisruptionBudget(value) {
        this._disruptionBudget.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get disruptionBudgetInput() {
        return this._disruptionBudget.internalValue;
    }
}
exports.OsConfigOsPolicyAssignmentRolloutOutputReference = OsConfigOsPolicyAssignmentRolloutOutputReference;
_27 = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentRolloutOutputReference[_27] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentRolloutOutputReference", version: "14.13.1" };
function osConfigOsPolicyAssignmentTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.osConfigOsPolicyAssignmentTimeoutsToTerraform = osConfigOsPolicyAssignmentTimeoutsToTerraform;
function osConfigOsPolicyAssignmentTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.osConfigOsPolicyAssignmentTimeoutsToHclTerraform = osConfigOsPolicyAssignmentTimeoutsToHclTerraform;
class OsConfigOsPolicyAssignmentTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.OsConfigOsPolicyAssignmentTimeoutsOutputReference = OsConfigOsPolicyAssignmentTimeoutsOutputReference;
_28 = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignmentTimeoutsOutputReference[_28] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignmentTimeoutsOutputReference", version: "14.13.1" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/os_config_os_policy_assignment google_os_config_os_policy_assignment}
*/
class OsConfigOsPolicyAssignment extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a OsConfigOsPolicyAssignment resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the OsConfigOsPolicyAssignment to import
    * @param importFromId The id of the existing OsConfigOsPolicyAssignment that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/os_config_os_policy_assignment#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the OsConfigOsPolicyAssignment to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_os_config_os_policy_assignment", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/os_config_os_policy_assignment google_os_config_os_policy_assignment} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options OsConfigOsPolicyAssignmentConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_os_config_os_policy_assignment',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // instance_filter - computed: false, optional: false, required: true
        this._instanceFilter = new OsConfigOsPolicyAssignmentInstanceFilterOutputReference(this, "instance_filter");
        // os_policies - computed: false, optional: false, required: true
        this._osPolicies = new OsConfigOsPolicyAssignmentOsPoliciesList(this, "os_policies", false);
        // rollout - computed: false, optional: false, required: true
        this._rollout = new OsConfigOsPolicyAssignmentRolloutOutputReference(this, "rollout");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new OsConfigOsPolicyAssignmentTimeoutsOutputReference(this, "timeouts");
        this._description = config.description;
        this._id = config.id;
        this._location = config.location;
        this._name = config.name;
        this._project = config.project;
        this._skipAwaitRollout = config.skipAwaitRollout;
        this._instanceFilter.internalValue = config.instanceFilter;
        this._osPolicies.internalValue = config.osPolicies;
        this._rollout.internalValue = config.rollout;
        this._timeouts.internalValue = config.timeouts;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // baseline - computed: true, optional: false, required: false
    get baseline() {
        return this.getBooleanAttribute('baseline');
    }
    // deleted - computed: true, optional: false, required: false
    get deleted() {
        return this.getBooleanAttribute('deleted');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    // etag - computed: true, optional: false, required: false
    get etag() {
        return this.getStringAttribute('etag');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    // reconciling - computed: true, optional: false, required: false
    get reconciling() {
        return this.getBooleanAttribute('reconciling');
    }
    // revision_create_time - computed: true, optional: false, required: false
    get revisionCreateTime() {
        return this.getStringAttribute('revision_create_time');
    }
    // revision_id - computed: true, optional: false, required: false
    get revisionId() {
        return this.getStringAttribute('revision_id');
    }
    // rollout_state - computed: true, optional: false, required: false
    get rolloutState() {
        return this.getStringAttribute('rollout_state');
    }
    get skipAwaitRollout() {
        return this.getBooleanAttribute('skip_await_rollout');
    }
    set skipAwaitRollout(value) {
        this._skipAwaitRollout = value;
    }
    resetSkipAwaitRollout() {
        this._skipAwaitRollout = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get skipAwaitRolloutInput() {
        return this._skipAwaitRollout;
    }
    // uid - computed: true, optional: false, required: false
    get uid() {
        return this.getStringAttribute('uid');
    }
    get instanceFilter() {
        return this._instanceFilter;
    }
    putInstanceFilter(value) {
        this._instanceFilter.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get instanceFilterInput() {
        return this._instanceFilter.internalValue;
    }
    get osPolicies() {
        return this._osPolicies;
    }
    putOsPolicies(value) {
        this._osPolicies.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get osPoliciesInput() {
        return this._osPolicies.internalValue;
    }
    get rollout() {
        return this._rollout;
    }
    putRollout(value) {
        this._rollout.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get rolloutInput() {
        return this._rollout.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            description: cdktf.stringToTerraform(this._description),
            id: cdktf.stringToTerraform(this._id),
            location: cdktf.stringToTerraform(this._location),
            name: cdktf.stringToTerraform(this._name),
            project: cdktf.stringToTerraform(this._project),
            skip_await_rollout: cdktf.booleanToTerraform(this._skipAwaitRollout),
            instance_filter: osConfigOsPolicyAssignmentInstanceFilterToTerraform(this._instanceFilter.internalValue),
            os_policies: cdktf.listMapper(osConfigOsPolicyAssignmentOsPoliciesToTerraform, true)(this._osPolicies.internalValue),
            rollout: osConfigOsPolicyAssignmentRolloutToTerraform(this._rollout.internalValue),
            timeouts: osConfigOsPolicyAssignmentTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            description: {
                value: cdktf.stringToHclTerraform(this._description),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            location: {
                value: cdktf.stringToHclTerraform(this._location),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            name: {
                value: cdktf.stringToHclTerraform(this._name),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            project: {
                value: cdktf.stringToHclTerraform(this._project),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            skip_await_rollout: {
                value: cdktf.booleanToHclTerraform(this._skipAwaitRollout),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            instance_filter: {
                value: osConfigOsPolicyAssignmentInstanceFilterToHclTerraform(this._instanceFilter.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "OsConfigOsPolicyAssignmentInstanceFilterList",
            },
            os_policies: {
                value: cdktf.listMapperHcl(osConfigOsPolicyAssignmentOsPoliciesToHclTerraform, true)(this._osPolicies.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "OsConfigOsPolicyAssignmentOsPoliciesList",
            },
            rollout: {
                value: osConfigOsPolicyAssignmentRolloutToHclTerraform(this._rollout.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "OsConfigOsPolicyAssignmentRolloutList",
            },
            timeouts: {
                value: osConfigOsPolicyAssignmentTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "OsConfigOsPolicyAssignmentTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.OsConfigOsPolicyAssignment = OsConfigOsPolicyAssignment;
_29 = JSII_RTTI_SYMBOL_1;
OsConfigOsPolicyAssignment[_29] = { fqn: "@cdktf/provider-google.osConfigOsPolicyAssignment.OsConfigOsPolicyAssignment", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
OsConfigOsPolicyAssignment.tfResourceType = "google_os_config_os_policy_assignment";
//# sourceMappingURL=data:application/json;base64,