"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
Object.defineProperty(exports, "__esModule", { value: true });
exports.VmwareenginePrivateCloud = exports.VmwareenginePrivateCloudTimeoutsOutputReference = exports.vmwareenginePrivateCloudTimeoutsToHclTerraform = exports.vmwareenginePrivateCloudTimeoutsToTerraform = exports.VmwareenginePrivateCloudNetworkConfigOutputReference = exports.vmwareenginePrivateCloudNetworkConfigToHclTerraform = exports.vmwareenginePrivateCloudNetworkConfigToTerraform = exports.VmwareenginePrivateCloudManagementClusterOutputReference = exports.vmwareenginePrivateCloudManagementClusterToHclTerraform = exports.vmwareenginePrivateCloudManagementClusterToTerraform = exports.VmwareenginePrivateCloudManagementClusterStretchedClusterConfigOutputReference = exports.vmwareenginePrivateCloudManagementClusterStretchedClusterConfigToHclTerraform = exports.vmwareenginePrivateCloudManagementClusterStretchedClusterConfigToTerraform = exports.VmwareenginePrivateCloudManagementClusterNodeTypeConfigsList = exports.VmwareenginePrivateCloudManagementClusterNodeTypeConfigsOutputReference = exports.vmwareenginePrivateCloudManagementClusterNodeTypeConfigsToHclTerraform = exports.vmwareenginePrivateCloudManagementClusterNodeTypeConfigsToTerraform = exports.VmwareenginePrivateCloudManagementClusterAutoscalingSettingsOutputReference = exports.vmwareenginePrivateCloudManagementClusterAutoscalingSettingsToHclTerraform = exports.vmwareenginePrivateCloudManagementClusterAutoscalingSettingsToTerraform = exports.VmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesList = exports.VmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesOutputReference = exports.vmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesToHclTerraform = exports.vmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesToTerraform = exports.VmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesStorageThresholdsOutputReference = exports.vmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesStorageThresholdsToHclTerraform = exports.vmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesStorageThresholdsToTerraform = exports.VmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesCpuThresholdsOutputReference = exports.vmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesCpuThresholdsToHclTerraform = exports.vmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesCpuThresholdsToTerraform = exports.VmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesConsumedMemoryThresholdsOutputReference = exports.vmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesConsumedMemoryThresholdsToHclTerraform = exports.vmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesConsumedMemoryThresholdsToTerraform = exports.VmwareenginePrivateCloudVcenterList = exports.VmwareenginePrivateCloudVcenterOutputReference = exports.vmwareenginePrivateCloudVcenterToHclTerraform = exports.vmwareenginePrivateCloudVcenterToTerraform = exports.VmwareenginePrivateCloudNsxList = exports.VmwareenginePrivateCloudNsxOutputReference = exports.vmwareenginePrivateCloudNsxToHclTerraform = exports.vmwareenginePrivateCloudNsxToTerraform = exports.VmwareenginePrivateCloudHcxList = exports.VmwareenginePrivateCloudHcxOutputReference = exports.vmwareenginePrivateCloudHcxToHclTerraform = exports.vmwareenginePrivateCloudHcxToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function vmwareenginePrivateCloudHcxToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.vmwareenginePrivateCloudHcxToTerraform = vmwareenginePrivateCloudHcxToTerraform;
function vmwareenginePrivateCloudHcxToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.vmwareenginePrivateCloudHcxToHclTerraform = vmwareenginePrivateCloudHcxToHclTerraform;
class VmwareenginePrivateCloudHcxOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // fqdn - computed: true, optional: false, required: false
    get fqdn() {
        return this.getStringAttribute('fqdn');
    }
    // internal_ip - computed: true, optional: false, required: false
    get internalIp() {
        return this.getStringAttribute('internal_ip');
    }
    // state - computed: true, optional: false, required: false
    get state() {
        return this.getStringAttribute('state');
    }
    // version - computed: true, optional: false, required: false
    get version() {
        return this.getStringAttribute('version');
    }
}
exports.VmwareenginePrivateCloudHcxOutputReference = VmwareenginePrivateCloudHcxOutputReference;
_a = JSII_RTTI_SYMBOL_1;
VmwareenginePrivateCloudHcxOutputReference[_a] = { fqn: "@cdktf/provider-google.vmwareenginePrivateCloud.VmwareenginePrivateCloudHcxOutputReference", version: "14.13.1" };
class VmwareenginePrivateCloudHcxList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new VmwareenginePrivateCloudHcxOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.VmwareenginePrivateCloudHcxList = VmwareenginePrivateCloudHcxList;
_b = JSII_RTTI_SYMBOL_1;
VmwareenginePrivateCloudHcxList[_b] = { fqn: "@cdktf/provider-google.vmwareenginePrivateCloud.VmwareenginePrivateCloudHcxList", version: "14.13.1" };
function vmwareenginePrivateCloudNsxToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.vmwareenginePrivateCloudNsxToTerraform = vmwareenginePrivateCloudNsxToTerraform;
function vmwareenginePrivateCloudNsxToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.vmwareenginePrivateCloudNsxToHclTerraform = vmwareenginePrivateCloudNsxToHclTerraform;
class VmwareenginePrivateCloudNsxOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // fqdn - computed: true, optional: false, required: false
    get fqdn() {
        return this.getStringAttribute('fqdn');
    }
    // internal_ip - computed: true, optional: false, required: false
    get internalIp() {
        return this.getStringAttribute('internal_ip');
    }
    // state - computed: true, optional: false, required: false
    get state() {
        return this.getStringAttribute('state');
    }
    // version - computed: true, optional: false, required: false
    get version() {
        return this.getStringAttribute('version');
    }
}
exports.VmwareenginePrivateCloudNsxOutputReference = VmwareenginePrivateCloudNsxOutputReference;
_c = JSII_RTTI_SYMBOL_1;
VmwareenginePrivateCloudNsxOutputReference[_c] = { fqn: "@cdktf/provider-google.vmwareenginePrivateCloud.VmwareenginePrivateCloudNsxOutputReference", version: "14.13.1" };
class VmwareenginePrivateCloudNsxList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new VmwareenginePrivateCloudNsxOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.VmwareenginePrivateCloudNsxList = VmwareenginePrivateCloudNsxList;
_d = JSII_RTTI_SYMBOL_1;
VmwareenginePrivateCloudNsxList[_d] = { fqn: "@cdktf/provider-google.vmwareenginePrivateCloud.VmwareenginePrivateCloudNsxList", version: "14.13.1" };
function vmwareenginePrivateCloudVcenterToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.vmwareenginePrivateCloudVcenterToTerraform = vmwareenginePrivateCloudVcenterToTerraform;
function vmwareenginePrivateCloudVcenterToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.vmwareenginePrivateCloudVcenterToHclTerraform = vmwareenginePrivateCloudVcenterToHclTerraform;
class VmwareenginePrivateCloudVcenterOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // fqdn - computed: true, optional: false, required: false
    get fqdn() {
        return this.getStringAttribute('fqdn');
    }
    // internal_ip - computed: true, optional: false, required: false
    get internalIp() {
        return this.getStringAttribute('internal_ip');
    }
    // state - computed: true, optional: false, required: false
    get state() {
        return this.getStringAttribute('state');
    }
    // version - computed: true, optional: false, required: false
    get version() {
        return this.getStringAttribute('version');
    }
}
exports.VmwareenginePrivateCloudVcenterOutputReference = VmwareenginePrivateCloudVcenterOutputReference;
_e = JSII_RTTI_SYMBOL_1;
VmwareenginePrivateCloudVcenterOutputReference[_e] = { fqn: "@cdktf/provider-google.vmwareenginePrivateCloud.VmwareenginePrivateCloudVcenterOutputReference", version: "14.13.1" };
class VmwareenginePrivateCloudVcenterList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new VmwareenginePrivateCloudVcenterOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.VmwareenginePrivateCloudVcenterList = VmwareenginePrivateCloudVcenterList;
_f = JSII_RTTI_SYMBOL_1;
VmwareenginePrivateCloudVcenterList[_f] = { fqn: "@cdktf/provider-google.vmwareenginePrivateCloud.VmwareenginePrivateCloudVcenterList", version: "14.13.1" };
function vmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesConsumedMemoryThresholdsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        scale_in: cdktf.numberToTerraform(struct.scaleIn),
        scale_out: cdktf.numberToTerraform(struct.scaleOut),
    };
}
exports.vmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesConsumedMemoryThresholdsToTerraform = vmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesConsumedMemoryThresholdsToTerraform;
function vmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesConsumedMemoryThresholdsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        scale_in: {
            value: cdktf.numberToHclTerraform(struct.scaleIn),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        scale_out: {
            value: cdktf.numberToHclTerraform(struct.scaleOut),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.vmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesConsumedMemoryThresholdsToHclTerraform = vmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesConsumedMemoryThresholdsToHclTerraform;
class VmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesConsumedMemoryThresholdsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._scaleIn !== undefined) {
            hasAnyValues = true;
            internalValueResult.scaleIn = this._scaleIn;
        }
        if (this._scaleOut !== undefined) {
            hasAnyValues = true;
            internalValueResult.scaleOut = this._scaleOut;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._scaleIn = undefined;
            this._scaleOut = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._scaleIn = value.scaleIn;
            this._scaleOut = value.scaleOut;
        }
    }
    get scaleIn() {
        return this.getNumberAttribute('scale_in');
    }
    set scaleIn(value) {
        this._scaleIn = value;
    }
    // Temporarily expose input value. Use with caution.
    get scaleInInput() {
        return this._scaleIn;
    }
    get scaleOut() {
        return this.getNumberAttribute('scale_out');
    }
    set scaleOut(value) {
        this._scaleOut = value;
    }
    // Temporarily expose input value. Use with caution.
    get scaleOutInput() {
        return this._scaleOut;
    }
}
exports.VmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesConsumedMemoryThresholdsOutputReference = VmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesConsumedMemoryThresholdsOutputReference;
_g = JSII_RTTI_SYMBOL_1;
VmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesConsumedMemoryThresholdsOutputReference[_g] = { fqn: "@cdktf/provider-google.vmwareenginePrivateCloud.VmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesConsumedMemoryThresholdsOutputReference", version: "14.13.1" };
function vmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesCpuThresholdsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        scale_in: cdktf.numberToTerraform(struct.scaleIn),
        scale_out: cdktf.numberToTerraform(struct.scaleOut),
    };
}
exports.vmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesCpuThresholdsToTerraform = vmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesCpuThresholdsToTerraform;
function vmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesCpuThresholdsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        scale_in: {
            value: cdktf.numberToHclTerraform(struct.scaleIn),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        scale_out: {
            value: cdktf.numberToHclTerraform(struct.scaleOut),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.vmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesCpuThresholdsToHclTerraform = vmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesCpuThresholdsToHclTerraform;
class VmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesCpuThresholdsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._scaleIn !== undefined) {
            hasAnyValues = true;
            internalValueResult.scaleIn = this._scaleIn;
        }
        if (this._scaleOut !== undefined) {
            hasAnyValues = true;
            internalValueResult.scaleOut = this._scaleOut;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._scaleIn = undefined;
            this._scaleOut = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._scaleIn = value.scaleIn;
            this._scaleOut = value.scaleOut;
        }
    }
    get scaleIn() {
        return this.getNumberAttribute('scale_in');
    }
    set scaleIn(value) {
        this._scaleIn = value;
    }
    // Temporarily expose input value. Use with caution.
    get scaleInInput() {
        return this._scaleIn;
    }
    get scaleOut() {
        return this.getNumberAttribute('scale_out');
    }
    set scaleOut(value) {
        this._scaleOut = value;
    }
    // Temporarily expose input value. Use with caution.
    get scaleOutInput() {
        return this._scaleOut;
    }
}
exports.VmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesCpuThresholdsOutputReference = VmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesCpuThresholdsOutputReference;
_h = JSII_RTTI_SYMBOL_1;
VmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesCpuThresholdsOutputReference[_h] = { fqn: "@cdktf/provider-google.vmwareenginePrivateCloud.VmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesCpuThresholdsOutputReference", version: "14.13.1" };
function vmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesStorageThresholdsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        scale_in: cdktf.numberToTerraform(struct.scaleIn),
        scale_out: cdktf.numberToTerraform(struct.scaleOut),
    };
}
exports.vmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesStorageThresholdsToTerraform = vmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesStorageThresholdsToTerraform;
function vmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesStorageThresholdsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        scale_in: {
            value: cdktf.numberToHclTerraform(struct.scaleIn),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        scale_out: {
            value: cdktf.numberToHclTerraform(struct.scaleOut),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.vmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesStorageThresholdsToHclTerraform = vmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesStorageThresholdsToHclTerraform;
class VmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesStorageThresholdsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._scaleIn !== undefined) {
            hasAnyValues = true;
            internalValueResult.scaleIn = this._scaleIn;
        }
        if (this._scaleOut !== undefined) {
            hasAnyValues = true;
            internalValueResult.scaleOut = this._scaleOut;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._scaleIn = undefined;
            this._scaleOut = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._scaleIn = value.scaleIn;
            this._scaleOut = value.scaleOut;
        }
    }
    get scaleIn() {
        return this.getNumberAttribute('scale_in');
    }
    set scaleIn(value) {
        this._scaleIn = value;
    }
    // Temporarily expose input value. Use with caution.
    get scaleInInput() {
        return this._scaleIn;
    }
    get scaleOut() {
        return this.getNumberAttribute('scale_out');
    }
    set scaleOut(value) {
        this._scaleOut = value;
    }
    // Temporarily expose input value. Use with caution.
    get scaleOutInput() {
        return this._scaleOut;
    }
}
exports.VmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesStorageThresholdsOutputReference = VmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesStorageThresholdsOutputReference;
_j = JSII_RTTI_SYMBOL_1;
VmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesStorageThresholdsOutputReference[_j] = { fqn: "@cdktf/provider-google.vmwareenginePrivateCloud.VmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesStorageThresholdsOutputReference", version: "14.13.1" };
function vmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        autoscale_policy_id: cdktf.stringToTerraform(struct.autoscalePolicyId),
        node_type_id: cdktf.stringToTerraform(struct.nodeTypeId),
        scale_out_size: cdktf.numberToTerraform(struct.scaleOutSize),
        consumed_memory_thresholds: vmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesConsumedMemoryThresholdsToTerraform(struct.consumedMemoryThresholds),
        cpu_thresholds: vmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesCpuThresholdsToTerraform(struct.cpuThresholds),
        storage_thresholds: vmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesStorageThresholdsToTerraform(struct.storageThresholds),
    };
}
exports.vmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesToTerraform = vmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesToTerraform;
function vmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        autoscale_policy_id: {
            value: cdktf.stringToHclTerraform(struct.autoscalePolicyId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        node_type_id: {
            value: cdktf.stringToHclTerraform(struct.nodeTypeId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        scale_out_size: {
            value: cdktf.numberToHclTerraform(struct.scaleOutSize),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        consumed_memory_thresholds: {
            value: vmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesConsumedMemoryThresholdsToHclTerraform(struct.consumedMemoryThresholds),
            isBlock: true,
            type: "list",
            storageClassType: "VmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesConsumedMemoryThresholdsList",
        },
        cpu_thresholds: {
            value: vmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesCpuThresholdsToHclTerraform(struct.cpuThresholds),
            isBlock: true,
            type: "list",
            storageClassType: "VmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesCpuThresholdsList",
        },
        storage_thresholds: {
            value: vmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesStorageThresholdsToHclTerraform(struct.storageThresholds),
            isBlock: true,
            type: "list",
            storageClassType: "VmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesStorageThresholdsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.vmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesToHclTerraform = vmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesToHclTerraform;
class VmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // consumed_memory_thresholds - computed: false, optional: true, required: false
        this._consumedMemoryThresholds = new VmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesConsumedMemoryThresholdsOutputReference(this, "consumed_memory_thresholds");
        // cpu_thresholds - computed: false, optional: true, required: false
        this._cpuThresholds = new VmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesCpuThresholdsOutputReference(this, "cpu_thresholds");
        // storage_thresholds - computed: false, optional: true, required: false
        this._storageThresholds = new VmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesStorageThresholdsOutputReference(this, "storage_thresholds");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._autoscalePolicyId !== undefined) {
            hasAnyValues = true;
            internalValueResult.autoscalePolicyId = this._autoscalePolicyId;
        }
        if (this._nodeTypeId !== undefined) {
            hasAnyValues = true;
            internalValueResult.nodeTypeId = this._nodeTypeId;
        }
        if (this._scaleOutSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.scaleOutSize = this._scaleOutSize;
        }
        if (this._consumedMemoryThresholds?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.consumedMemoryThresholds = this._consumedMemoryThresholds?.internalValue;
        }
        if (this._cpuThresholds?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cpuThresholds = this._cpuThresholds?.internalValue;
        }
        if (this._storageThresholds?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.storageThresholds = this._storageThresholds?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._autoscalePolicyId = undefined;
            this._nodeTypeId = undefined;
            this._scaleOutSize = undefined;
            this._consumedMemoryThresholds.internalValue = undefined;
            this._cpuThresholds.internalValue = undefined;
            this._storageThresholds.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._autoscalePolicyId = value.autoscalePolicyId;
            this._nodeTypeId = value.nodeTypeId;
            this._scaleOutSize = value.scaleOutSize;
            this._consumedMemoryThresholds.internalValue = value.consumedMemoryThresholds;
            this._cpuThresholds.internalValue = value.cpuThresholds;
            this._storageThresholds.internalValue = value.storageThresholds;
        }
    }
    get autoscalePolicyId() {
        return this.getStringAttribute('autoscale_policy_id');
    }
    set autoscalePolicyId(value) {
        this._autoscalePolicyId = value;
    }
    // Temporarily expose input value. Use with caution.
    get autoscalePolicyIdInput() {
        return this._autoscalePolicyId;
    }
    get nodeTypeId() {
        return this.getStringAttribute('node_type_id');
    }
    set nodeTypeId(value) {
        this._nodeTypeId = value;
    }
    // Temporarily expose input value. Use with caution.
    get nodeTypeIdInput() {
        return this._nodeTypeId;
    }
    get scaleOutSize() {
        return this.getNumberAttribute('scale_out_size');
    }
    set scaleOutSize(value) {
        this._scaleOutSize = value;
    }
    // Temporarily expose input value. Use with caution.
    get scaleOutSizeInput() {
        return this._scaleOutSize;
    }
    get consumedMemoryThresholds() {
        return this._consumedMemoryThresholds;
    }
    putConsumedMemoryThresholds(value) {
        this._consumedMemoryThresholds.internalValue = value;
    }
    resetConsumedMemoryThresholds() {
        this._consumedMemoryThresholds.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get consumedMemoryThresholdsInput() {
        return this._consumedMemoryThresholds.internalValue;
    }
    get cpuThresholds() {
        return this._cpuThresholds;
    }
    putCpuThresholds(value) {
        this._cpuThresholds.internalValue = value;
    }
    resetCpuThresholds() {
        this._cpuThresholds.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cpuThresholdsInput() {
        return this._cpuThresholds.internalValue;
    }
    get storageThresholds() {
        return this._storageThresholds;
    }
    putStorageThresholds(value) {
        this._storageThresholds.internalValue = value;
    }
    resetStorageThresholds() {
        this._storageThresholds.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get storageThresholdsInput() {
        return this._storageThresholds.internalValue;
    }
}
exports.VmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesOutputReference = VmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesOutputReference;
_k = JSII_RTTI_SYMBOL_1;
VmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesOutputReference[_k] = { fqn: "@cdktf/provider-google.vmwareenginePrivateCloud.VmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesOutputReference", version: "14.13.1" };
class VmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new VmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.VmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesList = VmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesList;
_l = JSII_RTTI_SYMBOL_1;
VmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesList[_l] = { fqn: "@cdktf/provider-google.vmwareenginePrivateCloud.VmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesList", version: "14.13.1" };
function vmwareenginePrivateCloudManagementClusterAutoscalingSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cool_down_period: cdktf.stringToTerraform(struct.coolDownPeriod),
        max_cluster_node_count: cdktf.numberToTerraform(struct.maxClusterNodeCount),
        min_cluster_node_count: cdktf.numberToTerraform(struct.minClusterNodeCount),
        autoscaling_policies: cdktf.listMapper(vmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesToTerraform, true)(struct.autoscalingPolicies),
    };
}
exports.vmwareenginePrivateCloudManagementClusterAutoscalingSettingsToTerraform = vmwareenginePrivateCloudManagementClusterAutoscalingSettingsToTerraform;
function vmwareenginePrivateCloudManagementClusterAutoscalingSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cool_down_period: {
            value: cdktf.stringToHclTerraform(struct.coolDownPeriod),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        max_cluster_node_count: {
            value: cdktf.numberToHclTerraform(struct.maxClusterNodeCount),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        min_cluster_node_count: {
            value: cdktf.numberToHclTerraform(struct.minClusterNodeCount),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        autoscaling_policies: {
            value: cdktf.listMapperHcl(vmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesToHclTerraform, true)(struct.autoscalingPolicies),
            isBlock: true,
            type: "set",
            storageClassType: "VmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.vmwareenginePrivateCloudManagementClusterAutoscalingSettingsToHclTerraform = vmwareenginePrivateCloudManagementClusterAutoscalingSettingsToHclTerraform;
class VmwareenginePrivateCloudManagementClusterAutoscalingSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // autoscaling_policies - computed: false, optional: false, required: true
        this._autoscalingPolicies = new VmwareenginePrivateCloudManagementClusterAutoscalingSettingsAutoscalingPoliciesList(this, "autoscaling_policies", true);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._coolDownPeriod !== undefined) {
            hasAnyValues = true;
            internalValueResult.coolDownPeriod = this._coolDownPeriod;
        }
        if (this._maxClusterNodeCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxClusterNodeCount = this._maxClusterNodeCount;
        }
        if (this._minClusterNodeCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.minClusterNodeCount = this._minClusterNodeCount;
        }
        if (this._autoscalingPolicies?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.autoscalingPolicies = this._autoscalingPolicies?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._coolDownPeriod = undefined;
            this._maxClusterNodeCount = undefined;
            this._minClusterNodeCount = undefined;
            this._autoscalingPolicies.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._coolDownPeriod = value.coolDownPeriod;
            this._maxClusterNodeCount = value.maxClusterNodeCount;
            this._minClusterNodeCount = value.minClusterNodeCount;
            this._autoscalingPolicies.internalValue = value.autoscalingPolicies;
        }
    }
    get coolDownPeriod() {
        return this.getStringAttribute('cool_down_period');
    }
    set coolDownPeriod(value) {
        this._coolDownPeriod = value;
    }
    resetCoolDownPeriod() {
        this._coolDownPeriod = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get coolDownPeriodInput() {
        return this._coolDownPeriod;
    }
    get maxClusterNodeCount() {
        return this.getNumberAttribute('max_cluster_node_count');
    }
    set maxClusterNodeCount(value) {
        this._maxClusterNodeCount = value;
    }
    resetMaxClusterNodeCount() {
        this._maxClusterNodeCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxClusterNodeCountInput() {
        return this._maxClusterNodeCount;
    }
    get minClusterNodeCount() {
        return this.getNumberAttribute('min_cluster_node_count');
    }
    set minClusterNodeCount(value) {
        this._minClusterNodeCount = value;
    }
    resetMinClusterNodeCount() {
        this._minClusterNodeCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minClusterNodeCountInput() {
        return this._minClusterNodeCount;
    }
    get autoscalingPolicies() {
        return this._autoscalingPolicies;
    }
    putAutoscalingPolicies(value) {
        this._autoscalingPolicies.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get autoscalingPoliciesInput() {
        return this._autoscalingPolicies.internalValue;
    }
}
exports.VmwareenginePrivateCloudManagementClusterAutoscalingSettingsOutputReference = VmwareenginePrivateCloudManagementClusterAutoscalingSettingsOutputReference;
_m = JSII_RTTI_SYMBOL_1;
VmwareenginePrivateCloudManagementClusterAutoscalingSettingsOutputReference[_m] = { fqn: "@cdktf/provider-google.vmwareenginePrivateCloud.VmwareenginePrivateCloudManagementClusterAutoscalingSettingsOutputReference", version: "14.13.1" };
function vmwareenginePrivateCloudManagementClusterNodeTypeConfigsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        custom_core_count: cdktf.numberToTerraform(struct.customCoreCount),
        node_count: cdktf.numberToTerraform(struct.nodeCount),
        node_type_id: cdktf.stringToTerraform(struct.nodeTypeId),
    };
}
exports.vmwareenginePrivateCloudManagementClusterNodeTypeConfigsToTerraform = vmwareenginePrivateCloudManagementClusterNodeTypeConfigsToTerraform;
function vmwareenginePrivateCloudManagementClusterNodeTypeConfigsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        custom_core_count: {
            value: cdktf.numberToHclTerraform(struct.customCoreCount),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        node_count: {
            value: cdktf.numberToHclTerraform(struct.nodeCount),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        node_type_id: {
            value: cdktf.stringToHclTerraform(struct.nodeTypeId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.vmwareenginePrivateCloudManagementClusterNodeTypeConfigsToHclTerraform = vmwareenginePrivateCloudManagementClusterNodeTypeConfigsToHclTerraform;
class VmwareenginePrivateCloudManagementClusterNodeTypeConfigsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._customCoreCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.customCoreCount = this._customCoreCount;
        }
        if (this._nodeCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.nodeCount = this._nodeCount;
        }
        if (this._nodeTypeId !== undefined) {
            hasAnyValues = true;
            internalValueResult.nodeTypeId = this._nodeTypeId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._customCoreCount = undefined;
            this._nodeCount = undefined;
            this._nodeTypeId = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._customCoreCount = value.customCoreCount;
            this._nodeCount = value.nodeCount;
            this._nodeTypeId = value.nodeTypeId;
        }
    }
    get customCoreCount() {
        return this.getNumberAttribute('custom_core_count');
    }
    set customCoreCount(value) {
        this._customCoreCount = value;
    }
    resetCustomCoreCount() {
        this._customCoreCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customCoreCountInput() {
        return this._customCoreCount;
    }
    get nodeCount() {
        return this.getNumberAttribute('node_count');
    }
    set nodeCount(value) {
        this._nodeCount = value;
    }
    // Temporarily expose input value. Use with caution.
    get nodeCountInput() {
        return this._nodeCount;
    }
    get nodeTypeId() {
        return this.getStringAttribute('node_type_id');
    }
    set nodeTypeId(value) {
        this._nodeTypeId = value;
    }
    // Temporarily expose input value. Use with caution.
    get nodeTypeIdInput() {
        return this._nodeTypeId;
    }
}
exports.VmwareenginePrivateCloudManagementClusterNodeTypeConfigsOutputReference = VmwareenginePrivateCloudManagementClusterNodeTypeConfigsOutputReference;
_o = JSII_RTTI_SYMBOL_1;
VmwareenginePrivateCloudManagementClusterNodeTypeConfigsOutputReference[_o] = { fqn: "@cdktf/provider-google.vmwareenginePrivateCloud.VmwareenginePrivateCloudManagementClusterNodeTypeConfigsOutputReference", version: "14.13.1" };
class VmwareenginePrivateCloudManagementClusterNodeTypeConfigsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new VmwareenginePrivateCloudManagementClusterNodeTypeConfigsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.VmwareenginePrivateCloudManagementClusterNodeTypeConfigsList = VmwareenginePrivateCloudManagementClusterNodeTypeConfigsList;
_p = JSII_RTTI_SYMBOL_1;
VmwareenginePrivateCloudManagementClusterNodeTypeConfigsList[_p] = { fqn: "@cdktf/provider-google.vmwareenginePrivateCloud.VmwareenginePrivateCloudManagementClusterNodeTypeConfigsList", version: "14.13.1" };
function vmwareenginePrivateCloudManagementClusterStretchedClusterConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        preferred_location: cdktf.stringToTerraform(struct.preferredLocation),
        secondary_location: cdktf.stringToTerraform(struct.secondaryLocation),
    };
}
exports.vmwareenginePrivateCloudManagementClusterStretchedClusterConfigToTerraform = vmwareenginePrivateCloudManagementClusterStretchedClusterConfigToTerraform;
function vmwareenginePrivateCloudManagementClusterStretchedClusterConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        preferred_location: {
            value: cdktf.stringToHclTerraform(struct.preferredLocation),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        secondary_location: {
            value: cdktf.stringToHclTerraform(struct.secondaryLocation),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.vmwareenginePrivateCloudManagementClusterStretchedClusterConfigToHclTerraform = vmwareenginePrivateCloudManagementClusterStretchedClusterConfigToHclTerraform;
class VmwareenginePrivateCloudManagementClusterStretchedClusterConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._preferredLocation !== undefined) {
            hasAnyValues = true;
            internalValueResult.preferredLocation = this._preferredLocation;
        }
        if (this._secondaryLocation !== undefined) {
            hasAnyValues = true;
            internalValueResult.secondaryLocation = this._secondaryLocation;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._preferredLocation = undefined;
            this._secondaryLocation = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._preferredLocation = value.preferredLocation;
            this._secondaryLocation = value.secondaryLocation;
        }
    }
    get preferredLocation() {
        return this.getStringAttribute('preferred_location');
    }
    set preferredLocation(value) {
        this._preferredLocation = value;
    }
    resetPreferredLocation() {
        this._preferredLocation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get preferredLocationInput() {
        return this._preferredLocation;
    }
    get secondaryLocation() {
        return this.getStringAttribute('secondary_location');
    }
    set secondaryLocation(value) {
        this._secondaryLocation = value;
    }
    resetSecondaryLocation() {
        this._secondaryLocation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secondaryLocationInput() {
        return this._secondaryLocation;
    }
}
exports.VmwareenginePrivateCloudManagementClusterStretchedClusterConfigOutputReference = VmwareenginePrivateCloudManagementClusterStretchedClusterConfigOutputReference;
_q = JSII_RTTI_SYMBOL_1;
VmwareenginePrivateCloudManagementClusterStretchedClusterConfigOutputReference[_q] = { fqn: "@cdktf/provider-google.vmwareenginePrivateCloud.VmwareenginePrivateCloudManagementClusterStretchedClusterConfigOutputReference", version: "14.13.1" };
function vmwareenginePrivateCloudManagementClusterToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cluster_id: cdktf.stringToTerraform(struct.clusterId),
        autoscaling_settings: vmwareenginePrivateCloudManagementClusterAutoscalingSettingsToTerraform(struct.autoscalingSettings),
        node_type_configs: cdktf.listMapper(vmwareenginePrivateCloudManagementClusterNodeTypeConfigsToTerraform, true)(struct.nodeTypeConfigs),
        stretched_cluster_config: vmwareenginePrivateCloudManagementClusterStretchedClusterConfigToTerraform(struct.stretchedClusterConfig),
    };
}
exports.vmwareenginePrivateCloudManagementClusterToTerraform = vmwareenginePrivateCloudManagementClusterToTerraform;
function vmwareenginePrivateCloudManagementClusterToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cluster_id: {
            value: cdktf.stringToHclTerraform(struct.clusterId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        autoscaling_settings: {
            value: vmwareenginePrivateCloudManagementClusterAutoscalingSettingsToHclTerraform(struct.autoscalingSettings),
            isBlock: true,
            type: "list",
            storageClassType: "VmwareenginePrivateCloudManagementClusterAutoscalingSettingsList",
        },
        node_type_configs: {
            value: cdktf.listMapperHcl(vmwareenginePrivateCloudManagementClusterNodeTypeConfigsToHclTerraform, true)(struct.nodeTypeConfigs),
            isBlock: true,
            type: "set",
            storageClassType: "VmwareenginePrivateCloudManagementClusterNodeTypeConfigsList",
        },
        stretched_cluster_config: {
            value: vmwareenginePrivateCloudManagementClusterStretchedClusterConfigToHclTerraform(struct.stretchedClusterConfig),
            isBlock: true,
            type: "list",
            storageClassType: "VmwareenginePrivateCloudManagementClusterStretchedClusterConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.vmwareenginePrivateCloudManagementClusterToHclTerraform = vmwareenginePrivateCloudManagementClusterToHclTerraform;
class VmwareenginePrivateCloudManagementClusterOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // autoscaling_settings - computed: false, optional: true, required: false
        this._autoscalingSettings = new VmwareenginePrivateCloudManagementClusterAutoscalingSettingsOutputReference(this, "autoscaling_settings");
        // node_type_configs - computed: false, optional: true, required: false
        this._nodeTypeConfigs = new VmwareenginePrivateCloudManagementClusterNodeTypeConfigsList(this, "node_type_configs", true);
        // stretched_cluster_config - computed: false, optional: true, required: false
        this._stretchedClusterConfig = new VmwareenginePrivateCloudManagementClusterStretchedClusterConfigOutputReference(this, "stretched_cluster_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._clusterId !== undefined) {
            hasAnyValues = true;
            internalValueResult.clusterId = this._clusterId;
        }
        if (this._autoscalingSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.autoscalingSettings = this._autoscalingSettings?.internalValue;
        }
        if (this._nodeTypeConfigs?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.nodeTypeConfigs = this._nodeTypeConfigs?.internalValue;
        }
        if (this._stretchedClusterConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.stretchedClusterConfig = this._stretchedClusterConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._clusterId = undefined;
            this._autoscalingSettings.internalValue = undefined;
            this._nodeTypeConfigs.internalValue = undefined;
            this._stretchedClusterConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._clusterId = value.clusterId;
            this._autoscalingSettings.internalValue = value.autoscalingSettings;
            this._nodeTypeConfigs.internalValue = value.nodeTypeConfigs;
            this._stretchedClusterConfig.internalValue = value.stretchedClusterConfig;
        }
    }
    get clusterId() {
        return this.getStringAttribute('cluster_id');
    }
    set clusterId(value) {
        this._clusterId = value;
    }
    // Temporarily expose input value. Use with caution.
    get clusterIdInput() {
        return this._clusterId;
    }
    get autoscalingSettings() {
        return this._autoscalingSettings;
    }
    putAutoscalingSettings(value) {
        this._autoscalingSettings.internalValue = value;
    }
    resetAutoscalingSettings() {
        this._autoscalingSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoscalingSettingsInput() {
        return this._autoscalingSettings.internalValue;
    }
    get nodeTypeConfigs() {
        return this._nodeTypeConfigs;
    }
    putNodeTypeConfigs(value) {
        this._nodeTypeConfigs.internalValue = value;
    }
    resetNodeTypeConfigs() {
        this._nodeTypeConfigs.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nodeTypeConfigsInput() {
        return this._nodeTypeConfigs.internalValue;
    }
    get stretchedClusterConfig() {
        return this._stretchedClusterConfig;
    }
    putStretchedClusterConfig(value) {
        this._stretchedClusterConfig.internalValue = value;
    }
    resetStretchedClusterConfig() {
        this._stretchedClusterConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stretchedClusterConfigInput() {
        return this._stretchedClusterConfig.internalValue;
    }
}
exports.VmwareenginePrivateCloudManagementClusterOutputReference = VmwareenginePrivateCloudManagementClusterOutputReference;
_r = JSII_RTTI_SYMBOL_1;
VmwareenginePrivateCloudManagementClusterOutputReference[_r] = { fqn: "@cdktf/provider-google.vmwareenginePrivateCloud.VmwareenginePrivateCloudManagementClusterOutputReference", version: "14.13.1" };
function vmwareenginePrivateCloudNetworkConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        management_cidr: cdktf.stringToTerraform(struct.managementCidr),
        vmware_engine_network: cdktf.stringToTerraform(struct.vmwareEngineNetwork),
    };
}
exports.vmwareenginePrivateCloudNetworkConfigToTerraform = vmwareenginePrivateCloudNetworkConfigToTerraform;
function vmwareenginePrivateCloudNetworkConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        management_cidr: {
            value: cdktf.stringToHclTerraform(struct.managementCidr),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        vmware_engine_network: {
            value: cdktf.stringToHclTerraform(struct.vmwareEngineNetwork),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.vmwareenginePrivateCloudNetworkConfigToHclTerraform = vmwareenginePrivateCloudNetworkConfigToHclTerraform;
class VmwareenginePrivateCloudNetworkConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._managementCidr !== undefined) {
            hasAnyValues = true;
            internalValueResult.managementCidr = this._managementCidr;
        }
        if (this._vmwareEngineNetwork !== undefined) {
            hasAnyValues = true;
            internalValueResult.vmwareEngineNetwork = this._vmwareEngineNetwork;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._managementCidr = undefined;
            this._vmwareEngineNetwork = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._managementCidr = value.managementCidr;
            this._vmwareEngineNetwork = value.vmwareEngineNetwork;
        }
    }
    // dns_server_ip - computed: true, optional: false, required: false
    get dnsServerIp() {
        return this.getStringAttribute('dns_server_ip');
    }
    get managementCidr() {
        return this.getStringAttribute('management_cidr');
    }
    set managementCidr(value) {
        this._managementCidr = value;
    }
    // Temporarily expose input value. Use with caution.
    get managementCidrInput() {
        return this._managementCidr;
    }
    // management_ip_address_layout_version - computed: true, optional: false, required: false
    get managementIpAddressLayoutVersion() {
        return this.getNumberAttribute('management_ip_address_layout_version');
    }
    get vmwareEngineNetwork() {
        return this.getStringAttribute('vmware_engine_network');
    }
    set vmwareEngineNetwork(value) {
        this._vmwareEngineNetwork = value;
    }
    resetVmwareEngineNetwork() {
        this._vmwareEngineNetwork = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get vmwareEngineNetworkInput() {
        return this._vmwareEngineNetwork;
    }
    // vmware_engine_network_canonical - computed: true, optional: false, required: false
    get vmwareEngineNetworkCanonical() {
        return this.getStringAttribute('vmware_engine_network_canonical');
    }
}
exports.VmwareenginePrivateCloudNetworkConfigOutputReference = VmwareenginePrivateCloudNetworkConfigOutputReference;
_s = JSII_RTTI_SYMBOL_1;
VmwareenginePrivateCloudNetworkConfigOutputReference[_s] = { fqn: "@cdktf/provider-google.vmwareenginePrivateCloud.VmwareenginePrivateCloudNetworkConfigOutputReference", version: "14.13.1" };
function vmwareenginePrivateCloudTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.vmwareenginePrivateCloudTimeoutsToTerraform = vmwareenginePrivateCloudTimeoutsToTerraform;
function vmwareenginePrivateCloudTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.vmwareenginePrivateCloudTimeoutsToHclTerraform = vmwareenginePrivateCloudTimeoutsToHclTerraform;
class VmwareenginePrivateCloudTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.VmwareenginePrivateCloudTimeoutsOutputReference = VmwareenginePrivateCloudTimeoutsOutputReference;
_t = JSII_RTTI_SYMBOL_1;
VmwareenginePrivateCloudTimeoutsOutputReference[_t] = { fqn: "@cdktf/provider-google.vmwareenginePrivateCloud.VmwareenginePrivateCloudTimeoutsOutputReference", version: "14.13.1" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/vmwareengine_private_cloud google_vmwareengine_private_cloud}
*/
class VmwareenginePrivateCloud extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a VmwareenginePrivateCloud resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the VmwareenginePrivateCloud to import
    * @param importFromId The id of the existing VmwareenginePrivateCloud that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/vmwareengine_private_cloud#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the VmwareenginePrivateCloud to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_vmwareengine_private_cloud", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/vmwareengine_private_cloud google_vmwareengine_private_cloud} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options VmwareenginePrivateCloudConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_vmwareengine_private_cloud',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // hcx - computed: true, optional: false, required: false
        this._hcx = new VmwareenginePrivateCloudHcxList(this, "hcx", false);
        // nsx - computed: true, optional: false, required: false
        this._nsx = new VmwareenginePrivateCloudNsxList(this, "nsx", false);
        // vcenter - computed: true, optional: false, required: false
        this._vcenter = new VmwareenginePrivateCloudVcenterList(this, "vcenter", false);
        // management_cluster - computed: false, optional: false, required: true
        this._managementCluster = new VmwareenginePrivateCloudManagementClusterOutputReference(this, "management_cluster");
        // network_config - computed: false, optional: false, required: true
        this._networkConfig = new VmwareenginePrivateCloudNetworkConfigOutputReference(this, "network_config");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new VmwareenginePrivateCloudTimeoutsOutputReference(this, "timeouts");
        this._deletionDelayHours = config.deletionDelayHours;
        this._description = config.description;
        this._id = config.id;
        this._location = config.location;
        this._name = config.name;
        this._project = config.project;
        this._sendDeletionDelayHoursIfZero = config.sendDeletionDelayHoursIfZero;
        this._type = config.type;
        this._managementCluster.internalValue = config.managementCluster;
        this._networkConfig.internalValue = config.networkConfig;
        this._timeouts.internalValue = config.timeouts;
    }
    get deletionDelayHours() {
        return this.getNumberAttribute('deletion_delay_hours');
    }
    set deletionDelayHours(value) {
        this._deletionDelayHours = value;
    }
    resetDeletionDelayHours() {
        this._deletionDelayHours = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deletionDelayHoursInput() {
        return this._deletionDelayHours;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get hcx() {
        return this._hcx;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get nsx() {
        return this._nsx;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get sendDeletionDelayHoursIfZero() {
        return this.getBooleanAttribute('send_deletion_delay_hours_if_zero');
    }
    set sendDeletionDelayHoursIfZero(value) {
        this._sendDeletionDelayHoursIfZero = value;
    }
    resetSendDeletionDelayHoursIfZero() {
        this._sendDeletionDelayHoursIfZero = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sendDeletionDelayHoursIfZeroInput() {
        return this._sendDeletionDelayHoursIfZero;
    }
    // state - computed: true, optional: false, required: false
    get state() {
        return this.getStringAttribute('state');
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    resetType() {
        this._type = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    // uid - computed: true, optional: false, required: false
    get uid() {
        return this.getStringAttribute('uid');
    }
    get vcenter() {
        return this._vcenter;
    }
    get managementCluster() {
        return this._managementCluster;
    }
    putManagementCluster(value) {
        this._managementCluster.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get managementClusterInput() {
        return this._managementCluster.internalValue;
    }
    get networkConfig() {
        return this._networkConfig;
    }
    putNetworkConfig(value) {
        this._networkConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get networkConfigInput() {
        return this._networkConfig.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            deletion_delay_hours: cdktf.numberToTerraform(this._deletionDelayHours),
            description: cdktf.stringToTerraform(this._description),
            id: cdktf.stringToTerraform(this._id),
            location: cdktf.stringToTerraform(this._location),
            name: cdktf.stringToTerraform(this._name),
            project: cdktf.stringToTerraform(this._project),
            send_deletion_delay_hours_if_zero: cdktf.booleanToTerraform(this._sendDeletionDelayHoursIfZero),
            type: cdktf.stringToTerraform(this._type),
            management_cluster: vmwareenginePrivateCloudManagementClusterToTerraform(this._managementCluster.internalValue),
            network_config: vmwareenginePrivateCloudNetworkConfigToTerraform(this._networkConfig.internalValue),
            timeouts: vmwareenginePrivateCloudTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            deletion_delay_hours: {
                value: cdktf.numberToHclTerraform(this._deletionDelayHours),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            description: {
                value: cdktf.stringToHclTerraform(this._description),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            location: {
                value: cdktf.stringToHclTerraform(this._location),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            name: {
                value: cdktf.stringToHclTerraform(this._name),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            project: {
                value: cdktf.stringToHclTerraform(this._project),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            send_deletion_delay_hours_if_zero: {
                value: cdktf.booleanToHclTerraform(this._sendDeletionDelayHoursIfZero),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            type: {
                value: cdktf.stringToHclTerraform(this._type),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            management_cluster: {
                value: vmwareenginePrivateCloudManagementClusterToHclTerraform(this._managementCluster.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "VmwareenginePrivateCloudManagementClusterList",
            },
            network_config: {
                value: vmwareenginePrivateCloudNetworkConfigToHclTerraform(this._networkConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "VmwareenginePrivateCloudNetworkConfigList",
            },
            timeouts: {
                value: vmwareenginePrivateCloudTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "VmwareenginePrivateCloudTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.VmwareenginePrivateCloud = VmwareenginePrivateCloud;
_u = JSII_RTTI_SYMBOL_1;
VmwareenginePrivateCloud[_u] = { fqn: "@cdktf/provider-google.vmwareenginePrivateCloud.VmwareenginePrivateCloud", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
VmwareenginePrivateCloud.tfResourceType = "google_vmwareengine_private_cloud";
//# sourceMappingURL=data:application/json;base64,