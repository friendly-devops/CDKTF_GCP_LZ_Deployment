/**
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: MPL-2.0
 */
import { Construct } from 'constructs';
import * as cdktf from 'cdktf';
export interface GkeHubScopeConfig extends cdktf.TerraformMetaArguments {
    /**
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/gke_hub_scope#id GkeHubScope#id}
    *
    * Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2.
    * If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
    */
    readonly id?: string;
    /**
    * Labels for this Scope.
    *
    *
    * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
    * Please refer to the field 'effective_labels' for all of the labels present on the resource.
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/gke_hub_scope#labels GkeHubScope#labels}
    */
    readonly labels?: {
        [key: string]: string;
    };
    /**
    * Scope-level cluster namespace labels. For the member clusters bound
    * to the Scope, these labels are applied to each namespace under the
    * Scope. Scope-level labels take precedence over Namespace-level
    * labels ('namespace_labels' in the Fleet Namespace resource) if they
    * share a key. Keys and values must be Kubernetes-conformant.
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/gke_hub_scope#namespace_labels GkeHubScope#namespace_labels}
    */
    readonly namespaceLabels?: {
        [key: string]: string;
    };
    /**
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/gke_hub_scope#project GkeHubScope#project}
    */
    readonly project?: string;
    /**
    * The client-provided identifier of the scope.
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/gke_hub_scope#scope_id GkeHubScope#scope_id}
    */
    readonly scopeId: string;
    /**
    * timeouts block
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/gke_hub_scope#timeouts GkeHubScope#timeouts}
    */
    readonly timeouts?: GkeHubScopeTimeouts;
}
export interface GkeHubScopeState {
}
export declare function gkeHubScopeStateToTerraform(struct?: GkeHubScopeState): any;
export declare function gkeHubScopeStateToHclTerraform(struct?: GkeHubScopeState): any;
export declare class GkeHubScopeStateOutputReference extends cdktf.ComplexObject {
    private isEmptyObject;
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean);
    get internalValue(): GkeHubScopeState | undefined;
    set internalValue(value: GkeHubScopeState | undefined);
    get code(): string;
}
export declare class GkeHubScopeStateList extends cdktf.ComplexList {
    protected terraformResource: cdktf.IInterpolatingParent;
    protected terraformAttribute: string;
    protected wrapsSet: boolean;
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, wrapsSet: boolean);
    /**
    * @param index the index of the item to return
    */
    get(index: number): GkeHubScopeStateOutputReference;
}
export interface GkeHubScopeTimeouts {
    /**
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/gke_hub_scope#create GkeHubScope#create}
    */
    readonly create?: string;
    /**
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/gke_hub_scope#delete GkeHubScope#delete}
    */
    readonly delete?: string;
    /**
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/gke_hub_scope#update GkeHubScope#update}
    */
    readonly update?: string;
}
export declare function gkeHubScopeTimeoutsToTerraform(struct?: GkeHubScopeTimeouts | cdktf.IResolvable): any;
export declare function gkeHubScopeTimeoutsToHclTerraform(struct?: GkeHubScopeTimeouts | cdktf.IResolvable): any;
export declare class GkeHubScopeTimeoutsOutputReference extends cdktf.ComplexObject {
    private isEmptyObject;
    private resolvableValue?;
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string);
    get internalValue(): GkeHubScopeTimeouts | cdktf.IResolvable | undefined;
    set internalValue(value: GkeHubScopeTimeouts | cdktf.IResolvable | undefined);
    private _create?;
    get create(): string;
    set create(value: string);
    resetCreate(): void;
    get createInput(): string | undefined;
    private _delete?;
    get delete(): string;
    set delete(value: string);
    resetDelete(): void;
    get deleteInput(): string | undefined;
    private _update?;
    get update(): string;
    set update(value: string);
    resetUpdate(): void;
    get updateInput(): string | undefined;
}
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/gke_hub_scope google_gke_hub_scope}
*/
export declare class GkeHubScope extends cdktf.TerraformResource {
    static readonly tfResourceType = "google_gke_hub_scope";
    /**
    * Generates CDKTF code for importing a GkeHubScope resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the GkeHubScope to import
    * @param importFromId The id of the existing GkeHubScope that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/gke_hub_scope#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the GkeHubScope to import is found
    */
    static generateConfigForImport(scope: Construct, importToId: string, importFromId: string, provider?: cdktf.TerraformProvider): cdktf.ImportableResource;
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/gke_hub_scope google_gke_hub_scope} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options GkeHubScopeConfig
    */
    constructor(scope: Construct, id: string, config: GkeHubScopeConfig);
    get createTime(): string;
    get deleteTime(): string;
    private _effectiveLabels;
    get effectiveLabels(): cdktf.StringMap;
    private _id?;
    get id(): string;
    set id(value: string);
    resetId(): void;
    get idInput(): string | undefined;
    private _labels?;
    get labels(): {
        [key: string]: string;
    };
    set labels(value: {
        [key: string]: string;
    });
    resetLabels(): void;
    get labelsInput(): {
        [key: string]: string;
    } | undefined;
    get name(): string;
    private _namespaceLabels?;
    get namespaceLabels(): {
        [key: string]: string;
    };
    set namespaceLabels(value: {
        [key: string]: string;
    });
    resetNamespaceLabels(): void;
    get namespaceLabelsInput(): {
        [key: string]: string;
    } | undefined;
    private _project?;
    get project(): string;
    set project(value: string);
    resetProject(): void;
    get projectInput(): string | undefined;
    private _scopeId?;
    get scopeId(): string;
    set scopeId(value: string);
    get scopeIdInput(): string | undefined;
    private _state;
    get state(): GkeHubScopeStateList;
    private _terraformLabels;
    get terraformLabels(): cdktf.StringMap;
    get uid(): string;
    get updateTime(): string;
    private _timeouts;
    get timeouts(): GkeHubScopeTimeoutsOutputReference;
    putTimeouts(value: GkeHubScopeTimeouts): void;
    resetTimeouts(): void;
    get timeoutsInput(): cdktf.IResolvable | GkeHubScopeTimeouts | undefined;
    protected synthesizeAttributes(): {
        [name: string]: any;
    };
    protected synthesizeHclAttributes(): {
        [name: string]: any;
    };
}
