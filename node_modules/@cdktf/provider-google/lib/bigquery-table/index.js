"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BigqueryTableTableConstraintsForeignKeysColumnReferencesOutputReference = exports.bigqueryTableTableConstraintsForeignKeysColumnReferencesToHclTerraform = exports.bigqueryTableTableConstraintsForeignKeysColumnReferencesToTerraform = exports.BigqueryTableRangePartitioningOutputReference = exports.bigqueryTableRangePartitioningToHclTerraform = exports.bigqueryTableRangePartitioningToTerraform = exports.BigqueryTableRangePartitioningRangeOutputReference = exports.bigqueryTableRangePartitioningRangeToHclTerraform = exports.bigqueryTableRangePartitioningRangeToTerraform = exports.BigqueryTableMaterializedViewOutputReference = exports.bigqueryTableMaterializedViewToHclTerraform = exports.bigqueryTableMaterializedViewToTerraform = exports.BigqueryTableExternalDataConfigurationOutputReference = exports.bigqueryTableExternalDataConfigurationToHclTerraform = exports.bigqueryTableExternalDataConfigurationToTerraform = exports.BigqueryTableExternalDataConfigurationParquetOptionsOutputReference = exports.bigqueryTableExternalDataConfigurationParquetOptionsToHclTerraform = exports.bigqueryTableExternalDataConfigurationParquetOptionsToTerraform = exports.BigqueryTableExternalDataConfigurationJsonOptionsOutputReference = exports.bigqueryTableExternalDataConfigurationJsonOptionsToHclTerraform = exports.bigqueryTableExternalDataConfigurationJsonOptionsToTerraform = exports.BigqueryTableExternalDataConfigurationHivePartitioningOptionsOutputReference = exports.bigqueryTableExternalDataConfigurationHivePartitioningOptionsToHclTerraform = exports.bigqueryTableExternalDataConfigurationHivePartitioningOptionsToTerraform = exports.BigqueryTableExternalDataConfigurationGoogleSheetsOptionsOutputReference = exports.bigqueryTableExternalDataConfigurationGoogleSheetsOptionsToHclTerraform = exports.bigqueryTableExternalDataConfigurationGoogleSheetsOptionsToTerraform = exports.BigqueryTableExternalDataConfigurationCsvOptionsOutputReference = exports.bigqueryTableExternalDataConfigurationCsvOptionsToHclTerraform = exports.bigqueryTableExternalDataConfigurationCsvOptionsToTerraform = exports.BigqueryTableExternalDataConfigurationBigtableOptionsOutputReference = exports.bigqueryTableExternalDataConfigurationBigtableOptionsToHclTerraform = exports.bigqueryTableExternalDataConfigurationBigtableOptionsToTerraform = exports.BigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyList = exports.BigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyOutputReference = exports.bigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyToHclTerraform = exports.bigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyToTerraform = exports.BigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyColumnList = exports.BigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyColumnOutputReference = exports.bigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyColumnToHclTerraform = exports.bigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyColumnToTerraform = exports.BigqueryTableExternalDataConfigurationAvroOptionsOutputReference = exports.bigqueryTableExternalDataConfigurationAvroOptionsToHclTerraform = exports.bigqueryTableExternalDataConfigurationAvroOptionsToTerraform = exports.BigqueryTableEncryptionConfigurationOutputReference = exports.bigqueryTableEncryptionConfigurationToHclTerraform = exports.bigqueryTableEncryptionConfigurationToTerraform = exports.BigqueryTableBiglakeConfigurationOutputReference = exports.bigqueryTableBiglakeConfigurationToHclTerraform = exports.bigqueryTableBiglakeConfigurationToTerraform = void 0;
exports.BigqueryTable = exports.BigqueryTableViewOutputReference = exports.bigqueryTableViewToHclTerraform = exports.bigqueryTableViewToTerraform = exports.BigqueryTableTimePartitioningOutputReference = exports.bigqueryTableTimePartitioningToHclTerraform = exports.bigqueryTableTimePartitioningToTerraform = exports.BigqueryTableTableReplicationInfoOutputReference = exports.bigqueryTableTableReplicationInfoToHclTerraform = exports.bigqueryTableTableReplicationInfoToTerraform = exports.BigqueryTableTableConstraintsOutputReference = exports.bigqueryTableTableConstraintsToHclTerraform = exports.bigqueryTableTableConstraintsToTerraform = exports.BigqueryTableTableConstraintsPrimaryKeyOutputReference = exports.bigqueryTableTableConstraintsPrimaryKeyToHclTerraform = exports.bigqueryTableTableConstraintsPrimaryKeyToTerraform = exports.BigqueryTableTableConstraintsForeignKeysList = exports.BigqueryTableTableConstraintsForeignKeysOutputReference = exports.bigqueryTableTableConstraintsForeignKeysToHclTerraform = exports.bigqueryTableTableConstraintsForeignKeysToTerraform = exports.BigqueryTableTableConstraintsForeignKeysReferencedTableOutputReference = exports.bigqueryTableTableConstraintsForeignKeysReferencedTableToHclTerraform = exports.bigqueryTableTableConstraintsForeignKeysReferencedTableToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function bigqueryTableBiglakeConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        connection_id: cdktf.stringToTerraform(struct.connectionId),
        file_format: cdktf.stringToTerraform(struct.fileFormat),
        storage_uri: cdktf.stringToTerraform(struct.storageUri),
        table_format: cdktf.stringToTerraform(struct.tableFormat),
    };
}
exports.bigqueryTableBiglakeConfigurationToTerraform = bigqueryTableBiglakeConfigurationToTerraform;
function bigqueryTableBiglakeConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        connection_id: {
            value: cdktf.stringToHclTerraform(struct.connectionId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        file_format: {
            value: cdktf.stringToHclTerraform(struct.fileFormat),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        storage_uri: {
            value: cdktf.stringToHclTerraform(struct.storageUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        table_format: {
            value: cdktf.stringToHclTerraform(struct.tableFormat),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.bigqueryTableBiglakeConfigurationToHclTerraform = bigqueryTableBiglakeConfigurationToHclTerraform;
class BigqueryTableBiglakeConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._connectionId !== undefined) {
            hasAnyValues = true;
            internalValueResult.connectionId = this._connectionId;
        }
        if (this._fileFormat !== undefined) {
            hasAnyValues = true;
            internalValueResult.fileFormat = this._fileFormat;
        }
        if (this._storageUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.storageUri = this._storageUri;
        }
        if (this._tableFormat !== undefined) {
            hasAnyValues = true;
            internalValueResult.tableFormat = this._tableFormat;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._connectionId = undefined;
            this._fileFormat = undefined;
            this._storageUri = undefined;
            this._tableFormat = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._connectionId = value.connectionId;
            this._fileFormat = value.fileFormat;
            this._storageUri = value.storageUri;
            this._tableFormat = value.tableFormat;
        }
    }
    get connectionId() {
        return this.getStringAttribute('connection_id');
    }
    set connectionId(value) {
        this._connectionId = value;
    }
    // Temporarily expose input value. Use with caution.
    get connectionIdInput() {
        return this._connectionId;
    }
    get fileFormat() {
        return this.getStringAttribute('file_format');
    }
    set fileFormat(value) {
        this._fileFormat = value;
    }
    // Temporarily expose input value. Use with caution.
    get fileFormatInput() {
        return this._fileFormat;
    }
    get storageUri() {
        return this.getStringAttribute('storage_uri');
    }
    set storageUri(value) {
        this._storageUri = value;
    }
    // Temporarily expose input value. Use with caution.
    get storageUriInput() {
        return this._storageUri;
    }
    get tableFormat() {
        return this.getStringAttribute('table_format');
    }
    set tableFormat(value) {
        this._tableFormat = value;
    }
    // Temporarily expose input value. Use with caution.
    get tableFormatInput() {
        return this._tableFormat;
    }
}
exports.BigqueryTableBiglakeConfigurationOutputReference = BigqueryTableBiglakeConfigurationOutputReference;
_a = JSII_RTTI_SYMBOL_1;
BigqueryTableBiglakeConfigurationOutputReference[_a] = { fqn: "@cdktf/provider-google.bigqueryTable.BigqueryTableBiglakeConfigurationOutputReference", version: "14.13.1" };
function bigqueryTableEncryptionConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        kms_key_name: cdktf.stringToTerraform(struct.kmsKeyName),
    };
}
exports.bigqueryTableEncryptionConfigurationToTerraform = bigqueryTableEncryptionConfigurationToTerraform;
function bigqueryTableEncryptionConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        kms_key_name: {
            value: cdktf.stringToHclTerraform(struct.kmsKeyName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.bigqueryTableEncryptionConfigurationToHclTerraform = bigqueryTableEncryptionConfigurationToHclTerraform;
class BigqueryTableEncryptionConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._kmsKeyName !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyName = this._kmsKeyName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._kmsKeyName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._kmsKeyName = value.kmsKeyName;
        }
    }
    get kmsKeyName() {
        return this.getStringAttribute('kms_key_name');
    }
    set kmsKeyName(value) {
        this._kmsKeyName = value;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyNameInput() {
        return this._kmsKeyName;
    }
    // kms_key_version - computed: true, optional: false, required: false
    get kmsKeyVersion() {
        return this.getStringAttribute('kms_key_version');
    }
}
exports.BigqueryTableEncryptionConfigurationOutputReference = BigqueryTableEncryptionConfigurationOutputReference;
_b = JSII_RTTI_SYMBOL_1;
BigqueryTableEncryptionConfigurationOutputReference[_b] = { fqn: "@cdktf/provider-google.bigqueryTable.BigqueryTableEncryptionConfigurationOutputReference", version: "14.13.1" };
function bigqueryTableExternalDataConfigurationAvroOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        use_avro_logical_types: cdktf.booleanToTerraform(struct.useAvroLogicalTypes),
    };
}
exports.bigqueryTableExternalDataConfigurationAvroOptionsToTerraform = bigqueryTableExternalDataConfigurationAvroOptionsToTerraform;
function bigqueryTableExternalDataConfigurationAvroOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        use_avro_logical_types: {
            value: cdktf.booleanToHclTerraform(struct.useAvroLogicalTypes),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.bigqueryTableExternalDataConfigurationAvroOptionsToHclTerraform = bigqueryTableExternalDataConfigurationAvroOptionsToHclTerraform;
class BigqueryTableExternalDataConfigurationAvroOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._useAvroLogicalTypes !== undefined) {
            hasAnyValues = true;
            internalValueResult.useAvroLogicalTypes = this._useAvroLogicalTypes;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._useAvroLogicalTypes = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._useAvroLogicalTypes = value.useAvroLogicalTypes;
        }
    }
    get useAvroLogicalTypes() {
        return this.getBooleanAttribute('use_avro_logical_types');
    }
    set useAvroLogicalTypes(value) {
        this._useAvroLogicalTypes = value;
    }
    // Temporarily expose input value. Use with caution.
    get useAvroLogicalTypesInput() {
        return this._useAvroLogicalTypes;
    }
}
exports.BigqueryTableExternalDataConfigurationAvroOptionsOutputReference = BigqueryTableExternalDataConfigurationAvroOptionsOutputReference;
_c = JSII_RTTI_SYMBOL_1;
BigqueryTableExternalDataConfigurationAvroOptionsOutputReference[_c] = { fqn: "@cdktf/provider-google.bigqueryTable.BigqueryTableExternalDataConfigurationAvroOptionsOutputReference", version: "14.13.1" };
function bigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyColumnToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        encoding: cdktf.stringToTerraform(struct.encoding),
        field_name: cdktf.stringToTerraform(struct.fieldName),
        only_read_latest: cdktf.booleanToTerraform(struct.onlyReadLatest),
        qualifier_encoded: cdktf.stringToTerraform(struct.qualifierEncoded),
        qualifier_string: cdktf.stringToTerraform(struct.qualifierString),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.bigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyColumnToTerraform = bigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyColumnToTerraform;
function bigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyColumnToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        encoding: {
            value: cdktf.stringToHclTerraform(struct.encoding),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        field_name: {
            value: cdktf.stringToHclTerraform(struct.fieldName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        only_read_latest: {
            value: cdktf.booleanToHclTerraform(struct.onlyReadLatest),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        qualifier_encoded: {
            value: cdktf.stringToHclTerraform(struct.qualifierEncoded),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        qualifier_string: {
            value: cdktf.stringToHclTerraform(struct.qualifierString),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        type: {
            value: cdktf.stringToHclTerraform(struct.type),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.bigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyColumnToHclTerraform = bigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyColumnToHclTerraform;
class BigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyColumnOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._encoding !== undefined) {
            hasAnyValues = true;
            internalValueResult.encoding = this._encoding;
        }
        if (this._fieldName !== undefined) {
            hasAnyValues = true;
            internalValueResult.fieldName = this._fieldName;
        }
        if (this._onlyReadLatest !== undefined) {
            hasAnyValues = true;
            internalValueResult.onlyReadLatest = this._onlyReadLatest;
        }
        if (this._qualifierEncoded !== undefined) {
            hasAnyValues = true;
            internalValueResult.qualifierEncoded = this._qualifierEncoded;
        }
        if (this._qualifierString !== undefined) {
            hasAnyValues = true;
            internalValueResult.qualifierString = this._qualifierString;
        }
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._encoding = undefined;
            this._fieldName = undefined;
            this._onlyReadLatest = undefined;
            this._qualifierEncoded = undefined;
            this._qualifierString = undefined;
            this._type = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._encoding = value.encoding;
            this._fieldName = value.fieldName;
            this._onlyReadLatest = value.onlyReadLatest;
            this._qualifierEncoded = value.qualifierEncoded;
            this._qualifierString = value.qualifierString;
            this._type = value.type;
        }
    }
    get encoding() {
        return this.getStringAttribute('encoding');
    }
    set encoding(value) {
        this._encoding = value;
    }
    resetEncoding() {
        this._encoding = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encodingInput() {
        return this._encoding;
    }
    get fieldName() {
        return this.getStringAttribute('field_name');
    }
    set fieldName(value) {
        this._fieldName = value;
    }
    resetFieldName() {
        this._fieldName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fieldNameInput() {
        return this._fieldName;
    }
    get onlyReadLatest() {
        return this.getBooleanAttribute('only_read_latest');
    }
    set onlyReadLatest(value) {
        this._onlyReadLatest = value;
    }
    resetOnlyReadLatest() {
        this._onlyReadLatest = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get onlyReadLatestInput() {
        return this._onlyReadLatest;
    }
    get qualifierEncoded() {
        return this.getStringAttribute('qualifier_encoded');
    }
    set qualifierEncoded(value) {
        this._qualifierEncoded = value;
    }
    resetQualifierEncoded() {
        this._qualifierEncoded = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get qualifierEncodedInput() {
        return this._qualifierEncoded;
    }
    get qualifierString() {
        return this.getStringAttribute('qualifier_string');
    }
    set qualifierString(value) {
        this._qualifierString = value;
    }
    resetQualifierString() {
        this._qualifierString = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get qualifierStringInput() {
        return this._qualifierString;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    resetType() {
        this._type = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
}
exports.BigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyColumnOutputReference = BigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyColumnOutputReference;
_d = JSII_RTTI_SYMBOL_1;
BigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyColumnOutputReference[_d] = { fqn: "@cdktf/provider-google.bigqueryTable.BigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyColumnOutputReference", version: "14.13.1" };
class BigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyColumnList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new BigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyColumnOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.BigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyColumnList = BigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyColumnList;
_e = JSII_RTTI_SYMBOL_1;
BigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyColumnList[_e] = { fqn: "@cdktf/provider-google.bigqueryTable.BigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyColumnList", version: "14.13.1" };
function bigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        encoding: cdktf.stringToTerraform(struct.encoding),
        family_id: cdktf.stringToTerraform(struct.familyId),
        only_read_latest: cdktf.booleanToTerraform(struct.onlyReadLatest),
        type: cdktf.stringToTerraform(struct.type),
        column: cdktf.listMapper(bigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyColumnToTerraform, true)(struct.column),
    };
}
exports.bigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyToTerraform = bigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyToTerraform;
function bigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        encoding: {
            value: cdktf.stringToHclTerraform(struct.encoding),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        family_id: {
            value: cdktf.stringToHclTerraform(struct.familyId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        only_read_latest: {
            value: cdktf.booleanToHclTerraform(struct.onlyReadLatest),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        type: {
            value: cdktf.stringToHclTerraform(struct.type),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        column: {
            value: cdktf.listMapperHcl(bigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyColumnToHclTerraform, true)(struct.column),
            isBlock: true,
            type: "list",
            storageClassType: "BigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyColumnList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.bigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyToHclTerraform = bigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyToHclTerraform;
class BigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // column - computed: false, optional: true, required: false
        this._column = new BigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyColumnList(this, "column", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._encoding !== undefined) {
            hasAnyValues = true;
            internalValueResult.encoding = this._encoding;
        }
        if (this._familyId !== undefined) {
            hasAnyValues = true;
            internalValueResult.familyId = this._familyId;
        }
        if (this._onlyReadLatest !== undefined) {
            hasAnyValues = true;
            internalValueResult.onlyReadLatest = this._onlyReadLatest;
        }
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        if (this._column?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.column = this._column?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._encoding = undefined;
            this._familyId = undefined;
            this._onlyReadLatest = undefined;
            this._type = undefined;
            this._column.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._encoding = value.encoding;
            this._familyId = value.familyId;
            this._onlyReadLatest = value.onlyReadLatest;
            this._type = value.type;
            this._column.internalValue = value.column;
        }
    }
    get encoding() {
        return this.getStringAttribute('encoding');
    }
    set encoding(value) {
        this._encoding = value;
    }
    resetEncoding() {
        this._encoding = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encodingInput() {
        return this._encoding;
    }
    get familyId() {
        return this.getStringAttribute('family_id');
    }
    set familyId(value) {
        this._familyId = value;
    }
    resetFamilyId() {
        this._familyId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get familyIdInput() {
        return this._familyId;
    }
    get onlyReadLatest() {
        return this.getBooleanAttribute('only_read_latest');
    }
    set onlyReadLatest(value) {
        this._onlyReadLatest = value;
    }
    resetOnlyReadLatest() {
        this._onlyReadLatest = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get onlyReadLatestInput() {
        return this._onlyReadLatest;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    resetType() {
        this._type = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    get column() {
        return this._column;
    }
    putColumn(value) {
        this._column.internalValue = value;
    }
    resetColumn() {
        this._column.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get columnInput() {
        return this._column.internalValue;
    }
}
exports.BigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyOutputReference = BigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyOutputReference;
_f = JSII_RTTI_SYMBOL_1;
BigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyOutputReference[_f] = { fqn: "@cdktf/provider-google.bigqueryTable.BigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyOutputReference", version: "14.13.1" };
class BigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new BigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.BigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyList = BigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyList;
_g = JSII_RTTI_SYMBOL_1;
BigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyList[_g] = { fqn: "@cdktf/provider-google.bigqueryTable.BigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyList", version: "14.13.1" };
function bigqueryTableExternalDataConfigurationBigtableOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        ignore_unspecified_column_families: cdktf.booleanToTerraform(struct.ignoreUnspecifiedColumnFamilies),
        output_column_families_as_json: cdktf.booleanToTerraform(struct.outputColumnFamiliesAsJson),
        read_rowkey_as_string: cdktf.booleanToTerraform(struct.readRowkeyAsString),
        column_family: cdktf.listMapper(bigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyToTerraform, true)(struct.columnFamily),
    };
}
exports.bigqueryTableExternalDataConfigurationBigtableOptionsToTerraform = bigqueryTableExternalDataConfigurationBigtableOptionsToTerraform;
function bigqueryTableExternalDataConfigurationBigtableOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        ignore_unspecified_column_families: {
            value: cdktf.booleanToHclTerraform(struct.ignoreUnspecifiedColumnFamilies),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        output_column_families_as_json: {
            value: cdktf.booleanToHclTerraform(struct.outputColumnFamiliesAsJson),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        read_rowkey_as_string: {
            value: cdktf.booleanToHclTerraform(struct.readRowkeyAsString),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        column_family: {
            value: cdktf.listMapperHcl(bigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyToHclTerraform, true)(struct.columnFamily),
            isBlock: true,
            type: "list",
            storageClassType: "BigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.bigqueryTableExternalDataConfigurationBigtableOptionsToHclTerraform = bigqueryTableExternalDataConfigurationBigtableOptionsToHclTerraform;
class BigqueryTableExternalDataConfigurationBigtableOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // column_family - computed: false, optional: true, required: false
        this._columnFamily = new BigqueryTableExternalDataConfigurationBigtableOptionsColumnFamilyList(this, "column_family", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._ignoreUnspecifiedColumnFamilies !== undefined) {
            hasAnyValues = true;
            internalValueResult.ignoreUnspecifiedColumnFamilies = this._ignoreUnspecifiedColumnFamilies;
        }
        if (this._outputColumnFamiliesAsJson !== undefined) {
            hasAnyValues = true;
            internalValueResult.outputColumnFamiliesAsJson = this._outputColumnFamiliesAsJson;
        }
        if (this._readRowkeyAsString !== undefined) {
            hasAnyValues = true;
            internalValueResult.readRowkeyAsString = this._readRowkeyAsString;
        }
        if (this._columnFamily?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.columnFamily = this._columnFamily?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._ignoreUnspecifiedColumnFamilies = undefined;
            this._outputColumnFamiliesAsJson = undefined;
            this._readRowkeyAsString = undefined;
            this._columnFamily.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._ignoreUnspecifiedColumnFamilies = value.ignoreUnspecifiedColumnFamilies;
            this._outputColumnFamiliesAsJson = value.outputColumnFamiliesAsJson;
            this._readRowkeyAsString = value.readRowkeyAsString;
            this._columnFamily.internalValue = value.columnFamily;
        }
    }
    get ignoreUnspecifiedColumnFamilies() {
        return this.getBooleanAttribute('ignore_unspecified_column_families');
    }
    set ignoreUnspecifiedColumnFamilies(value) {
        this._ignoreUnspecifiedColumnFamilies = value;
    }
    resetIgnoreUnspecifiedColumnFamilies() {
        this._ignoreUnspecifiedColumnFamilies = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ignoreUnspecifiedColumnFamiliesInput() {
        return this._ignoreUnspecifiedColumnFamilies;
    }
    get outputColumnFamiliesAsJson() {
        return this.getBooleanAttribute('output_column_families_as_json');
    }
    set outputColumnFamiliesAsJson(value) {
        this._outputColumnFamiliesAsJson = value;
    }
    resetOutputColumnFamiliesAsJson() {
        this._outputColumnFamiliesAsJson = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get outputColumnFamiliesAsJsonInput() {
        return this._outputColumnFamiliesAsJson;
    }
    get readRowkeyAsString() {
        return this.getBooleanAttribute('read_rowkey_as_string');
    }
    set readRowkeyAsString(value) {
        this._readRowkeyAsString = value;
    }
    resetReadRowkeyAsString() {
        this._readRowkeyAsString = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get readRowkeyAsStringInput() {
        return this._readRowkeyAsString;
    }
    get columnFamily() {
        return this._columnFamily;
    }
    putColumnFamily(value) {
        this._columnFamily.internalValue = value;
    }
    resetColumnFamily() {
        this._columnFamily.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get columnFamilyInput() {
        return this._columnFamily.internalValue;
    }
}
exports.BigqueryTableExternalDataConfigurationBigtableOptionsOutputReference = BigqueryTableExternalDataConfigurationBigtableOptionsOutputReference;
_h = JSII_RTTI_SYMBOL_1;
BigqueryTableExternalDataConfigurationBigtableOptionsOutputReference[_h] = { fqn: "@cdktf/provider-google.bigqueryTable.BigqueryTableExternalDataConfigurationBigtableOptionsOutputReference", version: "14.13.1" };
function bigqueryTableExternalDataConfigurationCsvOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allow_jagged_rows: cdktf.booleanToTerraform(struct.allowJaggedRows),
        allow_quoted_newlines: cdktf.booleanToTerraform(struct.allowQuotedNewlines),
        encoding: cdktf.stringToTerraform(struct.encoding),
        field_delimiter: cdktf.stringToTerraform(struct.fieldDelimiter),
        quote: cdktf.stringToTerraform(struct.quote),
        skip_leading_rows: cdktf.numberToTerraform(struct.skipLeadingRows),
    };
}
exports.bigqueryTableExternalDataConfigurationCsvOptionsToTerraform = bigqueryTableExternalDataConfigurationCsvOptionsToTerraform;
function bigqueryTableExternalDataConfigurationCsvOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        allow_jagged_rows: {
            value: cdktf.booleanToHclTerraform(struct.allowJaggedRows),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        allow_quoted_newlines: {
            value: cdktf.booleanToHclTerraform(struct.allowQuotedNewlines),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        encoding: {
            value: cdktf.stringToHclTerraform(struct.encoding),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        field_delimiter: {
            value: cdktf.stringToHclTerraform(struct.fieldDelimiter),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        quote: {
            value: cdktf.stringToHclTerraform(struct.quote),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        skip_leading_rows: {
            value: cdktf.numberToHclTerraform(struct.skipLeadingRows),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.bigqueryTableExternalDataConfigurationCsvOptionsToHclTerraform = bigqueryTableExternalDataConfigurationCsvOptionsToHclTerraform;
class BigqueryTableExternalDataConfigurationCsvOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowJaggedRows !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowJaggedRows = this._allowJaggedRows;
        }
        if (this._allowQuotedNewlines !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowQuotedNewlines = this._allowQuotedNewlines;
        }
        if (this._encoding !== undefined) {
            hasAnyValues = true;
            internalValueResult.encoding = this._encoding;
        }
        if (this._fieldDelimiter !== undefined) {
            hasAnyValues = true;
            internalValueResult.fieldDelimiter = this._fieldDelimiter;
        }
        if (this._quote !== undefined) {
            hasAnyValues = true;
            internalValueResult.quote = this._quote;
        }
        if (this._skipLeadingRows !== undefined) {
            hasAnyValues = true;
            internalValueResult.skipLeadingRows = this._skipLeadingRows;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowJaggedRows = undefined;
            this._allowQuotedNewlines = undefined;
            this._encoding = undefined;
            this._fieldDelimiter = undefined;
            this._quote = undefined;
            this._skipLeadingRows = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowJaggedRows = value.allowJaggedRows;
            this._allowQuotedNewlines = value.allowQuotedNewlines;
            this._encoding = value.encoding;
            this._fieldDelimiter = value.fieldDelimiter;
            this._quote = value.quote;
            this._skipLeadingRows = value.skipLeadingRows;
        }
    }
    get allowJaggedRows() {
        return this.getBooleanAttribute('allow_jagged_rows');
    }
    set allowJaggedRows(value) {
        this._allowJaggedRows = value;
    }
    resetAllowJaggedRows() {
        this._allowJaggedRows = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowJaggedRowsInput() {
        return this._allowJaggedRows;
    }
    get allowQuotedNewlines() {
        return this.getBooleanAttribute('allow_quoted_newlines');
    }
    set allowQuotedNewlines(value) {
        this._allowQuotedNewlines = value;
    }
    resetAllowQuotedNewlines() {
        this._allowQuotedNewlines = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowQuotedNewlinesInput() {
        return this._allowQuotedNewlines;
    }
    get encoding() {
        return this.getStringAttribute('encoding');
    }
    set encoding(value) {
        this._encoding = value;
    }
    resetEncoding() {
        this._encoding = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encodingInput() {
        return this._encoding;
    }
    get fieldDelimiter() {
        return this.getStringAttribute('field_delimiter');
    }
    set fieldDelimiter(value) {
        this._fieldDelimiter = value;
    }
    resetFieldDelimiter() {
        this._fieldDelimiter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fieldDelimiterInput() {
        return this._fieldDelimiter;
    }
    get quote() {
        return this.getStringAttribute('quote');
    }
    set quote(value) {
        this._quote = value;
    }
    // Temporarily expose input value. Use with caution.
    get quoteInput() {
        return this._quote;
    }
    get skipLeadingRows() {
        return this.getNumberAttribute('skip_leading_rows');
    }
    set skipLeadingRows(value) {
        this._skipLeadingRows = value;
    }
    resetSkipLeadingRows() {
        this._skipLeadingRows = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get skipLeadingRowsInput() {
        return this._skipLeadingRows;
    }
}
exports.BigqueryTableExternalDataConfigurationCsvOptionsOutputReference = BigqueryTableExternalDataConfigurationCsvOptionsOutputReference;
_j = JSII_RTTI_SYMBOL_1;
BigqueryTableExternalDataConfigurationCsvOptionsOutputReference[_j] = { fqn: "@cdktf/provider-google.bigqueryTable.BigqueryTableExternalDataConfigurationCsvOptionsOutputReference", version: "14.13.1" };
function bigqueryTableExternalDataConfigurationGoogleSheetsOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        range: cdktf.stringToTerraform(struct.range),
        skip_leading_rows: cdktf.numberToTerraform(struct.skipLeadingRows),
    };
}
exports.bigqueryTableExternalDataConfigurationGoogleSheetsOptionsToTerraform = bigqueryTableExternalDataConfigurationGoogleSheetsOptionsToTerraform;
function bigqueryTableExternalDataConfigurationGoogleSheetsOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        range: {
            value: cdktf.stringToHclTerraform(struct.range),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        skip_leading_rows: {
            value: cdktf.numberToHclTerraform(struct.skipLeadingRows),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.bigqueryTableExternalDataConfigurationGoogleSheetsOptionsToHclTerraform = bigqueryTableExternalDataConfigurationGoogleSheetsOptionsToHclTerraform;
class BigqueryTableExternalDataConfigurationGoogleSheetsOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._range !== undefined) {
            hasAnyValues = true;
            internalValueResult.range = this._range;
        }
        if (this._skipLeadingRows !== undefined) {
            hasAnyValues = true;
            internalValueResult.skipLeadingRows = this._skipLeadingRows;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._range = undefined;
            this._skipLeadingRows = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._range = value.range;
            this._skipLeadingRows = value.skipLeadingRows;
        }
    }
    get range() {
        return this.getStringAttribute('range');
    }
    set range(value) {
        this._range = value;
    }
    resetRange() {
        this._range = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rangeInput() {
        return this._range;
    }
    get skipLeadingRows() {
        return this.getNumberAttribute('skip_leading_rows');
    }
    set skipLeadingRows(value) {
        this._skipLeadingRows = value;
    }
    resetSkipLeadingRows() {
        this._skipLeadingRows = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get skipLeadingRowsInput() {
        return this._skipLeadingRows;
    }
}
exports.BigqueryTableExternalDataConfigurationGoogleSheetsOptionsOutputReference = BigqueryTableExternalDataConfigurationGoogleSheetsOptionsOutputReference;
_k = JSII_RTTI_SYMBOL_1;
BigqueryTableExternalDataConfigurationGoogleSheetsOptionsOutputReference[_k] = { fqn: "@cdktf/provider-google.bigqueryTable.BigqueryTableExternalDataConfigurationGoogleSheetsOptionsOutputReference", version: "14.13.1" };
function bigqueryTableExternalDataConfigurationHivePartitioningOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        mode: cdktf.stringToTerraform(struct.mode),
        require_partition_filter: cdktf.booleanToTerraform(struct.requirePartitionFilter),
        source_uri_prefix: cdktf.stringToTerraform(struct.sourceUriPrefix),
    };
}
exports.bigqueryTableExternalDataConfigurationHivePartitioningOptionsToTerraform = bigqueryTableExternalDataConfigurationHivePartitioningOptionsToTerraform;
function bigqueryTableExternalDataConfigurationHivePartitioningOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        mode: {
            value: cdktf.stringToHclTerraform(struct.mode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        require_partition_filter: {
            value: cdktf.booleanToHclTerraform(struct.requirePartitionFilter),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        source_uri_prefix: {
            value: cdktf.stringToHclTerraform(struct.sourceUriPrefix),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.bigqueryTableExternalDataConfigurationHivePartitioningOptionsToHclTerraform = bigqueryTableExternalDataConfigurationHivePartitioningOptionsToHclTerraform;
class BigqueryTableExternalDataConfigurationHivePartitioningOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._mode !== undefined) {
            hasAnyValues = true;
            internalValueResult.mode = this._mode;
        }
        if (this._requirePartitionFilter !== undefined) {
            hasAnyValues = true;
            internalValueResult.requirePartitionFilter = this._requirePartitionFilter;
        }
        if (this._sourceUriPrefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.sourceUriPrefix = this._sourceUriPrefix;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._mode = undefined;
            this._requirePartitionFilter = undefined;
            this._sourceUriPrefix = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._mode = value.mode;
            this._requirePartitionFilter = value.requirePartitionFilter;
            this._sourceUriPrefix = value.sourceUriPrefix;
        }
    }
    get mode() {
        return this.getStringAttribute('mode');
    }
    set mode(value) {
        this._mode = value;
    }
    resetMode() {
        this._mode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get modeInput() {
        return this._mode;
    }
    get requirePartitionFilter() {
        return this.getBooleanAttribute('require_partition_filter');
    }
    set requirePartitionFilter(value) {
        this._requirePartitionFilter = value;
    }
    resetRequirePartitionFilter() {
        this._requirePartitionFilter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requirePartitionFilterInput() {
        return this._requirePartitionFilter;
    }
    get sourceUriPrefix() {
        return this.getStringAttribute('source_uri_prefix');
    }
    set sourceUriPrefix(value) {
        this._sourceUriPrefix = value;
    }
    resetSourceUriPrefix() {
        this._sourceUriPrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sourceUriPrefixInput() {
        return this._sourceUriPrefix;
    }
}
exports.BigqueryTableExternalDataConfigurationHivePartitioningOptionsOutputReference = BigqueryTableExternalDataConfigurationHivePartitioningOptionsOutputReference;
_l = JSII_RTTI_SYMBOL_1;
BigqueryTableExternalDataConfigurationHivePartitioningOptionsOutputReference[_l] = { fqn: "@cdktf/provider-google.bigqueryTable.BigqueryTableExternalDataConfigurationHivePartitioningOptionsOutputReference", version: "14.13.1" };
function bigqueryTableExternalDataConfigurationJsonOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        encoding: cdktf.stringToTerraform(struct.encoding),
    };
}
exports.bigqueryTableExternalDataConfigurationJsonOptionsToTerraform = bigqueryTableExternalDataConfigurationJsonOptionsToTerraform;
function bigqueryTableExternalDataConfigurationJsonOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        encoding: {
            value: cdktf.stringToHclTerraform(struct.encoding),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.bigqueryTableExternalDataConfigurationJsonOptionsToHclTerraform = bigqueryTableExternalDataConfigurationJsonOptionsToHclTerraform;
class BigqueryTableExternalDataConfigurationJsonOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._encoding !== undefined) {
            hasAnyValues = true;
            internalValueResult.encoding = this._encoding;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._encoding = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._encoding = value.encoding;
        }
    }
    get encoding() {
        return this.getStringAttribute('encoding');
    }
    set encoding(value) {
        this._encoding = value;
    }
    resetEncoding() {
        this._encoding = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encodingInput() {
        return this._encoding;
    }
}
exports.BigqueryTableExternalDataConfigurationJsonOptionsOutputReference = BigqueryTableExternalDataConfigurationJsonOptionsOutputReference;
_m = JSII_RTTI_SYMBOL_1;
BigqueryTableExternalDataConfigurationJsonOptionsOutputReference[_m] = { fqn: "@cdktf/provider-google.bigqueryTable.BigqueryTableExternalDataConfigurationJsonOptionsOutputReference", version: "14.13.1" };
function bigqueryTableExternalDataConfigurationParquetOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enable_list_inference: cdktf.booleanToTerraform(struct.enableListInference),
        enum_as_string: cdktf.booleanToTerraform(struct.enumAsString),
    };
}
exports.bigqueryTableExternalDataConfigurationParquetOptionsToTerraform = bigqueryTableExternalDataConfigurationParquetOptionsToTerraform;
function bigqueryTableExternalDataConfigurationParquetOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enable_list_inference: {
            value: cdktf.booleanToHclTerraform(struct.enableListInference),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        enum_as_string: {
            value: cdktf.booleanToHclTerraform(struct.enumAsString),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.bigqueryTableExternalDataConfigurationParquetOptionsToHclTerraform = bigqueryTableExternalDataConfigurationParquetOptionsToHclTerraform;
class BigqueryTableExternalDataConfigurationParquetOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enableListInference !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableListInference = this._enableListInference;
        }
        if (this._enumAsString !== undefined) {
            hasAnyValues = true;
            internalValueResult.enumAsString = this._enumAsString;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enableListInference = undefined;
            this._enumAsString = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enableListInference = value.enableListInference;
            this._enumAsString = value.enumAsString;
        }
    }
    get enableListInference() {
        return this.getBooleanAttribute('enable_list_inference');
    }
    set enableListInference(value) {
        this._enableListInference = value;
    }
    resetEnableListInference() {
        this._enableListInference = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableListInferenceInput() {
        return this._enableListInference;
    }
    get enumAsString() {
        return this.getBooleanAttribute('enum_as_string');
    }
    set enumAsString(value) {
        this._enumAsString = value;
    }
    resetEnumAsString() {
        this._enumAsString = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enumAsStringInput() {
        return this._enumAsString;
    }
}
exports.BigqueryTableExternalDataConfigurationParquetOptionsOutputReference = BigqueryTableExternalDataConfigurationParquetOptionsOutputReference;
_o = JSII_RTTI_SYMBOL_1;
BigqueryTableExternalDataConfigurationParquetOptionsOutputReference[_o] = { fqn: "@cdktf/provider-google.bigqueryTable.BigqueryTableExternalDataConfigurationParquetOptionsOutputReference", version: "14.13.1" };
function bigqueryTableExternalDataConfigurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        autodetect: cdktf.booleanToTerraform(struct.autodetect),
        compression: cdktf.stringToTerraform(struct.compression),
        connection_id: cdktf.stringToTerraform(struct.connectionId),
        file_set_spec_type: cdktf.stringToTerraform(struct.fileSetSpecType),
        ignore_unknown_values: cdktf.booleanToTerraform(struct.ignoreUnknownValues),
        json_extension: cdktf.stringToTerraform(struct.jsonExtension),
        max_bad_records: cdktf.numberToTerraform(struct.maxBadRecords),
        metadata_cache_mode: cdktf.stringToTerraform(struct.metadataCacheMode),
        object_metadata: cdktf.stringToTerraform(struct.objectMetadata),
        reference_file_schema_uri: cdktf.stringToTerraform(struct.referenceFileSchemaUri),
        schema: cdktf.stringToTerraform(struct.schema),
        source_format: cdktf.stringToTerraform(struct.sourceFormat),
        source_uris: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.sourceUris),
        avro_options: bigqueryTableExternalDataConfigurationAvroOptionsToTerraform(struct.avroOptions),
        bigtable_options: bigqueryTableExternalDataConfigurationBigtableOptionsToTerraform(struct.bigtableOptions),
        csv_options: bigqueryTableExternalDataConfigurationCsvOptionsToTerraform(struct.csvOptions),
        google_sheets_options: bigqueryTableExternalDataConfigurationGoogleSheetsOptionsToTerraform(struct.googleSheetsOptions),
        hive_partitioning_options: bigqueryTableExternalDataConfigurationHivePartitioningOptionsToTerraform(struct.hivePartitioningOptions),
        json_options: bigqueryTableExternalDataConfigurationJsonOptionsToTerraform(struct.jsonOptions),
        parquet_options: bigqueryTableExternalDataConfigurationParquetOptionsToTerraform(struct.parquetOptions),
    };
}
exports.bigqueryTableExternalDataConfigurationToTerraform = bigqueryTableExternalDataConfigurationToTerraform;
function bigqueryTableExternalDataConfigurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        autodetect: {
            value: cdktf.booleanToHclTerraform(struct.autodetect),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        compression: {
            value: cdktf.stringToHclTerraform(struct.compression),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        connection_id: {
            value: cdktf.stringToHclTerraform(struct.connectionId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        file_set_spec_type: {
            value: cdktf.stringToHclTerraform(struct.fileSetSpecType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        ignore_unknown_values: {
            value: cdktf.booleanToHclTerraform(struct.ignoreUnknownValues),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        json_extension: {
            value: cdktf.stringToHclTerraform(struct.jsonExtension),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        max_bad_records: {
            value: cdktf.numberToHclTerraform(struct.maxBadRecords),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        metadata_cache_mode: {
            value: cdktf.stringToHclTerraform(struct.metadataCacheMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        object_metadata: {
            value: cdktf.stringToHclTerraform(struct.objectMetadata),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        reference_file_schema_uri: {
            value: cdktf.stringToHclTerraform(struct.referenceFileSchemaUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        schema: {
            value: cdktf.stringToHclTerraform(struct.schema),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        source_format: {
            value: cdktf.stringToHclTerraform(struct.sourceFormat),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        source_uris: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.sourceUris),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        avro_options: {
            value: bigqueryTableExternalDataConfigurationAvroOptionsToHclTerraform(struct.avroOptions),
            isBlock: true,
            type: "list",
            storageClassType: "BigqueryTableExternalDataConfigurationAvroOptionsList",
        },
        bigtable_options: {
            value: bigqueryTableExternalDataConfigurationBigtableOptionsToHclTerraform(struct.bigtableOptions),
            isBlock: true,
            type: "list",
            storageClassType: "BigqueryTableExternalDataConfigurationBigtableOptionsList",
        },
        csv_options: {
            value: bigqueryTableExternalDataConfigurationCsvOptionsToHclTerraform(struct.csvOptions),
            isBlock: true,
            type: "list",
            storageClassType: "BigqueryTableExternalDataConfigurationCsvOptionsList",
        },
        google_sheets_options: {
            value: bigqueryTableExternalDataConfigurationGoogleSheetsOptionsToHclTerraform(struct.googleSheetsOptions),
            isBlock: true,
            type: "list",
            storageClassType: "BigqueryTableExternalDataConfigurationGoogleSheetsOptionsList",
        },
        hive_partitioning_options: {
            value: bigqueryTableExternalDataConfigurationHivePartitioningOptionsToHclTerraform(struct.hivePartitioningOptions),
            isBlock: true,
            type: "list",
            storageClassType: "BigqueryTableExternalDataConfigurationHivePartitioningOptionsList",
        },
        json_options: {
            value: bigqueryTableExternalDataConfigurationJsonOptionsToHclTerraform(struct.jsonOptions),
            isBlock: true,
            type: "list",
            storageClassType: "BigqueryTableExternalDataConfigurationJsonOptionsList",
        },
        parquet_options: {
            value: bigqueryTableExternalDataConfigurationParquetOptionsToHclTerraform(struct.parquetOptions),
            isBlock: true,
            type: "list",
            storageClassType: "BigqueryTableExternalDataConfigurationParquetOptionsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.bigqueryTableExternalDataConfigurationToHclTerraform = bigqueryTableExternalDataConfigurationToHclTerraform;
class BigqueryTableExternalDataConfigurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // avro_options - computed: false, optional: true, required: false
        this._avroOptions = new BigqueryTableExternalDataConfigurationAvroOptionsOutputReference(this, "avro_options");
        // bigtable_options - computed: false, optional: true, required: false
        this._bigtableOptions = new BigqueryTableExternalDataConfigurationBigtableOptionsOutputReference(this, "bigtable_options");
        // csv_options - computed: false, optional: true, required: false
        this._csvOptions = new BigqueryTableExternalDataConfigurationCsvOptionsOutputReference(this, "csv_options");
        // google_sheets_options - computed: false, optional: true, required: false
        this._googleSheetsOptions = new BigqueryTableExternalDataConfigurationGoogleSheetsOptionsOutputReference(this, "google_sheets_options");
        // hive_partitioning_options - computed: false, optional: true, required: false
        this._hivePartitioningOptions = new BigqueryTableExternalDataConfigurationHivePartitioningOptionsOutputReference(this, "hive_partitioning_options");
        // json_options - computed: false, optional: true, required: false
        this._jsonOptions = new BigqueryTableExternalDataConfigurationJsonOptionsOutputReference(this, "json_options");
        // parquet_options - computed: false, optional: true, required: false
        this._parquetOptions = new BigqueryTableExternalDataConfigurationParquetOptionsOutputReference(this, "parquet_options");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._autodetect !== undefined) {
            hasAnyValues = true;
            internalValueResult.autodetect = this._autodetect;
        }
        if (this._compression !== undefined) {
            hasAnyValues = true;
            internalValueResult.compression = this._compression;
        }
        if (this._connectionId !== undefined) {
            hasAnyValues = true;
            internalValueResult.connectionId = this._connectionId;
        }
        if (this._fileSetSpecType !== undefined) {
            hasAnyValues = true;
            internalValueResult.fileSetSpecType = this._fileSetSpecType;
        }
        if (this._ignoreUnknownValues !== undefined) {
            hasAnyValues = true;
            internalValueResult.ignoreUnknownValues = this._ignoreUnknownValues;
        }
        if (this._jsonExtension !== undefined) {
            hasAnyValues = true;
            internalValueResult.jsonExtension = this._jsonExtension;
        }
        if (this._maxBadRecords !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxBadRecords = this._maxBadRecords;
        }
        if (this._metadataCacheMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.metadataCacheMode = this._metadataCacheMode;
        }
        if (this._objectMetadata !== undefined) {
            hasAnyValues = true;
            internalValueResult.objectMetadata = this._objectMetadata;
        }
        if (this._referenceFileSchemaUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.referenceFileSchemaUri = this._referenceFileSchemaUri;
        }
        if (this._schema !== undefined) {
            hasAnyValues = true;
            internalValueResult.schema = this._schema;
        }
        if (this._sourceFormat !== undefined) {
            hasAnyValues = true;
            internalValueResult.sourceFormat = this._sourceFormat;
        }
        if (this._sourceUris !== undefined) {
            hasAnyValues = true;
            internalValueResult.sourceUris = this._sourceUris;
        }
        if (this._avroOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.avroOptions = this._avroOptions?.internalValue;
        }
        if (this._bigtableOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.bigtableOptions = this._bigtableOptions?.internalValue;
        }
        if (this._csvOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.csvOptions = this._csvOptions?.internalValue;
        }
        if (this._googleSheetsOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.googleSheetsOptions = this._googleSheetsOptions?.internalValue;
        }
        if (this._hivePartitioningOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.hivePartitioningOptions = this._hivePartitioningOptions?.internalValue;
        }
        if (this._jsonOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.jsonOptions = this._jsonOptions?.internalValue;
        }
        if (this._parquetOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.parquetOptions = this._parquetOptions?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._autodetect = undefined;
            this._compression = undefined;
            this._connectionId = undefined;
            this._fileSetSpecType = undefined;
            this._ignoreUnknownValues = undefined;
            this._jsonExtension = undefined;
            this._maxBadRecords = undefined;
            this._metadataCacheMode = undefined;
            this._objectMetadata = undefined;
            this._referenceFileSchemaUri = undefined;
            this._schema = undefined;
            this._sourceFormat = undefined;
            this._sourceUris = undefined;
            this._avroOptions.internalValue = undefined;
            this._bigtableOptions.internalValue = undefined;
            this._csvOptions.internalValue = undefined;
            this._googleSheetsOptions.internalValue = undefined;
            this._hivePartitioningOptions.internalValue = undefined;
            this._jsonOptions.internalValue = undefined;
            this._parquetOptions.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._autodetect = value.autodetect;
            this._compression = value.compression;
            this._connectionId = value.connectionId;
            this._fileSetSpecType = value.fileSetSpecType;
            this._ignoreUnknownValues = value.ignoreUnknownValues;
            this._jsonExtension = value.jsonExtension;
            this._maxBadRecords = value.maxBadRecords;
            this._metadataCacheMode = value.metadataCacheMode;
            this._objectMetadata = value.objectMetadata;
            this._referenceFileSchemaUri = value.referenceFileSchemaUri;
            this._schema = value.schema;
            this._sourceFormat = value.sourceFormat;
            this._sourceUris = value.sourceUris;
            this._avroOptions.internalValue = value.avroOptions;
            this._bigtableOptions.internalValue = value.bigtableOptions;
            this._csvOptions.internalValue = value.csvOptions;
            this._googleSheetsOptions.internalValue = value.googleSheetsOptions;
            this._hivePartitioningOptions.internalValue = value.hivePartitioningOptions;
            this._jsonOptions.internalValue = value.jsonOptions;
            this._parquetOptions.internalValue = value.parquetOptions;
        }
    }
    get autodetect() {
        return this.getBooleanAttribute('autodetect');
    }
    set autodetect(value) {
        this._autodetect = value;
    }
    // Temporarily expose input value. Use with caution.
    get autodetectInput() {
        return this._autodetect;
    }
    get compression() {
        return this.getStringAttribute('compression');
    }
    set compression(value) {
        this._compression = value;
    }
    resetCompression() {
        this._compression = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get compressionInput() {
        return this._compression;
    }
    get connectionId() {
        return this.getStringAttribute('connection_id');
    }
    set connectionId(value) {
        this._connectionId = value;
    }
    resetConnectionId() {
        this._connectionId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectionIdInput() {
        return this._connectionId;
    }
    get fileSetSpecType() {
        return this.getStringAttribute('file_set_spec_type');
    }
    set fileSetSpecType(value) {
        this._fileSetSpecType = value;
    }
    resetFileSetSpecType() {
        this._fileSetSpecType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fileSetSpecTypeInput() {
        return this._fileSetSpecType;
    }
    get ignoreUnknownValues() {
        return this.getBooleanAttribute('ignore_unknown_values');
    }
    set ignoreUnknownValues(value) {
        this._ignoreUnknownValues = value;
    }
    resetIgnoreUnknownValues() {
        this._ignoreUnknownValues = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ignoreUnknownValuesInput() {
        return this._ignoreUnknownValues;
    }
    get jsonExtension() {
        return this.getStringAttribute('json_extension');
    }
    set jsonExtension(value) {
        this._jsonExtension = value;
    }
    resetJsonExtension() {
        this._jsonExtension = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jsonExtensionInput() {
        return this._jsonExtension;
    }
    get maxBadRecords() {
        return this.getNumberAttribute('max_bad_records');
    }
    set maxBadRecords(value) {
        this._maxBadRecords = value;
    }
    resetMaxBadRecords() {
        this._maxBadRecords = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxBadRecordsInput() {
        return this._maxBadRecords;
    }
    get metadataCacheMode() {
        return this.getStringAttribute('metadata_cache_mode');
    }
    set metadataCacheMode(value) {
        this._metadataCacheMode = value;
    }
    resetMetadataCacheMode() {
        this._metadataCacheMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get metadataCacheModeInput() {
        return this._metadataCacheMode;
    }
    get objectMetadata() {
        return this.getStringAttribute('object_metadata');
    }
    set objectMetadata(value) {
        this._objectMetadata = value;
    }
    resetObjectMetadata() {
        this._objectMetadata = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get objectMetadataInput() {
        return this._objectMetadata;
    }
    get referenceFileSchemaUri() {
        return this.getStringAttribute('reference_file_schema_uri');
    }
    set referenceFileSchemaUri(value) {
        this._referenceFileSchemaUri = value;
    }
    resetReferenceFileSchemaUri() {
        this._referenceFileSchemaUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get referenceFileSchemaUriInput() {
        return this._referenceFileSchemaUri;
    }
    get schema() {
        return this.getStringAttribute('schema');
    }
    set schema(value) {
        this._schema = value;
    }
    resetSchema() {
        this._schema = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get schemaInput() {
        return this._schema;
    }
    get sourceFormat() {
        return this.getStringAttribute('source_format');
    }
    set sourceFormat(value) {
        this._sourceFormat = value;
    }
    resetSourceFormat() {
        this._sourceFormat = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sourceFormatInput() {
        return this._sourceFormat;
    }
    get sourceUris() {
        return this.getListAttribute('source_uris');
    }
    set sourceUris(value) {
        this._sourceUris = value;
    }
    // Temporarily expose input value. Use with caution.
    get sourceUrisInput() {
        return this._sourceUris;
    }
    get avroOptions() {
        return this._avroOptions;
    }
    putAvroOptions(value) {
        this._avroOptions.internalValue = value;
    }
    resetAvroOptions() {
        this._avroOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get avroOptionsInput() {
        return this._avroOptions.internalValue;
    }
    get bigtableOptions() {
        return this._bigtableOptions;
    }
    putBigtableOptions(value) {
        this._bigtableOptions.internalValue = value;
    }
    resetBigtableOptions() {
        this._bigtableOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bigtableOptionsInput() {
        return this._bigtableOptions.internalValue;
    }
    get csvOptions() {
        return this._csvOptions;
    }
    putCsvOptions(value) {
        this._csvOptions.internalValue = value;
    }
    resetCsvOptions() {
        this._csvOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get csvOptionsInput() {
        return this._csvOptions.internalValue;
    }
    get googleSheetsOptions() {
        return this._googleSheetsOptions;
    }
    putGoogleSheetsOptions(value) {
        this._googleSheetsOptions.internalValue = value;
    }
    resetGoogleSheetsOptions() {
        this._googleSheetsOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get googleSheetsOptionsInput() {
        return this._googleSheetsOptions.internalValue;
    }
    get hivePartitioningOptions() {
        return this._hivePartitioningOptions;
    }
    putHivePartitioningOptions(value) {
        this._hivePartitioningOptions.internalValue = value;
    }
    resetHivePartitioningOptions() {
        this._hivePartitioningOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hivePartitioningOptionsInput() {
        return this._hivePartitioningOptions.internalValue;
    }
    get jsonOptions() {
        return this._jsonOptions;
    }
    putJsonOptions(value) {
        this._jsonOptions.internalValue = value;
    }
    resetJsonOptions() {
        this._jsonOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jsonOptionsInput() {
        return this._jsonOptions.internalValue;
    }
    get parquetOptions() {
        return this._parquetOptions;
    }
    putParquetOptions(value) {
        this._parquetOptions.internalValue = value;
    }
    resetParquetOptions() {
        this._parquetOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parquetOptionsInput() {
        return this._parquetOptions.internalValue;
    }
}
exports.BigqueryTableExternalDataConfigurationOutputReference = BigqueryTableExternalDataConfigurationOutputReference;
_p = JSII_RTTI_SYMBOL_1;
BigqueryTableExternalDataConfigurationOutputReference[_p] = { fqn: "@cdktf/provider-google.bigqueryTable.BigqueryTableExternalDataConfigurationOutputReference", version: "14.13.1" };
function bigqueryTableMaterializedViewToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allow_non_incremental_definition: cdktf.booleanToTerraform(struct.allowNonIncrementalDefinition),
        enable_refresh: cdktf.booleanToTerraform(struct.enableRefresh),
        query: cdktf.stringToTerraform(struct.query),
        refresh_interval_ms: cdktf.numberToTerraform(struct.refreshIntervalMs),
    };
}
exports.bigqueryTableMaterializedViewToTerraform = bigqueryTableMaterializedViewToTerraform;
function bigqueryTableMaterializedViewToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        allow_non_incremental_definition: {
            value: cdktf.booleanToHclTerraform(struct.allowNonIncrementalDefinition),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        enable_refresh: {
            value: cdktf.booleanToHclTerraform(struct.enableRefresh),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        query: {
            value: cdktf.stringToHclTerraform(struct.query),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        refresh_interval_ms: {
            value: cdktf.numberToHclTerraform(struct.refreshIntervalMs),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.bigqueryTableMaterializedViewToHclTerraform = bigqueryTableMaterializedViewToHclTerraform;
class BigqueryTableMaterializedViewOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowNonIncrementalDefinition !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowNonIncrementalDefinition = this._allowNonIncrementalDefinition;
        }
        if (this._enableRefresh !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableRefresh = this._enableRefresh;
        }
        if (this._query !== undefined) {
            hasAnyValues = true;
            internalValueResult.query = this._query;
        }
        if (this._refreshIntervalMs !== undefined) {
            hasAnyValues = true;
            internalValueResult.refreshIntervalMs = this._refreshIntervalMs;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowNonIncrementalDefinition = undefined;
            this._enableRefresh = undefined;
            this._query = undefined;
            this._refreshIntervalMs = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowNonIncrementalDefinition = value.allowNonIncrementalDefinition;
            this._enableRefresh = value.enableRefresh;
            this._query = value.query;
            this._refreshIntervalMs = value.refreshIntervalMs;
        }
    }
    get allowNonIncrementalDefinition() {
        return this.getBooleanAttribute('allow_non_incremental_definition');
    }
    set allowNonIncrementalDefinition(value) {
        this._allowNonIncrementalDefinition = value;
    }
    resetAllowNonIncrementalDefinition() {
        this._allowNonIncrementalDefinition = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowNonIncrementalDefinitionInput() {
        return this._allowNonIncrementalDefinition;
    }
    get enableRefresh() {
        return this.getBooleanAttribute('enable_refresh');
    }
    set enableRefresh(value) {
        this._enableRefresh = value;
    }
    resetEnableRefresh() {
        this._enableRefresh = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableRefreshInput() {
        return this._enableRefresh;
    }
    get query() {
        return this.getStringAttribute('query');
    }
    set query(value) {
        this._query = value;
    }
    // Temporarily expose input value. Use with caution.
    get queryInput() {
        return this._query;
    }
    get refreshIntervalMs() {
        return this.getNumberAttribute('refresh_interval_ms');
    }
    set refreshIntervalMs(value) {
        this._refreshIntervalMs = value;
    }
    resetRefreshIntervalMs() {
        this._refreshIntervalMs = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get refreshIntervalMsInput() {
        return this._refreshIntervalMs;
    }
}
exports.BigqueryTableMaterializedViewOutputReference = BigqueryTableMaterializedViewOutputReference;
_q = JSII_RTTI_SYMBOL_1;
BigqueryTableMaterializedViewOutputReference[_q] = { fqn: "@cdktf/provider-google.bigqueryTable.BigqueryTableMaterializedViewOutputReference", version: "14.13.1" };
function bigqueryTableRangePartitioningRangeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        end: cdktf.numberToTerraform(struct.end),
        interval: cdktf.numberToTerraform(struct.interval),
        start: cdktf.numberToTerraform(struct.start),
    };
}
exports.bigqueryTableRangePartitioningRangeToTerraform = bigqueryTableRangePartitioningRangeToTerraform;
function bigqueryTableRangePartitioningRangeToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        end: {
            value: cdktf.numberToHclTerraform(struct.end),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        interval: {
            value: cdktf.numberToHclTerraform(struct.interval),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        start: {
            value: cdktf.numberToHclTerraform(struct.start),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.bigqueryTableRangePartitioningRangeToHclTerraform = bigqueryTableRangePartitioningRangeToHclTerraform;
class BigqueryTableRangePartitioningRangeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._end !== undefined) {
            hasAnyValues = true;
            internalValueResult.end = this._end;
        }
        if (this._interval !== undefined) {
            hasAnyValues = true;
            internalValueResult.interval = this._interval;
        }
        if (this._start !== undefined) {
            hasAnyValues = true;
            internalValueResult.start = this._start;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._end = undefined;
            this._interval = undefined;
            this._start = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._end = value.end;
            this._interval = value.interval;
            this._start = value.start;
        }
    }
    get end() {
        return this.getNumberAttribute('end');
    }
    set end(value) {
        this._end = value;
    }
    // Temporarily expose input value. Use with caution.
    get endInput() {
        return this._end;
    }
    get interval() {
        return this.getNumberAttribute('interval');
    }
    set interval(value) {
        this._interval = value;
    }
    // Temporarily expose input value. Use with caution.
    get intervalInput() {
        return this._interval;
    }
    get start() {
        return this.getNumberAttribute('start');
    }
    set start(value) {
        this._start = value;
    }
    // Temporarily expose input value. Use with caution.
    get startInput() {
        return this._start;
    }
}
exports.BigqueryTableRangePartitioningRangeOutputReference = BigqueryTableRangePartitioningRangeOutputReference;
_r = JSII_RTTI_SYMBOL_1;
BigqueryTableRangePartitioningRangeOutputReference[_r] = { fqn: "@cdktf/provider-google.bigqueryTable.BigqueryTableRangePartitioningRangeOutputReference", version: "14.13.1" };
function bigqueryTableRangePartitioningToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        field: cdktf.stringToTerraform(struct.field),
        range: bigqueryTableRangePartitioningRangeToTerraform(struct.range),
    };
}
exports.bigqueryTableRangePartitioningToTerraform = bigqueryTableRangePartitioningToTerraform;
function bigqueryTableRangePartitioningToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        field: {
            value: cdktf.stringToHclTerraform(struct.field),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        range: {
            value: bigqueryTableRangePartitioningRangeToHclTerraform(struct.range),
            isBlock: true,
            type: "list",
            storageClassType: "BigqueryTableRangePartitioningRangeList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.bigqueryTableRangePartitioningToHclTerraform = bigqueryTableRangePartitioningToHclTerraform;
class BigqueryTableRangePartitioningOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // range - computed: false, optional: false, required: true
        this._range = new BigqueryTableRangePartitioningRangeOutputReference(this, "range");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._field !== undefined) {
            hasAnyValues = true;
            internalValueResult.field = this._field;
        }
        if (this._range?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.range = this._range?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._field = undefined;
            this._range.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._field = value.field;
            this._range.internalValue = value.range;
        }
    }
    get field() {
        return this.getStringAttribute('field');
    }
    set field(value) {
        this._field = value;
    }
    // Temporarily expose input value. Use with caution.
    get fieldInput() {
        return this._field;
    }
    get range() {
        return this._range;
    }
    putRange(value) {
        this._range.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get rangeInput() {
        return this._range.internalValue;
    }
}
exports.BigqueryTableRangePartitioningOutputReference = BigqueryTableRangePartitioningOutputReference;
_s = JSII_RTTI_SYMBOL_1;
BigqueryTableRangePartitioningOutputReference[_s] = { fqn: "@cdktf/provider-google.bigqueryTable.BigqueryTableRangePartitioningOutputReference", version: "14.13.1" };
function bigqueryTableTableConstraintsForeignKeysColumnReferencesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        referenced_column: cdktf.stringToTerraform(struct.referencedColumn),
        referencing_column: cdktf.stringToTerraform(struct.referencingColumn),
    };
}
exports.bigqueryTableTableConstraintsForeignKeysColumnReferencesToTerraform = bigqueryTableTableConstraintsForeignKeysColumnReferencesToTerraform;
function bigqueryTableTableConstraintsForeignKeysColumnReferencesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        referenced_column: {
            value: cdktf.stringToHclTerraform(struct.referencedColumn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        referencing_column: {
            value: cdktf.stringToHclTerraform(struct.referencingColumn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.bigqueryTableTableConstraintsForeignKeysColumnReferencesToHclTerraform = bigqueryTableTableConstraintsForeignKeysColumnReferencesToHclTerraform;
class BigqueryTableTableConstraintsForeignKeysColumnReferencesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._referencedColumn !== undefined) {
            hasAnyValues = true;
            internalValueResult.referencedColumn = this._referencedColumn;
        }
        if (this._referencingColumn !== undefined) {
            hasAnyValues = true;
            internalValueResult.referencingColumn = this._referencingColumn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._referencedColumn = undefined;
            this._referencingColumn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._referencedColumn = value.referencedColumn;
            this._referencingColumn = value.referencingColumn;
        }
    }
    get referencedColumn() {
        return this.getStringAttribute('referenced_column');
    }
    set referencedColumn(value) {
        this._referencedColumn = value;
    }
    // Temporarily expose input value. Use with caution.
    get referencedColumnInput() {
        return this._referencedColumn;
    }
    get referencingColumn() {
        return this.getStringAttribute('referencing_column');
    }
    set referencingColumn(value) {
        this._referencingColumn = value;
    }
    // Temporarily expose input value. Use with caution.
    get referencingColumnInput() {
        return this._referencingColumn;
    }
}
exports.BigqueryTableTableConstraintsForeignKeysColumnReferencesOutputReference = BigqueryTableTableConstraintsForeignKeysColumnReferencesOutputReference;
_t = JSII_RTTI_SYMBOL_1;
BigqueryTableTableConstraintsForeignKeysColumnReferencesOutputReference[_t] = { fqn: "@cdktf/provider-google.bigqueryTable.BigqueryTableTableConstraintsForeignKeysColumnReferencesOutputReference", version: "14.13.1" };
function bigqueryTableTableConstraintsForeignKeysReferencedTableToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        dataset_id: cdktf.stringToTerraform(struct.datasetId),
        project_id: cdktf.stringToTerraform(struct.projectId),
        table_id: cdktf.stringToTerraform(struct.tableId),
    };
}
exports.bigqueryTableTableConstraintsForeignKeysReferencedTableToTerraform = bigqueryTableTableConstraintsForeignKeysReferencedTableToTerraform;
function bigqueryTableTableConstraintsForeignKeysReferencedTableToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        dataset_id: {
            value: cdktf.stringToHclTerraform(struct.datasetId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        project_id: {
            value: cdktf.stringToHclTerraform(struct.projectId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        table_id: {
            value: cdktf.stringToHclTerraform(struct.tableId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.bigqueryTableTableConstraintsForeignKeysReferencedTableToHclTerraform = bigqueryTableTableConstraintsForeignKeysReferencedTableToHclTerraform;
class BigqueryTableTableConstraintsForeignKeysReferencedTableOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._datasetId !== undefined) {
            hasAnyValues = true;
            internalValueResult.datasetId = this._datasetId;
        }
        if (this._projectId !== undefined) {
            hasAnyValues = true;
            internalValueResult.projectId = this._projectId;
        }
        if (this._tableId !== undefined) {
            hasAnyValues = true;
            internalValueResult.tableId = this._tableId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._datasetId = undefined;
            this._projectId = undefined;
            this._tableId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._datasetId = value.datasetId;
            this._projectId = value.projectId;
            this._tableId = value.tableId;
        }
    }
    get datasetId() {
        return this.getStringAttribute('dataset_id');
    }
    set datasetId(value) {
        this._datasetId = value;
    }
    // Temporarily expose input value. Use with caution.
    get datasetIdInput() {
        return this._datasetId;
    }
    get projectId() {
        return this.getStringAttribute('project_id');
    }
    set projectId(value) {
        this._projectId = value;
    }
    // Temporarily expose input value. Use with caution.
    get projectIdInput() {
        return this._projectId;
    }
    get tableId() {
        return this.getStringAttribute('table_id');
    }
    set tableId(value) {
        this._tableId = value;
    }
    // Temporarily expose input value. Use with caution.
    get tableIdInput() {
        return this._tableId;
    }
}
exports.BigqueryTableTableConstraintsForeignKeysReferencedTableOutputReference = BigqueryTableTableConstraintsForeignKeysReferencedTableOutputReference;
_u = JSII_RTTI_SYMBOL_1;
BigqueryTableTableConstraintsForeignKeysReferencedTableOutputReference[_u] = { fqn: "@cdktf/provider-google.bigqueryTable.BigqueryTableTableConstraintsForeignKeysReferencedTableOutputReference", version: "14.13.1" };
function bigqueryTableTableConstraintsForeignKeysToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        column_references: bigqueryTableTableConstraintsForeignKeysColumnReferencesToTerraform(struct.columnReferences),
        referenced_table: bigqueryTableTableConstraintsForeignKeysReferencedTableToTerraform(struct.referencedTable),
    };
}
exports.bigqueryTableTableConstraintsForeignKeysToTerraform = bigqueryTableTableConstraintsForeignKeysToTerraform;
function bigqueryTableTableConstraintsForeignKeysToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        column_references: {
            value: bigqueryTableTableConstraintsForeignKeysColumnReferencesToHclTerraform(struct.columnReferences),
            isBlock: true,
            type: "list",
            storageClassType: "BigqueryTableTableConstraintsForeignKeysColumnReferencesList",
        },
        referenced_table: {
            value: bigqueryTableTableConstraintsForeignKeysReferencedTableToHclTerraform(struct.referencedTable),
            isBlock: true,
            type: "list",
            storageClassType: "BigqueryTableTableConstraintsForeignKeysReferencedTableList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.bigqueryTableTableConstraintsForeignKeysToHclTerraform = bigqueryTableTableConstraintsForeignKeysToHclTerraform;
class BigqueryTableTableConstraintsForeignKeysOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // column_references - computed: false, optional: false, required: true
        this._columnReferences = new BigqueryTableTableConstraintsForeignKeysColumnReferencesOutputReference(this, "column_references");
        // referenced_table - computed: false, optional: false, required: true
        this._referencedTable = new BigqueryTableTableConstraintsForeignKeysReferencedTableOutputReference(this, "referenced_table");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._columnReferences?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.columnReferences = this._columnReferences?.internalValue;
        }
        if (this._referencedTable?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.referencedTable = this._referencedTable?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
            this._columnReferences.internalValue = undefined;
            this._referencedTable.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
            this._columnReferences.internalValue = value.columnReferences;
            this._referencedTable.internalValue = value.referencedTable;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get columnReferences() {
        return this._columnReferences;
    }
    putColumnReferences(value) {
        this._columnReferences.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get columnReferencesInput() {
        return this._columnReferences.internalValue;
    }
    get referencedTable() {
        return this._referencedTable;
    }
    putReferencedTable(value) {
        this._referencedTable.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get referencedTableInput() {
        return this._referencedTable.internalValue;
    }
}
exports.BigqueryTableTableConstraintsForeignKeysOutputReference = BigqueryTableTableConstraintsForeignKeysOutputReference;
_v = JSII_RTTI_SYMBOL_1;
BigqueryTableTableConstraintsForeignKeysOutputReference[_v] = { fqn: "@cdktf/provider-google.bigqueryTable.BigqueryTableTableConstraintsForeignKeysOutputReference", version: "14.13.1" };
class BigqueryTableTableConstraintsForeignKeysList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new BigqueryTableTableConstraintsForeignKeysOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.BigqueryTableTableConstraintsForeignKeysList = BigqueryTableTableConstraintsForeignKeysList;
_w = JSII_RTTI_SYMBOL_1;
BigqueryTableTableConstraintsForeignKeysList[_w] = { fqn: "@cdktf/provider-google.bigqueryTable.BigqueryTableTableConstraintsForeignKeysList", version: "14.13.1" };
function bigqueryTableTableConstraintsPrimaryKeyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        columns: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.columns),
    };
}
exports.bigqueryTableTableConstraintsPrimaryKeyToTerraform = bigqueryTableTableConstraintsPrimaryKeyToTerraform;
function bigqueryTableTableConstraintsPrimaryKeyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        columns: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.columns),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.bigqueryTableTableConstraintsPrimaryKeyToHclTerraform = bigqueryTableTableConstraintsPrimaryKeyToHclTerraform;
class BigqueryTableTableConstraintsPrimaryKeyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._columns !== undefined) {
            hasAnyValues = true;
            internalValueResult.columns = this._columns;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._columns = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._columns = value.columns;
        }
    }
    get columns() {
        return this.getListAttribute('columns');
    }
    set columns(value) {
        this._columns = value;
    }
    // Temporarily expose input value. Use with caution.
    get columnsInput() {
        return this._columns;
    }
}
exports.BigqueryTableTableConstraintsPrimaryKeyOutputReference = BigqueryTableTableConstraintsPrimaryKeyOutputReference;
_x = JSII_RTTI_SYMBOL_1;
BigqueryTableTableConstraintsPrimaryKeyOutputReference[_x] = { fqn: "@cdktf/provider-google.bigqueryTable.BigqueryTableTableConstraintsPrimaryKeyOutputReference", version: "14.13.1" };
function bigqueryTableTableConstraintsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        foreign_keys: cdktf.listMapper(bigqueryTableTableConstraintsForeignKeysToTerraform, true)(struct.foreignKeys),
        primary_key: bigqueryTableTableConstraintsPrimaryKeyToTerraform(struct.primaryKey),
    };
}
exports.bigqueryTableTableConstraintsToTerraform = bigqueryTableTableConstraintsToTerraform;
function bigqueryTableTableConstraintsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        foreign_keys: {
            value: cdktf.listMapperHcl(bigqueryTableTableConstraintsForeignKeysToHclTerraform, true)(struct.foreignKeys),
            isBlock: true,
            type: "list",
            storageClassType: "BigqueryTableTableConstraintsForeignKeysList",
        },
        primary_key: {
            value: bigqueryTableTableConstraintsPrimaryKeyToHclTerraform(struct.primaryKey),
            isBlock: true,
            type: "list",
            storageClassType: "BigqueryTableTableConstraintsPrimaryKeyList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.bigqueryTableTableConstraintsToHclTerraform = bigqueryTableTableConstraintsToHclTerraform;
class BigqueryTableTableConstraintsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // foreign_keys - computed: false, optional: true, required: false
        this._foreignKeys = new BigqueryTableTableConstraintsForeignKeysList(this, "foreign_keys", false);
        // primary_key - computed: false, optional: true, required: false
        this._primaryKey = new BigqueryTableTableConstraintsPrimaryKeyOutputReference(this, "primary_key");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._foreignKeys?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.foreignKeys = this._foreignKeys?.internalValue;
        }
        if (this._primaryKey?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.primaryKey = this._primaryKey?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._foreignKeys.internalValue = undefined;
            this._primaryKey.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._foreignKeys.internalValue = value.foreignKeys;
            this._primaryKey.internalValue = value.primaryKey;
        }
    }
    get foreignKeys() {
        return this._foreignKeys;
    }
    putForeignKeys(value) {
        this._foreignKeys.internalValue = value;
    }
    resetForeignKeys() {
        this._foreignKeys.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get foreignKeysInput() {
        return this._foreignKeys.internalValue;
    }
    get primaryKey() {
        return this._primaryKey;
    }
    putPrimaryKey(value) {
        this._primaryKey.internalValue = value;
    }
    resetPrimaryKey() {
        this._primaryKey.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get primaryKeyInput() {
        return this._primaryKey.internalValue;
    }
}
exports.BigqueryTableTableConstraintsOutputReference = BigqueryTableTableConstraintsOutputReference;
_y = JSII_RTTI_SYMBOL_1;
BigqueryTableTableConstraintsOutputReference[_y] = { fqn: "@cdktf/provider-google.bigqueryTable.BigqueryTableTableConstraintsOutputReference", version: "14.13.1" };
function bigqueryTableTableReplicationInfoToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        replication_interval_ms: cdktf.numberToTerraform(struct.replicationIntervalMs),
        source_dataset_id: cdktf.stringToTerraform(struct.sourceDatasetId),
        source_project_id: cdktf.stringToTerraform(struct.sourceProjectId),
        source_table_id: cdktf.stringToTerraform(struct.sourceTableId),
    };
}
exports.bigqueryTableTableReplicationInfoToTerraform = bigqueryTableTableReplicationInfoToTerraform;
function bigqueryTableTableReplicationInfoToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        replication_interval_ms: {
            value: cdktf.numberToHclTerraform(struct.replicationIntervalMs),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        source_dataset_id: {
            value: cdktf.stringToHclTerraform(struct.sourceDatasetId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        source_project_id: {
            value: cdktf.stringToHclTerraform(struct.sourceProjectId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        source_table_id: {
            value: cdktf.stringToHclTerraform(struct.sourceTableId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.bigqueryTableTableReplicationInfoToHclTerraform = bigqueryTableTableReplicationInfoToHclTerraform;
class BigqueryTableTableReplicationInfoOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._replicationIntervalMs !== undefined) {
            hasAnyValues = true;
            internalValueResult.replicationIntervalMs = this._replicationIntervalMs;
        }
        if (this._sourceDatasetId !== undefined) {
            hasAnyValues = true;
            internalValueResult.sourceDatasetId = this._sourceDatasetId;
        }
        if (this._sourceProjectId !== undefined) {
            hasAnyValues = true;
            internalValueResult.sourceProjectId = this._sourceProjectId;
        }
        if (this._sourceTableId !== undefined) {
            hasAnyValues = true;
            internalValueResult.sourceTableId = this._sourceTableId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._replicationIntervalMs = undefined;
            this._sourceDatasetId = undefined;
            this._sourceProjectId = undefined;
            this._sourceTableId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._replicationIntervalMs = value.replicationIntervalMs;
            this._sourceDatasetId = value.sourceDatasetId;
            this._sourceProjectId = value.sourceProjectId;
            this._sourceTableId = value.sourceTableId;
        }
    }
    get replicationIntervalMs() {
        return this.getNumberAttribute('replication_interval_ms');
    }
    set replicationIntervalMs(value) {
        this._replicationIntervalMs = value;
    }
    resetReplicationIntervalMs() {
        this._replicationIntervalMs = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get replicationIntervalMsInput() {
        return this._replicationIntervalMs;
    }
    get sourceDatasetId() {
        return this.getStringAttribute('source_dataset_id');
    }
    set sourceDatasetId(value) {
        this._sourceDatasetId = value;
    }
    // Temporarily expose input value. Use with caution.
    get sourceDatasetIdInput() {
        return this._sourceDatasetId;
    }
    get sourceProjectId() {
        return this.getStringAttribute('source_project_id');
    }
    set sourceProjectId(value) {
        this._sourceProjectId = value;
    }
    // Temporarily expose input value. Use with caution.
    get sourceProjectIdInput() {
        return this._sourceProjectId;
    }
    get sourceTableId() {
        return this.getStringAttribute('source_table_id');
    }
    set sourceTableId(value) {
        this._sourceTableId = value;
    }
    // Temporarily expose input value. Use with caution.
    get sourceTableIdInput() {
        return this._sourceTableId;
    }
}
exports.BigqueryTableTableReplicationInfoOutputReference = BigqueryTableTableReplicationInfoOutputReference;
_z = JSII_RTTI_SYMBOL_1;
BigqueryTableTableReplicationInfoOutputReference[_z] = { fqn: "@cdktf/provider-google.bigqueryTable.BigqueryTableTableReplicationInfoOutputReference", version: "14.13.1" };
function bigqueryTableTimePartitioningToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        expiration_ms: cdktf.numberToTerraform(struct.expirationMs),
        field: cdktf.stringToTerraform(struct.field),
        require_partition_filter: cdktf.booleanToTerraform(struct.requirePartitionFilter),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.bigqueryTableTimePartitioningToTerraform = bigqueryTableTimePartitioningToTerraform;
function bigqueryTableTimePartitioningToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        expiration_ms: {
            value: cdktf.numberToHclTerraform(struct.expirationMs),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        field: {
            value: cdktf.stringToHclTerraform(struct.field),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        require_partition_filter: {
            value: cdktf.booleanToHclTerraform(struct.requirePartitionFilter),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        type: {
            value: cdktf.stringToHclTerraform(struct.type),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.bigqueryTableTimePartitioningToHclTerraform = bigqueryTableTimePartitioningToHclTerraform;
class BigqueryTableTimePartitioningOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._expirationMs !== undefined) {
            hasAnyValues = true;
            internalValueResult.expirationMs = this._expirationMs;
        }
        if (this._field !== undefined) {
            hasAnyValues = true;
            internalValueResult.field = this._field;
        }
        if (this._requirePartitionFilter !== undefined) {
            hasAnyValues = true;
            internalValueResult.requirePartitionFilter = this._requirePartitionFilter;
        }
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._expirationMs = undefined;
            this._field = undefined;
            this._requirePartitionFilter = undefined;
            this._type = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._expirationMs = value.expirationMs;
            this._field = value.field;
            this._requirePartitionFilter = value.requirePartitionFilter;
            this._type = value.type;
        }
    }
    get expirationMs() {
        return this.getNumberAttribute('expiration_ms');
    }
    set expirationMs(value) {
        this._expirationMs = value;
    }
    resetExpirationMs() {
        this._expirationMs = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get expirationMsInput() {
        return this._expirationMs;
    }
    get field() {
        return this.getStringAttribute('field');
    }
    set field(value) {
        this._field = value;
    }
    resetField() {
        this._field = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fieldInput() {
        return this._field;
    }
    get requirePartitionFilter() {
        return this.getBooleanAttribute('require_partition_filter');
    }
    set requirePartitionFilter(value) {
        this._requirePartitionFilter = value;
    }
    resetRequirePartitionFilter() {
        this._requirePartitionFilter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requirePartitionFilterInput() {
        return this._requirePartitionFilter;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
}
exports.BigqueryTableTimePartitioningOutputReference = BigqueryTableTimePartitioningOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
BigqueryTableTimePartitioningOutputReference[_0] = { fqn: "@cdktf/provider-google.bigqueryTable.BigqueryTableTimePartitioningOutputReference", version: "14.13.1" };
function bigqueryTableViewToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        query: cdktf.stringToTerraform(struct.query),
        use_legacy_sql: cdktf.booleanToTerraform(struct.useLegacySql),
    };
}
exports.bigqueryTableViewToTerraform = bigqueryTableViewToTerraform;
function bigqueryTableViewToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        query: {
            value: cdktf.stringToHclTerraform(struct.query),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        use_legacy_sql: {
            value: cdktf.booleanToHclTerraform(struct.useLegacySql),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.bigqueryTableViewToHclTerraform = bigqueryTableViewToHclTerraform;
class BigqueryTableViewOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._query !== undefined) {
            hasAnyValues = true;
            internalValueResult.query = this._query;
        }
        if (this._useLegacySql !== undefined) {
            hasAnyValues = true;
            internalValueResult.useLegacySql = this._useLegacySql;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._query = undefined;
            this._useLegacySql = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._query = value.query;
            this._useLegacySql = value.useLegacySql;
        }
    }
    get query() {
        return this.getStringAttribute('query');
    }
    set query(value) {
        this._query = value;
    }
    // Temporarily expose input value. Use with caution.
    get queryInput() {
        return this._query;
    }
    get useLegacySql() {
        return this.getBooleanAttribute('use_legacy_sql');
    }
    set useLegacySql(value) {
        this._useLegacySql = value;
    }
    resetUseLegacySql() {
        this._useLegacySql = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get useLegacySqlInput() {
        return this._useLegacySql;
    }
}
exports.BigqueryTableViewOutputReference = BigqueryTableViewOutputReference;
_1 = JSII_RTTI_SYMBOL_1;
BigqueryTableViewOutputReference[_1] = { fqn: "@cdktf/provider-google.bigqueryTable.BigqueryTableViewOutputReference", version: "14.13.1" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/bigquery_table google_bigquery_table}
*/
class BigqueryTable extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a BigqueryTable resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the BigqueryTable to import
    * @param importFromId The id of the existing BigqueryTable that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/bigquery_table#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the BigqueryTable to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_bigquery_table", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/bigquery_table google_bigquery_table} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options BigqueryTableConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_bigquery_table',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // effective_labels - computed: true, optional: false, required: false
        this._effectiveLabels = new cdktf.StringMap(this, "effective_labels");
        // terraform_labels - computed: true, optional: false, required: false
        this._terraformLabels = new cdktf.StringMap(this, "terraform_labels");
        // biglake_configuration - computed: false, optional: true, required: false
        this._biglakeConfiguration = new BigqueryTableBiglakeConfigurationOutputReference(this, "biglake_configuration");
        // encryption_configuration - computed: false, optional: true, required: false
        this._encryptionConfiguration = new BigqueryTableEncryptionConfigurationOutputReference(this, "encryption_configuration");
        // external_data_configuration - computed: false, optional: true, required: false
        this._externalDataConfiguration = new BigqueryTableExternalDataConfigurationOutputReference(this, "external_data_configuration");
        // materialized_view - computed: false, optional: true, required: false
        this._materializedView = new BigqueryTableMaterializedViewOutputReference(this, "materialized_view");
        // range_partitioning - computed: false, optional: true, required: false
        this._rangePartitioning = new BigqueryTableRangePartitioningOutputReference(this, "range_partitioning");
        // table_constraints - computed: false, optional: true, required: false
        this._tableConstraints = new BigqueryTableTableConstraintsOutputReference(this, "table_constraints");
        // table_replication_info - computed: false, optional: true, required: false
        this._tableReplicationInfo = new BigqueryTableTableReplicationInfoOutputReference(this, "table_replication_info");
        // time_partitioning - computed: false, optional: true, required: false
        this._timePartitioning = new BigqueryTableTimePartitioningOutputReference(this, "time_partitioning");
        // view - computed: false, optional: true, required: false
        this._view = new BigqueryTableViewOutputReference(this, "view");
        this._clustering = config.clustering;
        this._datasetId = config.datasetId;
        this._deletionProtection = config.deletionProtection;
        this._description = config.description;
        this._expirationTime = config.expirationTime;
        this._friendlyName = config.friendlyName;
        this._id = config.id;
        this._labels = config.labels;
        this._maxStaleness = config.maxStaleness;
        this._project = config.project;
        this._requirePartitionFilter = config.requirePartitionFilter;
        this._resourceTags = config.resourceTags;
        this._schema = config.schema;
        this._tableId = config.tableId;
        this._biglakeConfiguration.internalValue = config.biglakeConfiguration;
        this._encryptionConfiguration.internalValue = config.encryptionConfiguration;
        this._externalDataConfiguration.internalValue = config.externalDataConfiguration;
        this._materializedView.internalValue = config.materializedView;
        this._rangePartitioning.internalValue = config.rangePartitioning;
        this._tableConstraints.internalValue = config.tableConstraints;
        this._tableReplicationInfo.internalValue = config.tableReplicationInfo;
        this._timePartitioning.internalValue = config.timePartitioning;
        this._view.internalValue = config.view;
    }
    get clustering() {
        return this.getListAttribute('clustering');
    }
    set clustering(value) {
        this._clustering = value;
    }
    resetClustering() {
        this._clustering = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clusteringInput() {
        return this._clustering;
    }
    // creation_time - computed: true, optional: false, required: false
    get creationTime() {
        return this.getNumberAttribute('creation_time');
    }
    get datasetId() {
        return this.getStringAttribute('dataset_id');
    }
    set datasetId(value) {
        this._datasetId = value;
    }
    // Temporarily expose input value. Use with caution.
    get datasetIdInput() {
        return this._datasetId;
    }
    get deletionProtection() {
        return this.getBooleanAttribute('deletion_protection');
    }
    set deletionProtection(value) {
        this._deletionProtection = value;
    }
    resetDeletionProtection() {
        this._deletionProtection = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deletionProtectionInput() {
        return this._deletionProtection;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get effectiveLabels() {
        return this._effectiveLabels;
    }
    // etag - computed: true, optional: false, required: false
    get etag() {
        return this.getStringAttribute('etag');
    }
    get expirationTime() {
        return this.getNumberAttribute('expiration_time');
    }
    set expirationTime(value) {
        this._expirationTime = value;
    }
    resetExpirationTime() {
        this._expirationTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get expirationTimeInput() {
        return this._expirationTime;
    }
    get friendlyName() {
        return this.getStringAttribute('friendly_name');
    }
    set friendlyName(value) {
        this._friendlyName = value;
    }
    resetFriendlyName() {
        this._friendlyName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get friendlyNameInput() {
        return this._friendlyName;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    // last_modified_time - computed: true, optional: false, required: false
    get lastModifiedTime() {
        return this.getNumberAttribute('last_modified_time');
    }
    // location - computed: true, optional: false, required: false
    get location() {
        return this.getStringAttribute('location');
    }
    get maxStaleness() {
        return this.getStringAttribute('max_staleness');
    }
    set maxStaleness(value) {
        this._maxStaleness = value;
    }
    resetMaxStaleness() {
        this._maxStaleness = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxStalenessInput() {
        return this._maxStaleness;
    }
    // num_bytes - computed: true, optional: false, required: false
    get numBytes() {
        return this.getNumberAttribute('num_bytes');
    }
    // num_long_term_bytes - computed: true, optional: false, required: false
    get numLongTermBytes() {
        return this.getNumberAttribute('num_long_term_bytes');
    }
    // num_rows - computed: true, optional: false, required: false
    get numRows() {
        return this.getNumberAttribute('num_rows');
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get requirePartitionFilter() {
        return this.getBooleanAttribute('require_partition_filter');
    }
    set requirePartitionFilter(value) {
        this._requirePartitionFilter = value;
    }
    resetRequirePartitionFilter() {
        this._requirePartitionFilter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requirePartitionFilterInput() {
        return this._requirePartitionFilter;
    }
    get resourceTags() {
        return this.getStringMapAttribute('resource_tags');
    }
    set resourceTags(value) {
        this._resourceTags = value;
    }
    resetResourceTags() {
        this._resourceTags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceTagsInput() {
        return this._resourceTags;
    }
    get schema() {
        return this.getStringAttribute('schema');
    }
    set schema(value) {
        this._schema = value;
    }
    resetSchema() {
        this._schema = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get schemaInput() {
        return this._schema;
    }
    // self_link - computed: true, optional: false, required: false
    get selfLink() {
        return this.getStringAttribute('self_link');
    }
    get tableId() {
        return this.getStringAttribute('table_id');
    }
    set tableId(value) {
        this._tableId = value;
    }
    // Temporarily expose input value. Use with caution.
    get tableIdInput() {
        return this._tableId;
    }
    get terraformLabels() {
        return this._terraformLabels;
    }
    // type - computed: true, optional: false, required: false
    get type() {
        return this.getStringAttribute('type');
    }
    get biglakeConfiguration() {
        return this._biglakeConfiguration;
    }
    putBiglakeConfiguration(value) {
        this._biglakeConfiguration.internalValue = value;
    }
    resetBiglakeConfiguration() {
        this._biglakeConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get biglakeConfigurationInput() {
        return this._biglakeConfiguration.internalValue;
    }
    get encryptionConfiguration() {
        return this._encryptionConfiguration;
    }
    putEncryptionConfiguration(value) {
        this._encryptionConfiguration.internalValue = value;
    }
    resetEncryptionConfiguration() {
        this._encryptionConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encryptionConfigurationInput() {
        return this._encryptionConfiguration.internalValue;
    }
    get externalDataConfiguration() {
        return this._externalDataConfiguration;
    }
    putExternalDataConfiguration(value) {
        this._externalDataConfiguration.internalValue = value;
    }
    resetExternalDataConfiguration() {
        this._externalDataConfiguration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get externalDataConfigurationInput() {
        return this._externalDataConfiguration.internalValue;
    }
    get materializedView() {
        return this._materializedView;
    }
    putMaterializedView(value) {
        this._materializedView.internalValue = value;
    }
    resetMaterializedView() {
        this._materializedView.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get materializedViewInput() {
        return this._materializedView.internalValue;
    }
    get rangePartitioning() {
        return this._rangePartitioning;
    }
    putRangePartitioning(value) {
        this._rangePartitioning.internalValue = value;
    }
    resetRangePartitioning() {
        this._rangePartitioning.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rangePartitioningInput() {
        return this._rangePartitioning.internalValue;
    }
    get tableConstraints() {
        return this._tableConstraints;
    }
    putTableConstraints(value) {
        this._tableConstraints.internalValue = value;
    }
    resetTableConstraints() {
        this._tableConstraints.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tableConstraintsInput() {
        return this._tableConstraints.internalValue;
    }
    get tableReplicationInfo() {
        return this._tableReplicationInfo;
    }
    putTableReplicationInfo(value) {
        this._tableReplicationInfo.internalValue = value;
    }
    resetTableReplicationInfo() {
        this._tableReplicationInfo.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tableReplicationInfoInput() {
        return this._tableReplicationInfo.internalValue;
    }
    get timePartitioning() {
        return this._timePartitioning;
    }
    putTimePartitioning(value) {
        this._timePartitioning.internalValue = value;
    }
    resetTimePartitioning() {
        this._timePartitioning.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timePartitioningInput() {
        return this._timePartitioning.internalValue;
    }
    get view() {
        return this._view;
    }
    putView(value) {
        this._view.internalValue = value;
    }
    resetView() {
        this._view.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get viewInput() {
        return this._view.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            clustering: cdktf.listMapper(cdktf.stringToTerraform, false)(this._clustering),
            dataset_id: cdktf.stringToTerraform(this._datasetId),
            deletion_protection: cdktf.booleanToTerraform(this._deletionProtection),
            description: cdktf.stringToTerraform(this._description),
            expiration_time: cdktf.numberToTerraform(this._expirationTime),
            friendly_name: cdktf.stringToTerraform(this._friendlyName),
            id: cdktf.stringToTerraform(this._id),
            labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._labels),
            max_staleness: cdktf.stringToTerraform(this._maxStaleness),
            project: cdktf.stringToTerraform(this._project),
            require_partition_filter: cdktf.booleanToTerraform(this._requirePartitionFilter),
            resource_tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._resourceTags),
            schema: cdktf.stringToTerraform(this._schema),
            table_id: cdktf.stringToTerraform(this._tableId),
            biglake_configuration: bigqueryTableBiglakeConfigurationToTerraform(this._biglakeConfiguration.internalValue),
            encryption_configuration: bigqueryTableEncryptionConfigurationToTerraform(this._encryptionConfiguration.internalValue),
            external_data_configuration: bigqueryTableExternalDataConfigurationToTerraform(this._externalDataConfiguration.internalValue),
            materialized_view: bigqueryTableMaterializedViewToTerraform(this._materializedView.internalValue),
            range_partitioning: bigqueryTableRangePartitioningToTerraform(this._rangePartitioning.internalValue),
            table_constraints: bigqueryTableTableConstraintsToTerraform(this._tableConstraints.internalValue),
            table_replication_info: bigqueryTableTableReplicationInfoToTerraform(this._tableReplicationInfo.internalValue),
            time_partitioning: bigqueryTableTimePartitioningToTerraform(this._timePartitioning.internalValue),
            view: bigqueryTableViewToTerraform(this._view.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            clustering: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._clustering),
                isBlock: false,
                type: "list",
                storageClassType: "stringList",
            },
            dataset_id: {
                value: cdktf.stringToHclTerraform(this._datasetId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            deletion_protection: {
                value: cdktf.booleanToHclTerraform(this._deletionProtection),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            description: {
                value: cdktf.stringToHclTerraform(this._description),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            expiration_time: {
                value: cdktf.numberToHclTerraform(this._expirationTime),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            friendly_name: {
                value: cdktf.stringToHclTerraform(this._friendlyName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            labels: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._labels),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            max_staleness: {
                value: cdktf.stringToHclTerraform(this._maxStaleness),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            project: {
                value: cdktf.stringToHclTerraform(this._project),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            require_partition_filter: {
                value: cdktf.booleanToHclTerraform(this._requirePartitionFilter),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            resource_tags: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._resourceTags),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            schema: {
                value: cdktf.stringToHclTerraform(this._schema),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            table_id: {
                value: cdktf.stringToHclTerraform(this._tableId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            biglake_configuration: {
                value: bigqueryTableBiglakeConfigurationToHclTerraform(this._biglakeConfiguration.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "BigqueryTableBiglakeConfigurationList",
            },
            encryption_configuration: {
                value: bigqueryTableEncryptionConfigurationToHclTerraform(this._encryptionConfiguration.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "BigqueryTableEncryptionConfigurationList",
            },
            external_data_configuration: {
                value: bigqueryTableExternalDataConfigurationToHclTerraform(this._externalDataConfiguration.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "BigqueryTableExternalDataConfigurationList",
            },
            materialized_view: {
                value: bigqueryTableMaterializedViewToHclTerraform(this._materializedView.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "BigqueryTableMaterializedViewList",
            },
            range_partitioning: {
                value: bigqueryTableRangePartitioningToHclTerraform(this._rangePartitioning.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "BigqueryTableRangePartitioningList",
            },
            table_constraints: {
                value: bigqueryTableTableConstraintsToHclTerraform(this._tableConstraints.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "BigqueryTableTableConstraintsList",
            },
            table_replication_info: {
                value: bigqueryTableTableReplicationInfoToHclTerraform(this._tableReplicationInfo.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "BigqueryTableTableReplicationInfoList",
            },
            time_partitioning: {
                value: bigqueryTableTimePartitioningToHclTerraform(this._timePartitioning.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "BigqueryTableTimePartitioningList",
            },
            view: {
                value: bigqueryTableViewToHclTerraform(this._view.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "BigqueryTableViewList",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.BigqueryTable = BigqueryTable;
_2 = JSII_RTTI_SYMBOL_1;
BigqueryTable[_2] = { fqn: "@cdktf/provider-google.bigqueryTable.BigqueryTable", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
BigqueryTable.tfResourceType = "google_bigquery_table";
//# sourceMappingURL=data:application/json;base64,