"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataLossPreventionDiscoveryConfigOrgConfigOutputReference = exports.dataLossPreventionDiscoveryConfigOrgConfigToHclTerraform = exports.dataLossPreventionDiscoveryConfigOrgConfigToTerraform = exports.DataLossPreventionDiscoveryConfigOrgConfigLocationOutputReference = exports.dataLossPreventionDiscoveryConfigOrgConfigLocationToHclTerraform = exports.dataLossPreventionDiscoveryConfigOrgConfigLocationToTerraform = exports.DataLossPreventionDiscoveryConfigActionsList = exports.DataLossPreventionDiscoveryConfigActionsOutputReference = exports.dataLossPreventionDiscoveryConfigActionsToHclTerraform = exports.dataLossPreventionDiscoveryConfigActionsToTerraform = exports.DataLossPreventionDiscoveryConfigActionsTagResourcesOutputReference = exports.dataLossPreventionDiscoveryConfigActionsTagResourcesToHclTerraform = exports.dataLossPreventionDiscoveryConfigActionsTagResourcesToTerraform = exports.DataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsList = exports.DataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsOutputReference = exports.dataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsToHclTerraform = exports.dataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsToTerraform = exports.DataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsTagOutputReference = exports.dataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsTagToHclTerraform = exports.dataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsTagToTerraform = exports.DataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsSensitivityScoreOutputReference = exports.dataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsSensitivityScoreToHclTerraform = exports.dataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsSensitivityScoreToTerraform = exports.DataLossPreventionDiscoveryConfigActionsPubSubNotificationOutputReference = exports.dataLossPreventionDiscoveryConfigActionsPubSubNotificationToHclTerraform = exports.dataLossPreventionDiscoveryConfigActionsPubSubNotificationToTerraform = exports.DataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionOutputReference = exports.dataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionToHclTerraform = exports.dataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionToTerraform = exports.DataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsOutputReference = exports.dataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsToHclTerraform = exports.dataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsToTerraform = exports.DataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsConditionsList = exports.DataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsConditionsOutputReference = exports.dataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsConditionsToHclTerraform = exports.dataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsConditionsToTerraform = exports.DataLossPreventionDiscoveryConfigActionsExportDataOutputReference = exports.dataLossPreventionDiscoveryConfigActionsExportDataToHclTerraform = exports.dataLossPreventionDiscoveryConfigActionsExportDataToTerraform = exports.DataLossPreventionDiscoveryConfigActionsExportDataProfileTableOutputReference = exports.dataLossPreventionDiscoveryConfigActionsExportDataProfileTableToHclTerraform = exports.dataLossPreventionDiscoveryConfigActionsExportDataProfileTableToTerraform = exports.DataLossPreventionDiscoveryConfigErrorsList = exports.DataLossPreventionDiscoveryConfigErrorsOutputReference = exports.dataLossPreventionDiscoveryConfigErrorsToHclTerraform = exports.dataLossPreventionDiscoveryConfigErrorsToTerraform = exports.DataLossPreventionDiscoveryConfigErrorsDetailsList = exports.DataLossPreventionDiscoveryConfigErrorsDetailsOutputReference = exports.dataLossPreventionDiscoveryConfigErrorsDetailsToHclTerraform = exports.dataLossPreventionDiscoveryConfigErrorsDetailsToTerraform = void 0;
exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetDisabledToTerraform = exports.DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetConditionsOutputReference = exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetConditionsToHclTerraform = exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetConditionsToTerraform = exports.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetOutputReference = exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetToHclTerraform = exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetToTerraform = exports.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterOutputReference = exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterToHclTerraform = exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterToTerraform = exports.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesOutputReference = exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesToHclTerraform = exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesToTerraform = exports.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesOutputReference = exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesToHclTerraform = exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesToTerraform = exports.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatternsList = exports.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatternsOutputReference = exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatternsToHclTerraform = exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatternsToTerraform = exports.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTableReferenceOutputReference = exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTableReferenceToHclTerraform = exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTableReferenceToTerraform = exports.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterOtherTablesOutputReference = exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterOtherTablesToHclTerraform = exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterOtherTablesToTerraform = exports.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetDisabledOutputReference = exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetDisabledToHclTerraform = exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetDisabledToTerraform = exports.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsOutputReference = exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsToHclTerraform = exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsToTerraform = exports.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsTypesOutputReference = exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsTypesToHclTerraform = exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsTypesToTerraform = exports.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsOrConditionsOutputReference = exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsOrConditionsToHclTerraform = exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsOrConditionsToTerraform = exports.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceOutputReference = exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceToHclTerraform = exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceToTerraform = exports.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceTableModifiedCadenceOutputReference = exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceTableModifiedCadenceToHclTerraform = exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceTableModifiedCadenceToTerraform = exports.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceSchemaModifiedCadenceOutputReference = exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceSchemaModifiedCadenceToHclTerraform = exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceSchemaModifiedCadenceToTerraform = exports.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceInspectTemplateModifiedCadenceOutputReference = exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceInspectTemplateModifiedCadenceToHclTerraform = exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceInspectTemplateModifiedCadenceToTerraform = void 0;
exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsToHclTerraform = exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsToTerraform = exports.DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsCloudStorageRegexOutputReference = exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsCloudStorageRegexToHclTerraform = exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsCloudStorageRegexToTerraform = exports.DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCloudStorageResourceReferenceOutputReference = exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCloudStorageResourceReferenceToHclTerraform = exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCloudStorageResourceReferenceToTerraform = exports.DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetDisabledOutputReference = exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetDisabledToHclTerraform = exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetDisabledToTerraform = exports.DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditionsOutputReference = exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditionsToHclTerraform = exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditionsToTerraform = exports.DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditionsCloudStorageConditionsOutputReference = exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditionsCloudStorageConditionsToHclTerraform = exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditionsCloudStorageConditionsToTerraform = exports.DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetOutputReference = exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetToHclTerraform = exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetToTerraform = exports.DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceOutputReference = exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceToHclTerraform = exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceToTerraform = exports.DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceSchemaModifiedCadenceOutputReference = exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceSchemaModifiedCadenceToHclTerraform = exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceSchemaModifiedCadenceToTerraform = exports.DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceInspectTemplateModifiedCadenceOutputReference = exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceInspectTemplateModifiedCadenceToHclTerraform = exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceInspectTemplateModifiedCadenceToTerraform = exports.DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterOutputReference = exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterToHclTerraform = exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterToTerraform = exports.DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterOthersOutputReference = exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterOthersToHclTerraform = exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterOthersToTerraform = exports.DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterDatabaseResourceReferenceOutputReference = exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterDatabaseResourceReferenceToHclTerraform = exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterDatabaseResourceReferenceToTerraform = exports.DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionOutputReference = exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionToHclTerraform = exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionToTerraform = exports.DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesOutputReference = exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesToHclTerraform = exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesToTerraform = exports.DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesPatternsList = exports.DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesPatternsOutputReference = exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesPatternsToHclTerraform = exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesPatternsToTerraform = exports.DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetDisabledOutputReference = exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetDisabledToHclTerraform = void 0;
exports.DataLossPreventionDiscoveryConfig = exports.DataLossPreventionDiscoveryConfigTimeoutsOutputReference = exports.dataLossPreventionDiscoveryConfigTimeoutsToHclTerraform = exports.dataLossPreventionDiscoveryConfigTimeoutsToTerraform = exports.DataLossPreventionDiscoveryConfigTargetsList = exports.DataLossPreventionDiscoveryConfigTargetsOutputReference = exports.dataLossPreventionDiscoveryConfigTargetsToHclTerraform = exports.dataLossPreventionDiscoveryConfigTargetsToTerraform = exports.DataLossPreventionDiscoveryConfigTargetsSecretsTargetOutputReference = exports.dataLossPreventionDiscoveryConfigTargetsSecretsTargetToHclTerraform = exports.dataLossPreventionDiscoveryConfigTargetsSecretsTargetToTerraform = exports.DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetOutputReference = exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetToHclTerraform = exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetToTerraform = exports.DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetGenerationCadenceOutputReference = exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetGenerationCadenceToHclTerraform = exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetGenerationCadenceToTerraform = exports.DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetGenerationCadenceInspectTemplateModifiedCadenceOutputReference = exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetGenerationCadenceInspectTemplateModifiedCadenceToHclTerraform = exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetGenerationCadenceInspectTemplateModifiedCadenceToTerraform = exports.DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterOutputReference = exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterToHclTerraform = exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterToTerraform = exports.DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterOthersOutputReference = exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterOthersToHclTerraform = exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterOthersToTerraform = exports.DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionOutputReference = exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionToHclTerraform = exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionToTerraform = exports.DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesOutputReference = exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesToHclTerraform = exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesToTerraform = exports.DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsList = exports.DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsOutputReference = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function dataLossPreventionDiscoveryConfigErrorsDetailsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.dataLossPreventionDiscoveryConfigErrorsDetailsToTerraform = dataLossPreventionDiscoveryConfigErrorsDetailsToTerraform;
function dataLossPreventionDiscoveryConfigErrorsDetailsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.dataLossPreventionDiscoveryConfigErrorsDetailsToHclTerraform = dataLossPreventionDiscoveryConfigErrorsDetailsToHclTerraform;
class DataLossPreventionDiscoveryConfigErrorsDetailsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // details - computed: true, optional: false, required: false
        this._details = new cdktf.StringMapList(this, "details", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // code - computed: true, optional: false, required: false
    get code() {
        return this.getNumberAttribute('code');
    }
    get details() {
        return this._details;
    }
    // message - computed: true, optional: false, required: false
    get message() {
        return this.getStringAttribute('message');
    }
}
exports.DataLossPreventionDiscoveryConfigErrorsDetailsOutputReference = DataLossPreventionDiscoveryConfigErrorsDetailsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigErrorsDetailsOutputReference[_a] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigErrorsDetailsOutputReference", version: "14.13.1" };
class DataLossPreventionDiscoveryConfigErrorsDetailsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataLossPreventionDiscoveryConfigErrorsDetailsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataLossPreventionDiscoveryConfigErrorsDetailsList = DataLossPreventionDiscoveryConfigErrorsDetailsList;
_b = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigErrorsDetailsList[_b] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigErrorsDetailsList", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigErrorsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.dataLossPreventionDiscoveryConfigErrorsToTerraform = dataLossPreventionDiscoveryConfigErrorsToTerraform;
function dataLossPreventionDiscoveryConfigErrorsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.dataLossPreventionDiscoveryConfigErrorsToHclTerraform = dataLossPreventionDiscoveryConfigErrorsToHclTerraform;
class DataLossPreventionDiscoveryConfigErrorsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // details - computed: true, optional: false, required: false
        this._details = new DataLossPreventionDiscoveryConfigErrorsDetailsList(this, "details", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    get details() {
        return this._details;
    }
    // timestamp - computed: true, optional: false, required: false
    get timestamp() {
        return this.getStringAttribute('timestamp');
    }
}
exports.DataLossPreventionDiscoveryConfigErrorsOutputReference = DataLossPreventionDiscoveryConfigErrorsOutputReference;
_c = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigErrorsOutputReference[_c] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigErrorsOutputReference", version: "14.13.1" };
class DataLossPreventionDiscoveryConfigErrorsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataLossPreventionDiscoveryConfigErrorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataLossPreventionDiscoveryConfigErrorsList = DataLossPreventionDiscoveryConfigErrorsList;
_d = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigErrorsList[_d] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigErrorsList", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigActionsExportDataProfileTableToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        dataset_id: cdktf.stringToTerraform(struct.datasetId),
        project_id: cdktf.stringToTerraform(struct.projectId),
        table_id: cdktf.stringToTerraform(struct.tableId),
    };
}
exports.dataLossPreventionDiscoveryConfigActionsExportDataProfileTableToTerraform = dataLossPreventionDiscoveryConfigActionsExportDataProfileTableToTerraform;
function dataLossPreventionDiscoveryConfigActionsExportDataProfileTableToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        dataset_id: {
            value: cdktf.stringToHclTerraform(struct.datasetId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        project_id: {
            value: cdktf.stringToHclTerraform(struct.projectId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        table_id: {
            value: cdktf.stringToHclTerraform(struct.tableId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigActionsExportDataProfileTableToHclTerraform = dataLossPreventionDiscoveryConfigActionsExportDataProfileTableToHclTerraform;
class DataLossPreventionDiscoveryConfigActionsExportDataProfileTableOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._datasetId !== undefined) {
            hasAnyValues = true;
            internalValueResult.datasetId = this._datasetId;
        }
        if (this._projectId !== undefined) {
            hasAnyValues = true;
            internalValueResult.projectId = this._projectId;
        }
        if (this._tableId !== undefined) {
            hasAnyValues = true;
            internalValueResult.tableId = this._tableId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._datasetId = undefined;
            this._projectId = undefined;
            this._tableId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._datasetId = value.datasetId;
            this._projectId = value.projectId;
            this._tableId = value.tableId;
        }
    }
    get datasetId() {
        return this.getStringAttribute('dataset_id');
    }
    set datasetId(value) {
        this._datasetId = value;
    }
    resetDatasetId() {
        this._datasetId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get datasetIdInput() {
        return this._datasetId;
    }
    get projectId() {
        return this.getStringAttribute('project_id');
    }
    set projectId(value) {
        this._projectId = value;
    }
    resetProjectId() {
        this._projectId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectIdInput() {
        return this._projectId;
    }
    get tableId() {
        return this.getStringAttribute('table_id');
    }
    set tableId(value) {
        this._tableId = value;
    }
    resetTableId() {
        this._tableId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tableIdInput() {
        return this._tableId;
    }
}
exports.DataLossPreventionDiscoveryConfigActionsExportDataProfileTableOutputReference = DataLossPreventionDiscoveryConfigActionsExportDataProfileTableOutputReference;
_e = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigActionsExportDataProfileTableOutputReference[_e] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigActionsExportDataProfileTableOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigActionsExportDataToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        profile_table: dataLossPreventionDiscoveryConfigActionsExportDataProfileTableToTerraform(struct.profileTable),
    };
}
exports.dataLossPreventionDiscoveryConfigActionsExportDataToTerraform = dataLossPreventionDiscoveryConfigActionsExportDataToTerraform;
function dataLossPreventionDiscoveryConfigActionsExportDataToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        profile_table: {
            value: dataLossPreventionDiscoveryConfigActionsExportDataProfileTableToHclTerraform(struct.profileTable),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigActionsExportDataProfileTableList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigActionsExportDataToHclTerraform = dataLossPreventionDiscoveryConfigActionsExportDataToHclTerraform;
class DataLossPreventionDiscoveryConfigActionsExportDataOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // profile_table - computed: false, optional: true, required: false
        this._profileTable = new DataLossPreventionDiscoveryConfigActionsExportDataProfileTableOutputReference(this, "profile_table");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._profileTable?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.profileTable = this._profileTable?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._profileTable.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._profileTable.internalValue = value.profileTable;
        }
    }
    get profileTable() {
        return this._profileTable;
    }
    putProfileTable(value) {
        this._profileTable.internalValue = value;
    }
    resetProfileTable() {
        this._profileTable.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get profileTableInput() {
        return this._profileTable.internalValue;
    }
}
exports.DataLossPreventionDiscoveryConfigActionsExportDataOutputReference = DataLossPreventionDiscoveryConfigActionsExportDataOutputReference;
_f = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigActionsExportDataOutputReference[_f] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigActionsExportDataOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsConditionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        minimum_risk_score: cdktf.stringToTerraform(struct.minimumRiskScore),
        minimum_sensitivity_score: cdktf.stringToTerraform(struct.minimumSensitivityScore),
    };
}
exports.dataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsConditionsToTerraform = dataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsConditionsToTerraform;
function dataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsConditionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        minimum_risk_score: {
            value: cdktf.stringToHclTerraform(struct.minimumRiskScore),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        minimum_sensitivity_score: {
            value: cdktf.stringToHclTerraform(struct.minimumSensitivityScore),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsConditionsToHclTerraform = dataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsConditionsToHclTerraform;
class DataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsConditionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._minimumRiskScore !== undefined) {
            hasAnyValues = true;
            internalValueResult.minimumRiskScore = this._minimumRiskScore;
        }
        if (this._minimumSensitivityScore !== undefined) {
            hasAnyValues = true;
            internalValueResult.minimumSensitivityScore = this._minimumSensitivityScore;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._minimumRiskScore = undefined;
            this._minimumSensitivityScore = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._minimumRiskScore = value.minimumRiskScore;
            this._minimumSensitivityScore = value.minimumSensitivityScore;
        }
    }
    get minimumRiskScore() {
        return this.getStringAttribute('minimum_risk_score');
    }
    set minimumRiskScore(value) {
        this._minimumRiskScore = value;
    }
    resetMinimumRiskScore() {
        this._minimumRiskScore = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minimumRiskScoreInput() {
        return this._minimumRiskScore;
    }
    get minimumSensitivityScore() {
        return this.getStringAttribute('minimum_sensitivity_score');
    }
    set minimumSensitivityScore(value) {
        this._minimumSensitivityScore = value;
    }
    resetMinimumSensitivityScore() {
        this._minimumSensitivityScore = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minimumSensitivityScoreInput() {
        return this._minimumSensitivityScore;
    }
}
exports.DataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsConditionsOutputReference = DataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsConditionsOutputReference;
_g = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsConditionsOutputReference[_g] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsConditionsOutputReference", version: "14.13.1" };
class DataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsConditionsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsConditionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsConditionsList = DataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsConditionsList;
_h = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsConditionsList[_h] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsConditionsList", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        logical_operator: cdktf.stringToTerraform(struct.logicalOperator),
        conditions: cdktf.listMapper(dataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsConditionsToTerraform, true)(struct.conditions),
    };
}
exports.dataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsToTerraform = dataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsToTerraform;
function dataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        logical_operator: {
            value: cdktf.stringToHclTerraform(struct.logicalOperator),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        conditions: {
            value: cdktf.listMapperHcl(dataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsConditionsToHclTerraform, true)(struct.conditions),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsConditionsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsToHclTerraform = dataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsToHclTerraform;
class DataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // conditions - computed: false, optional: true, required: false
        this._conditions = new DataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsConditionsList(this, "conditions", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._logicalOperator !== undefined) {
            hasAnyValues = true;
            internalValueResult.logicalOperator = this._logicalOperator;
        }
        if (this._conditions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.conditions = this._conditions?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._logicalOperator = undefined;
            this._conditions.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._logicalOperator = value.logicalOperator;
            this._conditions.internalValue = value.conditions;
        }
    }
    get logicalOperator() {
        return this.getStringAttribute('logical_operator');
    }
    set logicalOperator(value) {
        this._logicalOperator = value;
    }
    resetLogicalOperator() {
        this._logicalOperator = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logicalOperatorInput() {
        return this._logicalOperator;
    }
    get conditions() {
        return this._conditions;
    }
    putConditions(value) {
        this._conditions.internalValue = value;
    }
    resetConditions() {
        this._conditions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get conditionsInput() {
        return this._conditions.internalValue;
    }
}
exports.DataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsOutputReference = DataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsOutputReference;
_j = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsOutputReference[_j] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        expressions: dataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsToTerraform(struct.expressions),
    };
}
exports.dataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionToTerraform = dataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionToTerraform;
function dataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        expressions: {
            value: dataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsToHclTerraform(struct.expressions),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionToHclTerraform = dataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionToHclTerraform;
class DataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // expressions - computed: false, optional: true, required: false
        this._expressions = new DataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionExpressionsOutputReference(this, "expressions");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._expressions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.expressions = this._expressions?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._expressions.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._expressions.internalValue = value.expressions;
        }
    }
    get expressions() {
        return this._expressions;
    }
    putExpressions(value) {
        this._expressions.internalValue = value;
    }
    resetExpressions() {
        this._expressions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get expressionsInput() {
        return this._expressions.internalValue;
    }
}
exports.DataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionOutputReference = DataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionOutputReference;
_k = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionOutputReference[_k] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigActionsPubSubNotificationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        detail_of_message: cdktf.stringToTerraform(struct.detailOfMessage),
        event: cdktf.stringToTerraform(struct.event),
        topic: cdktf.stringToTerraform(struct.topic),
        pubsub_condition: dataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionToTerraform(struct.pubsubCondition),
    };
}
exports.dataLossPreventionDiscoveryConfigActionsPubSubNotificationToTerraform = dataLossPreventionDiscoveryConfigActionsPubSubNotificationToTerraform;
function dataLossPreventionDiscoveryConfigActionsPubSubNotificationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        detail_of_message: {
            value: cdktf.stringToHclTerraform(struct.detailOfMessage),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        event: {
            value: cdktf.stringToHclTerraform(struct.event),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        topic: {
            value: cdktf.stringToHclTerraform(struct.topic),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        pubsub_condition: {
            value: dataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionToHclTerraform(struct.pubsubCondition),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigActionsPubSubNotificationToHclTerraform = dataLossPreventionDiscoveryConfigActionsPubSubNotificationToHclTerraform;
class DataLossPreventionDiscoveryConfigActionsPubSubNotificationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // pubsub_condition - computed: false, optional: true, required: false
        this._pubsubCondition = new DataLossPreventionDiscoveryConfigActionsPubSubNotificationPubsubConditionOutputReference(this, "pubsub_condition");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._detailOfMessage !== undefined) {
            hasAnyValues = true;
            internalValueResult.detailOfMessage = this._detailOfMessage;
        }
        if (this._event !== undefined) {
            hasAnyValues = true;
            internalValueResult.event = this._event;
        }
        if (this._topic !== undefined) {
            hasAnyValues = true;
            internalValueResult.topic = this._topic;
        }
        if (this._pubsubCondition?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.pubsubCondition = this._pubsubCondition?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._detailOfMessage = undefined;
            this._event = undefined;
            this._topic = undefined;
            this._pubsubCondition.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._detailOfMessage = value.detailOfMessage;
            this._event = value.event;
            this._topic = value.topic;
            this._pubsubCondition.internalValue = value.pubsubCondition;
        }
    }
    get detailOfMessage() {
        return this.getStringAttribute('detail_of_message');
    }
    set detailOfMessage(value) {
        this._detailOfMessage = value;
    }
    resetDetailOfMessage() {
        this._detailOfMessage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get detailOfMessageInput() {
        return this._detailOfMessage;
    }
    get event() {
        return this.getStringAttribute('event');
    }
    set event(value) {
        this._event = value;
    }
    resetEvent() {
        this._event = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get eventInput() {
        return this._event;
    }
    get topic() {
        return this.getStringAttribute('topic');
    }
    set topic(value) {
        this._topic = value;
    }
    resetTopic() {
        this._topic = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get topicInput() {
        return this._topic;
    }
    get pubsubCondition() {
        return this._pubsubCondition;
    }
    putPubsubCondition(value) {
        this._pubsubCondition.internalValue = value;
    }
    resetPubsubCondition() {
        this._pubsubCondition.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pubsubConditionInput() {
        return this._pubsubCondition.internalValue;
    }
}
exports.DataLossPreventionDiscoveryConfigActionsPubSubNotificationOutputReference = DataLossPreventionDiscoveryConfigActionsPubSubNotificationOutputReference;
_l = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigActionsPubSubNotificationOutputReference[_l] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigActionsPubSubNotificationOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsSensitivityScoreToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        score: cdktf.stringToTerraform(struct.score),
    };
}
exports.dataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsSensitivityScoreToTerraform = dataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsSensitivityScoreToTerraform;
function dataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsSensitivityScoreToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        score: {
            value: cdktf.stringToHclTerraform(struct.score),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsSensitivityScoreToHclTerraform = dataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsSensitivityScoreToHclTerraform;
class DataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsSensitivityScoreOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._score !== undefined) {
            hasAnyValues = true;
            internalValueResult.score = this._score;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._score = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._score = value.score;
        }
    }
    get score() {
        return this.getStringAttribute('score');
    }
    set score(value) {
        this._score = value;
    }
    // Temporarily expose input value. Use with caution.
    get scoreInput() {
        return this._score;
    }
}
exports.DataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsSensitivityScoreOutputReference = DataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsSensitivityScoreOutputReference;
_m = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsSensitivityScoreOutputReference[_m] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsSensitivityScoreOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsTagToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        namespaced_value: cdktf.stringToTerraform(struct.namespacedValue),
    };
}
exports.dataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsTagToTerraform = dataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsTagToTerraform;
function dataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsTagToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        namespaced_value: {
            value: cdktf.stringToHclTerraform(struct.namespacedValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsTagToHclTerraform = dataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsTagToHclTerraform;
class DataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsTagOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._namespacedValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.namespacedValue = this._namespacedValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._namespacedValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._namespacedValue = value.namespacedValue;
        }
    }
    get namespacedValue() {
        return this.getStringAttribute('namespaced_value');
    }
    set namespacedValue(value) {
        this._namespacedValue = value;
    }
    resetNamespacedValue() {
        this._namespacedValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get namespacedValueInput() {
        return this._namespacedValue;
    }
}
exports.DataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsTagOutputReference = DataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsTagOutputReference;
_o = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsTagOutputReference[_o] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsTagOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        sensitivity_score: dataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsSensitivityScoreToTerraform(struct.sensitivityScore),
        tag: dataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsTagToTerraform(struct.tag),
    };
}
exports.dataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsToTerraform = dataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsToTerraform;
function dataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        sensitivity_score: {
            value: dataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsSensitivityScoreToHclTerraform(struct.sensitivityScore),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsSensitivityScoreList",
        },
        tag: {
            value: dataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsTagToHclTerraform(struct.tag),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsTagList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsToHclTerraform = dataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsToHclTerraform;
class DataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // sensitivity_score - computed: false, optional: true, required: false
        this._sensitivityScore = new DataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsSensitivityScoreOutputReference(this, "sensitivity_score");
        // tag - computed: false, optional: true, required: false
        this._tag = new DataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsTagOutputReference(this, "tag");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._sensitivityScore?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sensitivityScore = this._sensitivityScore?.internalValue;
        }
        if (this._tag?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.tag = this._tag?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._sensitivityScore.internalValue = undefined;
            this._tag.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._sensitivityScore.internalValue = value.sensitivityScore;
            this._tag.internalValue = value.tag;
        }
    }
    get sensitivityScore() {
        return this._sensitivityScore;
    }
    putSensitivityScore(value) {
        this._sensitivityScore.internalValue = value;
    }
    resetSensitivityScore() {
        this._sensitivityScore.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sensitivityScoreInput() {
        return this._sensitivityScore.internalValue;
    }
    get tag() {
        return this._tag;
    }
    putTag(value) {
        this._tag.internalValue = value;
    }
    resetTag() {
        this._tag.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagInput() {
        return this._tag.internalValue;
    }
}
exports.DataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsOutputReference = DataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsOutputReference;
_p = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsOutputReference[_p] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsOutputReference", version: "14.13.1" };
class DataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsList = DataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsList;
_q = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsList[_q] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsList", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigActionsTagResourcesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        lower_data_risk_to_low: cdktf.booleanToTerraform(struct.lowerDataRiskToLow),
        profile_generations_to_tag: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.profileGenerationsToTag),
        tag_conditions: cdktf.listMapper(dataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsToTerraform, true)(struct.tagConditions),
    };
}
exports.dataLossPreventionDiscoveryConfigActionsTagResourcesToTerraform = dataLossPreventionDiscoveryConfigActionsTagResourcesToTerraform;
function dataLossPreventionDiscoveryConfigActionsTagResourcesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        lower_data_risk_to_low: {
            value: cdktf.booleanToHclTerraform(struct.lowerDataRiskToLow),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        profile_generations_to_tag: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.profileGenerationsToTag),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        tag_conditions: {
            value: cdktf.listMapperHcl(dataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsToHclTerraform, true)(struct.tagConditions),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigActionsTagResourcesToHclTerraform = dataLossPreventionDiscoveryConfigActionsTagResourcesToHclTerraform;
class DataLossPreventionDiscoveryConfigActionsTagResourcesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // tag_conditions - computed: false, optional: true, required: false
        this._tagConditions = new DataLossPreventionDiscoveryConfigActionsTagResourcesTagConditionsList(this, "tag_conditions", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._lowerDataRiskToLow !== undefined) {
            hasAnyValues = true;
            internalValueResult.lowerDataRiskToLow = this._lowerDataRiskToLow;
        }
        if (this._profileGenerationsToTag !== undefined) {
            hasAnyValues = true;
            internalValueResult.profileGenerationsToTag = this._profileGenerationsToTag;
        }
        if (this._tagConditions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.tagConditions = this._tagConditions?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._lowerDataRiskToLow = undefined;
            this._profileGenerationsToTag = undefined;
            this._tagConditions.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._lowerDataRiskToLow = value.lowerDataRiskToLow;
            this._profileGenerationsToTag = value.profileGenerationsToTag;
            this._tagConditions.internalValue = value.tagConditions;
        }
    }
    get lowerDataRiskToLow() {
        return this.getBooleanAttribute('lower_data_risk_to_low');
    }
    set lowerDataRiskToLow(value) {
        this._lowerDataRiskToLow = value;
    }
    resetLowerDataRiskToLow() {
        this._lowerDataRiskToLow = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lowerDataRiskToLowInput() {
        return this._lowerDataRiskToLow;
    }
    get profileGenerationsToTag() {
        return this.getListAttribute('profile_generations_to_tag');
    }
    set profileGenerationsToTag(value) {
        this._profileGenerationsToTag = value;
    }
    resetProfileGenerationsToTag() {
        this._profileGenerationsToTag = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get profileGenerationsToTagInput() {
        return this._profileGenerationsToTag;
    }
    get tagConditions() {
        return this._tagConditions;
    }
    putTagConditions(value) {
        this._tagConditions.internalValue = value;
    }
    resetTagConditions() {
        this._tagConditions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagConditionsInput() {
        return this._tagConditions.internalValue;
    }
}
exports.DataLossPreventionDiscoveryConfigActionsTagResourcesOutputReference = DataLossPreventionDiscoveryConfigActionsTagResourcesOutputReference;
_r = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigActionsTagResourcesOutputReference[_r] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigActionsTagResourcesOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigActionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        export_data: dataLossPreventionDiscoveryConfigActionsExportDataToTerraform(struct.exportData),
        pub_sub_notification: dataLossPreventionDiscoveryConfigActionsPubSubNotificationToTerraform(struct.pubSubNotification),
        tag_resources: dataLossPreventionDiscoveryConfigActionsTagResourcesToTerraform(struct.tagResources),
    };
}
exports.dataLossPreventionDiscoveryConfigActionsToTerraform = dataLossPreventionDiscoveryConfigActionsToTerraform;
function dataLossPreventionDiscoveryConfigActionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        export_data: {
            value: dataLossPreventionDiscoveryConfigActionsExportDataToHclTerraform(struct.exportData),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigActionsExportDataList",
        },
        pub_sub_notification: {
            value: dataLossPreventionDiscoveryConfigActionsPubSubNotificationToHclTerraform(struct.pubSubNotification),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigActionsPubSubNotificationList",
        },
        tag_resources: {
            value: dataLossPreventionDiscoveryConfigActionsTagResourcesToHclTerraform(struct.tagResources),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigActionsTagResourcesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigActionsToHclTerraform = dataLossPreventionDiscoveryConfigActionsToHclTerraform;
class DataLossPreventionDiscoveryConfigActionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // export_data - computed: false, optional: true, required: false
        this._exportData = new DataLossPreventionDiscoveryConfigActionsExportDataOutputReference(this, "export_data");
        // pub_sub_notification - computed: false, optional: true, required: false
        this._pubSubNotification = new DataLossPreventionDiscoveryConfigActionsPubSubNotificationOutputReference(this, "pub_sub_notification");
        // tag_resources - computed: false, optional: true, required: false
        this._tagResources = new DataLossPreventionDiscoveryConfigActionsTagResourcesOutputReference(this, "tag_resources");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._exportData?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.exportData = this._exportData?.internalValue;
        }
        if (this._pubSubNotification?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.pubSubNotification = this._pubSubNotification?.internalValue;
        }
        if (this._tagResources?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.tagResources = this._tagResources?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._exportData.internalValue = undefined;
            this._pubSubNotification.internalValue = undefined;
            this._tagResources.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._exportData.internalValue = value.exportData;
            this._pubSubNotification.internalValue = value.pubSubNotification;
            this._tagResources.internalValue = value.tagResources;
        }
    }
    get exportData() {
        return this._exportData;
    }
    putExportData(value) {
        this._exportData.internalValue = value;
    }
    resetExportData() {
        this._exportData.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get exportDataInput() {
        return this._exportData.internalValue;
    }
    get pubSubNotification() {
        return this._pubSubNotification;
    }
    putPubSubNotification(value) {
        this._pubSubNotification.internalValue = value;
    }
    resetPubSubNotification() {
        this._pubSubNotification.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pubSubNotificationInput() {
        return this._pubSubNotification.internalValue;
    }
    get tagResources() {
        return this._tagResources;
    }
    putTagResources(value) {
        this._tagResources.internalValue = value;
    }
    resetTagResources() {
        this._tagResources.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagResourcesInput() {
        return this._tagResources.internalValue;
    }
}
exports.DataLossPreventionDiscoveryConfigActionsOutputReference = DataLossPreventionDiscoveryConfigActionsOutputReference;
_s = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigActionsOutputReference[_s] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigActionsOutputReference", version: "14.13.1" };
class DataLossPreventionDiscoveryConfigActionsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataLossPreventionDiscoveryConfigActionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataLossPreventionDiscoveryConfigActionsList = DataLossPreventionDiscoveryConfigActionsList;
_t = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigActionsList[_t] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigActionsList", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigOrgConfigLocationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        folder_id: cdktf.stringToTerraform(struct.folderId),
        organization_id: cdktf.stringToTerraform(struct.organizationId),
    };
}
exports.dataLossPreventionDiscoveryConfigOrgConfigLocationToTerraform = dataLossPreventionDiscoveryConfigOrgConfigLocationToTerraform;
function dataLossPreventionDiscoveryConfigOrgConfigLocationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        folder_id: {
            value: cdktf.stringToHclTerraform(struct.folderId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        organization_id: {
            value: cdktf.stringToHclTerraform(struct.organizationId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigOrgConfigLocationToHclTerraform = dataLossPreventionDiscoveryConfigOrgConfigLocationToHclTerraform;
class DataLossPreventionDiscoveryConfigOrgConfigLocationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._folderId !== undefined) {
            hasAnyValues = true;
            internalValueResult.folderId = this._folderId;
        }
        if (this._organizationId !== undefined) {
            hasAnyValues = true;
            internalValueResult.organizationId = this._organizationId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._folderId = undefined;
            this._organizationId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._folderId = value.folderId;
            this._organizationId = value.organizationId;
        }
    }
    get folderId() {
        return this.getStringAttribute('folder_id');
    }
    set folderId(value) {
        this._folderId = value;
    }
    resetFolderId() {
        this._folderId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get folderIdInput() {
        return this._folderId;
    }
    get organizationId() {
        return this.getStringAttribute('organization_id');
    }
    set organizationId(value) {
        this._organizationId = value;
    }
    resetOrganizationId() {
        this._organizationId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get organizationIdInput() {
        return this._organizationId;
    }
}
exports.DataLossPreventionDiscoveryConfigOrgConfigLocationOutputReference = DataLossPreventionDiscoveryConfigOrgConfigLocationOutputReference;
_u = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigOrgConfigLocationOutputReference[_u] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigOrgConfigLocationOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigOrgConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        project_id: cdktf.stringToTerraform(struct.projectId),
        location: dataLossPreventionDiscoveryConfigOrgConfigLocationToTerraform(struct.location),
    };
}
exports.dataLossPreventionDiscoveryConfigOrgConfigToTerraform = dataLossPreventionDiscoveryConfigOrgConfigToTerraform;
function dataLossPreventionDiscoveryConfigOrgConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        project_id: {
            value: cdktf.stringToHclTerraform(struct.projectId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        location: {
            value: dataLossPreventionDiscoveryConfigOrgConfigLocationToHclTerraform(struct.location),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigOrgConfigLocationList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigOrgConfigToHclTerraform = dataLossPreventionDiscoveryConfigOrgConfigToHclTerraform;
class DataLossPreventionDiscoveryConfigOrgConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // location - computed: false, optional: true, required: false
        this._location = new DataLossPreventionDiscoveryConfigOrgConfigLocationOutputReference(this, "location");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._projectId !== undefined) {
            hasAnyValues = true;
            internalValueResult.projectId = this._projectId;
        }
        if (this._location?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.location = this._location?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._projectId = undefined;
            this._location.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._projectId = value.projectId;
            this._location.internalValue = value.location;
        }
    }
    get projectId() {
        return this.getStringAttribute('project_id');
    }
    set projectId(value) {
        this._projectId = value;
    }
    resetProjectId() {
        this._projectId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectIdInput() {
        return this._projectId;
    }
    get location() {
        return this._location;
    }
    putLocation(value) {
        this._location.internalValue = value;
    }
    resetLocation() {
        this._location.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location.internalValue;
    }
}
exports.DataLossPreventionDiscoveryConfigOrgConfigOutputReference = DataLossPreventionDiscoveryConfigOrgConfigOutputReference;
_v = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigOrgConfigOutputReference[_v] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigOrgConfigOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceInspectTemplateModifiedCadenceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        frequency: cdktf.stringToTerraform(struct.frequency),
    };
}
exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceInspectTemplateModifiedCadenceToTerraform = dataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceInspectTemplateModifiedCadenceToTerraform;
function dataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceInspectTemplateModifiedCadenceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        frequency: {
            value: cdktf.stringToHclTerraform(struct.frequency),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceInspectTemplateModifiedCadenceToHclTerraform = dataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceInspectTemplateModifiedCadenceToHclTerraform;
class DataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceInspectTemplateModifiedCadenceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._frequency !== undefined) {
            hasAnyValues = true;
            internalValueResult.frequency = this._frequency;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._frequency = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._frequency = value.frequency;
        }
    }
    get frequency() {
        return this.getStringAttribute('frequency');
    }
    set frequency(value) {
        this._frequency = value;
    }
    resetFrequency() {
        this._frequency = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get frequencyInput() {
        return this._frequency;
    }
}
exports.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceInspectTemplateModifiedCadenceOutputReference = DataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceInspectTemplateModifiedCadenceOutputReference;
_w = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceInspectTemplateModifiedCadenceOutputReference[_w] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceInspectTemplateModifiedCadenceOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceSchemaModifiedCadenceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        frequency: cdktf.stringToTerraform(struct.frequency),
        types: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.types),
    };
}
exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceSchemaModifiedCadenceToTerraform = dataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceSchemaModifiedCadenceToTerraform;
function dataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceSchemaModifiedCadenceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        frequency: {
            value: cdktf.stringToHclTerraform(struct.frequency),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        types: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.types),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceSchemaModifiedCadenceToHclTerraform = dataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceSchemaModifiedCadenceToHclTerraform;
class DataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceSchemaModifiedCadenceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._frequency !== undefined) {
            hasAnyValues = true;
            internalValueResult.frequency = this._frequency;
        }
        if (this._types !== undefined) {
            hasAnyValues = true;
            internalValueResult.types = this._types;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._frequency = undefined;
            this._types = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._frequency = value.frequency;
            this._types = value.types;
        }
    }
    get frequency() {
        return this.getStringAttribute('frequency');
    }
    set frequency(value) {
        this._frequency = value;
    }
    resetFrequency() {
        this._frequency = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get frequencyInput() {
        return this._frequency;
    }
    get types() {
        return this.getListAttribute('types');
    }
    set types(value) {
        this._types = value;
    }
    resetTypes() {
        this._types = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get typesInput() {
        return this._types;
    }
}
exports.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceSchemaModifiedCadenceOutputReference = DataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceSchemaModifiedCadenceOutputReference;
_x = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceSchemaModifiedCadenceOutputReference[_x] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceSchemaModifiedCadenceOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceTableModifiedCadenceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        frequency: cdktf.stringToTerraform(struct.frequency),
        types: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.types),
    };
}
exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceTableModifiedCadenceToTerraform = dataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceTableModifiedCadenceToTerraform;
function dataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceTableModifiedCadenceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        frequency: {
            value: cdktf.stringToHclTerraform(struct.frequency),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        types: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.types),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceTableModifiedCadenceToHclTerraform = dataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceTableModifiedCadenceToHclTerraform;
class DataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceTableModifiedCadenceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._frequency !== undefined) {
            hasAnyValues = true;
            internalValueResult.frequency = this._frequency;
        }
        if (this._types !== undefined) {
            hasAnyValues = true;
            internalValueResult.types = this._types;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._frequency = undefined;
            this._types = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._frequency = value.frequency;
            this._types = value.types;
        }
    }
    get frequency() {
        return this.getStringAttribute('frequency');
    }
    set frequency(value) {
        this._frequency = value;
    }
    resetFrequency() {
        this._frequency = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get frequencyInput() {
        return this._frequency;
    }
    get types() {
        return this.getListAttribute('types');
    }
    set types(value) {
        this._types = value;
    }
    resetTypes() {
        this._types = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get typesInput() {
        return this._types;
    }
}
exports.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceTableModifiedCadenceOutputReference = DataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceTableModifiedCadenceOutputReference;
_y = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceTableModifiedCadenceOutputReference[_y] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceTableModifiedCadenceOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        inspect_template_modified_cadence: dataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceInspectTemplateModifiedCadenceToTerraform(struct.inspectTemplateModifiedCadence),
        schema_modified_cadence: dataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceSchemaModifiedCadenceToTerraform(struct.schemaModifiedCadence),
        table_modified_cadence: dataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceTableModifiedCadenceToTerraform(struct.tableModifiedCadence),
    };
}
exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceToTerraform = dataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceToTerraform;
function dataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        inspect_template_modified_cadence: {
            value: dataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceInspectTemplateModifiedCadenceToHclTerraform(struct.inspectTemplateModifiedCadence),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceInspectTemplateModifiedCadenceList",
        },
        schema_modified_cadence: {
            value: dataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceSchemaModifiedCadenceToHclTerraform(struct.schemaModifiedCadence),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceSchemaModifiedCadenceList",
        },
        table_modified_cadence: {
            value: dataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceTableModifiedCadenceToHclTerraform(struct.tableModifiedCadence),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceTableModifiedCadenceList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceToHclTerraform = dataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceToHclTerraform;
class DataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // inspect_template_modified_cadence - computed: false, optional: true, required: false
        this._inspectTemplateModifiedCadence = new DataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceInspectTemplateModifiedCadenceOutputReference(this, "inspect_template_modified_cadence");
        // schema_modified_cadence - computed: false, optional: true, required: false
        this._schemaModifiedCadence = new DataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceSchemaModifiedCadenceOutputReference(this, "schema_modified_cadence");
        // table_modified_cadence - computed: false, optional: true, required: false
        this._tableModifiedCadence = new DataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceTableModifiedCadenceOutputReference(this, "table_modified_cadence");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._inspectTemplateModifiedCadence?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.inspectTemplateModifiedCadence = this._inspectTemplateModifiedCadence?.internalValue;
        }
        if (this._schemaModifiedCadence?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.schemaModifiedCadence = this._schemaModifiedCadence?.internalValue;
        }
        if (this._tableModifiedCadence?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.tableModifiedCadence = this._tableModifiedCadence?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._inspectTemplateModifiedCadence.internalValue = undefined;
            this._schemaModifiedCadence.internalValue = undefined;
            this._tableModifiedCadence.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._inspectTemplateModifiedCadence.internalValue = value.inspectTemplateModifiedCadence;
            this._schemaModifiedCadence.internalValue = value.schemaModifiedCadence;
            this._tableModifiedCadence.internalValue = value.tableModifiedCadence;
        }
    }
    get inspectTemplateModifiedCadence() {
        return this._inspectTemplateModifiedCadence;
    }
    putInspectTemplateModifiedCadence(value) {
        this._inspectTemplateModifiedCadence.internalValue = value;
    }
    resetInspectTemplateModifiedCadence() {
        this._inspectTemplateModifiedCadence.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inspectTemplateModifiedCadenceInput() {
        return this._inspectTemplateModifiedCadence.internalValue;
    }
    get schemaModifiedCadence() {
        return this._schemaModifiedCadence;
    }
    putSchemaModifiedCadence(value) {
        this._schemaModifiedCadence.internalValue = value;
    }
    resetSchemaModifiedCadence() {
        this._schemaModifiedCadence.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get schemaModifiedCadenceInput() {
        return this._schemaModifiedCadence.internalValue;
    }
    get tableModifiedCadence() {
        return this._tableModifiedCadence;
    }
    putTableModifiedCadence(value) {
        this._tableModifiedCadence.internalValue = value;
    }
    resetTableModifiedCadence() {
        this._tableModifiedCadence.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tableModifiedCadenceInput() {
        return this._tableModifiedCadence.internalValue;
    }
}
exports.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceOutputReference = DataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceOutputReference;
_z = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceOutputReference[_z] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsOrConditionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        min_age: cdktf.stringToTerraform(struct.minAge),
        min_row_count: cdktf.numberToTerraform(struct.minRowCount),
    };
}
exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsOrConditionsToTerraform = dataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsOrConditionsToTerraform;
function dataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsOrConditionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        min_age: {
            value: cdktf.stringToHclTerraform(struct.minAge),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        min_row_count: {
            value: cdktf.numberToHclTerraform(struct.minRowCount),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsOrConditionsToHclTerraform = dataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsOrConditionsToHclTerraform;
class DataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsOrConditionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._minAge !== undefined) {
            hasAnyValues = true;
            internalValueResult.minAge = this._minAge;
        }
        if (this._minRowCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.minRowCount = this._minRowCount;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._minAge = undefined;
            this._minRowCount = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._minAge = value.minAge;
            this._minRowCount = value.minRowCount;
        }
    }
    get minAge() {
        return this.getStringAttribute('min_age');
    }
    set minAge(value) {
        this._minAge = value;
    }
    resetMinAge() {
        this._minAge = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minAgeInput() {
        return this._minAge;
    }
    get minRowCount() {
        return this.getNumberAttribute('min_row_count');
    }
    set minRowCount(value) {
        this._minRowCount = value;
    }
    resetMinRowCount() {
        this._minRowCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minRowCountInput() {
        return this._minRowCount;
    }
}
exports.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsOrConditionsOutputReference = DataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsOrConditionsOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsOrConditionsOutputReference[_0] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsOrConditionsOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsTypesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        types: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.types),
    };
}
exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsTypesToTerraform = dataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsTypesToTerraform;
function dataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsTypesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        types: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.types),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsTypesToHclTerraform = dataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsTypesToHclTerraform;
class DataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsTypesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._types !== undefined) {
            hasAnyValues = true;
            internalValueResult.types = this._types;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._types = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._types = value.types;
        }
    }
    get types() {
        return this.getListAttribute('types');
    }
    set types(value) {
        this._types = value;
    }
    resetTypes() {
        this._types = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get typesInput() {
        return this._types;
    }
}
exports.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsTypesOutputReference = DataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsTypesOutputReference;
_1 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsTypesOutputReference[_1] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsTypesOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        created_after: cdktf.stringToTerraform(struct.createdAfter),
        type_collection: cdktf.stringToTerraform(struct.typeCollection),
        or_conditions: dataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsOrConditionsToTerraform(struct.orConditions),
        types: dataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsTypesToTerraform(struct.types),
    };
}
exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsToTerraform = dataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsToTerraform;
function dataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        created_after: {
            value: cdktf.stringToHclTerraform(struct.createdAfter),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        type_collection: {
            value: cdktf.stringToHclTerraform(struct.typeCollection),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        or_conditions: {
            value: dataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsOrConditionsToHclTerraform(struct.orConditions),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsOrConditionsList",
        },
        types: {
            value: dataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsTypesToHclTerraform(struct.types),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsTypesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsToHclTerraform = dataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsToHclTerraform;
class DataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // or_conditions - computed: false, optional: true, required: false
        this._orConditions = new DataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsOrConditionsOutputReference(this, "or_conditions");
        // types - computed: false, optional: true, required: false
        this._types = new DataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsTypesOutputReference(this, "types");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._createdAfter !== undefined) {
            hasAnyValues = true;
            internalValueResult.createdAfter = this._createdAfter;
        }
        if (this._typeCollection !== undefined) {
            hasAnyValues = true;
            internalValueResult.typeCollection = this._typeCollection;
        }
        if (this._orConditions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.orConditions = this._orConditions?.internalValue;
        }
        if (this._types?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.types = this._types?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._createdAfter = undefined;
            this._typeCollection = undefined;
            this._orConditions.internalValue = undefined;
            this._types.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._createdAfter = value.createdAfter;
            this._typeCollection = value.typeCollection;
            this._orConditions.internalValue = value.orConditions;
            this._types.internalValue = value.types;
        }
    }
    get createdAfter() {
        return this.getStringAttribute('created_after');
    }
    set createdAfter(value) {
        this._createdAfter = value;
    }
    resetCreatedAfter() {
        this._createdAfter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createdAfterInput() {
        return this._createdAfter;
    }
    get typeCollection() {
        return this.getStringAttribute('type_collection');
    }
    set typeCollection(value) {
        this._typeCollection = value;
    }
    resetTypeCollection() {
        this._typeCollection = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get typeCollectionInput() {
        return this._typeCollection;
    }
    get orConditions() {
        return this._orConditions;
    }
    putOrConditions(value) {
        this._orConditions.internalValue = value;
    }
    resetOrConditions() {
        this._orConditions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get orConditionsInput() {
        return this._orConditions.internalValue;
    }
    get types() {
        return this._types;
    }
    putTypes(value) {
        this._types.internalValue = value;
    }
    resetTypes() {
        this._types.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get typesInput() {
        return this._types.internalValue;
    }
}
exports.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsOutputReference = DataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsOutputReference;
_2 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsOutputReference[_2] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigTargetsBigQueryTargetDisabledToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetDisabledToTerraform = dataLossPreventionDiscoveryConfigTargetsBigQueryTargetDisabledToTerraform;
function dataLossPreventionDiscoveryConfigTargetsBigQueryTargetDisabledToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetDisabledToHclTerraform = dataLossPreventionDiscoveryConfigTargetsBigQueryTargetDisabledToHclTerraform;
class DataLossPreventionDiscoveryConfigTargetsBigQueryTargetDisabledOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetDisabledOutputReference = DataLossPreventionDiscoveryConfigTargetsBigQueryTargetDisabledOutputReference;
_3 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigTargetsBigQueryTargetDisabledOutputReference[_3] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetDisabledOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterOtherTablesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterOtherTablesToTerraform = dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterOtherTablesToTerraform;
function dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterOtherTablesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterOtherTablesToHclTerraform = dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterOtherTablesToHclTerraform;
class DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterOtherTablesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterOtherTablesOutputReference = DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterOtherTablesOutputReference;
_4 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterOtherTablesOutputReference[_4] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterOtherTablesOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTableReferenceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        dataset_id: cdktf.stringToTerraform(struct.datasetId),
        table_id: cdktf.stringToTerraform(struct.tableId),
    };
}
exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTableReferenceToTerraform = dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTableReferenceToTerraform;
function dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTableReferenceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        dataset_id: {
            value: cdktf.stringToHclTerraform(struct.datasetId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        table_id: {
            value: cdktf.stringToHclTerraform(struct.tableId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTableReferenceToHclTerraform = dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTableReferenceToHclTerraform;
class DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTableReferenceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._datasetId !== undefined) {
            hasAnyValues = true;
            internalValueResult.datasetId = this._datasetId;
        }
        if (this._tableId !== undefined) {
            hasAnyValues = true;
            internalValueResult.tableId = this._tableId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._datasetId = undefined;
            this._tableId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._datasetId = value.datasetId;
            this._tableId = value.tableId;
        }
    }
    get datasetId() {
        return this.getStringAttribute('dataset_id');
    }
    set datasetId(value) {
        this._datasetId = value;
    }
    // Temporarily expose input value. Use with caution.
    get datasetIdInput() {
        return this._datasetId;
    }
    get tableId() {
        return this.getStringAttribute('table_id');
    }
    set tableId(value) {
        this._tableId = value;
    }
    // Temporarily expose input value. Use with caution.
    get tableIdInput() {
        return this._tableId;
    }
}
exports.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTableReferenceOutputReference = DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTableReferenceOutputReference;
_5 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTableReferenceOutputReference[_5] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTableReferenceOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatternsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        dataset_id_regex: cdktf.stringToTerraform(struct.datasetIdRegex),
        project_id_regex: cdktf.stringToTerraform(struct.projectIdRegex),
        table_id_regex: cdktf.stringToTerraform(struct.tableIdRegex),
    };
}
exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatternsToTerraform = dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatternsToTerraform;
function dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatternsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        dataset_id_regex: {
            value: cdktf.stringToHclTerraform(struct.datasetIdRegex),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        project_id_regex: {
            value: cdktf.stringToHclTerraform(struct.projectIdRegex),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        table_id_regex: {
            value: cdktf.stringToHclTerraform(struct.tableIdRegex),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatternsToHclTerraform = dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatternsToHclTerraform;
class DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatternsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._datasetIdRegex !== undefined) {
            hasAnyValues = true;
            internalValueResult.datasetIdRegex = this._datasetIdRegex;
        }
        if (this._projectIdRegex !== undefined) {
            hasAnyValues = true;
            internalValueResult.projectIdRegex = this._projectIdRegex;
        }
        if (this._tableIdRegex !== undefined) {
            hasAnyValues = true;
            internalValueResult.tableIdRegex = this._tableIdRegex;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._datasetIdRegex = undefined;
            this._projectIdRegex = undefined;
            this._tableIdRegex = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._datasetIdRegex = value.datasetIdRegex;
            this._projectIdRegex = value.projectIdRegex;
            this._tableIdRegex = value.tableIdRegex;
        }
    }
    get datasetIdRegex() {
        return this.getStringAttribute('dataset_id_regex');
    }
    set datasetIdRegex(value) {
        this._datasetIdRegex = value;
    }
    resetDatasetIdRegex() {
        this._datasetIdRegex = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get datasetIdRegexInput() {
        return this._datasetIdRegex;
    }
    get projectIdRegex() {
        return this.getStringAttribute('project_id_regex');
    }
    set projectIdRegex(value) {
        this._projectIdRegex = value;
    }
    resetProjectIdRegex() {
        this._projectIdRegex = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectIdRegexInput() {
        return this._projectIdRegex;
    }
    get tableIdRegex() {
        return this.getStringAttribute('table_id_regex');
    }
    set tableIdRegex(value) {
        this._tableIdRegex = value;
    }
    resetTableIdRegex() {
        this._tableIdRegex = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tableIdRegexInput() {
        return this._tableIdRegex;
    }
}
exports.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatternsOutputReference = DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatternsOutputReference;
_6 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatternsOutputReference[_6] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatternsOutputReference", version: "14.13.1" };
class DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatternsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatternsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatternsList = DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatternsList;
_7 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatternsList[_7] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatternsList", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        patterns: cdktf.listMapper(dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatternsToTerraform, true)(struct.patterns),
    };
}
exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesToTerraform = dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesToTerraform;
function dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        patterns: {
            value: cdktf.listMapperHcl(dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatternsToHclTerraform, true)(struct.patterns),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatternsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesToHclTerraform = dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesToHclTerraform;
class DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // patterns - computed: false, optional: true, required: false
        this._patterns = new DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesPatternsList(this, "patterns", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._patterns?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.patterns = this._patterns?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._patterns.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._patterns.internalValue = value.patterns;
        }
    }
    get patterns() {
        return this._patterns;
    }
    putPatterns(value) {
        this._patterns.internalValue = value;
    }
    resetPatterns() {
        this._patterns.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get patternsInput() {
        return this._patterns.internalValue;
    }
}
exports.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesOutputReference = DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesOutputReference;
_8 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesOutputReference[_8] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        include_regexes: dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesToTerraform(struct.includeRegexes),
    };
}
exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesToTerraform = dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesToTerraform;
function dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        include_regexes: {
            value: dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesToHclTerraform(struct.includeRegexes),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesToHclTerraform = dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesToHclTerraform;
class DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // include_regexes - computed: false, optional: true, required: false
        this._includeRegexes = new DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesIncludeRegexesOutputReference(this, "include_regexes");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._includeRegexes?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.includeRegexes = this._includeRegexes?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._includeRegexes.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._includeRegexes.internalValue = value.includeRegexes;
        }
    }
    get includeRegexes() {
        return this._includeRegexes;
    }
    putIncludeRegexes(value) {
        this._includeRegexes.internalValue = value;
    }
    resetIncludeRegexes() {
        this._includeRegexes.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeRegexesInput() {
        return this._includeRegexes.internalValue;
    }
}
exports.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesOutputReference = DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesOutputReference;
_9 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesOutputReference[_9] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        other_tables: dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterOtherTablesToTerraform(struct.otherTables),
        table_reference: dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTableReferenceToTerraform(struct.tableReference),
        tables: dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesToTerraform(struct.tables),
    };
}
exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterToTerraform = dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterToTerraform;
function dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        other_tables: {
            value: dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterOtherTablesToHclTerraform(struct.otherTables),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterOtherTablesList",
        },
        table_reference: {
            value: dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTableReferenceToHclTerraform(struct.tableReference),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTableReferenceList",
        },
        tables: {
            value: dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesToHclTerraform(struct.tables),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterToHclTerraform = dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterToHclTerraform;
class DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // other_tables - computed: false, optional: true, required: false
        this._otherTables = new DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterOtherTablesOutputReference(this, "other_tables");
        // table_reference - computed: false, optional: true, required: false
        this._tableReference = new DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTableReferenceOutputReference(this, "table_reference");
        // tables - computed: false, optional: true, required: false
        this._tables = new DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterTablesOutputReference(this, "tables");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._otherTables?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.otherTables = this._otherTables?.internalValue;
        }
        if (this._tableReference?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.tableReference = this._tableReference?.internalValue;
        }
        if (this._tables?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.tables = this._tables?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._otherTables.internalValue = undefined;
            this._tableReference.internalValue = undefined;
            this._tables.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._otherTables.internalValue = value.otherTables;
            this._tableReference.internalValue = value.tableReference;
            this._tables.internalValue = value.tables;
        }
    }
    get otherTables() {
        return this._otherTables;
    }
    putOtherTables(value) {
        this._otherTables.internalValue = value;
    }
    resetOtherTables() {
        this._otherTables.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get otherTablesInput() {
        return this._otherTables.internalValue;
    }
    get tableReference() {
        return this._tableReference;
    }
    putTableReference(value) {
        this._tableReference.internalValue = value;
    }
    resetTableReference() {
        this._tableReference.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tableReferenceInput() {
        return this._tableReference.internalValue;
    }
    get tables() {
        return this._tables;
    }
    putTables(value) {
        this._tables.internalValue = value;
    }
    resetTables() {
        this._tables.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tablesInput() {
        return this._tables.internalValue;
    }
}
exports.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterOutputReference = DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterOutputReference;
_10 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterOutputReference[_10] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigTargetsBigQueryTargetToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cadence: dataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceToTerraform(struct.cadence),
        conditions: dataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsToTerraform(struct.conditions),
        disabled: dataLossPreventionDiscoveryConfigTargetsBigQueryTargetDisabledToTerraform(struct.disabled),
        filter: dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterToTerraform(struct.filter),
    };
}
exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetToTerraform = dataLossPreventionDiscoveryConfigTargetsBigQueryTargetToTerraform;
function dataLossPreventionDiscoveryConfigTargetsBigQueryTargetToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cadence: {
            value: dataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceToHclTerraform(struct.cadence),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceList",
        },
        conditions: {
            value: dataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsToHclTerraform(struct.conditions),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsList",
        },
        disabled: {
            value: dataLossPreventionDiscoveryConfigTargetsBigQueryTargetDisabledToHclTerraform(struct.disabled),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigTargetsBigQueryTargetDisabledList",
        },
        filter: {
            value: dataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterToHclTerraform(struct.filter),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigTargetsBigQueryTargetToHclTerraform = dataLossPreventionDiscoveryConfigTargetsBigQueryTargetToHclTerraform;
class DataLossPreventionDiscoveryConfigTargetsBigQueryTargetOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cadence - computed: false, optional: true, required: false
        this._cadence = new DataLossPreventionDiscoveryConfigTargetsBigQueryTargetCadenceOutputReference(this, "cadence");
        // conditions - computed: false, optional: true, required: false
        this._conditions = new DataLossPreventionDiscoveryConfigTargetsBigQueryTargetConditionsOutputReference(this, "conditions");
        // disabled - computed: false, optional: true, required: false
        this._disabled = new DataLossPreventionDiscoveryConfigTargetsBigQueryTargetDisabledOutputReference(this, "disabled");
        // filter - computed: false, optional: true, required: false
        this._filter = new DataLossPreventionDiscoveryConfigTargetsBigQueryTargetFilterOutputReference(this, "filter");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cadence?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cadence = this._cadence?.internalValue;
        }
        if (this._conditions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.conditions = this._conditions?.internalValue;
        }
        if (this._disabled?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.disabled = this._disabled?.internalValue;
        }
        if (this._filter?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.filter = this._filter?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cadence.internalValue = undefined;
            this._conditions.internalValue = undefined;
            this._disabled.internalValue = undefined;
            this._filter.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cadence.internalValue = value.cadence;
            this._conditions.internalValue = value.conditions;
            this._disabled.internalValue = value.disabled;
            this._filter.internalValue = value.filter;
        }
    }
    get cadence() {
        return this._cadence;
    }
    putCadence(value) {
        this._cadence.internalValue = value;
    }
    resetCadence() {
        this._cadence.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cadenceInput() {
        return this._cadence.internalValue;
    }
    get conditions() {
        return this._conditions;
    }
    putConditions(value) {
        this._conditions.internalValue = value;
    }
    resetConditions() {
        this._conditions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get conditionsInput() {
        return this._conditions.internalValue;
    }
    get disabled() {
        return this._disabled;
    }
    putDisabled(value) {
        this._disabled.internalValue = value;
    }
    resetDisabled() {
        this._disabled.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get disabledInput() {
        return this._disabled.internalValue;
    }
    get filter() {
        return this._filter;
    }
    putFilter(value) {
        this._filter.internalValue = value;
    }
    resetFilter() {
        this._filter.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get filterInput() {
        return this._filter.internalValue;
    }
}
exports.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetOutputReference = DataLossPreventionDiscoveryConfigTargetsBigQueryTargetOutputReference;
_11 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigTargetsBigQueryTargetOutputReference[_11] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigTargetsBigQueryTargetOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetConditionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        database_engines: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.databaseEngines),
        types: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.types),
    };
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetConditionsToTerraform = dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetConditionsToTerraform;
function dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetConditionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        database_engines: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.databaseEngines),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        types: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.types),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetConditionsToHclTerraform = dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetConditionsToHclTerraform;
class DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetConditionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._databaseEngines !== undefined) {
            hasAnyValues = true;
            internalValueResult.databaseEngines = this._databaseEngines;
        }
        if (this._types !== undefined) {
            hasAnyValues = true;
            internalValueResult.types = this._types;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._databaseEngines = undefined;
            this._types = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._databaseEngines = value.databaseEngines;
            this._types = value.types;
        }
    }
    get databaseEngines() {
        return this.getListAttribute('database_engines');
    }
    set databaseEngines(value) {
        this._databaseEngines = value;
    }
    resetDatabaseEngines() {
        this._databaseEngines = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get databaseEnginesInput() {
        return this._databaseEngines;
    }
    get types() {
        return this.getListAttribute('types');
    }
    set types(value) {
        this._types = value;
    }
    resetTypes() {
        this._types = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get typesInput() {
        return this._types;
    }
}
exports.DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetConditionsOutputReference = DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetConditionsOutputReference;
_12 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetConditionsOutputReference[_12] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetConditionsOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetDisabledToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetDisabledToTerraform = dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetDisabledToTerraform;
function dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetDisabledToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetDisabledToHclTerraform = dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetDisabledToHclTerraform;
class DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetDisabledOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetDisabledOutputReference = DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetDisabledOutputReference;
_13 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetDisabledOutputReference[_13] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetDisabledOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesPatternsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        database_regex: cdktf.stringToTerraform(struct.databaseRegex),
        database_resource_name_regex: cdktf.stringToTerraform(struct.databaseResourceNameRegex),
        instance_regex: cdktf.stringToTerraform(struct.instanceRegex),
        project_id_regex: cdktf.stringToTerraform(struct.projectIdRegex),
    };
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesPatternsToTerraform = dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesPatternsToTerraform;
function dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesPatternsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        database_regex: {
            value: cdktf.stringToHclTerraform(struct.databaseRegex),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        database_resource_name_regex: {
            value: cdktf.stringToHclTerraform(struct.databaseResourceNameRegex),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        instance_regex: {
            value: cdktf.stringToHclTerraform(struct.instanceRegex),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        project_id_regex: {
            value: cdktf.stringToHclTerraform(struct.projectIdRegex),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesPatternsToHclTerraform = dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesPatternsToHclTerraform;
class DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesPatternsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._databaseRegex !== undefined) {
            hasAnyValues = true;
            internalValueResult.databaseRegex = this._databaseRegex;
        }
        if (this._databaseResourceNameRegex !== undefined) {
            hasAnyValues = true;
            internalValueResult.databaseResourceNameRegex = this._databaseResourceNameRegex;
        }
        if (this._instanceRegex !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceRegex = this._instanceRegex;
        }
        if (this._projectIdRegex !== undefined) {
            hasAnyValues = true;
            internalValueResult.projectIdRegex = this._projectIdRegex;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._databaseRegex = undefined;
            this._databaseResourceNameRegex = undefined;
            this._instanceRegex = undefined;
            this._projectIdRegex = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._databaseRegex = value.databaseRegex;
            this._databaseResourceNameRegex = value.databaseResourceNameRegex;
            this._instanceRegex = value.instanceRegex;
            this._projectIdRegex = value.projectIdRegex;
        }
    }
    get databaseRegex() {
        return this.getStringAttribute('database_regex');
    }
    set databaseRegex(value) {
        this._databaseRegex = value;
    }
    resetDatabaseRegex() {
        this._databaseRegex = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get databaseRegexInput() {
        return this._databaseRegex;
    }
    get databaseResourceNameRegex() {
        return this.getStringAttribute('database_resource_name_regex');
    }
    set databaseResourceNameRegex(value) {
        this._databaseResourceNameRegex = value;
    }
    resetDatabaseResourceNameRegex() {
        this._databaseResourceNameRegex = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get databaseResourceNameRegexInput() {
        return this._databaseResourceNameRegex;
    }
    get instanceRegex() {
        return this.getStringAttribute('instance_regex');
    }
    set instanceRegex(value) {
        this._instanceRegex = value;
    }
    resetInstanceRegex() {
        this._instanceRegex = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceRegexInput() {
        return this._instanceRegex;
    }
    get projectIdRegex() {
        return this.getStringAttribute('project_id_regex');
    }
    set projectIdRegex(value) {
        this._projectIdRegex = value;
    }
    resetProjectIdRegex() {
        this._projectIdRegex = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectIdRegexInput() {
        return this._projectIdRegex;
    }
}
exports.DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesPatternsOutputReference = DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesPatternsOutputReference;
_14 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesPatternsOutputReference[_14] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesPatternsOutputReference", version: "14.13.1" };
class DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesPatternsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesPatternsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesPatternsList = DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesPatternsList;
_15 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesPatternsList[_15] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesPatternsList", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        patterns: cdktf.listMapper(dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesPatternsToTerraform, true)(struct.patterns),
    };
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesToTerraform = dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesToTerraform;
function dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        patterns: {
            value: cdktf.listMapperHcl(dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesPatternsToHclTerraform, true)(struct.patterns),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesPatternsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesToHclTerraform = dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesToHclTerraform;
class DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // patterns - computed: false, optional: true, required: false
        this._patterns = new DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesPatternsList(this, "patterns", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._patterns?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.patterns = this._patterns?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._patterns.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._patterns.internalValue = value.patterns;
        }
    }
    get patterns() {
        return this._patterns;
    }
    putPatterns(value) {
        this._patterns.internalValue = value;
    }
    resetPatterns() {
        this._patterns.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get patternsInput() {
        return this._patterns.internalValue;
    }
}
exports.DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesOutputReference = DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesOutputReference;
_16 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesOutputReference[_16] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        include_regexes: dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesToTerraform(struct.includeRegexes),
    };
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionToTerraform = dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionToTerraform;
function dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        include_regexes: {
            value: dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesToHclTerraform(struct.includeRegexes),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionToHclTerraform = dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionToHclTerraform;
class DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // include_regexes - computed: false, optional: true, required: false
        this._includeRegexes = new DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionIncludeRegexesOutputReference(this, "include_regexes");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._includeRegexes?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.includeRegexes = this._includeRegexes?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._includeRegexes.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._includeRegexes.internalValue = value.includeRegexes;
        }
    }
    get includeRegexes() {
        return this._includeRegexes;
    }
    putIncludeRegexes(value) {
        this._includeRegexes.internalValue = value;
    }
    resetIncludeRegexes() {
        this._includeRegexes.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeRegexesInput() {
        return this._includeRegexes.internalValue;
    }
}
exports.DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionOutputReference = DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionOutputReference;
_17 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionOutputReference[_17] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterDatabaseResourceReferenceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        database_resource: cdktf.stringToTerraform(struct.databaseResource),
        instance: cdktf.stringToTerraform(struct.instance),
        project_id: cdktf.stringToTerraform(struct.projectId),
    };
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterDatabaseResourceReferenceToTerraform = dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterDatabaseResourceReferenceToTerraform;
function dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterDatabaseResourceReferenceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        database: {
            value: cdktf.stringToHclTerraform(struct.database),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        database_resource: {
            value: cdktf.stringToHclTerraform(struct.databaseResource),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        instance: {
            value: cdktf.stringToHclTerraform(struct.instance),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        project_id: {
            value: cdktf.stringToHclTerraform(struct.projectId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterDatabaseResourceReferenceToHclTerraform = dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterDatabaseResourceReferenceToHclTerraform;
class DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterDatabaseResourceReferenceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._database !== undefined) {
            hasAnyValues = true;
            internalValueResult.database = this._database;
        }
        if (this._databaseResource !== undefined) {
            hasAnyValues = true;
            internalValueResult.databaseResource = this._databaseResource;
        }
        if (this._instance !== undefined) {
            hasAnyValues = true;
            internalValueResult.instance = this._instance;
        }
        if (this._projectId !== undefined) {
            hasAnyValues = true;
            internalValueResult.projectId = this._projectId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._database = undefined;
            this._databaseResource = undefined;
            this._instance = undefined;
            this._projectId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._database = value.database;
            this._databaseResource = value.databaseResource;
            this._instance = value.instance;
            this._projectId = value.projectId;
        }
    }
    get database() {
        return this.getStringAttribute('database');
    }
    set database(value) {
        this._database = value;
    }
    // Temporarily expose input value. Use with caution.
    get databaseInput() {
        return this._database;
    }
    get databaseResource() {
        return this.getStringAttribute('database_resource');
    }
    set databaseResource(value) {
        this._databaseResource = value;
    }
    // Temporarily expose input value. Use with caution.
    get databaseResourceInput() {
        return this._databaseResource;
    }
    get instance() {
        return this.getStringAttribute('instance');
    }
    set instance(value) {
        this._instance = value;
    }
    // Temporarily expose input value. Use with caution.
    get instanceInput() {
        return this._instance;
    }
    get projectId() {
        return this.getStringAttribute('project_id');
    }
    set projectId(value) {
        this._projectId = value;
    }
    // Temporarily expose input value. Use with caution.
    get projectIdInput() {
        return this._projectId;
    }
}
exports.DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterDatabaseResourceReferenceOutputReference = DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterDatabaseResourceReferenceOutputReference;
_18 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterDatabaseResourceReferenceOutputReference[_18] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterDatabaseResourceReferenceOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterOthersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterOthersToTerraform = dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterOthersToTerraform;
function dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterOthersToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterOthersToHclTerraform = dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterOthersToHclTerraform;
class DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterOthersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterOthersOutputReference = DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterOthersOutputReference;
_19 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterOthersOutputReference[_19] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterOthersOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        collection: dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionToTerraform(struct.collection),
        database_resource_reference: dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterDatabaseResourceReferenceToTerraform(struct.databaseResourceReference),
        others: dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterOthersToTerraform(struct.others),
    };
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterToTerraform = dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterToTerraform;
function dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        collection: {
            value: dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionToHclTerraform(struct.collection),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionList",
        },
        database_resource_reference: {
            value: dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterDatabaseResourceReferenceToHclTerraform(struct.databaseResourceReference),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterDatabaseResourceReferenceList",
        },
        others: {
            value: dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterOthersToHclTerraform(struct.others),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterOthersList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterToHclTerraform = dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterToHclTerraform;
class DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // collection - computed: false, optional: true, required: false
        this._collection = new DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterCollectionOutputReference(this, "collection");
        // database_resource_reference - computed: false, optional: true, required: false
        this._databaseResourceReference = new DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterDatabaseResourceReferenceOutputReference(this, "database_resource_reference");
        // others - computed: false, optional: true, required: false
        this._others = new DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterOthersOutputReference(this, "others");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._collection?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.collection = this._collection?.internalValue;
        }
        if (this._databaseResourceReference?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.databaseResourceReference = this._databaseResourceReference?.internalValue;
        }
        if (this._others?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.others = this._others?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._collection.internalValue = undefined;
            this._databaseResourceReference.internalValue = undefined;
            this._others.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._collection.internalValue = value.collection;
            this._databaseResourceReference.internalValue = value.databaseResourceReference;
            this._others.internalValue = value.others;
        }
    }
    get collection() {
        return this._collection;
    }
    putCollection(value) {
        this._collection.internalValue = value;
    }
    resetCollection() {
        this._collection.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get collectionInput() {
        return this._collection.internalValue;
    }
    get databaseResourceReference() {
        return this._databaseResourceReference;
    }
    putDatabaseResourceReference(value) {
        this._databaseResourceReference.internalValue = value;
    }
    resetDatabaseResourceReference() {
        this._databaseResourceReference.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get databaseResourceReferenceInput() {
        return this._databaseResourceReference.internalValue;
    }
    get others() {
        return this._others;
    }
    putOthers(value) {
        this._others.internalValue = value;
    }
    resetOthers() {
        this._others.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get othersInput() {
        return this._others.internalValue;
    }
}
exports.DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterOutputReference = DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterOutputReference;
_20 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterOutputReference[_20] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceInspectTemplateModifiedCadenceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        frequency: cdktf.stringToTerraform(struct.frequency),
    };
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceInspectTemplateModifiedCadenceToTerraform = dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceInspectTemplateModifiedCadenceToTerraform;
function dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceInspectTemplateModifiedCadenceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        frequency: {
            value: cdktf.stringToHclTerraform(struct.frequency),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceInspectTemplateModifiedCadenceToHclTerraform = dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceInspectTemplateModifiedCadenceToHclTerraform;
class DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceInspectTemplateModifiedCadenceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._frequency !== undefined) {
            hasAnyValues = true;
            internalValueResult.frequency = this._frequency;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._frequency = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._frequency = value.frequency;
        }
    }
    get frequency() {
        return this.getStringAttribute('frequency');
    }
    set frequency(value) {
        this._frequency = value;
    }
    // Temporarily expose input value. Use with caution.
    get frequencyInput() {
        return this._frequency;
    }
}
exports.DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceInspectTemplateModifiedCadenceOutputReference = DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceInspectTemplateModifiedCadenceOutputReference;
_21 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceInspectTemplateModifiedCadenceOutputReference[_21] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceInspectTemplateModifiedCadenceOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceSchemaModifiedCadenceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        frequency: cdktf.stringToTerraform(struct.frequency),
        types: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.types),
    };
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceSchemaModifiedCadenceToTerraform = dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceSchemaModifiedCadenceToTerraform;
function dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceSchemaModifiedCadenceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        frequency: {
            value: cdktf.stringToHclTerraform(struct.frequency),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        types: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.types),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceSchemaModifiedCadenceToHclTerraform = dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceSchemaModifiedCadenceToHclTerraform;
class DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceSchemaModifiedCadenceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._frequency !== undefined) {
            hasAnyValues = true;
            internalValueResult.frequency = this._frequency;
        }
        if (this._types !== undefined) {
            hasAnyValues = true;
            internalValueResult.types = this._types;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._frequency = undefined;
            this._types = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._frequency = value.frequency;
            this._types = value.types;
        }
    }
    get frequency() {
        return this.getStringAttribute('frequency');
    }
    set frequency(value) {
        this._frequency = value;
    }
    resetFrequency() {
        this._frequency = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get frequencyInput() {
        return this._frequency;
    }
    get types() {
        return this.getListAttribute('types');
    }
    set types(value) {
        this._types = value;
    }
    resetTypes() {
        this._types = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get typesInput() {
        return this._types;
    }
}
exports.DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceSchemaModifiedCadenceOutputReference = DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceSchemaModifiedCadenceOutputReference;
_22 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceSchemaModifiedCadenceOutputReference[_22] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceSchemaModifiedCadenceOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        refresh_frequency: cdktf.stringToTerraform(struct.refreshFrequency),
        inspect_template_modified_cadence: dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceInspectTemplateModifiedCadenceToTerraform(struct.inspectTemplateModifiedCadence),
        schema_modified_cadence: dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceSchemaModifiedCadenceToTerraform(struct.schemaModifiedCadence),
    };
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceToTerraform = dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceToTerraform;
function dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        refresh_frequency: {
            value: cdktf.stringToHclTerraform(struct.refreshFrequency),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        inspect_template_modified_cadence: {
            value: dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceInspectTemplateModifiedCadenceToHclTerraform(struct.inspectTemplateModifiedCadence),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceInspectTemplateModifiedCadenceList",
        },
        schema_modified_cadence: {
            value: dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceSchemaModifiedCadenceToHclTerraform(struct.schemaModifiedCadence),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceSchemaModifiedCadenceList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceToHclTerraform = dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceToHclTerraform;
class DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // inspect_template_modified_cadence - computed: false, optional: true, required: false
        this._inspectTemplateModifiedCadence = new DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceInspectTemplateModifiedCadenceOutputReference(this, "inspect_template_modified_cadence");
        // schema_modified_cadence - computed: false, optional: true, required: false
        this._schemaModifiedCadence = new DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceSchemaModifiedCadenceOutputReference(this, "schema_modified_cadence");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._refreshFrequency !== undefined) {
            hasAnyValues = true;
            internalValueResult.refreshFrequency = this._refreshFrequency;
        }
        if (this._inspectTemplateModifiedCadence?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.inspectTemplateModifiedCadence = this._inspectTemplateModifiedCadence?.internalValue;
        }
        if (this._schemaModifiedCadence?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.schemaModifiedCadence = this._schemaModifiedCadence?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._refreshFrequency = undefined;
            this._inspectTemplateModifiedCadence.internalValue = undefined;
            this._schemaModifiedCadence.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._refreshFrequency = value.refreshFrequency;
            this._inspectTemplateModifiedCadence.internalValue = value.inspectTemplateModifiedCadence;
            this._schemaModifiedCadence.internalValue = value.schemaModifiedCadence;
        }
    }
    get refreshFrequency() {
        return this.getStringAttribute('refresh_frequency');
    }
    set refreshFrequency(value) {
        this._refreshFrequency = value;
    }
    resetRefreshFrequency() {
        this._refreshFrequency = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get refreshFrequencyInput() {
        return this._refreshFrequency;
    }
    get inspectTemplateModifiedCadence() {
        return this._inspectTemplateModifiedCadence;
    }
    putInspectTemplateModifiedCadence(value) {
        this._inspectTemplateModifiedCadence.internalValue = value;
    }
    resetInspectTemplateModifiedCadence() {
        this._inspectTemplateModifiedCadence.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inspectTemplateModifiedCadenceInput() {
        return this._inspectTemplateModifiedCadence.internalValue;
    }
    get schemaModifiedCadence() {
        return this._schemaModifiedCadence;
    }
    putSchemaModifiedCadence(value) {
        this._schemaModifiedCadence.internalValue = value;
    }
    resetSchemaModifiedCadence() {
        this._schemaModifiedCadence.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get schemaModifiedCadenceInput() {
        return this._schemaModifiedCadence.internalValue;
    }
}
exports.DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceOutputReference = DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceOutputReference;
_23 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceOutputReference[_23] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        conditions: dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetConditionsToTerraform(struct.conditions),
        disabled: dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetDisabledToTerraform(struct.disabled),
        filter: dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterToTerraform(struct.filter),
        generation_cadence: dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceToTerraform(struct.generationCadence),
    };
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetToTerraform = dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetToTerraform;
function dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        conditions: {
            value: dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetConditionsToHclTerraform(struct.conditions),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetConditionsList",
        },
        disabled: {
            value: dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetDisabledToHclTerraform(struct.disabled),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetDisabledList",
        },
        filter: {
            value: dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterToHclTerraform(struct.filter),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterList",
        },
        generation_cadence: {
            value: dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceToHclTerraform(struct.generationCadence),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetToHclTerraform = dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetToHclTerraform;
class DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // conditions - computed: false, optional: true, required: false
        this._conditions = new DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetConditionsOutputReference(this, "conditions");
        // disabled - computed: false, optional: true, required: false
        this._disabled = new DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetDisabledOutputReference(this, "disabled");
        // filter - computed: false, optional: false, required: true
        this._filter = new DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetFilterOutputReference(this, "filter");
        // generation_cadence - computed: false, optional: true, required: false
        this._generationCadence = new DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetGenerationCadenceOutputReference(this, "generation_cadence");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._conditions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.conditions = this._conditions?.internalValue;
        }
        if (this._disabled?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.disabled = this._disabled?.internalValue;
        }
        if (this._filter?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.filter = this._filter?.internalValue;
        }
        if (this._generationCadence?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.generationCadence = this._generationCadence?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._conditions.internalValue = undefined;
            this._disabled.internalValue = undefined;
            this._filter.internalValue = undefined;
            this._generationCadence.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._conditions.internalValue = value.conditions;
            this._disabled.internalValue = value.disabled;
            this._filter.internalValue = value.filter;
            this._generationCadence.internalValue = value.generationCadence;
        }
    }
    get conditions() {
        return this._conditions;
    }
    putConditions(value) {
        this._conditions.internalValue = value;
    }
    resetConditions() {
        this._conditions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get conditionsInput() {
        return this._conditions.internalValue;
    }
    get disabled() {
        return this._disabled;
    }
    putDisabled(value) {
        this._disabled.internalValue = value;
    }
    resetDisabled() {
        this._disabled.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get disabledInput() {
        return this._disabled.internalValue;
    }
    get filter() {
        return this._filter;
    }
    putFilter(value) {
        this._filter.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get filterInput() {
        return this._filter.internalValue;
    }
    get generationCadence() {
        return this._generationCadence;
    }
    putGenerationCadence(value) {
        this._generationCadence.internalValue = value;
    }
    resetGenerationCadence() {
        this._generationCadence.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get generationCadenceInput() {
        return this._generationCadence.internalValue;
    }
}
exports.DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetOutputReference = DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetOutputReference;
_24 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetOutputReference[_24] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditionsCloudStorageConditionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        included_bucket_attributes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.includedBucketAttributes),
        included_object_attributes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.includedObjectAttributes),
    };
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditionsCloudStorageConditionsToTerraform = dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditionsCloudStorageConditionsToTerraform;
function dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditionsCloudStorageConditionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        included_bucket_attributes: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.includedBucketAttributes),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        included_object_attributes: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.includedObjectAttributes),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditionsCloudStorageConditionsToHclTerraform = dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditionsCloudStorageConditionsToHclTerraform;
class DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditionsCloudStorageConditionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._includedBucketAttributes !== undefined) {
            hasAnyValues = true;
            internalValueResult.includedBucketAttributes = this._includedBucketAttributes;
        }
        if (this._includedObjectAttributes !== undefined) {
            hasAnyValues = true;
            internalValueResult.includedObjectAttributes = this._includedObjectAttributes;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._includedBucketAttributes = undefined;
            this._includedObjectAttributes = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._includedBucketAttributes = value.includedBucketAttributes;
            this._includedObjectAttributes = value.includedObjectAttributes;
        }
    }
    get includedBucketAttributes() {
        return this.getListAttribute('included_bucket_attributes');
    }
    set includedBucketAttributes(value) {
        this._includedBucketAttributes = value;
    }
    resetIncludedBucketAttributes() {
        this._includedBucketAttributes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includedBucketAttributesInput() {
        return this._includedBucketAttributes;
    }
    get includedObjectAttributes() {
        return this.getListAttribute('included_object_attributes');
    }
    set includedObjectAttributes(value) {
        this._includedObjectAttributes = value;
    }
    resetIncludedObjectAttributes() {
        this._includedObjectAttributes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includedObjectAttributesInput() {
        return this._includedObjectAttributes;
    }
}
exports.DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditionsCloudStorageConditionsOutputReference = DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditionsCloudStorageConditionsOutputReference;
_25 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditionsCloudStorageConditionsOutputReference[_25] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditionsCloudStorageConditionsOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        created_after: cdktf.stringToTerraform(struct.createdAfter),
        min_age: cdktf.stringToTerraform(struct.minAge),
        cloud_storage_conditions: dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditionsCloudStorageConditionsToTerraform(struct.cloudStorageConditions),
    };
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditionsToTerraform = dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditionsToTerraform;
function dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        created_after: {
            value: cdktf.stringToHclTerraform(struct.createdAfter),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        min_age: {
            value: cdktf.stringToHclTerraform(struct.minAge),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cloud_storage_conditions: {
            value: dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditionsCloudStorageConditionsToHclTerraform(struct.cloudStorageConditions),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditionsCloudStorageConditionsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditionsToHclTerraform = dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditionsToHclTerraform;
class DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cloud_storage_conditions - computed: false, optional: true, required: false
        this._cloudStorageConditions = new DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditionsCloudStorageConditionsOutputReference(this, "cloud_storage_conditions");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._createdAfter !== undefined) {
            hasAnyValues = true;
            internalValueResult.createdAfter = this._createdAfter;
        }
        if (this._minAge !== undefined) {
            hasAnyValues = true;
            internalValueResult.minAge = this._minAge;
        }
        if (this._cloudStorageConditions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudStorageConditions = this._cloudStorageConditions?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._createdAfter = undefined;
            this._minAge = undefined;
            this._cloudStorageConditions.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._createdAfter = value.createdAfter;
            this._minAge = value.minAge;
            this._cloudStorageConditions.internalValue = value.cloudStorageConditions;
        }
    }
    get createdAfter() {
        return this.getStringAttribute('created_after');
    }
    set createdAfter(value) {
        this._createdAfter = value;
    }
    resetCreatedAfter() {
        this._createdAfter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createdAfterInput() {
        return this._createdAfter;
    }
    get minAge() {
        return this.getStringAttribute('min_age');
    }
    set minAge(value) {
        this._minAge = value;
    }
    resetMinAge() {
        this._minAge = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minAgeInput() {
        return this._minAge;
    }
    get cloudStorageConditions() {
        return this._cloudStorageConditions;
    }
    putCloudStorageConditions(value) {
        this._cloudStorageConditions.internalValue = value;
    }
    resetCloudStorageConditions() {
        this._cloudStorageConditions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudStorageConditionsInput() {
        return this._cloudStorageConditions.internalValue;
    }
}
exports.DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditionsOutputReference = DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditionsOutputReference;
_26 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditionsOutputReference[_26] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditionsOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetDisabledToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetDisabledToTerraform = dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetDisabledToTerraform;
function dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetDisabledToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetDisabledToHclTerraform = dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetDisabledToHclTerraform;
class DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetDisabledOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetDisabledOutputReference = DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetDisabledOutputReference;
_27 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetDisabledOutputReference[_27] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetDisabledOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCloudStorageResourceReferenceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket_name: cdktf.stringToTerraform(struct.bucketName),
        project_id: cdktf.stringToTerraform(struct.projectId),
    };
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCloudStorageResourceReferenceToTerraform = dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCloudStorageResourceReferenceToTerraform;
function dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCloudStorageResourceReferenceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        bucket_name: {
            value: cdktf.stringToHclTerraform(struct.bucketName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        project_id: {
            value: cdktf.stringToHclTerraform(struct.projectId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCloudStorageResourceReferenceToHclTerraform = dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCloudStorageResourceReferenceToHclTerraform;
class DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCloudStorageResourceReferenceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucketName !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketName = this._bucketName;
        }
        if (this._projectId !== undefined) {
            hasAnyValues = true;
            internalValueResult.projectId = this._projectId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucketName = undefined;
            this._projectId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucketName = value.bucketName;
            this._projectId = value.projectId;
        }
    }
    get bucketName() {
        return this.getStringAttribute('bucket_name');
    }
    set bucketName(value) {
        this._bucketName = value;
    }
    resetBucketName() {
        this._bucketName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bucketNameInput() {
        return this._bucketName;
    }
    get projectId() {
        return this.getStringAttribute('project_id');
    }
    set projectId(value) {
        this._projectId = value;
    }
    resetProjectId() {
        this._projectId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectIdInput() {
        return this._projectId;
    }
}
exports.DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCloudStorageResourceReferenceOutputReference = DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCloudStorageResourceReferenceOutputReference;
_28 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCloudStorageResourceReferenceOutputReference[_28] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCloudStorageResourceReferenceOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsCloudStorageRegexToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket_name_regex: cdktf.stringToTerraform(struct.bucketNameRegex),
        project_id_regex: cdktf.stringToTerraform(struct.projectIdRegex),
    };
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsCloudStorageRegexToTerraform = dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsCloudStorageRegexToTerraform;
function dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsCloudStorageRegexToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        bucket_name_regex: {
            value: cdktf.stringToHclTerraform(struct.bucketNameRegex),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        project_id_regex: {
            value: cdktf.stringToHclTerraform(struct.projectIdRegex),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsCloudStorageRegexToHclTerraform = dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsCloudStorageRegexToHclTerraform;
class DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsCloudStorageRegexOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucketNameRegex !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucketNameRegex = this._bucketNameRegex;
        }
        if (this._projectIdRegex !== undefined) {
            hasAnyValues = true;
            internalValueResult.projectIdRegex = this._projectIdRegex;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucketNameRegex = undefined;
            this._projectIdRegex = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucketNameRegex = value.bucketNameRegex;
            this._projectIdRegex = value.projectIdRegex;
        }
    }
    get bucketNameRegex() {
        return this.getStringAttribute('bucket_name_regex');
    }
    set bucketNameRegex(value) {
        this._bucketNameRegex = value;
    }
    resetBucketNameRegex() {
        this._bucketNameRegex = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bucketNameRegexInput() {
        return this._bucketNameRegex;
    }
    get projectIdRegex() {
        return this.getStringAttribute('project_id_regex');
    }
    set projectIdRegex(value) {
        this._projectIdRegex = value;
    }
    resetProjectIdRegex() {
        this._projectIdRegex = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectIdRegexInput() {
        return this._projectIdRegex;
    }
}
exports.DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsCloudStorageRegexOutputReference = DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsCloudStorageRegexOutputReference;
_29 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsCloudStorageRegexOutputReference[_29] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsCloudStorageRegexOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cloud_storage_regex: dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsCloudStorageRegexToTerraform(struct.cloudStorageRegex),
    };
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsToTerraform = dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsToTerraform;
function dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cloud_storage_regex: {
            value: dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsCloudStorageRegexToHclTerraform(struct.cloudStorageRegex),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsCloudStorageRegexList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsToHclTerraform = dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsToHclTerraform;
class DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // cloud_storage_regex - computed: false, optional: true, required: false
        this._cloudStorageRegex = new DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsCloudStorageRegexOutputReference(this, "cloud_storage_regex");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cloudStorageRegex?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudStorageRegex = this._cloudStorageRegex?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._cloudStorageRegex.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._cloudStorageRegex.internalValue = value.cloudStorageRegex;
        }
    }
    get cloudStorageRegex() {
        return this._cloudStorageRegex;
    }
    putCloudStorageRegex(value) {
        this._cloudStorageRegex.internalValue = value;
    }
    resetCloudStorageRegex() {
        this._cloudStorageRegex.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudStorageRegexInput() {
        return this._cloudStorageRegex.internalValue;
    }
}
exports.DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsOutputReference = DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsOutputReference;
_30 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsOutputReference[_30] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsOutputReference", version: "14.13.1" };
class DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsList = DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsList;
_31 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsList[_31] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsList", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        patterns: cdktf.listMapper(dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsToTerraform, true)(struct.patterns),
    };
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesToTerraform = dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesToTerraform;
function dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        patterns: {
            value: cdktf.listMapperHcl(dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsToHclTerraform, true)(struct.patterns),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesToHclTerraform = dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesToHclTerraform;
class DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // patterns - computed: false, optional: true, required: false
        this._patterns = new DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesPatternsList(this, "patterns", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._patterns?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.patterns = this._patterns?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._patterns.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._patterns.internalValue = value.patterns;
        }
    }
    get patterns() {
        return this._patterns;
    }
    putPatterns(value) {
        this._patterns.internalValue = value;
    }
    resetPatterns() {
        this._patterns.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get patternsInput() {
        return this._patterns.internalValue;
    }
}
exports.DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesOutputReference = DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesOutputReference;
_32 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesOutputReference[_32] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        include_regexes: dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesToTerraform(struct.includeRegexes),
    };
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionToTerraform = dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionToTerraform;
function dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        include_regexes: {
            value: dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesToHclTerraform(struct.includeRegexes),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionToHclTerraform = dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionToHclTerraform;
class DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // include_regexes - computed: false, optional: true, required: false
        this._includeRegexes = new DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionIncludeRegexesOutputReference(this, "include_regexes");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._includeRegexes?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.includeRegexes = this._includeRegexes?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._includeRegexes.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._includeRegexes.internalValue = value.includeRegexes;
        }
    }
    get includeRegexes() {
        return this._includeRegexes;
    }
    putIncludeRegexes(value) {
        this._includeRegexes.internalValue = value;
    }
    resetIncludeRegexes() {
        this._includeRegexes.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeRegexesInput() {
        return this._includeRegexes.internalValue;
    }
}
exports.DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionOutputReference = DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionOutputReference;
_33 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionOutputReference[_33] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterOthersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterOthersToTerraform = dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterOthersToTerraform;
function dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterOthersToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterOthersToHclTerraform = dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterOthersToHclTerraform;
class DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterOthersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterOthersOutputReference = DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterOthersOutputReference;
_34 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterOthersOutputReference[_34] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterOthersOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cloud_storage_resource_reference: dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCloudStorageResourceReferenceToTerraform(struct.cloudStorageResourceReference),
        collection: dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionToTerraform(struct.collection),
        others: dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterOthersToTerraform(struct.others),
    };
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterToTerraform = dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterToTerraform;
function dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cloud_storage_resource_reference: {
            value: dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCloudStorageResourceReferenceToHclTerraform(struct.cloudStorageResourceReference),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCloudStorageResourceReferenceList",
        },
        collection: {
            value: dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionToHclTerraform(struct.collection),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionList",
        },
        others: {
            value: dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterOthersToHclTerraform(struct.others),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterOthersList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterToHclTerraform = dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterToHclTerraform;
class DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cloud_storage_resource_reference - computed: false, optional: true, required: false
        this._cloudStorageResourceReference = new DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCloudStorageResourceReferenceOutputReference(this, "cloud_storage_resource_reference");
        // collection - computed: false, optional: true, required: false
        this._collection = new DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterCollectionOutputReference(this, "collection");
        // others - computed: false, optional: true, required: false
        this._others = new DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterOthersOutputReference(this, "others");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cloudStorageResourceReference?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudStorageResourceReference = this._cloudStorageResourceReference?.internalValue;
        }
        if (this._collection?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.collection = this._collection?.internalValue;
        }
        if (this._others?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.others = this._others?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cloudStorageResourceReference.internalValue = undefined;
            this._collection.internalValue = undefined;
            this._others.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cloudStorageResourceReference.internalValue = value.cloudStorageResourceReference;
            this._collection.internalValue = value.collection;
            this._others.internalValue = value.others;
        }
    }
    get cloudStorageResourceReference() {
        return this._cloudStorageResourceReference;
    }
    putCloudStorageResourceReference(value) {
        this._cloudStorageResourceReference.internalValue = value;
    }
    resetCloudStorageResourceReference() {
        this._cloudStorageResourceReference.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudStorageResourceReferenceInput() {
        return this._cloudStorageResourceReference.internalValue;
    }
    get collection() {
        return this._collection;
    }
    putCollection(value) {
        this._collection.internalValue = value;
    }
    resetCollection() {
        this._collection.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get collectionInput() {
        return this._collection.internalValue;
    }
    get others() {
        return this._others;
    }
    putOthers(value) {
        this._others.internalValue = value;
    }
    resetOthers() {
        this._others.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get othersInput() {
        return this._others.internalValue;
    }
}
exports.DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterOutputReference = DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterOutputReference;
_35 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterOutputReference[_35] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetGenerationCadenceInspectTemplateModifiedCadenceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        frequency: cdktf.stringToTerraform(struct.frequency),
    };
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetGenerationCadenceInspectTemplateModifiedCadenceToTerraform = dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetGenerationCadenceInspectTemplateModifiedCadenceToTerraform;
function dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetGenerationCadenceInspectTemplateModifiedCadenceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        frequency: {
            value: cdktf.stringToHclTerraform(struct.frequency),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetGenerationCadenceInspectTemplateModifiedCadenceToHclTerraform = dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetGenerationCadenceInspectTemplateModifiedCadenceToHclTerraform;
class DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetGenerationCadenceInspectTemplateModifiedCadenceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._frequency !== undefined) {
            hasAnyValues = true;
            internalValueResult.frequency = this._frequency;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._frequency = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._frequency = value.frequency;
        }
    }
    get frequency() {
        return this.getStringAttribute('frequency');
    }
    set frequency(value) {
        this._frequency = value;
    }
    resetFrequency() {
        this._frequency = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get frequencyInput() {
        return this._frequency;
    }
}
exports.DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetGenerationCadenceInspectTemplateModifiedCadenceOutputReference = DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetGenerationCadenceInspectTemplateModifiedCadenceOutputReference;
_36 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetGenerationCadenceInspectTemplateModifiedCadenceOutputReference[_36] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetGenerationCadenceInspectTemplateModifiedCadenceOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetGenerationCadenceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        refresh_frequency: cdktf.stringToTerraform(struct.refreshFrequency),
        inspect_template_modified_cadence: dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetGenerationCadenceInspectTemplateModifiedCadenceToTerraform(struct.inspectTemplateModifiedCadence),
    };
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetGenerationCadenceToTerraform = dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetGenerationCadenceToTerraform;
function dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetGenerationCadenceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        refresh_frequency: {
            value: cdktf.stringToHclTerraform(struct.refreshFrequency),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        inspect_template_modified_cadence: {
            value: dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetGenerationCadenceInspectTemplateModifiedCadenceToHclTerraform(struct.inspectTemplateModifiedCadence),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetGenerationCadenceInspectTemplateModifiedCadenceList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetGenerationCadenceToHclTerraform = dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetGenerationCadenceToHclTerraform;
class DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetGenerationCadenceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // inspect_template_modified_cadence - computed: false, optional: true, required: false
        this._inspectTemplateModifiedCadence = new DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetGenerationCadenceInspectTemplateModifiedCadenceOutputReference(this, "inspect_template_modified_cadence");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._refreshFrequency !== undefined) {
            hasAnyValues = true;
            internalValueResult.refreshFrequency = this._refreshFrequency;
        }
        if (this._inspectTemplateModifiedCadence?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.inspectTemplateModifiedCadence = this._inspectTemplateModifiedCadence?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._refreshFrequency = undefined;
            this._inspectTemplateModifiedCadence.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._refreshFrequency = value.refreshFrequency;
            this._inspectTemplateModifiedCadence.internalValue = value.inspectTemplateModifiedCadence;
        }
    }
    get refreshFrequency() {
        return this.getStringAttribute('refresh_frequency');
    }
    set refreshFrequency(value) {
        this._refreshFrequency = value;
    }
    resetRefreshFrequency() {
        this._refreshFrequency = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get refreshFrequencyInput() {
        return this._refreshFrequency;
    }
    get inspectTemplateModifiedCadence() {
        return this._inspectTemplateModifiedCadence;
    }
    putInspectTemplateModifiedCadence(value) {
        this._inspectTemplateModifiedCadence.internalValue = value;
    }
    resetInspectTemplateModifiedCadence() {
        this._inspectTemplateModifiedCadence.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inspectTemplateModifiedCadenceInput() {
        return this._inspectTemplateModifiedCadence.internalValue;
    }
}
exports.DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetGenerationCadenceOutputReference = DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetGenerationCadenceOutputReference;
_37 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetGenerationCadenceOutputReference[_37] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetGenerationCadenceOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        conditions: dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditionsToTerraform(struct.conditions),
        disabled: dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetDisabledToTerraform(struct.disabled),
        filter: dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterToTerraform(struct.filter),
        generation_cadence: dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetGenerationCadenceToTerraform(struct.generationCadence),
    };
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetToTerraform = dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetToTerraform;
function dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        conditions: {
            value: dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditionsToHclTerraform(struct.conditions),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditionsList",
        },
        disabled: {
            value: dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetDisabledToHclTerraform(struct.disabled),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetDisabledList",
        },
        filter: {
            value: dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterToHclTerraform(struct.filter),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterList",
        },
        generation_cadence: {
            value: dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetGenerationCadenceToHclTerraform(struct.generationCadence),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetGenerationCadenceList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetToHclTerraform = dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetToHclTerraform;
class DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // conditions - computed: false, optional: true, required: false
        this._conditions = new DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetConditionsOutputReference(this, "conditions");
        // disabled - computed: false, optional: true, required: false
        this._disabled = new DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetDisabledOutputReference(this, "disabled");
        // filter - computed: false, optional: false, required: true
        this._filter = new DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetFilterOutputReference(this, "filter");
        // generation_cadence - computed: false, optional: true, required: false
        this._generationCadence = new DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetGenerationCadenceOutputReference(this, "generation_cadence");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._conditions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.conditions = this._conditions?.internalValue;
        }
        if (this._disabled?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.disabled = this._disabled?.internalValue;
        }
        if (this._filter?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.filter = this._filter?.internalValue;
        }
        if (this._generationCadence?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.generationCadence = this._generationCadence?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._conditions.internalValue = undefined;
            this._disabled.internalValue = undefined;
            this._filter.internalValue = undefined;
            this._generationCadence.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._conditions.internalValue = value.conditions;
            this._disabled.internalValue = value.disabled;
            this._filter.internalValue = value.filter;
            this._generationCadence.internalValue = value.generationCadence;
        }
    }
    get conditions() {
        return this._conditions;
    }
    putConditions(value) {
        this._conditions.internalValue = value;
    }
    resetConditions() {
        this._conditions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get conditionsInput() {
        return this._conditions.internalValue;
    }
    get disabled() {
        return this._disabled;
    }
    putDisabled(value) {
        this._disabled.internalValue = value;
    }
    resetDisabled() {
        this._disabled.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get disabledInput() {
        return this._disabled.internalValue;
    }
    get filter() {
        return this._filter;
    }
    putFilter(value) {
        this._filter.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get filterInput() {
        return this._filter.internalValue;
    }
    get generationCadence() {
        return this._generationCadence;
    }
    putGenerationCadence(value) {
        this._generationCadence.internalValue = value;
    }
    resetGenerationCadence() {
        this._generationCadence.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get generationCadenceInput() {
        return this._generationCadence.internalValue;
    }
}
exports.DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetOutputReference = DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetOutputReference;
_38 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetOutputReference[_38] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigTargetsSecretsTargetToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.dataLossPreventionDiscoveryConfigTargetsSecretsTargetToTerraform = dataLossPreventionDiscoveryConfigTargetsSecretsTargetToTerraform;
function dataLossPreventionDiscoveryConfigTargetsSecretsTargetToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.dataLossPreventionDiscoveryConfigTargetsSecretsTargetToHclTerraform = dataLossPreventionDiscoveryConfigTargetsSecretsTargetToHclTerraform;
class DataLossPreventionDiscoveryConfigTargetsSecretsTargetOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DataLossPreventionDiscoveryConfigTargetsSecretsTargetOutputReference = DataLossPreventionDiscoveryConfigTargetsSecretsTargetOutputReference;
_39 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigTargetsSecretsTargetOutputReference[_39] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigTargetsSecretsTargetOutputReference", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigTargetsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        big_query_target: dataLossPreventionDiscoveryConfigTargetsBigQueryTargetToTerraform(struct.bigQueryTarget),
        cloud_sql_target: dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetToTerraform(struct.cloudSqlTarget),
        cloud_storage_target: dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetToTerraform(struct.cloudStorageTarget),
        secrets_target: dataLossPreventionDiscoveryConfigTargetsSecretsTargetToTerraform(struct.secretsTarget),
    };
}
exports.dataLossPreventionDiscoveryConfigTargetsToTerraform = dataLossPreventionDiscoveryConfigTargetsToTerraform;
function dataLossPreventionDiscoveryConfigTargetsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        big_query_target: {
            value: dataLossPreventionDiscoveryConfigTargetsBigQueryTargetToHclTerraform(struct.bigQueryTarget),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigTargetsBigQueryTargetList",
        },
        cloud_sql_target: {
            value: dataLossPreventionDiscoveryConfigTargetsCloudSqlTargetToHclTerraform(struct.cloudSqlTarget),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetList",
        },
        cloud_storage_target: {
            value: dataLossPreventionDiscoveryConfigTargetsCloudStorageTargetToHclTerraform(struct.cloudStorageTarget),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetList",
        },
        secrets_target: {
            value: dataLossPreventionDiscoveryConfigTargetsSecretsTargetToHclTerraform(struct.secretsTarget),
            isBlock: true,
            type: "list",
            storageClassType: "DataLossPreventionDiscoveryConfigTargetsSecretsTargetList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigTargetsToHclTerraform = dataLossPreventionDiscoveryConfigTargetsToHclTerraform;
class DataLossPreventionDiscoveryConfigTargetsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // big_query_target - computed: false, optional: true, required: false
        this._bigQueryTarget = new DataLossPreventionDiscoveryConfigTargetsBigQueryTargetOutputReference(this, "big_query_target");
        // cloud_sql_target - computed: false, optional: true, required: false
        this._cloudSqlTarget = new DataLossPreventionDiscoveryConfigTargetsCloudSqlTargetOutputReference(this, "cloud_sql_target");
        // cloud_storage_target - computed: false, optional: true, required: false
        this._cloudStorageTarget = new DataLossPreventionDiscoveryConfigTargetsCloudStorageTargetOutputReference(this, "cloud_storage_target");
        // secrets_target - computed: false, optional: true, required: false
        this._secretsTarget = new DataLossPreventionDiscoveryConfigTargetsSecretsTargetOutputReference(this, "secrets_target");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bigQueryTarget?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.bigQueryTarget = this._bigQueryTarget?.internalValue;
        }
        if (this._cloudSqlTarget?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudSqlTarget = this._cloudSqlTarget?.internalValue;
        }
        if (this._cloudStorageTarget?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudStorageTarget = this._cloudStorageTarget?.internalValue;
        }
        if (this._secretsTarget?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.secretsTarget = this._secretsTarget?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._bigQueryTarget.internalValue = undefined;
            this._cloudSqlTarget.internalValue = undefined;
            this._cloudStorageTarget.internalValue = undefined;
            this._secretsTarget.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._bigQueryTarget.internalValue = value.bigQueryTarget;
            this._cloudSqlTarget.internalValue = value.cloudSqlTarget;
            this._cloudStorageTarget.internalValue = value.cloudStorageTarget;
            this._secretsTarget.internalValue = value.secretsTarget;
        }
    }
    get bigQueryTarget() {
        return this._bigQueryTarget;
    }
    putBigQueryTarget(value) {
        this._bigQueryTarget.internalValue = value;
    }
    resetBigQueryTarget() {
        this._bigQueryTarget.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bigQueryTargetInput() {
        return this._bigQueryTarget.internalValue;
    }
    get cloudSqlTarget() {
        return this._cloudSqlTarget;
    }
    putCloudSqlTarget(value) {
        this._cloudSqlTarget.internalValue = value;
    }
    resetCloudSqlTarget() {
        this._cloudSqlTarget.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudSqlTargetInput() {
        return this._cloudSqlTarget.internalValue;
    }
    get cloudStorageTarget() {
        return this._cloudStorageTarget;
    }
    putCloudStorageTarget(value) {
        this._cloudStorageTarget.internalValue = value;
    }
    resetCloudStorageTarget() {
        this._cloudStorageTarget.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudStorageTargetInput() {
        return this._cloudStorageTarget.internalValue;
    }
    get secretsTarget() {
        return this._secretsTarget;
    }
    putSecretsTarget(value) {
        this._secretsTarget.internalValue = value;
    }
    resetSecretsTarget() {
        this._secretsTarget.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secretsTargetInput() {
        return this._secretsTarget.internalValue;
    }
}
exports.DataLossPreventionDiscoveryConfigTargetsOutputReference = DataLossPreventionDiscoveryConfigTargetsOutputReference;
_40 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigTargetsOutputReference[_40] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigTargetsOutputReference", version: "14.13.1" };
class DataLossPreventionDiscoveryConfigTargetsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataLossPreventionDiscoveryConfigTargetsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataLossPreventionDiscoveryConfigTargetsList = DataLossPreventionDiscoveryConfigTargetsList;
_41 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigTargetsList[_41] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigTargetsList", version: "14.13.1" };
function dataLossPreventionDiscoveryConfigTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.dataLossPreventionDiscoveryConfigTimeoutsToTerraform = dataLossPreventionDiscoveryConfigTimeoutsToTerraform;
function dataLossPreventionDiscoveryConfigTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataLossPreventionDiscoveryConfigTimeoutsToHclTerraform = dataLossPreventionDiscoveryConfigTimeoutsToHclTerraform;
class DataLossPreventionDiscoveryConfigTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.DataLossPreventionDiscoveryConfigTimeoutsOutputReference = DataLossPreventionDiscoveryConfigTimeoutsOutputReference;
_42 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfigTimeoutsOutputReference[_42] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfigTimeoutsOutputReference", version: "14.13.1" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/data_loss_prevention_discovery_config google_data_loss_prevention_discovery_config}
*/
class DataLossPreventionDiscoveryConfig extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a DataLossPreventionDiscoveryConfig resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the DataLossPreventionDiscoveryConfig to import
    * @param importFromId The id of the existing DataLossPreventionDiscoveryConfig that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/data_loss_prevention_discovery_config#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the DataLossPreventionDiscoveryConfig to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_data_loss_prevention_discovery_config", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/data_loss_prevention_discovery_config google_data_loss_prevention_discovery_config} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataLossPreventionDiscoveryConfigConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_data_loss_prevention_discovery_config',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // errors - computed: true, optional: false, required: false
        this._errors = new DataLossPreventionDiscoveryConfigErrorsList(this, "errors", false);
        // actions - computed: false, optional: true, required: false
        this._actions = new DataLossPreventionDiscoveryConfigActionsList(this, "actions", false);
        // org_config - computed: false, optional: true, required: false
        this._orgConfig = new DataLossPreventionDiscoveryConfigOrgConfigOutputReference(this, "org_config");
        // targets - computed: false, optional: true, required: false
        this._targets = new DataLossPreventionDiscoveryConfigTargetsList(this, "targets", false);
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new DataLossPreventionDiscoveryConfigTimeoutsOutputReference(this, "timeouts");
        this._displayName = config.displayName;
        this._id = config.id;
        this._inspectTemplates = config.inspectTemplates;
        this._location = config.location;
        this._parent = config.parent;
        this._status = config.status;
        this._actions.internalValue = config.actions;
        this._orgConfig.internalValue = config.orgConfig;
        this._targets.internalValue = config.targets;
        this._timeouts.internalValue = config.timeouts;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // create_time - computed: true, optional: false, required: false
    get createTime() {
        return this.getStringAttribute('create_time');
    }
    get displayName() {
        return this.getStringAttribute('display_name');
    }
    set displayName(value) {
        this._displayName = value;
    }
    resetDisplayName() {
        this._displayName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get displayNameInput() {
        return this._displayName;
    }
    get errors() {
        return this._errors;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get inspectTemplates() {
        return this.getListAttribute('inspect_templates');
    }
    set inspectTemplates(value) {
        this._inspectTemplates = value;
    }
    resetInspectTemplates() {
        this._inspectTemplates = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get inspectTemplatesInput() {
        return this._inspectTemplates;
    }
    // last_run_time - computed: true, optional: false, required: false
    get lastRunTime() {
        return this.getStringAttribute('last_run_time');
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get parent() {
        return this.getStringAttribute('parent');
    }
    set parent(value) {
        this._parent = value;
    }
    // Temporarily expose input value. Use with caution.
    get parentInput() {
        return this._parent;
    }
    get status() {
        return this.getStringAttribute('status');
    }
    set status(value) {
        this._status = value;
    }
    resetStatus() {
        this._status = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get statusInput() {
        return this._status;
    }
    // update_time - computed: true, optional: false, required: false
    get updateTime() {
        return this.getStringAttribute('update_time');
    }
    get actions() {
        return this._actions;
    }
    putActions(value) {
        this._actions.internalValue = value;
    }
    resetActions() {
        this._actions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get actionsInput() {
        return this._actions.internalValue;
    }
    get orgConfig() {
        return this._orgConfig;
    }
    putOrgConfig(value) {
        this._orgConfig.internalValue = value;
    }
    resetOrgConfig() {
        this._orgConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get orgConfigInput() {
        return this._orgConfig.internalValue;
    }
    get targets() {
        return this._targets;
    }
    putTargets(value) {
        this._targets.internalValue = value;
    }
    resetTargets() {
        this._targets.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetsInput() {
        return this._targets.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            display_name: cdktf.stringToTerraform(this._displayName),
            id: cdktf.stringToTerraform(this._id),
            inspect_templates: cdktf.listMapper(cdktf.stringToTerraform, false)(this._inspectTemplates),
            location: cdktf.stringToTerraform(this._location),
            parent: cdktf.stringToTerraform(this._parent),
            status: cdktf.stringToTerraform(this._status),
            actions: cdktf.listMapper(dataLossPreventionDiscoveryConfigActionsToTerraform, true)(this._actions.internalValue),
            org_config: dataLossPreventionDiscoveryConfigOrgConfigToTerraform(this._orgConfig.internalValue),
            targets: cdktf.listMapper(dataLossPreventionDiscoveryConfigTargetsToTerraform, true)(this._targets.internalValue),
            timeouts: dataLossPreventionDiscoveryConfigTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            display_name: {
                value: cdktf.stringToHclTerraform(this._displayName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            inspect_templates: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._inspectTemplates),
                isBlock: false,
                type: "list",
                storageClassType: "stringList",
            },
            location: {
                value: cdktf.stringToHclTerraform(this._location),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            parent: {
                value: cdktf.stringToHclTerraform(this._parent),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            status: {
                value: cdktf.stringToHclTerraform(this._status),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            actions: {
                value: cdktf.listMapperHcl(dataLossPreventionDiscoveryConfigActionsToHclTerraform, true)(this._actions.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "DataLossPreventionDiscoveryConfigActionsList",
            },
            org_config: {
                value: dataLossPreventionDiscoveryConfigOrgConfigToHclTerraform(this._orgConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "DataLossPreventionDiscoveryConfigOrgConfigList",
            },
            targets: {
                value: cdktf.listMapperHcl(dataLossPreventionDiscoveryConfigTargetsToHclTerraform, true)(this._targets.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "DataLossPreventionDiscoveryConfigTargetsList",
            },
            timeouts: {
                value: dataLossPreventionDiscoveryConfigTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "DataLossPreventionDiscoveryConfigTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.DataLossPreventionDiscoveryConfig = DataLossPreventionDiscoveryConfig;
_43 = JSII_RTTI_SYMBOL_1;
DataLossPreventionDiscoveryConfig[_43] = { fqn: "@cdktf/provider-google.dataLossPreventionDiscoveryConfig.DataLossPreventionDiscoveryConfig", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
DataLossPreventionDiscoveryConfig.tfResourceType = "google_data_loss_prevention_discovery_config";
//# sourceMappingURL=data:application/json;base64,