/**
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: MPL-2.0
 */
import { Construct } from 'constructs';
import * as cdktf from 'cdktf';
export interface CertificateManagerTrustConfigConfig extends cdktf.TerraformMetaArguments {
    /**
    * One or more paragraphs of text description of a trust config.
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/certificate_manager_trust_config#description CertificateManagerTrustConfig#description}
    */
    readonly description?: string;
    /**
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/certificate_manager_trust_config#id CertificateManagerTrustConfig#id}
    *
    * Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2.
    * If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
    */
    readonly id?: string;
    /**
    * Set of label tags associated with the trust config.
    *
    * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
    * Please refer to the field 'effective_labels' for all of the labels present on the resource.
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/certificate_manager_trust_config#labels CertificateManagerTrustConfig#labels}
    */
    readonly labels?: {
        [key: string]: string;
    };
    /**
    * The trust config location.
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/certificate_manager_trust_config#location CertificateManagerTrustConfig#location}
    */
    readonly location: string;
    /**
    * A user-defined name of the trust config. Trust config names must be unique globally.
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/certificate_manager_trust_config#name CertificateManagerTrustConfig#name}
    */
    readonly name: string;
    /**
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/certificate_manager_trust_config#project CertificateManagerTrustConfig#project}
    */
    readonly project?: string;
    /**
    * allowlisted_certificates block
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/certificate_manager_trust_config#allowlisted_certificates CertificateManagerTrustConfig#allowlisted_certificates}
    */
    readonly allowlistedCertificates?: CertificateManagerTrustConfigAllowlistedCertificates[] | cdktf.IResolvable;
    /**
    * timeouts block
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/certificate_manager_trust_config#timeouts CertificateManagerTrustConfig#timeouts}
    */
    readonly timeouts?: CertificateManagerTrustConfigTimeouts;
    /**
    * trust_stores block
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/certificate_manager_trust_config#trust_stores CertificateManagerTrustConfig#trust_stores}
    */
    readonly trustStores?: CertificateManagerTrustConfigTrustStores[] | cdktf.IResolvable;
}
export interface CertificateManagerTrustConfigAllowlistedCertificates {
    /**
    * PEM certificate that is allowlisted. The certificate can be up to 5k bytes, and must be a parseable X.509 certificate.
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/certificate_manager_trust_config#pem_certificate CertificateManagerTrustConfig#pem_certificate}
    */
    readonly pemCertificate: string;
}
export declare function certificateManagerTrustConfigAllowlistedCertificatesToTerraform(struct?: CertificateManagerTrustConfigAllowlistedCertificates | cdktf.IResolvable): any;
export declare function certificateManagerTrustConfigAllowlistedCertificatesToHclTerraform(struct?: CertificateManagerTrustConfigAllowlistedCertificates | cdktf.IResolvable): any;
export declare class CertificateManagerTrustConfigAllowlistedCertificatesOutputReference extends cdktf.ComplexObject {
    private isEmptyObject;
    private resolvableValue?;
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean);
    get internalValue(): CertificateManagerTrustConfigAllowlistedCertificates | cdktf.IResolvable | undefined;
    set internalValue(value: CertificateManagerTrustConfigAllowlistedCertificates | cdktf.IResolvable | undefined);
    private _pemCertificate?;
    get pemCertificate(): string;
    set pemCertificate(value: string);
    get pemCertificateInput(): string | undefined;
}
export declare class CertificateManagerTrustConfigAllowlistedCertificatesList extends cdktf.ComplexList {
    protected terraformResource: cdktf.IInterpolatingParent;
    protected terraformAttribute: string;
    protected wrapsSet: boolean;
    internalValue?: CertificateManagerTrustConfigAllowlistedCertificates[] | cdktf.IResolvable;
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, wrapsSet: boolean);
    /**
    * @param index the index of the item to return
    */
    get(index: number): CertificateManagerTrustConfigAllowlistedCertificatesOutputReference;
}
export interface CertificateManagerTrustConfigTimeouts {
    /**
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/certificate_manager_trust_config#create CertificateManagerTrustConfig#create}
    */
    readonly create?: string;
    /**
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/certificate_manager_trust_config#delete CertificateManagerTrustConfig#delete}
    */
    readonly delete?: string;
    /**
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/certificate_manager_trust_config#update CertificateManagerTrustConfig#update}
    */
    readonly update?: string;
}
export declare function certificateManagerTrustConfigTimeoutsToTerraform(struct?: CertificateManagerTrustConfigTimeouts | cdktf.IResolvable): any;
export declare function certificateManagerTrustConfigTimeoutsToHclTerraform(struct?: CertificateManagerTrustConfigTimeouts | cdktf.IResolvable): any;
export declare class CertificateManagerTrustConfigTimeoutsOutputReference extends cdktf.ComplexObject {
    private isEmptyObject;
    private resolvableValue?;
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string);
    get internalValue(): CertificateManagerTrustConfigTimeouts | cdktf.IResolvable | undefined;
    set internalValue(value: CertificateManagerTrustConfigTimeouts | cdktf.IResolvable | undefined);
    private _create?;
    get create(): string;
    set create(value: string);
    resetCreate(): void;
    get createInput(): string | undefined;
    private _delete?;
    get delete(): string;
    set delete(value: string);
    resetDelete(): void;
    get deleteInput(): string | undefined;
    private _update?;
    get update(): string;
    set update(value: string);
    resetUpdate(): void;
    get updateInput(): string | undefined;
}
export interface CertificateManagerTrustConfigTrustStoresIntermediateCas {
    /**
    * PEM intermediate certificate used for building up paths for validation.
    * Each certificate provided in PEM format may occupy up to 5kB.
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/certificate_manager_trust_config#pem_certificate CertificateManagerTrustConfig#pem_certificate}
    */
    readonly pemCertificate?: string;
}
export declare function certificateManagerTrustConfigTrustStoresIntermediateCasToTerraform(struct?: CertificateManagerTrustConfigTrustStoresIntermediateCas | cdktf.IResolvable): any;
export declare function certificateManagerTrustConfigTrustStoresIntermediateCasToHclTerraform(struct?: CertificateManagerTrustConfigTrustStoresIntermediateCas | cdktf.IResolvable): any;
export declare class CertificateManagerTrustConfigTrustStoresIntermediateCasOutputReference extends cdktf.ComplexObject {
    private isEmptyObject;
    private resolvableValue?;
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean);
    get internalValue(): CertificateManagerTrustConfigTrustStoresIntermediateCas | cdktf.IResolvable | undefined;
    set internalValue(value: CertificateManagerTrustConfigTrustStoresIntermediateCas | cdktf.IResolvable | undefined);
    private _pemCertificate?;
    get pemCertificate(): string;
    set pemCertificate(value: string);
    resetPemCertificate(): void;
    get pemCertificateInput(): string | undefined;
}
export declare class CertificateManagerTrustConfigTrustStoresIntermediateCasList extends cdktf.ComplexList {
    protected terraformResource: cdktf.IInterpolatingParent;
    protected terraformAttribute: string;
    protected wrapsSet: boolean;
    internalValue?: CertificateManagerTrustConfigTrustStoresIntermediateCas[] | cdktf.IResolvable;
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, wrapsSet: boolean);
    /**
    * @param index the index of the item to return
    */
    get(index: number): CertificateManagerTrustConfigTrustStoresIntermediateCasOutputReference;
}
export interface CertificateManagerTrustConfigTrustStoresTrustAnchors {
    /**
    * PEM root certificate of the PKI used for validation.
    * Each certificate provided in PEM format may occupy up to 5kB.
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/certificate_manager_trust_config#pem_certificate CertificateManagerTrustConfig#pem_certificate}
    */
    readonly pemCertificate?: string;
}
export declare function certificateManagerTrustConfigTrustStoresTrustAnchorsToTerraform(struct?: CertificateManagerTrustConfigTrustStoresTrustAnchors | cdktf.IResolvable): any;
export declare function certificateManagerTrustConfigTrustStoresTrustAnchorsToHclTerraform(struct?: CertificateManagerTrustConfigTrustStoresTrustAnchors | cdktf.IResolvable): any;
export declare class CertificateManagerTrustConfigTrustStoresTrustAnchorsOutputReference extends cdktf.ComplexObject {
    private isEmptyObject;
    private resolvableValue?;
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean);
    get internalValue(): CertificateManagerTrustConfigTrustStoresTrustAnchors | cdktf.IResolvable | undefined;
    set internalValue(value: CertificateManagerTrustConfigTrustStoresTrustAnchors | cdktf.IResolvable | undefined);
    private _pemCertificate?;
    get pemCertificate(): string;
    set pemCertificate(value: string);
    resetPemCertificate(): void;
    get pemCertificateInput(): string | undefined;
}
export declare class CertificateManagerTrustConfigTrustStoresTrustAnchorsList extends cdktf.ComplexList {
    protected terraformResource: cdktf.IInterpolatingParent;
    protected terraformAttribute: string;
    protected wrapsSet: boolean;
    internalValue?: CertificateManagerTrustConfigTrustStoresTrustAnchors[] | cdktf.IResolvable;
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, wrapsSet: boolean);
    /**
    * @param index the index of the item to return
    */
    get(index: number): CertificateManagerTrustConfigTrustStoresTrustAnchorsOutputReference;
}
export interface CertificateManagerTrustConfigTrustStores {
    /**
    * intermediate_cas block
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/certificate_manager_trust_config#intermediate_cas CertificateManagerTrustConfig#intermediate_cas}
    */
    readonly intermediateCas?: CertificateManagerTrustConfigTrustStoresIntermediateCas[] | cdktf.IResolvable;
    /**
    * trust_anchors block
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/certificate_manager_trust_config#trust_anchors CertificateManagerTrustConfig#trust_anchors}
    */
    readonly trustAnchors?: CertificateManagerTrustConfigTrustStoresTrustAnchors[] | cdktf.IResolvable;
}
export declare function certificateManagerTrustConfigTrustStoresToTerraform(struct?: CertificateManagerTrustConfigTrustStores | cdktf.IResolvable): any;
export declare function certificateManagerTrustConfigTrustStoresToHclTerraform(struct?: CertificateManagerTrustConfigTrustStores | cdktf.IResolvable): any;
export declare class CertificateManagerTrustConfigTrustStoresOutputReference extends cdktf.ComplexObject {
    private isEmptyObject;
    private resolvableValue?;
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean);
    get internalValue(): CertificateManagerTrustConfigTrustStores | cdktf.IResolvable | undefined;
    set internalValue(value: CertificateManagerTrustConfigTrustStores | cdktf.IResolvable | undefined);
    private _intermediateCas;
    get intermediateCas(): CertificateManagerTrustConfigTrustStoresIntermediateCasList;
    putIntermediateCas(value: CertificateManagerTrustConfigTrustStoresIntermediateCas[] | cdktf.IResolvable): void;
    resetIntermediateCas(): void;
    get intermediateCasInput(): cdktf.IResolvable | CertificateManagerTrustConfigTrustStoresIntermediateCas[] | undefined;
    private _trustAnchors;
    get trustAnchors(): CertificateManagerTrustConfigTrustStoresTrustAnchorsList;
    putTrustAnchors(value: CertificateManagerTrustConfigTrustStoresTrustAnchors[] | cdktf.IResolvable): void;
    resetTrustAnchors(): void;
    get trustAnchorsInput(): cdktf.IResolvable | CertificateManagerTrustConfigTrustStoresTrustAnchors[] | undefined;
}
export declare class CertificateManagerTrustConfigTrustStoresList extends cdktf.ComplexList {
    protected terraformResource: cdktf.IInterpolatingParent;
    protected terraformAttribute: string;
    protected wrapsSet: boolean;
    internalValue?: CertificateManagerTrustConfigTrustStores[] | cdktf.IResolvable;
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, wrapsSet: boolean);
    /**
    * @param index the index of the item to return
    */
    get(index: number): CertificateManagerTrustConfigTrustStoresOutputReference;
}
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/certificate_manager_trust_config google_certificate_manager_trust_config}
*/
export declare class CertificateManagerTrustConfig extends cdktf.TerraformResource {
    static readonly tfResourceType = "google_certificate_manager_trust_config";
    /**
    * Generates CDKTF code for importing a CertificateManagerTrustConfig resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the CertificateManagerTrustConfig to import
    * @param importFromId The id of the existing CertificateManagerTrustConfig that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/certificate_manager_trust_config#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the CertificateManagerTrustConfig to import is found
    */
    static generateConfigForImport(scope: Construct, importToId: string, importFromId: string, provider?: cdktf.TerraformProvider): cdktf.ImportableResource;
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/certificate_manager_trust_config google_certificate_manager_trust_config} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options CertificateManagerTrustConfigConfig
    */
    constructor(scope: Construct, id: string, config: CertificateManagerTrustConfigConfig);
    get createTime(): string;
    private _description?;
    get description(): string;
    set description(value: string);
    resetDescription(): void;
    get descriptionInput(): string | undefined;
    private _effectiveLabels;
    get effectiveLabels(): cdktf.StringMap;
    private _id?;
    get id(): string;
    set id(value: string);
    resetId(): void;
    get idInput(): string | undefined;
    private _labels?;
    get labels(): {
        [key: string]: string;
    };
    set labels(value: {
        [key: string]: string;
    });
    resetLabels(): void;
    get labelsInput(): {
        [key: string]: string;
    } | undefined;
    private _location?;
    get location(): string;
    set location(value: string);
    get locationInput(): string | undefined;
    private _name?;
    get name(): string;
    set name(value: string);
    get nameInput(): string | undefined;
    private _project?;
    get project(): string;
    set project(value: string);
    resetProject(): void;
    get projectInput(): string | undefined;
    private _terraformLabels;
    get terraformLabels(): cdktf.StringMap;
    get updateTime(): string;
    private _allowlistedCertificates;
    get allowlistedCertificates(): CertificateManagerTrustConfigAllowlistedCertificatesList;
    putAllowlistedCertificates(value: CertificateManagerTrustConfigAllowlistedCertificates[] | cdktf.IResolvable): void;
    resetAllowlistedCertificates(): void;
    get allowlistedCertificatesInput(): cdktf.IResolvable | CertificateManagerTrustConfigAllowlistedCertificates[] | undefined;
    private _timeouts;
    get timeouts(): CertificateManagerTrustConfigTimeoutsOutputReference;
    putTimeouts(value: CertificateManagerTrustConfigTimeouts): void;
    resetTimeouts(): void;
    get timeoutsInput(): cdktf.IResolvable | CertificateManagerTrustConfigTimeouts | undefined;
    private _trustStores;
    get trustStores(): CertificateManagerTrustConfigTrustStoresList;
    putTrustStores(value: CertificateManagerTrustConfigTrustStores[] | cdktf.IResolvable): void;
    resetTrustStores(): void;
    get trustStoresInput(): cdktf.IResolvable | CertificateManagerTrustConfigTrustStores[] | undefined;
    protected synthesizeAttributes(): {
        [name: string]: any;
    };
    protected synthesizeHclAttributes(): {
        [name: string]: any;
    };
}
