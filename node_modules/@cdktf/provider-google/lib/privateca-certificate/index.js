"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38;
Object.defineProperty(exports, "__esModule", { value: true });
exports.privatecaCertificateCertificateDescriptionX509DescriptionKeyUsageBaseKeyUsageToHclTerraform = exports.privatecaCertificateCertificateDescriptionX509DescriptionKeyUsageBaseKeyUsageToTerraform = exports.PrivatecaCertificateCertificateDescriptionX509DescriptionCaOptionsList = exports.PrivatecaCertificateCertificateDescriptionX509DescriptionCaOptionsOutputReference = exports.privatecaCertificateCertificateDescriptionX509DescriptionCaOptionsToHclTerraform = exports.privatecaCertificateCertificateDescriptionX509DescriptionCaOptionsToTerraform = exports.PrivatecaCertificateCertificateDescriptionX509DescriptionAdditionalExtensionsList = exports.PrivatecaCertificateCertificateDescriptionX509DescriptionAdditionalExtensionsOutputReference = exports.privatecaCertificateCertificateDescriptionX509DescriptionAdditionalExtensionsToHclTerraform = exports.privatecaCertificateCertificateDescriptionX509DescriptionAdditionalExtensionsToTerraform = exports.PrivatecaCertificateCertificateDescriptionX509DescriptionAdditionalExtensionsObjectIdList = exports.PrivatecaCertificateCertificateDescriptionX509DescriptionAdditionalExtensionsObjectIdOutputReference = exports.privatecaCertificateCertificateDescriptionX509DescriptionAdditionalExtensionsObjectIdToHclTerraform = exports.privatecaCertificateCertificateDescriptionX509DescriptionAdditionalExtensionsObjectIdToTerraform = exports.PrivatecaCertificateCertificateDescriptionSubjectKeyIdList = exports.PrivatecaCertificateCertificateDescriptionSubjectKeyIdOutputReference = exports.privatecaCertificateCertificateDescriptionSubjectKeyIdToHclTerraform = exports.privatecaCertificateCertificateDescriptionSubjectKeyIdToTerraform = exports.PrivatecaCertificateCertificateDescriptionSubjectDescriptionList = exports.PrivatecaCertificateCertificateDescriptionSubjectDescriptionOutputReference = exports.privatecaCertificateCertificateDescriptionSubjectDescriptionToHclTerraform = exports.privatecaCertificateCertificateDescriptionSubjectDescriptionToTerraform = exports.PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameList = exports.PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameOutputReference = exports.privatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameToHclTerraform = exports.privatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameToTerraform = exports.PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansList = exports.PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansOutputReference = exports.privatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansToHclTerraform = exports.privatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansToTerraform = exports.PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansObectIdList = exports.PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansObectIdOutputReference = exports.privatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansObectIdToHclTerraform = exports.privatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansObectIdToTerraform = exports.PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectList = exports.PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectOutputReference = exports.privatecaCertificateCertificateDescriptionSubjectDescriptionSubjectToHclTerraform = exports.privatecaCertificateCertificateDescriptionSubjectDescriptionSubjectToTerraform = exports.PrivatecaCertificateCertificateDescriptionPublicKeyList = exports.PrivatecaCertificateCertificateDescriptionPublicKeyOutputReference = exports.privatecaCertificateCertificateDescriptionPublicKeyToHclTerraform = exports.privatecaCertificateCertificateDescriptionPublicKeyToTerraform = exports.PrivatecaCertificateCertificateDescriptionCertFingerprintList = exports.PrivatecaCertificateCertificateDescriptionCertFingerprintOutputReference = exports.privatecaCertificateCertificateDescriptionCertFingerprintToHclTerraform = exports.privatecaCertificateCertificateDescriptionCertFingerprintToTerraform = exports.PrivatecaCertificateCertificateDescriptionAuthorityKeyIdList = exports.PrivatecaCertificateCertificateDescriptionAuthorityKeyIdOutputReference = exports.privatecaCertificateCertificateDescriptionAuthorityKeyIdToHclTerraform = exports.privatecaCertificateCertificateDescriptionAuthorityKeyIdToTerraform = void 0;
exports.privatecaCertificateConfigX509ConfigAdditionalExtensionsObjectIdToTerraform = exports.PrivatecaCertificateConfigSubjectKeyIdOutputReference = exports.privatecaCertificateConfigSubjectKeyIdToHclTerraform = exports.privatecaCertificateConfigSubjectKeyIdToTerraform = exports.PrivatecaCertificateConfigSubjectConfigOutputReference = exports.privatecaCertificateConfigSubjectConfigToHclTerraform = exports.privatecaCertificateConfigSubjectConfigToTerraform = exports.PrivatecaCertificateConfigSubjectConfigSubjectAltNameOutputReference = exports.privatecaCertificateConfigSubjectConfigSubjectAltNameToHclTerraform = exports.privatecaCertificateConfigSubjectConfigSubjectAltNameToTerraform = exports.PrivatecaCertificateConfigSubjectConfigSubjectOutputReference = exports.privatecaCertificateConfigSubjectConfigSubjectToHclTerraform = exports.privatecaCertificateConfigSubjectConfigSubjectToTerraform = exports.PrivatecaCertificateConfigPublicKeyOutputReference = exports.privatecaCertificateConfigPublicKeyToHclTerraform = exports.privatecaCertificateConfigPublicKeyToTerraform = exports.PrivatecaCertificateRevocationDetailsList = exports.PrivatecaCertificateRevocationDetailsOutputReference = exports.privatecaCertificateRevocationDetailsToHclTerraform = exports.privatecaCertificateRevocationDetailsToTerraform = exports.PrivatecaCertificateCertificateDescriptionList = exports.PrivatecaCertificateCertificateDescriptionOutputReference = exports.privatecaCertificateCertificateDescriptionToHclTerraform = exports.privatecaCertificateCertificateDescriptionToTerraform = exports.PrivatecaCertificateCertificateDescriptionX509DescriptionList = exports.PrivatecaCertificateCertificateDescriptionX509DescriptionOutputReference = exports.privatecaCertificateCertificateDescriptionX509DescriptionToHclTerraform = exports.privatecaCertificateCertificateDescriptionX509DescriptionToTerraform = exports.PrivatecaCertificateCertificateDescriptionX509DescriptionPolicyIdsList = exports.PrivatecaCertificateCertificateDescriptionX509DescriptionPolicyIdsOutputReference = exports.privatecaCertificateCertificateDescriptionX509DescriptionPolicyIdsToHclTerraform = exports.privatecaCertificateCertificateDescriptionX509DescriptionPolicyIdsToTerraform = exports.PrivatecaCertificateCertificateDescriptionX509DescriptionNameConstraintsList = exports.PrivatecaCertificateCertificateDescriptionX509DescriptionNameConstraintsOutputReference = exports.privatecaCertificateCertificateDescriptionX509DescriptionNameConstraintsToHclTerraform = exports.privatecaCertificateCertificateDescriptionX509DescriptionNameConstraintsToTerraform = exports.PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageList = exports.PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageOutputReference = exports.privatecaCertificateCertificateDescriptionX509DescriptionKeyUsageToHclTerraform = exports.privatecaCertificateCertificateDescriptionX509DescriptionKeyUsageToTerraform = exports.PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageUnknownExtendedKeyUsagesList = exports.PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageUnknownExtendedKeyUsagesOutputReference = exports.privatecaCertificateCertificateDescriptionX509DescriptionKeyUsageUnknownExtendedKeyUsagesToHclTerraform = exports.privatecaCertificateCertificateDescriptionX509DescriptionKeyUsageUnknownExtendedKeyUsagesToTerraform = exports.PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageExtendedKeyUsageList = exports.PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageExtendedKeyUsageOutputReference = exports.privatecaCertificateCertificateDescriptionX509DescriptionKeyUsageExtendedKeyUsageToHclTerraform = exports.privatecaCertificateCertificateDescriptionX509DescriptionKeyUsageExtendedKeyUsageToTerraform = exports.PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageBaseKeyUsageList = exports.PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageBaseKeyUsageOutputReference = void 0;
exports.PrivatecaCertificate = exports.PrivatecaCertificateTimeoutsOutputReference = exports.privatecaCertificateTimeoutsToHclTerraform = exports.privatecaCertificateTimeoutsToTerraform = exports.PrivatecaCertificateConfigAOutputReference = exports.privatecaCertificateConfigAToHclTerraform = exports.privatecaCertificateConfigAToTerraform = exports.PrivatecaCertificateConfigX509ConfigOutputReference = exports.privatecaCertificateConfigX509ConfigToHclTerraform = exports.privatecaCertificateConfigX509ConfigToTerraform = exports.PrivatecaCertificateConfigX509ConfigPolicyIdsList = exports.PrivatecaCertificateConfigX509ConfigPolicyIdsOutputReference = exports.privatecaCertificateConfigX509ConfigPolicyIdsToHclTerraform = exports.privatecaCertificateConfigX509ConfigPolicyIdsToTerraform = exports.PrivatecaCertificateConfigX509ConfigNameConstraintsOutputReference = exports.privatecaCertificateConfigX509ConfigNameConstraintsToHclTerraform = exports.privatecaCertificateConfigX509ConfigNameConstraintsToTerraform = exports.PrivatecaCertificateConfigX509ConfigKeyUsageOutputReference = exports.privatecaCertificateConfigX509ConfigKeyUsageToHclTerraform = exports.privatecaCertificateConfigX509ConfigKeyUsageToTerraform = exports.PrivatecaCertificateConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesList = exports.PrivatecaCertificateConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesOutputReference = exports.privatecaCertificateConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesToHclTerraform = exports.privatecaCertificateConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesToTerraform = exports.PrivatecaCertificateConfigX509ConfigKeyUsageExtendedKeyUsageOutputReference = exports.privatecaCertificateConfigX509ConfigKeyUsageExtendedKeyUsageToHclTerraform = exports.privatecaCertificateConfigX509ConfigKeyUsageExtendedKeyUsageToTerraform = exports.PrivatecaCertificateConfigX509ConfigKeyUsageBaseKeyUsageOutputReference = exports.privatecaCertificateConfigX509ConfigKeyUsageBaseKeyUsageToHclTerraform = exports.privatecaCertificateConfigX509ConfigKeyUsageBaseKeyUsageToTerraform = exports.PrivatecaCertificateConfigX509ConfigCaOptionsOutputReference = exports.privatecaCertificateConfigX509ConfigCaOptionsToHclTerraform = exports.privatecaCertificateConfigX509ConfigCaOptionsToTerraform = exports.PrivatecaCertificateConfigX509ConfigAdditionalExtensionsList = exports.PrivatecaCertificateConfigX509ConfigAdditionalExtensionsOutputReference = exports.privatecaCertificateConfigX509ConfigAdditionalExtensionsToHclTerraform = exports.privatecaCertificateConfigX509ConfigAdditionalExtensionsToTerraform = exports.PrivatecaCertificateConfigX509ConfigAdditionalExtensionsObjectIdOutputReference = exports.privatecaCertificateConfigX509ConfigAdditionalExtensionsObjectIdToHclTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function privatecaCertificateCertificateDescriptionAuthorityKeyIdToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.privatecaCertificateCertificateDescriptionAuthorityKeyIdToTerraform = privatecaCertificateCertificateDescriptionAuthorityKeyIdToTerraform;
function privatecaCertificateCertificateDescriptionAuthorityKeyIdToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.privatecaCertificateCertificateDescriptionAuthorityKeyIdToHclTerraform = privatecaCertificateCertificateDescriptionAuthorityKeyIdToHclTerraform;
class PrivatecaCertificateCertificateDescriptionAuthorityKeyIdOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // key_id - computed: true, optional: false, required: false
    get keyId() {
        return this.getStringAttribute('key_id');
    }
}
exports.PrivatecaCertificateCertificateDescriptionAuthorityKeyIdOutputReference = PrivatecaCertificateCertificateDescriptionAuthorityKeyIdOutputReference;
_a = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateCertificateDescriptionAuthorityKeyIdOutputReference[_a] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateCertificateDescriptionAuthorityKeyIdOutputReference", version: "14.13.1" };
class PrivatecaCertificateCertificateDescriptionAuthorityKeyIdList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new PrivatecaCertificateCertificateDescriptionAuthorityKeyIdOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.PrivatecaCertificateCertificateDescriptionAuthorityKeyIdList = PrivatecaCertificateCertificateDescriptionAuthorityKeyIdList;
_b = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateCertificateDescriptionAuthorityKeyIdList[_b] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateCertificateDescriptionAuthorityKeyIdList", version: "14.13.1" };
function privatecaCertificateCertificateDescriptionCertFingerprintToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.privatecaCertificateCertificateDescriptionCertFingerprintToTerraform = privatecaCertificateCertificateDescriptionCertFingerprintToTerraform;
function privatecaCertificateCertificateDescriptionCertFingerprintToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.privatecaCertificateCertificateDescriptionCertFingerprintToHclTerraform = privatecaCertificateCertificateDescriptionCertFingerprintToHclTerraform;
class PrivatecaCertificateCertificateDescriptionCertFingerprintOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // sha256_hash - computed: true, optional: false, required: false
    get sha256Hash() {
        return this.getStringAttribute('sha256_hash');
    }
}
exports.PrivatecaCertificateCertificateDescriptionCertFingerprintOutputReference = PrivatecaCertificateCertificateDescriptionCertFingerprintOutputReference;
_c = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateCertificateDescriptionCertFingerprintOutputReference[_c] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateCertificateDescriptionCertFingerprintOutputReference", version: "14.13.1" };
class PrivatecaCertificateCertificateDescriptionCertFingerprintList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new PrivatecaCertificateCertificateDescriptionCertFingerprintOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.PrivatecaCertificateCertificateDescriptionCertFingerprintList = PrivatecaCertificateCertificateDescriptionCertFingerprintList;
_d = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateCertificateDescriptionCertFingerprintList[_d] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateCertificateDescriptionCertFingerprintList", version: "14.13.1" };
function privatecaCertificateCertificateDescriptionPublicKeyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.privatecaCertificateCertificateDescriptionPublicKeyToTerraform = privatecaCertificateCertificateDescriptionPublicKeyToTerraform;
function privatecaCertificateCertificateDescriptionPublicKeyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.privatecaCertificateCertificateDescriptionPublicKeyToHclTerraform = privatecaCertificateCertificateDescriptionPublicKeyToHclTerraform;
class PrivatecaCertificateCertificateDescriptionPublicKeyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // format - computed: true, optional: false, required: false
    get format() {
        return this.getStringAttribute('format');
    }
    // key - computed: true, optional: false, required: false
    get key() {
        return this.getStringAttribute('key');
    }
}
exports.PrivatecaCertificateCertificateDescriptionPublicKeyOutputReference = PrivatecaCertificateCertificateDescriptionPublicKeyOutputReference;
_e = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateCertificateDescriptionPublicKeyOutputReference[_e] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateCertificateDescriptionPublicKeyOutputReference", version: "14.13.1" };
class PrivatecaCertificateCertificateDescriptionPublicKeyList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new PrivatecaCertificateCertificateDescriptionPublicKeyOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.PrivatecaCertificateCertificateDescriptionPublicKeyList = PrivatecaCertificateCertificateDescriptionPublicKeyList;
_f = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateCertificateDescriptionPublicKeyList[_f] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateCertificateDescriptionPublicKeyList", version: "14.13.1" };
function privatecaCertificateCertificateDescriptionSubjectDescriptionSubjectToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.privatecaCertificateCertificateDescriptionSubjectDescriptionSubjectToTerraform = privatecaCertificateCertificateDescriptionSubjectDescriptionSubjectToTerraform;
function privatecaCertificateCertificateDescriptionSubjectDescriptionSubjectToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.privatecaCertificateCertificateDescriptionSubjectDescriptionSubjectToHclTerraform = privatecaCertificateCertificateDescriptionSubjectDescriptionSubjectToHclTerraform;
class PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // common_name - computed: true, optional: false, required: false
    get commonName() {
        return this.getStringAttribute('common_name');
    }
    // country_code - computed: true, optional: false, required: false
    get countryCode() {
        return this.getStringAttribute('country_code');
    }
    // locality - computed: true, optional: false, required: false
    get locality() {
        return this.getStringAttribute('locality');
    }
    // organization - computed: true, optional: false, required: false
    get organization() {
        return this.getStringAttribute('organization');
    }
    // organizational_unit - computed: true, optional: false, required: false
    get organizationalUnit() {
        return this.getStringAttribute('organizational_unit');
    }
    // postal_code - computed: true, optional: false, required: false
    get postalCode() {
        return this.getStringAttribute('postal_code');
    }
    // province - computed: true, optional: false, required: false
    get province() {
        return this.getStringAttribute('province');
    }
    // street_address - computed: true, optional: false, required: false
    get streetAddress() {
        return this.getStringAttribute('street_address');
    }
}
exports.PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectOutputReference = PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectOutputReference;
_g = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectOutputReference[_g] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectOutputReference", version: "14.13.1" };
class PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectList = PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectList;
_h = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectList[_h] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectList", version: "14.13.1" };
function privatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansObectIdToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.privatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansObectIdToTerraform = privatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansObectIdToTerraform;
function privatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansObectIdToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.privatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansObectIdToHclTerraform = privatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansObectIdToHclTerraform;
class PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansObectIdOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // object_id_path - computed: true, optional: false, required: false
    get objectIdPath() {
        return this.getNumberListAttribute('object_id_path');
    }
}
exports.PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansObectIdOutputReference = PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansObectIdOutputReference;
_j = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansObectIdOutputReference[_j] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansObectIdOutputReference", version: "14.13.1" };
class PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansObectIdList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansObectIdOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansObectIdList = PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansObectIdList;
_k = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansObectIdList[_k] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansObectIdList", version: "14.13.1" };
function privatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.privatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansToTerraform = privatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansToTerraform;
function privatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.privatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansToHclTerraform = privatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansToHclTerraform;
class PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // obect_id - computed: true, optional: false, required: false
        this._obectId = new PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansObectIdList(this, "obect_id", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // critical - computed: true, optional: false, required: false
    get critical() {
        return this.getBooleanAttribute('critical');
    }
    get obectId() {
        return this._obectId;
    }
    // value - computed: true, optional: false, required: false
    get value() {
        return this.getStringAttribute('value');
    }
}
exports.PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansOutputReference = PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansOutputReference;
_l = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansOutputReference[_l] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansOutputReference", version: "14.13.1" };
class PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansList = PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansList;
_m = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansList[_m] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansList", version: "14.13.1" };
function privatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.privatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameToTerraform = privatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameToTerraform;
function privatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.privatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameToHclTerraform = privatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameToHclTerraform;
class PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // custom_sans - computed: true, optional: false, required: false
        this._customSans = new PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameCustomSansList(this, "custom_sans", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    get customSans() {
        return this._customSans;
    }
    // dns_names - computed: true, optional: false, required: false
    get dnsNames() {
        return this.getListAttribute('dns_names');
    }
    // email_addresses - computed: true, optional: false, required: false
    get emailAddresses() {
        return this.getListAttribute('email_addresses');
    }
    // ip_addresses - computed: true, optional: false, required: false
    get ipAddresses() {
        return this.getListAttribute('ip_addresses');
    }
    // uris - computed: true, optional: false, required: false
    get uris() {
        return this.getListAttribute('uris');
    }
}
exports.PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameOutputReference = PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameOutputReference;
_o = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameOutputReference[_o] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameOutputReference", version: "14.13.1" };
class PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameList = PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameList;
_p = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameList[_p] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameList", version: "14.13.1" };
function privatecaCertificateCertificateDescriptionSubjectDescriptionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.privatecaCertificateCertificateDescriptionSubjectDescriptionToTerraform = privatecaCertificateCertificateDescriptionSubjectDescriptionToTerraform;
function privatecaCertificateCertificateDescriptionSubjectDescriptionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.privatecaCertificateCertificateDescriptionSubjectDescriptionToHclTerraform = privatecaCertificateCertificateDescriptionSubjectDescriptionToHclTerraform;
class PrivatecaCertificateCertificateDescriptionSubjectDescriptionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // subject - computed: true, optional: false, required: false
        this._subject = new PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectList(this, "subject", false);
        // subject_alt_name - computed: true, optional: false, required: false
        this._subjectAltName = new PrivatecaCertificateCertificateDescriptionSubjectDescriptionSubjectAltNameList(this, "subject_alt_name", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // hex_serial_number - computed: true, optional: false, required: false
    get hexSerialNumber() {
        return this.getStringAttribute('hex_serial_number');
    }
    // lifetime - computed: true, optional: false, required: false
    get lifetime() {
        return this.getStringAttribute('lifetime');
    }
    // not_after_time - computed: true, optional: false, required: false
    get notAfterTime() {
        return this.getStringAttribute('not_after_time');
    }
    // not_before_time - computed: true, optional: false, required: false
    get notBeforeTime() {
        return this.getStringAttribute('not_before_time');
    }
    get subject() {
        return this._subject;
    }
    get subjectAltName() {
        return this._subjectAltName;
    }
}
exports.PrivatecaCertificateCertificateDescriptionSubjectDescriptionOutputReference = PrivatecaCertificateCertificateDescriptionSubjectDescriptionOutputReference;
_q = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateCertificateDescriptionSubjectDescriptionOutputReference[_q] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateCertificateDescriptionSubjectDescriptionOutputReference", version: "14.13.1" };
class PrivatecaCertificateCertificateDescriptionSubjectDescriptionList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new PrivatecaCertificateCertificateDescriptionSubjectDescriptionOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.PrivatecaCertificateCertificateDescriptionSubjectDescriptionList = PrivatecaCertificateCertificateDescriptionSubjectDescriptionList;
_r = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateCertificateDescriptionSubjectDescriptionList[_r] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateCertificateDescriptionSubjectDescriptionList", version: "14.13.1" };
function privatecaCertificateCertificateDescriptionSubjectKeyIdToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.privatecaCertificateCertificateDescriptionSubjectKeyIdToTerraform = privatecaCertificateCertificateDescriptionSubjectKeyIdToTerraform;
function privatecaCertificateCertificateDescriptionSubjectKeyIdToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.privatecaCertificateCertificateDescriptionSubjectKeyIdToHclTerraform = privatecaCertificateCertificateDescriptionSubjectKeyIdToHclTerraform;
class PrivatecaCertificateCertificateDescriptionSubjectKeyIdOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // key_id - computed: true, optional: false, required: false
    get keyId() {
        return this.getStringAttribute('key_id');
    }
}
exports.PrivatecaCertificateCertificateDescriptionSubjectKeyIdOutputReference = PrivatecaCertificateCertificateDescriptionSubjectKeyIdOutputReference;
_s = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateCertificateDescriptionSubjectKeyIdOutputReference[_s] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateCertificateDescriptionSubjectKeyIdOutputReference", version: "14.13.1" };
class PrivatecaCertificateCertificateDescriptionSubjectKeyIdList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new PrivatecaCertificateCertificateDescriptionSubjectKeyIdOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.PrivatecaCertificateCertificateDescriptionSubjectKeyIdList = PrivatecaCertificateCertificateDescriptionSubjectKeyIdList;
_t = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateCertificateDescriptionSubjectKeyIdList[_t] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateCertificateDescriptionSubjectKeyIdList", version: "14.13.1" };
function privatecaCertificateCertificateDescriptionX509DescriptionAdditionalExtensionsObjectIdToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.privatecaCertificateCertificateDescriptionX509DescriptionAdditionalExtensionsObjectIdToTerraform = privatecaCertificateCertificateDescriptionX509DescriptionAdditionalExtensionsObjectIdToTerraform;
function privatecaCertificateCertificateDescriptionX509DescriptionAdditionalExtensionsObjectIdToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.privatecaCertificateCertificateDescriptionX509DescriptionAdditionalExtensionsObjectIdToHclTerraform = privatecaCertificateCertificateDescriptionX509DescriptionAdditionalExtensionsObjectIdToHclTerraform;
class PrivatecaCertificateCertificateDescriptionX509DescriptionAdditionalExtensionsObjectIdOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // object_id_path - computed: true, optional: false, required: false
    get objectIdPath() {
        return this.getNumberListAttribute('object_id_path');
    }
}
exports.PrivatecaCertificateCertificateDescriptionX509DescriptionAdditionalExtensionsObjectIdOutputReference = PrivatecaCertificateCertificateDescriptionX509DescriptionAdditionalExtensionsObjectIdOutputReference;
_u = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateCertificateDescriptionX509DescriptionAdditionalExtensionsObjectIdOutputReference[_u] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateCertificateDescriptionX509DescriptionAdditionalExtensionsObjectIdOutputReference", version: "14.13.1" };
class PrivatecaCertificateCertificateDescriptionX509DescriptionAdditionalExtensionsObjectIdList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new PrivatecaCertificateCertificateDescriptionX509DescriptionAdditionalExtensionsObjectIdOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.PrivatecaCertificateCertificateDescriptionX509DescriptionAdditionalExtensionsObjectIdList = PrivatecaCertificateCertificateDescriptionX509DescriptionAdditionalExtensionsObjectIdList;
_v = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateCertificateDescriptionX509DescriptionAdditionalExtensionsObjectIdList[_v] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateCertificateDescriptionX509DescriptionAdditionalExtensionsObjectIdList", version: "14.13.1" };
function privatecaCertificateCertificateDescriptionX509DescriptionAdditionalExtensionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.privatecaCertificateCertificateDescriptionX509DescriptionAdditionalExtensionsToTerraform = privatecaCertificateCertificateDescriptionX509DescriptionAdditionalExtensionsToTerraform;
function privatecaCertificateCertificateDescriptionX509DescriptionAdditionalExtensionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.privatecaCertificateCertificateDescriptionX509DescriptionAdditionalExtensionsToHclTerraform = privatecaCertificateCertificateDescriptionX509DescriptionAdditionalExtensionsToHclTerraform;
class PrivatecaCertificateCertificateDescriptionX509DescriptionAdditionalExtensionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // object_id - computed: true, optional: false, required: false
        this._objectId = new PrivatecaCertificateCertificateDescriptionX509DescriptionAdditionalExtensionsObjectIdList(this, "object_id", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // critical - computed: true, optional: false, required: false
    get critical() {
        return this.getBooleanAttribute('critical');
    }
    get objectId() {
        return this._objectId;
    }
    // value - computed: true, optional: false, required: false
    get value() {
        return this.getStringAttribute('value');
    }
}
exports.PrivatecaCertificateCertificateDescriptionX509DescriptionAdditionalExtensionsOutputReference = PrivatecaCertificateCertificateDescriptionX509DescriptionAdditionalExtensionsOutputReference;
_w = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateCertificateDescriptionX509DescriptionAdditionalExtensionsOutputReference[_w] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateCertificateDescriptionX509DescriptionAdditionalExtensionsOutputReference", version: "14.13.1" };
class PrivatecaCertificateCertificateDescriptionX509DescriptionAdditionalExtensionsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new PrivatecaCertificateCertificateDescriptionX509DescriptionAdditionalExtensionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.PrivatecaCertificateCertificateDescriptionX509DescriptionAdditionalExtensionsList = PrivatecaCertificateCertificateDescriptionX509DescriptionAdditionalExtensionsList;
_x = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateCertificateDescriptionX509DescriptionAdditionalExtensionsList[_x] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateCertificateDescriptionX509DescriptionAdditionalExtensionsList", version: "14.13.1" };
function privatecaCertificateCertificateDescriptionX509DescriptionCaOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.privatecaCertificateCertificateDescriptionX509DescriptionCaOptionsToTerraform = privatecaCertificateCertificateDescriptionX509DescriptionCaOptionsToTerraform;
function privatecaCertificateCertificateDescriptionX509DescriptionCaOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.privatecaCertificateCertificateDescriptionX509DescriptionCaOptionsToHclTerraform = privatecaCertificateCertificateDescriptionX509DescriptionCaOptionsToHclTerraform;
class PrivatecaCertificateCertificateDescriptionX509DescriptionCaOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // is_ca - computed: true, optional: false, required: false
    get isCa() {
        return this.getBooleanAttribute('is_ca');
    }
    // max_issuer_path_length - computed: true, optional: false, required: false
    get maxIssuerPathLength() {
        return this.getNumberAttribute('max_issuer_path_length');
    }
}
exports.PrivatecaCertificateCertificateDescriptionX509DescriptionCaOptionsOutputReference = PrivatecaCertificateCertificateDescriptionX509DescriptionCaOptionsOutputReference;
_y = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateCertificateDescriptionX509DescriptionCaOptionsOutputReference[_y] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateCertificateDescriptionX509DescriptionCaOptionsOutputReference", version: "14.13.1" };
class PrivatecaCertificateCertificateDescriptionX509DescriptionCaOptionsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new PrivatecaCertificateCertificateDescriptionX509DescriptionCaOptionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.PrivatecaCertificateCertificateDescriptionX509DescriptionCaOptionsList = PrivatecaCertificateCertificateDescriptionX509DescriptionCaOptionsList;
_z = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateCertificateDescriptionX509DescriptionCaOptionsList[_z] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateCertificateDescriptionX509DescriptionCaOptionsList", version: "14.13.1" };
function privatecaCertificateCertificateDescriptionX509DescriptionKeyUsageBaseKeyUsageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.privatecaCertificateCertificateDescriptionX509DescriptionKeyUsageBaseKeyUsageToTerraform = privatecaCertificateCertificateDescriptionX509DescriptionKeyUsageBaseKeyUsageToTerraform;
function privatecaCertificateCertificateDescriptionX509DescriptionKeyUsageBaseKeyUsageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.privatecaCertificateCertificateDescriptionX509DescriptionKeyUsageBaseKeyUsageToHclTerraform = privatecaCertificateCertificateDescriptionX509DescriptionKeyUsageBaseKeyUsageToHclTerraform;
class PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageBaseKeyUsageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // cert_sign - computed: true, optional: false, required: false
    get certSign() {
        return this.getBooleanAttribute('cert_sign');
    }
    // content_commitment - computed: true, optional: false, required: false
    get contentCommitment() {
        return this.getBooleanAttribute('content_commitment');
    }
    // crl_sign - computed: true, optional: false, required: false
    get crlSign() {
        return this.getBooleanAttribute('crl_sign');
    }
    // data_encipherment - computed: true, optional: false, required: false
    get dataEncipherment() {
        return this.getBooleanAttribute('data_encipherment');
    }
    // decipher_only - computed: true, optional: false, required: false
    get decipherOnly() {
        return this.getBooleanAttribute('decipher_only');
    }
    // digital_signature - computed: true, optional: false, required: false
    get digitalSignature() {
        return this.getBooleanAttribute('digital_signature');
    }
    // encipher_only - computed: true, optional: false, required: false
    get encipherOnly() {
        return this.getBooleanAttribute('encipher_only');
    }
    // key_agreement - computed: true, optional: false, required: false
    get keyAgreement() {
        return this.getBooleanAttribute('key_agreement');
    }
    // key_encipherment - computed: true, optional: false, required: false
    get keyEncipherment() {
        return this.getBooleanAttribute('key_encipherment');
    }
}
exports.PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageBaseKeyUsageOutputReference = PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageBaseKeyUsageOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageBaseKeyUsageOutputReference[_0] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageBaseKeyUsageOutputReference", version: "14.13.1" };
class PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageBaseKeyUsageList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageBaseKeyUsageOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageBaseKeyUsageList = PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageBaseKeyUsageList;
_1 = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageBaseKeyUsageList[_1] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageBaseKeyUsageList", version: "14.13.1" };
function privatecaCertificateCertificateDescriptionX509DescriptionKeyUsageExtendedKeyUsageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.privatecaCertificateCertificateDescriptionX509DescriptionKeyUsageExtendedKeyUsageToTerraform = privatecaCertificateCertificateDescriptionX509DescriptionKeyUsageExtendedKeyUsageToTerraform;
function privatecaCertificateCertificateDescriptionX509DescriptionKeyUsageExtendedKeyUsageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.privatecaCertificateCertificateDescriptionX509DescriptionKeyUsageExtendedKeyUsageToHclTerraform = privatecaCertificateCertificateDescriptionX509DescriptionKeyUsageExtendedKeyUsageToHclTerraform;
class PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageExtendedKeyUsageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // client_auth - computed: true, optional: false, required: false
    get clientAuth() {
        return this.getBooleanAttribute('client_auth');
    }
    // code_signing - computed: true, optional: false, required: false
    get codeSigning() {
        return this.getBooleanAttribute('code_signing');
    }
    // email_protection - computed: true, optional: false, required: false
    get emailProtection() {
        return this.getBooleanAttribute('email_protection');
    }
    // ocsp_signing - computed: true, optional: false, required: false
    get ocspSigning() {
        return this.getBooleanAttribute('ocsp_signing');
    }
    // server_auth - computed: true, optional: false, required: false
    get serverAuth() {
        return this.getBooleanAttribute('server_auth');
    }
    // time_stamping - computed: true, optional: false, required: false
    get timeStamping() {
        return this.getBooleanAttribute('time_stamping');
    }
}
exports.PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageExtendedKeyUsageOutputReference = PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageExtendedKeyUsageOutputReference;
_2 = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageExtendedKeyUsageOutputReference[_2] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageExtendedKeyUsageOutputReference", version: "14.13.1" };
class PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageExtendedKeyUsageList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageExtendedKeyUsageOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageExtendedKeyUsageList = PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageExtendedKeyUsageList;
_3 = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageExtendedKeyUsageList[_3] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageExtendedKeyUsageList", version: "14.13.1" };
function privatecaCertificateCertificateDescriptionX509DescriptionKeyUsageUnknownExtendedKeyUsagesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.privatecaCertificateCertificateDescriptionX509DescriptionKeyUsageUnknownExtendedKeyUsagesToTerraform = privatecaCertificateCertificateDescriptionX509DescriptionKeyUsageUnknownExtendedKeyUsagesToTerraform;
function privatecaCertificateCertificateDescriptionX509DescriptionKeyUsageUnknownExtendedKeyUsagesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.privatecaCertificateCertificateDescriptionX509DescriptionKeyUsageUnknownExtendedKeyUsagesToHclTerraform = privatecaCertificateCertificateDescriptionX509DescriptionKeyUsageUnknownExtendedKeyUsagesToHclTerraform;
class PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageUnknownExtendedKeyUsagesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // object_id_path - computed: true, optional: false, required: false
    get objectIdPath() {
        return this.getNumberListAttribute('object_id_path');
    }
}
exports.PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageUnknownExtendedKeyUsagesOutputReference = PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageUnknownExtendedKeyUsagesOutputReference;
_4 = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageUnknownExtendedKeyUsagesOutputReference[_4] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageUnknownExtendedKeyUsagesOutputReference", version: "14.13.1" };
class PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageUnknownExtendedKeyUsagesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageUnknownExtendedKeyUsagesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageUnknownExtendedKeyUsagesList = PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageUnknownExtendedKeyUsagesList;
_5 = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageUnknownExtendedKeyUsagesList[_5] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageUnknownExtendedKeyUsagesList", version: "14.13.1" };
function privatecaCertificateCertificateDescriptionX509DescriptionKeyUsageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.privatecaCertificateCertificateDescriptionX509DescriptionKeyUsageToTerraform = privatecaCertificateCertificateDescriptionX509DescriptionKeyUsageToTerraform;
function privatecaCertificateCertificateDescriptionX509DescriptionKeyUsageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.privatecaCertificateCertificateDescriptionX509DescriptionKeyUsageToHclTerraform = privatecaCertificateCertificateDescriptionX509DescriptionKeyUsageToHclTerraform;
class PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // base_key_usage - computed: true, optional: false, required: false
        this._baseKeyUsage = new PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageBaseKeyUsageList(this, "base_key_usage", false);
        // extended_key_usage - computed: true, optional: false, required: false
        this._extendedKeyUsage = new PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageExtendedKeyUsageList(this, "extended_key_usage", false);
        // unknown_extended_key_usages - computed: true, optional: false, required: false
        this._unknownExtendedKeyUsages = new PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageUnknownExtendedKeyUsagesList(this, "unknown_extended_key_usages", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    get baseKeyUsage() {
        return this._baseKeyUsage;
    }
    get extendedKeyUsage() {
        return this._extendedKeyUsage;
    }
    get unknownExtendedKeyUsages() {
        return this._unknownExtendedKeyUsages;
    }
}
exports.PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageOutputReference = PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageOutputReference;
_6 = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageOutputReference[_6] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageOutputReference", version: "14.13.1" };
class PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageList = PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageList;
_7 = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageList[_7] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageList", version: "14.13.1" };
function privatecaCertificateCertificateDescriptionX509DescriptionNameConstraintsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.privatecaCertificateCertificateDescriptionX509DescriptionNameConstraintsToTerraform = privatecaCertificateCertificateDescriptionX509DescriptionNameConstraintsToTerraform;
function privatecaCertificateCertificateDescriptionX509DescriptionNameConstraintsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.privatecaCertificateCertificateDescriptionX509DescriptionNameConstraintsToHclTerraform = privatecaCertificateCertificateDescriptionX509DescriptionNameConstraintsToHclTerraform;
class PrivatecaCertificateCertificateDescriptionX509DescriptionNameConstraintsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // critical - computed: true, optional: false, required: false
    get critical() {
        return this.getBooleanAttribute('critical');
    }
    // excluded_dns_names - computed: true, optional: false, required: false
    get excludedDnsNames() {
        return this.getListAttribute('excluded_dns_names');
    }
    // excluded_email_addresses - computed: true, optional: false, required: false
    get excludedEmailAddresses() {
        return this.getListAttribute('excluded_email_addresses');
    }
    // excluded_ip_ranges - computed: true, optional: false, required: false
    get excludedIpRanges() {
        return this.getListAttribute('excluded_ip_ranges');
    }
    // excluded_uris - computed: true, optional: false, required: false
    get excludedUris() {
        return this.getListAttribute('excluded_uris');
    }
    // permitted_dns_names - computed: true, optional: false, required: false
    get permittedDnsNames() {
        return this.getListAttribute('permitted_dns_names');
    }
    // permitted_email_addresses - computed: true, optional: false, required: false
    get permittedEmailAddresses() {
        return this.getListAttribute('permitted_email_addresses');
    }
    // permitted_ip_ranges - computed: true, optional: false, required: false
    get permittedIpRanges() {
        return this.getListAttribute('permitted_ip_ranges');
    }
    // permitted_uris - computed: true, optional: false, required: false
    get permittedUris() {
        return this.getListAttribute('permitted_uris');
    }
}
exports.PrivatecaCertificateCertificateDescriptionX509DescriptionNameConstraintsOutputReference = PrivatecaCertificateCertificateDescriptionX509DescriptionNameConstraintsOutputReference;
_8 = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateCertificateDescriptionX509DescriptionNameConstraintsOutputReference[_8] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateCertificateDescriptionX509DescriptionNameConstraintsOutputReference", version: "14.13.1" };
class PrivatecaCertificateCertificateDescriptionX509DescriptionNameConstraintsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new PrivatecaCertificateCertificateDescriptionX509DescriptionNameConstraintsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.PrivatecaCertificateCertificateDescriptionX509DescriptionNameConstraintsList = PrivatecaCertificateCertificateDescriptionX509DescriptionNameConstraintsList;
_9 = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateCertificateDescriptionX509DescriptionNameConstraintsList[_9] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateCertificateDescriptionX509DescriptionNameConstraintsList", version: "14.13.1" };
function privatecaCertificateCertificateDescriptionX509DescriptionPolicyIdsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.privatecaCertificateCertificateDescriptionX509DescriptionPolicyIdsToTerraform = privatecaCertificateCertificateDescriptionX509DescriptionPolicyIdsToTerraform;
function privatecaCertificateCertificateDescriptionX509DescriptionPolicyIdsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.privatecaCertificateCertificateDescriptionX509DescriptionPolicyIdsToHclTerraform = privatecaCertificateCertificateDescriptionX509DescriptionPolicyIdsToHclTerraform;
class PrivatecaCertificateCertificateDescriptionX509DescriptionPolicyIdsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // object_id_path - computed: true, optional: false, required: false
    get objectIdPath() {
        return this.getNumberListAttribute('object_id_path');
    }
}
exports.PrivatecaCertificateCertificateDescriptionX509DescriptionPolicyIdsOutputReference = PrivatecaCertificateCertificateDescriptionX509DescriptionPolicyIdsOutputReference;
_10 = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateCertificateDescriptionX509DescriptionPolicyIdsOutputReference[_10] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateCertificateDescriptionX509DescriptionPolicyIdsOutputReference", version: "14.13.1" };
class PrivatecaCertificateCertificateDescriptionX509DescriptionPolicyIdsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new PrivatecaCertificateCertificateDescriptionX509DescriptionPolicyIdsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.PrivatecaCertificateCertificateDescriptionX509DescriptionPolicyIdsList = PrivatecaCertificateCertificateDescriptionX509DescriptionPolicyIdsList;
_11 = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateCertificateDescriptionX509DescriptionPolicyIdsList[_11] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateCertificateDescriptionX509DescriptionPolicyIdsList", version: "14.13.1" };
function privatecaCertificateCertificateDescriptionX509DescriptionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.privatecaCertificateCertificateDescriptionX509DescriptionToTerraform = privatecaCertificateCertificateDescriptionX509DescriptionToTerraform;
function privatecaCertificateCertificateDescriptionX509DescriptionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.privatecaCertificateCertificateDescriptionX509DescriptionToHclTerraform = privatecaCertificateCertificateDescriptionX509DescriptionToHclTerraform;
class PrivatecaCertificateCertificateDescriptionX509DescriptionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // additional_extensions - computed: true, optional: false, required: false
        this._additionalExtensions = new PrivatecaCertificateCertificateDescriptionX509DescriptionAdditionalExtensionsList(this, "additional_extensions", false);
        // ca_options - computed: true, optional: false, required: false
        this._caOptions = new PrivatecaCertificateCertificateDescriptionX509DescriptionCaOptionsList(this, "ca_options", false);
        // key_usage - computed: true, optional: false, required: false
        this._keyUsage = new PrivatecaCertificateCertificateDescriptionX509DescriptionKeyUsageList(this, "key_usage", false);
        // name_constraints - computed: true, optional: false, required: false
        this._nameConstraints = new PrivatecaCertificateCertificateDescriptionX509DescriptionNameConstraintsList(this, "name_constraints", false);
        // policy_ids - computed: true, optional: false, required: false
        this._policyIds = new PrivatecaCertificateCertificateDescriptionX509DescriptionPolicyIdsList(this, "policy_ids", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    get additionalExtensions() {
        return this._additionalExtensions;
    }
    // aia_ocsp_servers - computed: true, optional: false, required: false
    get aiaOcspServers() {
        return this.getListAttribute('aia_ocsp_servers');
    }
    get caOptions() {
        return this._caOptions;
    }
    get keyUsage() {
        return this._keyUsage;
    }
    get nameConstraints() {
        return this._nameConstraints;
    }
    get policyIds() {
        return this._policyIds;
    }
}
exports.PrivatecaCertificateCertificateDescriptionX509DescriptionOutputReference = PrivatecaCertificateCertificateDescriptionX509DescriptionOutputReference;
_12 = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateCertificateDescriptionX509DescriptionOutputReference[_12] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateCertificateDescriptionX509DescriptionOutputReference", version: "14.13.1" };
class PrivatecaCertificateCertificateDescriptionX509DescriptionList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new PrivatecaCertificateCertificateDescriptionX509DescriptionOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.PrivatecaCertificateCertificateDescriptionX509DescriptionList = PrivatecaCertificateCertificateDescriptionX509DescriptionList;
_13 = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateCertificateDescriptionX509DescriptionList[_13] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateCertificateDescriptionX509DescriptionList", version: "14.13.1" };
function privatecaCertificateCertificateDescriptionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.privatecaCertificateCertificateDescriptionToTerraform = privatecaCertificateCertificateDescriptionToTerraform;
function privatecaCertificateCertificateDescriptionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.privatecaCertificateCertificateDescriptionToHclTerraform = privatecaCertificateCertificateDescriptionToHclTerraform;
class PrivatecaCertificateCertificateDescriptionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // authority_key_id - computed: true, optional: false, required: false
        this._authorityKeyId = new PrivatecaCertificateCertificateDescriptionAuthorityKeyIdList(this, "authority_key_id", false);
        // cert_fingerprint - computed: true, optional: false, required: false
        this._certFingerprint = new PrivatecaCertificateCertificateDescriptionCertFingerprintList(this, "cert_fingerprint", false);
        // public_key - computed: true, optional: false, required: false
        this._publicKey = new PrivatecaCertificateCertificateDescriptionPublicKeyList(this, "public_key", false);
        // subject_description - computed: true, optional: false, required: false
        this._subjectDescription = new PrivatecaCertificateCertificateDescriptionSubjectDescriptionList(this, "subject_description", false);
        // subject_key_id - computed: true, optional: false, required: false
        this._subjectKeyId = new PrivatecaCertificateCertificateDescriptionSubjectKeyIdList(this, "subject_key_id", false);
        // x509_description - computed: true, optional: false, required: false
        this._x509Description = new PrivatecaCertificateCertificateDescriptionX509DescriptionList(this, "x509_description", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // aia_issuing_certificate_urls - computed: true, optional: false, required: false
    get aiaIssuingCertificateUrls() {
        return this.getListAttribute('aia_issuing_certificate_urls');
    }
    get authorityKeyId() {
        return this._authorityKeyId;
    }
    get certFingerprint() {
        return this._certFingerprint;
    }
    // crl_distribution_points - computed: true, optional: false, required: false
    get crlDistributionPoints() {
        return this.getListAttribute('crl_distribution_points');
    }
    get publicKey() {
        return this._publicKey;
    }
    get subjectDescription() {
        return this._subjectDescription;
    }
    get subjectKeyId() {
        return this._subjectKeyId;
    }
    get x509Description() {
        return this._x509Description;
    }
}
exports.PrivatecaCertificateCertificateDescriptionOutputReference = PrivatecaCertificateCertificateDescriptionOutputReference;
_14 = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateCertificateDescriptionOutputReference[_14] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateCertificateDescriptionOutputReference", version: "14.13.1" };
class PrivatecaCertificateCertificateDescriptionList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new PrivatecaCertificateCertificateDescriptionOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.PrivatecaCertificateCertificateDescriptionList = PrivatecaCertificateCertificateDescriptionList;
_15 = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateCertificateDescriptionList[_15] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateCertificateDescriptionList", version: "14.13.1" };
function privatecaCertificateRevocationDetailsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.privatecaCertificateRevocationDetailsToTerraform = privatecaCertificateRevocationDetailsToTerraform;
function privatecaCertificateRevocationDetailsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.privatecaCertificateRevocationDetailsToHclTerraform = privatecaCertificateRevocationDetailsToHclTerraform;
class PrivatecaCertificateRevocationDetailsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // revocation_state - computed: true, optional: false, required: false
    get revocationState() {
        return this.getStringAttribute('revocation_state');
    }
    // revocation_time - computed: true, optional: false, required: false
    get revocationTime() {
        return this.getStringAttribute('revocation_time');
    }
}
exports.PrivatecaCertificateRevocationDetailsOutputReference = PrivatecaCertificateRevocationDetailsOutputReference;
_16 = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateRevocationDetailsOutputReference[_16] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateRevocationDetailsOutputReference", version: "14.13.1" };
class PrivatecaCertificateRevocationDetailsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new PrivatecaCertificateRevocationDetailsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.PrivatecaCertificateRevocationDetailsList = PrivatecaCertificateRevocationDetailsList;
_17 = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateRevocationDetailsList[_17] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateRevocationDetailsList", version: "14.13.1" };
function privatecaCertificateConfigPublicKeyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        format: cdktf.stringToTerraform(struct.format),
        key: cdktf.stringToTerraform(struct.key),
    };
}
exports.privatecaCertificateConfigPublicKeyToTerraform = privatecaCertificateConfigPublicKeyToTerraform;
function privatecaCertificateConfigPublicKeyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        format: {
            value: cdktf.stringToHclTerraform(struct.format),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        key: {
            value: cdktf.stringToHclTerraform(struct.key),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.privatecaCertificateConfigPublicKeyToHclTerraform = privatecaCertificateConfigPublicKeyToHclTerraform;
class PrivatecaCertificateConfigPublicKeyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._format !== undefined) {
            hasAnyValues = true;
            internalValueResult.format = this._format;
        }
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._format = undefined;
            this._key = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._format = value.format;
            this._key = value.key;
        }
    }
    get format() {
        return this.getStringAttribute('format');
    }
    set format(value) {
        this._format = value;
    }
    // Temporarily expose input value. Use with caution.
    get formatInput() {
        return this._format;
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    resetKey() {
        this._key = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
}
exports.PrivatecaCertificateConfigPublicKeyOutputReference = PrivatecaCertificateConfigPublicKeyOutputReference;
_18 = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateConfigPublicKeyOutputReference[_18] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateConfigPublicKeyOutputReference", version: "14.13.1" };
function privatecaCertificateConfigSubjectConfigSubjectToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        common_name: cdktf.stringToTerraform(struct.commonName),
        country_code: cdktf.stringToTerraform(struct.countryCode),
        locality: cdktf.stringToTerraform(struct.locality),
        organization: cdktf.stringToTerraform(struct.organization),
        organizational_unit: cdktf.stringToTerraform(struct.organizationalUnit),
        postal_code: cdktf.stringToTerraform(struct.postalCode),
        province: cdktf.stringToTerraform(struct.province),
        street_address: cdktf.stringToTerraform(struct.streetAddress),
    };
}
exports.privatecaCertificateConfigSubjectConfigSubjectToTerraform = privatecaCertificateConfigSubjectConfigSubjectToTerraform;
function privatecaCertificateConfigSubjectConfigSubjectToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        common_name: {
            value: cdktf.stringToHclTerraform(struct.commonName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        country_code: {
            value: cdktf.stringToHclTerraform(struct.countryCode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        locality: {
            value: cdktf.stringToHclTerraform(struct.locality),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        organization: {
            value: cdktf.stringToHclTerraform(struct.organization),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        organizational_unit: {
            value: cdktf.stringToHclTerraform(struct.organizationalUnit),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        postal_code: {
            value: cdktf.stringToHclTerraform(struct.postalCode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        province: {
            value: cdktf.stringToHclTerraform(struct.province),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        street_address: {
            value: cdktf.stringToHclTerraform(struct.streetAddress),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.privatecaCertificateConfigSubjectConfigSubjectToHclTerraform = privatecaCertificateConfigSubjectConfigSubjectToHclTerraform;
class PrivatecaCertificateConfigSubjectConfigSubjectOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._commonName !== undefined) {
            hasAnyValues = true;
            internalValueResult.commonName = this._commonName;
        }
        if (this._countryCode !== undefined) {
            hasAnyValues = true;
            internalValueResult.countryCode = this._countryCode;
        }
        if (this._locality !== undefined) {
            hasAnyValues = true;
            internalValueResult.locality = this._locality;
        }
        if (this._organization !== undefined) {
            hasAnyValues = true;
            internalValueResult.organization = this._organization;
        }
        if (this._organizationalUnit !== undefined) {
            hasAnyValues = true;
            internalValueResult.organizationalUnit = this._organizationalUnit;
        }
        if (this._postalCode !== undefined) {
            hasAnyValues = true;
            internalValueResult.postalCode = this._postalCode;
        }
        if (this._province !== undefined) {
            hasAnyValues = true;
            internalValueResult.province = this._province;
        }
        if (this._streetAddress !== undefined) {
            hasAnyValues = true;
            internalValueResult.streetAddress = this._streetAddress;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._commonName = undefined;
            this._countryCode = undefined;
            this._locality = undefined;
            this._organization = undefined;
            this._organizationalUnit = undefined;
            this._postalCode = undefined;
            this._province = undefined;
            this._streetAddress = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._commonName = value.commonName;
            this._countryCode = value.countryCode;
            this._locality = value.locality;
            this._organization = value.organization;
            this._organizationalUnit = value.organizationalUnit;
            this._postalCode = value.postalCode;
            this._province = value.province;
            this._streetAddress = value.streetAddress;
        }
    }
    get commonName() {
        return this.getStringAttribute('common_name');
    }
    set commonName(value) {
        this._commonName = value;
    }
    // Temporarily expose input value. Use with caution.
    get commonNameInput() {
        return this._commonName;
    }
    get countryCode() {
        return this.getStringAttribute('country_code');
    }
    set countryCode(value) {
        this._countryCode = value;
    }
    resetCountryCode() {
        this._countryCode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get countryCodeInput() {
        return this._countryCode;
    }
    get locality() {
        return this.getStringAttribute('locality');
    }
    set locality(value) {
        this._locality = value;
    }
    resetLocality() {
        this._locality = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get localityInput() {
        return this._locality;
    }
    get organization() {
        return this.getStringAttribute('organization');
    }
    set organization(value) {
        this._organization = value;
    }
    // Temporarily expose input value. Use with caution.
    get organizationInput() {
        return this._organization;
    }
    get organizationalUnit() {
        return this.getStringAttribute('organizational_unit');
    }
    set organizationalUnit(value) {
        this._organizationalUnit = value;
    }
    resetOrganizationalUnit() {
        this._organizationalUnit = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get organizationalUnitInput() {
        return this._organizationalUnit;
    }
    get postalCode() {
        return this.getStringAttribute('postal_code');
    }
    set postalCode(value) {
        this._postalCode = value;
    }
    resetPostalCode() {
        this._postalCode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get postalCodeInput() {
        return this._postalCode;
    }
    get province() {
        return this.getStringAttribute('province');
    }
    set province(value) {
        this._province = value;
    }
    resetProvince() {
        this._province = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get provinceInput() {
        return this._province;
    }
    get streetAddress() {
        return this.getStringAttribute('street_address');
    }
    set streetAddress(value) {
        this._streetAddress = value;
    }
    resetStreetAddress() {
        this._streetAddress = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get streetAddressInput() {
        return this._streetAddress;
    }
}
exports.PrivatecaCertificateConfigSubjectConfigSubjectOutputReference = PrivatecaCertificateConfigSubjectConfigSubjectOutputReference;
_19 = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateConfigSubjectConfigSubjectOutputReference[_19] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateConfigSubjectConfigSubjectOutputReference", version: "14.13.1" };
function privatecaCertificateConfigSubjectConfigSubjectAltNameToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        dns_names: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.dnsNames),
        email_addresses: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.emailAddresses),
        ip_addresses: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.ipAddresses),
        uris: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.uris),
    };
}
exports.privatecaCertificateConfigSubjectConfigSubjectAltNameToTerraform = privatecaCertificateConfigSubjectConfigSubjectAltNameToTerraform;
function privatecaCertificateConfigSubjectConfigSubjectAltNameToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        dns_names: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.dnsNames),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        email_addresses: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.emailAddresses),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        ip_addresses: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.ipAddresses),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        uris: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.uris),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.privatecaCertificateConfigSubjectConfigSubjectAltNameToHclTerraform = privatecaCertificateConfigSubjectConfigSubjectAltNameToHclTerraform;
class PrivatecaCertificateConfigSubjectConfigSubjectAltNameOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dnsNames !== undefined) {
            hasAnyValues = true;
            internalValueResult.dnsNames = this._dnsNames;
        }
        if (this._emailAddresses !== undefined) {
            hasAnyValues = true;
            internalValueResult.emailAddresses = this._emailAddresses;
        }
        if (this._ipAddresses !== undefined) {
            hasAnyValues = true;
            internalValueResult.ipAddresses = this._ipAddresses;
        }
        if (this._uris !== undefined) {
            hasAnyValues = true;
            internalValueResult.uris = this._uris;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._dnsNames = undefined;
            this._emailAddresses = undefined;
            this._ipAddresses = undefined;
            this._uris = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._dnsNames = value.dnsNames;
            this._emailAddresses = value.emailAddresses;
            this._ipAddresses = value.ipAddresses;
            this._uris = value.uris;
        }
    }
    get dnsNames() {
        return this.getListAttribute('dns_names');
    }
    set dnsNames(value) {
        this._dnsNames = value;
    }
    resetDnsNames() {
        this._dnsNames = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dnsNamesInput() {
        return this._dnsNames;
    }
    get emailAddresses() {
        return this.getListAttribute('email_addresses');
    }
    set emailAddresses(value) {
        this._emailAddresses = value;
    }
    resetEmailAddresses() {
        this._emailAddresses = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get emailAddressesInput() {
        return this._emailAddresses;
    }
    get ipAddresses() {
        return this.getListAttribute('ip_addresses');
    }
    set ipAddresses(value) {
        this._ipAddresses = value;
    }
    resetIpAddresses() {
        this._ipAddresses = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ipAddressesInput() {
        return this._ipAddresses;
    }
    get uris() {
        return this.getListAttribute('uris');
    }
    set uris(value) {
        this._uris = value;
    }
    resetUris() {
        this._uris = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get urisInput() {
        return this._uris;
    }
}
exports.PrivatecaCertificateConfigSubjectConfigSubjectAltNameOutputReference = PrivatecaCertificateConfigSubjectConfigSubjectAltNameOutputReference;
_20 = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateConfigSubjectConfigSubjectAltNameOutputReference[_20] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateConfigSubjectConfigSubjectAltNameOutputReference", version: "14.13.1" };
function privatecaCertificateConfigSubjectConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        subject: privatecaCertificateConfigSubjectConfigSubjectToTerraform(struct.subject),
        subject_alt_name: privatecaCertificateConfigSubjectConfigSubjectAltNameToTerraform(struct.subjectAltName),
    };
}
exports.privatecaCertificateConfigSubjectConfigToTerraform = privatecaCertificateConfigSubjectConfigToTerraform;
function privatecaCertificateConfigSubjectConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        subject: {
            value: privatecaCertificateConfigSubjectConfigSubjectToHclTerraform(struct.subject),
            isBlock: true,
            type: "list",
            storageClassType: "PrivatecaCertificateConfigSubjectConfigSubjectList",
        },
        subject_alt_name: {
            value: privatecaCertificateConfigSubjectConfigSubjectAltNameToHclTerraform(struct.subjectAltName),
            isBlock: true,
            type: "list",
            storageClassType: "PrivatecaCertificateConfigSubjectConfigSubjectAltNameList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.privatecaCertificateConfigSubjectConfigToHclTerraform = privatecaCertificateConfigSubjectConfigToHclTerraform;
class PrivatecaCertificateConfigSubjectConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // subject - computed: false, optional: false, required: true
        this._subject = new PrivatecaCertificateConfigSubjectConfigSubjectOutputReference(this, "subject");
        // subject_alt_name - computed: false, optional: true, required: false
        this._subjectAltName = new PrivatecaCertificateConfigSubjectConfigSubjectAltNameOutputReference(this, "subject_alt_name");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._subject?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.subject = this._subject?.internalValue;
        }
        if (this._subjectAltName?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.subjectAltName = this._subjectAltName?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._subject.internalValue = undefined;
            this._subjectAltName.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._subject.internalValue = value.subject;
            this._subjectAltName.internalValue = value.subjectAltName;
        }
    }
    get subject() {
        return this._subject;
    }
    putSubject(value) {
        this._subject.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get subjectInput() {
        return this._subject.internalValue;
    }
    get subjectAltName() {
        return this._subjectAltName;
    }
    putSubjectAltName(value) {
        this._subjectAltName.internalValue = value;
    }
    resetSubjectAltName() {
        this._subjectAltName.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subjectAltNameInput() {
        return this._subjectAltName.internalValue;
    }
}
exports.PrivatecaCertificateConfigSubjectConfigOutputReference = PrivatecaCertificateConfigSubjectConfigOutputReference;
_21 = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateConfigSubjectConfigOutputReference[_21] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateConfigSubjectConfigOutputReference", version: "14.13.1" };
function privatecaCertificateConfigSubjectKeyIdToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        key_id: cdktf.stringToTerraform(struct.keyId),
    };
}
exports.privatecaCertificateConfigSubjectKeyIdToTerraform = privatecaCertificateConfigSubjectKeyIdToTerraform;
function privatecaCertificateConfigSubjectKeyIdToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        key_id: {
            value: cdktf.stringToHclTerraform(struct.keyId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.privatecaCertificateConfigSubjectKeyIdToHclTerraform = privatecaCertificateConfigSubjectKeyIdToHclTerraform;
class PrivatecaCertificateConfigSubjectKeyIdOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._keyId !== undefined) {
            hasAnyValues = true;
            internalValueResult.keyId = this._keyId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._keyId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._keyId = value.keyId;
        }
    }
    get keyId() {
        return this.getStringAttribute('key_id');
    }
    set keyId(value) {
        this._keyId = value;
    }
    resetKeyId() {
        this._keyId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyIdInput() {
        return this._keyId;
    }
}
exports.PrivatecaCertificateConfigSubjectKeyIdOutputReference = PrivatecaCertificateConfigSubjectKeyIdOutputReference;
_22 = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateConfigSubjectKeyIdOutputReference[_22] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateConfigSubjectKeyIdOutputReference", version: "14.13.1" };
function privatecaCertificateConfigX509ConfigAdditionalExtensionsObjectIdToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        object_id_path: cdktf.listMapper(cdktf.numberToTerraform, false)(struct.objectIdPath),
    };
}
exports.privatecaCertificateConfigX509ConfigAdditionalExtensionsObjectIdToTerraform = privatecaCertificateConfigX509ConfigAdditionalExtensionsObjectIdToTerraform;
function privatecaCertificateConfigX509ConfigAdditionalExtensionsObjectIdToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        object_id_path: {
            value: cdktf.listMapperHcl(cdktf.numberToHclTerraform, false)(struct.objectIdPath),
            isBlock: false,
            type: "list",
            storageClassType: "numberList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.privatecaCertificateConfigX509ConfigAdditionalExtensionsObjectIdToHclTerraform = privatecaCertificateConfigX509ConfigAdditionalExtensionsObjectIdToHclTerraform;
class PrivatecaCertificateConfigX509ConfigAdditionalExtensionsObjectIdOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._objectIdPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.objectIdPath = this._objectIdPath;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._objectIdPath = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._objectIdPath = value.objectIdPath;
        }
    }
    get objectIdPath() {
        return this.getNumberListAttribute('object_id_path');
    }
    set objectIdPath(value) {
        this._objectIdPath = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectIdPathInput() {
        return this._objectIdPath;
    }
}
exports.PrivatecaCertificateConfigX509ConfigAdditionalExtensionsObjectIdOutputReference = PrivatecaCertificateConfigX509ConfigAdditionalExtensionsObjectIdOutputReference;
_23 = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateConfigX509ConfigAdditionalExtensionsObjectIdOutputReference[_23] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateConfigX509ConfigAdditionalExtensionsObjectIdOutputReference", version: "14.13.1" };
function privatecaCertificateConfigX509ConfigAdditionalExtensionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        critical: cdktf.booleanToTerraform(struct.critical),
        value: cdktf.stringToTerraform(struct.value),
        object_id: privatecaCertificateConfigX509ConfigAdditionalExtensionsObjectIdToTerraform(struct.objectId),
    };
}
exports.privatecaCertificateConfigX509ConfigAdditionalExtensionsToTerraform = privatecaCertificateConfigX509ConfigAdditionalExtensionsToTerraform;
function privatecaCertificateConfigX509ConfigAdditionalExtensionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        critical: {
            value: cdktf.booleanToHclTerraform(struct.critical),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        object_id: {
            value: privatecaCertificateConfigX509ConfigAdditionalExtensionsObjectIdToHclTerraform(struct.objectId),
            isBlock: true,
            type: "list",
            storageClassType: "PrivatecaCertificateConfigX509ConfigAdditionalExtensionsObjectIdList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.privatecaCertificateConfigX509ConfigAdditionalExtensionsToHclTerraform = privatecaCertificateConfigX509ConfigAdditionalExtensionsToHclTerraform;
class PrivatecaCertificateConfigX509ConfigAdditionalExtensionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // object_id - computed: false, optional: false, required: true
        this._objectId = new PrivatecaCertificateConfigX509ConfigAdditionalExtensionsObjectIdOutputReference(this, "object_id");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._critical !== undefined) {
            hasAnyValues = true;
            internalValueResult.critical = this._critical;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        if (this._objectId?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.objectId = this._objectId?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._critical = undefined;
            this._value = undefined;
            this._objectId.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._critical = value.critical;
            this._value = value.value;
            this._objectId.internalValue = value.objectId;
        }
    }
    get critical() {
        return this.getBooleanAttribute('critical');
    }
    set critical(value) {
        this._critical = value;
    }
    // Temporarily expose input value. Use with caution.
    get criticalInput() {
        return this._critical;
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
    get objectId() {
        return this._objectId;
    }
    putObjectId(value) {
        this._objectId.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectIdInput() {
        return this._objectId.internalValue;
    }
}
exports.PrivatecaCertificateConfigX509ConfigAdditionalExtensionsOutputReference = PrivatecaCertificateConfigX509ConfigAdditionalExtensionsOutputReference;
_24 = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateConfigX509ConfigAdditionalExtensionsOutputReference[_24] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateConfigX509ConfigAdditionalExtensionsOutputReference", version: "14.13.1" };
class PrivatecaCertificateConfigX509ConfigAdditionalExtensionsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new PrivatecaCertificateConfigX509ConfigAdditionalExtensionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.PrivatecaCertificateConfigX509ConfigAdditionalExtensionsList = PrivatecaCertificateConfigX509ConfigAdditionalExtensionsList;
_25 = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateConfigX509ConfigAdditionalExtensionsList[_25] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateConfigX509ConfigAdditionalExtensionsList", version: "14.13.1" };
function privatecaCertificateConfigX509ConfigCaOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        is_ca: cdktf.booleanToTerraform(struct.isCa),
        max_issuer_path_length: cdktf.numberToTerraform(struct.maxIssuerPathLength),
        non_ca: cdktf.booleanToTerraform(struct.nonCa),
        zero_max_issuer_path_length: cdktf.booleanToTerraform(struct.zeroMaxIssuerPathLength),
    };
}
exports.privatecaCertificateConfigX509ConfigCaOptionsToTerraform = privatecaCertificateConfigX509ConfigCaOptionsToTerraform;
function privatecaCertificateConfigX509ConfigCaOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        is_ca: {
            value: cdktf.booleanToHclTerraform(struct.isCa),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        max_issuer_path_length: {
            value: cdktf.numberToHclTerraform(struct.maxIssuerPathLength),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        non_ca: {
            value: cdktf.booleanToHclTerraform(struct.nonCa),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        zero_max_issuer_path_length: {
            value: cdktf.booleanToHclTerraform(struct.zeroMaxIssuerPathLength),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.privatecaCertificateConfigX509ConfigCaOptionsToHclTerraform = privatecaCertificateConfigX509ConfigCaOptionsToHclTerraform;
class PrivatecaCertificateConfigX509ConfigCaOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._isCa !== undefined) {
            hasAnyValues = true;
            internalValueResult.isCa = this._isCa;
        }
        if (this._maxIssuerPathLength !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxIssuerPathLength = this._maxIssuerPathLength;
        }
        if (this._nonCa !== undefined) {
            hasAnyValues = true;
            internalValueResult.nonCa = this._nonCa;
        }
        if (this._zeroMaxIssuerPathLength !== undefined) {
            hasAnyValues = true;
            internalValueResult.zeroMaxIssuerPathLength = this._zeroMaxIssuerPathLength;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._isCa = undefined;
            this._maxIssuerPathLength = undefined;
            this._nonCa = undefined;
            this._zeroMaxIssuerPathLength = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._isCa = value.isCa;
            this._maxIssuerPathLength = value.maxIssuerPathLength;
            this._nonCa = value.nonCa;
            this._zeroMaxIssuerPathLength = value.zeroMaxIssuerPathLength;
        }
    }
    get isCa() {
        return this.getBooleanAttribute('is_ca');
    }
    set isCa(value) {
        this._isCa = value;
    }
    resetIsCa() {
        this._isCa = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get isCaInput() {
        return this._isCa;
    }
    get maxIssuerPathLength() {
        return this.getNumberAttribute('max_issuer_path_length');
    }
    set maxIssuerPathLength(value) {
        this._maxIssuerPathLength = value;
    }
    resetMaxIssuerPathLength() {
        this._maxIssuerPathLength = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxIssuerPathLengthInput() {
        return this._maxIssuerPathLength;
    }
    get nonCa() {
        return this.getBooleanAttribute('non_ca');
    }
    set nonCa(value) {
        this._nonCa = value;
    }
    resetNonCa() {
        this._nonCa = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nonCaInput() {
        return this._nonCa;
    }
    get zeroMaxIssuerPathLength() {
        return this.getBooleanAttribute('zero_max_issuer_path_length');
    }
    set zeroMaxIssuerPathLength(value) {
        this._zeroMaxIssuerPathLength = value;
    }
    resetZeroMaxIssuerPathLength() {
        this._zeroMaxIssuerPathLength = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get zeroMaxIssuerPathLengthInput() {
        return this._zeroMaxIssuerPathLength;
    }
}
exports.PrivatecaCertificateConfigX509ConfigCaOptionsOutputReference = PrivatecaCertificateConfigX509ConfigCaOptionsOutputReference;
_26 = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateConfigX509ConfigCaOptionsOutputReference[_26] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateConfigX509ConfigCaOptionsOutputReference", version: "14.13.1" };
function privatecaCertificateConfigX509ConfigKeyUsageBaseKeyUsageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cert_sign: cdktf.booleanToTerraform(struct.certSign),
        content_commitment: cdktf.booleanToTerraform(struct.contentCommitment),
        crl_sign: cdktf.booleanToTerraform(struct.crlSign),
        data_encipherment: cdktf.booleanToTerraform(struct.dataEncipherment),
        decipher_only: cdktf.booleanToTerraform(struct.decipherOnly),
        digital_signature: cdktf.booleanToTerraform(struct.digitalSignature),
        encipher_only: cdktf.booleanToTerraform(struct.encipherOnly),
        key_agreement: cdktf.booleanToTerraform(struct.keyAgreement),
        key_encipherment: cdktf.booleanToTerraform(struct.keyEncipherment),
    };
}
exports.privatecaCertificateConfigX509ConfigKeyUsageBaseKeyUsageToTerraform = privatecaCertificateConfigX509ConfigKeyUsageBaseKeyUsageToTerraform;
function privatecaCertificateConfigX509ConfigKeyUsageBaseKeyUsageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cert_sign: {
            value: cdktf.booleanToHclTerraform(struct.certSign),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        content_commitment: {
            value: cdktf.booleanToHclTerraform(struct.contentCommitment),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        crl_sign: {
            value: cdktf.booleanToHclTerraform(struct.crlSign),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        data_encipherment: {
            value: cdktf.booleanToHclTerraform(struct.dataEncipherment),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        decipher_only: {
            value: cdktf.booleanToHclTerraform(struct.decipherOnly),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        digital_signature: {
            value: cdktf.booleanToHclTerraform(struct.digitalSignature),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        encipher_only: {
            value: cdktf.booleanToHclTerraform(struct.encipherOnly),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        key_agreement: {
            value: cdktf.booleanToHclTerraform(struct.keyAgreement),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        key_encipherment: {
            value: cdktf.booleanToHclTerraform(struct.keyEncipherment),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.privatecaCertificateConfigX509ConfigKeyUsageBaseKeyUsageToHclTerraform = privatecaCertificateConfigX509ConfigKeyUsageBaseKeyUsageToHclTerraform;
class PrivatecaCertificateConfigX509ConfigKeyUsageBaseKeyUsageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._certSign !== undefined) {
            hasAnyValues = true;
            internalValueResult.certSign = this._certSign;
        }
        if (this._contentCommitment !== undefined) {
            hasAnyValues = true;
            internalValueResult.contentCommitment = this._contentCommitment;
        }
        if (this._crlSign !== undefined) {
            hasAnyValues = true;
            internalValueResult.crlSign = this._crlSign;
        }
        if (this._dataEncipherment !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataEncipherment = this._dataEncipherment;
        }
        if (this._decipherOnly !== undefined) {
            hasAnyValues = true;
            internalValueResult.decipherOnly = this._decipherOnly;
        }
        if (this._digitalSignature !== undefined) {
            hasAnyValues = true;
            internalValueResult.digitalSignature = this._digitalSignature;
        }
        if (this._encipherOnly !== undefined) {
            hasAnyValues = true;
            internalValueResult.encipherOnly = this._encipherOnly;
        }
        if (this._keyAgreement !== undefined) {
            hasAnyValues = true;
            internalValueResult.keyAgreement = this._keyAgreement;
        }
        if (this._keyEncipherment !== undefined) {
            hasAnyValues = true;
            internalValueResult.keyEncipherment = this._keyEncipherment;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._certSign = undefined;
            this._contentCommitment = undefined;
            this._crlSign = undefined;
            this._dataEncipherment = undefined;
            this._decipherOnly = undefined;
            this._digitalSignature = undefined;
            this._encipherOnly = undefined;
            this._keyAgreement = undefined;
            this._keyEncipherment = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._certSign = value.certSign;
            this._contentCommitment = value.contentCommitment;
            this._crlSign = value.crlSign;
            this._dataEncipherment = value.dataEncipherment;
            this._decipherOnly = value.decipherOnly;
            this._digitalSignature = value.digitalSignature;
            this._encipherOnly = value.encipherOnly;
            this._keyAgreement = value.keyAgreement;
            this._keyEncipherment = value.keyEncipherment;
        }
    }
    get certSign() {
        return this.getBooleanAttribute('cert_sign');
    }
    set certSign(value) {
        this._certSign = value;
    }
    resetCertSign() {
        this._certSign = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get certSignInput() {
        return this._certSign;
    }
    get contentCommitment() {
        return this.getBooleanAttribute('content_commitment');
    }
    set contentCommitment(value) {
        this._contentCommitment = value;
    }
    resetContentCommitment() {
        this._contentCommitment = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get contentCommitmentInput() {
        return this._contentCommitment;
    }
    get crlSign() {
        return this.getBooleanAttribute('crl_sign');
    }
    set crlSign(value) {
        this._crlSign = value;
    }
    resetCrlSign() {
        this._crlSign = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get crlSignInput() {
        return this._crlSign;
    }
    get dataEncipherment() {
        return this.getBooleanAttribute('data_encipherment');
    }
    set dataEncipherment(value) {
        this._dataEncipherment = value;
    }
    resetDataEncipherment() {
        this._dataEncipherment = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataEnciphermentInput() {
        return this._dataEncipherment;
    }
    get decipherOnly() {
        return this.getBooleanAttribute('decipher_only');
    }
    set decipherOnly(value) {
        this._decipherOnly = value;
    }
    resetDecipherOnly() {
        this._decipherOnly = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get decipherOnlyInput() {
        return this._decipherOnly;
    }
    get digitalSignature() {
        return this.getBooleanAttribute('digital_signature');
    }
    set digitalSignature(value) {
        this._digitalSignature = value;
    }
    resetDigitalSignature() {
        this._digitalSignature = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get digitalSignatureInput() {
        return this._digitalSignature;
    }
    get encipherOnly() {
        return this.getBooleanAttribute('encipher_only');
    }
    set encipherOnly(value) {
        this._encipherOnly = value;
    }
    resetEncipherOnly() {
        this._encipherOnly = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encipherOnlyInput() {
        return this._encipherOnly;
    }
    get keyAgreement() {
        return this.getBooleanAttribute('key_agreement');
    }
    set keyAgreement(value) {
        this._keyAgreement = value;
    }
    resetKeyAgreement() {
        this._keyAgreement = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyAgreementInput() {
        return this._keyAgreement;
    }
    get keyEncipherment() {
        return this.getBooleanAttribute('key_encipherment');
    }
    set keyEncipherment(value) {
        this._keyEncipherment = value;
    }
    resetKeyEncipherment() {
        this._keyEncipherment = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyEnciphermentInput() {
        return this._keyEncipherment;
    }
}
exports.PrivatecaCertificateConfigX509ConfigKeyUsageBaseKeyUsageOutputReference = PrivatecaCertificateConfigX509ConfigKeyUsageBaseKeyUsageOutputReference;
_27 = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateConfigX509ConfigKeyUsageBaseKeyUsageOutputReference[_27] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateConfigX509ConfigKeyUsageBaseKeyUsageOutputReference", version: "14.13.1" };
function privatecaCertificateConfigX509ConfigKeyUsageExtendedKeyUsageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        client_auth: cdktf.booleanToTerraform(struct.clientAuth),
        code_signing: cdktf.booleanToTerraform(struct.codeSigning),
        email_protection: cdktf.booleanToTerraform(struct.emailProtection),
        ocsp_signing: cdktf.booleanToTerraform(struct.ocspSigning),
        server_auth: cdktf.booleanToTerraform(struct.serverAuth),
        time_stamping: cdktf.booleanToTerraform(struct.timeStamping),
    };
}
exports.privatecaCertificateConfigX509ConfigKeyUsageExtendedKeyUsageToTerraform = privatecaCertificateConfigX509ConfigKeyUsageExtendedKeyUsageToTerraform;
function privatecaCertificateConfigX509ConfigKeyUsageExtendedKeyUsageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        client_auth: {
            value: cdktf.booleanToHclTerraform(struct.clientAuth),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        code_signing: {
            value: cdktf.booleanToHclTerraform(struct.codeSigning),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        email_protection: {
            value: cdktf.booleanToHclTerraform(struct.emailProtection),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        ocsp_signing: {
            value: cdktf.booleanToHclTerraform(struct.ocspSigning),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        server_auth: {
            value: cdktf.booleanToHclTerraform(struct.serverAuth),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        time_stamping: {
            value: cdktf.booleanToHclTerraform(struct.timeStamping),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.privatecaCertificateConfigX509ConfigKeyUsageExtendedKeyUsageToHclTerraform = privatecaCertificateConfigX509ConfigKeyUsageExtendedKeyUsageToHclTerraform;
class PrivatecaCertificateConfigX509ConfigKeyUsageExtendedKeyUsageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._clientAuth !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientAuth = this._clientAuth;
        }
        if (this._codeSigning !== undefined) {
            hasAnyValues = true;
            internalValueResult.codeSigning = this._codeSigning;
        }
        if (this._emailProtection !== undefined) {
            hasAnyValues = true;
            internalValueResult.emailProtection = this._emailProtection;
        }
        if (this._ocspSigning !== undefined) {
            hasAnyValues = true;
            internalValueResult.ocspSigning = this._ocspSigning;
        }
        if (this._serverAuth !== undefined) {
            hasAnyValues = true;
            internalValueResult.serverAuth = this._serverAuth;
        }
        if (this._timeStamping !== undefined) {
            hasAnyValues = true;
            internalValueResult.timeStamping = this._timeStamping;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._clientAuth = undefined;
            this._codeSigning = undefined;
            this._emailProtection = undefined;
            this._ocspSigning = undefined;
            this._serverAuth = undefined;
            this._timeStamping = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._clientAuth = value.clientAuth;
            this._codeSigning = value.codeSigning;
            this._emailProtection = value.emailProtection;
            this._ocspSigning = value.ocspSigning;
            this._serverAuth = value.serverAuth;
            this._timeStamping = value.timeStamping;
        }
    }
    get clientAuth() {
        return this.getBooleanAttribute('client_auth');
    }
    set clientAuth(value) {
        this._clientAuth = value;
    }
    resetClientAuth() {
        this._clientAuth = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientAuthInput() {
        return this._clientAuth;
    }
    get codeSigning() {
        return this.getBooleanAttribute('code_signing');
    }
    set codeSigning(value) {
        this._codeSigning = value;
    }
    resetCodeSigning() {
        this._codeSigning = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get codeSigningInput() {
        return this._codeSigning;
    }
    get emailProtection() {
        return this.getBooleanAttribute('email_protection');
    }
    set emailProtection(value) {
        this._emailProtection = value;
    }
    resetEmailProtection() {
        this._emailProtection = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get emailProtectionInput() {
        return this._emailProtection;
    }
    get ocspSigning() {
        return this.getBooleanAttribute('ocsp_signing');
    }
    set ocspSigning(value) {
        this._ocspSigning = value;
    }
    resetOcspSigning() {
        this._ocspSigning = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ocspSigningInput() {
        return this._ocspSigning;
    }
    get serverAuth() {
        return this.getBooleanAttribute('server_auth');
    }
    set serverAuth(value) {
        this._serverAuth = value;
    }
    resetServerAuth() {
        this._serverAuth = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serverAuthInput() {
        return this._serverAuth;
    }
    get timeStamping() {
        return this.getBooleanAttribute('time_stamping');
    }
    set timeStamping(value) {
        this._timeStamping = value;
    }
    resetTimeStamping() {
        this._timeStamping = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeStampingInput() {
        return this._timeStamping;
    }
}
exports.PrivatecaCertificateConfigX509ConfigKeyUsageExtendedKeyUsageOutputReference = PrivatecaCertificateConfigX509ConfigKeyUsageExtendedKeyUsageOutputReference;
_28 = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateConfigX509ConfigKeyUsageExtendedKeyUsageOutputReference[_28] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateConfigX509ConfigKeyUsageExtendedKeyUsageOutputReference", version: "14.13.1" };
function privatecaCertificateConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        object_id_path: cdktf.listMapper(cdktf.numberToTerraform, false)(struct.objectIdPath),
    };
}
exports.privatecaCertificateConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesToTerraform = privatecaCertificateConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesToTerraform;
function privatecaCertificateConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        object_id_path: {
            value: cdktf.listMapperHcl(cdktf.numberToHclTerraform, false)(struct.objectIdPath),
            isBlock: false,
            type: "list",
            storageClassType: "numberList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.privatecaCertificateConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesToHclTerraform = privatecaCertificateConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesToHclTerraform;
class PrivatecaCertificateConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._objectIdPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.objectIdPath = this._objectIdPath;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._objectIdPath = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._objectIdPath = value.objectIdPath;
        }
    }
    get objectIdPath() {
        return this.getNumberListAttribute('object_id_path');
    }
    set objectIdPath(value) {
        this._objectIdPath = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectIdPathInput() {
        return this._objectIdPath;
    }
}
exports.PrivatecaCertificateConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesOutputReference = PrivatecaCertificateConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesOutputReference;
_29 = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesOutputReference[_29] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesOutputReference", version: "14.13.1" };
class PrivatecaCertificateConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new PrivatecaCertificateConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.PrivatecaCertificateConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesList = PrivatecaCertificateConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesList;
_30 = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesList[_30] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesList", version: "14.13.1" };
function privatecaCertificateConfigX509ConfigKeyUsageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        base_key_usage: privatecaCertificateConfigX509ConfigKeyUsageBaseKeyUsageToTerraform(struct.baseKeyUsage),
        extended_key_usage: privatecaCertificateConfigX509ConfigKeyUsageExtendedKeyUsageToTerraform(struct.extendedKeyUsage),
        unknown_extended_key_usages: cdktf.listMapper(privatecaCertificateConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesToTerraform, true)(struct.unknownExtendedKeyUsages),
    };
}
exports.privatecaCertificateConfigX509ConfigKeyUsageToTerraform = privatecaCertificateConfigX509ConfigKeyUsageToTerraform;
function privatecaCertificateConfigX509ConfigKeyUsageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        base_key_usage: {
            value: privatecaCertificateConfigX509ConfigKeyUsageBaseKeyUsageToHclTerraform(struct.baseKeyUsage),
            isBlock: true,
            type: "list",
            storageClassType: "PrivatecaCertificateConfigX509ConfigKeyUsageBaseKeyUsageList",
        },
        extended_key_usage: {
            value: privatecaCertificateConfigX509ConfigKeyUsageExtendedKeyUsageToHclTerraform(struct.extendedKeyUsage),
            isBlock: true,
            type: "list",
            storageClassType: "PrivatecaCertificateConfigX509ConfigKeyUsageExtendedKeyUsageList",
        },
        unknown_extended_key_usages: {
            value: cdktf.listMapperHcl(privatecaCertificateConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesToHclTerraform, true)(struct.unknownExtendedKeyUsages),
            isBlock: true,
            type: "list",
            storageClassType: "PrivatecaCertificateConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.privatecaCertificateConfigX509ConfigKeyUsageToHclTerraform = privatecaCertificateConfigX509ConfigKeyUsageToHclTerraform;
class PrivatecaCertificateConfigX509ConfigKeyUsageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // base_key_usage - computed: false, optional: false, required: true
        this._baseKeyUsage = new PrivatecaCertificateConfigX509ConfigKeyUsageBaseKeyUsageOutputReference(this, "base_key_usage");
        // extended_key_usage - computed: false, optional: false, required: true
        this._extendedKeyUsage = new PrivatecaCertificateConfigX509ConfigKeyUsageExtendedKeyUsageOutputReference(this, "extended_key_usage");
        // unknown_extended_key_usages - computed: false, optional: true, required: false
        this._unknownExtendedKeyUsages = new PrivatecaCertificateConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesList(this, "unknown_extended_key_usages", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._baseKeyUsage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.baseKeyUsage = this._baseKeyUsage?.internalValue;
        }
        if (this._extendedKeyUsage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.extendedKeyUsage = this._extendedKeyUsage?.internalValue;
        }
        if (this._unknownExtendedKeyUsages?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.unknownExtendedKeyUsages = this._unknownExtendedKeyUsages?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._baseKeyUsage.internalValue = undefined;
            this._extendedKeyUsage.internalValue = undefined;
            this._unknownExtendedKeyUsages.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._baseKeyUsage.internalValue = value.baseKeyUsage;
            this._extendedKeyUsage.internalValue = value.extendedKeyUsage;
            this._unknownExtendedKeyUsages.internalValue = value.unknownExtendedKeyUsages;
        }
    }
    get baseKeyUsage() {
        return this._baseKeyUsage;
    }
    putBaseKeyUsage(value) {
        this._baseKeyUsage.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get baseKeyUsageInput() {
        return this._baseKeyUsage.internalValue;
    }
    get extendedKeyUsage() {
        return this._extendedKeyUsage;
    }
    putExtendedKeyUsage(value) {
        this._extendedKeyUsage.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get extendedKeyUsageInput() {
        return this._extendedKeyUsage.internalValue;
    }
    get unknownExtendedKeyUsages() {
        return this._unknownExtendedKeyUsages;
    }
    putUnknownExtendedKeyUsages(value) {
        this._unknownExtendedKeyUsages.internalValue = value;
    }
    resetUnknownExtendedKeyUsages() {
        this._unknownExtendedKeyUsages.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get unknownExtendedKeyUsagesInput() {
        return this._unknownExtendedKeyUsages.internalValue;
    }
}
exports.PrivatecaCertificateConfigX509ConfigKeyUsageOutputReference = PrivatecaCertificateConfigX509ConfigKeyUsageOutputReference;
_31 = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateConfigX509ConfigKeyUsageOutputReference[_31] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateConfigX509ConfigKeyUsageOutputReference", version: "14.13.1" };
function privatecaCertificateConfigX509ConfigNameConstraintsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        critical: cdktf.booleanToTerraform(struct.critical),
        excluded_dns_names: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.excludedDnsNames),
        excluded_email_addresses: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.excludedEmailAddresses),
        excluded_ip_ranges: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.excludedIpRanges),
        excluded_uris: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.excludedUris),
        permitted_dns_names: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.permittedDnsNames),
        permitted_email_addresses: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.permittedEmailAddresses),
        permitted_ip_ranges: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.permittedIpRanges),
        permitted_uris: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.permittedUris),
    };
}
exports.privatecaCertificateConfigX509ConfigNameConstraintsToTerraform = privatecaCertificateConfigX509ConfigNameConstraintsToTerraform;
function privatecaCertificateConfigX509ConfigNameConstraintsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        critical: {
            value: cdktf.booleanToHclTerraform(struct.critical),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        excluded_dns_names: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.excludedDnsNames),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        excluded_email_addresses: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.excludedEmailAddresses),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        excluded_ip_ranges: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.excludedIpRanges),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        excluded_uris: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.excludedUris),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        permitted_dns_names: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.permittedDnsNames),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        permitted_email_addresses: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.permittedEmailAddresses),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        permitted_ip_ranges: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.permittedIpRanges),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        permitted_uris: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.permittedUris),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.privatecaCertificateConfigX509ConfigNameConstraintsToHclTerraform = privatecaCertificateConfigX509ConfigNameConstraintsToHclTerraform;
class PrivatecaCertificateConfigX509ConfigNameConstraintsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._critical !== undefined) {
            hasAnyValues = true;
            internalValueResult.critical = this._critical;
        }
        if (this._excludedDnsNames !== undefined) {
            hasAnyValues = true;
            internalValueResult.excludedDnsNames = this._excludedDnsNames;
        }
        if (this._excludedEmailAddresses !== undefined) {
            hasAnyValues = true;
            internalValueResult.excludedEmailAddresses = this._excludedEmailAddresses;
        }
        if (this._excludedIpRanges !== undefined) {
            hasAnyValues = true;
            internalValueResult.excludedIpRanges = this._excludedIpRanges;
        }
        if (this._excludedUris !== undefined) {
            hasAnyValues = true;
            internalValueResult.excludedUris = this._excludedUris;
        }
        if (this._permittedDnsNames !== undefined) {
            hasAnyValues = true;
            internalValueResult.permittedDnsNames = this._permittedDnsNames;
        }
        if (this._permittedEmailAddresses !== undefined) {
            hasAnyValues = true;
            internalValueResult.permittedEmailAddresses = this._permittedEmailAddresses;
        }
        if (this._permittedIpRanges !== undefined) {
            hasAnyValues = true;
            internalValueResult.permittedIpRanges = this._permittedIpRanges;
        }
        if (this._permittedUris !== undefined) {
            hasAnyValues = true;
            internalValueResult.permittedUris = this._permittedUris;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._critical = undefined;
            this._excludedDnsNames = undefined;
            this._excludedEmailAddresses = undefined;
            this._excludedIpRanges = undefined;
            this._excludedUris = undefined;
            this._permittedDnsNames = undefined;
            this._permittedEmailAddresses = undefined;
            this._permittedIpRanges = undefined;
            this._permittedUris = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._critical = value.critical;
            this._excludedDnsNames = value.excludedDnsNames;
            this._excludedEmailAddresses = value.excludedEmailAddresses;
            this._excludedIpRanges = value.excludedIpRanges;
            this._excludedUris = value.excludedUris;
            this._permittedDnsNames = value.permittedDnsNames;
            this._permittedEmailAddresses = value.permittedEmailAddresses;
            this._permittedIpRanges = value.permittedIpRanges;
            this._permittedUris = value.permittedUris;
        }
    }
    get critical() {
        return this.getBooleanAttribute('critical');
    }
    set critical(value) {
        this._critical = value;
    }
    // Temporarily expose input value. Use with caution.
    get criticalInput() {
        return this._critical;
    }
    get excludedDnsNames() {
        return this.getListAttribute('excluded_dns_names');
    }
    set excludedDnsNames(value) {
        this._excludedDnsNames = value;
    }
    resetExcludedDnsNames() {
        this._excludedDnsNames = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludedDnsNamesInput() {
        return this._excludedDnsNames;
    }
    get excludedEmailAddresses() {
        return this.getListAttribute('excluded_email_addresses');
    }
    set excludedEmailAddresses(value) {
        this._excludedEmailAddresses = value;
    }
    resetExcludedEmailAddresses() {
        this._excludedEmailAddresses = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludedEmailAddressesInput() {
        return this._excludedEmailAddresses;
    }
    get excludedIpRanges() {
        return this.getListAttribute('excluded_ip_ranges');
    }
    set excludedIpRanges(value) {
        this._excludedIpRanges = value;
    }
    resetExcludedIpRanges() {
        this._excludedIpRanges = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludedIpRangesInput() {
        return this._excludedIpRanges;
    }
    get excludedUris() {
        return this.getListAttribute('excluded_uris');
    }
    set excludedUris(value) {
        this._excludedUris = value;
    }
    resetExcludedUris() {
        this._excludedUris = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludedUrisInput() {
        return this._excludedUris;
    }
    get permittedDnsNames() {
        return this.getListAttribute('permitted_dns_names');
    }
    set permittedDnsNames(value) {
        this._permittedDnsNames = value;
    }
    resetPermittedDnsNames() {
        this._permittedDnsNames = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get permittedDnsNamesInput() {
        return this._permittedDnsNames;
    }
    get permittedEmailAddresses() {
        return this.getListAttribute('permitted_email_addresses');
    }
    set permittedEmailAddresses(value) {
        this._permittedEmailAddresses = value;
    }
    resetPermittedEmailAddresses() {
        this._permittedEmailAddresses = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get permittedEmailAddressesInput() {
        return this._permittedEmailAddresses;
    }
    get permittedIpRanges() {
        return this.getListAttribute('permitted_ip_ranges');
    }
    set permittedIpRanges(value) {
        this._permittedIpRanges = value;
    }
    resetPermittedIpRanges() {
        this._permittedIpRanges = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get permittedIpRangesInput() {
        return this._permittedIpRanges;
    }
    get permittedUris() {
        return this.getListAttribute('permitted_uris');
    }
    set permittedUris(value) {
        this._permittedUris = value;
    }
    resetPermittedUris() {
        this._permittedUris = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get permittedUrisInput() {
        return this._permittedUris;
    }
}
exports.PrivatecaCertificateConfigX509ConfigNameConstraintsOutputReference = PrivatecaCertificateConfigX509ConfigNameConstraintsOutputReference;
_32 = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateConfigX509ConfigNameConstraintsOutputReference[_32] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateConfigX509ConfigNameConstraintsOutputReference", version: "14.13.1" };
function privatecaCertificateConfigX509ConfigPolicyIdsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        object_id_path: cdktf.listMapper(cdktf.numberToTerraform, false)(struct.objectIdPath),
    };
}
exports.privatecaCertificateConfigX509ConfigPolicyIdsToTerraform = privatecaCertificateConfigX509ConfigPolicyIdsToTerraform;
function privatecaCertificateConfigX509ConfigPolicyIdsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        object_id_path: {
            value: cdktf.listMapperHcl(cdktf.numberToHclTerraform, false)(struct.objectIdPath),
            isBlock: false,
            type: "list",
            storageClassType: "numberList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.privatecaCertificateConfigX509ConfigPolicyIdsToHclTerraform = privatecaCertificateConfigX509ConfigPolicyIdsToHclTerraform;
class PrivatecaCertificateConfigX509ConfigPolicyIdsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._objectIdPath !== undefined) {
            hasAnyValues = true;
            internalValueResult.objectIdPath = this._objectIdPath;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._objectIdPath = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._objectIdPath = value.objectIdPath;
        }
    }
    get objectIdPath() {
        return this.getNumberListAttribute('object_id_path');
    }
    set objectIdPath(value) {
        this._objectIdPath = value;
    }
    // Temporarily expose input value. Use with caution.
    get objectIdPathInput() {
        return this._objectIdPath;
    }
}
exports.PrivatecaCertificateConfigX509ConfigPolicyIdsOutputReference = PrivatecaCertificateConfigX509ConfigPolicyIdsOutputReference;
_33 = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateConfigX509ConfigPolicyIdsOutputReference[_33] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateConfigX509ConfigPolicyIdsOutputReference", version: "14.13.1" };
class PrivatecaCertificateConfigX509ConfigPolicyIdsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new PrivatecaCertificateConfigX509ConfigPolicyIdsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.PrivatecaCertificateConfigX509ConfigPolicyIdsList = PrivatecaCertificateConfigX509ConfigPolicyIdsList;
_34 = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateConfigX509ConfigPolicyIdsList[_34] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateConfigX509ConfigPolicyIdsList", version: "14.13.1" };
function privatecaCertificateConfigX509ConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        aia_ocsp_servers: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.aiaOcspServers),
        additional_extensions: cdktf.listMapper(privatecaCertificateConfigX509ConfigAdditionalExtensionsToTerraform, true)(struct.additionalExtensions),
        ca_options: privatecaCertificateConfigX509ConfigCaOptionsToTerraform(struct.caOptions),
        key_usage: privatecaCertificateConfigX509ConfigKeyUsageToTerraform(struct.keyUsage),
        name_constraints: privatecaCertificateConfigX509ConfigNameConstraintsToTerraform(struct.nameConstraints),
        policy_ids: cdktf.listMapper(privatecaCertificateConfigX509ConfigPolicyIdsToTerraform, true)(struct.policyIds),
    };
}
exports.privatecaCertificateConfigX509ConfigToTerraform = privatecaCertificateConfigX509ConfigToTerraform;
function privatecaCertificateConfigX509ConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        aia_ocsp_servers: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.aiaOcspServers),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        additional_extensions: {
            value: cdktf.listMapperHcl(privatecaCertificateConfigX509ConfigAdditionalExtensionsToHclTerraform, true)(struct.additionalExtensions),
            isBlock: true,
            type: "list",
            storageClassType: "PrivatecaCertificateConfigX509ConfigAdditionalExtensionsList",
        },
        ca_options: {
            value: privatecaCertificateConfigX509ConfigCaOptionsToHclTerraform(struct.caOptions),
            isBlock: true,
            type: "list",
            storageClassType: "PrivatecaCertificateConfigX509ConfigCaOptionsList",
        },
        key_usage: {
            value: privatecaCertificateConfigX509ConfigKeyUsageToHclTerraform(struct.keyUsage),
            isBlock: true,
            type: "list",
            storageClassType: "PrivatecaCertificateConfigX509ConfigKeyUsageList",
        },
        name_constraints: {
            value: privatecaCertificateConfigX509ConfigNameConstraintsToHclTerraform(struct.nameConstraints),
            isBlock: true,
            type: "list",
            storageClassType: "PrivatecaCertificateConfigX509ConfigNameConstraintsList",
        },
        policy_ids: {
            value: cdktf.listMapperHcl(privatecaCertificateConfigX509ConfigPolicyIdsToHclTerraform, true)(struct.policyIds),
            isBlock: true,
            type: "list",
            storageClassType: "PrivatecaCertificateConfigX509ConfigPolicyIdsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.privatecaCertificateConfigX509ConfigToHclTerraform = privatecaCertificateConfigX509ConfigToHclTerraform;
class PrivatecaCertificateConfigX509ConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // additional_extensions - computed: false, optional: true, required: false
        this._additionalExtensions = new PrivatecaCertificateConfigX509ConfigAdditionalExtensionsList(this, "additional_extensions", false);
        // ca_options - computed: false, optional: true, required: false
        this._caOptions = new PrivatecaCertificateConfigX509ConfigCaOptionsOutputReference(this, "ca_options");
        // key_usage - computed: false, optional: false, required: true
        this._keyUsage = new PrivatecaCertificateConfigX509ConfigKeyUsageOutputReference(this, "key_usage");
        // name_constraints - computed: false, optional: true, required: false
        this._nameConstraints = new PrivatecaCertificateConfigX509ConfigNameConstraintsOutputReference(this, "name_constraints");
        // policy_ids - computed: false, optional: true, required: false
        this._policyIds = new PrivatecaCertificateConfigX509ConfigPolicyIdsList(this, "policy_ids", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._aiaOcspServers !== undefined) {
            hasAnyValues = true;
            internalValueResult.aiaOcspServers = this._aiaOcspServers;
        }
        if (this._additionalExtensions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.additionalExtensions = this._additionalExtensions?.internalValue;
        }
        if (this._caOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.caOptions = this._caOptions?.internalValue;
        }
        if (this._keyUsage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.keyUsage = this._keyUsage?.internalValue;
        }
        if (this._nameConstraints?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.nameConstraints = this._nameConstraints?.internalValue;
        }
        if (this._policyIds?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.policyIds = this._policyIds?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._aiaOcspServers = undefined;
            this._additionalExtensions.internalValue = undefined;
            this._caOptions.internalValue = undefined;
            this._keyUsage.internalValue = undefined;
            this._nameConstraints.internalValue = undefined;
            this._policyIds.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._aiaOcspServers = value.aiaOcspServers;
            this._additionalExtensions.internalValue = value.additionalExtensions;
            this._caOptions.internalValue = value.caOptions;
            this._keyUsage.internalValue = value.keyUsage;
            this._nameConstraints.internalValue = value.nameConstraints;
            this._policyIds.internalValue = value.policyIds;
        }
    }
    get aiaOcspServers() {
        return this.getListAttribute('aia_ocsp_servers');
    }
    set aiaOcspServers(value) {
        this._aiaOcspServers = value;
    }
    resetAiaOcspServers() {
        this._aiaOcspServers = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get aiaOcspServersInput() {
        return this._aiaOcspServers;
    }
    get additionalExtensions() {
        return this._additionalExtensions;
    }
    putAdditionalExtensions(value) {
        this._additionalExtensions.internalValue = value;
    }
    resetAdditionalExtensions() {
        this._additionalExtensions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get additionalExtensionsInput() {
        return this._additionalExtensions.internalValue;
    }
    get caOptions() {
        return this._caOptions;
    }
    putCaOptions(value) {
        this._caOptions.internalValue = value;
    }
    resetCaOptions() {
        this._caOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get caOptionsInput() {
        return this._caOptions.internalValue;
    }
    get keyUsage() {
        return this._keyUsage;
    }
    putKeyUsage(value) {
        this._keyUsage.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get keyUsageInput() {
        return this._keyUsage.internalValue;
    }
    get nameConstraints() {
        return this._nameConstraints;
    }
    putNameConstraints(value) {
        this._nameConstraints.internalValue = value;
    }
    resetNameConstraints() {
        this._nameConstraints.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameConstraintsInput() {
        return this._nameConstraints.internalValue;
    }
    get policyIds() {
        return this._policyIds;
    }
    putPolicyIds(value) {
        this._policyIds.internalValue = value;
    }
    resetPolicyIds() {
        this._policyIds.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get policyIdsInput() {
        return this._policyIds.internalValue;
    }
}
exports.PrivatecaCertificateConfigX509ConfigOutputReference = PrivatecaCertificateConfigX509ConfigOutputReference;
_35 = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateConfigX509ConfigOutputReference[_35] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateConfigX509ConfigOutputReference", version: "14.13.1" };
function privatecaCertificateConfigAToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        public_key: privatecaCertificateConfigPublicKeyToTerraform(struct.publicKey),
        subject_config: privatecaCertificateConfigSubjectConfigToTerraform(struct.subjectConfig),
        subject_key_id: privatecaCertificateConfigSubjectKeyIdToTerraform(struct.subjectKeyId),
        x509_config: privatecaCertificateConfigX509ConfigToTerraform(struct.x509Config),
    };
}
exports.privatecaCertificateConfigAToTerraform = privatecaCertificateConfigAToTerraform;
function privatecaCertificateConfigAToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        public_key: {
            value: privatecaCertificateConfigPublicKeyToHclTerraform(struct.publicKey),
            isBlock: true,
            type: "list",
            storageClassType: "PrivatecaCertificateConfigPublicKeyList",
        },
        subject_config: {
            value: privatecaCertificateConfigSubjectConfigToHclTerraform(struct.subjectConfig),
            isBlock: true,
            type: "list",
            storageClassType: "PrivatecaCertificateConfigSubjectConfigList",
        },
        subject_key_id: {
            value: privatecaCertificateConfigSubjectKeyIdToHclTerraform(struct.subjectKeyId),
            isBlock: true,
            type: "list",
            storageClassType: "PrivatecaCertificateConfigSubjectKeyIdList",
        },
        x509_config: {
            value: privatecaCertificateConfigX509ConfigToHclTerraform(struct.x509Config),
            isBlock: true,
            type: "list",
            storageClassType: "PrivatecaCertificateConfigX509ConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.privatecaCertificateConfigAToHclTerraform = privatecaCertificateConfigAToHclTerraform;
class PrivatecaCertificateConfigAOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // public_key - computed: false, optional: false, required: true
        this._publicKey = new PrivatecaCertificateConfigPublicKeyOutputReference(this, "public_key");
        // subject_config - computed: false, optional: false, required: true
        this._subjectConfig = new PrivatecaCertificateConfigSubjectConfigOutputReference(this, "subject_config");
        // subject_key_id - computed: false, optional: true, required: false
        this._subjectKeyId = new PrivatecaCertificateConfigSubjectKeyIdOutputReference(this, "subject_key_id");
        // x509_config - computed: false, optional: false, required: true
        this._x509Config = new PrivatecaCertificateConfigX509ConfigOutputReference(this, "x509_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._publicKey?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.publicKey = this._publicKey?.internalValue;
        }
        if (this._subjectConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.subjectConfig = this._subjectConfig?.internalValue;
        }
        if (this._subjectKeyId?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.subjectKeyId = this._subjectKeyId?.internalValue;
        }
        if (this._x509Config?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.x509Config = this._x509Config?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._publicKey.internalValue = undefined;
            this._subjectConfig.internalValue = undefined;
            this._subjectKeyId.internalValue = undefined;
            this._x509Config.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._publicKey.internalValue = value.publicKey;
            this._subjectConfig.internalValue = value.subjectConfig;
            this._subjectKeyId.internalValue = value.subjectKeyId;
            this._x509Config.internalValue = value.x509Config;
        }
    }
    get publicKey() {
        return this._publicKey;
    }
    putPublicKey(value) {
        this._publicKey.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get publicKeyInput() {
        return this._publicKey.internalValue;
    }
    get subjectConfig() {
        return this._subjectConfig;
    }
    putSubjectConfig(value) {
        this._subjectConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get subjectConfigInput() {
        return this._subjectConfig.internalValue;
    }
    get subjectKeyId() {
        return this._subjectKeyId;
    }
    putSubjectKeyId(value) {
        this._subjectKeyId.internalValue = value;
    }
    resetSubjectKeyId() {
        this._subjectKeyId.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subjectKeyIdInput() {
        return this._subjectKeyId.internalValue;
    }
    get x509Config() {
        return this._x509Config;
    }
    putX509Config(value) {
        this._x509Config.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get x509ConfigInput() {
        return this._x509Config.internalValue;
    }
}
exports.PrivatecaCertificateConfigAOutputReference = PrivatecaCertificateConfigAOutputReference;
_36 = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateConfigAOutputReference[_36] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateConfigAOutputReference", version: "14.13.1" };
function privatecaCertificateTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.privatecaCertificateTimeoutsToTerraform = privatecaCertificateTimeoutsToTerraform;
function privatecaCertificateTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.privatecaCertificateTimeoutsToHclTerraform = privatecaCertificateTimeoutsToHclTerraform;
class PrivatecaCertificateTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.PrivatecaCertificateTimeoutsOutputReference = PrivatecaCertificateTimeoutsOutputReference;
_37 = JSII_RTTI_SYMBOL_1;
PrivatecaCertificateTimeoutsOutputReference[_37] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificateTimeoutsOutputReference", version: "14.13.1" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/privateca_certificate google_privateca_certificate}
*/
class PrivatecaCertificate extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a PrivatecaCertificate resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the PrivatecaCertificate to import
    * @param importFromId The id of the existing PrivatecaCertificate that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/privateca_certificate#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the PrivatecaCertificate to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_privateca_certificate", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/privateca_certificate google_privateca_certificate} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options PrivatecaCertificateConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_privateca_certificate',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // certificate_description - computed: true, optional: false, required: false
        this._certificateDescription = new PrivatecaCertificateCertificateDescriptionList(this, "certificate_description", false);
        // effective_labels - computed: true, optional: false, required: false
        this._effectiveLabels = new cdktf.StringMap(this, "effective_labels");
        // revocation_details - computed: true, optional: false, required: false
        this._revocationDetails = new PrivatecaCertificateRevocationDetailsList(this, "revocation_details", false);
        // terraform_labels - computed: true, optional: false, required: false
        this._terraformLabels = new cdktf.StringMap(this, "terraform_labels");
        // config - computed: false, optional: true, required: false
        this._config = new PrivatecaCertificateConfigAOutputReference(this, "config");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new PrivatecaCertificateTimeoutsOutputReference(this, "timeouts");
        this._certificateAuthority = config.certificateAuthority;
        this._certificateTemplate = config.certificateTemplate;
        this._id = config.id;
        this._labels = config.labels;
        this._lifetime = config.lifetime;
        this._location = config.location;
        this._name = config.name;
        this._pemCsr = config.pemCsr;
        this._pool = config.pool;
        this._project = config.project;
        this._config.internalValue = config.config;
        this._timeouts.internalValue = config.timeouts;
    }
    get certificateAuthority() {
        return this.getStringAttribute('certificate_authority');
    }
    set certificateAuthority(value) {
        this._certificateAuthority = value;
    }
    resetCertificateAuthority() {
        this._certificateAuthority = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get certificateAuthorityInput() {
        return this._certificateAuthority;
    }
    get certificateDescription() {
        return this._certificateDescription;
    }
    get certificateTemplate() {
        return this.getStringAttribute('certificate_template');
    }
    set certificateTemplate(value) {
        this._certificateTemplate = value;
    }
    resetCertificateTemplate() {
        this._certificateTemplate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get certificateTemplateInput() {
        return this._certificateTemplate;
    }
    // create_time - computed: true, optional: false, required: false
    get createTime() {
        return this.getStringAttribute('create_time');
    }
    get effectiveLabels() {
        return this._effectiveLabels;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // issuer_certificate_authority - computed: true, optional: false, required: false
    get issuerCertificateAuthority() {
        return this.getStringAttribute('issuer_certificate_authority');
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get lifetime() {
        return this.getStringAttribute('lifetime');
    }
    set lifetime(value) {
        this._lifetime = value;
    }
    resetLifetime() {
        this._lifetime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lifetimeInput() {
        return this._lifetime;
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    // pem_certificate - computed: true, optional: false, required: false
    get pemCertificate() {
        return this.getStringAttribute('pem_certificate');
    }
    // pem_certificate_chain - computed: true, optional: false, required: false
    get pemCertificateChain() {
        return this.getListAttribute('pem_certificate_chain');
    }
    get pemCsr() {
        return this.getStringAttribute('pem_csr');
    }
    set pemCsr(value) {
        this._pemCsr = value;
    }
    resetPemCsr() {
        this._pemCsr = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pemCsrInput() {
        return this._pemCsr;
    }
    get pool() {
        return this.getStringAttribute('pool');
    }
    set pool(value) {
        this._pool = value;
    }
    // Temporarily expose input value. Use with caution.
    get poolInput() {
        return this._pool;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get revocationDetails() {
        return this._revocationDetails;
    }
    get terraformLabels() {
        return this._terraformLabels;
    }
    // update_time - computed: true, optional: false, required: false
    get updateTime() {
        return this.getStringAttribute('update_time');
    }
    get config() {
        return this._config;
    }
    putConfig(value) {
        this._config.internalValue = value;
    }
    resetConfig() {
        this._config.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get configInput() {
        return this._config.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            certificate_authority: cdktf.stringToTerraform(this._certificateAuthority),
            certificate_template: cdktf.stringToTerraform(this._certificateTemplate),
            id: cdktf.stringToTerraform(this._id),
            labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._labels),
            lifetime: cdktf.stringToTerraform(this._lifetime),
            location: cdktf.stringToTerraform(this._location),
            name: cdktf.stringToTerraform(this._name),
            pem_csr: cdktf.stringToTerraform(this._pemCsr),
            pool: cdktf.stringToTerraform(this._pool),
            project: cdktf.stringToTerraform(this._project),
            config: privatecaCertificateConfigAToTerraform(this._config.internalValue),
            timeouts: privatecaCertificateTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            certificate_authority: {
                value: cdktf.stringToHclTerraform(this._certificateAuthority),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            certificate_template: {
                value: cdktf.stringToHclTerraform(this._certificateTemplate),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            labels: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._labels),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            lifetime: {
                value: cdktf.stringToHclTerraform(this._lifetime),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            location: {
                value: cdktf.stringToHclTerraform(this._location),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            name: {
                value: cdktf.stringToHclTerraform(this._name),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            pem_csr: {
                value: cdktf.stringToHclTerraform(this._pemCsr),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            pool: {
                value: cdktf.stringToHclTerraform(this._pool),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            project: {
                value: cdktf.stringToHclTerraform(this._project),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            config: {
                value: privatecaCertificateConfigAToHclTerraform(this._config.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "PrivatecaCertificateConfigAList",
            },
            timeouts: {
                value: privatecaCertificateTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "PrivatecaCertificateTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.PrivatecaCertificate = PrivatecaCertificate;
_38 = JSII_RTTI_SYMBOL_1;
PrivatecaCertificate[_38] = { fqn: "@cdktf/provider-google.privatecaCertificate.PrivatecaCertificate", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
PrivatecaCertificate.tfResourceType = "google_privateca_certificate";
//# sourceMappingURL=data:application/json;base64,