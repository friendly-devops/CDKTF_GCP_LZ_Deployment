/**
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: MPL-2.0
 */
import { Construct } from 'constructs';
import * as cdktf from 'cdktf';
export interface SpannerInstanceConfigAConfig extends cdktf.TerraformMetaArguments {
    /**
    * Base configuration name, e.g. nam3, based on which this configuration is created.
    * Only set for user managed configurations.
    * baseConfig must refer to a configuration of type GOOGLE_MANAGED in the same project as this configuration.
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/spanner_instance_config#base_config SpannerInstanceConfigA#base_config}
    */
    readonly baseConfig?: string;
    /**
    * The name of this instance configuration as it appears in UIs.
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/spanner_instance_config#display_name SpannerInstanceConfigA#display_name}
    */
    readonly displayName: string;
    /**
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/spanner_instance_config#id SpannerInstanceConfigA#id}
    *
    * Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2.
    * If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
    */
    readonly id?: string;
    /**
    * An object containing a list of "key": value pairs.
    * Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
    *
    *
    * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
    * Please refer to the field 'effective_labels' for all of the labels present on the resource.
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/spanner_instance_config#labels SpannerInstanceConfigA#labels}
    */
    readonly labels?: {
        [key: string]: string;
    };
    /**
    * A unique identifier for the instance configuration. Values are of the
    * form projects/<project>/instanceConfigs/[a-z][-a-z0-9]*
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/spanner_instance_config#name SpannerInstanceConfigA#name}
    */
    readonly name?: string;
    /**
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/spanner_instance_config#project SpannerInstanceConfigA#project}
    */
    readonly project?: string;
    /**
    * replicas block
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/spanner_instance_config#replicas SpannerInstanceConfigA#replicas}
    */
    readonly replicas: SpannerInstanceConfigReplicas[] | cdktf.IResolvable;
    /**
    * timeouts block
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/spanner_instance_config#timeouts SpannerInstanceConfigA#timeouts}
    */
    readonly timeouts?: SpannerInstanceConfigTimeouts;
}
export interface SpannerInstanceConfigReplicas {
    /**
    * If true, this location is designated as the default leader location where
    * leader replicas are placed.
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/spanner_instance_config#default_leader_location SpannerInstanceConfigA#default_leader_location}
    */
    readonly defaultLeaderLocation?: boolean | cdktf.IResolvable;
    /**
    * The location of the serving resources, e.g. "us-central1".
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/spanner_instance_config#location SpannerInstanceConfigA#location}
    */
    readonly location?: string;
    /**
    * Indicates the type of replica.  See the [replica types
    * documentation](https://cloud.google.com/spanner/docs/replication#replica_types)
    * for more details. Possible values: ["READ_WRITE", "READ_ONLY", "WITNESS"]
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/spanner_instance_config#type SpannerInstanceConfigA#type}
    */
    readonly type?: string;
}
export declare function spannerInstanceConfigReplicasToTerraform(struct?: SpannerInstanceConfigReplicas | cdktf.IResolvable): any;
export declare function spannerInstanceConfigReplicasToHclTerraform(struct?: SpannerInstanceConfigReplicas | cdktf.IResolvable): any;
export declare class SpannerInstanceConfigReplicasOutputReference extends cdktf.ComplexObject {
    private isEmptyObject;
    private resolvableValue?;
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean);
    get internalValue(): SpannerInstanceConfigReplicas | cdktf.IResolvable | undefined;
    set internalValue(value: SpannerInstanceConfigReplicas | cdktf.IResolvable | undefined);
    private _defaultLeaderLocation?;
    get defaultLeaderLocation(): boolean | cdktf.IResolvable;
    set defaultLeaderLocation(value: boolean | cdktf.IResolvable);
    resetDefaultLeaderLocation(): void;
    get defaultLeaderLocationInput(): boolean | cdktf.IResolvable | undefined;
    private _location?;
    get location(): string;
    set location(value: string);
    resetLocation(): void;
    get locationInput(): string | undefined;
    private _type?;
    get type(): string;
    set type(value: string);
    resetType(): void;
    get typeInput(): string | undefined;
}
export declare class SpannerInstanceConfigReplicasList extends cdktf.ComplexList {
    protected terraformResource: cdktf.IInterpolatingParent;
    protected terraformAttribute: string;
    protected wrapsSet: boolean;
    internalValue?: SpannerInstanceConfigReplicas[] | cdktf.IResolvable;
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, wrapsSet: boolean);
    /**
    * @param index the index of the item to return
    */
    get(index: number): SpannerInstanceConfigReplicasOutputReference;
}
export interface SpannerInstanceConfigTimeouts {
    /**
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/spanner_instance_config#create SpannerInstanceConfigA#create}
    */
    readonly create?: string;
    /**
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/spanner_instance_config#delete SpannerInstanceConfigA#delete}
    */
    readonly delete?: string;
    /**
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/spanner_instance_config#update SpannerInstanceConfigA#update}
    */
    readonly update?: string;
}
export declare function spannerInstanceConfigTimeoutsToTerraform(struct?: SpannerInstanceConfigTimeouts | cdktf.IResolvable): any;
export declare function spannerInstanceConfigTimeoutsToHclTerraform(struct?: SpannerInstanceConfigTimeouts | cdktf.IResolvable): any;
export declare class SpannerInstanceConfigTimeoutsOutputReference extends cdktf.ComplexObject {
    private isEmptyObject;
    private resolvableValue?;
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string);
    get internalValue(): SpannerInstanceConfigTimeouts | cdktf.IResolvable | undefined;
    set internalValue(value: SpannerInstanceConfigTimeouts | cdktf.IResolvable | undefined);
    private _create?;
    get create(): string;
    set create(value: string);
    resetCreate(): void;
    get createInput(): string | undefined;
    private _delete?;
    get delete(): string;
    set delete(value: string);
    resetDelete(): void;
    get deleteInput(): string | undefined;
    private _update?;
    get update(): string;
    set update(value: string);
    resetUpdate(): void;
    get updateInput(): string | undefined;
}
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/spanner_instance_config google_spanner_instance_config}
*/
export declare class SpannerInstanceConfigA extends cdktf.TerraformResource {
    static readonly tfResourceType = "google_spanner_instance_config";
    /**
    * Generates CDKTF code for importing a SpannerInstanceConfigA resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the SpannerInstanceConfigA to import
    * @param importFromId The id of the existing SpannerInstanceConfigA that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/spanner_instance_config#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the SpannerInstanceConfigA to import is found
    */
    static generateConfigForImport(scope: Construct, importToId: string, importFromId: string, provider?: cdktf.TerraformProvider): cdktf.ImportableResource;
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/spanner_instance_config google_spanner_instance_config} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options SpannerInstanceConfigAConfig
    */
    constructor(scope: Construct, id: string, config: SpannerInstanceConfigAConfig);
    private _baseConfig?;
    get baseConfig(): string;
    set baseConfig(value: string);
    resetBaseConfig(): void;
    get baseConfigInput(): string | undefined;
    get configType(): string;
    private _displayName?;
    get displayName(): string;
    set displayName(value: string);
    get displayNameInput(): string | undefined;
    private _effectiveLabels;
    get effectiveLabels(): cdktf.StringMap;
    private _id?;
    get id(): string;
    set id(value: string);
    resetId(): void;
    get idInput(): string | undefined;
    private _labels?;
    get labels(): {
        [key: string]: string;
    };
    set labels(value: {
        [key: string]: string;
    });
    resetLabels(): void;
    get labelsInput(): {
        [key: string]: string;
    } | undefined;
    private _name?;
    get name(): string;
    set name(value: string);
    resetName(): void;
    get nameInput(): string | undefined;
    private _project?;
    get project(): string;
    set project(value: string);
    resetProject(): void;
    get projectInput(): string | undefined;
    private _terraformLabels;
    get terraformLabels(): cdktf.StringMap;
    private _replicas;
    get replicas(): SpannerInstanceConfigReplicasList;
    putReplicas(value: SpannerInstanceConfigReplicas[] | cdktf.IResolvable): void;
    get replicasInput(): cdktf.IResolvable | SpannerInstanceConfigReplicas[] | undefined;
    private _timeouts;
    get timeouts(): SpannerInstanceConfigTimeoutsOutputReference;
    putTimeouts(value: SpannerInstanceConfigTimeouts): void;
    resetTimeouts(): void;
    get timeoutsInput(): cdktf.IResolvable | SpannerInstanceConfigTimeouts | undefined;
    protected synthesizeAttributes(): {
        [name: string]: any;
    };
    protected synthesizeHclAttributes(): {
        [name: string]: any;
    };
}
