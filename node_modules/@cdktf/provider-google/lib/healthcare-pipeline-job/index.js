"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HealthcarePipelineJob = exports.HealthcarePipelineJobTimeoutsOutputReference = exports.healthcarePipelineJobTimeoutsToHclTerraform = exports.healthcarePipelineJobTimeoutsToTerraform = exports.HealthcarePipelineJobReconciliationPipelineJobOutputReference = exports.healthcarePipelineJobReconciliationPipelineJobToHclTerraform = exports.healthcarePipelineJobReconciliationPipelineJobToTerraform = exports.HealthcarePipelineJobReconciliationPipelineJobMergeConfigOutputReference = exports.healthcarePipelineJobReconciliationPipelineJobMergeConfigToHclTerraform = exports.healthcarePipelineJobReconciliationPipelineJobMergeConfigToTerraform = exports.HealthcarePipelineJobReconciliationPipelineJobMergeConfigWhistleConfigSourceOutputReference = exports.healthcarePipelineJobReconciliationPipelineJobMergeConfigWhistleConfigSourceToHclTerraform = exports.healthcarePipelineJobReconciliationPipelineJobMergeConfigWhistleConfigSourceToTerraform = exports.HealthcarePipelineJobMappingPipelineJobOutputReference = exports.healthcarePipelineJobMappingPipelineJobToHclTerraform = exports.healthcarePipelineJobMappingPipelineJobToTerraform = exports.HealthcarePipelineJobMappingPipelineJobMappingConfigOutputReference = exports.healthcarePipelineJobMappingPipelineJobMappingConfigToHclTerraform = exports.healthcarePipelineJobMappingPipelineJobMappingConfigToTerraform = exports.HealthcarePipelineJobMappingPipelineJobMappingConfigWhistleConfigSourceOutputReference = exports.healthcarePipelineJobMappingPipelineJobMappingConfigWhistleConfigSourceToHclTerraform = exports.healthcarePipelineJobMappingPipelineJobMappingConfigWhistleConfigSourceToTerraform = exports.HealthcarePipelineJobMappingPipelineJobFhirStreamingSourceOutputReference = exports.healthcarePipelineJobMappingPipelineJobFhirStreamingSourceToHclTerraform = exports.healthcarePipelineJobMappingPipelineJobFhirStreamingSourceToTerraform = exports.HealthcarePipelineJobBackfillPipelineJobOutputReference = exports.healthcarePipelineJobBackfillPipelineJobToHclTerraform = exports.healthcarePipelineJobBackfillPipelineJobToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function healthcarePipelineJobBackfillPipelineJobToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        mapping_pipeline_job: cdktf.stringToTerraform(struct.mappingPipelineJob),
    };
}
exports.healthcarePipelineJobBackfillPipelineJobToTerraform = healthcarePipelineJobBackfillPipelineJobToTerraform;
function healthcarePipelineJobBackfillPipelineJobToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        mapping_pipeline_job: {
            value: cdktf.stringToHclTerraform(struct.mappingPipelineJob),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.healthcarePipelineJobBackfillPipelineJobToHclTerraform = healthcarePipelineJobBackfillPipelineJobToHclTerraform;
class HealthcarePipelineJobBackfillPipelineJobOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._mappingPipelineJob !== undefined) {
            hasAnyValues = true;
            internalValueResult.mappingPipelineJob = this._mappingPipelineJob;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._mappingPipelineJob = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._mappingPipelineJob = value.mappingPipelineJob;
        }
    }
    get mappingPipelineJob() {
        return this.getStringAttribute('mapping_pipeline_job');
    }
    set mappingPipelineJob(value) {
        this._mappingPipelineJob = value;
    }
    resetMappingPipelineJob() {
        this._mappingPipelineJob = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mappingPipelineJobInput() {
        return this._mappingPipelineJob;
    }
}
exports.HealthcarePipelineJobBackfillPipelineJobOutputReference = HealthcarePipelineJobBackfillPipelineJobOutputReference;
_a = JSII_RTTI_SYMBOL_1;
HealthcarePipelineJobBackfillPipelineJobOutputReference[_a] = { fqn: "@cdktf/provider-google.healthcarePipelineJob.HealthcarePipelineJobBackfillPipelineJobOutputReference", version: "14.13.1" };
function healthcarePipelineJobMappingPipelineJobFhirStreamingSourceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        description: cdktf.stringToTerraform(struct.description),
        fhir_store: cdktf.stringToTerraform(struct.fhirStore),
    };
}
exports.healthcarePipelineJobMappingPipelineJobFhirStreamingSourceToTerraform = healthcarePipelineJobMappingPipelineJobFhirStreamingSourceToTerraform;
function healthcarePipelineJobMappingPipelineJobFhirStreamingSourceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        description: {
            value: cdktf.stringToHclTerraform(struct.description),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        fhir_store: {
            value: cdktf.stringToHclTerraform(struct.fhirStore),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.healthcarePipelineJobMappingPipelineJobFhirStreamingSourceToHclTerraform = healthcarePipelineJobMappingPipelineJobFhirStreamingSourceToHclTerraform;
class HealthcarePipelineJobMappingPipelineJobFhirStreamingSourceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._description !== undefined) {
            hasAnyValues = true;
            internalValueResult.description = this._description;
        }
        if (this._fhirStore !== undefined) {
            hasAnyValues = true;
            internalValueResult.fhirStore = this._fhirStore;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._description = undefined;
            this._fhirStore = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._description = value.description;
            this._fhirStore = value.fhirStore;
        }
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get fhirStore() {
        return this.getStringAttribute('fhir_store');
    }
    set fhirStore(value) {
        this._fhirStore = value;
    }
    // Temporarily expose input value. Use with caution.
    get fhirStoreInput() {
        return this._fhirStore;
    }
}
exports.HealthcarePipelineJobMappingPipelineJobFhirStreamingSourceOutputReference = HealthcarePipelineJobMappingPipelineJobFhirStreamingSourceOutputReference;
_b = JSII_RTTI_SYMBOL_1;
HealthcarePipelineJobMappingPipelineJobFhirStreamingSourceOutputReference[_b] = { fqn: "@cdktf/provider-google.healthcarePipelineJob.HealthcarePipelineJobMappingPipelineJobFhirStreamingSourceOutputReference", version: "14.13.1" };
function healthcarePipelineJobMappingPipelineJobMappingConfigWhistleConfigSourceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        import_uri_prefix: cdktf.stringToTerraform(struct.importUriPrefix),
        uri: cdktf.stringToTerraform(struct.uri),
    };
}
exports.healthcarePipelineJobMappingPipelineJobMappingConfigWhistleConfigSourceToTerraform = healthcarePipelineJobMappingPipelineJobMappingConfigWhistleConfigSourceToTerraform;
function healthcarePipelineJobMappingPipelineJobMappingConfigWhistleConfigSourceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        import_uri_prefix: {
            value: cdktf.stringToHclTerraform(struct.importUriPrefix),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        uri: {
            value: cdktf.stringToHclTerraform(struct.uri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.healthcarePipelineJobMappingPipelineJobMappingConfigWhistleConfigSourceToHclTerraform = healthcarePipelineJobMappingPipelineJobMappingConfigWhistleConfigSourceToHclTerraform;
class HealthcarePipelineJobMappingPipelineJobMappingConfigWhistleConfigSourceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._importUriPrefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.importUriPrefix = this._importUriPrefix;
        }
        if (this._uri !== undefined) {
            hasAnyValues = true;
            internalValueResult.uri = this._uri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._importUriPrefix = undefined;
            this._uri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._importUriPrefix = value.importUriPrefix;
            this._uri = value.uri;
        }
    }
    get importUriPrefix() {
        return this.getStringAttribute('import_uri_prefix');
    }
    set importUriPrefix(value) {
        this._importUriPrefix = value;
    }
    // Temporarily expose input value. Use with caution.
    get importUriPrefixInput() {
        return this._importUriPrefix;
    }
    get uri() {
        return this.getStringAttribute('uri');
    }
    set uri(value) {
        this._uri = value;
    }
    // Temporarily expose input value. Use with caution.
    get uriInput() {
        return this._uri;
    }
}
exports.HealthcarePipelineJobMappingPipelineJobMappingConfigWhistleConfigSourceOutputReference = HealthcarePipelineJobMappingPipelineJobMappingConfigWhistleConfigSourceOutputReference;
_c = JSII_RTTI_SYMBOL_1;
HealthcarePipelineJobMappingPipelineJobMappingConfigWhistleConfigSourceOutputReference[_c] = { fqn: "@cdktf/provider-google.healthcarePipelineJob.HealthcarePipelineJobMappingPipelineJobMappingConfigWhistleConfigSourceOutputReference", version: "14.13.1" };
function healthcarePipelineJobMappingPipelineJobMappingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        description: cdktf.stringToTerraform(struct.description),
        whistle_config_source: healthcarePipelineJobMappingPipelineJobMappingConfigWhistleConfigSourceToTerraform(struct.whistleConfigSource),
    };
}
exports.healthcarePipelineJobMappingPipelineJobMappingConfigToTerraform = healthcarePipelineJobMappingPipelineJobMappingConfigToTerraform;
function healthcarePipelineJobMappingPipelineJobMappingConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        description: {
            value: cdktf.stringToHclTerraform(struct.description),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        whistle_config_source: {
            value: healthcarePipelineJobMappingPipelineJobMappingConfigWhistleConfigSourceToHclTerraform(struct.whistleConfigSource),
            isBlock: true,
            type: "list",
            storageClassType: "HealthcarePipelineJobMappingPipelineJobMappingConfigWhistleConfigSourceList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.healthcarePipelineJobMappingPipelineJobMappingConfigToHclTerraform = healthcarePipelineJobMappingPipelineJobMappingConfigToHclTerraform;
class HealthcarePipelineJobMappingPipelineJobMappingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // whistle_config_source - computed: false, optional: true, required: false
        this._whistleConfigSource = new HealthcarePipelineJobMappingPipelineJobMappingConfigWhistleConfigSourceOutputReference(this, "whistle_config_source");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._description !== undefined) {
            hasAnyValues = true;
            internalValueResult.description = this._description;
        }
        if (this._whistleConfigSource?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.whistleConfigSource = this._whistleConfigSource?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._description = undefined;
            this._whistleConfigSource.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._description = value.description;
            this._whistleConfigSource.internalValue = value.whistleConfigSource;
        }
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get whistleConfigSource() {
        return this._whistleConfigSource;
    }
    putWhistleConfigSource(value) {
        this._whistleConfigSource.internalValue = value;
    }
    resetWhistleConfigSource() {
        this._whistleConfigSource.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get whistleConfigSourceInput() {
        return this._whistleConfigSource.internalValue;
    }
}
exports.HealthcarePipelineJobMappingPipelineJobMappingConfigOutputReference = HealthcarePipelineJobMappingPipelineJobMappingConfigOutputReference;
_d = JSII_RTTI_SYMBOL_1;
HealthcarePipelineJobMappingPipelineJobMappingConfigOutputReference[_d] = { fqn: "@cdktf/provider-google.healthcarePipelineJob.HealthcarePipelineJobMappingPipelineJobMappingConfigOutputReference", version: "14.13.1" };
function healthcarePipelineJobMappingPipelineJobToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        fhir_store_destination: cdktf.stringToTerraform(struct.fhirStoreDestination),
        reconciliation_destination: cdktf.booleanToTerraform(struct.reconciliationDestination),
        fhir_streaming_source: healthcarePipelineJobMappingPipelineJobFhirStreamingSourceToTerraform(struct.fhirStreamingSource),
        mapping_config: healthcarePipelineJobMappingPipelineJobMappingConfigToTerraform(struct.mappingConfig),
    };
}
exports.healthcarePipelineJobMappingPipelineJobToTerraform = healthcarePipelineJobMappingPipelineJobToTerraform;
function healthcarePipelineJobMappingPipelineJobToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        fhir_store_destination: {
            value: cdktf.stringToHclTerraform(struct.fhirStoreDestination),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        reconciliation_destination: {
            value: cdktf.booleanToHclTerraform(struct.reconciliationDestination),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        fhir_streaming_source: {
            value: healthcarePipelineJobMappingPipelineJobFhirStreamingSourceToHclTerraform(struct.fhirStreamingSource),
            isBlock: true,
            type: "list",
            storageClassType: "HealthcarePipelineJobMappingPipelineJobFhirStreamingSourceList",
        },
        mapping_config: {
            value: healthcarePipelineJobMappingPipelineJobMappingConfigToHclTerraform(struct.mappingConfig),
            isBlock: true,
            type: "list",
            storageClassType: "HealthcarePipelineJobMappingPipelineJobMappingConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.healthcarePipelineJobMappingPipelineJobToHclTerraform = healthcarePipelineJobMappingPipelineJobToHclTerraform;
class HealthcarePipelineJobMappingPipelineJobOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // fhir_streaming_source - computed: false, optional: true, required: false
        this._fhirStreamingSource = new HealthcarePipelineJobMappingPipelineJobFhirStreamingSourceOutputReference(this, "fhir_streaming_source");
        // mapping_config - computed: false, optional: false, required: true
        this._mappingConfig = new HealthcarePipelineJobMappingPipelineJobMappingConfigOutputReference(this, "mapping_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._fhirStoreDestination !== undefined) {
            hasAnyValues = true;
            internalValueResult.fhirStoreDestination = this._fhirStoreDestination;
        }
        if (this._reconciliationDestination !== undefined) {
            hasAnyValues = true;
            internalValueResult.reconciliationDestination = this._reconciliationDestination;
        }
        if (this._fhirStreamingSource?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.fhirStreamingSource = this._fhirStreamingSource?.internalValue;
        }
        if (this._mappingConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mappingConfig = this._mappingConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._fhirStoreDestination = undefined;
            this._reconciliationDestination = undefined;
            this._fhirStreamingSource.internalValue = undefined;
            this._mappingConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._fhirStoreDestination = value.fhirStoreDestination;
            this._reconciliationDestination = value.reconciliationDestination;
            this._fhirStreamingSource.internalValue = value.fhirStreamingSource;
            this._mappingConfig.internalValue = value.mappingConfig;
        }
    }
    get fhirStoreDestination() {
        return this.getStringAttribute('fhir_store_destination');
    }
    set fhirStoreDestination(value) {
        this._fhirStoreDestination = value;
    }
    resetFhirStoreDestination() {
        this._fhirStoreDestination = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fhirStoreDestinationInput() {
        return this._fhirStoreDestination;
    }
    get reconciliationDestination() {
        return this.getBooleanAttribute('reconciliation_destination');
    }
    set reconciliationDestination(value) {
        this._reconciliationDestination = value;
    }
    resetReconciliationDestination() {
        this._reconciliationDestination = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get reconciliationDestinationInput() {
        return this._reconciliationDestination;
    }
    get fhirStreamingSource() {
        return this._fhirStreamingSource;
    }
    putFhirStreamingSource(value) {
        this._fhirStreamingSource.internalValue = value;
    }
    resetFhirStreamingSource() {
        this._fhirStreamingSource.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fhirStreamingSourceInput() {
        return this._fhirStreamingSource.internalValue;
    }
    get mappingConfig() {
        return this._mappingConfig;
    }
    putMappingConfig(value) {
        this._mappingConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get mappingConfigInput() {
        return this._mappingConfig.internalValue;
    }
}
exports.HealthcarePipelineJobMappingPipelineJobOutputReference = HealthcarePipelineJobMappingPipelineJobOutputReference;
_e = JSII_RTTI_SYMBOL_1;
HealthcarePipelineJobMappingPipelineJobOutputReference[_e] = { fqn: "@cdktf/provider-google.healthcarePipelineJob.HealthcarePipelineJobMappingPipelineJobOutputReference", version: "14.13.1" };
function healthcarePipelineJobReconciliationPipelineJobMergeConfigWhistleConfigSourceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        import_uri_prefix: cdktf.stringToTerraform(struct.importUriPrefix),
        uri: cdktf.stringToTerraform(struct.uri),
    };
}
exports.healthcarePipelineJobReconciliationPipelineJobMergeConfigWhistleConfigSourceToTerraform = healthcarePipelineJobReconciliationPipelineJobMergeConfigWhistleConfigSourceToTerraform;
function healthcarePipelineJobReconciliationPipelineJobMergeConfigWhistleConfigSourceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        import_uri_prefix: {
            value: cdktf.stringToHclTerraform(struct.importUriPrefix),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        uri: {
            value: cdktf.stringToHclTerraform(struct.uri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.healthcarePipelineJobReconciliationPipelineJobMergeConfigWhistleConfigSourceToHclTerraform = healthcarePipelineJobReconciliationPipelineJobMergeConfigWhistleConfigSourceToHclTerraform;
class HealthcarePipelineJobReconciliationPipelineJobMergeConfigWhistleConfigSourceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._importUriPrefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.importUriPrefix = this._importUriPrefix;
        }
        if (this._uri !== undefined) {
            hasAnyValues = true;
            internalValueResult.uri = this._uri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._importUriPrefix = undefined;
            this._uri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._importUriPrefix = value.importUriPrefix;
            this._uri = value.uri;
        }
    }
    get importUriPrefix() {
        return this.getStringAttribute('import_uri_prefix');
    }
    set importUriPrefix(value) {
        this._importUriPrefix = value;
    }
    // Temporarily expose input value. Use with caution.
    get importUriPrefixInput() {
        return this._importUriPrefix;
    }
    get uri() {
        return this.getStringAttribute('uri');
    }
    set uri(value) {
        this._uri = value;
    }
    // Temporarily expose input value. Use with caution.
    get uriInput() {
        return this._uri;
    }
}
exports.HealthcarePipelineJobReconciliationPipelineJobMergeConfigWhistleConfigSourceOutputReference = HealthcarePipelineJobReconciliationPipelineJobMergeConfigWhistleConfigSourceOutputReference;
_f = JSII_RTTI_SYMBOL_1;
HealthcarePipelineJobReconciliationPipelineJobMergeConfigWhistleConfigSourceOutputReference[_f] = { fqn: "@cdktf/provider-google.healthcarePipelineJob.HealthcarePipelineJobReconciliationPipelineJobMergeConfigWhistleConfigSourceOutputReference", version: "14.13.1" };
function healthcarePipelineJobReconciliationPipelineJobMergeConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        description: cdktf.stringToTerraform(struct.description),
        whistle_config_source: healthcarePipelineJobReconciliationPipelineJobMergeConfigWhistleConfigSourceToTerraform(struct.whistleConfigSource),
    };
}
exports.healthcarePipelineJobReconciliationPipelineJobMergeConfigToTerraform = healthcarePipelineJobReconciliationPipelineJobMergeConfigToTerraform;
function healthcarePipelineJobReconciliationPipelineJobMergeConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        description: {
            value: cdktf.stringToHclTerraform(struct.description),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        whistle_config_source: {
            value: healthcarePipelineJobReconciliationPipelineJobMergeConfigWhistleConfigSourceToHclTerraform(struct.whistleConfigSource),
            isBlock: true,
            type: "list",
            storageClassType: "HealthcarePipelineJobReconciliationPipelineJobMergeConfigWhistleConfigSourceList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.healthcarePipelineJobReconciliationPipelineJobMergeConfigToHclTerraform = healthcarePipelineJobReconciliationPipelineJobMergeConfigToHclTerraform;
class HealthcarePipelineJobReconciliationPipelineJobMergeConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // whistle_config_source - computed: false, optional: false, required: true
        this._whistleConfigSource = new HealthcarePipelineJobReconciliationPipelineJobMergeConfigWhistleConfigSourceOutputReference(this, "whistle_config_source");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._description !== undefined) {
            hasAnyValues = true;
            internalValueResult.description = this._description;
        }
        if (this._whistleConfigSource?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.whistleConfigSource = this._whistleConfigSource?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._description = undefined;
            this._whistleConfigSource.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._description = value.description;
            this._whistleConfigSource.internalValue = value.whistleConfigSource;
        }
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get whistleConfigSource() {
        return this._whistleConfigSource;
    }
    putWhistleConfigSource(value) {
        this._whistleConfigSource.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get whistleConfigSourceInput() {
        return this._whistleConfigSource.internalValue;
    }
}
exports.HealthcarePipelineJobReconciliationPipelineJobMergeConfigOutputReference = HealthcarePipelineJobReconciliationPipelineJobMergeConfigOutputReference;
_g = JSII_RTTI_SYMBOL_1;
HealthcarePipelineJobReconciliationPipelineJobMergeConfigOutputReference[_g] = { fqn: "@cdktf/provider-google.healthcarePipelineJob.HealthcarePipelineJobReconciliationPipelineJobMergeConfigOutputReference", version: "14.13.1" };
function healthcarePipelineJobReconciliationPipelineJobToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        fhir_store_destination: cdktf.stringToTerraform(struct.fhirStoreDestination),
        matching_uri_prefix: cdktf.stringToTerraform(struct.matchingUriPrefix),
        merge_config: healthcarePipelineJobReconciliationPipelineJobMergeConfigToTerraform(struct.mergeConfig),
    };
}
exports.healthcarePipelineJobReconciliationPipelineJobToTerraform = healthcarePipelineJobReconciliationPipelineJobToTerraform;
function healthcarePipelineJobReconciliationPipelineJobToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        fhir_store_destination: {
            value: cdktf.stringToHclTerraform(struct.fhirStoreDestination),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        matching_uri_prefix: {
            value: cdktf.stringToHclTerraform(struct.matchingUriPrefix),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        merge_config: {
            value: healthcarePipelineJobReconciliationPipelineJobMergeConfigToHclTerraform(struct.mergeConfig),
            isBlock: true,
            type: "list",
            storageClassType: "HealthcarePipelineJobReconciliationPipelineJobMergeConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.healthcarePipelineJobReconciliationPipelineJobToHclTerraform = healthcarePipelineJobReconciliationPipelineJobToHclTerraform;
class HealthcarePipelineJobReconciliationPipelineJobOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // merge_config - computed: false, optional: false, required: true
        this._mergeConfig = new HealthcarePipelineJobReconciliationPipelineJobMergeConfigOutputReference(this, "merge_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._fhirStoreDestination !== undefined) {
            hasAnyValues = true;
            internalValueResult.fhirStoreDestination = this._fhirStoreDestination;
        }
        if (this._matchingUriPrefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.matchingUriPrefix = this._matchingUriPrefix;
        }
        if (this._mergeConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mergeConfig = this._mergeConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._fhirStoreDestination = undefined;
            this._matchingUriPrefix = undefined;
            this._mergeConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._fhirStoreDestination = value.fhirStoreDestination;
            this._matchingUriPrefix = value.matchingUriPrefix;
            this._mergeConfig.internalValue = value.mergeConfig;
        }
    }
    get fhirStoreDestination() {
        return this.getStringAttribute('fhir_store_destination');
    }
    set fhirStoreDestination(value) {
        this._fhirStoreDestination = value;
    }
    resetFhirStoreDestination() {
        this._fhirStoreDestination = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fhirStoreDestinationInput() {
        return this._fhirStoreDestination;
    }
    get matchingUriPrefix() {
        return this.getStringAttribute('matching_uri_prefix');
    }
    set matchingUriPrefix(value) {
        this._matchingUriPrefix = value;
    }
    // Temporarily expose input value. Use with caution.
    get matchingUriPrefixInput() {
        return this._matchingUriPrefix;
    }
    get mergeConfig() {
        return this._mergeConfig;
    }
    putMergeConfig(value) {
        this._mergeConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get mergeConfigInput() {
        return this._mergeConfig.internalValue;
    }
}
exports.HealthcarePipelineJobReconciliationPipelineJobOutputReference = HealthcarePipelineJobReconciliationPipelineJobOutputReference;
_h = JSII_RTTI_SYMBOL_1;
HealthcarePipelineJobReconciliationPipelineJobOutputReference[_h] = { fqn: "@cdktf/provider-google.healthcarePipelineJob.HealthcarePipelineJobReconciliationPipelineJobOutputReference", version: "14.13.1" };
function healthcarePipelineJobTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.healthcarePipelineJobTimeoutsToTerraform = healthcarePipelineJobTimeoutsToTerraform;
function healthcarePipelineJobTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.healthcarePipelineJobTimeoutsToHclTerraform = healthcarePipelineJobTimeoutsToHclTerraform;
class HealthcarePipelineJobTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.HealthcarePipelineJobTimeoutsOutputReference = HealthcarePipelineJobTimeoutsOutputReference;
_j = JSII_RTTI_SYMBOL_1;
HealthcarePipelineJobTimeoutsOutputReference[_j] = { fqn: "@cdktf/provider-google.healthcarePipelineJob.HealthcarePipelineJobTimeoutsOutputReference", version: "14.13.1" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/healthcare_pipeline_job google_healthcare_pipeline_job}
*/
class HealthcarePipelineJob extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a HealthcarePipelineJob resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the HealthcarePipelineJob to import
    * @param importFromId The id of the existing HealthcarePipelineJob that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/healthcare_pipeline_job#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the HealthcarePipelineJob to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_healthcare_pipeline_job", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/healthcare_pipeline_job google_healthcare_pipeline_job} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options HealthcarePipelineJobConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_healthcare_pipeline_job',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // effective_labels - computed: true, optional: false, required: false
        this._effectiveLabels = new cdktf.StringMap(this, "effective_labels");
        // terraform_labels - computed: true, optional: false, required: false
        this._terraformLabels = new cdktf.StringMap(this, "terraform_labels");
        // backfill_pipeline_job - computed: false, optional: true, required: false
        this._backfillPipelineJob = new HealthcarePipelineJobBackfillPipelineJobOutputReference(this, "backfill_pipeline_job");
        // mapping_pipeline_job - computed: false, optional: true, required: false
        this._mappingPipelineJob = new HealthcarePipelineJobMappingPipelineJobOutputReference(this, "mapping_pipeline_job");
        // reconciliation_pipeline_job - computed: false, optional: true, required: false
        this._reconciliationPipelineJob = new HealthcarePipelineJobReconciliationPipelineJobOutputReference(this, "reconciliation_pipeline_job");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new HealthcarePipelineJobTimeoutsOutputReference(this, "timeouts");
        this._dataset = config.dataset;
        this._disableLineage = config.disableLineage;
        this._id = config.id;
        this._labels = config.labels;
        this._location = config.location;
        this._name = config.name;
        this._backfillPipelineJob.internalValue = config.backfillPipelineJob;
        this._mappingPipelineJob.internalValue = config.mappingPipelineJob;
        this._reconciliationPipelineJob.internalValue = config.reconciliationPipelineJob;
        this._timeouts.internalValue = config.timeouts;
    }
    get dataset() {
        return this.getStringAttribute('dataset');
    }
    set dataset(value) {
        this._dataset = value;
    }
    // Temporarily expose input value. Use with caution.
    get datasetInput() {
        return this._dataset;
    }
    get disableLineage() {
        return this.getBooleanAttribute('disable_lineage');
    }
    set disableLineage(value) {
        this._disableLineage = value;
    }
    resetDisableLineage() {
        this._disableLineage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get disableLineageInput() {
        return this._disableLineage;
    }
    get effectiveLabels() {
        return this._effectiveLabels;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    // self_link - computed: true, optional: false, required: false
    get selfLink() {
        return this.getStringAttribute('self_link');
    }
    get terraformLabels() {
        return this._terraformLabels;
    }
    get backfillPipelineJob() {
        return this._backfillPipelineJob;
    }
    putBackfillPipelineJob(value) {
        this._backfillPipelineJob.internalValue = value;
    }
    resetBackfillPipelineJob() {
        this._backfillPipelineJob.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get backfillPipelineJobInput() {
        return this._backfillPipelineJob.internalValue;
    }
    get mappingPipelineJob() {
        return this._mappingPipelineJob;
    }
    putMappingPipelineJob(value) {
        this._mappingPipelineJob.internalValue = value;
    }
    resetMappingPipelineJob() {
        this._mappingPipelineJob.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mappingPipelineJobInput() {
        return this._mappingPipelineJob.internalValue;
    }
    get reconciliationPipelineJob() {
        return this._reconciliationPipelineJob;
    }
    putReconciliationPipelineJob(value) {
        this._reconciliationPipelineJob.internalValue = value;
    }
    resetReconciliationPipelineJob() {
        this._reconciliationPipelineJob.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get reconciliationPipelineJobInput() {
        return this._reconciliationPipelineJob.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            dataset: cdktf.stringToTerraform(this._dataset),
            disable_lineage: cdktf.booleanToTerraform(this._disableLineage),
            id: cdktf.stringToTerraform(this._id),
            labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._labels),
            location: cdktf.stringToTerraform(this._location),
            name: cdktf.stringToTerraform(this._name),
            backfill_pipeline_job: healthcarePipelineJobBackfillPipelineJobToTerraform(this._backfillPipelineJob.internalValue),
            mapping_pipeline_job: healthcarePipelineJobMappingPipelineJobToTerraform(this._mappingPipelineJob.internalValue),
            reconciliation_pipeline_job: healthcarePipelineJobReconciliationPipelineJobToTerraform(this._reconciliationPipelineJob.internalValue),
            timeouts: healthcarePipelineJobTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            dataset: {
                value: cdktf.stringToHclTerraform(this._dataset),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            disable_lineage: {
                value: cdktf.booleanToHclTerraform(this._disableLineage),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            labels: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._labels),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            location: {
                value: cdktf.stringToHclTerraform(this._location),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            name: {
                value: cdktf.stringToHclTerraform(this._name),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            backfill_pipeline_job: {
                value: healthcarePipelineJobBackfillPipelineJobToHclTerraform(this._backfillPipelineJob.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "HealthcarePipelineJobBackfillPipelineJobList",
            },
            mapping_pipeline_job: {
                value: healthcarePipelineJobMappingPipelineJobToHclTerraform(this._mappingPipelineJob.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "HealthcarePipelineJobMappingPipelineJobList",
            },
            reconciliation_pipeline_job: {
                value: healthcarePipelineJobReconciliationPipelineJobToHclTerraform(this._reconciliationPipelineJob.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "HealthcarePipelineJobReconciliationPipelineJobList",
            },
            timeouts: {
                value: healthcarePipelineJobTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "HealthcarePipelineJobTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.HealthcarePipelineJob = HealthcarePipelineJob;
_k = JSII_RTTI_SYMBOL_1;
HealthcarePipelineJob[_k] = { fqn: "@cdktf/provider-google.healthcarePipelineJob.HealthcarePipelineJob", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
HealthcarePipelineJob.tfResourceType = "google_healthcare_pipeline_job";
//# sourceMappingURL=data:application/json;base64,