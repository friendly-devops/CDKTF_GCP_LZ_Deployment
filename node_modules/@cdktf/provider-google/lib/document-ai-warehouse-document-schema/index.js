"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsSchemaSourcesOutputReference = exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsSchemaSourcesToHclTerraform = exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsSchemaSourcesToTerraform = exports.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsOutputReference = exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsToHclTerraform = exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsToTerraform = exports.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsList = exports.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsOutputReference = exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsToHclTerraform = exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsToTerraform = exports.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsTimestampTypeOptionsOutputReference = exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsTimestampTypeOptionsToHclTerraform = exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsTimestampTypeOptionsToTerraform = exports.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsTextTypeOptionsOutputReference = exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsTextTypeOptionsToHclTerraform = exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsTextTypeOptionsToTerraform = exports.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsSchemaSourcesList = exports.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsSchemaSourcesOutputReference = exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsSchemaSourcesToHclTerraform = exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsSchemaSourcesToTerraform = exports.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsMapTypeOptionsOutputReference = exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsMapTypeOptionsToHclTerraform = exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsMapTypeOptionsToTerraform = exports.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsIntegerTypeOptionsOutputReference = exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsIntegerTypeOptionsToHclTerraform = exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsIntegerTypeOptionsToTerraform = exports.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsFloatTypeOptionsOutputReference = exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsFloatTypeOptionsToHclTerraform = exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsFloatTypeOptionsToTerraform = exports.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsEnumTypeOptionsOutputReference = exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsEnumTypeOptionsToHclTerraform = exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsEnumTypeOptionsToTerraform = exports.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsDateTimeTypeOptionsOutputReference = exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsDateTimeTypeOptionsToHclTerraform = exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsDateTimeTypeOptionsToTerraform = exports.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsMapTypeOptionsOutputReference = exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsMapTypeOptionsToHclTerraform = exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsMapTypeOptionsToTerraform = exports.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsIntegerTypeOptionsOutputReference = exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsIntegerTypeOptionsToHclTerraform = exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsIntegerTypeOptionsToTerraform = exports.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsFloatTypeOptionsOutputReference = exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsFloatTypeOptionsToHclTerraform = exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsFloatTypeOptionsToTerraform = exports.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsEnumTypeOptionsOutputReference = exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsEnumTypeOptionsToHclTerraform = exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsEnumTypeOptionsToTerraform = exports.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsDateTimeTypeOptionsOutputReference = exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsDateTimeTypeOptionsToHclTerraform = exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsDateTimeTypeOptionsToTerraform = void 0;
exports.DocumentAiWarehouseDocumentSchema = exports.DocumentAiWarehouseDocumentSchemaTimeoutsOutputReference = exports.documentAiWarehouseDocumentSchemaTimeoutsToHclTerraform = exports.documentAiWarehouseDocumentSchemaTimeoutsToTerraform = exports.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsList = exports.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsOutputReference = exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsToHclTerraform = exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsToTerraform = exports.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsTimestampTypeOptionsOutputReference = exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsTimestampTypeOptionsToHclTerraform = exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsTimestampTypeOptionsToTerraform = exports.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsTextTypeOptionsOutputReference = exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsTextTypeOptionsToHclTerraform = exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsTextTypeOptionsToTerraform = exports.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsSchemaSourcesList = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function documentAiWarehouseDocumentSchemaPropertyDefinitionsDateTimeTypeOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsDateTimeTypeOptionsToTerraform = documentAiWarehouseDocumentSchemaPropertyDefinitionsDateTimeTypeOptionsToTerraform;
function documentAiWarehouseDocumentSchemaPropertyDefinitionsDateTimeTypeOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsDateTimeTypeOptionsToHclTerraform = documentAiWarehouseDocumentSchemaPropertyDefinitionsDateTimeTypeOptionsToHclTerraform;
class DocumentAiWarehouseDocumentSchemaPropertyDefinitionsDateTimeTypeOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsDateTimeTypeOptionsOutputReference = DocumentAiWarehouseDocumentSchemaPropertyDefinitionsDateTimeTypeOptionsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
DocumentAiWarehouseDocumentSchemaPropertyDefinitionsDateTimeTypeOptionsOutputReference[_a] = { fqn: "@cdktf/provider-google.documentAiWarehouseDocumentSchema.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsDateTimeTypeOptionsOutputReference", version: "14.13.1" };
function documentAiWarehouseDocumentSchemaPropertyDefinitionsEnumTypeOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        possible_values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.possibleValues),
        validation_check_disabled: cdktf.booleanToTerraform(struct.validationCheckDisabled),
    };
}
exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsEnumTypeOptionsToTerraform = documentAiWarehouseDocumentSchemaPropertyDefinitionsEnumTypeOptionsToTerraform;
function documentAiWarehouseDocumentSchemaPropertyDefinitionsEnumTypeOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        possible_values: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.possibleValues),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        validation_check_disabled: {
            value: cdktf.booleanToHclTerraform(struct.validationCheckDisabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsEnumTypeOptionsToHclTerraform = documentAiWarehouseDocumentSchemaPropertyDefinitionsEnumTypeOptionsToHclTerraform;
class DocumentAiWarehouseDocumentSchemaPropertyDefinitionsEnumTypeOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._possibleValues !== undefined) {
            hasAnyValues = true;
            internalValueResult.possibleValues = this._possibleValues;
        }
        if (this._validationCheckDisabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.validationCheckDisabled = this._validationCheckDisabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._possibleValues = undefined;
            this._validationCheckDisabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._possibleValues = value.possibleValues;
            this._validationCheckDisabled = value.validationCheckDisabled;
        }
    }
    get possibleValues() {
        return this.getListAttribute('possible_values');
    }
    set possibleValues(value) {
        this._possibleValues = value;
    }
    // Temporarily expose input value. Use with caution.
    get possibleValuesInput() {
        return this._possibleValues;
    }
    get validationCheckDisabled() {
        return this.getBooleanAttribute('validation_check_disabled');
    }
    set validationCheckDisabled(value) {
        this._validationCheckDisabled = value;
    }
    resetValidationCheckDisabled() {
        this._validationCheckDisabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get validationCheckDisabledInput() {
        return this._validationCheckDisabled;
    }
}
exports.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsEnumTypeOptionsOutputReference = DocumentAiWarehouseDocumentSchemaPropertyDefinitionsEnumTypeOptionsOutputReference;
_b = JSII_RTTI_SYMBOL_1;
DocumentAiWarehouseDocumentSchemaPropertyDefinitionsEnumTypeOptionsOutputReference[_b] = { fqn: "@cdktf/provider-google.documentAiWarehouseDocumentSchema.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsEnumTypeOptionsOutputReference", version: "14.13.1" };
function documentAiWarehouseDocumentSchemaPropertyDefinitionsFloatTypeOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsFloatTypeOptionsToTerraform = documentAiWarehouseDocumentSchemaPropertyDefinitionsFloatTypeOptionsToTerraform;
function documentAiWarehouseDocumentSchemaPropertyDefinitionsFloatTypeOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsFloatTypeOptionsToHclTerraform = documentAiWarehouseDocumentSchemaPropertyDefinitionsFloatTypeOptionsToHclTerraform;
class DocumentAiWarehouseDocumentSchemaPropertyDefinitionsFloatTypeOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsFloatTypeOptionsOutputReference = DocumentAiWarehouseDocumentSchemaPropertyDefinitionsFloatTypeOptionsOutputReference;
_c = JSII_RTTI_SYMBOL_1;
DocumentAiWarehouseDocumentSchemaPropertyDefinitionsFloatTypeOptionsOutputReference[_c] = { fqn: "@cdktf/provider-google.documentAiWarehouseDocumentSchema.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsFloatTypeOptionsOutputReference", version: "14.13.1" };
function documentAiWarehouseDocumentSchemaPropertyDefinitionsIntegerTypeOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsIntegerTypeOptionsToTerraform = documentAiWarehouseDocumentSchemaPropertyDefinitionsIntegerTypeOptionsToTerraform;
function documentAiWarehouseDocumentSchemaPropertyDefinitionsIntegerTypeOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsIntegerTypeOptionsToHclTerraform = documentAiWarehouseDocumentSchemaPropertyDefinitionsIntegerTypeOptionsToHclTerraform;
class DocumentAiWarehouseDocumentSchemaPropertyDefinitionsIntegerTypeOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsIntegerTypeOptionsOutputReference = DocumentAiWarehouseDocumentSchemaPropertyDefinitionsIntegerTypeOptionsOutputReference;
_d = JSII_RTTI_SYMBOL_1;
DocumentAiWarehouseDocumentSchemaPropertyDefinitionsIntegerTypeOptionsOutputReference[_d] = { fqn: "@cdktf/provider-google.documentAiWarehouseDocumentSchema.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsIntegerTypeOptionsOutputReference", version: "14.13.1" };
function documentAiWarehouseDocumentSchemaPropertyDefinitionsMapTypeOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsMapTypeOptionsToTerraform = documentAiWarehouseDocumentSchemaPropertyDefinitionsMapTypeOptionsToTerraform;
function documentAiWarehouseDocumentSchemaPropertyDefinitionsMapTypeOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsMapTypeOptionsToHclTerraform = documentAiWarehouseDocumentSchemaPropertyDefinitionsMapTypeOptionsToHclTerraform;
class DocumentAiWarehouseDocumentSchemaPropertyDefinitionsMapTypeOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsMapTypeOptionsOutputReference = DocumentAiWarehouseDocumentSchemaPropertyDefinitionsMapTypeOptionsOutputReference;
_e = JSII_RTTI_SYMBOL_1;
DocumentAiWarehouseDocumentSchemaPropertyDefinitionsMapTypeOptionsOutputReference[_e] = { fqn: "@cdktf/provider-google.documentAiWarehouseDocumentSchema.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsMapTypeOptionsOutputReference", version: "14.13.1" };
function documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsDateTimeTypeOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsDateTimeTypeOptionsToTerraform = documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsDateTimeTypeOptionsToTerraform;
function documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsDateTimeTypeOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsDateTimeTypeOptionsToHclTerraform = documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsDateTimeTypeOptionsToHclTerraform;
class DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsDateTimeTypeOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsDateTimeTypeOptionsOutputReference = DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsDateTimeTypeOptionsOutputReference;
_f = JSII_RTTI_SYMBOL_1;
DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsDateTimeTypeOptionsOutputReference[_f] = { fqn: "@cdktf/provider-google.documentAiWarehouseDocumentSchema.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsDateTimeTypeOptionsOutputReference", version: "14.13.1" };
function documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsEnumTypeOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        possible_values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.possibleValues),
        validation_check_disabled: cdktf.booleanToTerraform(struct.validationCheckDisabled),
    };
}
exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsEnumTypeOptionsToTerraform = documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsEnumTypeOptionsToTerraform;
function documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsEnumTypeOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        possible_values: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.possibleValues),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        validation_check_disabled: {
            value: cdktf.booleanToHclTerraform(struct.validationCheckDisabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsEnumTypeOptionsToHclTerraform = documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsEnumTypeOptionsToHclTerraform;
class DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsEnumTypeOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._possibleValues !== undefined) {
            hasAnyValues = true;
            internalValueResult.possibleValues = this._possibleValues;
        }
        if (this._validationCheckDisabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.validationCheckDisabled = this._validationCheckDisabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._possibleValues = undefined;
            this._validationCheckDisabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._possibleValues = value.possibleValues;
            this._validationCheckDisabled = value.validationCheckDisabled;
        }
    }
    get possibleValues() {
        return this.getListAttribute('possible_values');
    }
    set possibleValues(value) {
        this._possibleValues = value;
    }
    // Temporarily expose input value. Use with caution.
    get possibleValuesInput() {
        return this._possibleValues;
    }
    get validationCheckDisabled() {
        return this.getBooleanAttribute('validation_check_disabled');
    }
    set validationCheckDisabled(value) {
        this._validationCheckDisabled = value;
    }
    resetValidationCheckDisabled() {
        this._validationCheckDisabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get validationCheckDisabledInput() {
        return this._validationCheckDisabled;
    }
}
exports.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsEnumTypeOptionsOutputReference = DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsEnumTypeOptionsOutputReference;
_g = JSII_RTTI_SYMBOL_1;
DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsEnumTypeOptionsOutputReference[_g] = { fqn: "@cdktf/provider-google.documentAiWarehouseDocumentSchema.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsEnumTypeOptionsOutputReference", version: "14.13.1" };
function documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsFloatTypeOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsFloatTypeOptionsToTerraform = documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsFloatTypeOptionsToTerraform;
function documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsFloatTypeOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsFloatTypeOptionsToHclTerraform = documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsFloatTypeOptionsToHclTerraform;
class DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsFloatTypeOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsFloatTypeOptionsOutputReference = DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsFloatTypeOptionsOutputReference;
_h = JSII_RTTI_SYMBOL_1;
DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsFloatTypeOptionsOutputReference[_h] = { fqn: "@cdktf/provider-google.documentAiWarehouseDocumentSchema.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsFloatTypeOptionsOutputReference", version: "14.13.1" };
function documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsIntegerTypeOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsIntegerTypeOptionsToTerraform = documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsIntegerTypeOptionsToTerraform;
function documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsIntegerTypeOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsIntegerTypeOptionsToHclTerraform = documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsIntegerTypeOptionsToHclTerraform;
class DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsIntegerTypeOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsIntegerTypeOptionsOutputReference = DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsIntegerTypeOptionsOutputReference;
_j = JSII_RTTI_SYMBOL_1;
DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsIntegerTypeOptionsOutputReference[_j] = { fqn: "@cdktf/provider-google.documentAiWarehouseDocumentSchema.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsIntegerTypeOptionsOutputReference", version: "14.13.1" };
function documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsMapTypeOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsMapTypeOptionsToTerraform = documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsMapTypeOptionsToTerraform;
function documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsMapTypeOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsMapTypeOptionsToHclTerraform = documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsMapTypeOptionsToHclTerraform;
class DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsMapTypeOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsMapTypeOptionsOutputReference = DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsMapTypeOptionsOutputReference;
_k = JSII_RTTI_SYMBOL_1;
DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsMapTypeOptionsOutputReference[_k] = { fqn: "@cdktf/provider-google.documentAiWarehouseDocumentSchema.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsMapTypeOptionsOutputReference", version: "14.13.1" };
function documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsSchemaSourcesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        processor_type: cdktf.stringToTerraform(struct.processorType),
    };
}
exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsSchemaSourcesToTerraform = documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsSchemaSourcesToTerraform;
function documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsSchemaSourcesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        processor_type: {
            value: cdktf.stringToHclTerraform(struct.processorType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsSchemaSourcesToHclTerraform = documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsSchemaSourcesToHclTerraform;
class DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsSchemaSourcesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._processorType !== undefined) {
            hasAnyValues = true;
            internalValueResult.processorType = this._processorType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
            this._processorType = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
            this._processorType = value.processorType;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get processorType() {
        return this.getStringAttribute('processor_type');
    }
    set processorType(value) {
        this._processorType = value;
    }
    resetProcessorType() {
        this._processorType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get processorTypeInput() {
        return this._processorType;
    }
}
exports.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsSchemaSourcesOutputReference = DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsSchemaSourcesOutputReference;
_l = JSII_RTTI_SYMBOL_1;
DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsSchemaSourcesOutputReference[_l] = { fqn: "@cdktf/provider-google.documentAiWarehouseDocumentSchema.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsSchemaSourcesOutputReference", version: "14.13.1" };
class DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsSchemaSourcesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsSchemaSourcesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsSchemaSourcesList = DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsSchemaSourcesList;
_m = JSII_RTTI_SYMBOL_1;
DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsSchemaSourcesList[_m] = { fqn: "@cdktf/provider-google.documentAiWarehouseDocumentSchema.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsSchemaSourcesList", version: "14.13.1" };
function documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsTextTypeOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsTextTypeOptionsToTerraform = documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsTextTypeOptionsToTerraform;
function documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsTextTypeOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsTextTypeOptionsToHclTerraform = documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsTextTypeOptionsToHclTerraform;
class DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsTextTypeOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsTextTypeOptionsOutputReference = DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsTextTypeOptionsOutputReference;
_o = JSII_RTTI_SYMBOL_1;
DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsTextTypeOptionsOutputReference[_o] = { fqn: "@cdktf/provider-google.documentAiWarehouseDocumentSchema.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsTextTypeOptionsOutputReference", version: "14.13.1" };
function documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsTimestampTypeOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsTimestampTypeOptionsToTerraform = documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsTimestampTypeOptionsToTerraform;
function documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsTimestampTypeOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsTimestampTypeOptionsToHclTerraform = documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsTimestampTypeOptionsToHclTerraform;
class DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsTimestampTypeOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsTimestampTypeOptionsOutputReference = DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsTimestampTypeOptionsOutputReference;
_p = JSII_RTTI_SYMBOL_1;
DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsTimestampTypeOptionsOutputReference[_p] = { fqn: "@cdktf/provider-google.documentAiWarehouseDocumentSchema.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsTimestampTypeOptionsOutputReference", version: "14.13.1" };
function documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        display_name: cdktf.stringToTerraform(struct.displayName),
        is_filterable: cdktf.booleanToTerraform(struct.isFilterable),
        is_metadata: cdktf.booleanToTerraform(struct.isMetadata),
        is_repeatable: cdktf.booleanToTerraform(struct.isRepeatable),
        is_required: cdktf.booleanToTerraform(struct.isRequired),
        is_searchable: cdktf.booleanToTerraform(struct.isSearchable),
        name: cdktf.stringToTerraform(struct.name),
        retrieval_importance: cdktf.stringToTerraform(struct.retrievalImportance),
        date_time_type_options: documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsDateTimeTypeOptionsToTerraform(struct.dateTimeTypeOptions),
        enum_type_options: documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsEnumTypeOptionsToTerraform(struct.enumTypeOptions),
        float_type_options: documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsFloatTypeOptionsToTerraform(struct.floatTypeOptions),
        integer_type_options: documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsIntegerTypeOptionsToTerraform(struct.integerTypeOptions),
        map_type_options: documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsMapTypeOptionsToTerraform(struct.mapTypeOptions),
        schema_sources: cdktf.listMapper(documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsSchemaSourcesToTerraform, true)(struct.schemaSources),
        text_type_options: documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsTextTypeOptionsToTerraform(struct.textTypeOptions),
        timestamp_type_options: documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsTimestampTypeOptionsToTerraform(struct.timestampTypeOptions),
    };
}
exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsToTerraform = documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsToTerraform;
function documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        display_name: {
            value: cdktf.stringToHclTerraform(struct.displayName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        is_filterable: {
            value: cdktf.booleanToHclTerraform(struct.isFilterable),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        is_metadata: {
            value: cdktf.booleanToHclTerraform(struct.isMetadata),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        is_repeatable: {
            value: cdktf.booleanToHclTerraform(struct.isRepeatable),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        is_required: {
            value: cdktf.booleanToHclTerraform(struct.isRequired),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        is_searchable: {
            value: cdktf.booleanToHclTerraform(struct.isSearchable),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        retrieval_importance: {
            value: cdktf.stringToHclTerraform(struct.retrievalImportance),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        date_time_type_options: {
            value: documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsDateTimeTypeOptionsToHclTerraform(struct.dateTimeTypeOptions),
            isBlock: true,
            type: "list",
            storageClassType: "DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsDateTimeTypeOptionsList",
        },
        enum_type_options: {
            value: documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsEnumTypeOptionsToHclTerraform(struct.enumTypeOptions),
            isBlock: true,
            type: "list",
            storageClassType: "DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsEnumTypeOptionsList",
        },
        float_type_options: {
            value: documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsFloatTypeOptionsToHclTerraform(struct.floatTypeOptions),
            isBlock: true,
            type: "list",
            storageClassType: "DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsFloatTypeOptionsList",
        },
        integer_type_options: {
            value: documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsIntegerTypeOptionsToHclTerraform(struct.integerTypeOptions),
            isBlock: true,
            type: "list",
            storageClassType: "DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsIntegerTypeOptionsList",
        },
        map_type_options: {
            value: documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsMapTypeOptionsToHclTerraform(struct.mapTypeOptions),
            isBlock: true,
            type: "list",
            storageClassType: "DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsMapTypeOptionsList",
        },
        schema_sources: {
            value: cdktf.listMapperHcl(documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsSchemaSourcesToHclTerraform, true)(struct.schemaSources),
            isBlock: true,
            type: "list",
            storageClassType: "DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsSchemaSourcesList",
        },
        text_type_options: {
            value: documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsTextTypeOptionsToHclTerraform(struct.textTypeOptions),
            isBlock: true,
            type: "list",
            storageClassType: "DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsTextTypeOptionsList",
        },
        timestamp_type_options: {
            value: documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsTimestampTypeOptionsToHclTerraform(struct.timestampTypeOptions),
            isBlock: true,
            type: "list",
            storageClassType: "DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsTimestampTypeOptionsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsToHclTerraform = documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsToHclTerraform;
class DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // date_time_type_options - computed: false, optional: true, required: false
        this._dateTimeTypeOptions = new DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsDateTimeTypeOptionsOutputReference(this, "date_time_type_options");
        // enum_type_options - computed: false, optional: true, required: false
        this._enumTypeOptions = new DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsEnumTypeOptionsOutputReference(this, "enum_type_options");
        // float_type_options - computed: false, optional: true, required: false
        this._floatTypeOptions = new DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsFloatTypeOptionsOutputReference(this, "float_type_options");
        // integer_type_options - computed: false, optional: true, required: false
        this._integerTypeOptions = new DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsIntegerTypeOptionsOutputReference(this, "integer_type_options");
        // map_type_options - computed: false, optional: true, required: false
        this._mapTypeOptions = new DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsMapTypeOptionsOutputReference(this, "map_type_options");
        // schema_sources - computed: false, optional: true, required: false
        this._schemaSources = new DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsSchemaSourcesList(this, "schema_sources", false);
        // text_type_options - computed: false, optional: true, required: false
        this._textTypeOptions = new DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsTextTypeOptionsOutputReference(this, "text_type_options");
        // timestamp_type_options - computed: false, optional: true, required: false
        this._timestampTypeOptions = new DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsTimestampTypeOptionsOutputReference(this, "timestamp_type_options");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._displayName !== undefined) {
            hasAnyValues = true;
            internalValueResult.displayName = this._displayName;
        }
        if (this._isFilterable !== undefined) {
            hasAnyValues = true;
            internalValueResult.isFilterable = this._isFilterable;
        }
        if (this._isMetadata !== undefined) {
            hasAnyValues = true;
            internalValueResult.isMetadata = this._isMetadata;
        }
        if (this._isRepeatable !== undefined) {
            hasAnyValues = true;
            internalValueResult.isRepeatable = this._isRepeatable;
        }
        if (this._isRequired !== undefined) {
            hasAnyValues = true;
            internalValueResult.isRequired = this._isRequired;
        }
        if (this._isSearchable !== undefined) {
            hasAnyValues = true;
            internalValueResult.isSearchable = this._isSearchable;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._retrievalImportance !== undefined) {
            hasAnyValues = true;
            internalValueResult.retrievalImportance = this._retrievalImportance;
        }
        if (this._dateTimeTypeOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dateTimeTypeOptions = this._dateTimeTypeOptions?.internalValue;
        }
        if (this._enumTypeOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.enumTypeOptions = this._enumTypeOptions?.internalValue;
        }
        if (this._floatTypeOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.floatTypeOptions = this._floatTypeOptions?.internalValue;
        }
        if (this._integerTypeOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.integerTypeOptions = this._integerTypeOptions?.internalValue;
        }
        if (this._mapTypeOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mapTypeOptions = this._mapTypeOptions?.internalValue;
        }
        if (this._schemaSources?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.schemaSources = this._schemaSources?.internalValue;
        }
        if (this._textTypeOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.textTypeOptions = this._textTypeOptions?.internalValue;
        }
        if (this._timestampTypeOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.timestampTypeOptions = this._timestampTypeOptions?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._displayName = undefined;
            this._isFilterable = undefined;
            this._isMetadata = undefined;
            this._isRepeatable = undefined;
            this._isRequired = undefined;
            this._isSearchable = undefined;
            this._name = undefined;
            this._retrievalImportance = undefined;
            this._dateTimeTypeOptions.internalValue = undefined;
            this._enumTypeOptions.internalValue = undefined;
            this._floatTypeOptions.internalValue = undefined;
            this._integerTypeOptions.internalValue = undefined;
            this._mapTypeOptions.internalValue = undefined;
            this._schemaSources.internalValue = undefined;
            this._textTypeOptions.internalValue = undefined;
            this._timestampTypeOptions.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._displayName = value.displayName;
            this._isFilterable = value.isFilterable;
            this._isMetadata = value.isMetadata;
            this._isRepeatable = value.isRepeatable;
            this._isRequired = value.isRequired;
            this._isSearchable = value.isSearchable;
            this._name = value.name;
            this._retrievalImportance = value.retrievalImportance;
            this._dateTimeTypeOptions.internalValue = value.dateTimeTypeOptions;
            this._enumTypeOptions.internalValue = value.enumTypeOptions;
            this._floatTypeOptions.internalValue = value.floatTypeOptions;
            this._integerTypeOptions.internalValue = value.integerTypeOptions;
            this._mapTypeOptions.internalValue = value.mapTypeOptions;
            this._schemaSources.internalValue = value.schemaSources;
            this._textTypeOptions.internalValue = value.textTypeOptions;
            this._timestampTypeOptions.internalValue = value.timestampTypeOptions;
        }
    }
    get displayName() {
        return this.getStringAttribute('display_name');
    }
    set displayName(value) {
        this._displayName = value;
    }
    resetDisplayName() {
        this._displayName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get displayNameInput() {
        return this._displayName;
    }
    get isFilterable() {
        return this.getBooleanAttribute('is_filterable');
    }
    set isFilterable(value) {
        this._isFilterable = value;
    }
    resetIsFilterable() {
        this._isFilterable = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get isFilterableInput() {
        return this._isFilterable;
    }
    get isMetadata() {
        return this.getBooleanAttribute('is_metadata');
    }
    set isMetadata(value) {
        this._isMetadata = value;
    }
    resetIsMetadata() {
        this._isMetadata = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get isMetadataInput() {
        return this._isMetadata;
    }
    get isRepeatable() {
        return this.getBooleanAttribute('is_repeatable');
    }
    set isRepeatable(value) {
        this._isRepeatable = value;
    }
    resetIsRepeatable() {
        this._isRepeatable = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get isRepeatableInput() {
        return this._isRepeatable;
    }
    get isRequired() {
        return this.getBooleanAttribute('is_required');
    }
    set isRequired(value) {
        this._isRequired = value;
    }
    resetIsRequired() {
        this._isRequired = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get isRequiredInput() {
        return this._isRequired;
    }
    get isSearchable() {
        return this.getBooleanAttribute('is_searchable');
    }
    set isSearchable(value) {
        this._isSearchable = value;
    }
    resetIsSearchable() {
        this._isSearchable = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get isSearchableInput() {
        return this._isSearchable;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get retrievalImportance() {
        return this.getStringAttribute('retrieval_importance');
    }
    set retrievalImportance(value) {
        this._retrievalImportance = value;
    }
    resetRetrievalImportance() {
        this._retrievalImportance = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retrievalImportanceInput() {
        return this._retrievalImportance;
    }
    get dateTimeTypeOptions() {
        return this._dateTimeTypeOptions;
    }
    putDateTimeTypeOptions(value) {
        this._dateTimeTypeOptions.internalValue = value;
    }
    resetDateTimeTypeOptions() {
        this._dateTimeTypeOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dateTimeTypeOptionsInput() {
        return this._dateTimeTypeOptions.internalValue;
    }
    get enumTypeOptions() {
        return this._enumTypeOptions;
    }
    putEnumTypeOptions(value) {
        this._enumTypeOptions.internalValue = value;
    }
    resetEnumTypeOptions() {
        this._enumTypeOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enumTypeOptionsInput() {
        return this._enumTypeOptions.internalValue;
    }
    get floatTypeOptions() {
        return this._floatTypeOptions;
    }
    putFloatTypeOptions(value) {
        this._floatTypeOptions.internalValue = value;
    }
    resetFloatTypeOptions() {
        this._floatTypeOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get floatTypeOptionsInput() {
        return this._floatTypeOptions.internalValue;
    }
    get integerTypeOptions() {
        return this._integerTypeOptions;
    }
    putIntegerTypeOptions(value) {
        this._integerTypeOptions.internalValue = value;
    }
    resetIntegerTypeOptions() {
        this._integerTypeOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get integerTypeOptionsInput() {
        return this._integerTypeOptions.internalValue;
    }
    get mapTypeOptions() {
        return this._mapTypeOptions;
    }
    putMapTypeOptions(value) {
        this._mapTypeOptions.internalValue = value;
    }
    resetMapTypeOptions() {
        this._mapTypeOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mapTypeOptionsInput() {
        return this._mapTypeOptions.internalValue;
    }
    get schemaSources() {
        return this._schemaSources;
    }
    putSchemaSources(value) {
        this._schemaSources.internalValue = value;
    }
    resetSchemaSources() {
        this._schemaSources.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get schemaSourcesInput() {
        return this._schemaSources.internalValue;
    }
    get textTypeOptions() {
        return this._textTypeOptions;
    }
    putTextTypeOptions(value) {
        this._textTypeOptions.internalValue = value;
    }
    resetTextTypeOptions() {
        this._textTypeOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get textTypeOptionsInput() {
        return this._textTypeOptions.internalValue;
    }
    get timestampTypeOptions() {
        return this._timestampTypeOptions;
    }
    putTimestampTypeOptions(value) {
        this._timestampTypeOptions.internalValue = value;
    }
    resetTimestampTypeOptions() {
        this._timestampTypeOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timestampTypeOptionsInput() {
        return this._timestampTypeOptions.internalValue;
    }
}
exports.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsOutputReference = DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsOutputReference;
_q = JSII_RTTI_SYMBOL_1;
DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsOutputReference[_q] = { fqn: "@cdktf/provider-google.documentAiWarehouseDocumentSchema.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsOutputReference", version: "14.13.1" };
class DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsList = DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsList;
_r = JSII_RTTI_SYMBOL_1;
DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsList[_r] = { fqn: "@cdktf/provider-google.documentAiWarehouseDocumentSchema.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsList", version: "14.13.1" };
function documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        property_definitions: cdktf.listMapper(documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsToTerraform, true)(struct.propertyDefinitions),
    };
}
exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsToTerraform = documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsToTerraform;
function documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        property_definitions: {
            value: cdktf.listMapperHcl(documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsToHclTerraform, true)(struct.propertyDefinitions),
            isBlock: true,
            type: "list",
            storageClassType: "DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsToHclTerraform = documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsToHclTerraform;
class DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // property_definitions - computed: false, optional: false, required: true
        this._propertyDefinitions = new DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsList(this, "property_definitions", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._propertyDefinitions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.propertyDefinitions = this._propertyDefinitions?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._propertyDefinitions.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._propertyDefinitions.internalValue = value.propertyDefinitions;
        }
    }
    get propertyDefinitions() {
        return this._propertyDefinitions;
    }
    putPropertyDefinitions(value) {
        this._propertyDefinitions.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get propertyDefinitionsInput() {
        return this._propertyDefinitions.internalValue;
    }
}
exports.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsOutputReference = DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsOutputReference;
_s = JSII_RTTI_SYMBOL_1;
DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsOutputReference[_s] = { fqn: "@cdktf/provider-google.documentAiWarehouseDocumentSchema.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsOutputReference", version: "14.13.1" };
function documentAiWarehouseDocumentSchemaPropertyDefinitionsSchemaSourcesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        processor_type: cdktf.stringToTerraform(struct.processorType),
    };
}
exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsSchemaSourcesToTerraform = documentAiWarehouseDocumentSchemaPropertyDefinitionsSchemaSourcesToTerraform;
function documentAiWarehouseDocumentSchemaPropertyDefinitionsSchemaSourcesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        processor_type: {
            value: cdktf.stringToHclTerraform(struct.processorType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsSchemaSourcesToHclTerraform = documentAiWarehouseDocumentSchemaPropertyDefinitionsSchemaSourcesToHclTerraform;
class DocumentAiWarehouseDocumentSchemaPropertyDefinitionsSchemaSourcesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._processorType !== undefined) {
            hasAnyValues = true;
            internalValueResult.processorType = this._processorType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
            this._processorType = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
            this._processorType = value.processorType;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get processorType() {
        return this.getStringAttribute('processor_type');
    }
    set processorType(value) {
        this._processorType = value;
    }
    resetProcessorType() {
        this._processorType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get processorTypeInput() {
        return this._processorType;
    }
}
exports.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsSchemaSourcesOutputReference = DocumentAiWarehouseDocumentSchemaPropertyDefinitionsSchemaSourcesOutputReference;
_t = JSII_RTTI_SYMBOL_1;
DocumentAiWarehouseDocumentSchemaPropertyDefinitionsSchemaSourcesOutputReference[_t] = { fqn: "@cdktf/provider-google.documentAiWarehouseDocumentSchema.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsSchemaSourcesOutputReference", version: "14.13.1" };
class DocumentAiWarehouseDocumentSchemaPropertyDefinitionsSchemaSourcesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DocumentAiWarehouseDocumentSchemaPropertyDefinitionsSchemaSourcesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsSchemaSourcesList = DocumentAiWarehouseDocumentSchemaPropertyDefinitionsSchemaSourcesList;
_u = JSII_RTTI_SYMBOL_1;
DocumentAiWarehouseDocumentSchemaPropertyDefinitionsSchemaSourcesList[_u] = { fqn: "@cdktf/provider-google.documentAiWarehouseDocumentSchema.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsSchemaSourcesList", version: "14.13.1" };
function documentAiWarehouseDocumentSchemaPropertyDefinitionsTextTypeOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsTextTypeOptionsToTerraform = documentAiWarehouseDocumentSchemaPropertyDefinitionsTextTypeOptionsToTerraform;
function documentAiWarehouseDocumentSchemaPropertyDefinitionsTextTypeOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsTextTypeOptionsToHclTerraform = documentAiWarehouseDocumentSchemaPropertyDefinitionsTextTypeOptionsToHclTerraform;
class DocumentAiWarehouseDocumentSchemaPropertyDefinitionsTextTypeOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsTextTypeOptionsOutputReference = DocumentAiWarehouseDocumentSchemaPropertyDefinitionsTextTypeOptionsOutputReference;
_v = JSII_RTTI_SYMBOL_1;
DocumentAiWarehouseDocumentSchemaPropertyDefinitionsTextTypeOptionsOutputReference[_v] = { fqn: "@cdktf/provider-google.documentAiWarehouseDocumentSchema.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsTextTypeOptionsOutputReference", version: "14.13.1" };
function documentAiWarehouseDocumentSchemaPropertyDefinitionsTimestampTypeOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsTimestampTypeOptionsToTerraform = documentAiWarehouseDocumentSchemaPropertyDefinitionsTimestampTypeOptionsToTerraform;
function documentAiWarehouseDocumentSchemaPropertyDefinitionsTimestampTypeOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsTimestampTypeOptionsToHclTerraform = documentAiWarehouseDocumentSchemaPropertyDefinitionsTimestampTypeOptionsToHclTerraform;
class DocumentAiWarehouseDocumentSchemaPropertyDefinitionsTimestampTypeOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsTimestampTypeOptionsOutputReference = DocumentAiWarehouseDocumentSchemaPropertyDefinitionsTimestampTypeOptionsOutputReference;
_w = JSII_RTTI_SYMBOL_1;
DocumentAiWarehouseDocumentSchemaPropertyDefinitionsTimestampTypeOptionsOutputReference[_w] = { fqn: "@cdktf/provider-google.documentAiWarehouseDocumentSchema.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsTimestampTypeOptionsOutputReference", version: "14.13.1" };
function documentAiWarehouseDocumentSchemaPropertyDefinitionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        display_name: cdktf.stringToTerraform(struct.displayName),
        is_filterable: cdktf.booleanToTerraform(struct.isFilterable),
        is_metadata: cdktf.booleanToTerraform(struct.isMetadata),
        is_repeatable: cdktf.booleanToTerraform(struct.isRepeatable),
        is_required: cdktf.booleanToTerraform(struct.isRequired),
        is_searchable: cdktf.booleanToTerraform(struct.isSearchable),
        name: cdktf.stringToTerraform(struct.name),
        retrieval_importance: cdktf.stringToTerraform(struct.retrievalImportance),
        date_time_type_options: documentAiWarehouseDocumentSchemaPropertyDefinitionsDateTimeTypeOptionsToTerraform(struct.dateTimeTypeOptions),
        enum_type_options: documentAiWarehouseDocumentSchemaPropertyDefinitionsEnumTypeOptionsToTerraform(struct.enumTypeOptions),
        float_type_options: documentAiWarehouseDocumentSchemaPropertyDefinitionsFloatTypeOptionsToTerraform(struct.floatTypeOptions),
        integer_type_options: documentAiWarehouseDocumentSchemaPropertyDefinitionsIntegerTypeOptionsToTerraform(struct.integerTypeOptions),
        map_type_options: documentAiWarehouseDocumentSchemaPropertyDefinitionsMapTypeOptionsToTerraform(struct.mapTypeOptions),
        property_type_options: documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsToTerraform(struct.propertyTypeOptions),
        schema_sources: cdktf.listMapper(documentAiWarehouseDocumentSchemaPropertyDefinitionsSchemaSourcesToTerraform, true)(struct.schemaSources),
        text_type_options: documentAiWarehouseDocumentSchemaPropertyDefinitionsTextTypeOptionsToTerraform(struct.textTypeOptions),
        timestamp_type_options: documentAiWarehouseDocumentSchemaPropertyDefinitionsTimestampTypeOptionsToTerraform(struct.timestampTypeOptions),
    };
}
exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsToTerraform = documentAiWarehouseDocumentSchemaPropertyDefinitionsToTerraform;
function documentAiWarehouseDocumentSchemaPropertyDefinitionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        display_name: {
            value: cdktf.stringToHclTerraform(struct.displayName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        is_filterable: {
            value: cdktf.booleanToHclTerraform(struct.isFilterable),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        is_metadata: {
            value: cdktf.booleanToHclTerraform(struct.isMetadata),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        is_repeatable: {
            value: cdktf.booleanToHclTerraform(struct.isRepeatable),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        is_required: {
            value: cdktf.booleanToHclTerraform(struct.isRequired),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        is_searchable: {
            value: cdktf.booleanToHclTerraform(struct.isSearchable),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        retrieval_importance: {
            value: cdktf.stringToHclTerraform(struct.retrievalImportance),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        date_time_type_options: {
            value: documentAiWarehouseDocumentSchemaPropertyDefinitionsDateTimeTypeOptionsToHclTerraform(struct.dateTimeTypeOptions),
            isBlock: true,
            type: "list",
            storageClassType: "DocumentAiWarehouseDocumentSchemaPropertyDefinitionsDateTimeTypeOptionsList",
        },
        enum_type_options: {
            value: documentAiWarehouseDocumentSchemaPropertyDefinitionsEnumTypeOptionsToHclTerraform(struct.enumTypeOptions),
            isBlock: true,
            type: "list",
            storageClassType: "DocumentAiWarehouseDocumentSchemaPropertyDefinitionsEnumTypeOptionsList",
        },
        float_type_options: {
            value: documentAiWarehouseDocumentSchemaPropertyDefinitionsFloatTypeOptionsToHclTerraform(struct.floatTypeOptions),
            isBlock: true,
            type: "list",
            storageClassType: "DocumentAiWarehouseDocumentSchemaPropertyDefinitionsFloatTypeOptionsList",
        },
        integer_type_options: {
            value: documentAiWarehouseDocumentSchemaPropertyDefinitionsIntegerTypeOptionsToHclTerraform(struct.integerTypeOptions),
            isBlock: true,
            type: "list",
            storageClassType: "DocumentAiWarehouseDocumentSchemaPropertyDefinitionsIntegerTypeOptionsList",
        },
        map_type_options: {
            value: documentAiWarehouseDocumentSchemaPropertyDefinitionsMapTypeOptionsToHclTerraform(struct.mapTypeOptions),
            isBlock: true,
            type: "list",
            storageClassType: "DocumentAiWarehouseDocumentSchemaPropertyDefinitionsMapTypeOptionsList",
        },
        property_type_options: {
            value: documentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsToHclTerraform(struct.propertyTypeOptions),
            isBlock: true,
            type: "list",
            storageClassType: "DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsList",
        },
        schema_sources: {
            value: cdktf.listMapperHcl(documentAiWarehouseDocumentSchemaPropertyDefinitionsSchemaSourcesToHclTerraform, true)(struct.schemaSources),
            isBlock: true,
            type: "list",
            storageClassType: "DocumentAiWarehouseDocumentSchemaPropertyDefinitionsSchemaSourcesList",
        },
        text_type_options: {
            value: documentAiWarehouseDocumentSchemaPropertyDefinitionsTextTypeOptionsToHclTerraform(struct.textTypeOptions),
            isBlock: true,
            type: "list",
            storageClassType: "DocumentAiWarehouseDocumentSchemaPropertyDefinitionsTextTypeOptionsList",
        },
        timestamp_type_options: {
            value: documentAiWarehouseDocumentSchemaPropertyDefinitionsTimestampTypeOptionsToHclTerraform(struct.timestampTypeOptions),
            isBlock: true,
            type: "list",
            storageClassType: "DocumentAiWarehouseDocumentSchemaPropertyDefinitionsTimestampTypeOptionsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.documentAiWarehouseDocumentSchemaPropertyDefinitionsToHclTerraform = documentAiWarehouseDocumentSchemaPropertyDefinitionsToHclTerraform;
class DocumentAiWarehouseDocumentSchemaPropertyDefinitionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // date_time_type_options - computed: false, optional: true, required: false
        this._dateTimeTypeOptions = new DocumentAiWarehouseDocumentSchemaPropertyDefinitionsDateTimeTypeOptionsOutputReference(this, "date_time_type_options");
        // enum_type_options - computed: false, optional: true, required: false
        this._enumTypeOptions = new DocumentAiWarehouseDocumentSchemaPropertyDefinitionsEnumTypeOptionsOutputReference(this, "enum_type_options");
        // float_type_options - computed: false, optional: true, required: false
        this._floatTypeOptions = new DocumentAiWarehouseDocumentSchemaPropertyDefinitionsFloatTypeOptionsOutputReference(this, "float_type_options");
        // integer_type_options - computed: false, optional: true, required: false
        this._integerTypeOptions = new DocumentAiWarehouseDocumentSchemaPropertyDefinitionsIntegerTypeOptionsOutputReference(this, "integer_type_options");
        // map_type_options - computed: false, optional: true, required: false
        this._mapTypeOptions = new DocumentAiWarehouseDocumentSchemaPropertyDefinitionsMapTypeOptionsOutputReference(this, "map_type_options");
        // property_type_options - computed: false, optional: true, required: false
        this._propertyTypeOptions = new DocumentAiWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsOutputReference(this, "property_type_options");
        // schema_sources - computed: false, optional: true, required: false
        this._schemaSources = new DocumentAiWarehouseDocumentSchemaPropertyDefinitionsSchemaSourcesList(this, "schema_sources", false);
        // text_type_options - computed: false, optional: true, required: false
        this._textTypeOptions = new DocumentAiWarehouseDocumentSchemaPropertyDefinitionsTextTypeOptionsOutputReference(this, "text_type_options");
        // timestamp_type_options - computed: false, optional: true, required: false
        this._timestampTypeOptions = new DocumentAiWarehouseDocumentSchemaPropertyDefinitionsTimestampTypeOptionsOutputReference(this, "timestamp_type_options");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._displayName !== undefined) {
            hasAnyValues = true;
            internalValueResult.displayName = this._displayName;
        }
        if (this._isFilterable !== undefined) {
            hasAnyValues = true;
            internalValueResult.isFilterable = this._isFilterable;
        }
        if (this._isMetadata !== undefined) {
            hasAnyValues = true;
            internalValueResult.isMetadata = this._isMetadata;
        }
        if (this._isRepeatable !== undefined) {
            hasAnyValues = true;
            internalValueResult.isRepeatable = this._isRepeatable;
        }
        if (this._isRequired !== undefined) {
            hasAnyValues = true;
            internalValueResult.isRequired = this._isRequired;
        }
        if (this._isSearchable !== undefined) {
            hasAnyValues = true;
            internalValueResult.isSearchable = this._isSearchable;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._retrievalImportance !== undefined) {
            hasAnyValues = true;
            internalValueResult.retrievalImportance = this._retrievalImportance;
        }
        if (this._dateTimeTypeOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dateTimeTypeOptions = this._dateTimeTypeOptions?.internalValue;
        }
        if (this._enumTypeOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.enumTypeOptions = this._enumTypeOptions?.internalValue;
        }
        if (this._floatTypeOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.floatTypeOptions = this._floatTypeOptions?.internalValue;
        }
        if (this._integerTypeOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.integerTypeOptions = this._integerTypeOptions?.internalValue;
        }
        if (this._mapTypeOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mapTypeOptions = this._mapTypeOptions?.internalValue;
        }
        if (this._propertyTypeOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.propertyTypeOptions = this._propertyTypeOptions?.internalValue;
        }
        if (this._schemaSources?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.schemaSources = this._schemaSources?.internalValue;
        }
        if (this._textTypeOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.textTypeOptions = this._textTypeOptions?.internalValue;
        }
        if (this._timestampTypeOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.timestampTypeOptions = this._timestampTypeOptions?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._displayName = undefined;
            this._isFilterable = undefined;
            this._isMetadata = undefined;
            this._isRepeatable = undefined;
            this._isRequired = undefined;
            this._isSearchable = undefined;
            this._name = undefined;
            this._retrievalImportance = undefined;
            this._dateTimeTypeOptions.internalValue = undefined;
            this._enumTypeOptions.internalValue = undefined;
            this._floatTypeOptions.internalValue = undefined;
            this._integerTypeOptions.internalValue = undefined;
            this._mapTypeOptions.internalValue = undefined;
            this._propertyTypeOptions.internalValue = undefined;
            this._schemaSources.internalValue = undefined;
            this._textTypeOptions.internalValue = undefined;
            this._timestampTypeOptions.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._displayName = value.displayName;
            this._isFilterable = value.isFilterable;
            this._isMetadata = value.isMetadata;
            this._isRepeatable = value.isRepeatable;
            this._isRequired = value.isRequired;
            this._isSearchable = value.isSearchable;
            this._name = value.name;
            this._retrievalImportance = value.retrievalImportance;
            this._dateTimeTypeOptions.internalValue = value.dateTimeTypeOptions;
            this._enumTypeOptions.internalValue = value.enumTypeOptions;
            this._floatTypeOptions.internalValue = value.floatTypeOptions;
            this._integerTypeOptions.internalValue = value.integerTypeOptions;
            this._mapTypeOptions.internalValue = value.mapTypeOptions;
            this._propertyTypeOptions.internalValue = value.propertyTypeOptions;
            this._schemaSources.internalValue = value.schemaSources;
            this._textTypeOptions.internalValue = value.textTypeOptions;
            this._timestampTypeOptions.internalValue = value.timestampTypeOptions;
        }
    }
    get displayName() {
        return this.getStringAttribute('display_name');
    }
    set displayName(value) {
        this._displayName = value;
    }
    resetDisplayName() {
        this._displayName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get displayNameInput() {
        return this._displayName;
    }
    get isFilterable() {
        return this.getBooleanAttribute('is_filterable');
    }
    set isFilterable(value) {
        this._isFilterable = value;
    }
    resetIsFilterable() {
        this._isFilterable = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get isFilterableInput() {
        return this._isFilterable;
    }
    get isMetadata() {
        return this.getBooleanAttribute('is_metadata');
    }
    set isMetadata(value) {
        this._isMetadata = value;
    }
    resetIsMetadata() {
        this._isMetadata = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get isMetadataInput() {
        return this._isMetadata;
    }
    get isRepeatable() {
        return this.getBooleanAttribute('is_repeatable');
    }
    set isRepeatable(value) {
        this._isRepeatable = value;
    }
    resetIsRepeatable() {
        this._isRepeatable = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get isRepeatableInput() {
        return this._isRepeatable;
    }
    get isRequired() {
        return this.getBooleanAttribute('is_required');
    }
    set isRequired(value) {
        this._isRequired = value;
    }
    resetIsRequired() {
        this._isRequired = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get isRequiredInput() {
        return this._isRequired;
    }
    get isSearchable() {
        return this.getBooleanAttribute('is_searchable');
    }
    set isSearchable(value) {
        this._isSearchable = value;
    }
    resetIsSearchable() {
        this._isSearchable = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get isSearchableInput() {
        return this._isSearchable;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get retrievalImportance() {
        return this.getStringAttribute('retrieval_importance');
    }
    set retrievalImportance(value) {
        this._retrievalImportance = value;
    }
    resetRetrievalImportance() {
        this._retrievalImportance = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retrievalImportanceInput() {
        return this._retrievalImportance;
    }
    get dateTimeTypeOptions() {
        return this._dateTimeTypeOptions;
    }
    putDateTimeTypeOptions(value) {
        this._dateTimeTypeOptions.internalValue = value;
    }
    resetDateTimeTypeOptions() {
        this._dateTimeTypeOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dateTimeTypeOptionsInput() {
        return this._dateTimeTypeOptions.internalValue;
    }
    get enumTypeOptions() {
        return this._enumTypeOptions;
    }
    putEnumTypeOptions(value) {
        this._enumTypeOptions.internalValue = value;
    }
    resetEnumTypeOptions() {
        this._enumTypeOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enumTypeOptionsInput() {
        return this._enumTypeOptions.internalValue;
    }
    get floatTypeOptions() {
        return this._floatTypeOptions;
    }
    putFloatTypeOptions(value) {
        this._floatTypeOptions.internalValue = value;
    }
    resetFloatTypeOptions() {
        this._floatTypeOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get floatTypeOptionsInput() {
        return this._floatTypeOptions.internalValue;
    }
    get integerTypeOptions() {
        return this._integerTypeOptions;
    }
    putIntegerTypeOptions(value) {
        this._integerTypeOptions.internalValue = value;
    }
    resetIntegerTypeOptions() {
        this._integerTypeOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get integerTypeOptionsInput() {
        return this._integerTypeOptions.internalValue;
    }
    get mapTypeOptions() {
        return this._mapTypeOptions;
    }
    putMapTypeOptions(value) {
        this._mapTypeOptions.internalValue = value;
    }
    resetMapTypeOptions() {
        this._mapTypeOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mapTypeOptionsInput() {
        return this._mapTypeOptions.internalValue;
    }
    get propertyTypeOptions() {
        return this._propertyTypeOptions;
    }
    putPropertyTypeOptions(value) {
        this._propertyTypeOptions.internalValue = value;
    }
    resetPropertyTypeOptions() {
        this._propertyTypeOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get propertyTypeOptionsInput() {
        return this._propertyTypeOptions.internalValue;
    }
    get schemaSources() {
        return this._schemaSources;
    }
    putSchemaSources(value) {
        this._schemaSources.internalValue = value;
    }
    resetSchemaSources() {
        this._schemaSources.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get schemaSourcesInput() {
        return this._schemaSources.internalValue;
    }
    get textTypeOptions() {
        return this._textTypeOptions;
    }
    putTextTypeOptions(value) {
        this._textTypeOptions.internalValue = value;
    }
    resetTextTypeOptions() {
        this._textTypeOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get textTypeOptionsInput() {
        return this._textTypeOptions.internalValue;
    }
    get timestampTypeOptions() {
        return this._timestampTypeOptions;
    }
    putTimestampTypeOptions(value) {
        this._timestampTypeOptions.internalValue = value;
    }
    resetTimestampTypeOptions() {
        this._timestampTypeOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timestampTypeOptionsInput() {
        return this._timestampTypeOptions.internalValue;
    }
}
exports.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsOutputReference = DocumentAiWarehouseDocumentSchemaPropertyDefinitionsOutputReference;
_x = JSII_RTTI_SYMBOL_1;
DocumentAiWarehouseDocumentSchemaPropertyDefinitionsOutputReference[_x] = { fqn: "@cdktf/provider-google.documentAiWarehouseDocumentSchema.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsOutputReference", version: "14.13.1" };
class DocumentAiWarehouseDocumentSchemaPropertyDefinitionsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DocumentAiWarehouseDocumentSchemaPropertyDefinitionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsList = DocumentAiWarehouseDocumentSchemaPropertyDefinitionsList;
_y = JSII_RTTI_SYMBOL_1;
DocumentAiWarehouseDocumentSchemaPropertyDefinitionsList[_y] = { fqn: "@cdktf/provider-google.documentAiWarehouseDocumentSchema.DocumentAiWarehouseDocumentSchemaPropertyDefinitionsList", version: "14.13.1" };
function documentAiWarehouseDocumentSchemaTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
    };
}
exports.documentAiWarehouseDocumentSchemaTimeoutsToTerraform = documentAiWarehouseDocumentSchemaTimeoutsToTerraform;
function documentAiWarehouseDocumentSchemaTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.documentAiWarehouseDocumentSchemaTimeoutsToHclTerraform = documentAiWarehouseDocumentSchemaTimeoutsToHclTerraform;
class DocumentAiWarehouseDocumentSchemaTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
}
exports.DocumentAiWarehouseDocumentSchemaTimeoutsOutputReference = DocumentAiWarehouseDocumentSchemaTimeoutsOutputReference;
_z = JSII_RTTI_SYMBOL_1;
DocumentAiWarehouseDocumentSchemaTimeoutsOutputReference[_z] = { fqn: "@cdktf/provider-google.documentAiWarehouseDocumentSchema.DocumentAiWarehouseDocumentSchemaTimeoutsOutputReference", version: "14.13.1" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/document_ai_warehouse_document_schema google_document_ai_warehouse_document_schema}
*/
class DocumentAiWarehouseDocumentSchema extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a DocumentAiWarehouseDocumentSchema resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the DocumentAiWarehouseDocumentSchema to import
    * @param importFromId The id of the existing DocumentAiWarehouseDocumentSchema that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/document_ai_warehouse_document_schema#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the DocumentAiWarehouseDocumentSchema to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_document_ai_warehouse_document_schema", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/document_ai_warehouse_document_schema google_document_ai_warehouse_document_schema} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DocumentAiWarehouseDocumentSchemaConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_document_ai_warehouse_document_schema',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // property_definitions - computed: false, optional: false, required: true
        this._propertyDefinitions = new DocumentAiWarehouseDocumentSchemaPropertyDefinitionsList(this, "property_definitions", false);
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new DocumentAiWarehouseDocumentSchemaTimeoutsOutputReference(this, "timeouts");
        this._displayName = config.displayName;
        this._documentIsFolder = config.documentIsFolder;
        this._id = config.id;
        this._location = config.location;
        this._projectNumber = config.projectNumber;
        this._propertyDefinitions.internalValue = config.propertyDefinitions;
        this._timeouts.internalValue = config.timeouts;
    }
    get displayName() {
        return this.getStringAttribute('display_name');
    }
    set displayName(value) {
        this._displayName = value;
    }
    // Temporarily expose input value. Use with caution.
    get displayNameInput() {
        return this._displayName;
    }
    get documentIsFolder() {
        return this.getBooleanAttribute('document_is_folder');
    }
    set documentIsFolder(value) {
        this._documentIsFolder = value;
    }
    resetDocumentIsFolder() {
        this._documentIsFolder = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get documentIsFolderInput() {
        return this._documentIsFolder;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get projectNumber() {
        return this.getStringAttribute('project_number');
    }
    set projectNumber(value) {
        this._projectNumber = value;
    }
    // Temporarily expose input value. Use with caution.
    get projectNumberInput() {
        return this._projectNumber;
    }
    get propertyDefinitions() {
        return this._propertyDefinitions;
    }
    putPropertyDefinitions(value) {
        this._propertyDefinitions.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get propertyDefinitionsInput() {
        return this._propertyDefinitions.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            display_name: cdktf.stringToTerraform(this._displayName),
            document_is_folder: cdktf.booleanToTerraform(this._documentIsFolder),
            id: cdktf.stringToTerraform(this._id),
            location: cdktf.stringToTerraform(this._location),
            project_number: cdktf.stringToTerraform(this._projectNumber),
            property_definitions: cdktf.listMapper(documentAiWarehouseDocumentSchemaPropertyDefinitionsToTerraform, true)(this._propertyDefinitions.internalValue),
            timeouts: documentAiWarehouseDocumentSchemaTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            display_name: {
                value: cdktf.stringToHclTerraform(this._displayName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            document_is_folder: {
                value: cdktf.booleanToHclTerraform(this._documentIsFolder),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            location: {
                value: cdktf.stringToHclTerraform(this._location),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            project_number: {
                value: cdktf.stringToHclTerraform(this._projectNumber),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            property_definitions: {
                value: cdktf.listMapperHcl(documentAiWarehouseDocumentSchemaPropertyDefinitionsToHclTerraform, true)(this._propertyDefinitions.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "DocumentAiWarehouseDocumentSchemaPropertyDefinitionsList",
            },
            timeouts: {
                value: documentAiWarehouseDocumentSchemaTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "DocumentAiWarehouseDocumentSchemaTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.DocumentAiWarehouseDocumentSchema = DocumentAiWarehouseDocumentSchema;
_0 = JSII_RTTI_SYMBOL_1;
DocumentAiWarehouseDocumentSchema[_0] = { fqn: "@cdktf/provider-google.documentAiWarehouseDocumentSchema.DocumentAiWarehouseDocumentSchema", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
DocumentAiWarehouseDocumentSchema.tfResourceType = "google_document_ai_warehouse_document_schema";
//# sourceMappingURL=data:application/json;base64,