"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82;
Object.defineProperty(exports, "__esModule", { value: true });
exports.datastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesToTerraform = exports.DatastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesColumnsList = exports.DatastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesColumnsOutputReference = exports.datastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesColumnsToHclTerraform = exports.datastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesColumnsToTerraform = exports.DatastreamStreamBackfillAllPostgresqlExcludedObjectsOutputReference = exports.datastreamStreamBackfillAllPostgresqlExcludedObjectsToHclTerraform = exports.datastreamStreamBackfillAllPostgresqlExcludedObjectsToTerraform = exports.DatastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasList = exports.DatastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasOutputReference = exports.datastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasToHclTerraform = exports.datastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasToTerraform = exports.DatastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesList = exports.DatastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesOutputReference = exports.datastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesToHclTerraform = exports.datastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesToTerraform = exports.DatastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsList = exports.DatastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsOutputReference = exports.datastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsToHclTerraform = exports.datastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsToTerraform = exports.DatastreamStreamBackfillAllOracleExcludedObjectsOutputReference = exports.datastreamStreamBackfillAllOracleExcludedObjectsToHclTerraform = exports.datastreamStreamBackfillAllOracleExcludedObjectsToTerraform = exports.DatastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasList = exports.DatastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOutputReference = exports.datastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasToHclTerraform = exports.datastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasToTerraform = exports.DatastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesList = exports.DatastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesOutputReference = exports.datastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesToHclTerraform = exports.datastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesToTerraform = exports.DatastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesOracleColumnsList = exports.DatastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesOracleColumnsOutputReference = exports.datastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesOracleColumnsToHclTerraform = exports.datastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesOracleColumnsToTerraform = exports.DatastreamStreamBackfillAllMysqlExcludedObjectsOutputReference = exports.datastreamStreamBackfillAllMysqlExcludedObjectsToHclTerraform = exports.datastreamStreamBackfillAllMysqlExcludedObjectsToTerraform = exports.DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesList = exports.DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesOutputReference = exports.datastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesToHclTerraform = exports.datastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesToTerraform = exports.DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesList = exports.DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesOutputReference = exports.datastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesToHclTerraform = exports.datastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesToTerraform = exports.DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsList = exports.DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsOutputReference = exports.datastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsToHclTerraform = exports.datastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsToTerraform = void 0;
exports.DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsList = exports.DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsOutputReference = exports.datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsToHclTerraform = exports.datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsToTerraform = exports.DatastreamStreamDestinationConfigOutputReference = exports.datastreamStreamDestinationConfigToHclTerraform = exports.datastreamStreamDestinationConfigToTerraform = exports.DatastreamStreamDestinationConfigGcsDestinationConfigOutputReference = exports.datastreamStreamDestinationConfigGcsDestinationConfigToHclTerraform = exports.datastreamStreamDestinationConfigGcsDestinationConfigToTerraform = exports.DatastreamStreamDestinationConfigGcsDestinationConfigJsonFileFormatOutputReference = exports.datastreamStreamDestinationConfigGcsDestinationConfigJsonFileFormatToHclTerraform = exports.datastreamStreamDestinationConfigGcsDestinationConfigJsonFileFormatToTerraform = exports.DatastreamStreamDestinationConfigGcsDestinationConfigAvroFileFormatOutputReference = exports.datastreamStreamDestinationConfigGcsDestinationConfigAvroFileFormatToHclTerraform = exports.datastreamStreamDestinationConfigGcsDestinationConfigAvroFileFormatToTerraform = exports.DatastreamStreamDestinationConfigBigqueryDestinationConfigOutputReference = exports.datastreamStreamDestinationConfigBigqueryDestinationConfigToHclTerraform = exports.datastreamStreamDestinationConfigBigqueryDestinationConfigToTerraform = exports.DatastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsOutputReference = exports.datastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsToHclTerraform = exports.datastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsToTerraform = exports.DatastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateOutputReference = exports.datastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateToHclTerraform = exports.datastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateToTerraform = exports.DatastreamStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetOutputReference = exports.datastreamStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetToHclTerraform = exports.datastreamStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetToTerraform = exports.DatastreamStreamDestinationConfigBigqueryDestinationConfigMergeOutputReference = exports.datastreamStreamDestinationConfigBigqueryDestinationConfigMergeToHclTerraform = exports.datastreamStreamDestinationConfigBigqueryDestinationConfigMergeToTerraform = exports.DatastreamStreamDestinationConfigBigqueryDestinationConfigAppendOnlyOutputReference = exports.datastreamStreamDestinationConfigBigqueryDestinationConfigAppendOnlyToHclTerraform = exports.datastreamStreamDestinationConfigBigqueryDestinationConfigAppendOnlyToTerraform = exports.DatastreamStreamBackfillNoneOutputReference = exports.datastreamStreamBackfillNoneToHclTerraform = exports.datastreamStreamBackfillNoneToTerraform = exports.DatastreamStreamBackfillAllOutputReference = exports.datastreamStreamBackfillAllToHclTerraform = exports.datastreamStreamBackfillAllToTerraform = exports.DatastreamStreamBackfillAllSqlServerExcludedObjectsOutputReference = exports.datastreamStreamBackfillAllSqlServerExcludedObjectsToHclTerraform = exports.datastreamStreamBackfillAllSqlServerExcludedObjectsToTerraform = exports.DatastreamStreamBackfillAllSqlServerExcludedObjectsSchemasList = exports.DatastreamStreamBackfillAllSqlServerExcludedObjectsSchemasOutputReference = exports.datastreamStreamBackfillAllSqlServerExcludedObjectsSchemasToHclTerraform = exports.datastreamStreamBackfillAllSqlServerExcludedObjectsSchemasToTerraform = exports.DatastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesList = exports.DatastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesOutputReference = exports.datastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesToHclTerraform = void 0;
exports.DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesOracleColumnsOutputReference = exports.datastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesOracleColumnsToHclTerraform = exports.datastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesOracleColumnsToTerraform = exports.DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOutputReference = exports.datastreamStreamSourceConfigOracleSourceConfigExcludeObjectsToHclTerraform = exports.datastreamStreamSourceConfigOracleSourceConfigExcludeObjectsToTerraform = exports.DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasList = exports.DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOutputReference = exports.datastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasToHclTerraform = exports.datastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasToTerraform = exports.DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesList = exports.DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesOutputReference = exports.datastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesToHclTerraform = exports.datastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesToTerraform = exports.DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesOracleColumnsList = exports.DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesOracleColumnsOutputReference = exports.datastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesOracleColumnsToHclTerraform = exports.datastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesOracleColumnsToTerraform = exports.DatastreamStreamSourceConfigOracleSourceConfigDropLargeObjectsOutputReference = exports.datastreamStreamSourceConfigOracleSourceConfigDropLargeObjectsToHclTerraform = exports.datastreamStreamSourceConfigOracleSourceConfigDropLargeObjectsToTerraform = exports.DatastreamStreamSourceConfigMysqlSourceConfigOutputReference = exports.datastreamStreamSourceConfigMysqlSourceConfigToHclTerraform = exports.datastreamStreamSourceConfigMysqlSourceConfigToTerraform = exports.DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsOutputReference = exports.datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsToHclTerraform = exports.datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsToTerraform = exports.DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesList = exports.DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesOutputReference = exports.datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesToHclTerraform = exports.datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesToTerraform = exports.DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesList = exports.DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesOutputReference = exports.datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesToHclTerraform = exports.datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesToTerraform = exports.DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsList = exports.DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsOutputReference = exports.datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsToHclTerraform = exports.datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsToTerraform = exports.DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsOutputReference = exports.datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsToHclTerraform = exports.datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsToTerraform = exports.DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesList = exports.DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesOutputReference = exports.datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesToHclTerraform = exports.datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesToTerraform = exports.DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesList = exports.DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesOutputReference = exports.datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesToHclTerraform = exports.datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesToTerraform = void 0;
exports.datastreamStreamSourceConfigPostgresqlSourceConfigToHclTerraform = exports.datastreamStreamSourceConfigPostgresqlSourceConfigToTerraform = exports.DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsOutputReference = exports.datastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsToHclTerraform = exports.datastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsToTerraform = exports.DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasList = exports.DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasOutputReference = exports.datastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasToHclTerraform = exports.datastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasToTerraform = exports.DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesList = exports.DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesOutputReference = exports.datastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesToHclTerraform = exports.datastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesToTerraform = exports.DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsList = exports.DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsOutputReference = exports.datastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsToHclTerraform = exports.datastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsToTerraform = exports.DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsOutputReference = exports.datastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsToHclTerraform = exports.datastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsToTerraform = exports.DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasList = exports.DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasOutputReference = exports.datastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasToHclTerraform = exports.datastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasToTerraform = exports.DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesList = exports.DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesOutputReference = exports.datastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesToHclTerraform = exports.datastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesToTerraform = exports.DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsList = exports.DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsOutputReference = exports.datastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsToHclTerraform = exports.datastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsToTerraform = exports.DatastreamStreamSourceConfigOracleSourceConfigOutputReference = exports.datastreamStreamSourceConfigOracleSourceConfigToHclTerraform = exports.datastreamStreamSourceConfigOracleSourceConfigToTerraform = exports.DatastreamStreamSourceConfigOracleSourceConfigStreamLargeObjectsOutputReference = exports.datastreamStreamSourceConfigOracleSourceConfigStreamLargeObjectsToHclTerraform = exports.datastreamStreamSourceConfigOracleSourceConfigStreamLargeObjectsToTerraform = exports.DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOutputReference = exports.datastreamStreamSourceConfigOracleSourceConfigIncludeObjectsToHclTerraform = exports.datastreamStreamSourceConfigOracleSourceConfigIncludeObjectsToTerraform = exports.DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasList = exports.DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOutputReference = exports.datastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasToHclTerraform = exports.datastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasToTerraform = exports.DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesList = exports.DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesOutputReference = exports.datastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesToHclTerraform = exports.datastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesToTerraform = exports.DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesOracleColumnsList = void 0;
exports.DatastreamStream = exports.DatastreamStreamTimeoutsOutputReference = exports.datastreamStreamTimeoutsToHclTerraform = exports.datastreamStreamTimeoutsToTerraform = exports.DatastreamStreamSourceConfigOutputReference = exports.datastreamStreamSourceConfigToHclTerraform = exports.datastreamStreamSourceConfigToTerraform = exports.DatastreamStreamSourceConfigSqlServerSourceConfigOutputReference = exports.datastreamStreamSourceConfigSqlServerSourceConfigToHclTerraform = exports.datastreamStreamSourceConfigSqlServerSourceConfigToTerraform = exports.DatastreamStreamSourceConfigSqlServerSourceConfigTransactionLogsOutputReference = exports.datastreamStreamSourceConfigSqlServerSourceConfigTransactionLogsToHclTerraform = exports.datastreamStreamSourceConfigSqlServerSourceConfigTransactionLogsToTerraform = exports.DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsOutputReference = exports.datastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsToHclTerraform = exports.datastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsToTerraform = exports.DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasList = exports.DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasOutputReference = exports.datastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasToHclTerraform = exports.datastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasToTerraform = exports.DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesList = exports.DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesOutputReference = exports.datastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesToHclTerraform = exports.datastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesToTerraform = exports.DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesColumnsList = exports.DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesColumnsOutputReference = exports.datastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesColumnsToHclTerraform = exports.datastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesColumnsToTerraform = exports.DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsOutputReference = exports.datastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsToHclTerraform = exports.datastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsToTerraform = exports.DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasList = exports.DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasOutputReference = exports.datastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasToHclTerraform = exports.datastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasToTerraform = exports.DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesList = exports.DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesOutputReference = exports.datastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesToHclTerraform = exports.datastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesToTerraform = exports.DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesColumnsList = exports.DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesColumnsOutputReference = exports.datastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesColumnsToHclTerraform = exports.datastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesColumnsToTerraform = exports.DatastreamStreamSourceConfigSqlServerSourceConfigChangeTablesOutputReference = exports.datastreamStreamSourceConfigSqlServerSourceConfigChangeTablesToHclTerraform = exports.datastreamStreamSourceConfigSqlServerSourceConfigChangeTablesToTerraform = exports.DatastreamStreamSourceConfigPostgresqlSourceConfigOutputReference = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function datastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        collation: cdktf.stringToTerraform(struct.collation),
        column: cdktf.stringToTerraform(struct.column),
        data_type: cdktf.stringToTerraform(struct.dataType),
        nullable: cdktf.booleanToTerraform(struct.nullable),
        ordinal_position: cdktf.numberToTerraform(struct.ordinalPosition),
        primary_key: cdktf.booleanToTerraform(struct.primaryKey),
    };
}
exports.datastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsToTerraform = datastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsToTerraform;
function datastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        collation: {
            value: cdktf.stringToHclTerraform(struct.collation),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        column: {
            value: cdktf.stringToHclTerraform(struct.column),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        data_type: {
            value: cdktf.stringToHclTerraform(struct.dataType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        nullable: {
            value: cdktf.booleanToHclTerraform(struct.nullable),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        ordinal_position: {
            value: cdktf.numberToHclTerraform(struct.ordinalPosition),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        primary_key: {
            value: cdktf.booleanToHclTerraform(struct.primaryKey),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsToHclTerraform = datastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsToHclTerraform;
class DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._collation !== undefined) {
            hasAnyValues = true;
            internalValueResult.collation = this._collation;
        }
        if (this._column !== undefined) {
            hasAnyValues = true;
            internalValueResult.column = this._column;
        }
        if (this._dataType !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataType = this._dataType;
        }
        if (this._nullable !== undefined) {
            hasAnyValues = true;
            internalValueResult.nullable = this._nullable;
        }
        if (this._ordinalPosition !== undefined) {
            hasAnyValues = true;
            internalValueResult.ordinalPosition = this._ordinalPosition;
        }
        if (this._primaryKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.primaryKey = this._primaryKey;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._collation = undefined;
            this._column = undefined;
            this._dataType = undefined;
            this._nullable = undefined;
            this._ordinalPosition = undefined;
            this._primaryKey = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._collation = value.collation;
            this._column = value.column;
            this._dataType = value.dataType;
            this._nullable = value.nullable;
            this._ordinalPosition = value.ordinalPosition;
            this._primaryKey = value.primaryKey;
        }
    }
    get collation() {
        return this.getStringAttribute('collation');
    }
    set collation(value) {
        this._collation = value;
    }
    resetCollation() {
        this._collation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get collationInput() {
        return this._collation;
    }
    get column() {
        return this.getStringAttribute('column');
    }
    set column(value) {
        this._column = value;
    }
    resetColumn() {
        this._column = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get columnInput() {
        return this._column;
    }
    get dataType() {
        return this.getStringAttribute('data_type');
    }
    set dataType(value) {
        this._dataType = value;
    }
    resetDataType() {
        this._dataType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataTypeInput() {
        return this._dataType;
    }
    // length - computed: true, optional: false, required: false
    get length() {
        return this.getNumberAttribute('length');
    }
    get nullable() {
        return this.getBooleanAttribute('nullable');
    }
    set nullable(value) {
        this._nullable = value;
    }
    resetNullable() {
        this._nullable = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nullableInput() {
        return this._nullable;
    }
    get ordinalPosition() {
        return this.getNumberAttribute('ordinal_position');
    }
    set ordinalPosition(value) {
        this._ordinalPosition = value;
    }
    resetOrdinalPosition() {
        this._ordinalPosition = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ordinalPositionInput() {
        return this._ordinalPosition;
    }
    get primaryKey() {
        return this.getBooleanAttribute('primary_key');
    }
    set primaryKey(value) {
        this._primaryKey = value;
    }
    resetPrimaryKey() {
        this._primaryKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get primaryKeyInput() {
        return this._primaryKey;
    }
}
exports.DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsOutputReference = DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsOutputReference[_a] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsOutputReference", version: "14.13.1" };
class DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsList = DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsList;
_b = JSII_RTTI_SYMBOL_1;
DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsList[_b] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsList", version: "14.13.1" };
function datastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        table: cdktf.stringToTerraform(struct.table),
        mysql_columns: cdktf.listMapper(datastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsToTerraform, true)(struct.mysqlColumns),
    };
}
exports.datastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesToTerraform = datastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesToTerraform;
function datastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        table: {
            value: cdktf.stringToHclTerraform(struct.table),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        mysql_columns: {
            value: cdktf.listMapperHcl(datastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsToHclTerraform, true)(struct.mysqlColumns),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesToHclTerraform = datastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesToHclTerraform;
class DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // mysql_columns - computed: false, optional: true, required: false
        this._mysqlColumns = new DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesMysqlColumnsList(this, "mysql_columns", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._table !== undefined) {
            hasAnyValues = true;
            internalValueResult.table = this._table;
        }
        if (this._mysqlColumns?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mysqlColumns = this._mysqlColumns?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._table = undefined;
            this._mysqlColumns.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._table = value.table;
            this._mysqlColumns.internalValue = value.mysqlColumns;
        }
    }
    get table() {
        return this.getStringAttribute('table');
    }
    set table(value) {
        this._table = value;
    }
    // Temporarily expose input value. Use with caution.
    get tableInput() {
        return this._table;
    }
    get mysqlColumns() {
        return this._mysqlColumns;
    }
    putMysqlColumns(value) {
        this._mysqlColumns.internalValue = value;
    }
    resetMysqlColumns() {
        this._mysqlColumns.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mysqlColumnsInput() {
        return this._mysqlColumns.internalValue;
    }
}
exports.DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesOutputReference = DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesOutputReference;
_c = JSII_RTTI_SYMBOL_1;
DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesOutputReference[_c] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesOutputReference", version: "14.13.1" };
class DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesList = DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesList;
_d = JSII_RTTI_SYMBOL_1;
DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesList[_d] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesList", version: "14.13.1" };
function datastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        mysql_tables: cdktf.listMapper(datastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesToTerraform, true)(struct.mysqlTables),
    };
}
exports.datastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesToTerraform = datastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesToTerraform;
function datastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        database: {
            value: cdktf.stringToHclTerraform(struct.database),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        mysql_tables: {
            value: cdktf.listMapperHcl(datastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesToHclTerraform, true)(struct.mysqlTables),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesToHclTerraform = datastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesToHclTerraform;
class DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // mysql_tables - computed: false, optional: true, required: false
        this._mysqlTables = new DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesMysqlTablesList(this, "mysql_tables", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._database !== undefined) {
            hasAnyValues = true;
            internalValueResult.database = this._database;
        }
        if (this._mysqlTables?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mysqlTables = this._mysqlTables?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._database = undefined;
            this._mysqlTables.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._database = value.database;
            this._mysqlTables.internalValue = value.mysqlTables;
        }
    }
    get database() {
        return this.getStringAttribute('database');
    }
    set database(value) {
        this._database = value;
    }
    // Temporarily expose input value. Use with caution.
    get databaseInput() {
        return this._database;
    }
    get mysqlTables() {
        return this._mysqlTables;
    }
    putMysqlTables(value) {
        this._mysqlTables.internalValue = value;
    }
    resetMysqlTables() {
        this._mysqlTables.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mysqlTablesInput() {
        return this._mysqlTables.internalValue;
    }
}
exports.DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesOutputReference = DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesOutputReference;
_e = JSII_RTTI_SYMBOL_1;
DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesOutputReference[_e] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesOutputReference", version: "14.13.1" };
class DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesList = DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesList;
_f = JSII_RTTI_SYMBOL_1;
DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesList[_f] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesList", version: "14.13.1" };
function datastreamStreamBackfillAllMysqlExcludedObjectsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        mysql_databases: cdktf.listMapper(datastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesToTerraform, true)(struct.mysqlDatabases),
    };
}
exports.datastreamStreamBackfillAllMysqlExcludedObjectsToTerraform = datastreamStreamBackfillAllMysqlExcludedObjectsToTerraform;
function datastreamStreamBackfillAllMysqlExcludedObjectsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        mysql_databases: {
            value: cdktf.listMapperHcl(datastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesToHclTerraform, true)(struct.mysqlDatabases),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamBackfillAllMysqlExcludedObjectsToHclTerraform = datastreamStreamBackfillAllMysqlExcludedObjectsToHclTerraform;
class DatastreamStreamBackfillAllMysqlExcludedObjectsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // mysql_databases - computed: false, optional: false, required: true
        this._mysqlDatabases = new DatastreamStreamBackfillAllMysqlExcludedObjectsMysqlDatabasesList(this, "mysql_databases", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._mysqlDatabases?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mysqlDatabases = this._mysqlDatabases?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._mysqlDatabases.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._mysqlDatabases.internalValue = value.mysqlDatabases;
        }
    }
    get mysqlDatabases() {
        return this._mysqlDatabases;
    }
    putMysqlDatabases(value) {
        this._mysqlDatabases.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get mysqlDatabasesInput() {
        return this._mysqlDatabases.internalValue;
    }
}
exports.DatastreamStreamBackfillAllMysqlExcludedObjectsOutputReference = DatastreamStreamBackfillAllMysqlExcludedObjectsOutputReference;
_g = JSII_RTTI_SYMBOL_1;
DatastreamStreamBackfillAllMysqlExcludedObjectsOutputReference[_g] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamBackfillAllMysqlExcludedObjectsOutputReference", version: "14.13.1" };
function datastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesOracleColumnsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        column: cdktf.stringToTerraform(struct.column),
        data_type: cdktf.stringToTerraform(struct.dataType),
    };
}
exports.datastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesOracleColumnsToTerraform = datastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesOracleColumnsToTerraform;
function datastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesOracleColumnsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        column: {
            value: cdktf.stringToHclTerraform(struct.column),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        data_type: {
            value: cdktf.stringToHclTerraform(struct.dataType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesOracleColumnsToHclTerraform = datastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesOracleColumnsToHclTerraform;
class DatastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesOracleColumnsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._column !== undefined) {
            hasAnyValues = true;
            internalValueResult.column = this._column;
        }
        if (this._dataType !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataType = this._dataType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._column = undefined;
            this._dataType = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._column = value.column;
            this._dataType = value.dataType;
        }
    }
    get column() {
        return this.getStringAttribute('column');
    }
    set column(value) {
        this._column = value;
    }
    resetColumn() {
        this._column = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get columnInput() {
        return this._column;
    }
    get dataType() {
        return this.getStringAttribute('data_type');
    }
    set dataType(value) {
        this._dataType = value;
    }
    resetDataType() {
        this._dataType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataTypeInput() {
        return this._dataType;
    }
    // encoding - computed: true, optional: false, required: false
    get encoding() {
        return this.getStringAttribute('encoding');
    }
    // length - computed: true, optional: false, required: false
    get length() {
        return this.getNumberAttribute('length');
    }
    // nullable - computed: true, optional: false, required: false
    get nullable() {
        return this.getBooleanAttribute('nullable');
    }
    // ordinal_position - computed: true, optional: false, required: false
    get ordinalPosition() {
        return this.getNumberAttribute('ordinal_position');
    }
    // precision - computed: true, optional: false, required: false
    get precision() {
        return this.getNumberAttribute('precision');
    }
    // primary_key - computed: true, optional: false, required: false
    get primaryKey() {
        return this.getBooleanAttribute('primary_key');
    }
    // scale - computed: true, optional: false, required: false
    get scale() {
        return this.getNumberAttribute('scale');
    }
}
exports.DatastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesOracleColumnsOutputReference = DatastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesOracleColumnsOutputReference;
_h = JSII_RTTI_SYMBOL_1;
DatastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesOracleColumnsOutputReference[_h] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesOracleColumnsOutputReference", version: "14.13.1" };
class DatastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesOracleColumnsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesOracleColumnsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesOracleColumnsList = DatastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesOracleColumnsList;
_j = JSII_RTTI_SYMBOL_1;
DatastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesOracleColumnsList[_j] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesOracleColumnsList", version: "14.13.1" };
function datastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        table: cdktf.stringToTerraform(struct.table),
        oracle_columns: cdktf.listMapper(datastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesOracleColumnsToTerraform, true)(struct.oracleColumns),
    };
}
exports.datastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesToTerraform = datastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesToTerraform;
function datastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        table: {
            value: cdktf.stringToHclTerraform(struct.table),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        oracle_columns: {
            value: cdktf.listMapperHcl(datastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesOracleColumnsToHclTerraform, true)(struct.oracleColumns),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesOracleColumnsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesToHclTerraform = datastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesToHclTerraform;
class DatastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // oracle_columns - computed: false, optional: true, required: false
        this._oracleColumns = new DatastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesOracleColumnsList(this, "oracle_columns", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._table !== undefined) {
            hasAnyValues = true;
            internalValueResult.table = this._table;
        }
        if (this._oracleColumns?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.oracleColumns = this._oracleColumns?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._table = undefined;
            this._oracleColumns.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._table = value.table;
            this._oracleColumns.internalValue = value.oracleColumns;
        }
    }
    get table() {
        return this.getStringAttribute('table');
    }
    set table(value) {
        this._table = value;
    }
    // Temporarily expose input value. Use with caution.
    get tableInput() {
        return this._table;
    }
    get oracleColumns() {
        return this._oracleColumns;
    }
    putOracleColumns(value) {
        this._oracleColumns.internalValue = value;
    }
    resetOracleColumns() {
        this._oracleColumns.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get oracleColumnsInput() {
        return this._oracleColumns.internalValue;
    }
}
exports.DatastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesOutputReference = DatastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesOutputReference;
_k = JSII_RTTI_SYMBOL_1;
DatastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesOutputReference[_k] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesOutputReference", version: "14.13.1" };
class DatastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesList = DatastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesList;
_l = JSII_RTTI_SYMBOL_1;
DatastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesList[_l] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesList", version: "14.13.1" };
function datastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        schema: cdktf.stringToTerraform(struct.schema),
        oracle_tables: cdktf.listMapper(datastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesToTerraform, true)(struct.oracleTables),
    };
}
exports.datastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasToTerraform = datastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasToTerraform;
function datastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        schema: {
            value: cdktf.stringToHclTerraform(struct.schema),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        oracle_tables: {
            value: cdktf.listMapperHcl(datastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesToHclTerraform, true)(struct.oracleTables),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasToHclTerraform = datastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasToHclTerraform;
class DatastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // oracle_tables - computed: false, optional: true, required: false
        this._oracleTables = new DatastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOracleTablesList(this, "oracle_tables", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._schema !== undefined) {
            hasAnyValues = true;
            internalValueResult.schema = this._schema;
        }
        if (this._oracleTables?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.oracleTables = this._oracleTables?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._schema = undefined;
            this._oracleTables.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._schema = value.schema;
            this._oracleTables.internalValue = value.oracleTables;
        }
    }
    get schema() {
        return this.getStringAttribute('schema');
    }
    set schema(value) {
        this._schema = value;
    }
    // Temporarily expose input value. Use with caution.
    get schemaInput() {
        return this._schema;
    }
    get oracleTables() {
        return this._oracleTables;
    }
    putOracleTables(value) {
        this._oracleTables.internalValue = value;
    }
    resetOracleTables() {
        this._oracleTables.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get oracleTablesInput() {
        return this._oracleTables.internalValue;
    }
}
exports.DatastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOutputReference = DatastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOutputReference;
_m = JSII_RTTI_SYMBOL_1;
DatastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOutputReference[_m] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOutputReference", version: "14.13.1" };
class DatastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasList = DatastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasList;
_o = JSII_RTTI_SYMBOL_1;
DatastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasList[_o] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasList", version: "14.13.1" };
function datastreamStreamBackfillAllOracleExcludedObjectsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        oracle_schemas: cdktf.listMapper(datastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasToTerraform, true)(struct.oracleSchemas),
    };
}
exports.datastreamStreamBackfillAllOracleExcludedObjectsToTerraform = datastreamStreamBackfillAllOracleExcludedObjectsToTerraform;
function datastreamStreamBackfillAllOracleExcludedObjectsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        oracle_schemas: {
            value: cdktf.listMapperHcl(datastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasToHclTerraform, true)(struct.oracleSchemas),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamBackfillAllOracleExcludedObjectsToHclTerraform = datastreamStreamBackfillAllOracleExcludedObjectsToHclTerraform;
class DatastreamStreamBackfillAllOracleExcludedObjectsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // oracle_schemas - computed: false, optional: false, required: true
        this._oracleSchemas = new DatastreamStreamBackfillAllOracleExcludedObjectsOracleSchemasList(this, "oracle_schemas", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._oracleSchemas?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.oracleSchemas = this._oracleSchemas?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._oracleSchemas.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._oracleSchemas.internalValue = value.oracleSchemas;
        }
    }
    get oracleSchemas() {
        return this._oracleSchemas;
    }
    putOracleSchemas(value) {
        this._oracleSchemas.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get oracleSchemasInput() {
        return this._oracleSchemas.internalValue;
    }
}
exports.DatastreamStreamBackfillAllOracleExcludedObjectsOutputReference = DatastreamStreamBackfillAllOracleExcludedObjectsOutputReference;
_p = JSII_RTTI_SYMBOL_1;
DatastreamStreamBackfillAllOracleExcludedObjectsOutputReference[_p] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamBackfillAllOracleExcludedObjectsOutputReference", version: "14.13.1" };
function datastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        column: cdktf.stringToTerraform(struct.column),
        data_type: cdktf.stringToTerraform(struct.dataType),
        nullable: cdktf.booleanToTerraform(struct.nullable),
        ordinal_position: cdktf.numberToTerraform(struct.ordinalPosition),
        primary_key: cdktf.booleanToTerraform(struct.primaryKey),
    };
}
exports.datastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsToTerraform = datastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsToTerraform;
function datastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        column: {
            value: cdktf.stringToHclTerraform(struct.column),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        data_type: {
            value: cdktf.stringToHclTerraform(struct.dataType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        nullable: {
            value: cdktf.booleanToHclTerraform(struct.nullable),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        ordinal_position: {
            value: cdktf.numberToHclTerraform(struct.ordinalPosition),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        primary_key: {
            value: cdktf.booleanToHclTerraform(struct.primaryKey),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsToHclTerraform = datastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsToHclTerraform;
class DatastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._column !== undefined) {
            hasAnyValues = true;
            internalValueResult.column = this._column;
        }
        if (this._dataType !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataType = this._dataType;
        }
        if (this._nullable !== undefined) {
            hasAnyValues = true;
            internalValueResult.nullable = this._nullable;
        }
        if (this._ordinalPosition !== undefined) {
            hasAnyValues = true;
            internalValueResult.ordinalPosition = this._ordinalPosition;
        }
        if (this._primaryKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.primaryKey = this._primaryKey;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._column = undefined;
            this._dataType = undefined;
            this._nullable = undefined;
            this._ordinalPosition = undefined;
            this._primaryKey = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._column = value.column;
            this._dataType = value.dataType;
            this._nullable = value.nullable;
            this._ordinalPosition = value.ordinalPosition;
            this._primaryKey = value.primaryKey;
        }
    }
    get column() {
        return this.getStringAttribute('column');
    }
    set column(value) {
        this._column = value;
    }
    resetColumn() {
        this._column = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get columnInput() {
        return this._column;
    }
    get dataType() {
        return this.getStringAttribute('data_type');
    }
    set dataType(value) {
        this._dataType = value;
    }
    resetDataType() {
        this._dataType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataTypeInput() {
        return this._dataType;
    }
    // length - computed: true, optional: false, required: false
    get length() {
        return this.getNumberAttribute('length');
    }
    get nullable() {
        return this.getBooleanAttribute('nullable');
    }
    set nullable(value) {
        this._nullable = value;
    }
    resetNullable() {
        this._nullable = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nullableInput() {
        return this._nullable;
    }
    get ordinalPosition() {
        return this.getNumberAttribute('ordinal_position');
    }
    set ordinalPosition(value) {
        this._ordinalPosition = value;
    }
    resetOrdinalPosition() {
        this._ordinalPosition = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ordinalPositionInput() {
        return this._ordinalPosition;
    }
    // precision - computed: true, optional: false, required: false
    get precision() {
        return this.getNumberAttribute('precision');
    }
    get primaryKey() {
        return this.getBooleanAttribute('primary_key');
    }
    set primaryKey(value) {
        this._primaryKey = value;
    }
    resetPrimaryKey() {
        this._primaryKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get primaryKeyInput() {
        return this._primaryKey;
    }
    // scale - computed: true, optional: false, required: false
    get scale() {
        return this.getNumberAttribute('scale');
    }
}
exports.DatastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsOutputReference = DatastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsOutputReference;
_q = JSII_RTTI_SYMBOL_1;
DatastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsOutputReference[_q] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsOutputReference", version: "14.13.1" };
class DatastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsList = DatastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsList;
_r = JSII_RTTI_SYMBOL_1;
DatastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsList[_r] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsList", version: "14.13.1" };
function datastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        table: cdktf.stringToTerraform(struct.table),
        postgresql_columns: cdktf.listMapper(datastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsToTerraform, true)(struct.postgresqlColumns),
    };
}
exports.datastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesToTerraform = datastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesToTerraform;
function datastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        table: {
            value: cdktf.stringToHclTerraform(struct.table),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        postgresql_columns: {
            value: cdktf.listMapperHcl(datastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsToHclTerraform, true)(struct.postgresqlColumns),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesToHclTerraform = datastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesToHclTerraform;
class DatastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // postgresql_columns - computed: false, optional: true, required: false
        this._postgresqlColumns = new DatastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsList(this, "postgresql_columns", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._table !== undefined) {
            hasAnyValues = true;
            internalValueResult.table = this._table;
        }
        if (this._postgresqlColumns?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.postgresqlColumns = this._postgresqlColumns?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._table = undefined;
            this._postgresqlColumns.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._table = value.table;
            this._postgresqlColumns.internalValue = value.postgresqlColumns;
        }
    }
    get table() {
        return this.getStringAttribute('table');
    }
    set table(value) {
        this._table = value;
    }
    // Temporarily expose input value. Use with caution.
    get tableInput() {
        return this._table;
    }
    get postgresqlColumns() {
        return this._postgresqlColumns;
    }
    putPostgresqlColumns(value) {
        this._postgresqlColumns.internalValue = value;
    }
    resetPostgresqlColumns() {
        this._postgresqlColumns.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get postgresqlColumnsInput() {
        return this._postgresqlColumns.internalValue;
    }
}
exports.DatastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesOutputReference = DatastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesOutputReference;
_s = JSII_RTTI_SYMBOL_1;
DatastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesOutputReference[_s] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesOutputReference", version: "14.13.1" };
class DatastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesList = DatastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesList;
_t = JSII_RTTI_SYMBOL_1;
DatastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesList[_t] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesList", version: "14.13.1" };
function datastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        schema: cdktf.stringToTerraform(struct.schema),
        postgresql_tables: cdktf.listMapper(datastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesToTerraform, true)(struct.postgresqlTables),
    };
}
exports.datastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasToTerraform = datastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasToTerraform;
function datastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        schema: {
            value: cdktf.stringToHclTerraform(struct.schema),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        postgresql_tables: {
            value: cdktf.listMapperHcl(datastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesToHclTerraform, true)(struct.postgresqlTables),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasToHclTerraform = datastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasToHclTerraform;
class DatastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // postgresql_tables - computed: false, optional: true, required: false
        this._postgresqlTables = new DatastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasPostgresqlTablesList(this, "postgresql_tables", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._schema !== undefined) {
            hasAnyValues = true;
            internalValueResult.schema = this._schema;
        }
        if (this._postgresqlTables?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.postgresqlTables = this._postgresqlTables?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._schema = undefined;
            this._postgresqlTables.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._schema = value.schema;
            this._postgresqlTables.internalValue = value.postgresqlTables;
        }
    }
    get schema() {
        return this.getStringAttribute('schema');
    }
    set schema(value) {
        this._schema = value;
    }
    // Temporarily expose input value. Use with caution.
    get schemaInput() {
        return this._schema;
    }
    get postgresqlTables() {
        return this._postgresqlTables;
    }
    putPostgresqlTables(value) {
        this._postgresqlTables.internalValue = value;
    }
    resetPostgresqlTables() {
        this._postgresqlTables.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get postgresqlTablesInput() {
        return this._postgresqlTables.internalValue;
    }
}
exports.DatastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasOutputReference = DatastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasOutputReference;
_u = JSII_RTTI_SYMBOL_1;
DatastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasOutputReference[_u] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasOutputReference", version: "14.13.1" };
class DatastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasList = DatastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasList;
_v = JSII_RTTI_SYMBOL_1;
DatastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasList[_v] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasList", version: "14.13.1" };
function datastreamStreamBackfillAllPostgresqlExcludedObjectsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        postgresql_schemas: cdktf.listMapper(datastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasToTerraform, true)(struct.postgresqlSchemas),
    };
}
exports.datastreamStreamBackfillAllPostgresqlExcludedObjectsToTerraform = datastreamStreamBackfillAllPostgresqlExcludedObjectsToTerraform;
function datastreamStreamBackfillAllPostgresqlExcludedObjectsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        postgresql_schemas: {
            value: cdktf.listMapperHcl(datastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasToHclTerraform, true)(struct.postgresqlSchemas),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamBackfillAllPostgresqlExcludedObjectsToHclTerraform = datastreamStreamBackfillAllPostgresqlExcludedObjectsToHclTerraform;
class DatastreamStreamBackfillAllPostgresqlExcludedObjectsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // postgresql_schemas - computed: false, optional: false, required: true
        this._postgresqlSchemas = new DatastreamStreamBackfillAllPostgresqlExcludedObjectsPostgresqlSchemasList(this, "postgresql_schemas", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._postgresqlSchemas?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.postgresqlSchemas = this._postgresqlSchemas?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._postgresqlSchemas.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._postgresqlSchemas.internalValue = value.postgresqlSchemas;
        }
    }
    get postgresqlSchemas() {
        return this._postgresqlSchemas;
    }
    putPostgresqlSchemas(value) {
        this._postgresqlSchemas.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get postgresqlSchemasInput() {
        return this._postgresqlSchemas.internalValue;
    }
}
exports.DatastreamStreamBackfillAllPostgresqlExcludedObjectsOutputReference = DatastreamStreamBackfillAllPostgresqlExcludedObjectsOutputReference;
_w = JSII_RTTI_SYMBOL_1;
DatastreamStreamBackfillAllPostgresqlExcludedObjectsOutputReference[_w] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamBackfillAllPostgresqlExcludedObjectsOutputReference", version: "14.13.1" };
function datastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesColumnsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        column: cdktf.stringToTerraform(struct.column),
        data_type: cdktf.stringToTerraform(struct.dataType),
    };
}
exports.datastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesColumnsToTerraform = datastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesColumnsToTerraform;
function datastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesColumnsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        column: {
            value: cdktf.stringToHclTerraform(struct.column),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        data_type: {
            value: cdktf.stringToHclTerraform(struct.dataType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesColumnsToHclTerraform = datastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesColumnsToHclTerraform;
class DatastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesColumnsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._column !== undefined) {
            hasAnyValues = true;
            internalValueResult.column = this._column;
        }
        if (this._dataType !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataType = this._dataType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._column = undefined;
            this._dataType = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._column = value.column;
            this._dataType = value.dataType;
        }
    }
    get column() {
        return this.getStringAttribute('column');
    }
    set column(value) {
        this._column = value;
    }
    resetColumn() {
        this._column = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get columnInput() {
        return this._column;
    }
    get dataType() {
        return this.getStringAttribute('data_type');
    }
    set dataType(value) {
        this._dataType = value;
    }
    resetDataType() {
        this._dataType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataTypeInput() {
        return this._dataType;
    }
    // length - computed: true, optional: false, required: false
    get length() {
        return this.getNumberAttribute('length');
    }
    // nullable - computed: true, optional: false, required: false
    get nullable() {
        return this.getBooleanAttribute('nullable');
    }
    // ordinal_position - computed: true, optional: false, required: false
    get ordinalPosition() {
        return this.getNumberAttribute('ordinal_position');
    }
    // precision - computed: true, optional: false, required: false
    get precision() {
        return this.getNumberAttribute('precision');
    }
    // primary_key - computed: true, optional: false, required: false
    get primaryKey() {
        return this.getBooleanAttribute('primary_key');
    }
    // scale - computed: true, optional: false, required: false
    get scale() {
        return this.getNumberAttribute('scale');
    }
}
exports.DatastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesColumnsOutputReference = DatastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesColumnsOutputReference;
_x = JSII_RTTI_SYMBOL_1;
DatastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesColumnsOutputReference[_x] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesColumnsOutputReference", version: "14.13.1" };
class DatastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesColumnsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesColumnsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesColumnsList = DatastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesColumnsList;
_y = JSII_RTTI_SYMBOL_1;
DatastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesColumnsList[_y] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesColumnsList", version: "14.13.1" };
function datastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        table: cdktf.stringToTerraform(struct.table),
        columns: cdktf.listMapper(datastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesColumnsToTerraform, true)(struct.columns),
    };
}
exports.datastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesToTerraform = datastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesToTerraform;
function datastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        table: {
            value: cdktf.stringToHclTerraform(struct.table),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        columns: {
            value: cdktf.listMapperHcl(datastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesColumnsToHclTerraform, true)(struct.columns),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesColumnsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesToHclTerraform = datastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesToHclTerraform;
class DatastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // columns - computed: false, optional: true, required: false
        this._columns = new DatastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesColumnsList(this, "columns", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._table !== undefined) {
            hasAnyValues = true;
            internalValueResult.table = this._table;
        }
        if (this._columns?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.columns = this._columns?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._table = undefined;
            this._columns.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._table = value.table;
            this._columns.internalValue = value.columns;
        }
    }
    get table() {
        return this.getStringAttribute('table');
    }
    set table(value) {
        this._table = value;
    }
    // Temporarily expose input value. Use with caution.
    get tableInput() {
        return this._table;
    }
    get columns() {
        return this._columns;
    }
    putColumns(value) {
        this._columns.internalValue = value;
    }
    resetColumns() {
        this._columns.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get columnsInput() {
        return this._columns.internalValue;
    }
}
exports.DatastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesOutputReference = DatastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesOutputReference;
_z = JSII_RTTI_SYMBOL_1;
DatastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesOutputReference[_z] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesOutputReference", version: "14.13.1" };
class DatastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesList = DatastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesList;
_0 = JSII_RTTI_SYMBOL_1;
DatastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesList[_0] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesList", version: "14.13.1" };
function datastreamStreamBackfillAllSqlServerExcludedObjectsSchemasToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        schema: cdktf.stringToTerraform(struct.schema),
        tables: cdktf.listMapper(datastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesToTerraform, true)(struct.tables),
    };
}
exports.datastreamStreamBackfillAllSqlServerExcludedObjectsSchemasToTerraform = datastreamStreamBackfillAllSqlServerExcludedObjectsSchemasToTerraform;
function datastreamStreamBackfillAllSqlServerExcludedObjectsSchemasToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        schema: {
            value: cdktf.stringToHclTerraform(struct.schema),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        tables: {
            value: cdktf.listMapperHcl(datastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesToHclTerraform, true)(struct.tables),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamBackfillAllSqlServerExcludedObjectsSchemasToHclTerraform = datastreamStreamBackfillAllSqlServerExcludedObjectsSchemasToHclTerraform;
class DatastreamStreamBackfillAllSqlServerExcludedObjectsSchemasOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // tables - computed: false, optional: true, required: false
        this._tables = new DatastreamStreamBackfillAllSqlServerExcludedObjectsSchemasTablesList(this, "tables", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._schema !== undefined) {
            hasAnyValues = true;
            internalValueResult.schema = this._schema;
        }
        if (this._tables?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.tables = this._tables?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._schema = undefined;
            this._tables.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._schema = value.schema;
            this._tables.internalValue = value.tables;
        }
    }
    get schema() {
        return this.getStringAttribute('schema');
    }
    set schema(value) {
        this._schema = value;
    }
    // Temporarily expose input value. Use with caution.
    get schemaInput() {
        return this._schema;
    }
    get tables() {
        return this._tables;
    }
    putTables(value) {
        this._tables.internalValue = value;
    }
    resetTables() {
        this._tables.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tablesInput() {
        return this._tables.internalValue;
    }
}
exports.DatastreamStreamBackfillAllSqlServerExcludedObjectsSchemasOutputReference = DatastreamStreamBackfillAllSqlServerExcludedObjectsSchemasOutputReference;
_1 = JSII_RTTI_SYMBOL_1;
DatastreamStreamBackfillAllSqlServerExcludedObjectsSchemasOutputReference[_1] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamBackfillAllSqlServerExcludedObjectsSchemasOutputReference", version: "14.13.1" };
class DatastreamStreamBackfillAllSqlServerExcludedObjectsSchemasList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatastreamStreamBackfillAllSqlServerExcludedObjectsSchemasOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatastreamStreamBackfillAllSqlServerExcludedObjectsSchemasList = DatastreamStreamBackfillAllSqlServerExcludedObjectsSchemasList;
_2 = JSII_RTTI_SYMBOL_1;
DatastreamStreamBackfillAllSqlServerExcludedObjectsSchemasList[_2] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamBackfillAllSqlServerExcludedObjectsSchemasList", version: "14.13.1" };
function datastreamStreamBackfillAllSqlServerExcludedObjectsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        schemas: cdktf.listMapper(datastreamStreamBackfillAllSqlServerExcludedObjectsSchemasToTerraform, true)(struct.schemas),
    };
}
exports.datastreamStreamBackfillAllSqlServerExcludedObjectsToTerraform = datastreamStreamBackfillAllSqlServerExcludedObjectsToTerraform;
function datastreamStreamBackfillAllSqlServerExcludedObjectsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        schemas: {
            value: cdktf.listMapperHcl(datastreamStreamBackfillAllSqlServerExcludedObjectsSchemasToHclTerraform, true)(struct.schemas),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamBackfillAllSqlServerExcludedObjectsSchemasList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamBackfillAllSqlServerExcludedObjectsToHclTerraform = datastreamStreamBackfillAllSqlServerExcludedObjectsToHclTerraform;
class DatastreamStreamBackfillAllSqlServerExcludedObjectsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // schemas - computed: false, optional: false, required: true
        this._schemas = new DatastreamStreamBackfillAllSqlServerExcludedObjectsSchemasList(this, "schemas", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._schemas?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.schemas = this._schemas?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._schemas.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._schemas.internalValue = value.schemas;
        }
    }
    get schemas() {
        return this._schemas;
    }
    putSchemas(value) {
        this._schemas.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get schemasInput() {
        return this._schemas.internalValue;
    }
}
exports.DatastreamStreamBackfillAllSqlServerExcludedObjectsOutputReference = DatastreamStreamBackfillAllSqlServerExcludedObjectsOutputReference;
_3 = JSII_RTTI_SYMBOL_1;
DatastreamStreamBackfillAllSqlServerExcludedObjectsOutputReference[_3] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamBackfillAllSqlServerExcludedObjectsOutputReference", version: "14.13.1" };
function datastreamStreamBackfillAllToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        mysql_excluded_objects: datastreamStreamBackfillAllMysqlExcludedObjectsToTerraform(struct.mysqlExcludedObjects),
        oracle_excluded_objects: datastreamStreamBackfillAllOracleExcludedObjectsToTerraform(struct.oracleExcludedObjects),
        postgresql_excluded_objects: datastreamStreamBackfillAllPostgresqlExcludedObjectsToTerraform(struct.postgresqlExcludedObjects),
        sql_server_excluded_objects: datastreamStreamBackfillAllSqlServerExcludedObjectsToTerraform(struct.sqlServerExcludedObjects),
    };
}
exports.datastreamStreamBackfillAllToTerraform = datastreamStreamBackfillAllToTerraform;
function datastreamStreamBackfillAllToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        mysql_excluded_objects: {
            value: datastreamStreamBackfillAllMysqlExcludedObjectsToHclTerraform(struct.mysqlExcludedObjects),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamBackfillAllMysqlExcludedObjectsList",
        },
        oracle_excluded_objects: {
            value: datastreamStreamBackfillAllOracleExcludedObjectsToHclTerraform(struct.oracleExcludedObjects),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamBackfillAllOracleExcludedObjectsList",
        },
        postgresql_excluded_objects: {
            value: datastreamStreamBackfillAllPostgresqlExcludedObjectsToHclTerraform(struct.postgresqlExcludedObjects),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamBackfillAllPostgresqlExcludedObjectsList",
        },
        sql_server_excluded_objects: {
            value: datastreamStreamBackfillAllSqlServerExcludedObjectsToHclTerraform(struct.sqlServerExcludedObjects),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamBackfillAllSqlServerExcludedObjectsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamBackfillAllToHclTerraform = datastreamStreamBackfillAllToHclTerraform;
class DatastreamStreamBackfillAllOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // mysql_excluded_objects - computed: false, optional: true, required: false
        this._mysqlExcludedObjects = new DatastreamStreamBackfillAllMysqlExcludedObjectsOutputReference(this, "mysql_excluded_objects");
        // oracle_excluded_objects - computed: false, optional: true, required: false
        this._oracleExcludedObjects = new DatastreamStreamBackfillAllOracleExcludedObjectsOutputReference(this, "oracle_excluded_objects");
        // postgresql_excluded_objects - computed: false, optional: true, required: false
        this._postgresqlExcludedObjects = new DatastreamStreamBackfillAllPostgresqlExcludedObjectsOutputReference(this, "postgresql_excluded_objects");
        // sql_server_excluded_objects - computed: false, optional: true, required: false
        this._sqlServerExcludedObjects = new DatastreamStreamBackfillAllSqlServerExcludedObjectsOutputReference(this, "sql_server_excluded_objects");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._mysqlExcludedObjects?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mysqlExcludedObjects = this._mysqlExcludedObjects?.internalValue;
        }
        if (this._oracleExcludedObjects?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.oracleExcludedObjects = this._oracleExcludedObjects?.internalValue;
        }
        if (this._postgresqlExcludedObjects?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.postgresqlExcludedObjects = this._postgresqlExcludedObjects?.internalValue;
        }
        if (this._sqlServerExcludedObjects?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sqlServerExcludedObjects = this._sqlServerExcludedObjects?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._mysqlExcludedObjects.internalValue = undefined;
            this._oracleExcludedObjects.internalValue = undefined;
            this._postgresqlExcludedObjects.internalValue = undefined;
            this._sqlServerExcludedObjects.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._mysqlExcludedObjects.internalValue = value.mysqlExcludedObjects;
            this._oracleExcludedObjects.internalValue = value.oracleExcludedObjects;
            this._postgresqlExcludedObjects.internalValue = value.postgresqlExcludedObjects;
            this._sqlServerExcludedObjects.internalValue = value.sqlServerExcludedObjects;
        }
    }
    get mysqlExcludedObjects() {
        return this._mysqlExcludedObjects;
    }
    putMysqlExcludedObjects(value) {
        this._mysqlExcludedObjects.internalValue = value;
    }
    resetMysqlExcludedObjects() {
        this._mysqlExcludedObjects.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mysqlExcludedObjectsInput() {
        return this._mysqlExcludedObjects.internalValue;
    }
    get oracleExcludedObjects() {
        return this._oracleExcludedObjects;
    }
    putOracleExcludedObjects(value) {
        this._oracleExcludedObjects.internalValue = value;
    }
    resetOracleExcludedObjects() {
        this._oracleExcludedObjects.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get oracleExcludedObjectsInput() {
        return this._oracleExcludedObjects.internalValue;
    }
    get postgresqlExcludedObjects() {
        return this._postgresqlExcludedObjects;
    }
    putPostgresqlExcludedObjects(value) {
        this._postgresqlExcludedObjects.internalValue = value;
    }
    resetPostgresqlExcludedObjects() {
        this._postgresqlExcludedObjects.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get postgresqlExcludedObjectsInput() {
        return this._postgresqlExcludedObjects.internalValue;
    }
    get sqlServerExcludedObjects() {
        return this._sqlServerExcludedObjects;
    }
    putSqlServerExcludedObjects(value) {
        this._sqlServerExcludedObjects.internalValue = value;
    }
    resetSqlServerExcludedObjects() {
        this._sqlServerExcludedObjects.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sqlServerExcludedObjectsInput() {
        return this._sqlServerExcludedObjects.internalValue;
    }
}
exports.DatastreamStreamBackfillAllOutputReference = DatastreamStreamBackfillAllOutputReference;
_4 = JSII_RTTI_SYMBOL_1;
DatastreamStreamBackfillAllOutputReference[_4] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamBackfillAllOutputReference", version: "14.13.1" };
function datastreamStreamBackfillNoneToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.datastreamStreamBackfillNoneToTerraform = datastreamStreamBackfillNoneToTerraform;
function datastreamStreamBackfillNoneToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.datastreamStreamBackfillNoneToHclTerraform = datastreamStreamBackfillNoneToHclTerraform;
class DatastreamStreamBackfillNoneOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DatastreamStreamBackfillNoneOutputReference = DatastreamStreamBackfillNoneOutputReference;
_5 = JSII_RTTI_SYMBOL_1;
DatastreamStreamBackfillNoneOutputReference[_5] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamBackfillNoneOutputReference", version: "14.13.1" };
function datastreamStreamDestinationConfigBigqueryDestinationConfigAppendOnlyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.datastreamStreamDestinationConfigBigqueryDestinationConfigAppendOnlyToTerraform = datastreamStreamDestinationConfigBigqueryDestinationConfigAppendOnlyToTerraform;
function datastreamStreamDestinationConfigBigqueryDestinationConfigAppendOnlyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.datastreamStreamDestinationConfigBigqueryDestinationConfigAppendOnlyToHclTerraform = datastreamStreamDestinationConfigBigqueryDestinationConfigAppendOnlyToHclTerraform;
class DatastreamStreamDestinationConfigBigqueryDestinationConfigAppendOnlyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DatastreamStreamDestinationConfigBigqueryDestinationConfigAppendOnlyOutputReference = DatastreamStreamDestinationConfigBigqueryDestinationConfigAppendOnlyOutputReference;
_6 = JSII_RTTI_SYMBOL_1;
DatastreamStreamDestinationConfigBigqueryDestinationConfigAppendOnlyOutputReference[_6] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamDestinationConfigBigqueryDestinationConfigAppendOnlyOutputReference", version: "14.13.1" };
function datastreamStreamDestinationConfigBigqueryDestinationConfigMergeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.datastreamStreamDestinationConfigBigqueryDestinationConfigMergeToTerraform = datastreamStreamDestinationConfigBigqueryDestinationConfigMergeToTerraform;
function datastreamStreamDestinationConfigBigqueryDestinationConfigMergeToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.datastreamStreamDestinationConfigBigqueryDestinationConfigMergeToHclTerraform = datastreamStreamDestinationConfigBigqueryDestinationConfigMergeToHclTerraform;
class DatastreamStreamDestinationConfigBigqueryDestinationConfigMergeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DatastreamStreamDestinationConfigBigqueryDestinationConfigMergeOutputReference = DatastreamStreamDestinationConfigBigqueryDestinationConfigMergeOutputReference;
_7 = JSII_RTTI_SYMBOL_1;
DatastreamStreamDestinationConfigBigqueryDestinationConfigMergeOutputReference[_7] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamDestinationConfigBigqueryDestinationConfigMergeOutputReference", version: "14.13.1" };
function datastreamStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        dataset_id: cdktf.stringToTerraform(struct.datasetId),
    };
}
exports.datastreamStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetToTerraform = datastreamStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetToTerraform;
function datastreamStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        dataset_id: {
            value: cdktf.stringToHclTerraform(struct.datasetId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetToHclTerraform = datastreamStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetToHclTerraform;
class DatastreamStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._datasetId !== undefined) {
            hasAnyValues = true;
            internalValueResult.datasetId = this._datasetId;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._datasetId = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._datasetId = value.datasetId;
        }
    }
    get datasetId() {
        return this.getStringAttribute('dataset_id');
    }
    set datasetId(value) {
        this._datasetId = value;
    }
    // Temporarily expose input value. Use with caution.
    get datasetIdInput() {
        return this._datasetId;
    }
}
exports.DatastreamStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetOutputReference = DatastreamStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetOutputReference;
_8 = JSII_RTTI_SYMBOL_1;
DatastreamStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetOutputReference[_8] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetOutputReference", version: "14.13.1" };
function datastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        dataset_id_prefix: cdktf.stringToTerraform(struct.datasetIdPrefix),
        kms_key_name: cdktf.stringToTerraform(struct.kmsKeyName),
        location: cdktf.stringToTerraform(struct.location),
    };
}
exports.datastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateToTerraform = datastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateToTerraform;
function datastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        dataset_id_prefix: {
            value: cdktf.stringToHclTerraform(struct.datasetIdPrefix),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        kms_key_name: {
            value: cdktf.stringToHclTerraform(struct.kmsKeyName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        location: {
            value: cdktf.stringToHclTerraform(struct.location),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateToHclTerraform = datastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateToHclTerraform;
class DatastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._datasetIdPrefix !== undefined) {
            hasAnyValues = true;
            internalValueResult.datasetIdPrefix = this._datasetIdPrefix;
        }
        if (this._kmsKeyName !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyName = this._kmsKeyName;
        }
        if (this._location !== undefined) {
            hasAnyValues = true;
            internalValueResult.location = this._location;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._datasetIdPrefix = undefined;
            this._kmsKeyName = undefined;
            this._location = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._datasetIdPrefix = value.datasetIdPrefix;
            this._kmsKeyName = value.kmsKeyName;
            this._location = value.location;
        }
    }
    get datasetIdPrefix() {
        return this.getStringAttribute('dataset_id_prefix');
    }
    set datasetIdPrefix(value) {
        this._datasetIdPrefix = value;
    }
    resetDatasetIdPrefix() {
        this._datasetIdPrefix = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get datasetIdPrefixInput() {
        return this._datasetIdPrefix;
    }
    get kmsKeyName() {
        return this.getStringAttribute('kms_key_name');
    }
    set kmsKeyName(value) {
        this._kmsKeyName = value;
    }
    resetKmsKeyName() {
        this._kmsKeyName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyNameInput() {
        return this._kmsKeyName;
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
}
exports.DatastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateOutputReference = DatastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateOutputReference;
_9 = JSII_RTTI_SYMBOL_1;
DatastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateOutputReference[_9] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateOutputReference", version: "14.13.1" };
function datastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        dataset_template: datastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateToTerraform(struct.datasetTemplate),
    };
}
exports.datastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsToTerraform = datastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsToTerraform;
function datastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        dataset_template: {
            value: datastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateToHclTerraform(struct.datasetTemplate),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsToHclTerraform = datastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsToHclTerraform;
class DatastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // dataset_template - computed: false, optional: false, required: true
        this._datasetTemplate = new DatastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsDatasetTemplateOutputReference(this, "dataset_template");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._datasetTemplate?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.datasetTemplate = this._datasetTemplate?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._datasetTemplate.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._datasetTemplate.internalValue = value.datasetTemplate;
        }
    }
    get datasetTemplate() {
        return this._datasetTemplate;
    }
    putDatasetTemplate(value) {
        this._datasetTemplate.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get datasetTemplateInput() {
        return this._datasetTemplate.internalValue;
    }
}
exports.DatastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsOutputReference = DatastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsOutputReference;
_10 = JSII_RTTI_SYMBOL_1;
DatastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsOutputReference[_10] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsOutputReference", version: "14.13.1" };
function datastreamStreamDestinationConfigBigqueryDestinationConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        data_freshness: cdktf.stringToTerraform(struct.dataFreshness),
        append_only: datastreamStreamDestinationConfigBigqueryDestinationConfigAppendOnlyToTerraform(struct.appendOnly),
        merge: datastreamStreamDestinationConfigBigqueryDestinationConfigMergeToTerraform(struct.merge),
        single_target_dataset: datastreamStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetToTerraform(struct.singleTargetDataset),
        source_hierarchy_datasets: datastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsToTerraform(struct.sourceHierarchyDatasets),
    };
}
exports.datastreamStreamDestinationConfigBigqueryDestinationConfigToTerraform = datastreamStreamDestinationConfigBigqueryDestinationConfigToTerraform;
function datastreamStreamDestinationConfigBigqueryDestinationConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        data_freshness: {
            value: cdktf.stringToHclTerraform(struct.dataFreshness),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        append_only: {
            value: datastreamStreamDestinationConfigBigqueryDestinationConfigAppendOnlyToHclTerraform(struct.appendOnly),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamDestinationConfigBigqueryDestinationConfigAppendOnlyList",
        },
        merge: {
            value: datastreamStreamDestinationConfigBigqueryDestinationConfigMergeToHclTerraform(struct.merge),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamDestinationConfigBigqueryDestinationConfigMergeList",
        },
        single_target_dataset: {
            value: datastreamStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetToHclTerraform(struct.singleTargetDataset),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetList",
        },
        source_hierarchy_datasets: {
            value: datastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsToHclTerraform(struct.sourceHierarchyDatasets),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamDestinationConfigBigqueryDestinationConfigToHclTerraform = datastreamStreamDestinationConfigBigqueryDestinationConfigToHclTerraform;
class DatastreamStreamDestinationConfigBigqueryDestinationConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // append_only - computed: false, optional: true, required: false
        this._appendOnly = new DatastreamStreamDestinationConfigBigqueryDestinationConfigAppendOnlyOutputReference(this, "append_only");
        // merge - computed: false, optional: true, required: false
        this._merge = new DatastreamStreamDestinationConfigBigqueryDestinationConfigMergeOutputReference(this, "merge");
        // single_target_dataset - computed: false, optional: true, required: false
        this._singleTargetDataset = new DatastreamStreamDestinationConfigBigqueryDestinationConfigSingleTargetDatasetOutputReference(this, "single_target_dataset");
        // source_hierarchy_datasets - computed: false, optional: true, required: false
        this._sourceHierarchyDatasets = new DatastreamStreamDestinationConfigBigqueryDestinationConfigSourceHierarchyDatasetsOutputReference(this, "source_hierarchy_datasets");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dataFreshness !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataFreshness = this._dataFreshness;
        }
        if (this._appendOnly?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.appendOnly = this._appendOnly?.internalValue;
        }
        if (this._merge?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.merge = this._merge?.internalValue;
        }
        if (this._singleTargetDataset?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.singleTargetDataset = this._singleTargetDataset?.internalValue;
        }
        if (this._sourceHierarchyDatasets?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sourceHierarchyDatasets = this._sourceHierarchyDatasets?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._dataFreshness = undefined;
            this._appendOnly.internalValue = undefined;
            this._merge.internalValue = undefined;
            this._singleTargetDataset.internalValue = undefined;
            this._sourceHierarchyDatasets.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._dataFreshness = value.dataFreshness;
            this._appendOnly.internalValue = value.appendOnly;
            this._merge.internalValue = value.merge;
            this._singleTargetDataset.internalValue = value.singleTargetDataset;
            this._sourceHierarchyDatasets.internalValue = value.sourceHierarchyDatasets;
        }
    }
    get dataFreshness() {
        return this.getStringAttribute('data_freshness');
    }
    set dataFreshness(value) {
        this._dataFreshness = value;
    }
    resetDataFreshness() {
        this._dataFreshness = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataFreshnessInput() {
        return this._dataFreshness;
    }
    get appendOnly() {
        return this._appendOnly;
    }
    putAppendOnly(value) {
        this._appendOnly.internalValue = value;
    }
    resetAppendOnly() {
        this._appendOnly.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get appendOnlyInput() {
        return this._appendOnly.internalValue;
    }
    get merge() {
        return this._merge;
    }
    putMerge(value) {
        this._merge.internalValue = value;
    }
    resetMerge() {
        this._merge.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mergeInput() {
        return this._merge.internalValue;
    }
    get singleTargetDataset() {
        return this._singleTargetDataset;
    }
    putSingleTargetDataset(value) {
        this._singleTargetDataset.internalValue = value;
    }
    resetSingleTargetDataset() {
        this._singleTargetDataset.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get singleTargetDatasetInput() {
        return this._singleTargetDataset.internalValue;
    }
    get sourceHierarchyDatasets() {
        return this._sourceHierarchyDatasets;
    }
    putSourceHierarchyDatasets(value) {
        this._sourceHierarchyDatasets.internalValue = value;
    }
    resetSourceHierarchyDatasets() {
        this._sourceHierarchyDatasets.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sourceHierarchyDatasetsInput() {
        return this._sourceHierarchyDatasets.internalValue;
    }
}
exports.DatastreamStreamDestinationConfigBigqueryDestinationConfigOutputReference = DatastreamStreamDestinationConfigBigqueryDestinationConfigOutputReference;
_11 = JSII_RTTI_SYMBOL_1;
DatastreamStreamDestinationConfigBigqueryDestinationConfigOutputReference[_11] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamDestinationConfigBigqueryDestinationConfigOutputReference", version: "14.13.1" };
function datastreamStreamDestinationConfigGcsDestinationConfigAvroFileFormatToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.datastreamStreamDestinationConfigGcsDestinationConfigAvroFileFormatToTerraform = datastreamStreamDestinationConfigGcsDestinationConfigAvroFileFormatToTerraform;
function datastreamStreamDestinationConfigGcsDestinationConfigAvroFileFormatToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.datastreamStreamDestinationConfigGcsDestinationConfigAvroFileFormatToHclTerraform = datastreamStreamDestinationConfigGcsDestinationConfigAvroFileFormatToHclTerraform;
class DatastreamStreamDestinationConfigGcsDestinationConfigAvroFileFormatOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DatastreamStreamDestinationConfigGcsDestinationConfigAvroFileFormatOutputReference = DatastreamStreamDestinationConfigGcsDestinationConfigAvroFileFormatOutputReference;
_12 = JSII_RTTI_SYMBOL_1;
DatastreamStreamDestinationConfigGcsDestinationConfigAvroFileFormatOutputReference[_12] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamDestinationConfigGcsDestinationConfigAvroFileFormatOutputReference", version: "14.13.1" };
function datastreamStreamDestinationConfigGcsDestinationConfigJsonFileFormatToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        compression: cdktf.stringToTerraform(struct.compression),
        schema_file_format: cdktf.stringToTerraform(struct.schemaFileFormat),
    };
}
exports.datastreamStreamDestinationConfigGcsDestinationConfigJsonFileFormatToTerraform = datastreamStreamDestinationConfigGcsDestinationConfigJsonFileFormatToTerraform;
function datastreamStreamDestinationConfigGcsDestinationConfigJsonFileFormatToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        compression: {
            value: cdktf.stringToHclTerraform(struct.compression),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        schema_file_format: {
            value: cdktf.stringToHclTerraform(struct.schemaFileFormat),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamDestinationConfigGcsDestinationConfigJsonFileFormatToHclTerraform = datastreamStreamDestinationConfigGcsDestinationConfigJsonFileFormatToHclTerraform;
class DatastreamStreamDestinationConfigGcsDestinationConfigJsonFileFormatOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._compression !== undefined) {
            hasAnyValues = true;
            internalValueResult.compression = this._compression;
        }
        if (this._schemaFileFormat !== undefined) {
            hasAnyValues = true;
            internalValueResult.schemaFileFormat = this._schemaFileFormat;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._compression = undefined;
            this._schemaFileFormat = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._compression = value.compression;
            this._schemaFileFormat = value.schemaFileFormat;
        }
    }
    get compression() {
        return this.getStringAttribute('compression');
    }
    set compression(value) {
        this._compression = value;
    }
    resetCompression() {
        this._compression = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get compressionInput() {
        return this._compression;
    }
    get schemaFileFormat() {
        return this.getStringAttribute('schema_file_format');
    }
    set schemaFileFormat(value) {
        this._schemaFileFormat = value;
    }
    resetSchemaFileFormat() {
        this._schemaFileFormat = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get schemaFileFormatInput() {
        return this._schemaFileFormat;
    }
}
exports.DatastreamStreamDestinationConfigGcsDestinationConfigJsonFileFormatOutputReference = DatastreamStreamDestinationConfigGcsDestinationConfigJsonFileFormatOutputReference;
_13 = JSII_RTTI_SYMBOL_1;
DatastreamStreamDestinationConfigGcsDestinationConfigJsonFileFormatOutputReference[_13] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamDestinationConfigGcsDestinationConfigJsonFileFormatOutputReference", version: "14.13.1" };
function datastreamStreamDestinationConfigGcsDestinationConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        file_rotation_interval: cdktf.stringToTerraform(struct.fileRotationInterval),
        file_rotation_mb: cdktf.numberToTerraform(struct.fileRotationMb),
        path: cdktf.stringToTerraform(struct.path),
        avro_file_format: datastreamStreamDestinationConfigGcsDestinationConfigAvroFileFormatToTerraform(struct.avroFileFormat),
        json_file_format: datastreamStreamDestinationConfigGcsDestinationConfigJsonFileFormatToTerraform(struct.jsonFileFormat),
    };
}
exports.datastreamStreamDestinationConfigGcsDestinationConfigToTerraform = datastreamStreamDestinationConfigGcsDestinationConfigToTerraform;
function datastreamStreamDestinationConfigGcsDestinationConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        file_rotation_interval: {
            value: cdktf.stringToHclTerraform(struct.fileRotationInterval),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        file_rotation_mb: {
            value: cdktf.numberToHclTerraform(struct.fileRotationMb),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        path: {
            value: cdktf.stringToHclTerraform(struct.path),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        avro_file_format: {
            value: datastreamStreamDestinationConfigGcsDestinationConfigAvroFileFormatToHclTerraform(struct.avroFileFormat),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamDestinationConfigGcsDestinationConfigAvroFileFormatList",
        },
        json_file_format: {
            value: datastreamStreamDestinationConfigGcsDestinationConfigJsonFileFormatToHclTerraform(struct.jsonFileFormat),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamDestinationConfigGcsDestinationConfigJsonFileFormatList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamDestinationConfigGcsDestinationConfigToHclTerraform = datastreamStreamDestinationConfigGcsDestinationConfigToHclTerraform;
class DatastreamStreamDestinationConfigGcsDestinationConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // avro_file_format - computed: false, optional: true, required: false
        this._avroFileFormat = new DatastreamStreamDestinationConfigGcsDestinationConfigAvroFileFormatOutputReference(this, "avro_file_format");
        // json_file_format - computed: false, optional: true, required: false
        this._jsonFileFormat = new DatastreamStreamDestinationConfigGcsDestinationConfigJsonFileFormatOutputReference(this, "json_file_format");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._fileRotationInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.fileRotationInterval = this._fileRotationInterval;
        }
        if (this._fileRotationMb !== undefined) {
            hasAnyValues = true;
            internalValueResult.fileRotationMb = this._fileRotationMb;
        }
        if (this._path !== undefined) {
            hasAnyValues = true;
            internalValueResult.path = this._path;
        }
        if (this._avroFileFormat?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.avroFileFormat = this._avroFileFormat?.internalValue;
        }
        if (this._jsonFileFormat?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.jsonFileFormat = this._jsonFileFormat?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._fileRotationInterval = undefined;
            this._fileRotationMb = undefined;
            this._path = undefined;
            this._avroFileFormat.internalValue = undefined;
            this._jsonFileFormat.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._fileRotationInterval = value.fileRotationInterval;
            this._fileRotationMb = value.fileRotationMb;
            this._path = value.path;
            this._avroFileFormat.internalValue = value.avroFileFormat;
            this._jsonFileFormat.internalValue = value.jsonFileFormat;
        }
    }
    get fileRotationInterval() {
        return this.getStringAttribute('file_rotation_interval');
    }
    set fileRotationInterval(value) {
        this._fileRotationInterval = value;
    }
    resetFileRotationInterval() {
        this._fileRotationInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fileRotationIntervalInput() {
        return this._fileRotationInterval;
    }
    get fileRotationMb() {
        return this.getNumberAttribute('file_rotation_mb');
    }
    set fileRotationMb(value) {
        this._fileRotationMb = value;
    }
    resetFileRotationMb() {
        this._fileRotationMb = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fileRotationMbInput() {
        return this._fileRotationMb;
    }
    get path() {
        return this.getStringAttribute('path');
    }
    set path(value) {
        this._path = value;
    }
    resetPath() {
        this._path = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pathInput() {
        return this._path;
    }
    get avroFileFormat() {
        return this._avroFileFormat;
    }
    putAvroFileFormat(value) {
        this._avroFileFormat.internalValue = value;
    }
    resetAvroFileFormat() {
        this._avroFileFormat.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get avroFileFormatInput() {
        return this._avroFileFormat.internalValue;
    }
    get jsonFileFormat() {
        return this._jsonFileFormat;
    }
    putJsonFileFormat(value) {
        this._jsonFileFormat.internalValue = value;
    }
    resetJsonFileFormat() {
        this._jsonFileFormat.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jsonFileFormatInput() {
        return this._jsonFileFormat.internalValue;
    }
}
exports.DatastreamStreamDestinationConfigGcsDestinationConfigOutputReference = DatastreamStreamDestinationConfigGcsDestinationConfigOutputReference;
_14 = JSII_RTTI_SYMBOL_1;
DatastreamStreamDestinationConfigGcsDestinationConfigOutputReference[_14] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamDestinationConfigGcsDestinationConfigOutputReference", version: "14.13.1" };
function datastreamStreamDestinationConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        destination_connection_profile: cdktf.stringToTerraform(struct.destinationConnectionProfile),
        bigquery_destination_config: datastreamStreamDestinationConfigBigqueryDestinationConfigToTerraform(struct.bigqueryDestinationConfig),
        gcs_destination_config: datastreamStreamDestinationConfigGcsDestinationConfigToTerraform(struct.gcsDestinationConfig),
    };
}
exports.datastreamStreamDestinationConfigToTerraform = datastreamStreamDestinationConfigToTerraform;
function datastreamStreamDestinationConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        destination_connection_profile: {
            value: cdktf.stringToHclTerraform(struct.destinationConnectionProfile),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        bigquery_destination_config: {
            value: datastreamStreamDestinationConfigBigqueryDestinationConfigToHclTerraform(struct.bigqueryDestinationConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamDestinationConfigBigqueryDestinationConfigList",
        },
        gcs_destination_config: {
            value: datastreamStreamDestinationConfigGcsDestinationConfigToHclTerraform(struct.gcsDestinationConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamDestinationConfigGcsDestinationConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamDestinationConfigToHclTerraform = datastreamStreamDestinationConfigToHclTerraform;
class DatastreamStreamDestinationConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // bigquery_destination_config - computed: false, optional: true, required: false
        this._bigqueryDestinationConfig = new DatastreamStreamDestinationConfigBigqueryDestinationConfigOutputReference(this, "bigquery_destination_config");
        // gcs_destination_config - computed: false, optional: true, required: false
        this._gcsDestinationConfig = new DatastreamStreamDestinationConfigGcsDestinationConfigOutputReference(this, "gcs_destination_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._destinationConnectionProfile !== undefined) {
            hasAnyValues = true;
            internalValueResult.destinationConnectionProfile = this._destinationConnectionProfile;
        }
        if (this._bigqueryDestinationConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.bigqueryDestinationConfig = this._bigqueryDestinationConfig?.internalValue;
        }
        if (this._gcsDestinationConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.gcsDestinationConfig = this._gcsDestinationConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._destinationConnectionProfile = undefined;
            this._bigqueryDestinationConfig.internalValue = undefined;
            this._gcsDestinationConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._destinationConnectionProfile = value.destinationConnectionProfile;
            this._bigqueryDestinationConfig.internalValue = value.bigqueryDestinationConfig;
            this._gcsDestinationConfig.internalValue = value.gcsDestinationConfig;
        }
    }
    get destinationConnectionProfile() {
        return this.getStringAttribute('destination_connection_profile');
    }
    set destinationConnectionProfile(value) {
        this._destinationConnectionProfile = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationConnectionProfileInput() {
        return this._destinationConnectionProfile;
    }
    get bigqueryDestinationConfig() {
        return this._bigqueryDestinationConfig;
    }
    putBigqueryDestinationConfig(value) {
        this._bigqueryDestinationConfig.internalValue = value;
    }
    resetBigqueryDestinationConfig() {
        this._bigqueryDestinationConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bigqueryDestinationConfigInput() {
        return this._bigqueryDestinationConfig.internalValue;
    }
    get gcsDestinationConfig() {
        return this._gcsDestinationConfig;
    }
    putGcsDestinationConfig(value) {
        this._gcsDestinationConfig.internalValue = value;
    }
    resetGcsDestinationConfig() {
        this._gcsDestinationConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gcsDestinationConfigInput() {
        return this._gcsDestinationConfig.internalValue;
    }
}
exports.DatastreamStreamDestinationConfigOutputReference = DatastreamStreamDestinationConfigOutputReference;
_15 = JSII_RTTI_SYMBOL_1;
DatastreamStreamDestinationConfigOutputReference[_15] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamDestinationConfigOutputReference", version: "14.13.1" };
function datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        collation: cdktf.stringToTerraform(struct.collation),
        column: cdktf.stringToTerraform(struct.column),
        data_type: cdktf.stringToTerraform(struct.dataType),
        nullable: cdktf.booleanToTerraform(struct.nullable),
        ordinal_position: cdktf.numberToTerraform(struct.ordinalPosition),
        primary_key: cdktf.booleanToTerraform(struct.primaryKey),
    };
}
exports.datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsToTerraform = datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsToTerraform;
function datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        collation: {
            value: cdktf.stringToHclTerraform(struct.collation),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        column: {
            value: cdktf.stringToHclTerraform(struct.column),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        data_type: {
            value: cdktf.stringToHclTerraform(struct.dataType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        nullable: {
            value: cdktf.booleanToHclTerraform(struct.nullable),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        ordinal_position: {
            value: cdktf.numberToHclTerraform(struct.ordinalPosition),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        primary_key: {
            value: cdktf.booleanToHclTerraform(struct.primaryKey),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsToHclTerraform = datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsToHclTerraform;
class DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._collation !== undefined) {
            hasAnyValues = true;
            internalValueResult.collation = this._collation;
        }
        if (this._column !== undefined) {
            hasAnyValues = true;
            internalValueResult.column = this._column;
        }
        if (this._dataType !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataType = this._dataType;
        }
        if (this._nullable !== undefined) {
            hasAnyValues = true;
            internalValueResult.nullable = this._nullable;
        }
        if (this._ordinalPosition !== undefined) {
            hasAnyValues = true;
            internalValueResult.ordinalPosition = this._ordinalPosition;
        }
        if (this._primaryKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.primaryKey = this._primaryKey;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._collation = undefined;
            this._column = undefined;
            this._dataType = undefined;
            this._nullable = undefined;
            this._ordinalPosition = undefined;
            this._primaryKey = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._collation = value.collation;
            this._column = value.column;
            this._dataType = value.dataType;
            this._nullable = value.nullable;
            this._ordinalPosition = value.ordinalPosition;
            this._primaryKey = value.primaryKey;
        }
    }
    get collation() {
        return this.getStringAttribute('collation');
    }
    set collation(value) {
        this._collation = value;
    }
    resetCollation() {
        this._collation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get collationInput() {
        return this._collation;
    }
    get column() {
        return this.getStringAttribute('column');
    }
    set column(value) {
        this._column = value;
    }
    resetColumn() {
        this._column = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get columnInput() {
        return this._column;
    }
    get dataType() {
        return this.getStringAttribute('data_type');
    }
    set dataType(value) {
        this._dataType = value;
    }
    resetDataType() {
        this._dataType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataTypeInput() {
        return this._dataType;
    }
    // length - computed: true, optional: false, required: false
    get length() {
        return this.getNumberAttribute('length');
    }
    get nullable() {
        return this.getBooleanAttribute('nullable');
    }
    set nullable(value) {
        this._nullable = value;
    }
    resetNullable() {
        this._nullable = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nullableInput() {
        return this._nullable;
    }
    get ordinalPosition() {
        return this.getNumberAttribute('ordinal_position');
    }
    set ordinalPosition(value) {
        this._ordinalPosition = value;
    }
    resetOrdinalPosition() {
        this._ordinalPosition = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ordinalPositionInput() {
        return this._ordinalPosition;
    }
    get primaryKey() {
        return this.getBooleanAttribute('primary_key');
    }
    set primaryKey(value) {
        this._primaryKey = value;
    }
    resetPrimaryKey() {
        this._primaryKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get primaryKeyInput() {
        return this._primaryKey;
    }
}
exports.DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsOutputReference = DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsOutputReference;
_16 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsOutputReference[_16] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsOutputReference", version: "14.13.1" };
class DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsList = DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsList;
_17 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsList[_17] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsList", version: "14.13.1" };
function datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        table: cdktf.stringToTerraform(struct.table),
        mysql_columns: cdktf.listMapper(datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsToTerraform, true)(struct.mysqlColumns),
    };
}
exports.datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesToTerraform = datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesToTerraform;
function datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        table: {
            value: cdktf.stringToHclTerraform(struct.table),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        mysql_columns: {
            value: cdktf.listMapperHcl(datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsToHclTerraform, true)(struct.mysqlColumns),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesToHclTerraform = datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesToHclTerraform;
class DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // mysql_columns - computed: false, optional: true, required: false
        this._mysqlColumns = new DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsList(this, "mysql_columns", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._table !== undefined) {
            hasAnyValues = true;
            internalValueResult.table = this._table;
        }
        if (this._mysqlColumns?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mysqlColumns = this._mysqlColumns?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._table = undefined;
            this._mysqlColumns.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._table = value.table;
            this._mysqlColumns.internalValue = value.mysqlColumns;
        }
    }
    get table() {
        return this.getStringAttribute('table');
    }
    set table(value) {
        this._table = value;
    }
    // Temporarily expose input value. Use with caution.
    get tableInput() {
        return this._table;
    }
    get mysqlColumns() {
        return this._mysqlColumns;
    }
    putMysqlColumns(value) {
        this._mysqlColumns.internalValue = value;
    }
    resetMysqlColumns() {
        this._mysqlColumns.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mysqlColumnsInput() {
        return this._mysqlColumns.internalValue;
    }
}
exports.DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesOutputReference = DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesOutputReference;
_18 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesOutputReference[_18] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesOutputReference", version: "14.13.1" };
class DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesList = DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesList;
_19 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesList[_19] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesList", version: "14.13.1" };
function datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        mysql_tables: cdktf.listMapper(datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesToTerraform, true)(struct.mysqlTables),
    };
}
exports.datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesToTerraform = datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesToTerraform;
function datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        database: {
            value: cdktf.stringToHclTerraform(struct.database),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        mysql_tables: {
            value: cdktf.listMapperHcl(datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesToHclTerraform, true)(struct.mysqlTables),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesToHclTerraform = datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesToHclTerraform;
class DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // mysql_tables - computed: false, optional: true, required: false
        this._mysqlTables = new DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesMysqlTablesList(this, "mysql_tables", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._database !== undefined) {
            hasAnyValues = true;
            internalValueResult.database = this._database;
        }
        if (this._mysqlTables?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mysqlTables = this._mysqlTables?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._database = undefined;
            this._mysqlTables.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._database = value.database;
            this._mysqlTables.internalValue = value.mysqlTables;
        }
    }
    get database() {
        return this.getStringAttribute('database');
    }
    set database(value) {
        this._database = value;
    }
    // Temporarily expose input value. Use with caution.
    get databaseInput() {
        return this._database;
    }
    get mysqlTables() {
        return this._mysqlTables;
    }
    putMysqlTables(value) {
        this._mysqlTables.internalValue = value;
    }
    resetMysqlTables() {
        this._mysqlTables.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mysqlTablesInput() {
        return this._mysqlTables.internalValue;
    }
}
exports.DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesOutputReference = DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesOutputReference;
_20 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesOutputReference[_20] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesOutputReference", version: "14.13.1" };
class DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesList = DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesList;
_21 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesList[_21] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesList", version: "14.13.1" };
function datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        mysql_databases: cdktf.listMapper(datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesToTerraform, true)(struct.mysqlDatabases),
    };
}
exports.datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsToTerraform = datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsToTerraform;
function datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        mysql_databases: {
            value: cdktf.listMapperHcl(datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesToHclTerraform, true)(struct.mysqlDatabases),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsToHclTerraform = datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsToHclTerraform;
class DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // mysql_databases - computed: false, optional: false, required: true
        this._mysqlDatabases = new DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsMysqlDatabasesList(this, "mysql_databases", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._mysqlDatabases?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mysqlDatabases = this._mysqlDatabases?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._mysqlDatabases.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._mysqlDatabases.internalValue = value.mysqlDatabases;
        }
    }
    get mysqlDatabases() {
        return this._mysqlDatabases;
    }
    putMysqlDatabases(value) {
        this._mysqlDatabases.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get mysqlDatabasesInput() {
        return this._mysqlDatabases.internalValue;
    }
}
exports.DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsOutputReference = DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsOutputReference;
_22 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsOutputReference[_22] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsOutputReference", version: "14.13.1" };
function datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        collation: cdktf.stringToTerraform(struct.collation),
        column: cdktf.stringToTerraform(struct.column),
        data_type: cdktf.stringToTerraform(struct.dataType),
        nullable: cdktf.booleanToTerraform(struct.nullable),
        ordinal_position: cdktf.numberToTerraform(struct.ordinalPosition),
        primary_key: cdktf.booleanToTerraform(struct.primaryKey),
    };
}
exports.datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsToTerraform = datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsToTerraform;
function datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        collation: {
            value: cdktf.stringToHclTerraform(struct.collation),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        column: {
            value: cdktf.stringToHclTerraform(struct.column),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        data_type: {
            value: cdktf.stringToHclTerraform(struct.dataType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        nullable: {
            value: cdktf.booleanToHclTerraform(struct.nullable),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        ordinal_position: {
            value: cdktf.numberToHclTerraform(struct.ordinalPosition),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        primary_key: {
            value: cdktf.booleanToHclTerraform(struct.primaryKey),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsToHclTerraform = datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsToHclTerraform;
class DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._collation !== undefined) {
            hasAnyValues = true;
            internalValueResult.collation = this._collation;
        }
        if (this._column !== undefined) {
            hasAnyValues = true;
            internalValueResult.column = this._column;
        }
        if (this._dataType !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataType = this._dataType;
        }
        if (this._nullable !== undefined) {
            hasAnyValues = true;
            internalValueResult.nullable = this._nullable;
        }
        if (this._ordinalPosition !== undefined) {
            hasAnyValues = true;
            internalValueResult.ordinalPosition = this._ordinalPosition;
        }
        if (this._primaryKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.primaryKey = this._primaryKey;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._collation = undefined;
            this._column = undefined;
            this._dataType = undefined;
            this._nullable = undefined;
            this._ordinalPosition = undefined;
            this._primaryKey = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._collation = value.collation;
            this._column = value.column;
            this._dataType = value.dataType;
            this._nullable = value.nullable;
            this._ordinalPosition = value.ordinalPosition;
            this._primaryKey = value.primaryKey;
        }
    }
    get collation() {
        return this.getStringAttribute('collation');
    }
    set collation(value) {
        this._collation = value;
    }
    resetCollation() {
        this._collation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get collationInput() {
        return this._collation;
    }
    get column() {
        return this.getStringAttribute('column');
    }
    set column(value) {
        this._column = value;
    }
    resetColumn() {
        this._column = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get columnInput() {
        return this._column;
    }
    get dataType() {
        return this.getStringAttribute('data_type');
    }
    set dataType(value) {
        this._dataType = value;
    }
    resetDataType() {
        this._dataType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataTypeInput() {
        return this._dataType;
    }
    // length - computed: true, optional: false, required: false
    get length() {
        return this.getNumberAttribute('length');
    }
    get nullable() {
        return this.getBooleanAttribute('nullable');
    }
    set nullable(value) {
        this._nullable = value;
    }
    resetNullable() {
        this._nullable = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nullableInput() {
        return this._nullable;
    }
    get ordinalPosition() {
        return this.getNumberAttribute('ordinal_position');
    }
    set ordinalPosition(value) {
        this._ordinalPosition = value;
    }
    resetOrdinalPosition() {
        this._ordinalPosition = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ordinalPositionInput() {
        return this._ordinalPosition;
    }
    get primaryKey() {
        return this.getBooleanAttribute('primary_key');
    }
    set primaryKey(value) {
        this._primaryKey = value;
    }
    resetPrimaryKey() {
        this._primaryKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get primaryKeyInput() {
        return this._primaryKey;
    }
}
exports.DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsOutputReference = DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsOutputReference;
_23 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsOutputReference[_23] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsOutputReference", version: "14.13.1" };
class DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsList = DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsList;
_24 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsList[_24] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsList", version: "14.13.1" };
function datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        table: cdktf.stringToTerraform(struct.table),
        mysql_columns: cdktf.listMapper(datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsToTerraform, true)(struct.mysqlColumns),
    };
}
exports.datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesToTerraform = datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesToTerraform;
function datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        table: {
            value: cdktf.stringToHclTerraform(struct.table),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        mysql_columns: {
            value: cdktf.listMapperHcl(datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsToHclTerraform, true)(struct.mysqlColumns),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesToHclTerraform = datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesToHclTerraform;
class DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // mysql_columns - computed: false, optional: true, required: false
        this._mysqlColumns = new DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesMysqlColumnsList(this, "mysql_columns", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._table !== undefined) {
            hasAnyValues = true;
            internalValueResult.table = this._table;
        }
        if (this._mysqlColumns?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mysqlColumns = this._mysqlColumns?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._table = undefined;
            this._mysqlColumns.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._table = value.table;
            this._mysqlColumns.internalValue = value.mysqlColumns;
        }
    }
    get table() {
        return this.getStringAttribute('table');
    }
    set table(value) {
        this._table = value;
    }
    // Temporarily expose input value. Use with caution.
    get tableInput() {
        return this._table;
    }
    get mysqlColumns() {
        return this._mysqlColumns;
    }
    putMysqlColumns(value) {
        this._mysqlColumns.internalValue = value;
    }
    resetMysqlColumns() {
        this._mysqlColumns.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mysqlColumnsInput() {
        return this._mysqlColumns.internalValue;
    }
}
exports.DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesOutputReference = DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesOutputReference;
_25 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesOutputReference[_25] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesOutputReference", version: "14.13.1" };
class DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesList = DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesList;
_26 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesList[_26] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesList", version: "14.13.1" };
function datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        database: cdktf.stringToTerraform(struct.database),
        mysql_tables: cdktf.listMapper(datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesToTerraform, true)(struct.mysqlTables),
    };
}
exports.datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesToTerraform = datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesToTerraform;
function datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        database: {
            value: cdktf.stringToHclTerraform(struct.database),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        mysql_tables: {
            value: cdktf.listMapperHcl(datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesToHclTerraform, true)(struct.mysqlTables),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesToHclTerraform = datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesToHclTerraform;
class DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // mysql_tables - computed: false, optional: true, required: false
        this._mysqlTables = new DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesMysqlTablesList(this, "mysql_tables", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._database !== undefined) {
            hasAnyValues = true;
            internalValueResult.database = this._database;
        }
        if (this._mysqlTables?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mysqlTables = this._mysqlTables?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._database = undefined;
            this._mysqlTables.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._database = value.database;
            this._mysqlTables.internalValue = value.mysqlTables;
        }
    }
    get database() {
        return this.getStringAttribute('database');
    }
    set database(value) {
        this._database = value;
    }
    // Temporarily expose input value. Use with caution.
    get databaseInput() {
        return this._database;
    }
    get mysqlTables() {
        return this._mysqlTables;
    }
    putMysqlTables(value) {
        this._mysqlTables.internalValue = value;
    }
    resetMysqlTables() {
        this._mysqlTables.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mysqlTablesInput() {
        return this._mysqlTables.internalValue;
    }
}
exports.DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesOutputReference = DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesOutputReference;
_27 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesOutputReference[_27] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesOutputReference", version: "14.13.1" };
class DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesList = DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesList;
_28 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesList[_28] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesList", version: "14.13.1" };
function datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        mysql_databases: cdktf.listMapper(datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesToTerraform, true)(struct.mysqlDatabases),
    };
}
exports.datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsToTerraform = datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsToTerraform;
function datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        mysql_databases: {
            value: cdktf.listMapperHcl(datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesToHclTerraform, true)(struct.mysqlDatabases),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsToHclTerraform = datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsToHclTerraform;
class DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // mysql_databases - computed: false, optional: false, required: true
        this._mysqlDatabases = new DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsMysqlDatabasesList(this, "mysql_databases", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._mysqlDatabases?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mysqlDatabases = this._mysqlDatabases?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._mysqlDatabases.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._mysqlDatabases.internalValue = value.mysqlDatabases;
        }
    }
    get mysqlDatabases() {
        return this._mysqlDatabases;
    }
    putMysqlDatabases(value) {
        this._mysqlDatabases.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get mysqlDatabasesInput() {
        return this._mysqlDatabases.internalValue;
    }
}
exports.DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsOutputReference = DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsOutputReference;
_29 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsOutputReference[_29] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsOutputReference", version: "14.13.1" };
function datastreamStreamSourceConfigMysqlSourceConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max_concurrent_backfill_tasks: cdktf.numberToTerraform(struct.maxConcurrentBackfillTasks),
        max_concurrent_cdc_tasks: cdktf.numberToTerraform(struct.maxConcurrentCdcTasks),
        exclude_objects: datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsToTerraform(struct.excludeObjects),
        include_objects: datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsToTerraform(struct.includeObjects),
    };
}
exports.datastreamStreamSourceConfigMysqlSourceConfigToTerraform = datastreamStreamSourceConfigMysqlSourceConfigToTerraform;
function datastreamStreamSourceConfigMysqlSourceConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        max_concurrent_backfill_tasks: {
            value: cdktf.numberToHclTerraform(struct.maxConcurrentBackfillTasks),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        max_concurrent_cdc_tasks: {
            value: cdktf.numberToHclTerraform(struct.maxConcurrentCdcTasks),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        exclude_objects: {
            value: datastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsToHclTerraform(struct.excludeObjects),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsList",
        },
        include_objects: {
            value: datastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsToHclTerraform(struct.includeObjects),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamSourceConfigMysqlSourceConfigToHclTerraform = datastreamStreamSourceConfigMysqlSourceConfigToHclTerraform;
class DatastreamStreamSourceConfigMysqlSourceConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // exclude_objects - computed: false, optional: true, required: false
        this._excludeObjects = new DatastreamStreamSourceConfigMysqlSourceConfigExcludeObjectsOutputReference(this, "exclude_objects");
        // include_objects - computed: false, optional: true, required: false
        this._includeObjects = new DatastreamStreamSourceConfigMysqlSourceConfigIncludeObjectsOutputReference(this, "include_objects");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._maxConcurrentBackfillTasks !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxConcurrentBackfillTasks = this._maxConcurrentBackfillTasks;
        }
        if (this._maxConcurrentCdcTasks !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxConcurrentCdcTasks = this._maxConcurrentCdcTasks;
        }
        if (this._excludeObjects?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.excludeObjects = this._excludeObjects?.internalValue;
        }
        if (this._includeObjects?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.includeObjects = this._includeObjects?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._maxConcurrentBackfillTasks = undefined;
            this._maxConcurrentCdcTasks = undefined;
            this._excludeObjects.internalValue = undefined;
            this._includeObjects.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._maxConcurrentBackfillTasks = value.maxConcurrentBackfillTasks;
            this._maxConcurrentCdcTasks = value.maxConcurrentCdcTasks;
            this._excludeObjects.internalValue = value.excludeObjects;
            this._includeObjects.internalValue = value.includeObjects;
        }
    }
    get maxConcurrentBackfillTasks() {
        return this.getNumberAttribute('max_concurrent_backfill_tasks');
    }
    set maxConcurrentBackfillTasks(value) {
        this._maxConcurrentBackfillTasks = value;
    }
    resetMaxConcurrentBackfillTasks() {
        this._maxConcurrentBackfillTasks = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxConcurrentBackfillTasksInput() {
        return this._maxConcurrentBackfillTasks;
    }
    get maxConcurrentCdcTasks() {
        return this.getNumberAttribute('max_concurrent_cdc_tasks');
    }
    set maxConcurrentCdcTasks(value) {
        this._maxConcurrentCdcTasks = value;
    }
    resetMaxConcurrentCdcTasks() {
        this._maxConcurrentCdcTasks = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxConcurrentCdcTasksInput() {
        return this._maxConcurrentCdcTasks;
    }
    get excludeObjects() {
        return this._excludeObjects;
    }
    putExcludeObjects(value) {
        this._excludeObjects.internalValue = value;
    }
    resetExcludeObjects() {
        this._excludeObjects.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludeObjectsInput() {
        return this._excludeObjects.internalValue;
    }
    get includeObjects() {
        return this._includeObjects;
    }
    putIncludeObjects(value) {
        this._includeObjects.internalValue = value;
    }
    resetIncludeObjects() {
        this._includeObjects.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeObjectsInput() {
        return this._includeObjects.internalValue;
    }
}
exports.DatastreamStreamSourceConfigMysqlSourceConfigOutputReference = DatastreamStreamSourceConfigMysqlSourceConfigOutputReference;
_30 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigMysqlSourceConfigOutputReference[_30] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigMysqlSourceConfigOutputReference", version: "14.13.1" };
function datastreamStreamSourceConfigOracleSourceConfigDropLargeObjectsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.datastreamStreamSourceConfigOracleSourceConfigDropLargeObjectsToTerraform = datastreamStreamSourceConfigOracleSourceConfigDropLargeObjectsToTerraform;
function datastreamStreamSourceConfigOracleSourceConfigDropLargeObjectsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.datastreamStreamSourceConfigOracleSourceConfigDropLargeObjectsToHclTerraform = datastreamStreamSourceConfigOracleSourceConfigDropLargeObjectsToHclTerraform;
class DatastreamStreamSourceConfigOracleSourceConfigDropLargeObjectsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DatastreamStreamSourceConfigOracleSourceConfigDropLargeObjectsOutputReference = DatastreamStreamSourceConfigOracleSourceConfigDropLargeObjectsOutputReference;
_31 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigOracleSourceConfigDropLargeObjectsOutputReference[_31] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigOracleSourceConfigDropLargeObjectsOutputReference", version: "14.13.1" };
function datastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesOracleColumnsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        column: cdktf.stringToTerraform(struct.column),
        data_type: cdktf.stringToTerraform(struct.dataType),
    };
}
exports.datastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesOracleColumnsToTerraform = datastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesOracleColumnsToTerraform;
function datastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesOracleColumnsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        column: {
            value: cdktf.stringToHclTerraform(struct.column),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        data_type: {
            value: cdktf.stringToHclTerraform(struct.dataType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesOracleColumnsToHclTerraform = datastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesOracleColumnsToHclTerraform;
class DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesOracleColumnsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._column !== undefined) {
            hasAnyValues = true;
            internalValueResult.column = this._column;
        }
        if (this._dataType !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataType = this._dataType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._column = undefined;
            this._dataType = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._column = value.column;
            this._dataType = value.dataType;
        }
    }
    get column() {
        return this.getStringAttribute('column');
    }
    set column(value) {
        this._column = value;
    }
    resetColumn() {
        this._column = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get columnInput() {
        return this._column;
    }
    get dataType() {
        return this.getStringAttribute('data_type');
    }
    set dataType(value) {
        this._dataType = value;
    }
    resetDataType() {
        this._dataType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataTypeInput() {
        return this._dataType;
    }
    // encoding - computed: true, optional: false, required: false
    get encoding() {
        return this.getStringAttribute('encoding');
    }
    // length - computed: true, optional: false, required: false
    get length() {
        return this.getNumberAttribute('length');
    }
    // nullable - computed: true, optional: false, required: false
    get nullable() {
        return this.getBooleanAttribute('nullable');
    }
    // ordinal_position - computed: true, optional: false, required: false
    get ordinalPosition() {
        return this.getNumberAttribute('ordinal_position');
    }
    // precision - computed: true, optional: false, required: false
    get precision() {
        return this.getNumberAttribute('precision');
    }
    // primary_key - computed: true, optional: false, required: false
    get primaryKey() {
        return this.getBooleanAttribute('primary_key');
    }
    // scale - computed: true, optional: false, required: false
    get scale() {
        return this.getNumberAttribute('scale');
    }
}
exports.DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesOracleColumnsOutputReference = DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesOracleColumnsOutputReference;
_32 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesOracleColumnsOutputReference[_32] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesOracleColumnsOutputReference", version: "14.13.1" };
class DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesOracleColumnsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesOracleColumnsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesOracleColumnsList = DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesOracleColumnsList;
_33 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesOracleColumnsList[_33] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesOracleColumnsList", version: "14.13.1" };
function datastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        table: cdktf.stringToTerraform(struct.table),
        oracle_columns: cdktf.listMapper(datastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesOracleColumnsToTerraform, true)(struct.oracleColumns),
    };
}
exports.datastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesToTerraform = datastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesToTerraform;
function datastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        table: {
            value: cdktf.stringToHclTerraform(struct.table),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        oracle_columns: {
            value: cdktf.listMapperHcl(datastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesOracleColumnsToHclTerraform, true)(struct.oracleColumns),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesOracleColumnsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesToHclTerraform = datastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesToHclTerraform;
class DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // oracle_columns - computed: false, optional: true, required: false
        this._oracleColumns = new DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesOracleColumnsList(this, "oracle_columns", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._table !== undefined) {
            hasAnyValues = true;
            internalValueResult.table = this._table;
        }
        if (this._oracleColumns?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.oracleColumns = this._oracleColumns?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._table = undefined;
            this._oracleColumns.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._table = value.table;
            this._oracleColumns.internalValue = value.oracleColumns;
        }
    }
    get table() {
        return this.getStringAttribute('table');
    }
    set table(value) {
        this._table = value;
    }
    // Temporarily expose input value. Use with caution.
    get tableInput() {
        return this._table;
    }
    get oracleColumns() {
        return this._oracleColumns;
    }
    putOracleColumns(value) {
        this._oracleColumns.internalValue = value;
    }
    resetOracleColumns() {
        this._oracleColumns.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get oracleColumnsInput() {
        return this._oracleColumns.internalValue;
    }
}
exports.DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesOutputReference = DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesOutputReference;
_34 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesOutputReference[_34] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesOutputReference", version: "14.13.1" };
class DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesList = DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesList;
_35 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesList[_35] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesList", version: "14.13.1" };
function datastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        schema: cdktf.stringToTerraform(struct.schema),
        oracle_tables: cdktf.listMapper(datastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesToTerraform, true)(struct.oracleTables),
    };
}
exports.datastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasToTerraform = datastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasToTerraform;
function datastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        schema: {
            value: cdktf.stringToHclTerraform(struct.schema),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        oracle_tables: {
            value: cdktf.listMapperHcl(datastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesToHclTerraform, true)(struct.oracleTables),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasToHclTerraform = datastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasToHclTerraform;
class DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // oracle_tables - computed: false, optional: true, required: false
        this._oracleTables = new DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOracleTablesList(this, "oracle_tables", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._schema !== undefined) {
            hasAnyValues = true;
            internalValueResult.schema = this._schema;
        }
        if (this._oracleTables?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.oracleTables = this._oracleTables?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._schema = undefined;
            this._oracleTables.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._schema = value.schema;
            this._oracleTables.internalValue = value.oracleTables;
        }
    }
    get schema() {
        return this.getStringAttribute('schema');
    }
    set schema(value) {
        this._schema = value;
    }
    // Temporarily expose input value. Use with caution.
    get schemaInput() {
        return this._schema;
    }
    get oracleTables() {
        return this._oracleTables;
    }
    putOracleTables(value) {
        this._oracleTables.internalValue = value;
    }
    resetOracleTables() {
        this._oracleTables.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get oracleTablesInput() {
        return this._oracleTables.internalValue;
    }
}
exports.DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOutputReference = DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOutputReference;
_36 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOutputReference[_36] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOutputReference", version: "14.13.1" };
class DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasList = DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasList;
_37 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasList[_37] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasList", version: "14.13.1" };
function datastreamStreamSourceConfigOracleSourceConfigExcludeObjectsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        oracle_schemas: cdktf.listMapper(datastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasToTerraform, true)(struct.oracleSchemas),
    };
}
exports.datastreamStreamSourceConfigOracleSourceConfigExcludeObjectsToTerraform = datastreamStreamSourceConfigOracleSourceConfigExcludeObjectsToTerraform;
function datastreamStreamSourceConfigOracleSourceConfigExcludeObjectsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        oracle_schemas: {
            value: cdktf.listMapperHcl(datastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasToHclTerraform, true)(struct.oracleSchemas),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamSourceConfigOracleSourceConfigExcludeObjectsToHclTerraform = datastreamStreamSourceConfigOracleSourceConfigExcludeObjectsToHclTerraform;
class DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // oracle_schemas - computed: false, optional: false, required: true
        this._oracleSchemas = new DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOracleSchemasList(this, "oracle_schemas", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._oracleSchemas?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.oracleSchemas = this._oracleSchemas?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._oracleSchemas.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._oracleSchemas.internalValue = value.oracleSchemas;
        }
    }
    get oracleSchemas() {
        return this._oracleSchemas;
    }
    putOracleSchemas(value) {
        this._oracleSchemas.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get oracleSchemasInput() {
        return this._oracleSchemas.internalValue;
    }
}
exports.DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOutputReference = DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOutputReference;
_38 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOutputReference[_38] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOutputReference", version: "14.13.1" };
function datastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesOracleColumnsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        column: cdktf.stringToTerraform(struct.column),
        data_type: cdktf.stringToTerraform(struct.dataType),
    };
}
exports.datastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesOracleColumnsToTerraform = datastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesOracleColumnsToTerraform;
function datastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesOracleColumnsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        column: {
            value: cdktf.stringToHclTerraform(struct.column),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        data_type: {
            value: cdktf.stringToHclTerraform(struct.dataType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesOracleColumnsToHclTerraform = datastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesOracleColumnsToHclTerraform;
class DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesOracleColumnsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._column !== undefined) {
            hasAnyValues = true;
            internalValueResult.column = this._column;
        }
        if (this._dataType !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataType = this._dataType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._column = undefined;
            this._dataType = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._column = value.column;
            this._dataType = value.dataType;
        }
    }
    get column() {
        return this.getStringAttribute('column');
    }
    set column(value) {
        this._column = value;
    }
    resetColumn() {
        this._column = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get columnInput() {
        return this._column;
    }
    get dataType() {
        return this.getStringAttribute('data_type');
    }
    set dataType(value) {
        this._dataType = value;
    }
    resetDataType() {
        this._dataType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataTypeInput() {
        return this._dataType;
    }
    // encoding - computed: true, optional: false, required: false
    get encoding() {
        return this.getStringAttribute('encoding');
    }
    // length - computed: true, optional: false, required: false
    get length() {
        return this.getNumberAttribute('length');
    }
    // nullable - computed: true, optional: false, required: false
    get nullable() {
        return this.getBooleanAttribute('nullable');
    }
    // ordinal_position - computed: true, optional: false, required: false
    get ordinalPosition() {
        return this.getNumberAttribute('ordinal_position');
    }
    // precision - computed: true, optional: false, required: false
    get precision() {
        return this.getNumberAttribute('precision');
    }
    // primary_key - computed: true, optional: false, required: false
    get primaryKey() {
        return this.getBooleanAttribute('primary_key');
    }
    // scale - computed: true, optional: false, required: false
    get scale() {
        return this.getNumberAttribute('scale');
    }
}
exports.DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesOracleColumnsOutputReference = DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesOracleColumnsOutputReference;
_39 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesOracleColumnsOutputReference[_39] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesOracleColumnsOutputReference", version: "14.13.1" };
class DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesOracleColumnsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesOracleColumnsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesOracleColumnsList = DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesOracleColumnsList;
_40 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesOracleColumnsList[_40] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesOracleColumnsList", version: "14.13.1" };
function datastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        table: cdktf.stringToTerraform(struct.table),
        oracle_columns: cdktf.listMapper(datastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesOracleColumnsToTerraform, true)(struct.oracleColumns),
    };
}
exports.datastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesToTerraform = datastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesToTerraform;
function datastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        table: {
            value: cdktf.stringToHclTerraform(struct.table),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        oracle_columns: {
            value: cdktf.listMapperHcl(datastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesOracleColumnsToHclTerraform, true)(struct.oracleColumns),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesOracleColumnsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesToHclTerraform = datastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesToHclTerraform;
class DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // oracle_columns - computed: false, optional: true, required: false
        this._oracleColumns = new DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesOracleColumnsList(this, "oracle_columns", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._table !== undefined) {
            hasAnyValues = true;
            internalValueResult.table = this._table;
        }
        if (this._oracleColumns?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.oracleColumns = this._oracleColumns?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._table = undefined;
            this._oracleColumns.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._table = value.table;
            this._oracleColumns.internalValue = value.oracleColumns;
        }
    }
    get table() {
        return this.getStringAttribute('table');
    }
    set table(value) {
        this._table = value;
    }
    // Temporarily expose input value. Use with caution.
    get tableInput() {
        return this._table;
    }
    get oracleColumns() {
        return this._oracleColumns;
    }
    putOracleColumns(value) {
        this._oracleColumns.internalValue = value;
    }
    resetOracleColumns() {
        this._oracleColumns.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get oracleColumnsInput() {
        return this._oracleColumns.internalValue;
    }
}
exports.DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesOutputReference = DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesOutputReference;
_41 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesOutputReference[_41] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesOutputReference", version: "14.13.1" };
class DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesList = DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesList;
_42 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesList[_42] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesList", version: "14.13.1" };
function datastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        schema: cdktf.stringToTerraform(struct.schema),
        oracle_tables: cdktf.listMapper(datastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesToTerraform, true)(struct.oracleTables),
    };
}
exports.datastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasToTerraform = datastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasToTerraform;
function datastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        schema: {
            value: cdktf.stringToHclTerraform(struct.schema),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        oracle_tables: {
            value: cdktf.listMapperHcl(datastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesToHclTerraform, true)(struct.oracleTables),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasToHclTerraform = datastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasToHclTerraform;
class DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // oracle_tables - computed: false, optional: true, required: false
        this._oracleTables = new DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOracleTablesList(this, "oracle_tables", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._schema !== undefined) {
            hasAnyValues = true;
            internalValueResult.schema = this._schema;
        }
        if (this._oracleTables?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.oracleTables = this._oracleTables?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._schema = undefined;
            this._oracleTables.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._schema = value.schema;
            this._oracleTables.internalValue = value.oracleTables;
        }
    }
    get schema() {
        return this.getStringAttribute('schema');
    }
    set schema(value) {
        this._schema = value;
    }
    // Temporarily expose input value. Use with caution.
    get schemaInput() {
        return this._schema;
    }
    get oracleTables() {
        return this._oracleTables;
    }
    putOracleTables(value) {
        this._oracleTables.internalValue = value;
    }
    resetOracleTables() {
        this._oracleTables.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get oracleTablesInput() {
        return this._oracleTables.internalValue;
    }
}
exports.DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOutputReference = DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOutputReference;
_43 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOutputReference[_43] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOutputReference", version: "14.13.1" };
class DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasList = DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasList;
_44 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasList[_44] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasList", version: "14.13.1" };
function datastreamStreamSourceConfigOracleSourceConfigIncludeObjectsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        oracle_schemas: cdktf.listMapper(datastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasToTerraform, true)(struct.oracleSchemas),
    };
}
exports.datastreamStreamSourceConfigOracleSourceConfigIncludeObjectsToTerraform = datastreamStreamSourceConfigOracleSourceConfigIncludeObjectsToTerraform;
function datastreamStreamSourceConfigOracleSourceConfigIncludeObjectsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        oracle_schemas: {
            value: cdktf.listMapperHcl(datastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasToHclTerraform, true)(struct.oracleSchemas),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamSourceConfigOracleSourceConfigIncludeObjectsToHclTerraform = datastreamStreamSourceConfigOracleSourceConfigIncludeObjectsToHclTerraform;
class DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // oracle_schemas - computed: false, optional: false, required: true
        this._oracleSchemas = new DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOracleSchemasList(this, "oracle_schemas", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._oracleSchemas?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.oracleSchemas = this._oracleSchemas?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._oracleSchemas.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._oracleSchemas.internalValue = value.oracleSchemas;
        }
    }
    get oracleSchemas() {
        return this._oracleSchemas;
    }
    putOracleSchemas(value) {
        this._oracleSchemas.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get oracleSchemasInput() {
        return this._oracleSchemas.internalValue;
    }
}
exports.DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOutputReference = DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOutputReference;
_45 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOutputReference[_45] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOutputReference", version: "14.13.1" };
function datastreamStreamSourceConfigOracleSourceConfigStreamLargeObjectsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.datastreamStreamSourceConfigOracleSourceConfigStreamLargeObjectsToTerraform = datastreamStreamSourceConfigOracleSourceConfigStreamLargeObjectsToTerraform;
function datastreamStreamSourceConfigOracleSourceConfigStreamLargeObjectsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.datastreamStreamSourceConfigOracleSourceConfigStreamLargeObjectsToHclTerraform = datastreamStreamSourceConfigOracleSourceConfigStreamLargeObjectsToHclTerraform;
class DatastreamStreamSourceConfigOracleSourceConfigStreamLargeObjectsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DatastreamStreamSourceConfigOracleSourceConfigStreamLargeObjectsOutputReference = DatastreamStreamSourceConfigOracleSourceConfigStreamLargeObjectsOutputReference;
_46 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigOracleSourceConfigStreamLargeObjectsOutputReference[_46] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigOracleSourceConfigStreamLargeObjectsOutputReference", version: "14.13.1" };
function datastreamStreamSourceConfigOracleSourceConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max_concurrent_backfill_tasks: cdktf.numberToTerraform(struct.maxConcurrentBackfillTasks),
        max_concurrent_cdc_tasks: cdktf.numberToTerraform(struct.maxConcurrentCdcTasks),
        drop_large_objects: datastreamStreamSourceConfigOracleSourceConfigDropLargeObjectsToTerraform(struct.dropLargeObjects),
        exclude_objects: datastreamStreamSourceConfigOracleSourceConfigExcludeObjectsToTerraform(struct.excludeObjects),
        include_objects: datastreamStreamSourceConfigOracleSourceConfigIncludeObjectsToTerraform(struct.includeObjects),
        stream_large_objects: datastreamStreamSourceConfigOracleSourceConfigStreamLargeObjectsToTerraform(struct.streamLargeObjects),
    };
}
exports.datastreamStreamSourceConfigOracleSourceConfigToTerraform = datastreamStreamSourceConfigOracleSourceConfigToTerraform;
function datastreamStreamSourceConfigOracleSourceConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        max_concurrent_backfill_tasks: {
            value: cdktf.numberToHclTerraform(struct.maxConcurrentBackfillTasks),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        max_concurrent_cdc_tasks: {
            value: cdktf.numberToHclTerraform(struct.maxConcurrentCdcTasks),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        drop_large_objects: {
            value: datastreamStreamSourceConfigOracleSourceConfigDropLargeObjectsToHclTerraform(struct.dropLargeObjects),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamSourceConfigOracleSourceConfigDropLargeObjectsList",
        },
        exclude_objects: {
            value: datastreamStreamSourceConfigOracleSourceConfigExcludeObjectsToHclTerraform(struct.excludeObjects),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsList",
        },
        include_objects: {
            value: datastreamStreamSourceConfigOracleSourceConfigIncludeObjectsToHclTerraform(struct.includeObjects),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsList",
        },
        stream_large_objects: {
            value: datastreamStreamSourceConfigOracleSourceConfigStreamLargeObjectsToHclTerraform(struct.streamLargeObjects),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamSourceConfigOracleSourceConfigStreamLargeObjectsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamSourceConfigOracleSourceConfigToHclTerraform = datastreamStreamSourceConfigOracleSourceConfigToHclTerraform;
class DatastreamStreamSourceConfigOracleSourceConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // drop_large_objects - computed: false, optional: true, required: false
        this._dropLargeObjects = new DatastreamStreamSourceConfigOracleSourceConfigDropLargeObjectsOutputReference(this, "drop_large_objects");
        // exclude_objects - computed: false, optional: true, required: false
        this._excludeObjects = new DatastreamStreamSourceConfigOracleSourceConfigExcludeObjectsOutputReference(this, "exclude_objects");
        // include_objects - computed: false, optional: true, required: false
        this._includeObjects = new DatastreamStreamSourceConfigOracleSourceConfigIncludeObjectsOutputReference(this, "include_objects");
        // stream_large_objects - computed: false, optional: true, required: false
        this._streamLargeObjects = new DatastreamStreamSourceConfigOracleSourceConfigStreamLargeObjectsOutputReference(this, "stream_large_objects");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._maxConcurrentBackfillTasks !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxConcurrentBackfillTasks = this._maxConcurrentBackfillTasks;
        }
        if (this._maxConcurrentCdcTasks !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxConcurrentCdcTasks = this._maxConcurrentCdcTasks;
        }
        if (this._dropLargeObjects?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dropLargeObjects = this._dropLargeObjects?.internalValue;
        }
        if (this._excludeObjects?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.excludeObjects = this._excludeObjects?.internalValue;
        }
        if (this._includeObjects?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.includeObjects = this._includeObjects?.internalValue;
        }
        if (this._streamLargeObjects?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.streamLargeObjects = this._streamLargeObjects?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._maxConcurrentBackfillTasks = undefined;
            this._maxConcurrentCdcTasks = undefined;
            this._dropLargeObjects.internalValue = undefined;
            this._excludeObjects.internalValue = undefined;
            this._includeObjects.internalValue = undefined;
            this._streamLargeObjects.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._maxConcurrentBackfillTasks = value.maxConcurrentBackfillTasks;
            this._maxConcurrentCdcTasks = value.maxConcurrentCdcTasks;
            this._dropLargeObjects.internalValue = value.dropLargeObjects;
            this._excludeObjects.internalValue = value.excludeObjects;
            this._includeObjects.internalValue = value.includeObjects;
            this._streamLargeObjects.internalValue = value.streamLargeObjects;
        }
    }
    get maxConcurrentBackfillTasks() {
        return this.getNumberAttribute('max_concurrent_backfill_tasks');
    }
    set maxConcurrentBackfillTasks(value) {
        this._maxConcurrentBackfillTasks = value;
    }
    resetMaxConcurrentBackfillTasks() {
        this._maxConcurrentBackfillTasks = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxConcurrentBackfillTasksInput() {
        return this._maxConcurrentBackfillTasks;
    }
    get maxConcurrentCdcTasks() {
        return this.getNumberAttribute('max_concurrent_cdc_tasks');
    }
    set maxConcurrentCdcTasks(value) {
        this._maxConcurrentCdcTasks = value;
    }
    resetMaxConcurrentCdcTasks() {
        this._maxConcurrentCdcTasks = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxConcurrentCdcTasksInput() {
        return this._maxConcurrentCdcTasks;
    }
    get dropLargeObjects() {
        return this._dropLargeObjects;
    }
    putDropLargeObjects(value) {
        this._dropLargeObjects.internalValue = value;
    }
    resetDropLargeObjects() {
        this._dropLargeObjects.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dropLargeObjectsInput() {
        return this._dropLargeObjects.internalValue;
    }
    get excludeObjects() {
        return this._excludeObjects;
    }
    putExcludeObjects(value) {
        this._excludeObjects.internalValue = value;
    }
    resetExcludeObjects() {
        this._excludeObjects.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludeObjectsInput() {
        return this._excludeObjects.internalValue;
    }
    get includeObjects() {
        return this._includeObjects;
    }
    putIncludeObjects(value) {
        this._includeObjects.internalValue = value;
    }
    resetIncludeObjects() {
        this._includeObjects.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeObjectsInput() {
        return this._includeObjects.internalValue;
    }
    get streamLargeObjects() {
        return this._streamLargeObjects;
    }
    putStreamLargeObjects(value) {
        this._streamLargeObjects.internalValue = value;
    }
    resetStreamLargeObjects() {
        this._streamLargeObjects.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get streamLargeObjectsInput() {
        return this._streamLargeObjects.internalValue;
    }
}
exports.DatastreamStreamSourceConfigOracleSourceConfigOutputReference = DatastreamStreamSourceConfigOracleSourceConfigOutputReference;
_47 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigOracleSourceConfigOutputReference[_47] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigOracleSourceConfigOutputReference", version: "14.13.1" };
function datastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        column: cdktf.stringToTerraform(struct.column),
        data_type: cdktf.stringToTerraform(struct.dataType),
        nullable: cdktf.booleanToTerraform(struct.nullable),
        ordinal_position: cdktf.numberToTerraform(struct.ordinalPosition),
        primary_key: cdktf.booleanToTerraform(struct.primaryKey),
    };
}
exports.datastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsToTerraform = datastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsToTerraform;
function datastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        column: {
            value: cdktf.stringToHclTerraform(struct.column),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        data_type: {
            value: cdktf.stringToHclTerraform(struct.dataType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        nullable: {
            value: cdktf.booleanToHclTerraform(struct.nullable),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        ordinal_position: {
            value: cdktf.numberToHclTerraform(struct.ordinalPosition),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        primary_key: {
            value: cdktf.booleanToHclTerraform(struct.primaryKey),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsToHclTerraform = datastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsToHclTerraform;
class DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._column !== undefined) {
            hasAnyValues = true;
            internalValueResult.column = this._column;
        }
        if (this._dataType !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataType = this._dataType;
        }
        if (this._nullable !== undefined) {
            hasAnyValues = true;
            internalValueResult.nullable = this._nullable;
        }
        if (this._ordinalPosition !== undefined) {
            hasAnyValues = true;
            internalValueResult.ordinalPosition = this._ordinalPosition;
        }
        if (this._primaryKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.primaryKey = this._primaryKey;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._column = undefined;
            this._dataType = undefined;
            this._nullable = undefined;
            this._ordinalPosition = undefined;
            this._primaryKey = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._column = value.column;
            this._dataType = value.dataType;
            this._nullable = value.nullable;
            this._ordinalPosition = value.ordinalPosition;
            this._primaryKey = value.primaryKey;
        }
    }
    get column() {
        return this.getStringAttribute('column');
    }
    set column(value) {
        this._column = value;
    }
    resetColumn() {
        this._column = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get columnInput() {
        return this._column;
    }
    get dataType() {
        return this.getStringAttribute('data_type');
    }
    set dataType(value) {
        this._dataType = value;
    }
    resetDataType() {
        this._dataType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataTypeInput() {
        return this._dataType;
    }
    // length - computed: true, optional: false, required: false
    get length() {
        return this.getNumberAttribute('length');
    }
    get nullable() {
        return this.getBooleanAttribute('nullable');
    }
    set nullable(value) {
        this._nullable = value;
    }
    resetNullable() {
        this._nullable = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nullableInput() {
        return this._nullable;
    }
    get ordinalPosition() {
        return this.getNumberAttribute('ordinal_position');
    }
    set ordinalPosition(value) {
        this._ordinalPosition = value;
    }
    resetOrdinalPosition() {
        this._ordinalPosition = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ordinalPositionInput() {
        return this._ordinalPosition;
    }
    // precision - computed: true, optional: false, required: false
    get precision() {
        return this.getNumberAttribute('precision');
    }
    get primaryKey() {
        return this.getBooleanAttribute('primary_key');
    }
    set primaryKey(value) {
        this._primaryKey = value;
    }
    resetPrimaryKey() {
        this._primaryKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get primaryKeyInput() {
        return this._primaryKey;
    }
    // scale - computed: true, optional: false, required: false
    get scale() {
        return this.getNumberAttribute('scale');
    }
}
exports.DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsOutputReference = DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsOutputReference;
_48 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsOutputReference[_48] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsOutputReference", version: "14.13.1" };
class DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsList = DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsList;
_49 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsList[_49] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsList", version: "14.13.1" };
function datastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        table: cdktf.stringToTerraform(struct.table),
        postgresql_columns: cdktf.listMapper(datastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsToTerraform, true)(struct.postgresqlColumns),
    };
}
exports.datastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesToTerraform = datastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesToTerraform;
function datastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        table: {
            value: cdktf.stringToHclTerraform(struct.table),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        postgresql_columns: {
            value: cdktf.listMapperHcl(datastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsToHclTerraform, true)(struct.postgresqlColumns),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesToHclTerraform = datastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesToHclTerraform;
class DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // postgresql_columns - computed: false, optional: true, required: false
        this._postgresqlColumns = new DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsList(this, "postgresql_columns", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._table !== undefined) {
            hasAnyValues = true;
            internalValueResult.table = this._table;
        }
        if (this._postgresqlColumns?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.postgresqlColumns = this._postgresqlColumns?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._table = undefined;
            this._postgresqlColumns.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._table = value.table;
            this._postgresqlColumns.internalValue = value.postgresqlColumns;
        }
    }
    get table() {
        return this.getStringAttribute('table');
    }
    set table(value) {
        this._table = value;
    }
    // Temporarily expose input value. Use with caution.
    get tableInput() {
        return this._table;
    }
    get postgresqlColumns() {
        return this._postgresqlColumns;
    }
    putPostgresqlColumns(value) {
        this._postgresqlColumns.internalValue = value;
    }
    resetPostgresqlColumns() {
        this._postgresqlColumns.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get postgresqlColumnsInput() {
        return this._postgresqlColumns.internalValue;
    }
}
exports.DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesOutputReference = DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesOutputReference;
_50 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesOutputReference[_50] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesOutputReference", version: "14.13.1" };
class DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesList = DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesList;
_51 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesList[_51] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesList", version: "14.13.1" };
function datastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        schema: cdktf.stringToTerraform(struct.schema),
        postgresql_tables: cdktf.listMapper(datastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesToTerraform, true)(struct.postgresqlTables),
    };
}
exports.datastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasToTerraform = datastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasToTerraform;
function datastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        schema: {
            value: cdktf.stringToHclTerraform(struct.schema),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        postgresql_tables: {
            value: cdktf.listMapperHcl(datastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesToHclTerraform, true)(struct.postgresqlTables),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasToHclTerraform = datastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasToHclTerraform;
class DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // postgresql_tables - computed: false, optional: true, required: false
        this._postgresqlTables = new DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasPostgresqlTablesList(this, "postgresql_tables", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._schema !== undefined) {
            hasAnyValues = true;
            internalValueResult.schema = this._schema;
        }
        if (this._postgresqlTables?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.postgresqlTables = this._postgresqlTables?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._schema = undefined;
            this._postgresqlTables.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._schema = value.schema;
            this._postgresqlTables.internalValue = value.postgresqlTables;
        }
    }
    get schema() {
        return this.getStringAttribute('schema');
    }
    set schema(value) {
        this._schema = value;
    }
    // Temporarily expose input value. Use with caution.
    get schemaInput() {
        return this._schema;
    }
    get postgresqlTables() {
        return this._postgresqlTables;
    }
    putPostgresqlTables(value) {
        this._postgresqlTables.internalValue = value;
    }
    resetPostgresqlTables() {
        this._postgresqlTables.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get postgresqlTablesInput() {
        return this._postgresqlTables.internalValue;
    }
}
exports.DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasOutputReference = DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasOutputReference;
_52 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasOutputReference[_52] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasOutputReference", version: "14.13.1" };
class DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasList = DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasList;
_53 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasList[_53] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasList", version: "14.13.1" };
function datastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        postgresql_schemas: cdktf.listMapper(datastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasToTerraform, true)(struct.postgresqlSchemas),
    };
}
exports.datastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsToTerraform = datastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsToTerraform;
function datastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        postgresql_schemas: {
            value: cdktf.listMapperHcl(datastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasToHclTerraform, true)(struct.postgresqlSchemas),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsToHclTerraform = datastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsToHclTerraform;
class DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // postgresql_schemas - computed: false, optional: false, required: true
        this._postgresqlSchemas = new DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsPostgresqlSchemasList(this, "postgresql_schemas", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._postgresqlSchemas?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.postgresqlSchemas = this._postgresqlSchemas?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._postgresqlSchemas.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._postgresqlSchemas.internalValue = value.postgresqlSchemas;
        }
    }
    get postgresqlSchemas() {
        return this._postgresqlSchemas;
    }
    putPostgresqlSchemas(value) {
        this._postgresqlSchemas.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get postgresqlSchemasInput() {
        return this._postgresqlSchemas.internalValue;
    }
}
exports.DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsOutputReference = DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsOutputReference;
_54 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsOutputReference[_54] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsOutputReference", version: "14.13.1" };
function datastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        column: cdktf.stringToTerraform(struct.column),
        data_type: cdktf.stringToTerraform(struct.dataType),
        nullable: cdktf.booleanToTerraform(struct.nullable),
        ordinal_position: cdktf.numberToTerraform(struct.ordinalPosition),
        primary_key: cdktf.booleanToTerraform(struct.primaryKey),
    };
}
exports.datastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsToTerraform = datastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsToTerraform;
function datastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        column: {
            value: cdktf.stringToHclTerraform(struct.column),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        data_type: {
            value: cdktf.stringToHclTerraform(struct.dataType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        nullable: {
            value: cdktf.booleanToHclTerraform(struct.nullable),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        ordinal_position: {
            value: cdktf.numberToHclTerraform(struct.ordinalPosition),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        primary_key: {
            value: cdktf.booleanToHclTerraform(struct.primaryKey),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsToHclTerraform = datastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsToHclTerraform;
class DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._column !== undefined) {
            hasAnyValues = true;
            internalValueResult.column = this._column;
        }
        if (this._dataType !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataType = this._dataType;
        }
        if (this._nullable !== undefined) {
            hasAnyValues = true;
            internalValueResult.nullable = this._nullable;
        }
        if (this._ordinalPosition !== undefined) {
            hasAnyValues = true;
            internalValueResult.ordinalPosition = this._ordinalPosition;
        }
        if (this._primaryKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.primaryKey = this._primaryKey;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._column = undefined;
            this._dataType = undefined;
            this._nullable = undefined;
            this._ordinalPosition = undefined;
            this._primaryKey = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._column = value.column;
            this._dataType = value.dataType;
            this._nullable = value.nullable;
            this._ordinalPosition = value.ordinalPosition;
            this._primaryKey = value.primaryKey;
        }
    }
    get column() {
        return this.getStringAttribute('column');
    }
    set column(value) {
        this._column = value;
    }
    resetColumn() {
        this._column = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get columnInput() {
        return this._column;
    }
    get dataType() {
        return this.getStringAttribute('data_type');
    }
    set dataType(value) {
        this._dataType = value;
    }
    resetDataType() {
        this._dataType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataTypeInput() {
        return this._dataType;
    }
    // length - computed: true, optional: false, required: false
    get length() {
        return this.getNumberAttribute('length');
    }
    get nullable() {
        return this.getBooleanAttribute('nullable');
    }
    set nullable(value) {
        this._nullable = value;
    }
    resetNullable() {
        this._nullable = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nullableInput() {
        return this._nullable;
    }
    get ordinalPosition() {
        return this.getNumberAttribute('ordinal_position');
    }
    set ordinalPosition(value) {
        this._ordinalPosition = value;
    }
    resetOrdinalPosition() {
        this._ordinalPosition = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ordinalPositionInput() {
        return this._ordinalPosition;
    }
    // precision - computed: true, optional: false, required: false
    get precision() {
        return this.getNumberAttribute('precision');
    }
    get primaryKey() {
        return this.getBooleanAttribute('primary_key');
    }
    set primaryKey(value) {
        this._primaryKey = value;
    }
    resetPrimaryKey() {
        this._primaryKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get primaryKeyInput() {
        return this._primaryKey;
    }
    // scale - computed: true, optional: false, required: false
    get scale() {
        return this.getNumberAttribute('scale');
    }
}
exports.DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsOutputReference = DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsOutputReference;
_55 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsOutputReference[_55] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsOutputReference", version: "14.13.1" };
class DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsList = DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsList;
_56 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsList[_56] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsList", version: "14.13.1" };
function datastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        table: cdktf.stringToTerraform(struct.table),
        postgresql_columns: cdktf.listMapper(datastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsToTerraform, true)(struct.postgresqlColumns),
    };
}
exports.datastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesToTerraform = datastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesToTerraform;
function datastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        table: {
            value: cdktf.stringToHclTerraform(struct.table),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        postgresql_columns: {
            value: cdktf.listMapperHcl(datastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsToHclTerraform, true)(struct.postgresqlColumns),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesToHclTerraform = datastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesToHclTerraform;
class DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // postgresql_columns - computed: false, optional: true, required: false
        this._postgresqlColumns = new DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesPostgresqlColumnsList(this, "postgresql_columns", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._table !== undefined) {
            hasAnyValues = true;
            internalValueResult.table = this._table;
        }
        if (this._postgresqlColumns?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.postgresqlColumns = this._postgresqlColumns?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._table = undefined;
            this._postgresqlColumns.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._table = value.table;
            this._postgresqlColumns.internalValue = value.postgresqlColumns;
        }
    }
    get table() {
        return this.getStringAttribute('table');
    }
    set table(value) {
        this._table = value;
    }
    // Temporarily expose input value. Use with caution.
    get tableInput() {
        return this._table;
    }
    get postgresqlColumns() {
        return this._postgresqlColumns;
    }
    putPostgresqlColumns(value) {
        this._postgresqlColumns.internalValue = value;
    }
    resetPostgresqlColumns() {
        this._postgresqlColumns.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get postgresqlColumnsInput() {
        return this._postgresqlColumns.internalValue;
    }
}
exports.DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesOutputReference = DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesOutputReference;
_57 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesOutputReference[_57] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesOutputReference", version: "14.13.1" };
class DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesList = DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesList;
_58 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesList[_58] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesList", version: "14.13.1" };
function datastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        schema: cdktf.stringToTerraform(struct.schema),
        postgresql_tables: cdktf.listMapper(datastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesToTerraform, true)(struct.postgresqlTables),
    };
}
exports.datastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasToTerraform = datastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasToTerraform;
function datastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        schema: {
            value: cdktf.stringToHclTerraform(struct.schema),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        postgresql_tables: {
            value: cdktf.listMapperHcl(datastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesToHclTerraform, true)(struct.postgresqlTables),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasToHclTerraform = datastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasToHclTerraform;
class DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // postgresql_tables - computed: false, optional: true, required: false
        this._postgresqlTables = new DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasPostgresqlTablesList(this, "postgresql_tables", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._schema !== undefined) {
            hasAnyValues = true;
            internalValueResult.schema = this._schema;
        }
        if (this._postgresqlTables?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.postgresqlTables = this._postgresqlTables?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._schema = undefined;
            this._postgresqlTables.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._schema = value.schema;
            this._postgresqlTables.internalValue = value.postgresqlTables;
        }
    }
    get schema() {
        return this.getStringAttribute('schema');
    }
    set schema(value) {
        this._schema = value;
    }
    // Temporarily expose input value. Use with caution.
    get schemaInput() {
        return this._schema;
    }
    get postgresqlTables() {
        return this._postgresqlTables;
    }
    putPostgresqlTables(value) {
        this._postgresqlTables.internalValue = value;
    }
    resetPostgresqlTables() {
        this._postgresqlTables.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get postgresqlTablesInput() {
        return this._postgresqlTables.internalValue;
    }
}
exports.DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasOutputReference = DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasOutputReference;
_59 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasOutputReference[_59] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasOutputReference", version: "14.13.1" };
class DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasList = DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasList;
_60 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasList[_60] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasList", version: "14.13.1" };
function datastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        postgresql_schemas: cdktf.listMapper(datastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasToTerraform, true)(struct.postgresqlSchemas),
    };
}
exports.datastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsToTerraform = datastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsToTerraform;
function datastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        postgresql_schemas: {
            value: cdktf.listMapperHcl(datastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasToHclTerraform, true)(struct.postgresqlSchemas),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsToHclTerraform = datastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsToHclTerraform;
class DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // postgresql_schemas - computed: false, optional: false, required: true
        this._postgresqlSchemas = new DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsPostgresqlSchemasList(this, "postgresql_schemas", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._postgresqlSchemas?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.postgresqlSchemas = this._postgresqlSchemas?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._postgresqlSchemas.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._postgresqlSchemas.internalValue = value.postgresqlSchemas;
        }
    }
    get postgresqlSchemas() {
        return this._postgresqlSchemas;
    }
    putPostgresqlSchemas(value) {
        this._postgresqlSchemas.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get postgresqlSchemasInput() {
        return this._postgresqlSchemas.internalValue;
    }
}
exports.DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsOutputReference = DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsOutputReference;
_61 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsOutputReference[_61] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsOutputReference", version: "14.13.1" };
function datastreamStreamSourceConfigPostgresqlSourceConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max_concurrent_backfill_tasks: cdktf.numberToTerraform(struct.maxConcurrentBackfillTasks),
        publication: cdktf.stringToTerraform(struct.publication),
        replication_slot: cdktf.stringToTerraform(struct.replicationSlot),
        exclude_objects: datastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsToTerraform(struct.excludeObjects),
        include_objects: datastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsToTerraform(struct.includeObjects),
    };
}
exports.datastreamStreamSourceConfigPostgresqlSourceConfigToTerraform = datastreamStreamSourceConfigPostgresqlSourceConfigToTerraform;
function datastreamStreamSourceConfigPostgresqlSourceConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        max_concurrent_backfill_tasks: {
            value: cdktf.numberToHclTerraform(struct.maxConcurrentBackfillTasks),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        publication: {
            value: cdktf.stringToHclTerraform(struct.publication),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        replication_slot: {
            value: cdktf.stringToHclTerraform(struct.replicationSlot),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        exclude_objects: {
            value: datastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsToHclTerraform(struct.excludeObjects),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsList",
        },
        include_objects: {
            value: datastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsToHclTerraform(struct.includeObjects),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamSourceConfigPostgresqlSourceConfigToHclTerraform = datastreamStreamSourceConfigPostgresqlSourceConfigToHclTerraform;
class DatastreamStreamSourceConfigPostgresqlSourceConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // exclude_objects - computed: false, optional: true, required: false
        this._excludeObjects = new DatastreamStreamSourceConfigPostgresqlSourceConfigExcludeObjectsOutputReference(this, "exclude_objects");
        // include_objects - computed: false, optional: true, required: false
        this._includeObjects = new DatastreamStreamSourceConfigPostgresqlSourceConfigIncludeObjectsOutputReference(this, "include_objects");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._maxConcurrentBackfillTasks !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxConcurrentBackfillTasks = this._maxConcurrentBackfillTasks;
        }
        if (this._publication !== undefined) {
            hasAnyValues = true;
            internalValueResult.publication = this._publication;
        }
        if (this._replicationSlot !== undefined) {
            hasAnyValues = true;
            internalValueResult.replicationSlot = this._replicationSlot;
        }
        if (this._excludeObjects?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.excludeObjects = this._excludeObjects?.internalValue;
        }
        if (this._includeObjects?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.includeObjects = this._includeObjects?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._maxConcurrentBackfillTasks = undefined;
            this._publication = undefined;
            this._replicationSlot = undefined;
            this._excludeObjects.internalValue = undefined;
            this._includeObjects.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._maxConcurrentBackfillTasks = value.maxConcurrentBackfillTasks;
            this._publication = value.publication;
            this._replicationSlot = value.replicationSlot;
            this._excludeObjects.internalValue = value.excludeObjects;
            this._includeObjects.internalValue = value.includeObjects;
        }
    }
    get maxConcurrentBackfillTasks() {
        return this.getNumberAttribute('max_concurrent_backfill_tasks');
    }
    set maxConcurrentBackfillTasks(value) {
        this._maxConcurrentBackfillTasks = value;
    }
    resetMaxConcurrentBackfillTasks() {
        this._maxConcurrentBackfillTasks = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxConcurrentBackfillTasksInput() {
        return this._maxConcurrentBackfillTasks;
    }
    get publication() {
        return this.getStringAttribute('publication');
    }
    set publication(value) {
        this._publication = value;
    }
    // Temporarily expose input value. Use with caution.
    get publicationInput() {
        return this._publication;
    }
    get replicationSlot() {
        return this.getStringAttribute('replication_slot');
    }
    set replicationSlot(value) {
        this._replicationSlot = value;
    }
    // Temporarily expose input value. Use with caution.
    get replicationSlotInput() {
        return this._replicationSlot;
    }
    get excludeObjects() {
        return this._excludeObjects;
    }
    putExcludeObjects(value) {
        this._excludeObjects.internalValue = value;
    }
    resetExcludeObjects() {
        this._excludeObjects.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludeObjectsInput() {
        return this._excludeObjects.internalValue;
    }
    get includeObjects() {
        return this._includeObjects;
    }
    putIncludeObjects(value) {
        this._includeObjects.internalValue = value;
    }
    resetIncludeObjects() {
        this._includeObjects.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeObjectsInput() {
        return this._includeObjects.internalValue;
    }
}
exports.DatastreamStreamSourceConfigPostgresqlSourceConfigOutputReference = DatastreamStreamSourceConfigPostgresqlSourceConfigOutputReference;
_62 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigPostgresqlSourceConfigOutputReference[_62] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigPostgresqlSourceConfigOutputReference", version: "14.13.1" };
function datastreamStreamSourceConfigSqlServerSourceConfigChangeTablesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.datastreamStreamSourceConfigSqlServerSourceConfigChangeTablesToTerraform = datastreamStreamSourceConfigSqlServerSourceConfigChangeTablesToTerraform;
function datastreamStreamSourceConfigSqlServerSourceConfigChangeTablesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.datastreamStreamSourceConfigSqlServerSourceConfigChangeTablesToHclTerraform = datastreamStreamSourceConfigSqlServerSourceConfigChangeTablesToHclTerraform;
class DatastreamStreamSourceConfigSqlServerSourceConfigChangeTablesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DatastreamStreamSourceConfigSqlServerSourceConfigChangeTablesOutputReference = DatastreamStreamSourceConfigSqlServerSourceConfigChangeTablesOutputReference;
_63 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigSqlServerSourceConfigChangeTablesOutputReference[_63] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigSqlServerSourceConfigChangeTablesOutputReference", version: "14.13.1" };
function datastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesColumnsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        column: cdktf.stringToTerraform(struct.column),
        data_type: cdktf.stringToTerraform(struct.dataType),
    };
}
exports.datastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesColumnsToTerraform = datastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesColumnsToTerraform;
function datastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesColumnsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        column: {
            value: cdktf.stringToHclTerraform(struct.column),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        data_type: {
            value: cdktf.stringToHclTerraform(struct.dataType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesColumnsToHclTerraform = datastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesColumnsToHclTerraform;
class DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesColumnsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._column !== undefined) {
            hasAnyValues = true;
            internalValueResult.column = this._column;
        }
        if (this._dataType !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataType = this._dataType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._column = undefined;
            this._dataType = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._column = value.column;
            this._dataType = value.dataType;
        }
    }
    get column() {
        return this.getStringAttribute('column');
    }
    set column(value) {
        this._column = value;
    }
    resetColumn() {
        this._column = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get columnInput() {
        return this._column;
    }
    get dataType() {
        return this.getStringAttribute('data_type');
    }
    set dataType(value) {
        this._dataType = value;
    }
    resetDataType() {
        this._dataType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataTypeInput() {
        return this._dataType;
    }
    // length - computed: true, optional: false, required: false
    get length() {
        return this.getNumberAttribute('length');
    }
    // nullable - computed: true, optional: false, required: false
    get nullable() {
        return this.getBooleanAttribute('nullable');
    }
    // ordinal_position - computed: true, optional: false, required: false
    get ordinalPosition() {
        return this.getNumberAttribute('ordinal_position');
    }
    // precision - computed: true, optional: false, required: false
    get precision() {
        return this.getNumberAttribute('precision');
    }
    // primary_key - computed: true, optional: false, required: false
    get primaryKey() {
        return this.getBooleanAttribute('primary_key');
    }
    // scale - computed: true, optional: false, required: false
    get scale() {
        return this.getNumberAttribute('scale');
    }
}
exports.DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesColumnsOutputReference = DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesColumnsOutputReference;
_64 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesColumnsOutputReference[_64] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesColumnsOutputReference", version: "14.13.1" };
class DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesColumnsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesColumnsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesColumnsList = DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesColumnsList;
_65 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesColumnsList[_65] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesColumnsList", version: "14.13.1" };
function datastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        table: cdktf.stringToTerraform(struct.table),
        columns: cdktf.listMapper(datastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesColumnsToTerraform, true)(struct.columns),
    };
}
exports.datastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesToTerraform = datastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesToTerraform;
function datastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        table: {
            value: cdktf.stringToHclTerraform(struct.table),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        columns: {
            value: cdktf.listMapperHcl(datastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesColumnsToHclTerraform, true)(struct.columns),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesColumnsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesToHclTerraform = datastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesToHclTerraform;
class DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // columns - computed: false, optional: true, required: false
        this._columns = new DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesColumnsList(this, "columns", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._table !== undefined) {
            hasAnyValues = true;
            internalValueResult.table = this._table;
        }
        if (this._columns?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.columns = this._columns?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._table = undefined;
            this._columns.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._table = value.table;
            this._columns.internalValue = value.columns;
        }
    }
    get table() {
        return this.getStringAttribute('table');
    }
    set table(value) {
        this._table = value;
    }
    // Temporarily expose input value. Use with caution.
    get tableInput() {
        return this._table;
    }
    get columns() {
        return this._columns;
    }
    putColumns(value) {
        this._columns.internalValue = value;
    }
    resetColumns() {
        this._columns.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get columnsInput() {
        return this._columns.internalValue;
    }
}
exports.DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesOutputReference = DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesOutputReference;
_66 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesOutputReference[_66] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesOutputReference", version: "14.13.1" };
class DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesList = DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesList;
_67 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesList[_67] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesList", version: "14.13.1" };
function datastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        schema: cdktf.stringToTerraform(struct.schema),
        tables: cdktf.listMapper(datastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesToTerraform, true)(struct.tables),
    };
}
exports.datastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasToTerraform = datastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasToTerraform;
function datastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        schema: {
            value: cdktf.stringToHclTerraform(struct.schema),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        tables: {
            value: cdktf.listMapperHcl(datastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesToHclTerraform, true)(struct.tables),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasToHclTerraform = datastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasToHclTerraform;
class DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // tables - computed: false, optional: true, required: false
        this._tables = new DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasTablesList(this, "tables", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._schema !== undefined) {
            hasAnyValues = true;
            internalValueResult.schema = this._schema;
        }
        if (this._tables?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.tables = this._tables?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._schema = undefined;
            this._tables.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._schema = value.schema;
            this._tables.internalValue = value.tables;
        }
    }
    get schema() {
        return this.getStringAttribute('schema');
    }
    set schema(value) {
        this._schema = value;
    }
    // Temporarily expose input value. Use with caution.
    get schemaInput() {
        return this._schema;
    }
    get tables() {
        return this._tables;
    }
    putTables(value) {
        this._tables.internalValue = value;
    }
    resetTables() {
        this._tables.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tablesInput() {
        return this._tables.internalValue;
    }
}
exports.DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasOutputReference = DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasOutputReference;
_68 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasOutputReference[_68] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasOutputReference", version: "14.13.1" };
class DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasList = DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasList;
_69 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasList[_69] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasList", version: "14.13.1" };
function datastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        schemas: cdktf.listMapper(datastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasToTerraform, true)(struct.schemas),
    };
}
exports.datastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsToTerraform = datastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsToTerraform;
function datastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        schemas: {
            value: cdktf.listMapperHcl(datastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasToHclTerraform, true)(struct.schemas),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsToHclTerraform = datastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsToHclTerraform;
class DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // schemas - computed: false, optional: false, required: true
        this._schemas = new DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsSchemasList(this, "schemas", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._schemas?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.schemas = this._schemas?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._schemas.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._schemas.internalValue = value.schemas;
        }
    }
    get schemas() {
        return this._schemas;
    }
    putSchemas(value) {
        this._schemas.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get schemasInput() {
        return this._schemas.internalValue;
    }
}
exports.DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsOutputReference = DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsOutputReference;
_70 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsOutputReference[_70] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsOutputReference", version: "14.13.1" };
function datastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesColumnsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        column: cdktf.stringToTerraform(struct.column),
        data_type: cdktf.stringToTerraform(struct.dataType),
    };
}
exports.datastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesColumnsToTerraform = datastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesColumnsToTerraform;
function datastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesColumnsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        column: {
            value: cdktf.stringToHclTerraform(struct.column),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        data_type: {
            value: cdktf.stringToHclTerraform(struct.dataType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesColumnsToHclTerraform = datastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesColumnsToHclTerraform;
class DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesColumnsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._column !== undefined) {
            hasAnyValues = true;
            internalValueResult.column = this._column;
        }
        if (this._dataType !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataType = this._dataType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._column = undefined;
            this._dataType = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._column = value.column;
            this._dataType = value.dataType;
        }
    }
    get column() {
        return this.getStringAttribute('column');
    }
    set column(value) {
        this._column = value;
    }
    resetColumn() {
        this._column = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get columnInput() {
        return this._column;
    }
    get dataType() {
        return this.getStringAttribute('data_type');
    }
    set dataType(value) {
        this._dataType = value;
    }
    resetDataType() {
        this._dataType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataTypeInput() {
        return this._dataType;
    }
    // length - computed: true, optional: false, required: false
    get length() {
        return this.getNumberAttribute('length');
    }
    // nullable - computed: true, optional: false, required: false
    get nullable() {
        return this.getBooleanAttribute('nullable');
    }
    // ordinal_position - computed: true, optional: false, required: false
    get ordinalPosition() {
        return this.getNumberAttribute('ordinal_position');
    }
    // precision - computed: true, optional: false, required: false
    get precision() {
        return this.getNumberAttribute('precision');
    }
    // primary_key - computed: true, optional: false, required: false
    get primaryKey() {
        return this.getBooleanAttribute('primary_key');
    }
    // scale - computed: true, optional: false, required: false
    get scale() {
        return this.getNumberAttribute('scale');
    }
}
exports.DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesColumnsOutputReference = DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesColumnsOutputReference;
_71 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesColumnsOutputReference[_71] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesColumnsOutputReference", version: "14.13.1" };
class DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesColumnsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesColumnsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesColumnsList = DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesColumnsList;
_72 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesColumnsList[_72] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesColumnsList", version: "14.13.1" };
function datastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        table: cdktf.stringToTerraform(struct.table),
        columns: cdktf.listMapper(datastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesColumnsToTerraform, true)(struct.columns),
    };
}
exports.datastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesToTerraform = datastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesToTerraform;
function datastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        table: {
            value: cdktf.stringToHclTerraform(struct.table),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        columns: {
            value: cdktf.listMapperHcl(datastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesColumnsToHclTerraform, true)(struct.columns),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesColumnsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesToHclTerraform = datastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesToHclTerraform;
class DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // columns - computed: false, optional: true, required: false
        this._columns = new DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesColumnsList(this, "columns", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._table !== undefined) {
            hasAnyValues = true;
            internalValueResult.table = this._table;
        }
        if (this._columns?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.columns = this._columns?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._table = undefined;
            this._columns.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._table = value.table;
            this._columns.internalValue = value.columns;
        }
    }
    get table() {
        return this.getStringAttribute('table');
    }
    set table(value) {
        this._table = value;
    }
    // Temporarily expose input value. Use with caution.
    get tableInput() {
        return this._table;
    }
    get columns() {
        return this._columns;
    }
    putColumns(value) {
        this._columns.internalValue = value;
    }
    resetColumns() {
        this._columns.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get columnsInput() {
        return this._columns.internalValue;
    }
}
exports.DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesOutputReference = DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesOutputReference;
_73 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesOutputReference[_73] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesOutputReference", version: "14.13.1" };
class DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesList = DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesList;
_74 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesList[_74] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesList", version: "14.13.1" };
function datastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        schema: cdktf.stringToTerraform(struct.schema),
        tables: cdktf.listMapper(datastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesToTerraform, true)(struct.tables),
    };
}
exports.datastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasToTerraform = datastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasToTerraform;
function datastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        schema: {
            value: cdktf.stringToHclTerraform(struct.schema),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        tables: {
            value: cdktf.listMapperHcl(datastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesToHclTerraform, true)(struct.tables),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasToHclTerraform = datastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasToHclTerraform;
class DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // tables - computed: false, optional: true, required: false
        this._tables = new DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasTablesList(this, "tables", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._schema !== undefined) {
            hasAnyValues = true;
            internalValueResult.schema = this._schema;
        }
        if (this._tables?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.tables = this._tables?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._schema = undefined;
            this._tables.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._schema = value.schema;
            this._tables.internalValue = value.tables;
        }
    }
    get schema() {
        return this.getStringAttribute('schema');
    }
    set schema(value) {
        this._schema = value;
    }
    // Temporarily expose input value. Use with caution.
    get schemaInput() {
        return this._schema;
    }
    get tables() {
        return this._tables;
    }
    putTables(value) {
        this._tables.internalValue = value;
    }
    resetTables() {
        this._tables.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tablesInput() {
        return this._tables.internalValue;
    }
}
exports.DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasOutputReference = DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasOutputReference;
_75 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasOutputReference[_75] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasOutputReference", version: "14.13.1" };
class DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasList = DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasList;
_76 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasList[_76] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasList", version: "14.13.1" };
function datastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        schemas: cdktf.listMapper(datastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasToTerraform, true)(struct.schemas),
    };
}
exports.datastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsToTerraform = datastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsToTerraform;
function datastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        schemas: {
            value: cdktf.listMapperHcl(datastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasToHclTerraform, true)(struct.schemas),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsToHclTerraform = datastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsToHclTerraform;
class DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // schemas - computed: false, optional: false, required: true
        this._schemas = new DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsSchemasList(this, "schemas", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._schemas?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.schemas = this._schemas?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._schemas.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._schemas.internalValue = value.schemas;
        }
    }
    get schemas() {
        return this._schemas;
    }
    putSchemas(value) {
        this._schemas.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get schemasInput() {
        return this._schemas.internalValue;
    }
}
exports.DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsOutputReference = DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsOutputReference;
_77 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsOutputReference[_77] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsOutputReference", version: "14.13.1" };
function datastreamStreamSourceConfigSqlServerSourceConfigTransactionLogsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.datastreamStreamSourceConfigSqlServerSourceConfigTransactionLogsToTerraform = datastreamStreamSourceConfigSqlServerSourceConfigTransactionLogsToTerraform;
function datastreamStreamSourceConfigSqlServerSourceConfigTransactionLogsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.datastreamStreamSourceConfigSqlServerSourceConfigTransactionLogsToHclTerraform = datastreamStreamSourceConfigSqlServerSourceConfigTransactionLogsToHclTerraform;
class DatastreamStreamSourceConfigSqlServerSourceConfigTransactionLogsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.DatastreamStreamSourceConfigSqlServerSourceConfigTransactionLogsOutputReference = DatastreamStreamSourceConfigSqlServerSourceConfigTransactionLogsOutputReference;
_78 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigSqlServerSourceConfigTransactionLogsOutputReference[_78] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigSqlServerSourceConfigTransactionLogsOutputReference", version: "14.13.1" };
function datastreamStreamSourceConfigSqlServerSourceConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max_concurrent_backfill_tasks: cdktf.numberToTerraform(struct.maxConcurrentBackfillTasks),
        max_concurrent_cdc_tasks: cdktf.numberToTerraform(struct.maxConcurrentCdcTasks),
        change_tables: datastreamStreamSourceConfigSqlServerSourceConfigChangeTablesToTerraform(struct.changeTables),
        exclude_objects: datastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsToTerraform(struct.excludeObjects),
        include_objects: datastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsToTerraform(struct.includeObjects),
        transaction_logs: datastreamStreamSourceConfigSqlServerSourceConfigTransactionLogsToTerraform(struct.transactionLogs),
    };
}
exports.datastreamStreamSourceConfigSqlServerSourceConfigToTerraform = datastreamStreamSourceConfigSqlServerSourceConfigToTerraform;
function datastreamStreamSourceConfigSqlServerSourceConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        max_concurrent_backfill_tasks: {
            value: cdktf.numberToHclTerraform(struct.maxConcurrentBackfillTasks),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        max_concurrent_cdc_tasks: {
            value: cdktf.numberToHclTerraform(struct.maxConcurrentCdcTasks),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        change_tables: {
            value: datastreamStreamSourceConfigSqlServerSourceConfigChangeTablesToHclTerraform(struct.changeTables),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamSourceConfigSqlServerSourceConfigChangeTablesList",
        },
        exclude_objects: {
            value: datastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsToHclTerraform(struct.excludeObjects),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsList",
        },
        include_objects: {
            value: datastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsToHclTerraform(struct.includeObjects),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsList",
        },
        transaction_logs: {
            value: datastreamStreamSourceConfigSqlServerSourceConfigTransactionLogsToHclTerraform(struct.transactionLogs),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamSourceConfigSqlServerSourceConfigTransactionLogsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamSourceConfigSqlServerSourceConfigToHclTerraform = datastreamStreamSourceConfigSqlServerSourceConfigToHclTerraform;
class DatastreamStreamSourceConfigSqlServerSourceConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // change_tables - computed: false, optional: true, required: false
        this._changeTables = new DatastreamStreamSourceConfigSqlServerSourceConfigChangeTablesOutputReference(this, "change_tables");
        // exclude_objects - computed: false, optional: true, required: false
        this._excludeObjects = new DatastreamStreamSourceConfigSqlServerSourceConfigExcludeObjectsOutputReference(this, "exclude_objects");
        // include_objects - computed: false, optional: true, required: false
        this._includeObjects = new DatastreamStreamSourceConfigSqlServerSourceConfigIncludeObjectsOutputReference(this, "include_objects");
        // transaction_logs - computed: false, optional: true, required: false
        this._transactionLogs = new DatastreamStreamSourceConfigSqlServerSourceConfigTransactionLogsOutputReference(this, "transaction_logs");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._maxConcurrentBackfillTasks !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxConcurrentBackfillTasks = this._maxConcurrentBackfillTasks;
        }
        if (this._maxConcurrentCdcTasks !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxConcurrentCdcTasks = this._maxConcurrentCdcTasks;
        }
        if (this._changeTables?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.changeTables = this._changeTables?.internalValue;
        }
        if (this._excludeObjects?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.excludeObjects = this._excludeObjects?.internalValue;
        }
        if (this._includeObjects?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.includeObjects = this._includeObjects?.internalValue;
        }
        if (this._transactionLogs?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.transactionLogs = this._transactionLogs?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._maxConcurrentBackfillTasks = undefined;
            this._maxConcurrentCdcTasks = undefined;
            this._changeTables.internalValue = undefined;
            this._excludeObjects.internalValue = undefined;
            this._includeObjects.internalValue = undefined;
            this._transactionLogs.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._maxConcurrentBackfillTasks = value.maxConcurrentBackfillTasks;
            this._maxConcurrentCdcTasks = value.maxConcurrentCdcTasks;
            this._changeTables.internalValue = value.changeTables;
            this._excludeObjects.internalValue = value.excludeObjects;
            this._includeObjects.internalValue = value.includeObjects;
            this._transactionLogs.internalValue = value.transactionLogs;
        }
    }
    get maxConcurrentBackfillTasks() {
        return this.getNumberAttribute('max_concurrent_backfill_tasks');
    }
    set maxConcurrentBackfillTasks(value) {
        this._maxConcurrentBackfillTasks = value;
    }
    resetMaxConcurrentBackfillTasks() {
        this._maxConcurrentBackfillTasks = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxConcurrentBackfillTasksInput() {
        return this._maxConcurrentBackfillTasks;
    }
    get maxConcurrentCdcTasks() {
        return this.getNumberAttribute('max_concurrent_cdc_tasks');
    }
    set maxConcurrentCdcTasks(value) {
        this._maxConcurrentCdcTasks = value;
    }
    resetMaxConcurrentCdcTasks() {
        this._maxConcurrentCdcTasks = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxConcurrentCdcTasksInput() {
        return this._maxConcurrentCdcTasks;
    }
    get changeTables() {
        return this._changeTables;
    }
    putChangeTables(value) {
        this._changeTables.internalValue = value;
    }
    resetChangeTables() {
        this._changeTables.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get changeTablesInput() {
        return this._changeTables.internalValue;
    }
    get excludeObjects() {
        return this._excludeObjects;
    }
    putExcludeObjects(value) {
        this._excludeObjects.internalValue = value;
    }
    resetExcludeObjects() {
        this._excludeObjects.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get excludeObjectsInput() {
        return this._excludeObjects.internalValue;
    }
    get includeObjects() {
        return this._includeObjects;
    }
    putIncludeObjects(value) {
        this._includeObjects.internalValue = value;
    }
    resetIncludeObjects() {
        this._includeObjects.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get includeObjectsInput() {
        return this._includeObjects.internalValue;
    }
    get transactionLogs() {
        return this._transactionLogs;
    }
    putTransactionLogs(value) {
        this._transactionLogs.internalValue = value;
    }
    resetTransactionLogs() {
        this._transactionLogs.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get transactionLogsInput() {
        return this._transactionLogs.internalValue;
    }
}
exports.DatastreamStreamSourceConfigSqlServerSourceConfigOutputReference = DatastreamStreamSourceConfigSqlServerSourceConfigOutputReference;
_79 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigSqlServerSourceConfigOutputReference[_79] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigSqlServerSourceConfigOutputReference", version: "14.13.1" };
function datastreamStreamSourceConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        source_connection_profile: cdktf.stringToTerraform(struct.sourceConnectionProfile),
        mysql_source_config: datastreamStreamSourceConfigMysqlSourceConfigToTerraform(struct.mysqlSourceConfig),
        oracle_source_config: datastreamStreamSourceConfigOracleSourceConfigToTerraform(struct.oracleSourceConfig),
        postgresql_source_config: datastreamStreamSourceConfigPostgresqlSourceConfigToTerraform(struct.postgresqlSourceConfig),
        sql_server_source_config: datastreamStreamSourceConfigSqlServerSourceConfigToTerraform(struct.sqlServerSourceConfig),
    };
}
exports.datastreamStreamSourceConfigToTerraform = datastreamStreamSourceConfigToTerraform;
function datastreamStreamSourceConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        source_connection_profile: {
            value: cdktf.stringToHclTerraform(struct.sourceConnectionProfile),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        mysql_source_config: {
            value: datastreamStreamSourceConfigMysqlSourceConfigToHclTerraform(struct.mysqlSourceConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamSourceConfigMysqlSourceConfigList",
        },
        oracle_source_config: {
            value: datastreamStreamSourceConfigOracleSourceConfigToHclTerraform(struct.oracleSourceConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamSourceConfigOracleSourceConfigList",
        },
        postgresql_source_config: {
            value: datastreamStreamSourceConfigPostgresqlSourceConfigToHclTerraform(struct.postgresqlSourceConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamSourceConfigPostgresqlSourceConfigList",
        },
        sql_server_source_config: {
            value: datastreamStreamSourceConfigSqlServerSourceConfigToHclTerraform(struct.sqlServerSourceConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DatastreamStreamSourceConfigSqlServerSourceConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamSourceConfigToHclTerraform = datastreamStreamSourceConfigToHclTerraform;
class DatastreamStreamSourceConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // mysql_source_config - computed: false, optional: true, required: false
        this._mysqlSourceConfig = new DatastreamStreamSourceConfigMysqlSourceConfigOutputReference(this, "mysql_source_config");
        // oracle_source_config - computed: false, optional: true, required: false
        this._oracleSourceConfig = new DatastreamStreamSourceConfigOracleSourceConfigOutputReference(this, "oracle_source_config");
        // postgresql_source_config - computed: false, optional: true, required: false
        this._postgresqlSourceConfig = new DatastreamStreamSourceConfigPostgresqlSourceConfigOutputReference(this, "postgresql_source_config");
        // sql_server_source_config - computed: false, optional: true, required: false
        this._sqlServerSourceConfig = new DatastreamStreamSourceConfigSqlServerSourceConfigOutputReference(this, "sql_server_source_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._sourceConnectionProfile !== undefined) {
            hasAnyValues = true;
            internalValueResult.sourceConnectionProfile = this._sourceConnectionProfile;
        }
        if (this._mysqlSourceConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.mysqlSourceConfig = this._mysqlSourceConfig?.internalValue;
        }
        if (this._oracleSourceConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.oracleSourceConfig = this._oracleSourceConfig?.internalValue;
        }
        if (this._postgresqlSourceConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.postgresqlSourceConfig = this._postgresqlSourceConfig?.internalValue;
        }
        if (this._sqlServerSourceConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sqlServerSourceConfig = this._sqlServerSourceConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._sourceConnectionProfile = undefined;
            this._mysqlSourceConfig.internalValue = undefined;
            this._oracleSourceConfig.internalValue = undefined;
            this._postgresqlSourceConfig.internalValue = undefined;
            this._sqlServerSourceConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._sourceConnectionProfile = value.sourceConnectionProfile;
            this._mysqlSourceConfig.internalValue = value.mysqlSourceConfig;
            this._oracleSourceConfig.internalValue = value.oracleSourceConfig;
            this._postgresqlSourceConfig.internalValue = value.postgresqlSourceConfig;
            this._sqlServerSourceConfig.internalValue = value.sqlServerSourceConfig;
        }
    }
    get sourceConnectionProfile() {
        return this.getStringAttribute('source_connection_profile');
    }
    set sourceConnectionProfile(value) {
        this._sourceConnectionProfile = value;
    }
    // Temporarily expose input value. Use with caution.
    get sourceConnectionProfileInput() {
        return this._sourceConnectionProfile;
    }
    get mysqlSourceConfig() {
        return this._mysqlSourceConfig;
    }
    putMysqlSourceConfig(value) {
        this._mysqlSourceConfig.internalValue = value;
    }
    resetMysqlSourceConfig() {
        this._mysqlSourceConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mysqlSourceConfigInput() {
        return this._mysqlSourceConfig.internalValue;
    }
    get oracleSourceConfig() {
        return this._oracleSourceConfig;
    }
    putOracleSourceConfig(value) {
        this._oracleSourceConfig.internalValue = value;
    }
    resetOracleSourceConfig() {
        this._oracleSourceConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get oracleSourceConfigInput() {
        return this._oracleSourceConfig.internalValue;
    }
    get postgresqlSourceConfig() {
        return this._postgresqlSourceConfig;
    }
    putPostgresqlSourceConfig(value) {
        this._postgresqlSourceConfig.internalValue = value;
    }
    resetPostgresqlSourceConfig() {
        this._postgresqlSourceConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get postgresqlSourceConfigInput() {
        return this._postgresqlSourceConfig.internalValue;
    }
    get sqlServerSourceConfig() {
        return this._sqlServerSourceConfig;
    }
    putSqlServerSourceConfig(value) {
        this._sqlServerSourceConfig.internalValue = value;
    }
    resetSqlServerSourceConfig() {
        this._sqlServerSourceConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sqlServerSourceConfigInput() {
        return this._sqlServerSourceConfig.internalValue;
    }
}
exports.DatastreamStreamSourceConfigOutputReference = DatastreamStreamSourceConfigOutputReference;
_80 = JSII_RTTI_SYMBOL_1;
DatastreamStreamSourceConfigOutputReference[_80] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamSourceConfigOutputReference", version: "14.13.1" };
function datastreamStreamTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.datastreamStreamTimeoutsToTerraform = datastreamStreamTimeoutsToTerraform;
function datastreamStreamTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.datastreamStreamTimeoutsToHclTerraform = datastreamStreamTimeoutsToHclTerraform;
class DatastreamStreamTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.DatastreamStreamTimeoutsOutputReference = DatastreamStreamTimeoutsOutputReference;
_81 = JSII_RTTI_SYMBOL_1;
DatastreamStreamTimeoutsOutputReference[_81] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStreamTimeoutsOutputReference", version: "14.13.1" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/datastream_stream google_datastream_stream}
*/
class DatastreamStream extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a DatastreamStream resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the DatastreamStream to import
    * @param importFromId The id of the existing DatastreamStream that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/datastream_stream#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the DatastreamStream to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_datastream_stream", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/datastream_stream google_datastream_stream} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DatastreamStreamConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_datastream_stream',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // effective_labels - computed: true, optional: false, required: false
        this._effectiveLabels = new cdktf.StringMap(this, "effective_labels");
        // terraform_labels - computed: true, optional: false, required: false
        this._terraformLabels = new cdktf.StringMap(this, "terraform_labels");
        // backfill_all - computed: false, optional: true, required: false
        this._backfillAll = new DatastreamStreamBackfillAllOutputReference(this, "backfill_all");
        // backfill_none - computed: false, optional: true, required: false
        this._backfillNone = new DatastreamStreamBackfillNoneOutputReference(this, "backfill_none");
        // destination_config - computed: false, optional: false, required: true
        this._destinationConfig = new DatastreamStreamDestinationConfigOutputReference(this, "destination_config");
        // source_config - computed: false, optional: false, required: true
        this._sourceConfig = new DatastreamStreamSourceConfigOutputReference(this, "source_config");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new DatastreamStreamTimeoutsOutputReference(this, "timeouts");
        this._createWithoutValidation = config.createWithoutValidation;
        this._customerManagedEncryptionKey = config.customerManagedEncryptionKey;
        this._desiredState = config.desiredState;
        this._displayName = config.displayName;
        this._id = config.id;
        this._labels = config.labels;
        this._location = config.location;
        this._project = config.project;
        this._streamId = config.streamId;
        this._backfillAll.internalValue = config.backfillAll;
        this._backfillNone.internalValue = config.backfillNone;
        this._destinationConfig.internalValue = config.destinationConfig;
        this._sourceConfig.internalValue = config.sourceConfig;
        this._timeouts.internalValue = config.timeouts;
    }
    get createWithoutValidation() {
        return this.getBooleanAttribute('create_without_validation');
    }
    set createWithoutValidation(value) {
        this._createWithoutValidation = value;
    }
    resetCreateWithoutValidation() {
        this._createWithoutValidation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createWithoutValidationInput() {
        return this._createWithoutValidation;
    }
    get customerManagedEncryptionKey() {
        return this.getStringAttribute('customer_managed_encryption_key');
    }
    set customerManagedEncryptionKey(value) {
        this._customerManagedEncryptionKey = value;
    }
    resetCustomerManagedEncryptionKey() {
        this._customerManagedEncryptionKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customerManagedEncryptionKeyInput() {
        return this._customerManagedEncryptionKey;
    }
    get desiredState() {
        return this.getStringAttribute('desired_state');
    }
    set desiredState(value) {
        this._desiredState = value;
    }
    resetDesiredState() {
        this._desiredState = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get desiredStateInput() {
        return this._desiredState;
    }
    get displayName() {
        return this.getStringAttribute('display_name');
    }
    set displayName(value) {
        this._displayName = value;
    }
    // Temporarily expose input value. Use with caution.
    get displayNameInput() {
        return this._displayName;
    }
    get effectiveLabels() {
        return this._effectiveLabels;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    // state - computed: true, optional: false, required: false
    get state() {
        return this.getStringAttribute('state');
    }
    get streamId() {
        return this.getStringAttribute('stream_id');
    }
    set streamId(value) {
        this._streamId = value;
    }
    // Temporarily expose input value. Use with caution.
    get streamIdInput() {
        return this._streamId;
    }
    get terraformLabels() {
        return this._terraformLabels;
    }
    get backfillAll() {
        return this._backfillAll;
    }
    putBackfillAll(value) {
        this._backfillAll.internalValue = value;
    }
    resetBackfillAll() {
        this._backfillAll.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get backfillAllInput() {
        return this._backfillAll.internalValue;
    }
    get backfillNone() {
        return this._backfillNone;
    }
    putBackfillNone(value) {
        this._backfillNone.internalValue = value;
    }
    resetBackfillNone() {
        this._backfillNone.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get backfillNoneInput() {
        return this._backfillNone.internalValue;
    }
    get destinationConfig() {
        return this._destinationConfig;
    }
    putDestinationConfig(value) {
        this._destinationConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationConfigInput() {
        return this._destinationConfig.internalValue;
    }
    get sourceConfig() {
        return this._sourceConfig;
    }
    putSourceConfig(value) {
        this._sourceConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get sourceConfigInput() {
        return this._sourceConfig.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            create_without_validation: cdktf.booleanToTerraform(this._createWithoutValidation),
            customer_managed_encryption_key: cdktf.stringToTerraform(this._customerManagedEncryptionKey),
            desired_state: cdktf.stringToTerraform(this._desiredState),
            display_name: cdktf.stringToTerraform(this._displayName),
            id: cdktf.stringToTerraform(this._id),
            labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._labels),
            location: cdktf.stringToTerraform(this._location),
            project: cdktf.stringToTerraform(this._project),
            stream_id: cdktf.stringToTerraform(this._streamId),
            backfill_all: datastreamStreamBackfillAllToTerraform(this._backfillAll.internalValue),
            backfill_none: datastreamStreamBackfillNoneToTerraform(this._backfillNone.internalValue),
            destination_config: datastreamStreamDestinationConfigToTerraform(this._destinationConfig.internalValue),
            source_config: datastreamStreamSourceConfigToTerraform(this._sourceConfig.internalValue),
            timeouts: datastreamStreamTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            create_without_validation: {
                value: cdktf.booleanToHclTerraform(this._createWithoutValidation),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            customer_managed_encryption_key: {
                value: cdktf.stringToHclTerraform(this._customerManagedEncryptionKey),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            desired_state: {
                value: cdktf.stringToHclTerraform(this._desiredState),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            display_name: {
                value: cdktf.stringToHclTerraform(this._displayName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            labels: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._labels),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            location: {
                value: cdktf.stringToHclTerraform(this._location),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            project: {
                value: cdktf.stringToHclTerraform(this._project),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            stream_id: {
                value: cdktf.stringToHclTerraform(this._streamId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            backfill_all: {
                value: datastreamStreamBackfillAllToHclTerraform(this._backfillAll.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "DatastreamStreamBackfillAllList",
            },
            backfill_none: {
                value: datastreamStreamBackfillNoneToHclTerraform(this._backfillNone.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "DatastreamStreamBackfillNoneList",
            },
            destination_config: {
                value: datastreamStreamDestinationConfigToHclTerraform(this._destinationConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "DatastreamStreamDestinationConfigList",
            },
            source_config: {
                value: datastreamStreamSourceConfigToHclTerraform(this._sourceConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "DatastreamStreamSourceConfigList",
            },
            timeouts: {
                value: datastreamStreamTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "DatastreamStreamTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.DatastreamStream = DatastreamStream;
_82 = JSII_RTTI_SYMBOL_1;
DatastreamStream[_82] = { fqn: "@cdktf/provider-google.datastreamStream.DatastreamStream", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
DatastreamStream.tfResourceType = "google_datastream_stream";
//# sourceMappingURL=data:application/json;base64,