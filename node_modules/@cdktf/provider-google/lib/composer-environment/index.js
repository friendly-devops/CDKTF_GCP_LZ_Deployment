"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComposerEnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeOutputReference = exports.composerEnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeToHclTerraform = exports.composerEnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeToTerraform = exports.ComposerEnvironmentConfigWebServerConfigOutputReference = exports.composerEnvironmentConfigWebServerConfigToHclTerraform = exports.composerEnvironmentConfigWebServerConfigToTerraform = exports.ComposerEnvironmentConfigSoftwareConfigOutputReference = exports.composerEnvironmentConfigSoftwareConfigToHclTerraform = exports.composerEnvironmentConfigSoftwareConfigToTerraform = exports.ComposerEnvironmentConfigSoftwareConfigCloudDataLineageIntegrationOutputReference = exports.composerEnvironmentConfigSoftwareConfigCloudDataLineageIntegrationToHclTerraform = exports.composerEnvironmentConfigSoftwareConfigCloudDataLineageIntegrationToTerraform = exports.ComposerEnvironmentConfigRecoveryConfigOutputReference = exports.composerEnvironmentConfigRecoveryConfigToHclTerraform = exports.composerEnvironmentConfigRecoveryConfigToTerraform = exports.ComposerEnvironmentConfigRecoveryConfigScheduledSnapshotsConfigOutputReference = exports.composerEnvironmentConfigRecoveryConfigScheduledSnapshotsConfigToHclTerraform = exports.composerEnvironmentConfigRecoveryConfigScheduledSnapshotsConfigToTerraform = exports.ComposerEnvironmentConfigPrivateEnvironmentConfigOutputReference = exports.composerEnvironmentConfigPrivateEnvironmentConfigToHclTerraform = exports.composerEnvironmentConfigPrivateEnvironmentConfigToTerraform = exports.ComposerEnvironmentConfigNodeConfigOutputReference = exports.composerEnvironmentConfigNodeConfigToHclTerraform = exports.composerEnvironmentConfigNodeConfigToTerraform = exports.ComposerEnvironmentConfigNodeConfigIpAllocationPolicyOutputReference = exports.composerEnvironmentConfigNodeConfigIpAllocationPolicyToHclTerraform = exports.composerEnvironmentConfigNodeConfigIpAllocationPolicyToTerraform = exports.ComposerEnvironmentConfigMasterAuthorizedNetworksConfigOutputReference = exports.composerEnvironmentConfigMasterAuthorizedNetworksConfigToHclTerraform = exports.composerEnvironmentConfigMasterAuthorizedNetworksConfigToTerraform = exports.ComposerEnvironmentConfigMasterAuthorizedNetworksConfigCidrBlocksList = exports.ComposerEnvironmentConfigMasterAuthorizedNetworksConfigCidrBlocksOutputReference = exports.composerEnvironmentConfigMasterAuthorizedNetworksConfigCidrBlocksToHclTerraform = exports.composerEnvironmentConfigMasterAuthorizedNetworksConfigCidrBlocksToTerraform = exports.ComposerEnvironmentConfigMaintenanceWindowOutputReference = exports.composerEnvironmentConfigMaintenanceWindowToHclTerraform = exports.composerEnvironmentConfigMaintenanceWindowToTerraform = exports.ComposerEnvironmentConfigEncryptionConfigOutputReference = exports.composerEnvironmentConfigEncryptionConfigToHclTerraform = exports.composerEnvironmentConfigEncryptionConfigToTerraform = exports.ComposerEnvironmentConfigDatabaseConfigOutputReference = exports.composerEnvironmentConfigDatabaseConfigToHclTerraform = exports.composerEnvironmentConfigDatabaseConfigToTerraform = exports.ComposerEnvironmentConfigDataRetentionConfigOutputReference = exports.composerEnvironmentConfigDataRetentionConfigToHclTerraform = exports.composerEnvironmentConfigDataRetentionConfigToTerraform = exports.ComposerEnvironmentConfigDataRetentionConfigTaskLogsRetentionConfigList = exports.ComposerEnvironmentConfigDataRetentionConfigTaskLogsRetentionConfigOutputReference = exports.composerEnvironmentConfigDataRetentionConfigTaskLogsRetentionConfigToHclTerraform = exports.composerEnvironmentConfigDataRetentionConfigTaskLogsRetentionConfigToTerraform = void 0;
exports.ComposerEnvironment = exports.ComposerEnvironmentTimeoutsOutputReference = exports.composerEnvironmentTimeoutsToHclTerraform = exports.composerEnvironmentTimeoutsToTerraform = exports.ComposerEnvironmentStorageConfigOutputReference = exports.composerEnvironmentStorageConfigToHclTerraform = exports.composerEnvironmentStorageConfigToTerraform = exports.ComposerEnvironmentConfigAOutputReference = exports.composerEnvironmentConfigAToHclTerraform = exports.composerEnvironmentConfigAToTerraform = exports.ComposerEnvironmentConfigWorkloadsConfigOutputReference = exports.composerEnvironmentConfigWorkloadsConfigToHclTerraform = exports.composerEnvironmentConfigWorkloadsConfigToTerraform = exports.ComposerEnvironmentConfigWorkloadsConfigWorkerOutputReference = exports.composerEnvironmentConfigWorkloadsConfigWorkerToHclTerraform = exports.composerEnvironmentConfigWorkloadsConfigWorkerToTerraform = exports.ComposerEnvironmentConfigWorkloadsConfigWebServerOutputReference = exports.composerEnvironmentConfigWorkloadsConfigWebServerToHclTerraform = exports.composerEnvironmentConfigWorkloadsConfigWebServerToTerraform = exports.ComposerEnvironmentConfigWorkloadsConfigTriggererOutputReference = exports.composerEnvironmentConfigWorkloadsConfigTriggererToHclTerraform = exports.composerEnvironmentConfigWorkloadsConfigTriggererToTerraform = exports.ComposerEnvironmentConfigWorkloadsConfigSchedulerOutputReference = exports.composerEnvironmentConfigWorkloadsConfigSchedulerToHclTerraform = exports.composerEnvironmentConfigWorkloadsConfigSchedulerToTerraform = exports.ComposerEnvironmentConfigWorkloadsConfigDagProcessorOutputReference = exports.composerEnvironmentConfigWorkloadsConfigDagProcessorToHclTerraform = exports.composerEnvironmentConfigWorkloadsConfigDagProcessorToTerraform = exports.ComposerEnvironmentConfigWebServerNetworkAccessControlOutputReference = exports.composerEnvironmentConfigWebServerNetworkAccessControlToHclTerraform = exports.composerEnvironmentConfigWebServerNetworkAccessControlToTerraform = exports.ComposerEnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeList = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function composerEnvironmentConfigDataRetentionConfigTaskLogsRetentionConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        storage_mode: cdktf.stringToTerraform(struct.storageMode),
    };
}
exports.composerEnvironmentConfigDataRetentionConfigTaskLogsRetentionConfigToTerraform = composerEnvironmentConfigDataRetentionConfigTaskLogsRetentionConfigToTerraform;
function composerEnvironmentConfigDataRetentionConfigTaskLogsRetentionConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        storage_mode: {
            value: cdktf.stringToHclTerraform(struct.storageMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.composerEnvironmentConfigDataRetentionConfigTaskLogsRetentionConfigToHclTerraform = composerEnvironmentConfigDataRetentionConfigTaskLogsRetentionConfigToHclTerraform;
class ComposerEnvironmentConfigDataRetentionConfigTaskLogsRetentionConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._storageMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.storageMode = this._storageMode;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._storageMode = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._storageMode = value.storageMode;
        }
    }
    get storageMode() {
        return this.getStringAttribute('storage_mode');
    }
    set storageMode(value) {
        this._storageMode = value;
    }
    resetStorageMode() {
        this._storageMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get storageModeInput() {
        return this._storageMode;
    }
}
exports.ComposerEnvironmentConfigDataRetentionConfigTaskLogsRetentionConfigOutputReference = ComposerEnvironmentConfigDataRetentionConfigTaskLogsRetentionConfigOutputReference;
_a = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentConfigDataRetentionConfigTaskLogsRetentionConfigOutputReference[_a] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentConfigDataRetentionConfigTaskLogsRetentionConfigOutputReference", version: "14.13.1" };
class ComposerEnvironmentConfigDataRetentionConfigTaskLogsRetentionConfigList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComposerEnvironmentConfigDataRetentionConfigTaskLogsRetentionConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComposerEnvironmentConfigDataRetentionConfigTaskLogsRetentionConfigList = ComposerEnvironmentConfigDataRetentionConfigTaskLogsRetentionConfigList;
_b = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentConfigDataRetentionConfigTaskLogsRetentionConfigList[_b] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentConfigDataRetentionConfigTaskLogsRetentionConfigList", version: "14.13.1" };
function composerEnvironmentConfigDataRetentionConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        task_logs_retention_config: cdktf.listMapper(composerEnvironmentConfigDataRetentionConfigTaskLogsRetentionConfigToTerraform, true)(struct.taskLogsRetentionConfig),
    };
}
exports.composerEnvironmentConfigDataRetentionConfigToTerraform = composerEnvironmentConfigDataRetentionConfigToTerraform;
function composerEnvironmentConfigDataRetentionConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        task_logs_retention_config: {
            value: cdktf.listMapperHcl(composerEnvironmentConfigDataRetentionConfigTaskLogsRetentionConfigToHclTerraform, true)(struct.taskLogsRetentionConfig),
            isBlock: true,
            type: "list",
            storageClassType: "ComposerEnvironmentConfigDataRetentionConfigTaskLogsRetentionConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.composerEnvironmentConfigDataRetentionConfigToHclTerraform = composerEnvironmentConfigDataRetentionConfigToHclTerraform;
class ComposerEnvironmentConfigDataRetentionConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // task_logs_retention_config - computed: false, optional: false, required: true
        this._taskLogsRetentionConfig = new ComposerEnvironmentConfigDataRetentionConfigTaskLogsRetentionConfigList(this, "task_logs_retention_config", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._taskLogsRetentionConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.taskLogsRetentionConfig = this._taskLogsRetentionConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._taskLogsRetentionConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._taskLogsRetentionConfig.internalValue = value.taskLogsRetentionConfig;
        }
    }
    get taskLogsRetentionConfig() {
        return this._taskLogsRetentionConfig;
    }
    putTaskLogsRetentionConfig(value) {
        this._taskLogsRetentionConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get taskLogsRetentionConfigInput() {
        return this._taskLogsRetentionConfig.internalValue;
    }
}
exports.ComposerEnvironmentConfigDataRetentionConfigOutputReference = ComposerEnvironmentConfigDataRetentionConfigOutputReference;
_c = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentConfigDataRetentionConfigOutputReference[_c] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentConfigDataRetentionConfigOutputReference", version: "14.13.1" };
function composerEnvironmentConfigDatabaseConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        machine_type: cdktf.stringToTerraform(struct.machineType),
        zone: cdktf.stringToTerraform(struct.zone),
    };
}
exports.composerEnvironmentConfigDatabaseConfigToTerraform = composerEnvironmentConfigDatabaseConfigToTerraform;
function composerEnvironmentConfigDatabaseConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        machine_type: {
            value: cdktf.stringToHclTerraform(struct.machineType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        zone: {
            value: cdktf.stringToHclTerraform(struct.zone),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.composerEnvironmentConfigDatabaseConfigToHclTerraform = composerEnvironmentConfigDatabaseConfigToHclTerraform;
class ComposerEnvironmentConfigDatabaseConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._machineType !== undefined) {
            hasAnyValues = true;
            internalValueResult.machineType = this._machineType;
        }
        if (this._zone !== undefined) {
            hasAnyValues = true;
            internalValueResult.zone = this._zone;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._machineType = undefined;
            this._zone = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._machineType = value.machineType;
            this._zone = value.zone;
        }
    }
    get machineType() {
        return this.getStringAttribute('machine_type');
    }
    set machineType(value) {
        this._machineType = value;
    }
    resetMachineType() {
        this._machineType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get machineTypeInput() {
        return this._machineType;
    }
    get zone() {
        return this.getStringAttribute('zone');
    }
    set zone(value) {
        this._zone = value;
    }
    resetZone() {
        this._zone = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get zoneInput() {
        return this._zone;
    }
}
exports.ComposerEnvironmentConfigDatabaseConfigOutputReference = ComposerEnvironmentConfigDatabaseConfigOutputReference;
_d = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentConfigDatabaseConfigOutputReference[_d] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentConfigDatabaseConfigOutputReference", version: "14.13.1" };
function composerEnvironmentConfigEncryptionConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        kms_key_name: cdktf.stringToTerraform(struct.kmsKeyName),
    };
}
exports.composerEnvironmentConfigEncryptionConfigToTerraform = composerEnvironmentConfigEncryptionConfigToTerraform;
function composerEnvironmentConfigEncryptionConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        kms_key_name: {
            value: cdktf.stringToHclTerraform(struct.kmsKeyName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.composerEnvironmentConfigEncryptionConfigToHclTerraform = composerEnvironmentConfigEncryptionConfigToHclTerraform;
class ComposerEnvironmentConfigEncryptionConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._kmsKeyName !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyName = this._kmsKeyName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._kmsKeyName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._kmsKeyName = value.kmsKeyName;
        }
    }
    get kmsKeyName() {
        return this.getStringAttribute('kms_key_name');
    }
    set kmsKeyName(value) {
        this._kmsKeyName = value;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyNameInput() {
        return this._kmsKeyName;
    }
}
exports.ComposerEnvironmentConfigEncryptionConfigOutputReference = ComposerEnvironmentConfigEncryptionConfigOutputReference;
_e = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentConfigEncryptionConfigOutputReference[_e] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentConfigEncryptionConfigOutputReference", version: "14.13.1" };
function composerEnvironmentConfigMaintenanceWindowToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        end_time: cdktf.stringToTerraform(struct.endTime),
        recurrence: cdktf.stringToTerraform(struct.recurrence),
        start_time: cdktf.stringToTerraform(struct.startTime),
    };
}
exports.composerEnvironmentConfigMaintenanceWindowToTerraform = composerEnvironmentConfigMaintenanceWindowToTerraform;
function composerEnvironmentConfigMaintenanceWindowToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        end_time: {
            value: cdktf.stringToHclTerraform(struct.endTime),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        recurrence: {
            value: cdktf.stringToHclTerraform(struct.recurrence),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        start_time: {
            value: cdktf.stringToHclTerraform(struct.startTime),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.composerEnvironmentConfigMaintenanceWindowToHclTerraform = composerEnvironmentConfigMaintenanceWindowToHclTerraform;
class ComposerEnvironmentConfigMaintenanceWindowOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._endTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.endTime = this._endTime;
        }
        if (this._recurrence !== undefined) {
            hasAnyValues = true;
            internalValueResult.recurrence = this._recurrence;
        }
        if (this._startTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.startTime = this._startTime;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._endTime = undefined;
            this._recurrence = undefined;
            this._startTime = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._endTime = value.endTime;
            this._recurrence = value.recurrence;
            this._startTime = value.startTime;
        }
    }
    get endTime() {
        return this.getStringAttribute('end_time');
    }
    set endTime(value) {
        this._endTime = value;
    }
    // Temporarily expose input value. Use with caution.
    get endTimeInput() {
        return this._endTime;
    }
    get recurrence() {
        return this.getStringAttribute('recurrence');
    }
    set recurrence(value) {
        this._recurrence = value;
    }
    // Temporarily expose input value. Use with caution.
    get recurrenceInput() {
        return this._recurrence;
    }
    get startTime() {
        return this.getStringAttribute('start_time');
    }
    set startTime(value) {
        this._startTime = value;
    }
    // Temporarily expose input value. Use with caution.
    get startTimeInput() {
        return this._startTime;
    }
}
exports.ComposerEnvironmentConfigMaintenanceWindowOutputReference = ComposerEnvironmentConfigMaintenanceWindowOutputReference;
_f = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentConfigMaintenanceWindowOutputReference[_f] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentConfigMaintenanceWindowOutputReference", version: "14.13.1" };
function composerEnvironmentConfigMasterAuthorizedNetworksConfigCidrBlocksToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cidr_block: cdktf.stringToTerraform(struct.cidrBlock),
        display_name: cdktf.stringToTerraform(struct.displayName),
    };
}
exports.composerEnvironmentConfigMasterAuthorizedNetworksConfigCidrBlocksToTerraform = composerEnvironmentConfigMasterAuthorizedNetworksConfigCidrBlocksToTerraform;
function composerEnvironmentConfigMasterAuthorizedNetworksConfigCidrBlocksToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cidr_block: {
            value: cdktf.stringToHclTerraform(struct.cidrBlock),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        display_name: {
            value: cdktf.stringToHclTerraform(struct.displayName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.composerEnvironmentConfigMasterAuthorizedNetworksConfigCidrBlocksToHclTerraform = composerEnvironmentConfigMasterAuthorizedNetworksConfigCidrBlocksToHclTerraform;
class ComposerEnvironmentConfigMasterAuthorizedNetworksConfigCidrBlocksOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cidrBlock !== undefined) {
            hasAnyValues = true;
            internalValueResult.cidrBlock = this._cidrBlock;
        }
        if (this._displayName !== undefined) {
            hasAnyValues = true;
            internalValueResult.displayName = this._displayName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._cidrBlock = undefined;
            this._displayName = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._cidrBlock = value.cidrBlock;
            this._displayName = value.displayName;
        }
    }
    get cidrBlock() {
        return this.getStringAttribute('cidr_block');
    }
    set cidrBlock(value) {
        this._cidrBlock = value;
    }
    // Temporarily expose input value. Use with caution.
    get cidrBlockInput() {
        return this._cidrBlock;
    }
    get displayName() {
        return this.getStringAttribute('display_name');
    }
    set displayName(value) {
        this._displayName = value;
    }
    resetDisplayName() {
        this._displayName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get displayNameInput() {
        return this._displayName;
    }
}
exports.ComposerEnvironmentConfigMasterAuthorizedNetworksConfigCidrBlocksOutputReference = ComposerEnvironmentConfigMasterAuthorizedNetworksConfigCidrBlocksOutputReference;
_g = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentConfigMasterAuthorizedNetworksConfigCidrBlocksOutputReference[_g] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentConfigMasterAuthorizedNetworksConfigCidrBlocksOutputReference", version: "14.13.1" };
class ComposerEnvironmentConfigMasterAuthorizedNetworksConfigCidrBlocksList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComposerEnvironmentConfigMasterAuthorizedNetworksConfigCidrBlocksOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComposerEnvironmentConfigMasterAuthorizedNetworksConfigCidrBlocksList = ComposerEnvironmentConfigMasterAuthorizedNetworksConfigCidrBlocksList;
_h = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentConfigMasterAuthorizedNetworksConfigCidrBlocksList[_h] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentConfigMasterAuthorizedNetworksConfigCidrBlocksList", version: "14.13.1" };
function composerEnvironmentConfigMasterAuthorizedNetworksConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        cidr_blocks: cdktf.listMapper(composerEnvironmentConfigMasterAuthorizedNetworksConfigCidrBlocksToTerraform, true)(struct.cidrBlocks),
    };
}
exports.composerEnvironmentConfigMasterAuthorizedNetworksConfigToTerraform = composerEnvironmentConfigMasterAuthorizedNetworksConfigToTerraform;
function composerEnvironmentConfigMasterAuthorizedNetworksConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        cidr_blocks: {
            value: cdktf.listMapperHcl(composerEnvironmentConfigMasterAuthorizedNetworksConfigCidrBlocksToHclTerraform, true)(struct.cidrBlocks),
            isBlock: true,
            type: "set",
            storageClassType: "ComposerEnvironmentConfigMasterAuthorizedNetworksConfigCidrBlocksList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.composerEnvironmentConfigMasterAuthorizedNetworksConfigToHclTerraform = composerEnvironmentConfigMasterAuthorizedNetworksConfigToHclTerraform;
class ComposerEnvironmentConfigMasterAuthorizedNetworksConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cidr_blocks - computed: false, optional: true, required: false
        this._cidrBlocks = new ComposerEnvironmentConfigMasterAuthorizedNetworksConfigCidrBlocksList(this, "cidr_blocks", true);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._cidrBlocks?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cidrBlocks = this._cidrBlocks?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._cidrBlocks.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._cidrBlocks.internalValue = value.cidrBlocks;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get cidrBlocks() {
        return this._cidrBlocks;
    }
    putCidrBlocks(value) {
        this._cidrBlocks.internalValue = value;
    }
    resetCidrBlocks() {
        this._cidrBlocks.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cidrBlocksInput() {
        return this._cidrBlocks.internalValue;
    }
}
exports.ComposerEnvironmentConfigMasterAuthorizedNetworksConfigOutputReference = ComposerEnvironmentConfigMasterAuthorizedNetworksConfigOutputReference;
_j = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentConfigMasterAuthorizedNetworksConfigOutputReference[_j] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentConfigMasterAuthorizedNetworksConfigOutputReference", version: "14.13.1" };
function composerEnvironmentConfigNodeConfigIpAllocationPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cluster_ipv4_cidr_block: cdktf.stringToTerraform(struct.clusterIpv4CidrBlock),
        cluster_secondary_range_name: cdktf.stringToTerraform(struct.clusterSecondaryRangeName),
        services_ipv4_cidr_block: cdktf.stringToTerraform(struct.servicesIpv4CidrBlock),
        services_secondary_range_name: cdktf.stringToTerraform(struct.servicesSecondaryRangeName),
        use_ip_aliases: cdktf.booleanToTerraform(struct.useIpAliases),
    };
}
exports.composerEnvironmentConfigNodeConfigIpAllocationPolicyToTerraform = composerEnvironmentConfigNodeConfigIpAllocationPolicyToTerraform;
function composerEnvironmentConfigNodeConfigIpAllocationPolicyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cluster_ipv4_cidr_block: {
            value: cdktf.stringToHclTerraform(struct.clusterIpv4CidrBlock),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cluster_secondary_range_name: {
            value: cdktf.stringToHclTerraform(struct.clusterSecondaryRangeName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        services_ipv4_cidr_block: {
            value: cdktf.stringToHclTerraform(struct.servicesIpv4CidrBlock),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        services_secondary_range_name: {
            value: cdktf.stringToHclTerraform(struct.servicesSecondaryRangeName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        use_ip_aliases: {
            value: cdktf.booleanToHclTerraform(struct.useIpAliases),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.composerEnvironmentConfigNodeConfigIpAllocationPolicyToHclTerraform = composerEnvironmentConfigNodeConfigIpAllocationPolicyToHclTerraform;
class ComposerEnvironmentConfigNodeConfigIpAllocationPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._clusterIpv4CidrBlock !== undefined) {
            hasAnyValues = true;
            internalValueResult.clusterIpv4CidrBlock = this._clusterIpv4CidrBlock;
        }
        if (this._clusterSecondaryRangeName !== undefined) {
            hasAnyValues = true;
            internalValueResult.clusterSecondaryRangeName = this._clusterSecondaryRangeName;
        }
        if (this._servicesIpv4CidrBlock !== undefined) {
            hasAnyValues = true;
            internalValueResult.servicesIpv4CidrBlock = this._servicesIpv4CidrBlock;
        }
        if (this._servicesSecondaryRangeName !== undefined) {
            hasAnyValues = true;
            internalValueResult.servicesSecondaryRangeName = this._servicesSecondaryRangeName;
        }
        if (this._useIpAliases !== undefined) {
            hasAnyValues = true;
            internalValueResult.useIpAliases = this._useIpAliases;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._clusterIpv4CidrBlock = undefined;
            this._clusterSecondaryRangeName = undefined;
            this._servicesIpv4CidrBlock = undefined;
            this._servicesSecondaryRangeName = undefined;
            this._useIpAliases = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._clusterIpv4CidrBlock = value.clusterIpv4CidrBlock;
            this._clusterSecondaryRangeName = value.clusterSecondaryRangeName;
            this._servicesIpv4CidrBlock = value.servicesIpv4CidrBlock;
            this._servicesSecondaryRangeName = value.servicesSecondaryRangeName;
            this._useIpAliases = value.useIpAliases;
        }
    }
    get clusterIpv4CidrBlock() {
        return this.getStringAttribute('cluster_ipv4_cidr_block');
    }
    set clusterIpv4CidrBlock(value) {
        this._clusterIpv4CidrBlock = value;
    }
    resetClusterIpv4CidrBlock() {
        this._clusterIpv4CidrBlock = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clusterIpv4CidrBlockInput() {
        return this._clusterIpv4CidrBlock;
    }
    get clusterSecondaryRangeName() {
        return this.getStringAttribute('cluster_secondary_range_name');
    }
    set clusterSecondaryRangeName(value) {
        this._clusterSecondaryRangeName = value;
    }
    resetClusterSecondaryRangeName() {
        this._clusterSecondaryRangeName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clusterSecondaryRangeNameInput() {
        return this._clusterSecondaryRangeName;
    }
    get servicesIpv4CidrBlock() {
        return this.getStringAttribute('services_ipv4_cidr_block');
    }
    set servicesIpv4CidrBlock(value) {
        this._servicesIpv4CidrBlock = value;
    }
    resetServicesIpv4CidrBlock() {
        this._servicesIpv4CidrBlock = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get servicesIpv4CidrBlockInput() {
        return this._servicesIpv4CidrBlock;
    }
    get servicesSecondaryRangeName() {
        return this.getStringAttribute('services_secondary_range_name');
    }
    set servicesSecondaryRangeName(value) {
        this._servicesSecondaryRangeName = value;
    }
    resetServicesSecondaryRangeName() {
        this._servicesSecondaryRangeName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get servicesSecondaryRangeNameInput() {
        return this._servicesSecondaryRangeName;
    }
    get useIpAliases() {
        return this.getBooleanAttribute('use_ip_aliases');
    }
    set useIpAliases(value) {
        this._useIpAliases = value;
    }
    resetUseIpAliases() {
        this._useIpAliases = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get useIpAliasesInput() {
        return this._useIpAliases;
    }
}
exports.ComposerEnvironmentConfigNodeConfigIpAllocationPolicyOutputReference = ComposerEnvironmentConfigNodeConfigIpAllocationPolicyOutputReference;
_k = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentConfigNodeConfigIpAllocationPolicyOutputReference[_k] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentConfigNodeConfigIpAllocationPolicyOutputReference", version: "14.13.1" };
function composerEnvironmentConfigNodeConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        composer_internal_ipv4_cidr_block: cdktf.stringToTerraform(struct.composerInternalIpv4CidrBlock),
        composer_network_attachment: cdktf.stringToTerraform(struct.composerNetworkAttachment),
        disk_size_gb: cdktf.numberToTerraform(struct.diskSizeGb),
        enable_ip_masq_agent: cdktf.booleanToTerraform(struct.enableIpMasqAgent),
        machine_type: cdktf.stringToTerraform(struct.machineType),
        network: cdktf.stringToTerraform(struct.network),
        oauth_scopes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.oauthScopes),
        service_account: cdktf.stringToTerraform(struct.serviceAccount),
        subnetwork: cdktf.stringToTerraform(struct.subnetwork),
        tags: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.tags),
        zone: cdktf.stringToTerraform(struct.zone),
        ip_allocation_policy: composerEnvironmentConfigNodeConfigIpAllocationPolicyToTerraform(struct.ipAllocationPolicy),
    };
}
exports.composerEnvironmentConfigNodeConfigToTerraform = composerEnvironmentConfigNodeConfigToTerraform;
function composerEnvironmentConfigNodeConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        composer_internal_ipv4_cidr_block: {
            value: cdktf.stringToHclTerraform(struct.composerInternalIpv4CidrBlock),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        composer_network_attachment: {
            value: cdktf.stringToHclTerraform(struct.composerNetworkAttachment),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        disk_size_gb: {
            value: cdktf.numberToHclTerraform(struct.diskSizeGb),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        enable_ip_masq_agent: {
            value: cdktf.booleanToHclTerraform(struct.enableIpMasqAgent),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        machine_type: {
            value: cdktf.stringToHclTerraform(struct.machineType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        network: {
            value: cdktf.stringToHclTerraform(struct.network),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        oauth_scopes: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.oauthScopes),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        service_account: {
            value: cdktf.stringToHclTerraform(struct.serviceAccount),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        subnetwork: {
            value: cdktf.stringToHclTerraform(struct.subnetwork),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        tags: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.tags),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        zone: {
            value: cdktf.stringToHclTerraform(struct.zone),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        ip_allocation_policy: {
            value: composerEnvironmentConfigNodeConfigIpAllocationPolicyToHclTerraform(struct.ipAllocationPolicy),
            isBlock: true,
            type: "list",
            storageClassType: "ComposerEnvironmentConfigNodeConfigIpAllocationPolicyList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.composerEnvironmentConfigNodeConfigToHclTerraform = composerEnvironmentConfigNodeConfigToHclTerraform;
class ComposerEnvironmentConfigNodeConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // ip_allocation_policy - computed: false, optional: true, required: false
        this._ipAllocationPolicy = new ComposerEnvironmentConfigNodeConfigIpAllocationPolicyOutputReference(this, "ip_allocation_policy");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._composerInternalIpv4CidrBlock !== undefined) {
            hasAnyValues = true;
            internalValueResult.composerInternalIpv4CidrBlock = this._composerInternalIpv4CidrBlock;
        }
        if (this._composerNetworkAttachment !== undefined) {
            hasAnyValues = true;
            internalValueResult.composerNetworkAttachment = this._composerNetworkAttachment;
        }
        if (this._diskSizeGb !== undefined) {
            hasAnyValues = true;
            internalValueResult.diskSizeGb = this._diskSizeGb;
        }
        if (this._enableIpMasqAgent !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableIpMasqAgent = this._enableIpMasqAgent;
        }
        if (this._machineType !== undefined) {
            hasAnyValues = true;
            internalValueResult.machineType = this._machineType;
        }
        if (this._network !== undefined) {
            hasAnyValues = true;
            internalValueResult.network = this._network;
        }
        if (this._oauthScopes !== undefined) {
            hasAnyValues = true;
            internalValueResult.oauthScopes = this._oauthScopes;
        }
        if (this._serviceAccount !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceAccount = this._serviceAccount;
        }
        if (this._subnetwork !== undefined) {
            hasAnyValues = true;
            internalValueResult.subnetwork = this._subnetwork;
        }
        if (this._tags !== undefined) {
            hasAnyValues = true;
            internalValueResult.tags = this._tags;
        }
        if (this._zone !== undefined) {
            hasAnyValues = true;
            internalValueResult.zone = this._zone;
        }
        if (this._ipAllocationPolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ipAllocationPolicy = this._ipAllocationPolicy?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._composerInternalIpv4CidrBlock = undefined;
            this._composerNetworkAttachment = undefined;
            this._diskSizeGb = undefined;
            this._enableIpMasqAgent = undefined;
            this._machineType = undefined;
            this._network = undefined;
            this._oauthScopes = undefined;
            this._serviceAccount = undefined;
            this._subnetwork = undefined;
            this._tags = undefined;
            this._zone = undefined;
            this._ipAllocationPolicy.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._composerInternalIpv4CidrBlock = value.composerInternalIpv4CidrBlock;
            this._composerNetworkAttachment = value.composerNetworkAttachment;
            this._diskSizeGb = value.diskSizeGb;
            this._enableIpMasqAgent = value.enableIpMasqAgent;
            this._machineType = value.machineType;
            this._network = value.network;
            this._oauthScopes = value.oauthScopes;
            this._serviceAccount = value.serviceAccount;
            this._subnetwork = value.subnetwork;
            this._tags = value.tags;
            this._zone = value.zone;
            this._ipAllocationPolicy.internalValue = value.ipAllocationPolicy;
        }
    }
    get composerInternalIpv4CidrBlock() {
        return this.getStringAttribute('composer_internal_ipv4_cidr_block');
    }
    set composerInternalIpv4CidrBlock(value) {
        this._composerInternalIpv4CidrBlock = value;
    }
    resetComposerInternalIpv4CidrBlock() {
        this._composerInternalIpv4CidrBlock = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get composerInternalIpv4CidrBlockInput() {
        return this._composerInternalIpv4CidrBlock;
    }
    get composerNetworkAttachment() {
        return this.getStringAttribute('composer_network_attachment');
    }
    set composerNetworkAttachment(value) {
        this._composerNetworkAttachment = value;
    }
    resetComposerNetworkAttachment() {
        this._composerNetworkAttachment = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get composerNetworkAttachmentInput() {
        return this._composerNetworkAttachment;
    }
    get diskSizeGb() {
        return this.getNumberAttribute('disk_size_gb');
    }
    set diskSizeGb(value) {
        this._diskSizeGb = value;
    }
    resetDiskSizeGb() {
        this._diskSizeGb = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get diskSizeGbInput() {
        return this._diskSizeGb;
    }
    get enableIpMasqAgent() {
        return this.getBooleanAttribute('enable_ip_masq_agent');
    }
    set enableIpMasqAgent(value) {
        this._enableIpMasqAgent = value;
    }
    resetEnableIpMasqAgent() {
        this._enableIpMasqAgent = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableIpMasqAgentInput() {
        return this._enableIpMasqAgent;
    }
    get machineType() {
        return this.getStringAttribute('machine_type');
    }
    set machineType(value) {
        this._machineType = value;
    }
    resetMachineType() {
        this._machineType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get machineTypeInput() {
        return this._machineType;
    }
    get network() {
        return this.getStringAttribute('network');
    }
    set network(value) {
        this._network = value;
    }
    resetNetwork() {
        this._network = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkInput() {
        return this._network;
    }
    get oauthScopes() {
        return cdktf.Fn.tolist(this.getListAttribute('oauth_scopes'));
    }
    set oauthScopes(value) {
        this._oauthScopes = value;
    }
    resetOauthScopes() {
        this._oauthScopes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get oauthScopesInput() {
        return this._oauthScopes;
    }
    get serviceAccount() {
        return this.getStringAttribute('service_account');
    }
    set serviceAccount(value) {
        this._serviceAccount = value;
    }
    resetServiceAccount() {
        this._serviceAccount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceAccountInput() {
        return this._serviceAccount;
    }
    get subnetwork() {
        return this.getStringAttribute('subnetwork');
    }
    set subnetwork(value) {
        this._subnetwork = value;
    }
    resetSubnetwork() {
        this._subnetwork = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subnetworkInput() {
        return this._subnetwork;
    }
    get tags() {
        return cdktf.Fn.tolist(this.getListAttribute('tags'));
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get zone() {
        return this.getStringAttribute('zone');
    }
    set zone(value) {
        this._zone = value;
    }
    resetZone() {
        this._zone = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get zoneInput() {
        return this._zone;
    }
    get ipAllocationPolicy() {
        return this._ipAllocationPolicy;
    }
    putIpAllocationPolicy(value) {
        this._ipAllocationPolicy.internalValue = value;
    }
    resetIpAllocationPolicy() {
        this._ipAllocationPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ipAllocationPolicyInput() {
        return this._ipAllocationPolicy.internalValue;
    }
}
exports.ComposerEnvironmentConfigNodeConfigOutputReference = ComposerEnvironmentConfigNodeConfigOutputReference;
_l = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentConfigNodeConfigOutputReference[_l] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentConfigNodeConfigOutputReference", version: "14.13.1" };
function composerEnvironmentConfigPrivateEnvironmentConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cloud_composer_connection_subnetwork: cdktf.stringToTerraform(struct.cloudComposerConnectionSubnetwork),
        cloud_composer_network_ipv4_cidr_block: cdktf.stringToTerraform(struct.cloudComposerNetworkIpv4CidrBlock),
        cloud_sql_ipv4_cidr_block: cdktf.stringToTerraform(struct.cloudSqlIpv4CidrBlock),
        connection_type: cdktf.stringToTerraform(struct.connectionType),
        enable_private_endpoint: cdktf.booleanToTerraform(struct.enablePrivateEndpoint),
        enable_privately_used_public_ips: cdktf.booleanToTerraform(struct.enablePrivatelyUsedPublicIps),
        master_ipv4_cidr_block: cdktf.stringToTerraform(struct.masterIpv4CidrBlock),
        web_server_ipv4_cidr_block: cdktf.stringToTerraform(struct.webServerIpv4CidrBlock),
    };
}
exports.composerEnvironmentConfigPrivateEnvironmentConfigToTerraform = composerEnvironmentConfigPrivateEnvironmentConfigToTerraform;
function composerEnvironmentConfigPrivateEnvironmentConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cloud_composer_connection_subnetwork: {
            value: cdktf.stringToHclTerraform(struct.cloudComposerConnectionSubnetwork),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cloud_composer_network_ipv4_cidr_block: {
            value: cdktf.stringToHclTerraform(struct.cloudComposerNetworkIpv4CidrBlock),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cloud_sql_ipv4_cidr_block: {
            value: cdktf.stringToHclTerraform(struct.cloudSqlIpv4CidrBlock),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        connection_type: {
            value: cdktf.stringToHclTerraform(struct.connectionType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        enable_private_endpoint: {
            value: cdktf.booleanToHclTerraform(struct.enablePrivateEndpoint),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        enable_privately_used_public_ips: {
            value: cdktf.booleanToHclTerraform(struct.enablePrivatelyUsedPublicIps),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        master_ipv4_cidr_block: {
            value: cdktf.stringToHclTerraform(struct.masterIpv4CidrBlock),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        web_server_ipv4_cidr_block: {
            value: cdktf.stringToHclTerraform(struct.webServerIpv4CidrBlock),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.composerEnvironmentConfigPrivateEnvironmentConfigToHclTerraform = composerEnvironmentConfigPrivateEnvironmentConfigToHclTerraform;
class ComposerEnvironmentConfigPrivateEnvironmentConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cloudComposerConnectionSubnetwork !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudComposerConnectionSubnetwork = this._cloudComposerConnectionSubnetwork;
        }
        if (this._cloudComposerNetworkIpv4CidrBlock !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudComposerNetworkIpv4CidrBlock = this._cloudComposerNetworkIpv4CidrBlock;
        }
        if (this._cloudSqlIpv4CidrBlock !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudSqlIpv4CidrBlock = this._cloudSqlIpv4CidrBlock;
        }
        if (this._connectionType !== undefined) {
            hasAnyValues = true;
            internalValueResult.connectionType = this._connectionType;
        }
        if (this._enablePrivateEndpoint !== undefined) {
            hasAnyValues = true;
            internalValueResult.enablePrivateEndpoint = this._enablePrivateEndpoint;
        }
        if (this._enablePrivatelyUsedPublicIps !== undefined) {
            hasAnyValues = true;
            internalValueResult.enablePrivatelyUsedPublicIps = this._enablePrivatelyUsedPublicIps;
        }
        if (this._masterIpv4CidrBlock !== undefined) {
            hasAnyValues = true;
            internalValueResult.masterIpv4CidrBlock = this._masterIpv4CidrBlock;
        }
        if (this._webServerIpv4CidrBlock !== undefined) {
            hasAnyValues = true;
            internalValueResult.webServerIpv4CidrBlock = this._webServerIpv4CidrBlock;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cloudComposerConnectionSubnetwork = undefined;
            this._cloudComposerNetworkIpv4CidrBlock = undefined;
            this._cloudSqlIpv4CidrBlock = undefined;
            this._connectionType = undefined;
            this._enablePrivateEndpoint = undefined;
            this._enablePrivatelyUsedPublicIps = undefined;
            this._masterIpv4CidrBlock = undefined;
            this._webServerIpv4CidrBlock = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cloudComposerConnectionSubnetwork = value.cloudComposerConnectionSubnetwork;
            this._cloudComposerNetworkIpv4CidrBlock = value.cloudComposerNetworkIpv4CidrBlock;
            this._cloudSqlIpv4CidrBlock = value.cloudSqlIpv4CidrBlock;
            this._connectionType = value.connectionType;
            this._enablePrivateEndpoint = value.enablePrivateEndpoint;
            this._enablePrivatelyUsedPublicIps = value.enablePrivatelyUsedPublicIps;
            this._masterIpv4CidrBlock = value.masterIpv4CidrBlock;
            this._webServerIpv4CidrBlock = value.webServerIpv4CidrBlock;
        }
    }
    get cloudComposerConnectionSubnetwork() {
        return this.getStringAttribute('cloud_composer_connection_subnetwork');
    }
    set cloudComposerConnectionSubnetwork(value) {
        this._cloudComposerConnectionSubnetwork = value;
    }
    resetCloudComposerConnectionSubnetwork() {
        this._cloudComposerConnectionSubnetwork = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudComposerConnectionSubnetworkInput() {
        return this._cloudComposerConnectionSubnetwork;
    }
    get cloudComposerNetworkIpv4CidrBlock() {
        return this.getStringAttribute('cloud_composer_network_ipv4_cidr_block');
    }
    set cloudComposerNetworkIpv4CidrBlock(value) {
        this._cloudComposerNetworkIpv4CidrBlock = value;
    }
    resetCloudComposerNetworkIpv4CidrBlock() {
        this._cloudComposerNetworkIpv4CidrBlock = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudComposerNetworkIpv4CidrBlockInput() {
        return this._cloudComposerNetworkIpv4CidrBlock;
    }
    get cloudSqlIpv4CidrBlock() {
        return this.getStringAttribute('cloud_sql_ipv4_cidr_block');
    }
    set cloudSqlIpv4CidrBlock(value) {
        this._cloudSqlIpv4CidrBlock = value;
    }
    resetCloudSqlIpv4CidrBlock() {
        this._cloudSqlIpv4CidrBlock = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudSqlIpv4CidrBlockInput() {
        return this._cloudSqlIpv4CidrBlock;
    }
    get connectionType() {
        return this.getStringAttribute('connection_type');
    }
    set connectionType(value) {
        this._connectionType = value;
    }
    resetConnectionType() {
        this._connectionType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectionTypeInput() {
        return this._connectionType;
    }
    get enablePrivateEndpoint() {
        return this.getBooleanAttribute('enable_private_endpoint');
    }
    set enablePrivateEndpoint(value) {
        this._enablePrivateEndpoint = value;
    }
    resetEnablePrivateEndpoint() {
        this._enablePrivateEndpoint = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enablePrivateEndpointInput() {
        return this._enablePrivateEndpoint;
    }
    get enablePrivatelyUsedPublicIps() {
        return this.getBooleanAttribute('enable_privately_used_public_ips');
    }
    set enablePrivatelyUsedPublicIps(value) {
        this._enablePrivatelyUsedPublicIps = value;
    }
    resetEnablePrivatelyUsedPublicIps() {
        this._enablePrivatelyUsedPublicIps = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enablePrivatelyUsedPublicIpsInput() {
        return this._enablePrivatelyUsedPublicIps;
    }
    get masterIpv4CidrBlock() {
        return this.getStringAttribute('master_ipv4_cidr_block');
    }
    set masterIpv4CidrBlock(value) {
        this._masterIpv4CidrBlock = value;
    }
    resetMasterIpv4CidrBlock() {
        this._masterIpv4CidrBlock = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get masterIpv4CidrBlockInput() {
        return this._masterIpv4CidrBlock;
    }
    get webServerIpv4CidrBlock() {
        return this.getStringAttribute('web_server_ipv4_cidr_block');
    }
    set webServerIpv4CidrBlock(value) {
        this._webServerIpv4CidrBlock = value;
    }
    resetWebServerIpv4CidrBlock() {
        this._webServerIpv4CidrBlock = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get webServerIpv4CidrBlockInput() {
        return this._webServerIpv4CidrBlock;
    }
}
exports.ComposerEnvironmentConfigPrivateEnvironmentConfigOutputReference = ComposerEnvironmentConfigPrivateEnvironmentConfigOutputReference;
_m = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentConfigPrivateEnvironmentConfigOutputReference[_m] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentConfigPrivateEnvironmentConfigOutputReference", version: "14.13.1" };
function composerEnvironmentConfigRecoveryConfigScheduledSnapshotsConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        snapshot_creation_schedule: cdktf.stringToTerraform(struct.snapshotCreationSchedule),
        snapshot_location: cdktf.stringToTerraform(struct.snapshotLocation),
        time_zone: cdktf.stringToTerraform(struct.timeZone),
    };
}
exports.composerEnvironmentConfigRecoveryConfigScheduledSnapshotsConfigToTerraform = composerEnvironmentConfigRecoveryConfigScheduledSnapshotsConfigToTerraform;
function composerEnvironmentConfigRecoveryConfigScheduledSnapshotsConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        snapshot_creation_schedule: {
            value: cdktf.stringToHclTerraform(struct.snapshotCreationSchedule),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        snapshot_location: {
            value: cdktf.stringToHclTerraform(struct.snapshotLocation),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        time_zone: {
            value: cdktf.stringToHclTerraform(struct.timeZone),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.composerEnvironmentConfigRecoveryConfigScheduledSnapshotsConfigToHclTerraform = composerEnvironmentConfigRecoveryConfigScheduledSnapshotsConfigToHclTerraform;
class ComposerEnvironmentConfigRecoveryConfigScheduledSnapshotsConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._snapshotCreationSchedule !== undefined) {
            hasAnyValues = true;
            internalValueResult.snapshotCreationSchedule = this._snapshotCreationSchedule;
        }
        if (this._snapshotLocation !== undefined) {
            hasAnyValues = true;
            internalValueResult.snapshotLocation = this._snapshotLocation;
        }
        if (this._timeZone !== undefined) {
            hasAnyValues = true;
            internalValueResult.timeZone = this._timeZone;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._snapshotCreationSchedule = undefined;
            this._snapshotLocation = undefined;
            this._timeZone = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._snapshotCreationSchedule = value.snapshotCreationSchedule;
            this._snapshotLocation = value.snapshotLocation;
            this._timeZone = value.timeZone;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get snapshotCreationSchedule() {
        return this.getStringAttribute('snapshot_creation_schedule');
    }
    set snapshotCreationSchedule(value) {
        this._snapshotCreationSchedule = value;
    }
    resetSnapshotCreationSchedule() {
        this._snapshotCreationSchedule = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get snapshotCreationScheduleInput() {
        return this._snapshotCreationSchedule;
    }
    get snapshotLocation() {
        return this.getStringAttribute('snapshot_location');
    }
    set snapshotLocation(value) {
        this._snapshotLocation = value;
    }
    resetSnapshotLocation() {
        this._snapshotLocation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get snapshotLocationInput() {
        return this._snapshotLocation;
    }
    get timeZone() {
        return this.getStringAttribute('time_zone');
    }
    set timeZone(value) {
        this._timeZone = value;
    }
    resetTimeZone() {
        this._timeZone = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeZoneInput() {
        return this._timeZone;
    }
}
exports.ComposerEnvironmentConfigRecoveryConfigScheduledSnapshotsConfigOutputReference = ComposerEnvironmentConfigRecoveryConfigScheduledSnapshotsConfigOutputReference;
_o = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentConfigRecoveryConfigScheduledSnapshotsConfigOutputReference[_o] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentConfigRecoveryConfigScheduledSnapshotsConfigOutputReference", version: "14.13.1" };
function composerEnvironmentConfigRecoveryConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        scheduled_snapshots_config: composerEnvironmentConfigRecoveryConfigScheduledSnapshotsConfigToTerraform(struct.scheduledSnapshotsConfig),
    };
}
exports.composerEnvironmentConfigRecoveryConfigToTerraform = composerEnvironmentConfigRecoveryConfigToTerraform;
function composerEnvironmentConfigRecoveryConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        scheduled_snapshots_config: {
            value: composerEnvironmentConfigRecoveryConfigScheduledSnapshotsConfigToHclTerraform(struct.scheduledSnapshotsConfig),
            isBlock: true,
            type: "list",
            storageClassType: "ComposerEnvironmentConfigRecoveryConfigScheduledSnapshotsConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.composerEnvironmentConfigRecoveryConfigToHclTerraform = composerEnvironmentConfigRecoveryConfigToHclTerraform;
class ComposerEnvironmentConfigRecoveryConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // scheduled_snapshots_config - computed: false, optional: true, required: false
        this._scheduledSnapshotsConfig = new ComposerEnvironmentConfigRecoveryConfigScheduledSnapshotsConfigOutputReference(this, "scheduled_snapshots_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._scheduledSnapshotsConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.scheduledSnapshotsConfig = this._scheduledSnapshotsConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._scheduledSnapshotsConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._scheduledSnapshotsConfig.internalValue = value.scheduledSnapshotsConfig;
        }
    }
    get scheduledSnapshotsConfig() {
        return this._scheduledSnapshotsConfig;
    }
    putScheduledSnapshotsConfig(value) {
        this._scheduledSnapshotsConfig.internalValue = value;
    }
    resetScheduledSnapshotsConfig() {
        this._scheduledSnapshotsConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scheduledSnapshotsConfigInput() {
        return this._scheduledSnapshotsConfig.internalValue;
    }
}
exports.ComposerEnvironmentConfigRecoveryConfigOutputReference = ComposerEnvironmentConfigRecoveryConfigOutputReference;
_p = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentConfigRecoveryConfigOutputReference[_p] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentConfigRecoveryConfigOutputReference", version: "14.13.1" };
function composerEnvironmentConfigSoftwareConfigCloudDataLineageIntegrationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.composerEnvironmentConfigSoftwareConfigCloudDataLineageIntegrationToTerraform = composerEnvironmentConfigSoftwareConfigCloudDataLineageIntegrationToTerraform;
function composerEnvironmentConfigSoftwareConfigCloudDataLineageIntegrationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.composerEnvironmentConfigSoftwareConfigCloudDataLineageIntegrationToHclTerraform = composerEnvironmentConfigSoftwareConfigCloudDataLineageIntegrationToHclTerraform;
class ComposerEnvironmentConfigSoftwareConfigCloudDataLineageIntegrationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
}
exports.ComposerEnvironmentConfigSoftwareConfigCloudDataLineageIntegrationOutputReference = ComposerEnvironmentConfigSoftwareConfigCloudDataLineageIntegrationOutputReference;
_q = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentConfigSoftwareConfigCloudDataLineageIntegrationOutputReference[_q] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentConfigSoftwareConfigCloudDataLineageIntegrationOutputReference", version: "14.13.1" };
function composerEnvironmentConfigSoftwareConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        airflow_config_overrides: cdktf.hashMapper(cdktf.stringToTerraform)(struct.airflowConfigOverrides),
        env_variables: cdktf.hashMapper(cdktf.stringToTerraform)(struct.envVariables),
        image_version: cdktf.stringToTerraform(struct.imageVersion),
        pypi_packages: cdktf.hashMapper(cdktf.stringToTerraform)(struct.pypiPackages),
        python_version: cdktf.stringToTerraform(struct.pythonVersion),
        scheduler_count: cdktf.numberToTerraform(struct.schedulerCount),
        web_server_plugins_mode: cdktf.stringToTerraform(struct.webServerPluginsMode),
        cloud_data_lineage_integration: composerEnvironmentConfigSoftwareConfigCloudDataLineageIntegrationToTerraform(struct.cloudDataLineageIntegration),
    };
}
exports.composerEnvironmentConfigSoftwareConfigToTerraform = composerEnvironmentConfigSoftwareConfigToTerraform;
function composerEnvironmentConfigSoftwareConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        airflow_config_overrides: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.airflowConfigOverrides),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        env_variables: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.envVariables),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        image_version: {
            value: cdktf.stringToHclTerraform(struct.imageVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        pypi_packages: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.pypiPackages),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        python_version: {
            value: cdktf.stringToHclTerraform(struct.pythonVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        scheduler_count: {
            value: cdktf.numberToHclTerraform(struct.schedulerCount),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        web_server_plugins_mode: {
            value: cdktf.stringToHclTerraform(struct.webServerPluginsMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cloud_data_lineage_integration: {
            value: composerEnvironmentConfigSoftwareConfigCloudDataLineageIntegrationToHclTerraform(struct.cloudDataLineageIntegration),
            isBlock: true,
            type: "list",
            storageClassType: "ComposerEnvironmentConfigSoftwareConfigCloudDataLineageIntegrationList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.composerEnvironmentConfigSoftwareConfigToHclTerraform = composerEnvironmentConfigSoftwareConfigToHclTerraform;
class ComposerEnvironmentConfigSoftwareConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cloud_data_lineage_integration - computed: false, optional: true, required: false
        this._cloudDataLineageIntegration = new ComposerEnvironmentConfigSoftwareConfigCloudDataLineageIntegrationOutputReference(this, "cloud_data_lineage_integration");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._airflowConfigOverrides !== undefined) {
            hasAnyValues = true;
            internalValueResult.airflowConfigOverrides = this._airflowConfigOverrides;
        }
        if (this._envVariables !== undefined) {
            hasAnyValues = true;
            internalValueResult.envVariables = this._envVariables;
        }
        if (this._imageVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageVersion = this._imageVersion;
        }
        if (this._pypiPackages !== undefined) {
            hasAnyValues = true;
            internalValueResult.pypiPackages = this._pypiPackages;
        }
        if (this._pythonVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.pythonVersion = this._pythonVersion;
        }
        if (this._schedulerCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.schedulerCount = this._schedulerCount;
        }
        if (this._webServerPluginsMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.webServerPluginsMode = this._webServerPluginsMode;
        }
        if (this._cloudDataLineageIntegration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudDataLineageIntegration = this._cloudDataLineageIntegration?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._airflowConfigOverrides = undefined;
            this._envVariables = undefined;
            this._imageVersion = undefined;
            this._pypiPackages = undefined;
            this._pythonVersion = undefined;
            this._schedulerCount = undefined;
            this._webServerPluginsMode = undefined;
            this._cloudDataLineageIntegration.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._airflowConfigOverrides = value.airflowConfigOverrides;
            this._envVariables = value.envVariables;
            this._imageVersion = value.imageVersion;
            this._pypiPackages = value.pypiPackages;
            this._pythonVersion = value.pythonVersion;
            this._schedulerCount = value.schedulerCount;
            this._webServerPluginsMode = value.webServerPluginsMode;
            this._cloudDataLineageIntegration.internalValue = value.cloudDataLineageIntegration;
        }
    }
    get airflowConfigOverrides() {
        return this.getStringMapAttribute('airflow_config_overrides');
    }
    set airflowConfigOverrides(value) {
        this._airflowConfigOverrides = value;
    }
    resetAirflowConfigOverrides() {
        this._airflowConfigOverrides = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get airflowConfigOverridesInput() {
        return this._airflowConfigOverrides;
    }
    get envVariables() {
        return this.getStringMapAttribute('env_variables');
    }
    set envVariables(value) {
        this._envVariables = value;
    }
    resetEnvVariables() {
        this._envVariables = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get envVariablesInput() {
        return this._envVariables;
    }
    get imageVersion() {
        return this.getStringAttribute('image_version');
    }
    set imageVersion(value) {
        this._imageVersion = value;
    }
    resetImageVersion() {
        this._imageVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageVersionInput() {
        return this._imageVersion;
    }
    get pypiPackages() {
        return this.getStringMapAttribute('pypi_packages');
    }
    set pypiPackages(value) {
        this._pypiPackages = value;
    }
    resetPypiPackages() {
        this._pypiPackages = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pypiPackagesInput() {
        return this._pypiPackages;
    }
    get pythonVersion() {
        return this.getStringAttribute('python_version');
    }
    set pythonVersion(value) {
        this._pythonVersion = value;
    }
    resetPythonVersion() {
        this._pythonVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pythonVersionInput() {
        return this._pythonVersion;
    }
    get schedulerCount() {
        return this.getNumberAttribute('scheduler_count');
    }
    set schedulerCount(value) {
        this._schedulerCount = value;
    }
    resetSchedulerCount() {
        this._schedulerCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get schedulerCountInput() {
        return this._schedulerCount;
    }
    get webServerPluginsMode() {
        return this.getStringAttribute('web_server_plugins_mode');
    }
    set webServerPluginsMode(value) {
        this._webServerPluginsMode = value;
    }
    resetWebServerPluginsMode() {
        this._webServerPluginsMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get webServerPluginsModeInput() {
        return this._webServerPluginsMode;
    }
    get cloudDataLineageIntegration() {
        return this._cloudDataLineageIntegration;
    }
    putCloudDataLineageIntegration(value) {
        this._cloudDataLineageIntegration.internalValue = value;
    }
    resetCloudDataLineageIntegration() {
        this._cloudDataLineageIntegration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudDataLineageIntegrationInput() {
        return this._cloudDataLineageIntegration.internalValue;
    }
}
exports.ComposerEnvironmentConfigSoftwareConfigOutputReference = ComposerEnvironmentConfigSoftwareConfigOutputReference;
_r = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentConfigSoftwareConfigOutputReference[_r] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentConfigSoftwareConfigOutputReference", version: "14.13.1" };
function composerEnvironmentConfigWebServerConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        machine_type: cdktf.stringToTerraform(struct.machineType),
    };
}
exports.composerEnvironmentConfigWebServerConfigToTerraform = composerEnvironmentConfigWebServerConfigToTerraform;
function composerEnvironmentConfigWebServerConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        machine_type: {
            value: cdktf.stringToHclTerraform(struct.machineType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.composerEnvironmentConfigWebServerConfigToHclTerraform = composerEnvironmentConfigWebServerConfigToHclTerraform;
class ComposerEnvironmentConfigWebServerConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._machineType !== undefined) {
            hasAnyValues = true;
            internalValueResult.machineType = this._machineType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._machineType = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._machineType = value.machineType;
        }
    }
    get machineType() {
        return this.getStringAttribute('machine_type');
    }
    set machineType(value) {
        this._machineType = value;
    }
    // Temporarily expose input value. Use with caution.
    get machineTypeInput() {
        return this._machineType;
    }
}
exports.ComposerEnvironmentConfigWebServerConfigOutputReference = ComposerEnvironmentConfigWebServerConfigOutputReference;
_s = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentConfigWebServerConfigOutputReference[_s] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentConfigWebServerConfigOutputReference", version: "14.13.1" };
function composerEnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        description: cdktf.stringToTerraform(struct.description),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.composerEnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeToTerraform = composerEnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeToTerraform;
function composerEnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        description: {
            value: cdktf.stringToHclTerraform(struct.description),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.composerEnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeToHclTerraform = composerEnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeToHclTerraform;
class ComposerEnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._description !== undefined) {
            hasAnyValues = true;
            internalValueResult.description = this._description;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._description = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._description = value.description;
            this._value = value.value;
        }
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.ComposerEnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeOutputReference = ComposerEnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeOutputReference;
_t = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeOutputReference[_t] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeOutputReference", version: "14.13.1" };
class ComposerEnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComposerEnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComposerEnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeList = ComposerEnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeList;
_u = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeList[_u] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeList", version: "14.13.1" };
function composerEnvironmentConfigWebServerNetworkAccessControlToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allowed_ip_range: cdktf.listMapper(composerEnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeToTerraform, true)(struct.allowedIpRange),
    };
}
exports.composerEnvironmentConfigWebServerNetworkAccessControlToTerraform = composerEnvironmentConfigWebServerNetworkAccessControlToTerraform;
function composerEnvironmentConfigWebServerNetworkAccessControlToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        allowed_ip_range: {
            value: cdktf.listMapperHcl(composerEnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeToHclTerraform, true)(struct.allowedIpRange),
            isBlock: true,
            type: "set",
            storageClassType: "ComposerEnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.composerEnvironmentConfigWebServerNetworkAccessControlToHclTerraform = composerEnvironmentConfigWebServerNetworkAccessControlToHclTerraform;
class ComposerEnvironmentConfigWebServerNetworkAccessControlOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // allowed_ip_range - computed: false, optional: true, required: false
        this._allowedIpRange = new ComposerEnvironmentConfigWebServerNetworkAccessControlAllowedIpRangeList(this, "allowed_ip_range", true);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowedIpRange?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowedIpRange = this._allowedIpRange?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowedIpRange.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowedIpRange.internalValue = value.allowedIpRange;
        }
    }
    get allowedIpRange() {
        return this._allowedIpRange;
    }
    putAllowedIpRange(value) {
        this._allowedIpRange.internalValue = value;
    }
    resetAllowedIpRange() {
        this._allowedIpRange.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowedIpRangeInput() {
        return this._allowedIpRange.internalValue;
    }
}
exports.ComposerEnvironmentConfigWebServerNetworkAccessControlOutputReference = ComposerEnvironmentConfigWebServerNetworkAccessControlOutputReference;
_v = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentConfigWebServerNetworkAccessControlOutputReference[_v] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentConfigWebServerNetworkAccessControlOutputReference", version: "14.13.1" };
function composerEnvironmentConfigWorkloadsConfigDagProcessorToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        count: cdktf.numberToTerraform(struct.count),
        cpu: cdktf.numberToTerraform(struct.cpu),
        memory_gb: cdktf.numberToTerraform(struct.memoryGb),
        storage_gb: cdktf.numberToTerraform(struct.storageGb),
    };
}
exports.composerEnvironmentConfigWorkloadsConfigDagProcessorToTerraform = composerEnvironmentConfigWorkloadsConfigDagProcessorToTerraform;
function composerEnvironmentConfigWorkloadsConfigDagProcessorToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        count: {
            value: cdktf.numberToHclTerraform(struct.count),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        cpu: {
            value: cdktf.numberToHclTerraform(struct.cpu),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        memory_gb: {
            value: cdktf.numberToHclTerraform(struct.memoryGb),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        storage_gb: {
            value: cdktf.numberToHclTerraform(struct.storageGb),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.composerEnvironmentConfigWorkloadsConfigDagProcessorToHclTerraform = composerEnvironmentConfigWorkloadsConfigDagProcessorToHclTerraform;
class ComposerEnvironmentConfigWorkloadsConfigDagProcessorOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._count !== undefined) {
            hasAnyValues = true;
            internalValueResult.count = this._count;
        }
        if (this._cpu !== undefined) {
            hasAnyValues = true;
            internalValueResult.cpu = this._cpu;
        }
        if (this._memoryGb !== undefined) {
            hasAnyValues = true;
            internalValueResult.memoryGb = this._memoryGb;
        }
        if (this._storageGb !== undefined) {
            hasAnyValues = true;
            internalValueResult.storageGb = this._storageGb;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._count = undefined;
            this._cpu = undefined;
            this._memoryGb = undefined;
            this._storageGb = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._count = value.count;
            this._cpu = value.cpu;
            this._memoryGb = value.memoryGb;
            this._storageGb = value.storageGb;
        }
    }
    get count() {
        return this.getNumberAttribute('count');
    }
    set count(value) {
        this._count = value;
    }
    resetCount() {
        this._count = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get countInput() {
        return this._count;
    }
    get cpu() {
        return this.getNumberAttribute('cpu');
    }
    set cpu(value) {
        this._cpu = value;
    }
    resetCpu() {
        this._cpu = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cpuInput() {
        return this._cpu;
    }
    get memoryGb() {
        return this.getNumberAttribute('memory_gb');
    }
    set memoryGb(value) {
        this._memoryGb = value;
    }
    resetMemoryGb() {
        this._memoryGb = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get memoryGbInput() {
        return this._memoryGb;
    }
    get storageGb() {
        return this.getNumberAttribute('storage_gb');
    }
    set storageGb(value) {
        this._storageGb = value;
    }
    resetStorageGb() {
        this._storageGb = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get storageGbInput() {
        return this._storageGb;
    }
}
exports.ComposerEnvironmentConfigWorkloadsConfigDagProcessorOutputReference = ComposerEnvironmentConfigWorkloadsConfigDagProcessorOutputReference;
_w = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentConfigWorkloadsConfigDagProcessorOutputReference[_w] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentConfigWorkloadsConfigDagProcessorOutputReference", version: "14.13.1" };
function composerEnvironmentConfigWorkloadsConfigSchedulerToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        count: cdktf.numberToTerraform(struct.count),
        cpu: cdktf.numberToTerraform(struct.cpu),
        memory_gb: cdktf.numberToTerraform(struct.memoryGb),
        storage_gb: cdktf.numberToTerraform(struct.storageGb),
    };
}
exports.composerEnvironmentConfigWorkloadsConfigSchedulerToTerraform = composerEnvironmentConfigWorkloadsConfigSchedulerToTerraform;
function composerEnvironmentConfigWorkloadsConfigSchedulerToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        count: {
            value: cdktf.numberToHclTerraform(struct.count),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        cpu: {
            value: cdktf.numberToHclTerraform(struct.cpu),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        memory_gb: {
            value: cdktf.numberToHclTerraform(struct.memoryGb),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        storage_gb: {
            value: cdktf.numberToHclTerraform(struct.storageGb),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.composerEnvironmentConfigWorkloadsConfigSchedulerToHclTerraform = composerEnvironmentConfigWorkloadsConfigSchedulerToHclTerraform;
class ComposerEnvironmentConfigWorkloadsConfigSchedulerOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._count !== undefined) {
            hasAnyValues = true;
            internalValueResult.count = this._count;
        }
        if (this._cpu !== undefined) {
            hasAnyValues = true;
            internalValueResult.cpu = this._cpu;
        }
        if (this._memoryGb !== undefined) {
            hasAnyValues = true;
            internalValueResult.memoryGb = this._memoryGb;
        }
        if (this._storageGb !== undefined) {
            hasAnyValues = true;
            internalValueResult.storageGb = this._storageGb;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._count = undefined;
            this._cpu = undefined;
            this._memoryGb = undefined;
            this._storageGb = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._count = value.count;
            this._cpu = value.cpu;
            this._memoryGb = value.memoryGb;
            this._storageGb = value.storageGb;
        }
    }
    get count() {
        return this.getNumberAttribute('count');
    }
    set count(value) {
        this._count = value;
    }
    resetCount() {
        this._count = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get countInput() {
        return this._count;
    }
    get cpu() {
        return this.getNumberAttribute('cpu');
    }
    set cpu(value) {
        this._cpu = value;
    }
    resetCpu() {
        this._cpu = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cpuInput() {
        return this._cpu;
    }
    get memoryGb() {
        return this.getNumberAttribute('memory_gb');
    }
    set memoryGb(value) {
        this._memoryGb = value;
    }
    resetMemoryGb() {
        this._memoryGb = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get memoryGbInput() {
        return this._memoryGb;
    }
    get storageGb() {
        return this.getNumberAttribute('storage_gb');
    }
    set storageGb(value) {
        this._storageGb = value;
    }
    resetStorageGb() {
        this._storageGb = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get storageGbInput() {
        return this._storageGb;
    }
}
exports.ComposerEnvironmentConfigWorkloadsConfigSchedulerOutputReference = ComposerEnvironmentConfigWorkloadsConfigSchedulerOutputReference;
_x = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentConfigWorkloadsConfigSchedulerOutputReference[_x] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentConfigWorkloadsConfigSchedulerOutputReference", version: "14.13.1" };
function composerEnvironmentConfigWorkloadsConfigTriggererToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        count: cdktf.numberToTerraform(struct.count),
        cpu: cdktf.numberToTerraform(struct.cpu),
        memory_gb: cdktf.numberToTerraform(struct.memoryGb),
    };
}
exports.composerEnvironmentConfigWorkloadsConfigTriggererToTerraform = composerEnvironmentConfigWorkloadsConfigTriggererToTerraform;
function composerEnvironmentConfigWorkloadsConfigTriggererToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        count: {
            value: cdktf.numberToHclTerraform(struct.count),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        cpu: {
            value: cdktf.numberToHclTerraform(struct.cpu),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        memory_gb: {
            value: cdktf.numberToHclTerraform(struct.memoryGb),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.composerEnvironmentConfigWorkloadsConfigTriggererToHclTerraform = composerEnvironmentConfigWorkloadsConfigTriggererToHclTerraform;
class ComposerEnvironmentConfigWorkloadsConfigTriggererOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._count !== undefined) {
            hasAnyValues = true;
            internalValueResult.count = this._count;
        }
        if (this._cpu !== undefined) {
            hasAnyValues = true;
            internalValueResult.cpu = this._cpu;
        }
        if (this._memoryGb !== undefined) {
            hasAnyValues = true;
            internalValueResult.memoryGb = this._memoryGb;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._count = undefined;
            this._cpu = undefined;
            this._memoryGb = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._count = value.count;
            this._cpu = value.cpu;
            this._memoryGb = value.memoryGb;
        }
    }
    get count() {
        return this.getNumberAttribute('count');
    }
    set count(value) {
        this._count = value;
    }
    // Temporarily expose input value. Use with caution.
    get countInput() {
        return this._count;
    }
    get cpu() {
        return this.getNumberAttribute('cpu');
    }
    set cpu(value) {
        this._cpu = value;
    }
    // Temporarily expose input value. Use with caution.
    get cpuInput() {
        return this._cpu;
    }
    get memoryGb() {
        return this.getNumberAttribute('memory_gb');
    }
    set memoryGb(value) {
        this._memoryGb = value;
    }
    // Temporarily expose input value. Use with caution.
    get memoryGbInput() {
        return this._memoryGb;
    }
}
exports.ComposerEnvironmentConfigWorkloadsConfigTriggererOutputReference = ComposerEnvironmentConfigWorkloadsConfigTriggererOutputReference;
_y = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentConfigWorkloadsConfigTriggererOutputReference[_y] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentConfigWorkloadsConfigTriggererOutputReference", version: "14.13.1" };
function composerEnvironmentConfigWorkloadsConfigWebServerToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cpu: cdktf.numberToTerraform(struct.cpu),
        memory_gb: cdktf.numberToTerraform(struct.memoryGb),
        storage_gb: cdktf.numberToTerraform(struct.storageGb),
    };
}
exports.composerEnvironmentConfigWorkloadsConfigWebServerToTerraform = composerEnvironmentConfigWorkloadsConfigWebServerToTerraform;
function composerEnvironmentConfigWorkloadsConfigWebServerToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cpu: {
            value: cdktf.numberToHclTerraform(struct.cpu),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        memory_gb: {
            value: cdktf.numberToHclTerraform(struct.memoryGb),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        storage_gb: {
            value: cdktf.numberToHclTerraform(struct.storageGb),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.composerEnvironmentConfigWorkloadsConfigWebServerToHclTerraform = composerEnvironmentConfigWorkloadsConfigWebServerToHclTerraform;
class ComposerEnvironmentConfigWorkloadsConfigWebServerOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cpu !== undefined) {
            hasAnyValues = true;
            internalValueResult.cpu = this._cpu;
        }
        if (this._memoryGb !== undefined) {
            hasAnyValues = true;
            internalValueResult.memoryGb = this._memoryGb;
        }
        if (this._storageGb !== undefined) {
            hasAnyValues = true;
            internalValueResult.storageGb = this._storageGb;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cpu = undefined;
            this._memoryGb = undefined;
            this._storageGb = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cpu = value.cpu;
            this._memoryGb = value.memoryGb;
            this._storageGb = value.storageGb;
        }
    }
    get cpu() {
        return this.getNumberAttribute('cpu');
    }
    set cpu(value) {
        this._cpu = value;
    }
    resetCpu() {
        this._cpu = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cpuInput() {
        return this._cpu;
    }
    get memoryGb() {
        return this.getNumberAttribute('memory_gb');
    }
    set memoryGb(value) {
        this._memoryGb = value;
    }
    resetMemoryGb() {
        this._memoryGb = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get memoryGbInput() {
        return this._memoryGb;
    }
    get storageGb() {
        return this.getNumberAttribute('storage_gb');
    }
    set storageGb(value) {
        this._storageGb = value;
    }
    resetStorageGb() {
        this._storageGb = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get storageGbInput() {
        return this._storageGb;
    }
}
exports.ComposerEnvironmentConfigWorkloadsConfigWebServerOutputReference = ComposerEnvironmentConfigWorkloadsConfigWebServerOutputReference;
_z = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentConfigWorkloadsConfigWebServerOutputReference[_z] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentConfigWorkloadsConfigWebServerOutputReference", version: "14.13.1" };
function composerEnvironmentConfigWorkloadsConfigWorkerToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cpu: cdktf.numberToTerraform(struct.cpu),
        max_count: cdktf.numberToTerraform(struct.maxCount),
        memory_gb: cdktf.numberToTerraform(struct.memoryGb),
        min_count: cdktf.numberToTerraform(struct.minCount),
        storage_gb: cdktf.numberToTerraform(struct.storageGb),
    };
}
exports.composerEnvironmentConfigWorkloadsConfigWorkerToTerraform = composerEnvironmentConfigWorkloadsConfigWorkerToTerraform;
function composerEnvironmentConfigWorkloadsConfigWorkerToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cpu: {
            value: cdktf.numberToHclTerraform(struct.cpu),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        max_count: {
            value: cdktf.numberToHclTerraform(struct.maxCount),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        memory_gb: {
            value: cdktf.numberToHclTerraform(struct.memoryGb),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        min_count: {
            value: cdktf.numberToHclTerraform(struct.minCount),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        storage_gb: {
            value: cdktf.numberToHclTerraform(struct.storageGb),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.composerEnvironmentConfigWorkloadsConfigWorkerToHclTerraform = composerEnvironmentConfigWorkloadsConfigWorkerToHclTerraform;
class ComposerEnvironmentConfigWorkloadsConfigWorkerOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cpu !== undefined) {
            hasAnyValues = true;
            internalValueResult.cpu = this._cpu;
        }
        if (this._maxCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxCount = this._maxCount;
        }
        if (this._memoryGb !== undefined) {
            hasAnyValues = true;
            internalValueResult.memoryGb = this._memoryGb;
        }
        if (this._minCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.minCount = this._minCount;
        }
        if (this._storageGb !== undefined) {
            hasAnyValues = true;
            internalValueResult.storageGb = this._storageGb;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cpu = undefined;
            this._maxCount = undefined;
            this._memoryGb = undefined;
            this._minCount = undefined;
            this._storageGb = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cpu = value.cpu;
            this._maxCount = value.maxCount;
            this._memoryGb = value.memoryGb;
            this._minCount = value.minCount;
            this._storageGb = value.storageGb;
        }
    }
    get cpu() {
        return this.getNumberAttribute('cpu');
    }
    set cpu(value) {
        this._cpu = value;
    }
    resetCpu() {
        this._cpu = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cpuInput() {
        return this._cpu;
    }
    get maxCount() {
        return this.getNumberAttribute('max_count');
    }
    set maxCount(value) {
        this._maxCount = value;
    }
    resetMaxCount() {
        this._maxCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxCountInput() {
        return this._maxCount;
    }
    get memoryGb() {
        return this.getNumberAttribute('memory_gb');
    }
    set memoryGb(value) {
        this._memoryGb = value;
    }
    resetMemoryGb() {
        this._memoryGb = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get memoryGbInput() {
        return this._memoryGb;
    }
    get minCount() {
        return this.getNumberAttribute('min_count');
    }
    set minCount(value) {
        this._minCount = value;
    }
    resetMinCount() {
        this._minCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minCountInput() {
        return this._minCount;
    }
    get storageGb() {
        return this.getNumberAttribute('storage_gb');
    }
    set storageGb(value) {
        this._storageGb = value;
    }
    resetStorageGb() {
        this._storageGb = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get storageGbInput() {
        return this._storageGb;
    }
}
exports.ComposerEnvironmentConfigWorkloadsConfigWorkerOutputReference = ComposerEnvironmentConfigWorkloadsConfigWorkerOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentConfigWorkloadsConfigWorkerOutputReference[_0] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentConfigWorkloadsConfigWorkerOutputReference", version: "14.13.1" };
function composerEnvironmentConfigWorkloadsConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        dag_processor: composerEnvironmentConfigWorkloadsConfigDagProcessorToTerraform(struct.dagProcessor),
        scheduler: composerEnvironmentConfigWorkloadsConfigSchedulerToTerraform(struct.scheduler),
        triggerer: composerEnvironmentConfigWorkloadsConfigTriggererToTerraform(struct.triggerer),
        web_server: composerEnvironmentConfigWorkloadsConfigWebServerToTerraform(struct.webServer),
        worker: composerEnvironmentConfigWorkloadsConfigWorkerToTerraform(struct.worker),
    };
}
exports.composerEnvironmentConfigWorkloadsConfigToTerraform = composerEnvironmentConfigWorkloadsConfigToTerraform;
function composerEnvironmentConfigWorkloadsConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        dag_processor: {
            value: composerEnvironmentConfigWorkloadsConfigDagProcessorToHclTerraform(struct.dagProcessor),
            isBlock: true,
            type: "list",
            storageClassType: "ComposerEnvironmentConfigWorkloadsConfigDagProcessorList",
        },
        scheduler: {
            value: composerEnvironmentConfigWorkloadsConfigSchedulerToHclTerraform(struct.scheduler),
            isBlock: true,
            type: "list",
            storageClassType: "ComposerEnvironmentConfigWorkloadsConfigSchedulerList",
        },
        triggerer: {
            value: composerEnvironmentConfigWorkloadsConfigTriggererToHclTerraform(struct.triggerer),
            isBlock: true,
            type: "list",
            storageClassType: "ComposerEnvironmentConfigWorkloadsConfigTriggererList",
        },
        web_server: {
            value: composerEnvironmentConfigWorkloadsConfigWebServerToHclTerraform(struct.webServer),
            isBlock: true,
            type: "list",
            storageClassType: "ComposerEnvironmentConfigWorkloadsConfigWebServerList",
        },
        worker: {
            value: composerEnvironmentConfigWorkloadsConfigWorkerToHclTerraform(struct.worker),
            isBlock: true,
            type: "list",
            storageClassType: "ComposerEnvironmentConfigWorkloadsConfigWorkerList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.composerEnvironmentConfigWorkloadsConfigToHclTerraform = composerEnvironmentConfigWorkloadsConfigToHclTerraform;
class ComposerEnvironmentConfigWorkloadsConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // dag_processor - computed: false, optional: true, required: false
        this._dagProcessor = new ComposerEnvironmentConfigWorkloadsConfigDagProcessorOutputReference(this, "dag_processor");
        // scheduler - computed: false, optional: true, required: false
        this._scheduler = new ComposerEnvironmentConfigWorkloadsConfigSchedulerOutputReference(this, "scheduler");
        // triggerer - computed: false, optional: true, required: false
        this._triggerer = new ComposerEnvironmentConfigWorkloadsConfigTriggererOutputReference(this, "triggerer");
        // web_server - computed: false, optional: true, required: false
        this._webServer = new ComposerEnvironmentConfigWorkloadsConfigWebServerOutputReference(this, "web_server");
        // worker - computed: false, optional: true, required: false
        this._worker = new ComposerEnvironmentConfigWorkloadsConfigWorkerOutputReference(this, "worker");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dagProcessor?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dagProcessor = this._dagProcessor?.internalValue;
        }
        if (this._scheduler?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.scheduler = this._scheduler?.internalValue;
        }
        if (this._triggerer?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.triggerer = this._triggerer?.internalValue;
        }
        if (this._webServer?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.webServer = this._webServer?.internalValue;
        }
        if (this._worker?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.worker = this._worker?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._dagProcessor.internalValue = undefined;
            this._scheduler.internalValue = undefined;
            this._triggerer.internalValue = undefined;
            this._webServer.internalValue = undefined;
            this._worker.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._dagProcessor.internalValue = value.dagProcessor;
            this._scheduler.internalValue = value.scheduler;
            this._triggerer.internalValue = value.triggerer;
            this._webServer.internalValue = value.webServer;
            this._worker.internalValue = value.worker;
        }
    }
    get dagProcessor() {
        return this._dagProcessor;
    }
    putDagProcessor(value) {
        this._dagProcessor.internalValue = value;
    }
    resetDagProcessor() {
        this._dagProcessor.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dagProcessorInput() {
        return this._dagProcessor.internalValue;
    }
    get scheduler() {
        return this._scheduler;
    }
    putScheduler(value) {
        this._scheduler.internalValue = value;
    }
    resetScheduler() {
        this._scheduler.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get schedulerInput() {
        return this._scheduler.internalValue;
    }
    get triggerer() {
        return this._triggerer;
    }
    putTriggerer(value) {
        this._triggerer.internalValue = value;
    }
    resetTriggerer() {
        this._triggerer.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get triggererInput() {
        return this._triggerer.internalValue;
    }
    get webServer() {
        return this._webServer;
    }
    putWebServer(value) {
        this._webServer.internalValue = value;
    }
    resetWebServer() {
        this._webServer.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get webServerInput() {
        return this._webServer.internalValue;
    }
    get worker() {
        return this._worker;
    }
    putWorker(value) {
        this._worker.internalValue = value;
    }
    resetWorker() {
        this._worker.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get workerInput() {
        return this._worker.internalValue;
    }
}
exports.ComposerEnvironmentConfigWorkloadsConfigOutputReference = ComposerEnvironmentConfigWorkloadsConfigOutputReference;
_1 = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentConfigWorkloadsConfigOutputReference[_1] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentConfigWorkloadsConfigOutputReference", version: "14.13.1" };
function composerEnvironmentConfigAToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enable_private_builds_only: cdktf.booleanToTerraform(struct.enablePrivateBuildsOnly),
        enable_private_environment: cdktf.booleanToTerraform(struct.enablePrivateEnvironment),
        environment_size: cdktf.stringToTerraform(struct.environmentSize),
        node_count: cdktf.numberToTerraform(struct.nodeCount),
        resilience_mode: cdktf.stringToTerraform(struct.resilienceMode),
        data_retention_config: composerEnvironmentConfigDataRetentionConfigToTerraform(struct.dataRetentionConfig),
        database_config: composerEnvironmentConfigDatabaseConfigToTerraform(struct.databaseConfig),
        encryption_config: composerEnvironmentConfigEncryptionConfigToTerraform(struct.encryptionConfig),
        maintenance_window: composerEnvironmentConfigMaintenanceWindowToTerraform(struct.maintenanceWindow),
        master_authorized_networks_config: composerEnvironmentConfigMasterAuthorizedNetworksConfigToTerraform(struct.masterAuthorizedNetworksConfig),
        node_config: composerEnvironmentConfigNodeConfigToTerraform(struct.nodeConfig),
        private_environment_config: composerEnvironmentConfigPrivateEnvironmentConfigToTerraform(struct.privateEnvironmentConfig),
        recovery_config: composerEnvironmentConfigRecoveryConfigToTerraform(struct.recoveryConfig),
        software_config: composerEnvironmentConfigSoftwareConfigToTerraform(struct.softwareConfig),
        web_server_config: composerEnvironmentConfigWebServerConfigToTerraform(struct.webServerConfig),
        web_server_network_access_control: composerEnvironmentConfigWebServerNetworkAccessControlToTerraform(struct.webServerNetworkAccessControl),
        workloads_config: composerEnvironmentConfigWorkloadsConfigToTerraform(struct.workloadsConfig),
    };
}
exports.composerEnvironmentConfigAToTerraform = composerEnvironmentConfigAToTerraform;
function composerEnvironmentConfigAToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enable_private_builds_only: {
            value: cdktf.booleanToHclTerraform(struct.enablePrivateBuildsOnly),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        enable_private_environment: {
            value: cdktf.booleanToHclTerraform(struct.enablePrivateEnvironment),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        environment_size: {
            value: cdktf.stringToHclTerraform(struct.environmentSize),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        node_count: {
            value: cdktf.numberToHclTerraform(struct.nodeCount),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        resilience_mode: {
            value: cdktf.stringToHclTerraform(struct.resilienceMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        data_retention_config: {
            value: composerEnvironmentConfigDataRetentionConfigToHclTerraform(struct.dataRetentionConfig),
            isBlock: true,
            type: "list",
            storageClassType: "ComposerEnvironmentConfigDataRetentionConfigList",
        },
        database_config: {
            value: composerEnvironmentConfigDatabaseConfigToHclTerraform(struct.databaseConfig),
            isBlock: true,
            type: "list",
            storageClassType: "ComposerEnvironmentConfigDatabaseConfigList",
        },
        encryption_config: {
            value: composerEnvironmentConfigEncryptionConfigToHclTerraform(struct.encryptionConfig),
            isBlock: true,
            type: "list",
            storageClassType: "ComposerEnvironmentConfigEncryptionConfigList",
        },
        maintenance_window: {
            value: composerEnvironmentConfigMaintenanceWindowToHclTerraform(struct.maintenanceWindow),
            isBlock: true,
            type: "list",
            storageClassType: "ComposerEnvironmentConfigMaintenanceWindowList",
        },
        master_authorized_networks_config: {
            value: composerEnvironmentConfigMasterAuthorizedNetworksConfigToHclTerraform(struct.masterAuthorizedNetworksConfig),
            isBlock: true,
            type: "list",
            storageClassType: "ComposerEnvironmentConfigMasterAuthorizedNetworksConfigList",
        },
        node_config: {
            value: composerEnvironmentConfigNodeConfigToHclTerraform(struct.nodeConfig),
            isBlock: true,
            type: "list",
            storageClassType: "ComposerEnvironmentConfigNodeConfigList",
        },
        private_environment_config: {
            value: composerEnvironmentConfigPrivateEnvironmentConfigToHclTerraform(struct.privateEnvironmentConfig),
            isBlock: true,
            type: "list",
            storageClassType: "ComposerEnvironmentConfigPrivateEnvironmentConfigList",
        },
        recovery_config: {
            value: composerEnvironmentConfigRecoveryConfigToHclTerraform(struct.recoveryConfig),
            isBlock: true,
            type: "list",
            storageClassType: "ComposerEnvironmentConfigRecoveryConfigList",
        },
        software_config: {
            value: composerEnvironmentConfigSoftwareConfigToHclTerraform(struct.softwareConfig),
            isBlock: true,
            type: "list",
            storageClassType: "ComposerEnvironmentConfigSoftwareConfigList",
        },
        web_server_config: {
            value: composerEnvironmentConfigWebServerConfigToHclTerraform(struct.webServerConfig),
            isBlock: true,
            type: "list",
            storageClassType: "ComposerEnvironmentConfigWebServerConfigList",
        },
        web_server_network_access_control: {
            value: composerEnvironmentConfigWebServerNetworkAccessControlToHclTerraform(struct.webServerNetworkAccessControl),
            isBlock: true,
            type: "list",
            storageClassType: "ComposerEnvironmentConfigWebServerNetworkAccessControlList",
        },
        workloads_config: {
            value: composerEnvironmentConfigWorkloadsConfigToHclTerraform(struct.workloadsConfig),
            isBlock: true,
            type: "list",
            storageClassType: "ComposerEnvironmentConfigWorkloadsConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.composerEnvironmentConfigAToHclTerraform = composerEnvironmentConfigAToHclTerraform;
class ComposerEnvironmentConfigAOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // data_retention_config - computed: false, optional: true, required: false
        this._dataRetentionConfig = new ComposerEnvironmentConfigDataRetentionConfigOutputReference(this, "data_retention_config");
        // database_config - computed: false, optional: true, required: false
        this._databaseConfig = new ComposerEnvironmentConfigDatabaseConfigOutputReference(this, "database_config");
        // encryption_config - computed: false, optional: true, required: false
        this._encryptionConfig = new ComposerEnvironmentConfigEncryptionConfigOutputReference(this, "encryption_config");
        // maintenance_window - computed: false, optional: true, required: false
        this._maintenanceWindow = new ComposerEnvironmentConfigMaintenanceWindowOutputReference(this, "maintenance_window");
        // master_authorized_networks_config - computed: false, optional: true, required: false
        this._masterAuthorizedNetworksConfig = new ComposerEnvironmentConfigMasterAuthorizedNetworksConfigOutputReference(this, "master_authorized_networks_config");
        // node_config - computed: false, optional: true, required: false
        this._nodeConfig = new ComposerEnvironmentConfigNodeConfigOutputReference(this, "node_config");
        // private_environment_config - computed: false, optional: true, required: false
        this._privateEnvironmentConfig = new ComposerEnvironmentConfigPrivateEnvironmentConfigOutputReference(this, "private_environment_config");
        // recovery_config - computed: false, optional: true, required: false
        this._recoveryConfig = new ComposerEnvironmentConfigRecoveryConfigOutputReference(this, "recovery_config");
        // software_config - computed: false, optional: true, required: false
        this._softwareConfig = new ComposerEnvironmentConfigSoftwareConfigOutputReference(this, "software_config");
        // web_server_config - computed: false, optional: true, required: false
        this._webServerConfig = new ComposerEnvironmentConfigWebServerConfigOutputReference(this, "web_server_config");
        // web_server_network_access_control - computed: false, optional: true, required: false
        this._webServerNetworkAccessControl = new ComposerEnvironmentConfigWebServerNetworkAccessControlOutputReference(this, "web_server_network_access_control");
        // workloads_config - computed: false, optional: true, required: false
        this._workloadsConfig = new ComposerEnvironmentConfigWorkloadsConfigOutputReference(this, "workloads_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enablePrivateBuildsOnly !== undefined) {
            hasAnyValues = true;
            internalValueResult.enablePrivateBuildsOnly = this._enablePrivateBuildsOnly;
        }
        if (this._enablePrivateEnvironment !== undefined) {
            hasAnyValues = true;
            internalValueResult.enablePrivateEnvironment = this._enablePrivateEnvironment;
        }
        if (this._environmentSize !== undefined) {
            hasAnyValues = true;
            internalValueResult.environmentSize = this._environmentSize;
        }
        if (this._nodeCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.nodeCount = this._nodeCount;
        }
        if (this._resilienceMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.resilienceMode = this._resilienceMode;
        }
        if (this._dataRetentionConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataRetentionConfig = this._dataRetentionConfig?.internalValue;
        }
        if (this._databaseConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.databaseConfig = this._databaseConfig?.internalValue;
        }
        if (this._encryptionConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.encryptionConfig = this._encryptionConfig?.internalValue;
        }
        if (this._maintenanceWindow?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.maintenanceWindow = this._maintenanceWindow?.internalValue;
        }
        if (this._masterAuthorizedNetworksConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.masterAuthorizedNetworksConfig = this._masterAuthorizedNetworksConfig?.internalValue;
        }
        if (this._nodeConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.nodeConfig = this._nodeConfig?.internalValue;
        }
        if (this._privateEnvironmentConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.privateEnvironmentConfig = this._privateEnvironmentConfig?.internalValue;
        }
        if (this._recoveryConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.recoveryConfig = this._recoveryConfig?.internalValue;
        }
        if (this._softwareConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.softwareConfig = this._softwareConfig?.internalValue;
        }
        if (this._webServerConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.webServerConfig = this._webServerConfig?.internalValue;
        }
        if (this._webServerNetworkAccessControl?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.webServerNetworkAccessControl = this._webServerNetworkAccessControl?.internalValue;
        }
        if (this._workloadsConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.workloadsConfig = this._workloadsConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enablePrivateBuildsOnly = undefined;
            this._enablePrivateEnvironment = undefined;
            this._environmentSize = undefined;
            this._nodeCount = undefined;
            this._resilienceMode = undefined;
            this._dataRetentionConfig.internalValue = undefined;
            this._databaseConfig.internalValue = undefined;
            this._encryptionConfig.internalValue = undefined;
            this._maintenanceWindow.internalValue = undefined;
            this._masterAuthorizedNetworksConfig.internalValue = undefined;
            this._nodeConfig.internalValue = undefined;
            this._privateEnvironmentConfig.internalValue = undefined;
            this._recoveryConfig.internalValue = undefined;
            this._softwareConfig.internalValue = undefined;
            this._webServerConfig.internalValue = undefined;
            this._webServerNetworkAccessControl.internalValue = undefined;
            this._workloadsConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enablePrivateBuildsOnly = value.enablePrivateBuildsOnly;
            this._enablePrivateEnvironment = value.enablePrivateEnvironment;
            this._environmentSize = value.environmentSize;
            this._nodeCount = value.nodeCount;
            this._resilienceMode = value.resilienceMode;
            this._dataRetentionConfig.internalValue = value.dataRetentionConfig;
            this._databaseConfig.internalValue = value.databaseConfig;
            this._encryptionConfig.internalValue = value.encryptionConfig;
            this._maintenanceWindow.internalValue = value.maintenanceWindow;
            this._masterAuthorizedNetworksConfig.internalValue = value.masterAuthorizedNetworksConfig;
            this._nodeConfig.internalValue = value.nodeConfig;
            this._privateEnvironmentConfig.internalValue = value.privateEnvironmentConfig;
            this._recoveryConfig.internalValue = value.recoveryConfig;
            this._softwareConfig.internalValue = value.softwareConfig;
            this._webServerConfig.internalValue = value.webServerConfig;
            this._webServerNetworkAccessControl.internalValue = value.webServerNetworkAccessControl;
            this._workloadsConfig.internalValue = value.workloadsConfig;
        }
    }
    // airflow_uri - computed: true, optional: false, required: false
    get airflowUri() {
        return this.getStringAttribute('airflow_uri');
    }
    // dag_gcs_prefix - computed: true, optional: false, required: false
    get dagGcsPrefix() {
        return this.getStringAttribute('dag_gcs_prefix');
    }
    get enablePrivateBuildsOnly() {
        return this.getBooleanAttribute('enable_private_builds_only');
    }
    set enablePrivateBuildsOnly(value) {
        this._enablePrivateBuildsOnly = value;
    }
    resetEnablePrivateBuildsOnly() {
        this._enablePrivateBuildsOnly = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enablePrivateBuildsOnlyInput() {
        return this._enablePrivateBuildsOnly;
    }
    get enablePrivateEnvironment() {
        return this.getBooleanAttribute('enable_private_environment');
    }
    set enablePrivateEnvironment(value) {
        this._enablePrivateEnvironment = value;
    }
    resetEnablePrivateEnvironment() {
        this._enablePrivateEnvironment = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enablePrivateEnvironmentInput() {
        return this._enablePrivateEnvironment;
    }
    get environmentSize() {
        return this.getStringAttribute('environment_size');
    }
    set environmentSize(value) {
        this._environmentSize = value;
    }
    resetEnvironmentSize() {
        this._environmentSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get environmentSizeInput() {
        return this._environmentSize;
    }
    // gke_cluster - computed: true, optional: false, required: false
    get gkeCluster() {
        return this.getStringAttribute('gke_cluster');
    }
    get nodeCount() {
        return this.getNumberAttribute('node_count');
    }
    set nodeCount(value) {
        this._nodeCount = value;
    }
    resetNodeCount() {
        this._nodeCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nodeCountInput() {
        return this._nodeCount;
    }
    get resilienceMode() {
        return this.getStringAttribute('resilience_mode');
    }
    set resilienceMode(value) {
        this._resilienceMode = value;
    }
    resetResilienceMode() {
        this._resilienceMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resilienceModeInput() {
        return this._resilienceMode;
    }
    get dataRetentionConfig() {
        return this._dataRetentionConfig;
    }
    putDataRetentionConfig(value) {
        this._dataRetentionConfig.internalValue = value;
    }
    resetDataRetentionConfig() {
        this._dataRetentionConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataRetentionConfigInput() {
        return this._dataRetentionConfig.internalValue;
    }
    get databaseConfig() {
        return this._databaseConfig;
    }
    putDatabaseConfig(value) {
        this._databaseConfig.internalValue = value;
    }
    resetDatabaseConfig() {
        this._databaseConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get databaseConfigInput() {
        return this._databaseConfig.internalValue;
    }
    get encryptionConfig() {
        return this._encryptionConfig;
    }
    putEncryptionConfig(value) {
        this._encryptionConfig.internalValue = value;
    }
    resetEncryptionConfig() {
        this._encryptionConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encryptionConfigInput() {
        return this._encryptionConfig.internalValue;
    }
    get maintenanceWindow() {
        return this._maintenanceWindow;
    }
    putMaintenanceWindow(value) {
        this._maintenanceWindow.internalValue = value;
    }
    resetMaintenanceWindow() {
        this._maintenanceWindow.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maintenanceWindowInput() {
        return this._maintenanceWindow.internalValue;
    }
    get masterAuthorizedNetworksConfig() {
        return this._masterAuthorizedNetworksConfig;
    }
    putMasterAuthorizedNetworksConfig(value) {
        this._masterAuthorizedNetworksConfig.internalValue = value;
    }
    resetMasterAuthorizedNetworksConfig() {
        this._masterAuthorizedNetworksConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get masterAuthorizedNetworksConfigInput() {
        return this._masterAuthorizedNetworksConfig.internalValue;
    }
    get nodeConfig() {
        return this._nodeConfig;
    }
    putNodeConfig(value) {
        this._nodeConfig.internalValue = value;
    }
    resetNodeConfig() {
        this._nodeConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nodeConfigInput() {
        return this._nodeConfig.internalValue;
    }
    get privateEnvironmentConfig() {
        return this._privateEnvironmentConfig;
    }
    putPrivateEnvironmentConfig(value) {
        this._privateEnvironmentConfig.internalValue = value;
    }
    resetPrivateEnvironmentConfig() {
        this._privateEnvironmentConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get privateEnvironmentConfigInput() {
        return this._privateEnvironmentConfig.internalValue;
    }
    get recoveryConfig() {
        return this._recoveryConfig;
    }
    putRecoveryConfig(value) {
        this._recoveryConfig.internalValue = value;
    }
    resetRecoveryConfig() {
        this._recoveryConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get recoveryConfigInput() {
        return this._recoveryConfig.internalValue;
    }
    get softwareConfig() {
        return this._softwareConfig;
    }
    putSoftwareConfig(value) {
        this._softwareConfig.internalValue = value;
    }
    resetSoftwareConfig() {
        this._softwareConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get softwareConfigInput() {
        return this._softwareConfig.internalValue;
    }
    get webServerConfig() {
        return this._webServerConfig;
    }
    putWebServerConfig(value) {
        this._webServerConfig.internalValue = value;
    }
    resetWebServerConfig() {
        this._webServerConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get webServerConfigInput() {
        return this._webServerConfig.internalValue;
    }
    get webServerNetworkAccessControl() {
        return this._webServerNetworkAccessControl;
    }
    putWebServerNetworkAccessControl(value) {
        this._webServerNetworkAccessControl.internalValue = value;
    }
    resetWebServerNetworkAccessControl() {
        this._webServerNetworkAccessControl.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get webServerNetworkAccessControlInput() {
        return this._webServerNetworkAccessControl.internalValue;
    }
    get workloadsConfig() {
        return this._workloadsConfig;
    }
    putWorkloadsConfig(value) {
        this._workloadsConfig.internalValue = value;
    }
    resetWorkloadsConfig() {
        this._workloadsConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get workloadsConfigInput() {
        return this._workloadsConfig.internalValue;
    }
}
exports.ComposerEnvironmentConfigAOutputReference = ComposerEnvironmentConfigAOutputReference;
_2 = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentConfigAOutputReference[_2] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentConfigAOutputReference", version: "14.13.1" };
function composerEnvironmentStorageConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bucket: cdktf.stringToTerraform(struct.bucket),
    };
}
exports.composerEnvironmentStorageConfigToTerraform = composerEnvironmentStorageConfigToTerraform;
function composerEnvironmentStorageConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        bucket: {
            value: cdktf.stringToHclTerraform(struct.bucket),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.composerEnvironmentStorageConfigToHclTerraform = composerEnvironmentStorageConfigToHclTerraform;
class ComposerEnvironmentStorageConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bucket !== undefined) {
            hasAnyValues = true;
            internalValueResult.bucket = this._bucket;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bucket = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bucket = value.bucket;
        }
    }
    get bucket() {
        return this.getStringAttribute('bucket');
    }
    set bucket(value) {
        this._bucket = value;
    }
    // Temporarily expose input value. Use with caution.
    get bucketInput() {
        return this._bucket;
    }
}
exports.ComposerEnvironmentStorageConfigOutputReference = ComposerEnvironmentStorageConfigOutputReference;
_3 = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentStorageConfigOutputReference[_3] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentStorageConfigOutputReference", version: "14.13.1" };
function composerEnvironmentTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.composerEnvironmentTimeoutsToTerraform = composerEnvironmentTimeoutsToTerraform;
function composerEnvironmentTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.composerEnvironmentTimeoutsToHclTerraform = composerEnvironmentTimeoutsToHclTerraform;
class ComposerEnvironmentTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.ComposerEnvironmentTimeoutsOutputReference = ComposerEnvironmentTimeoutsOutputReference;
_4 = JSII_RTTI_SYMBOL_1;
ComposerEnvironmentTimeoutsOutputReference[_4] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironmentTimeoutsOutputReference", version: "14.13.1" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/composer_environment google_composer_environment}
*/
class ComposerEnvironment extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a ComposerEnvironment resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the ComposerEnvironment to import
    * @param importFromId The id of the existing ComposerEnvironment that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/composer_environment#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the ComposerEnvironment to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_composer_environment", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/composer_environment google_composer_environment} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ComposerEnvironmentConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_composer_environment',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // ==========
        // ATTRIBUTES
        // ==========
        // effective_labels - computed: true, optional: false, required: false
        this._effectiveLabels = new cdktf.StringMap(this, "effective_labels");
        // terraform_labels - computed: true, optional: false, required: false
        this._terraformLabels = new cdktf.StringMap(this, "terraform_labels");
        // config - computed: false, optional: true, required: false
        this._config = new ComposerEnvironmentConfigAOutputReference(this, "config");
        // storage_config - computed: false, optional: true, required: false
        this._storageConfig = new ComposerEnvironmentStorageConfigOutputReference(this, "storage_config");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new ComposerEnvironmentTimeoutsOutputReference(this, "timeouts");
        this._id = config.id;
        this._labels = config.labels;
        this._name = config.name;
        this._project = config.project;
        this._region = config.region;
        this._config.internalValue = config.config;
        this._storageConfig.internalValue = config.storageConfig;
        this._timeouts.internalValue = config.timeouts;
    }
    get effectiveLabels() {
        return this._effectiveLabels;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get region() {
        return this.getStringAttribute('region');
    }
    set region(value) {
        this._region = value;
    }
    resetRegion() {
        this._region = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get regionInput() {
        return this._region;
    }
    get terraformLabels() {
        return this._terraformLabels;
    }
    get config() {
        return this._config;
    }
    putConfig(value) {
        this._config.internalValue = value;
    }
    resetConfig() {
        this._config.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get configInput() {
        return this._config.internalValue;
    }
    get storageConfig() {
        return this._storageConfig;
    }
    putStorageConfig(value) {
        this._storageConfig.internalValue = value;
    }
    resetStorageConfig() {
        this._storageConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get storageConfigInput() {
        return this._storageConfig.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
            labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._labels),
            name: cdktf.stringToTerraform(this._name),
            project: cdktf.stringToTerraform(this._project),
            region: cdktf.stringToTerraform(this._region),
            config: composerEnvironmentConfigAToTerraform(this._config.internalValue),
            storage_config: composerEnvironmentStorageConfigToTerraform(this._storageConfig.internalValue),
            timeouts: composerEnvironmentTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            labels: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._labels),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            name: {
                value: cdktf.stringToHclTerraform(this._name),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            project: {
                value: cdktf.stringToHclTerraform(this._project),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            region: {
                value: cdktf.stringToHclTerraform(this._region),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            config: {
                value: composerEnvironmentConfigAToHclTerraform(this._config.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ComposerEnvironmentConfigAList",
            },
            storage_config: {
                value: composerEnvironmentStorageConfigToHclTerraform(this._storageConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ComposerEnvironmentStorageConfigList",
            },
            timeouts: {
                value: composerEnvironmentTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "ComposerEnvironmentTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.ComposerEnvironment = ComposerEnvironment;
_5 = JSII_RTTI_SYMBOL_1;
ComposerEnvironment[_5] = { fqn: "@cdktf/provider-google.composerEnvironment.ComposerEnvironment", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
ComposerEnvironment.tfResourceType = "google_composer_environment";
//# sourceMappingURL=data:application/json;base64,