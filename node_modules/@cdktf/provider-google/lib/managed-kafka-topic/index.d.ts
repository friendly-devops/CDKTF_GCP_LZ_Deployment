/**
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: MPL-2.0
 */
import { Construct } from 'constructs';
import * as cdktf from 'cdktf';
export interface ManagedKafkaTopicConfig extends cdktf.TerraformMetaArguments {
    /**
    * The cluster name.
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/managed_kafka_topic#cluster ManagedKafkaTopic#cluster}
    */
    readonly cluster: string;
    /**
    * Configuration for the topic that are overridden from the cluster defaults. The key of the map is a Kafka topic property name, for example: 'cleanup.policy=compact', 'compression.type=producer'.
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/managed_kafka_topic#configs ManagedKafkaTopic#configs}
    */
    readonly configs?: {
        [key: string]: string;
    };
    /**
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/managed_kafka_topic#id ManagedKafkaTopic#id}
    *
    * Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2.
    * If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
    */
    readonly id?: string;
    /**
    * ID of the location of the Kafka resource. See https://cloud.google.com/managed-kafka/docs/locations for a list of supported locations.
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/managed_kafka_topic#location ManagedKafkaTopic#location}
    */
    readonly location: string;
    /**
    * The number of partitions in a topic. You can increase the partition count for a topic, but you cannot decrease it. Increasing partitions for a topic that uses a key might change how messages are distributed.
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/managed_kafka_topic#partition_count ManagedKafkaTopic#partition_count}
    */
    readonly partitionCount?: number;
    /**
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/managed_kafka_topic#project ManagedKafkaTopic#project}
    */
    readonly project?: string;
    /**
    * The number of replicas of each partition. A replication factor of 3 is recommended for high availability.
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/managed_kafka_topic#replication_factor ManagedKafkaTopic#replication_factor}
    */
    readonly replicationFactor: number;
    /**
    * The ID to use for the topic, which will become the final component of the topic's name. This value is structured like: 'my-topic-name'.
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/managed_kafka_topic#topic_id ManagedKafkaTopic#topic_id}
    */
    readonly topicId: string;
    /**
    * timeouts block
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/managed_kafka_topic#timeouts ManagedKafkaTopic#timeouts}
    */
    readonly timeouts?: ManagedKafkaTopicTimeouts;
}
export interface ManagedKafkaTopicTimeouts {
    /**
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/managed_kafka_topic#create ManagedKafkaTopic#create}
    */
    readonly create?: string;
    /**
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/managed_kafka_topic#delete ManagedKafkaTopic#delete}
    */
    readonly delete?: string;
    /**
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/managed_kafka_topic#update ManagedKafkaTopic#update}
    */
    readonly update?: string;
}
export declare function managedKafkaTopicTimeoutsToTerraform(struct?: ManagedKafkaTopicTimeouts | cdktf.IResolvable): any;
export declare function managedKafkaTopicTimeoutsToHclTerraform(struct?: ManagedKafkaTopicTimeouts | cdktf.IResolvable): any;
export declare class ManagedKafkaTopicTimeoutsOutputReference extends cdktf.ComplexObject {
    private isEmptyObject;
    private resolvableValue?;
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string);
    get internalValue(): ManagedKafkaTopicTimeouts | cdktf.IResolvable | undefined;
    set internalValue(value: ManagedKafkaTopicTimeouts | cdktf.IResolvable | undefined);
    private _create?;
    get create(): string;
    set create(value: string);
    resetCreate(): void;
    get createInput(): string | undefined;
    private _delete?;
    get delete(): string;
    set delete(value: string);
    resetDelete(): void;
    get deleteInput(): string | undefined;
    private _update?;
    get update(): string;
    set update(value: string);
    resetUpdate(): void;
    get updateInput(): string | undefined;
}
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/managed_kafka_topic google_managed_kafka_topic}
*/
export declare class ManagedKafkaTopic extends cdktf.TerraformResource {
    static readonly tfResourceType = "google_managed_kafka_topic";
    /**
    * Generates CDKTF code for importing a ManagedKafkaTopic resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the ManagedKafkaTopic to import
    * @param importFromId The id of the existing ManagedKafkaTopic that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/managed_kafka_topic#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the ManagedKafkaTopic to import is found
    */
    static generateConfigForImport(scope: Construct, importToId: string, importFromId: string, provider?: cdktf.TerraformProvider): cdktf.ImportableResource;
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/managed_kafka_topic google_managed_kafka_topic} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ManagedKafkaTopicConfig
    */
    constructor(scope: Construct, id: string, config: ManagedKafkaTopicConfig);
    private _cluster?;
    get cluster(): string;
    set cluster(value: string);
    get clusterInput(): string | undefined;
    private _configs?;
    get configs(): {
        [key: string]: string;
    };
    set configs(value: {
        [key: string]: string;
    });
    resetConfigs(): void;
    get configsInput(): {
        [key: string]: string;
    } | undefined;
    private _id?;
    get id(): string;
    set id(value: string);
    resetId(): void;
    get idInput(): string | undefined;
    private _location?;
    get location(): string;
    set location(value: string);
    get locationInput(): string | undefined;
    get name(): string;
    private _partitionCount?;
    get partitionCount(): number;
    set partitionCount(value: number);
    resetPartitionCount(): void;
    get partitionCountInput(): number | undefined;
    private _project?;
    get project(): string;
    set project(value: string);
    resetProject(): void;
    get projectInput(): string | undefined;
    private _replicationFactor?;
    get replicationFactor(): number;
    set replicationFactor(value: number);
    get replicationFactorInput(): number | undefined;
    private _topicId?;
    get topicId(): string;
    set topicId(value: string);
    get topicIdInput(): string | undefined;
    private _timeouts;
    get timeouts(): ManagedKafkaTopicTimeoutsOutputReference;
    putTimeouts(value: ManagedKafkaTopicTimeouts): void;
    resetTimeouts(): void;
    get timeoutsInput(): cdktf.IResolvable | ManagedKafkaTopicTimeouts | undefined;
    protected synthesizeAttributes(): {
        [name: string]: any;
    };
    protected synthesizeHclAttributes(): {
        [name: string]: any;
    };
}
