"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9;
Object.defineProperty(exports, "__esModule", { value: true });
exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesGatewayServiceMeshToHclTerraform = exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesGatewayServiceMeshToTerraform = exports.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesGatewayServiceMeshRouteDestinationsOutputReference = exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesGatewayServiceMeshRouteDestinationsToHclTerraform = exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesGatewayServiceMeshRouteDestinationsToTerraform = exports.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigCloudRunOutputReference = exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigCloudRunToHclTerraform = exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigCloudRunToTerraform = exports.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentOutputReference = exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentToHclTerraform = exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentToTerraform = exports.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsList = exports.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsOutputReference = exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsToHclTerraform = exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsToTerraform = exports.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsPredeployOutputReference = exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsPredeployToHclTerraform = exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsPredeployToTerraform = exports.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsPostdeployOutputReference = exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsPostdeployToHclTerraform = exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsPostdeployToTerraform = exports.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentOutputReference = exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentToHclTerraform = exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentToTerraform = exports.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentPredeployOutputReference = exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentPredeployToHclTerraform = exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentPredeployToTerraform = exports.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentPostdeployOutputReference = exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentPostdeployToHclTerraform = exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentPostdeployToTerraform = exports.ClouddeployDeliveryPipelineSerialPipelineStagesDeployParametersList = exports.ClouddeployDeliveryPipelineSerialPipelineStagesDeployParametersOutputReference = exports.clouddeployDeliveryPipelineSerialPipelineStagesDeployParametersToHclTerraform = exports.clouddeployDeliveryPipelineSerialPipelineStagesDeployParametersToTerraform = exports.ClouddeployDeliveryPipelineConditionList = exports.ClouddeployDeliveryPipelineConditionOutputReference = exports.clouddeployDeliveryPipelineConditionToHclTerraform = exports.clouddeployDeliveryPipelineConditionToTerraform = exports.ClouddeployDeliveryPipelineConditionTargetsTypeConditionList = exports.ClouddeployDeliveryPipelineConditionTargetsTypeConditionOutputReference = exports.clouddeployDeliveryPipelineConditionTargetsTypeConditionToHclTerraform = exports.clouddeployDeliveryPipelineConditionTargetsTypeConditionToTerraform = exports.ClouddeployDeliveryPipelineConditionTargetsPresentConditionList = exports.ClouddeployDeliveryPipelineConditionTargetsPresentConditionOutputReference = exports.clouddeployDeliveryPipelineConditionTargetsPresentConditionToHclTerraform = exports.clouddeployDeliveryPipelineConditionTargetsPresentConditionToTerraform = exports.ClouddeployDeliveryPipelineConditionPipelineReadyConditionList = exports.ClouddeployDeliveryPipelineConditionPipelineReadyConditionOutputReference = exports.clouddeployDeliveryPipelineConditionPipelineReadyConditionToHclTerraform = exports.clouddeployDeliveryPipelineConditionPipelineReadyConditionToTerraform = void 0;
exports.ClouddeployDeliveryPipeline = exports.ClouddeployDeliveryPipelineTimeoutsOutputReference = exports.clouddeployDeliveryPipelineTimeoutsToHclTerraform = exports.clouddeployDeliveryPipelineTimeoutsToTerraform = exports.ClouddeployDeliveryPipelineSerialPipelineOutputReference = exports.clouddeployDeliveryPipelineSerialPipelineToHclTerraform = exports.clouddeployDeliveryPipelineSerialPipelineToTerraform = exports.ClouddeployDeliveryPipelineSerialPipelineStagesList = exports.ClouddeployDeliveryPipelineSerialPipelineStagesOutputReference = exports.clouddeployDeliveryPipelineSerialPipelineStagesToHclTerraform = exports.clouddeployDeliveryPipelineSerialPipelineStagesToTerraform = exports.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyOutputReference = exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyToHclTerraform = exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyToTerraform = exports.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardOutputReference = exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardToHclTerraform = exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardToTerraform = exports.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardPredeployOutputReference = exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardPredeployToHclTerraform = exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardPredeployToTerraform = exports.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardPostdeployOutputReference = exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardPostdeployToHclTerraform = exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardPostdeployToTerraform = exports.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryOutputReference = exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryToHclTerraform = exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryToTerraform = exports.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigOutputReference = exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigToHclTerraform = exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigToTerraform = exports.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesOutputReference = exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesToHclTerraform = exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesToTerraform = exports.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesServiceNetworkingOutputReference = exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesServiceNetworkingToHclTerraform = exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesServiceNetworkingToTerraform = exports.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesGatewayServiceMeshOutputReference = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function clouddeployDeliveryPipelineConditionPipelineReadyConditionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.clouddeployDeliveryPipelineConditionPipelineReadyConditionToTerraform = clouddeployDeliveryPipelineConditionPipelineReadyConditionToTerraform;
function clouddeployDeliveryPipelineConditionPipelineReadyConditionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.clouddeployDeliveryPipelineConditionPipelineReadyConditionToHclTerraform = clouddeployDeliveryPipelineConditionPipelineReadyConditionToHclTerraform;
class ClouddeployDeliveryPipelineConditionPipelineReadyConditionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // status - computed: true, optional: false, required: false
    get status() {
        return this.getBooleanAttribute('status');
    }
    // update_time - computed: true, optional: false, required: false
    get updateTime() {
        return this.getStringAttribute('update_time');
    }
}
exports.ClouddeployDeliveryPipelineConditionPipelineReadyConditionOutputReference = ClouddeployDeliveryPipelineConditionPipelineReadyConditionOutputReference;
_a = JSII_RTTI_SYMBOL_1;
ClouddeployDeliveryPipelineConditionPipelineReadyConditionOutputReference[_a] = { fqn: "@cdktf/provider-google.clouddeployDeliveryPipeline.ClouddeployDeliveryPipelineConditionPipelineReadyConditionOutputReference", version: "14.13.1" };
class ClouddeployDeliveryPipelineConditionPipelineReadyConditionList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ClouddeployDeliveryPipelineConditionPipelineReadyConditionOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ClouddeployDeliveryPipelineConditionPipelineReadyConditionList = ClouddeployDeliveryPipelineConditionPipelineReadyConditionList;
_b = JSII_RTTI_SYMBOL_1;
ClouddeployDeliveryPipelineConditionPipelineReadyConditionList[_b] = { fqn: "@cdktf/provider-google.clouddeployDeliveryPipeline.ClouddeployDeliveryPipelineConditionPipelineReadyConditionList", version: "14.13.1" };
function clouddeployDeliveryPipelineConditionTargetsPresentConditionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.clouddeployDeliveryPipelineConditionTargetsPresentConditionToTerraform = clouddeployDeliveryPipelineConditionTargetsPresentConditionToTerraform;
function clouddeployDeliveryPipelineConditionTargetsPresentConditionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.clouddeployDeliveryPipelineConditionTargetsPresentConditionToHclTerraform = clouddeployDeliveryPipelineConditionTargetsPresentConditionToHclTerraform;
class ClouddeployDeliveryPipelineConditionTargetsPresentConditionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // missing_targets - computed: true, optional: false, required: false
    get missingTargets() {
        return this.getListAttribute('missing_targets');
    }
    // status - computed: true, optional: false, required: false
    get status() {
        return this.getBooleanAttribute('status');
    }
    // update_time - computed: true, optional: false, required: false
    get updateTime() {
        return this.getStringAttribute('update_time');
    }
}
exports.ClouddeployDeliveryPipelineConditionTargetsPresentConditionOutputReference = ClouddeployDeliveryPipelineConditionTargetsPresentConditionOutputReference;
_c = JSII_RTTI_SYMBOL_1;
ClouddeployDeliveryPipelineConditionTargetsPresentConditionOutputReference[_c] = { fqn: "@cdktf/provider-google.clouddeployDeliveryPipeline.ClouddeployDeliveryPipelineConditionTargetsPresentConditionOutputReference", version: "14.13.1" };
class ClouddeployDeliveryPipelineConditionTargetsPresentConditionList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ClouddeployDeliveryPipelineConditionTargetsPresentConditionOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ClouddeployDeliveryPipelineConditionTargetsPresentConditionList = ClouddeployDeliveryPipelineConditionTargetsPresentConditionList;
_d = JSII_RTTI_SYMBOL_1;
ClouddeployDeliveryPipelineConditionTargetsPresentConditionList[_d] = { fqn: "@cdktf/provider-google.clouddeployDeliveryPipeline.ClouddeployDeliveryPipelineConditionTargetsPresentConditionList", version: "14.13.1" };
function clouddeployDeliveryPipelineConditionTargetsTypeConditionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.clouddeployDeliveryPipelineConditionTargetsTypeConditionToTerraform = clouddeployDeliveryPipelineConditionTargetsTypeConditionToTerraform;
function clouddeployDeliveryPipelineConditionTargetsTypeConditionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.clouddeployDeliveryPipelineConditionTargetsTypeConditionToHclTerraform = clouddeployDeliveryPipelineConditionTargetsTypeConditionToHclTerraform;
class ClouddeployDeliveryPipelineConditionTargetsTypeConditionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // error_details - computed: true, optional: false, required: false
    get errorDetails() {
        return this.getStringAttribute('error_details');
    }
    // status - computed: true, optional: false, required: false
    get status() {
        return this.getBooleanAttribute('status');
    }
}
exports.ClouddeployDeliveryPipelineConditionTargetsTypeConditionOutputReference = ClouddeployDeliveryPipelineConditionTargetsTypeConditionOutputReference;
_e = JSII_RTTI_SYMBOL_1;
ClouddeployDeliveryPipelineConditionTargetsTypeConditionOutputReference[_e] = { fqn: "@cdktf/provider-google.clouddeployDeliveryPipeline.ClouddeployDeliveryPipelineConditionTargetsTypeConditionOutputReference", version: "14.13.1" };
class ClouddeployDeliveryPipelineConditionTargetsTypeConditionList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ClouddeployDeliveryPipelineConditionTargetsTypeConditionOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ClouddeployDeliveryPipelineConditionTargetsTypeConditionList = ClouddeployDeliveryPipelineConditionTargetsTypeConditionList;
_f = JSII_RTTI_SYMBOL_1;
ClouddeployDeliveryPipelineConditionTargetsTypeConditionList[_f] = { fqn: "@cdktf/provider-google.clouddeployDeliveryPipeline.ClouddeployDeliveryPipelineConditionTargetsTypeConditionList", version: "14.13.1" };
function clouddeployDeliveryPipelineConditionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.clouddeployDeliveryPipelineConditionToTerraform = clouddeployDeliveryPipelineConditionToTerraform;
function clouddeployDeliveryPipelineConditionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.clouddeployDeliveryPipelineConditionToHclTerraform = clouddeployDeliveryPipelineConditionToHclTerraform;
class ClouddeployDeliveryPipelineConditionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // pipeline_ready_condition - computed: true, optional: false, required: false
        this._pipelineReadyCondition = new ClouddeployDeliveryPipelineConditionPipelineReadyConditionList(this, "pipeline_ready_condition", false);
        // targets_present_condition - computed: true, optional: false, required: false
        this._targetsPresentCondition = new ClouddeployDeliveryPipelineConditionTargetsPresentConditionList(this, "targets_present_condition", false);
        // targets_type_condition - computed: true, optional: false, required: false
        this._targetsTypeCondition = new ClouddeployDeliveryPipelineConditionTargetsTypeConditionList(this, "targets_type_condition", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    get pipelineReadyCondition() {
        return this._pipelineReadyCondition;
    }
    get targetsPresentCondition() {
        return this._targetsPresentCondition;
    }
    get targetsTypeCondition() {
        return this._targetsTypeCondition;
    }
}
exports.ClouddeployDeliveryPipelineConditionOutputReference = ClouddeployDeliveryPipelineConditionOutputReference;
_g = JSII_RTTI_SYMBOL_1;
ClouddeployDeliveryPipelineConditionOutputReference[_g] = { fqn: "@cdktf/provider-google.clouddeployDeliveryPipeline.ClouddeployDeliveryPipelineConditionOutputReference", version: "14.13.1" };
class ClouddeployDeliveryPipelineConditionList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ClouddeployDeliveryPipelineConditionOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ClouddeployDeliveryPipelineConditionList = ClouddeployDeliveryPipelineConditionList;
_h = JSII_RTTI_SYMBOL_1;
ClouddeployDeliveryPipelineConditionList[_h] = { fqn: "@cdktf/provider-google.clouddeployDeliveryPipeline.ClouddeployDeliveryPipelineConditionList", version: "14.13.1" };
function clouddeployDeliveryPipelineSerialPipelineStagesDeployParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        match_target_labels: cdktf.hashMapper(cdktf.stringToTerraform)(struct.matchTargetLabels),
        values: cdktf.hashMapper(cdktf.stringToTerraform)(struct.values),
    };
}
exports.clouddeployDeliveryPipelineSerialPipelineStagesDeployParametersToTerraform = clouddeployDeliveryPipelineSerialPipelineStagesDeployParametersToTerraform;
function clouddeployDeliveryPipelineSerialPipelineStagesDeployParametersToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        match_target_labels: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.matchTargetLabels),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        values: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.values),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.clouddeployDeliveryPipelineSerialPipelineStagesDeployParametersToHclTerraform = clouddeployDeliveryPipelineSerialPipelineStagesDeployParametersToHclTerraform;
class ClouddeployDeliveryPipelineSerialPipelineStagesDeployParametersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._matchTargetLabels !== undefined) {
            hasAnyValues = true;
            internalValueResult.matchTargetLabels = this._matchTargetLabels;
        }
        if (this._values !== undefined) {
            hasAnyValues = true;
            internalValueResult.values = this._values;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._matchTargetLabels = undefined;
            this._values = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._matchTargetLabels = value.matchTargetLabels;
            this._values = value.values;
        }
    }
    get matchTargetLabels() {
        return this.getStringMapAttribute('match_target_labels');
    }
    set matchTargetLabels(value) {
        this._matchTargetLabels = value;
    }
    resetMatchTargetLabels() {
        this._matchTargetLabels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get matchTargetLabelsInput() {
        return this._matchTargetLabels;
    }
    get values() {
        return this.getStringMapAttribute('values');
    }
    set values(value) {
        this._values = value;
    }
    // Temporarily expose input value. Use with caution.
    get valuesInput() {
        return this._values;
    }
}
exports.ClouddeployDeliveryPipelineSerialPipelineStagesDeployParametersOutputReference = ClouddeployDeliveryPipelineSerialPipelineStagesDeployParametersOutputReference;
_j = JSII_RTTI_SYMBOL_1;
ClouddeployDeliveryPipelineSerialPipelineStagesDeployParametersOutputReference[_j] = { fqn: "@cdktf/provider-google.clouddeployDeliveryPipeline.ClouddeployDeliveryPipelineSerialPipelineStagesDeployParametersOutputReference", version: "14.13.1" };
class ClouddeployDeliveryPipelineSerialPipelineStagesDeployParametersList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ClouddeployDeliveryPipelineSerialPipelineStagesDeployParametersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ClouddeployDeliveryPipelineSerialPipelineStagesDeployParametersList = ClouddeployDeliveryPipelineSerialPipelineStagesDeployParametersList;
_k = JSII_RTTI_SYMBOL_1;
ClouddeployDeliveryPipelineSerialPipelineStagesDeployParametersList[_k] = { fqn: "@cdktf/provider-google.clouddeployDeliveryPipeline.ClouddeployDeliveryPipelineSerialPipelineStagesDeployParametersList", version: "14.13.1" };
function clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentPostdeployToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        actions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.actions),
    };
}
exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentPostdeployToTerraform = clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentPostdeployToTerraform;
function clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentPostdeployToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        actions: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.actions),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentPostdeployToHclTerraform = clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentPostdeployToHclTerraform;
class ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentPostdeployOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._actions !== undefined) {
            hasAnyValues = true;
            internalValueResult.actions = this._actions;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._actions = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._actions = value.actions;
        }
    }
    get actions() {
        return this.getListAttribute('actions');
    }
    set actions(value) {
        this._actions = value;
    }
    resetActions() {
        this._actions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get actionsInput() {
        return this._actions;
    }
}
exports.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentPostdeployOutputReference = ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentPostdeployOutputReference;
_l = JSII_RTTI_SYMBOL_1;
ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentPostdeployOutputReference[_l] = { fqn: "@cdktf/provider-google.clouddeployDeliveryPipeline.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentPostdeployOutputReference", version: "14.13.1" };
function clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentPredeployToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        actions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.actions),
    };
}
exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentPredeployToTerraform = clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentPredeployToTerraform;
function clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentPredeployToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        actions: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.actions),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentPredeployToHclTerraform = clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentPredeployToHclTerraform;
class ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentPredeployOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._actions !== undefined) {
            hasAnyValues = true;
            internalValueResult.actions = this._actions;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._actions = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._actions = value.actions;
        }
    }
    get actions() {
        return this.getListAttribute('actions');
    }
    set actions(value) {
        this._actions = value;
    }
    resetActions() {
        this._actions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get actionsInput() {
        return this._actions;
    }
}
exports.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentPredeployOutputReference = ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentPredeployOutputReference;
_m = JSII_RTTI_SYMBOL_1;
ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentPredeployOutputReference[_m] = { fqn: "@cdktf/provider-google.clouddeployDeliveryPipeline.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentPredeployOutputReference", version: "14.13.1" };
function clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        percentages: cdktf.listMapper(cdktf.numberToTerraform, false)(struct.percentages),
        verify: cdktf.booleanToTerraform(struct.verify),
        postdeploy: clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentPostdeployToTerraform(struct.postdeploy),
        predeploy: clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentPredeployToTerraform(struct.predeploy),
    };
}
exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentToTerraform = clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentToTerraform;
function clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        percentages: {
            value: cdktf.listMapperHcl(cdktf.numberToHclTerraform, false)(struct.percentages),
            isBlock: false,
            type: "list",
            storageClassType: "numberList",
        },
        verify: {
            value: cdktf.booleanToHclTerraform(struct.verify),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        postdeploy: {
            value: clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentPostdeployToHclTerraform(struct.postdeploy),
            isBlock: true,
            type: "list",
            storageClassType: "ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentPostdeployList",
        },
        predeploy: {
            value: clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentPredeployToHclTerraform(struct.predeploy),
            isBlock: true,
            type: "list",
            storageClassType: "ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentPredeployList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentToHclTerraform = clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentToHclTerraform;
class ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // postdeploy - computed: false, optional: true, required: false
        this._postdeploy = new ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentPostdeployOutputReference(this, "postdeploy");
        // predeploy - computed: false, optional: true, required: false
        this._predeploy = new ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentPredeployOutputReference(this, "predeploy");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._percentages !== undefined) {
            hasAnyValues = true;
            internalValueResult.percentages = this._percentages;
        }
        if (this._verify !== undefined) {
            hasAnyValues = true;
            internalValueResult.verify = this._verify;
        }
        if (this._postdeploy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.postdeploy = this._postdeploy?.internalValue;
        }
        if (this._predeploy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.predeploy = this._predeploy?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._percentages = undefined;
            this._verify = undefined;
            this._postdeploy.internalValue = undefined;
            this._predeploy.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._percentages = value.percentages;
            this._verify = value.verify;
            this._postdeploy.internalValue = value.postdeploy;
            this._predeploy.internalValue = value.predeploy;
        }
    }
    get percentages() {
        return this.getNumberListAttribute('percentages');
    }
    set percentages(value) {
        this._percentages = value;
    }
    // Temporarily expose input value. Use with caution.
    get percentagesInput() {
        return this._percentages;
    }
    get verify() {
        return this.getBooleanAttribute('verify');
    }
    set verify(value) {
        this._verify = value;
    }
    resetVerify() {
        this._verify = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get verifyInput() {
        return this._verify;
    }
    get postdeploy() {
        return this._postdeploy;
    }
    putPostdeploy(value) {
        this._postdeploy.internalValue = value;
    }
    resetPostdeploy() {
        this._postdeploy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get postdeployInput() {
        return this._postdeploy.internalValue;
    }
    get predeploy() {
        return this._predeploy;
    }
    putPredeploy(value) {
        this._predeploy.internalValue = value;
    }
    resetPredeploy() {
        this._predeploy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get predeployInput() {
        return this._predeploy.internalValue;
    }
}
exports.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentOutputReference = ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentOutputReference;
_o = JSII_RTTI_SYMBOL_1;
ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentOutputReference[_o] = { fqn: "@cdktf/provider-google.clouddeployDeliveryPipeline.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentOutputReference", version: "14.13.1" };
function clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsPostdeployToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        actions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.actions),
    };
}
exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsPostdeployToTerraform = clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsPostdeployToTerraform;
function clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsPostdeployToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        actions: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.actions),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsPostdeployToHclTerraform = clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsPostdeployToHclTerraform;
class ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsPostdeployOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._actions !== undefined) {
            hasAnyValues = true;
            internalValueResult.actions = this._actions;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._actions = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._actions = value.actions;
        }
    }
    get actions() {
        return this.getListAttribute('actions');
    }
    set actions(value) {
        this._actions = value;
    }
    resetActions() {
        this._actions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get actionsInput() {
        return this._actions;
    }
}
exports.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsPostdeployOutputReference = ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsPostdeployOutputReference;
_p = JSII_RTTI_SYMBOL_1;
ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsPostdeployOutputReference[_p] = { fqn: "@cdktf/provider-google.clouddeployDeliveryPipeline.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsPostdeployOutputReference", version: "14.13.1" };
function clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsPredeployToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        actions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.actions),
    };
}
exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsPredeployToTerraform = clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsPredeployToTerraform;
function clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsPredeployToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        actions: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.actions),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsPredeployToHclTerraform = clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsPredeployToHclTerraform;
class ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsPredeployOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._actions !== undefined) {
            hasAnyValues = true;
            internalValueResult.actions = this._actions;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._actions = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._actions = value.actions;
        }
    }
    get actions() {
        return this.getListAttribute('actions');
    }
    set actions(value) {
        this._actions = value;
    }
    resetActions() {
        this._actions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get actionsInput() {
        return this._actions;
    }
}
exports.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsPredeployOutputReference = ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsPredeployOutputReference;
_q = JSII_RTTI_SYMBOL_1;
ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsPredeployOutputReference[_q] = { fqn: "@cdktf/provider-google.clouddeployDeliveryPipeline.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsPredeployOutputReference", version: "14.13.1" };
function clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        percentage: cdktf.numberToTerraform(struct.percentage),
        phase_id: cdktf.stringToTerraform(struct.phaseId),
        profiles: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.profiles),
        verify: cdktf.booleanToTerraform(struct.verify),
        postdeploy: clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsPostdeployToTerraform(struct.postdeploy),
        predeploy: clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsPredeployToTerraform(struct.predeploy),
    };
}
exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsToTerraform = clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsToTerraform;
function clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        percentage: {
            value: cdktf.numberToHclTerraform(struct.percentage),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        phase_id: {
            value: cdktf.stringToHclTerraform(struct.phaseId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        profiles: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.profiles),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        verify: {
            value: cdktf.booleanToHclTerraform(struct.verify),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        postdeploy: {
            value: clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsPostdeployToHclTerraform(struct.postdeploy),
            isBlock: true,
            type: "list",
            storageClassType: "ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsPostdeployList",
        },
        predeploy: {
            value: clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsPredeployToHclTerraform(struct.predeploy),
            isBlock: true,
            type: "list",
            storageClassType: "ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsPredeployList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsToHclTerraform = clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsToHclTerraform;
class ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // postdeploy - computed: false, optional: true, required: false
        this._postdeploy = new ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsPostdeployOutputReference(this, "postdeploy");
        // predeploy - computed: false, optional: true, required: false
        this._predeploy = new ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsPredeployOutputReference(this, "predeploy");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._percentage !== undefined) {
            hasAnyValues = true;
            internalValueResult.percentage = this._percentage;
        }
        if (this._phaseId !== undefined) {
            hasAnyValues = true;
            internalValueResult.phaseId = this._phaseId;
        }
        if (this._profiles !== undefined) {
            hasAnyValues = true;
            internalValueResult.profiles = this._profiles;
        }
        if (this._verify !== undefined) {
            hasAnyValues = true;
            internalValueResult.verify = this._verify;
        }
        if (this._postdeploy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.postdeploy = this._postdeploy?.internalValue;
        }
        if (this._predeploy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.predeploy = this._predeploy?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._percentage = undefined;
            this._phaseId = undefined;
            this._profiles = undefined;
            this._verify = undefined;
            this._postdeploy.internalValue = undefined;
            this._predeploy.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._percentage = value.percentage;
            this._phaseId = value.phaseId;
            this._profiles = value.profiles;
            this._verify = value.verify;
            this._postdeploy.internalValue = value.postdeploy;
            this._predeploy.internalValue = value.predeploy;
        }
    }
    get percentage() {
        return this.getNumberAttribute('percentage');
    }
    set percentage(value) {
        this._percentage = value;
    }
    // Temporarily expose input value. Use with caution.
    get percentageInput() {
        return this._percentage;
    }
    get phaseId() {
        return this.getStringAttribute('phase_id');
    }
    set phaseId(value) {
        this._phaseId = value;
    }
    // Temporarily expose input value. Use with caution.
    get phaseIdInput() {
        return this._phaseId;
    }
    get profiles() {
        return this.getListAttribute('profiles');
    }
    set profiles(value) {
        this._profiles = value;
    }
    resetProfiles() {
        this._profiles = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get profilesInput() {
        return this._profiles;
    }
    get verify() {
        return this.getBooleanAttribute('verify');
    }
    set verify(value) {
        this._verify = value;
    }
    resetVerify() {
        this._verify = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get verifyInput() {
        return this._verify;
    }
    get postdeploy() {
        return this._postdeploy;
    }
    putPostdeploy(value) {
        this._postdeploy.internalValue = value;
    }
    resetPostdeploy() {
        this._postdeploy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get postdeployInput() {
        return this._postdeploy.internalValue;
    }
    get predeploy() {
        return this._predeploy;
    }
    putPredeploy(value) {
        this._predeploy.internalValue = value;
    }
    resetPredeploy() {
        this._predeploy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get predeployInput() {
        return this._predeploy.internalValue;
    }
}
exports.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsOutputReference = ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsOutputReference;
_r = JSII_RTTI_SYMBOL_1;
ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsOutputReference[_r] = { fqn: "@cdktf/provider-google.clouddeployDeliveryPipeline.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsOutputReference", version: "14.13.1" };
class ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsList = ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsList;
_s = JSII_RTTI_SYMBOL_1;
ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsList[_s] = { fqn: "@cdktf/provider-google.clouddeployDeliveryPipeline.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsList", version: "14.13.1" };
function clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        phase_configs: cdktf.listMapper(clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsToTerraform, true)(struct.phaseConfigs),
    };
}
exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentToTerraform = clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentToTerraform;
function clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        phase_configs: {
            value: cdktf.listMapperHcl(clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsToHclTerraform, true)(struct.phaseConfigs),
            isBlock: true,
            type: "list",
            storageClassType: "ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentToHclTerraform = clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentToHclTerraform;
class ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // phase_configs - computed: false, optional: false, required: true
        this._phaseConfigs = new ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentPhaseConfigsList(this, "phase_configs", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._phaseConfigs?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.phaseConfigs = this._phaseConfigs?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._phaseConfigs.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._phaseConfigs.internalValue = value.phaseConfigs;
        }
    }
    get phaseConfigs() {
        return this._phaseConfigs;
    }
    putPhaseConfigs(value) {
        this._phaseConfigs.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get phaseConfigsInput() {
        return this._phaseConfigs.internalValue;
    }
}
exports.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentOutputReference = ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentOutputReference;
_t = JSII_RTTI_SYMBOL_1;
ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentOutputReference[_t] = { fqn: "@cdktf/provider-google.clouddeployDeliveryPipeline.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentOutputReference", version: "14.13.1" };
function clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigCloudRunToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        automatic_traffic_control: cdktf.booleanToTerraform(struct.automaticTrafficControl),
        canary_revision_tags: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.canaryRevisionTags),
        prior_revision_tags: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.priorRevisionTags),
        stable_revision_tags: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.stableRevisionTags),
    };
}
exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigCloudRunToTerraform = clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigCloudRunToTerraform;
function clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigCloudRunToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        automatic_traffic_control: {
            value: cdktf.booleanToHclTerraform(struct.automaticTrafficControl),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        canary_revision_tags: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.canaryRevisionTags),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        prior_revision_tags: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.priorRevisionTags),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        stable_revision_tags: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.stableRevisionTags),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigCloudRunToHclTerraform = clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigCloudRunToHclTerraform;
class ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigCloudRunOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._automaticTrafficControl !== undefined) {
            hasAnyValues = true;
            internalValueResult.automaticTrafficControl = this._automaticTrafficControl;
        }
        if (this._canaryRevisionTags !== undefined) {
            hasAnyValues = true;
            internalValueResult.canaryRevisionTags = this._canaryRevisionTags;
        }
        if (this._priorRevisionTags !== undefined) {
            hasAnyValues = true;
            internalValueResult.priorRevisionTags = this._priorRevisionTags;
        }
        if (this._stableRevisionTags !== undefined) {
            hasAnyValues = true;
            internalValueResult.stableRevisionTags = this._stableRevisionTags;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._automaticTrafficControl = undefined;
            this._canaryRevisionTags = undefined;
            this._priorRevisionTags = undefined;
            this._stableRevisionTags = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._automaticTrafficControl = value.automaticTrafficControl;
            this._canaryRevisionTags = value.canaryRevisionTags;
            this._priorRevisionTags = value.priorRevisionTags;
            this._stableRevisionTags = value.stableRevisionTags;
        }
    }
    get automaticTrafficControl() {
        return this.getBooleanAttribute('automatic_traffic_control');
    }
    set automaticTrafficControl(value) {
        this._automaticTrafficControl = value;
    }
    resetAutomaticTrafficControl() {
        this._automaticTrafficControl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get automaticTrafficControlInput() {
        return this._automaticTrafficControl;
    }
    get canaryRevisionTags() {
        return this.getListAttribute('canary_revision_tags');
    }
    set canaryRevisionTags(value) {
        this._canaryRevisionTags = value;
    }
    resetCanaryRevisionTags() {
        this._canaryRevisionTags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get canaryRevisionTagsInput() {
        return this._canaryRevisionTags;
    }
    get priorRevisionTags() {
        return this.getListAttribute('prior_revision_tags');
    }
    set priorRevisionTags(value) {
        this._priorRevisionTags = value;
    }
    resetPriorRevisionTags() {
        this._priorRevisionTags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get priorRevisionTagsInput() {
        return this._priorRevisionTags;
    }
    get stableRevisionTags() {
        return this.getListAttribute('stable_revision_tags');
    }
    set stableRevisionTags(value) {
        this._stableRevisionTags = value;
    }
    resetStableRevisionTags() {
        this._stableRevisionTags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stableRevisionTagsInput() {
        return this._stableRevisionTags;
    }
}
exports.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigCloudRunOutputReference = ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigCloudRunOutputReference;
_u = JSII_RTTI_SYMBOL_1;
ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigCloudRunOutputReference[_u] = { fqn: "@cdktf/provider-google.clouddeployDeliveryPipeline.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigCloudRunOutputReference", version: "14.13.1" };
function clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesGatewayServiceMeshRouteDestinationsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        destination_ids: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.destinationIds),
        propagate_service: cdktf.booleanToTerraform(struct.propagateService),
    };
}
exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesGatewayServiceMeshRouteDestinationsToTerraform = clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesGatewayServiceMeshRouteDestinationsToTerraform;
function clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesGatewayServiceMeshRouteDestinationsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        destination_ids: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.destinationIds),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        propagate_service: {
            value: cdktf.booleanToHclTerraform(struct.propagateService),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesGatewayServiceMeshRouteDestinationsToHclTerraform = clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesGatewayServiceMeshRouteDestinationsToHclTerraform;
class ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesGatewayServiceMeshRouteDestinationsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._destinationIds !== undefined) {
            hasAnyValues = true;
            internalValueResult.destinationIds = this._destinationIds;
        }
        if (this._propagateService !== undefined) {
            hasAnyValues = true;
            internalValueResult.propagateService = this._propagateService;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._destinationIds = undefined;
            this._propagateService = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._destinationIds = value.destinationIds;
            this._propagateService = value.propagateService;
        }
    }
    get destinationIds() {
        return this.getListAttribute('destination_ids');
    }
    set destinationIds(value) {
        this._destinationIds = value;
    }
    // Temporarily expose input value. Use with caution.
    get destinationIdsInput() {
        return this._destinationIds;
    }
    get propagateService() {
        return this.getBooleanAttribute('propagate_service');
    }
    set propagateService(value) {
        this._propagateService = value;
    }
    resetPropagateService() {
        this._propagateService = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get propagateServiceInput() {
        return this._propagateService;
    }
}
exports.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesGatewayServiceMeshRouteDestinationsOutputReference = ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesGatewayServiceMeshRouteDestinationsOutputReference;
_v = JSII_RTTI_SYMBOL_1;
ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesGatewayServiceMeshRouteDestinationsOutputReference[_v] = { fqn: "@cdktf/provider-google.clouddeployDeliveryPipeline.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesGatewayServiceMeshRouteDestinationsOutputReference", version: "14.13.1" };
function clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesGatewayServiceMeshToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        deployment: cdktf.stringToTerraform(struct.deployment),
        http_route: cdktf.stringToTerraform(struct.httpRoute),
        pod_selector_label: cdktf.stringToTerraform(struct.podSelectorLabel),
        route_update_wait_time: cdktf.stringToTerraform(struct.routeUpdateWaitTime),
        service: cdktf.stringToTerraform(struct.service),
        stable_cutback_duration: cdktf.stringToTerraform(struct.stableCutbackDuration),
        route_destinations: clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesGatewayServiceMeshRouteDestinationsToTerraform(struct.routeDestinations),
    };
}
exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesGatewayServiceMeshToTerraform = clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesGatewayServiceMeshToTerraform;
function clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesGatewayServiceMeshToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        deployment: {
            value: cdktf.stringToHclTerraform(struct.deployment),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        http_route: {
            value: cdktf.stringToHclTerraform(struct.httpRoute),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        pod_selector_label: {
            value: cdktf.stringToHclTerraform(struct.podSelectorLabel),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        route_update_wait_time: {
            value: cdktf.stringToHclTerraform(struct.routeUpdateWaitTime),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        service: {
            value: cdktf.stringToHclTerraform(struct.service),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        stable_cutback_duration: {
            value: cdktf.stringToHclTerraform(struct.stableCutbackDuration),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        route_destinations: {
            value: clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesGatewayServiceMeshRouteDestinationsToHclTerraform(struct.routeDestinations),
            isBlock: true,
            type: "list",
            storageClassType: "ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesGatewayServiceMeshRouteDestinationsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesGatewayServiceMeshToHclTerraform = clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesGatewayServiceMeshToHclTerraform;
class ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesGatewayServiceMeshOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // route_destinations - computed: false, optional: true, required: false
        this._routeDestinations = new ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesGatewayServiceMeshRouteDestinationsOutputReference(this, "route_destinations");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._deployment !== undefined) {
            hasAnyValues = true;
            internalValueResult.deployment = this._deployment;
        }
        if (this._httpRoute !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpRoute = this._httpRoute;
        }
        if (this._podSelectorLabel !== undefined) {
            hasAnyValues = true;
            internalValueResult.podSelectorLabel = this._podSelectorLabel;
        }
        if (this._routeUpdateWaitTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.routeUpdateWaitTime = this._routeUpdateWaitTime;
        }
        if (this._service !== undefined) {
            hasAnyValues = true;
            internalValueResult.service = this._service;
        }
        if (this._stableCutbackDuration !== undefined) {
            hasAnyValues = true;
            internalValueResult.stableCutbackDuration = this._stableCutbackDuration;
        }
        if (this._routeDestinations?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.routeDestinations = this._routeDestinations?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._deployment = undefined;
            this._httpRoute = undefined;
            this._podSelectorLabel = undefined;
            this._routeUpdateWaitTime = undefined;
            this._service = undefined;
            this._stableCutbackDuration = undefined;
            this._routeDestinations.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._deployment = value.deployment;
            this._httpRoute = value.httpRoute;
            this._podSelectorLabel = value.podSelectorLabel;
            this._routeUpdateWaitTime = value.routeUpdateWaitTime;
            this._service = value.service;
            this._stableCutbackDuration = value.stableCutbackDuration;
            this._routeDestinations.internalValue = value.routeDestinations;
        }
    }
    get deployment() {
        return this.getStringAttribute('deployment');
    }
    set deployment(value) {
        this._deployment = value;
    }
    // Temporarily expose input value. Use with caution.
    get deploymentInput() {
        return this._deployment;
    }
    get httpRoute() {
        return this.getStringAttribute('http_route');
    }
    set httpRoute(value) {
        this._httpRoute = value;
    }
    // Temporarily expose input value. Use with caution.
    get httpRouteInput() {
        return this._httpRoute;
    }
    get podSelectorLabel() {
        return this.getStringAttribute('pod_selector_label');
    }
    set podSelectorLabel(value) {
        this._podSelectorLabel = value;
    }
    resetPodSelectorLabel() {
        this._podSelectorLabel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get podSelectorLabelInput() {
        return this._podSelectorLabel;
    }
    get routeUpdateWaitTime() {
        return this.getStringAttribute('route_update_wait_time');
    }
    set routeUpdateWaitTime(value) {
        this._routeUpdateWaitTime = value;
    }
    resetRouteUpdateWaitTime() {
        this._routeUpdateWaitTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get routeUpdateWaitTimeInput() {
        return this._routeUpdateWaitTime;
    }
    get service() {
        return this.getStringAttribute('service');
    }
    set service(value) {
        this._service = value;
    }
    // Temporarily expose input value. Use with caution.
    get serviceInput() {
        return this._service;
    }
    get stableCutbackDuration() {
        return this.getStringAttribute('stable_cutback_duration');
    }
    set stableCutbackDuration(value) {
        this._stableCutbackDuration = value;
    }
    resetStableCutbackDuration() {
        this._stableCutbackDuration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stableCutbackDurationInput() {
        return this._stableCutbackDuration;
    }
    get routeDestinations() {
        return this._routeDestinations;
    }
    putRouteDestinations(value) {
        this._routeDestinations.internalValue = value;
    }
    resetRouteDestinations() {
        this._routeDestinations.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get routeDestinationsInput() {
        return this._routeDestinations.internalValue;
    }
}
exports.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesGatewayServiceMeshOutputReference = ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesGatewayServiceMeshOutputReference;
_w = JSII_RTTI_SYMBOL_1;
ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesGatewayServiceMeshOutputReference[_w] = { fqn: "@cdktf/provider-google.clouddeployDeliveryPipeline.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesGatewayServiceMeshOutputReference", version: "14.13.1" };
function clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesServiceNetworkingToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        deployment: cdktf.stringToTerraform(struct.deployment),
        disable_pod_overprovisioning: cdktf.booleanToTerraform(struct.disablePodOverprovisioning),
        pod_selector_label: cdktf.stringToTerraform(struct.podSelectorLabel),
        service: cdktf.stringToTerraform(struct.service),
    };
}
exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesServiceNetworkingToTerraform = clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesServiceNetworkingToTerraform;
function clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesServiceNetworkingToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        deployment: {
            value: cdktf.stringToHclTerraform(struct.deployment),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        disable_pod_overprovisioning: {
            value: cdktf.booleanToHclTerraform(struct.disablePodOverprovisioning),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        pod_selector_label: {
            value: cdktf.stringToHclTerraform(struct.podSelectorLabel),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        service: {
            value: cdktf.stringToHclTerraform(struct.service),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesServiceNetworkingToHclTerraform = clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesServiceNetworkingToHclTerraform;
class ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesServiceNetworkingOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._deployment !== undefined) {
            hasAnyValues = true;
            internalValueResult.deployment = this._deployment;
        }
        if (this._disablePodOverprovisioning !== undefined) {
            hasAnyValues = true;
            internalValueResult.disablePodOverprovisioning = this._disablePodOverprovisioning;
        }
        if (this._podSelectorLabel !== undefined) {
            hasAnyValues = true;
            internalValueResult.podSelectorLabel = this._podSelectorLabel;
        }
        if (this._service !== undefined) {
            hasAnyValues = true;
            internalValueResult.service = this._service;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._deployment = undefined;
            this._disablePodOverprovisioning = undefined;
            this._podSelectorLabel = undefined;
            this._service = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._deployment = value.deployment;
            this._disablePodOverprovisioning = value.disablePodOverprovisioning;
            this._podSelectorLabel = value.podSelectorLabel;
            this._service = value.service;
        }
    }
    get deployment() {
        return this.getStringAttribute('deployment');
    }
    set deployment(value) {
        this._deployment = value;
    }
    // Temporarily expose input value. Use with caution.
    get deploymentInput() {
        return this._deployment;
    }
    get disablePodOverprovisioning() {
        return this.getBooleanAttribute('disable_pod_overprovisioning');
    }
    set disablePodOverprovisioning(value) {
        this._disablePodOverprovisioning = value;
    }
    resetDisablePodOverprovisioning() {
        this._disablePodOverprovisioning = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get disablePodOverprovisioningInput() {
        return this._disablePodOverprovisioning;
    }
    get podSelectorLabel() {
        return this.getStringAttribute('pod_selector_label');
    }
    set podSelectorLabel(value) {
        this._podSelectorLabel = value;
    }
    resetPodSelectorLabel() {
        this._podSelectorLabel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get podSelectorLabelInput() {
        return this._podSelectorLabel;
    }
    get service() {
        return this.getStringAttribute('service');
    }
    set service(value) {
        this._service = value;
    }
    // Temporarily expose input value. Use with caution.
    get serviceInput() {
        return this._service;
    }
}
exports.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesServiceNetworkingOutputReference = ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesServiceNetworkingOutputReference;
_x = JSII_RTTI_SYMBOL_1;
ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesServiceNetworkingOutputReference[_x] = { fqn: "@cdktf/provider-google.clouddeployDeliveryPipeline.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesServiceNetworkingOutputReference", version: "14.13.1" };
function clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        gateway_service_mesh: clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesGatewayServiceMeshToTerraform(struct.gatewayServiceMesh),
        service_networking: clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesServiceNetworkingToTerraform(struct.serviceNetworking),
    };
}
exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesToTerraform = clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesToTerraform;
function clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        gateway_service_mesh: {
            value: clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesGatewayServiceMeshToHclTerraform(struct.gatewayServiceMesh),
            isBlock: true,
            type: "list",
            storageClassType: "ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesGatewayServiceMeshList",
        },
        service_networking: {
            value: clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesServiceNetworkingToHclTerraform(struct.serviceNetworking),
            isBlock: true,
            type: "list",
            storageClassType: "ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesServiceNetworkingList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesToHclTerraform = clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesToHclTerraform;
class ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // gateway_service_mesh - computed: false, optional: true, required: false
        this._gatewayServiceMesh = new ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesGatewayServiceMeshOutputReference(this, "gateway_service_mesh");
        // service_networking - computed: false, optional: true, required: false
        this._serviceNetworking = new ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesServiceNetworkingOutputReference(this, "service_networking");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._gatewayServiceMesh?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.gatewayServiceMesh = this._gatewayServiceMesh?.internalValue;
        }
        if (this._serviceNetworking?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceNetworking = this._serviceNetworking?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._gatewayServiceMesh.internalValue = undefined;
            this._serviceNetworking.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._gatewayServiceMesh.internalValue = value.gatewayServiceMesh;
            this._serviceNetworking.internalValue = value.serviceNetworking;
        }
    }
    get gatewayServiceMesh() {
        return this._gatewayServiceMesh;
    }
    putGatewayServiceMesh(value) {
        this._gatewayServiceMesh.internalValue = value;
    }
    resetGatewayServiceMesh() {
        this._gatewayServiceMesh.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gatewayServiceMeshInput() {
        return this._gatewayServiceMesh.internalValue;
    }
    get serviceNetworking() {
        return this._serviceNetworking;
    }
    putServiceNetworking(value) {
        this._serviceNetworking.internalValue = value;
    }
    resetServiceNetworking() {
        this._serviceNetworking.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceNetworkingInput() {
        return this._serviceNetworking.internalValue;
    }
}
exports.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesOutputReference = ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesOutputReference;
_y = JSII_RTTI_SYMBOL_1;
ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesOutputReference[_y] = { fqn: "@cdktf/provider-google.clouddeployDeliveryPipeline.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesOutputReference", version: "14.13.1" };
function clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cloud_run: clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigCloudRunToTerraform(struct.cloudRun),
        kubernetes: clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesToTerraform(struct.kubernetes),
    };
}
exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigToTerraform = clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigToTerraform;
function clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cloud_run: {
            value: clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigCloudRunToHclTerraform(struct.cloudRun),
            isBlock: true,
            type: "list",
            storageClassType: "ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigCloudRunList",
        },
        kubernetes: {
            value: clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesToHclTerraform(struct.kubernetes),
            isBlock: true,
            type: "list",
            storageClassType: "ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigToHclTerraform = clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigToHclTerraform;
class ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // cloud_run - computed: false, optional: true, required: false
        this._cloudRun = new ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigCloudRunOutputReference(this, "cloud_run");
        // kubernetes - computed: false, optional: true, required: false
        this._kubernetes = new ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigKubernetesOutputReference(this, "kubernetes");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cloudRun?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.cloudRun = this._cloudRun?.internalValue;
        }
        if (this._kubernetes?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.kubernetes = this._kubernetes?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cloudRun.internalValue = undefined;
            this._kubernetes.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cloudRun.internalValue = value.cloudRun;
            this._kubernetes.internalValue = value.kubernetes;
        }
    }
    get cloudRun() {
        return this._cloudRun;
    }
    putCloudRun(value) {
        this._cloudRun.internalValue = value;
    }
    resetCloudRun() {
        this._cloudRun.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cloudRunInput() {
        return this._cloudRun.internalValue;
    }
    get kubernetes() {
        return this._kubernetes;
    }
    putKubernetes(value) {
        this._kubernetes.internalValue = value;
    }
    resetKubernetes() {
        this._kubernetes.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kubernetesInput() {
        return this._kubernetes.internalValue;
    }
}
exports.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigOutputReference = ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigOutputReference;
_z = JSII_RTTI_SYMBOL_1;
ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigOutputReference[_z] = { fqn: "@cdktf/provider-google.clouddeployDeliveryPipeline.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigOutputReference", version: "14.13.1" };
function clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        canary_deployment: clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentToTerraform(struct.canaryDeployment),
        custom_canary_deployment: clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentToTerraform(struct.customCanaryDeployment),
        runtime_config: clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigToTerraform(struct.runtimeConfig),
    };
}
exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryToTerraform = clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryToTerraform;
function clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        canary_deployment: {
            value: clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentToHclTerraform(struct.canaryDeployment),
            isBlock: true,
            type: "list",
            storageClassType: "ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentList",
        },
        custom_canary_deployment: {
            value: clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentToHclTerraform(struct.customCanaryDeployment),
            isBlock: true,
            type: "list",
            storageClassType: "ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentList",
        },
        runtime_config: {
            value: clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigToHclTerraform(struct.runtimeConfig),
            isBlock: true,
            type: "list",
            storageClassType: "ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryToHclTerraform = clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryToHclTerraform;
class ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // canary_deployment - computed: false, optional: true, required: false
        this._canaryDeployment = new ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCanaryDeploymentOutputReference(this, "canary_deployment");
        // custom_canary_deployment - computed: false, optional: true, required: false
        this._customCanaryDeployment = new ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryCustomCanaryDeploymentOutputReference(this, "custom_canary_deployment");
        // runtime_config - computed: false, optional: true, required: false
        this._runtimeConfig = new ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryRuntimeConfigOutputReference(this, "runtime_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._canaryDeployment?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.canaryDeployment = this._canaryDeployment?.internalValue;
        }
        if (this._customCanaryDeployment?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customCanaryDeployment = this._customCanaryDeployment?.internalValue;
        }
        if (this._runtimeConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.runtimeConfig = this._runtimeConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._canaryDeployment.internalValue = undefined;
            this._customCanaryDeployment.internalValue = undefined;
            this._runtimeConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._canaryDeployment.internalValue = value.canaryDeployment;
            this._customCanaryDeployment.internalValue = value.customCanaryDeployment;
            this._runtimeConfig.internalValue = value.runtimeConfig;
        }
    }
    get canaryDeployment() {
        return this._canaryDeployment;
    }
    putCanaryDeployment(value) {
        this._canaryDeployment.internalValue = value;
    }
    resetCanaryDeployment() {
        this._canaryDeployment.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get canaryDeploymentInput() {
        return this._canaryDeployment.internalValue;
    }
    get customCanaryDeployment() {
        return this._customCanaryDeployment;
    }
    putCustomCanaryDeployment(value) {
        this._customCanaryDeployment.internalValue = value;
    }
    resetCustomCanaryDeployment() {
        this._customCanaryDeployment.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customCanaryDeploymentInput() {
        return this._customCanaryDeployment.internalValue;
    }
    get runtimeConfig() {
        return this._runtimeConfig;
    }
    putRuntimeConfig(value) {
        this._runtimeConfig.internalValue = value;
    }
    resetRuntimeConfig() {
        this._runtimeConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get runtimeConfigInput() {
        return this._runtimeConfig.internalValue;
    }
}
exports.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryOutputReference = ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryOutputReference[_0] = { fqn: "@cdktf/provider-google.clouddeployDeliveryPipeline.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryOutputReference", version: "14.13.1" };
function clouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardPostdeployToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        actions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.actions),
    };
}
exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardPostdeployToTerraform = clouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardPostdeployToTerraform;
function clouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardPostdeployToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        actions: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.actions),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardPostdeployToHclTerraform = clouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardPostdeployToHclTerraform;
class ClouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardPostdeployOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._actions !== undefined) {
            hasAnyValues = true;
            internalValueResult.actions = this._actions;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._actions = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._actions = value.actions;
        }
    }
    get actions() {
        return this.getListAttribute('actions');
    }
    set actions(value) {
        this._actions = value;
    }
    resetActions() {
        this._actions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get actionsInput() {
        return this._actions;
    }
}
exports.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardPostdeployOutputReference = ClouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardPostdeployOutputReference;
_1 = JSII_RTTI_SYMBOL_1;
ClouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardPostdeployOutputReference[_1] = { fqn: "@cdktf/provider-google.clouddeployDeliveryPipeline.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardPostdeployOutputReference", version: "14.13.1" };
function clouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardPredeployToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        actions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.actions),
    };
}
exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardPredeployToTerraform = clouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardPredeployToTerraform;
function clouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardPredeployToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        actions: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.actions),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardPredeployToHclTerraform = clouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardPredeployToHclTerraform;
class ClouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardPredeployOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._actions !== undefined) {
            hasAnyValues = true;
            internalValueResult.actions = this._actions;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._actions = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._actions = value.actions;
        }
    }
    get actions() {
        return this.getListAttribute('actions');
    }
    set actions(value) {
        this._actions = value;
    }
    resetActions() {
        this._actions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get actionsInput() {
        return this._actions;
    }
}
exports.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardPredeployOutputReference = ClouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardPredeployOutputReference;
_2 = JSII_RTTI_SYMBOL_1;
ClouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardPredeployOutputReference[_2] = { fqn: "@cdktf/provider-google.clouddeployDeliveryPipeline.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardPredeployOutputReference", version: "14.13.1" };
function clouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        verify: cdktf.booleanToTerraform(struct.verify),
        postdeploy: clouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardPostdeployToTerraform(struct.postdeploy),
        predeploy: clouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardPredeployToTerraform(struct.predeploy),
    };
}
exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardToTerraform = clouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardToTerraform;
function clouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        verify: {
            value: cdktf.booleanToHclTerraform(struct.verify),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        postdeploy: {
            value: clouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardPostdeployToHclTerraform(struct.postdeploy),
            isBlock: true,
            type: "list",
            storageClassType: "ClouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardPostdeployList",
        },
        predeploy: {
            value: clouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardPredeployToHclTerraform(struct.predeploy),
            isBlock: true,
            type: "list",
            storageClassType: "ClouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardPredeployList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardToHclTerraform = clouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardToHclTerraform;
class ClouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // postdeploy - computed: false, optional: true, required: false
        this._postdeploy = new ClouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardPostdeployOutputReference(this, "postdeploy");
        // predeploy - computed: false, optional: true, required: false
        this._predeploy = new ClouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardPredeployOutputReference(this, "predeploy");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._verify !== undefined) {
            hasAnyValues = true;
            internalValueResult.verify = this._verify;
        }
        if (this._postdeploy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.postdeploy = this._postdeploy?.internalValue;
        }
        if (this._predeploy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.predeploy = this._predeploy?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._verify = undefined;
            this._postdeploy.internalValue = undefined;
            this._predeploy.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._verify = value.verify;
            this._postdeploy.internalValue = value.postdeploy;
            this._predeploy.internalValue = value.predeploy;
        }
    }
    get verify() {
        return this.getBooleanAttribute('verify');
    }
    set verify(value) {
        this._verify = value;
    }
    resetVerify() {
        this._verify = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get verifyInput() {
        return this._verify;
    }
    get postdeploy() {
        return this._postdeploy;
    }
    putPostdeploy(value) {
        this._postdeploy.internalValue = value;
    }
    resetPostdeploy() {
        this._postdeploy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get postdeployInput() {
        return this._postdeploy.internalValue;
    }
    get predeploy() {
        return this._predeploy;
    }
    putPredeploy(value) {
        this._predeploy.internalValue = value;
    }
    resetPredeploy() {
        this._predeploy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get predeployInput() {
        return this._predeploy.internalValue;
    }
}
exports.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardOutputReference = ClouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardOutputReference;
_3 = JSII_RTTI_SYMBOL_1;
ClouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardOutputReference[_3] = { fqn: "@cdktf/provider-google.clouddeployDeliveryPipeline.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardOutputReference", version: "14.13.1" };
function clouddeployDeliveryPipelineSerialPipelineStagesStrategyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        canary: clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryToTerraform(struct.canary),
        standard: clouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardToTerraform(struct.standard),
    };
}
exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyToTerraform = clouddeployDeliveryPipelineSerialPipelineStagesStrategyToTerraform;
function clouddeployDeliveryPipelineSerialPipelineStagesStrategyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        canary: {
            value: clouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryToHclTerraform(struct.canary),
            isBlock: true,
            type: "list",
            storageClassType: "ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryList",
        },
        standard: {
            value: clouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardToHclTerraform(struct.standard),
            isBlock: true,
            type: "list",
            storageClassType: "ClouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.clouddeployDeliveryPipelineSerialPipelineStagesStrategyToHclTerraform = clouddeployDeliveryPipelineSerialPipelineStagesStrategyToHclTerraform;
class ClouddeployDeliveryPipelineSerialPipelineStagesStrategyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // canary - computed: false, optional: true, required: false
        this._canary = new ClouddeployDeliveryPipelineSerialPipelineStagesStrategyCanaryOutputReference(this, "canary");
        // standard - computed: false, optional: true, required: false
        this._standard = new ClouddeployDeliveryPipelineSerialPipelineStagesStrategyStandardOutputReference(this, "standard");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._canary?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.canary = this._canary?.internalValue;
        }
        if (this._standard?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.standard = this._standard?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._canary.internalValue = undefined;
            this._standard.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._canary.internalValue = value.canary;
            this._standard.internalValue = value.standard;
        }
    }
    get canary() {
        return this._canary;
    }
    putCanary(value) {
        this._canary.internalValue = value;
    }
    resetCanary() {
        this._canary.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get canaryInput() {
        return this._canary.internalValue;
    }
    get standard() {
        return this._standard;
    }
    putStandard(value) {
        this._standard.internalValue = value;
    }
    resetStandard() {
        this._standard.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get standardInput() {
        return this._standard.internalValue;
    }
}
exports.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyOutputReference = ClouddeployDeliveryPipelineSerialPipelineStagesStrategyOutputReference;
_4 = JSII_RTTI_SYMBOL_1;
ClouddeployDeliveryPipelineSerialPipelineStagesStrategyOutputReference[_4] = { fqn: "@cdktf/provider-google.clouddeployDeliveryPipeline.ClouddeployDeliveryPipelineSerialPipelineStagesStrategyOutputReference", version: "14.13.1" };
function clouddeployDeliveryPipelineSerialPipelineStagesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        profiles: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.profiles),
        target_id: cdktf.stringToTerraform(struct.targetId),
        deploy_parameters: cdktf.listMapper(clouddeployDeliveryPipelineSerialPipelineStagesDeployParametersToTerraform, true)(struct.deployParameters),
        strategy: clouddeployDeliveryPipelineSerialPipelineStagesStrategyToTerraform(struct.strategy),
    };
}
exports.clouddeployDeliveryPipelineSerialPipelineStagesToTerraform = clouddeployDeliveryPipelineSerialPipelineStagesToTerraform;
function clouddeployDeliveryPipelineSerialPipelineStagesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        profiles: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.profiles),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        target_id: {
            value: cdktf.stringToHclTerraform(struct.targetId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        deploy_parameters: {
            value: cdktf.listMapperHcl(clouddeployDeliveryPipelineSerialPipelineStagesDeployParametersToHclTerraform, true)(struct.deployParameters),
            isBlock: true,
            type: "list",
            storageClassType: "ClouddeployDeliveryPipelineSerialPipelineStagesDeployParametersList",
        },
        strategy: {
            value: clouddeployDeliveryPipelineSerialPipelineStagesStrategyToHclTerraform(struct.strategy),
            isBlock: true,
            type: "list",
            storageClassType: "ClouddeployDeliveryPipelineSerialPipelineStagesStrategyList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.clouddeployDeliveryPipelineSerialPipelineStagesToHclTerraform = clouddeployDeliveryPipelineSerialPipelineStagesToHclTerraform;
class ClouddeployDeliveryPipelineSerialPipelineStagesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // deploy_parameters - computed: false, optional: true, required: false
        this._deployParameters = new ClouddeployDeliveryPipelineSerialPipelineStagesDeployParametersList(this, "deploy_parameters", false);
        // strategy - computed: false, optional: true, required: false
        this._strategy = new ClouddeployDeliveryPipelineSerialPipelineStagesStrategyOutputReference(this, "strategy");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._profiles !== undefined) {
            hasAnyValues = true;
            internalValueResult.profiles = this._profiles;
        }
        if (this._targetId !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetId = this._targetId;
        }
        if (this._deployParameters?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.deployParameters = this._deployParameters?.internalValue;
        }
        if (this._strategy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.strategy = this._strategy?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._profiles = undefined;
            this._targetId = undefined;
            this._deployParameters.internalValue = undefined;
            this._strategy.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._profiles = value.profiles;
            this._targetId = value.targetId;
            this._deployParameters.internalValue = value.deployParameters;
            this._strategy.internalValue = value.strategy;
        }
    }
    get profiles() {
        return this.getListAttribute('profiles');
    }
    set profiles(value) {
        this._profiles = value;
    }
    resetProfiles() {
        this._profiles = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get profilesInput() {
        return this._profiles;
    }
    get targetId() {
        return this.getStringAttribute('target_id');
    }
    set targetId(value) {
        this._targetId = value;
    }
    resetTargetId() {
        this._targetId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetIdInput() {
        return this._targetId;
    }
    get deployParameters() {
        return this._deployParameters;
    }
    putDeployParameters(value) {
        this._deployParameters.internalValue = value;
    }
    resetDeployParameters() {
        this._deployParameters.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deployParametersInput() {
        return this._deployParameters.internalValue;
    }
    get strategy() {
        return this._strategy;
    }
    putStrategy(value) {
        this._strategy.internalValue = value;
    }
    resetStrategy() {
        this._strategy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get strategyInput() {
        return this._strategy.internalValue;
    }
}
exports.ClouddeployDeliveryPipelineSerialPipelineStagesOutputReference = ClouddeployDeliveryPipelineSerialPipelineStagesOutputReference;
_5 = JSII_RTTI_SYMBOL_1;
ClouddeployDeliveryPipelineSerialPipelineStagesOutputReference[_5] = { fqn: "@cdktf/provider-google.clouddeployDeliveryPipeline.ClouddeployDeliveryPipelineSerialPipelineStagesOutputReference", version: "14.13.1" };
class ClouddeployDeliveryPipelineSerialPipelineStagesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ClouddeployDeliveryPipelineSerialPipelineStagesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ClouddeployDeliveryPipelineSerialPipelineStagesList = ClouddeployDeliveryPipelineSerialPipelineStagesList;
_6 = JSII_RTTI_SYMBOL_1;
ClouddeployDeliveryPipelineSerialPipelineStagesList[_6] = { fqn: "@cdktf/provider-google.clouddeployDeliveryPipeline.ClouddeployDeliveryPipelineSerialPipelineStagesList", version: "14.13.1" };
function clouddeployDeliveryPipelineSerialPipelineToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        stages: cdktf.listMapper(clouddeployDeliveryPipelineSerialPipelineStagesToTerraform, true)(struct.stages),
    };
}
exports.clouddeployDeliveryPipelineSerialPipelineToTerraform = clouddeployDeliveryPipelineSerialPipelineToTerraform;
function clouddeployDeliveryPipelineSerialPipelineToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        stages: {
            value: cdktf.listMapperHcl(clouddeployDeliveryPipelineSerialPipelineStagesToHclTerraform, true)(struct.stages),
            isBlock: true,
            type: "list",
            storageClassType: "ClouddeployDeliveryPipelineSerialPipelineStagesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.clouddeployDeliveryPipelineSerialPipelineToHclTerraform = clouddeployDeliveryPipelineSerialPipelineToHclTerraform;
class ClouddeployDeliveryPipelineSerialPipelineOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // stages - computed: false, optional: true, required: false
        this._stages = new ClouddeployDeliveryPipelineSerialPipelineStagesList(this, "stages", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._stages?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.stages = this._stages?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._stages.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._stages.internalValue = value.stages;
        }
    }
    get stages() {
        return this._stages;
    }
    putStages(value) {
        this._stages.internalValue = value;
    }
    resetStages() {
        this._stages.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stagesInput() {
        return this._stages.internalValue;
    }
}
exports.ClouddeployDeliveryPipelineSerialPipelineOutputReference = ClouddeployDeliveryPipelineSerialPipelineOutputReference;
_7 = JSII_RTTI_SYMBOL_1;
ClouddeployDeliveryPipelineSerialPipelineOutputReference[_7] = { fqn: "@cdktf/provider-google.clouddeployDeliveryPipeline.ClouddeployDeliveryPipelineSerialPipelineOutputReference", version: "14.13.1" };
function clouddeployDeliveryPipelineTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.clouddeployDeliveryPipelineTimeoutsToTerraform = clouddeployDeliveryPipelineTimeoutsToTerraform;
function clouddeployDeliveryPipelineTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.clouddeployDeliveryPipelineTimeoutsToHclTerraform = clouddeployDeliveryPipelineTimeoutsToHclTerraform;
class ClouddeployDeliveryPipelineTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.ClouddeployDeliveryPipelineTimeoutsOutputReference = ClouddeployDeliveryPipelineTimeoutsOutputReference;
_8 = JSII_RTTI_SYMBOL_1;
ClouddeployDeliveryPipelineTimeoutsOutputReference[_8] = { fqn: "@cdktf/provider-google.clouddeployDeliveryPipeline.ClouddeployDeliveryPipelineTimeoutsOutputReference", version: "14.13.1" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/clouddeploy_delivery_pipeline google_clouddeploy_delivery_pipeline}
*/
class ClouddeployDeliveryPipeline extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a ClouddeployDeliveryPipeline resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the ClouddeployDeliveryPipeline to import
    * @param importFromId The id of the existing ClouddeployDeliveryPipeline that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/clouddeploy_delivery_pipeline#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the ClouddeployDeliveryPipeline to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_clouddeploy_delivery_pipeline", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/clouddeploy_delivery_pipeline google_clouddeploy_delivery_pipeline} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ClouddeployDeliveryPipelineConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_clouddeploy_delivery_pipeline',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // condition - computed: true, optional: false, required: false
        this._condition = new ClouddeployDeliveryPipelineConditionList(this, "condition", false);
        // effective_annotations - computed: true, optional: false, required: false
        this._effectiveAnnotations = new cdktf.StringMap(this, "effective_annotations");
        // effective_labels - computed: true, optional: false, required: false
        this._effectiveLabels = new cdktf.StringMap(this, "effective_labels");
        // terraform_labels - computed: true, optional: false, required: false
        this._terraformLabels = new cdktf.StringMap(this, "terraform_labels");
        // serial_pipeline - computed: false, optional: true, required: false
        this._serialPipeline = new ClouddeployDeliveryPipelineSerialPipelineOutputReference(this, "serial_pipeline");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new ClouddeployDeliveryPipelineTimeoutsOutputReference(this, "timeouts");
        this._annotations = config.annotations;
        this._description = config.description;
        this._id = config.id;
        this._labels = config.labels;
        this._location = config.location;
        this._name = config.name;
        this._project = config.project;
        this._suspended = config.suspended;
        this._serialPipeline.internalValue = config.serialPipeline;
        this._timeouts.internalValue = config.timeouts;
    }
    get annotations() {
        return this.getStringMapAttribute('annotations');
    }
    set annotations(value) {
        this._annotations = value;
    }
    resetAnnotations() {
        this._annotations = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get annotationsInput() {
        return this._annotations;
    }
    get condition() {
        return this._condition;
    }
    // create_time - computed: true, optional: false, required: false
    get createTime() {
        return this.getStringAttribute('create_time');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get effectiveAnnotations() {
        return this._effectiveAnnotations;
    }
    get effectiveLabels() {
        return this._effectiveLabels;
    }
    // etag - computed: true, optional: false, required: false
    get etag() {
        return this.getStringAttribute('etag');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get suspended() {
        return this.getBooleanAttribute('suspended');
    }
    set suspended(value) {
        this._suspended = value;
    }
    resetSuspended() {
        this._suspended = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get suspendedInput() {
        return this._suspended;
    }
    get terraformLabels() {
        return this._terraformLabels;
    }
    // uid - computed: true, optional: false, required: false
    get uid() {
        return this.getStringAttribute('uid');
    }
    // update_time - computed: true, optional: false, required: false
    get updateTime() {
        return this.getStringAttribute('update_time');
    }
    get serialPipeline() {
        return this._serialPipeline;
    }
    putSerialPipeline(value) {
        this._serialPipeline.internalValue = value;
    }
    resetSerialPipeline() {
        this._serialPipeline.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serialPipelineInput() {
        return this._serialPipeline.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            annotations: cdktf.hashMapper(cdktf.stringToTerraform)(this._annotations),
            description: cdktf.stringToTerraform(this._description),
            id: cdktf.stringToTerraform(this._id),
            labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._labels),
            location: cdktf.stringToTerraform(this._location),
            name: cdktf.stringToTerraform(this._name),
            project: cdktf.stringToTerraform(this._project),
            suspended: cdktf.booleanToTerraform(this._suspended),
            serial_pipeline: clouddeployDeliveryPipelineSerialPipelineToTerraform(this._serialPipeline.internalValue),
            timeouts: clouddeployDeliveryPipelineTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            annotations: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._annotations),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            description: {
                value: cdktf.stringToHclTerraform(this._description),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            labels: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._labels),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            location: {
                value: cdktf.stringToHclTerraform(this._location),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            name: {
                value: cdktf.stringToHclTerraform(this._name),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            project: {
                value: cdktf.stringToHclTerraform(this._project),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            suspended: {
                value: cdktf.booleanToHclTerraform(this._suspended),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            serial_pipeline: {
                value: clouddeployDeliveryPipelineSerialPipelineToHclTerraform(this._serialPipeline.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ClouddeployDeliveryPipelineSerialPipelineList",
            },
            timeouts: {
                value: clouddeployDeliveryPipelineTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "ClouddeployDeliveryPipelineTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.ClouddeployDeliveryPipeline = ClouddeployDeliveryPipeline;
_9 = JSII_RTTI_SYMBOL_1;
ClouddeployDeliveryPipeline[_9] = { fqn: "@cdktf/provider-google.clouddeployDeliveryPipeline.ClouddeployDeliveryPipeline", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
ClouddeployDeliveryPipeline.tfResourceType = "google_clouddeploy_delivery_pipeline";
//# sourceMappingURL=data:application/json;base64,