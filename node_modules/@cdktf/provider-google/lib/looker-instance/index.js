"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
Object.defineProperty(exports, "__esModule", { value: true });
exports.LookerInstance = exports.LookerInstanceUserMetadataOutputReference = exports.lookerInstanceUserMetadataToHclTerraform = exports.lookerInstanceUserMetadataToTerraform = exports.LookerInstanceTimeoutsOutputReference = exports.lookerInstanceTimeoutsToHclTerraform = exports.lookerInstanceTimeoutsToTerraform = exports.LookerInstancePscConfigOutputReference = exports.lookerInstancePscConfigToHclTerraform = exports.lookerInstancePscConfigToTerraform = exports.LookerInstancePscConfigServiceAttachmentsList = exports.LookerInstancePscConfigServiceAttachmentsOutputReference = exports.lookerInstancePscConfigServiceAttachmentsToHclTerraform = exports.lookerInstancePscConfigServiceAttachmentsToTerraform = exports.LookerInstanceOauthConfigOutputReference = exports.lookerInstanceOauthConfigToHclTerraform = exports.lookerInstanceOauthConfigToTerraform = exports.LookerInstanceMaintenanceWindowOutputReference = exports.lookerInstanceMaintenanceWindowToHclTerraform = exports.lookerInstanceMaintenanceWindowToTerraform = exports.LookerInstanceMaintenanceWindowStartTimeOutputReference = exports.lookerInstanceMaintenanceWindowStartTimeToHclTerraform = exports.lookerInstanceMaintenanceWindowStartTimeToTerraform = exports.LookerInstanceEncryptionConfigOutputReference = exports.lookerInstanceEncryptionConfigToHclTerraform = exports.lookerInstanceEncryptionConfigToTerraform = exports.LookerInstanceDenyMaintenancePeriodOutputReference = exports.lookerInstanceDenyMaintenancePeriodToHclTerraform = exports.lookerInstanceDenyMaintenancePeriodToTerraform = exports.LookerInstanceDenyMaintenancePeriodTimeOutputReference = exports.lookerInstanceDenyMaintenancePeriodTimeToHclTerraform = exports.lookerInstanceDenyMaintenancePeriodTimeToTerraform = exports.LookerInstanceDenyMaintenancePeriodStartDateOutputReference = exports.lookerInstanceDenyMaintenancePeriodStartDateToHclTerraform = exports.lookerInstanceDenyMaintenancePeriodStartDateToTerraform = exports.LookerInstanceDenyMaintenancePeriodEndDateOutputReference = exports.lookerInstanceDenyMaintenancePeriodEndDateToHclTerraform = exports.lookerInstanceDenyMaintenancePeriodEndDateToTerraform = exports.LookerInstanceCustomDomainOutputReference = exports.lookerInstanceCustomDomainToHclTerraform = exports.lookerInstanceCustomDomainToTerraform = exports.LookerInstanceAdminSettingsOutputReference = exports.lookerInstanceAdminSettingsToHclTerraform = exports.lookerInstanceAdminSettingsToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function lookerInstanceAdminSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allowed_email_domains: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowedEmailDomains),
    };
}
exports.lookerInstanceAdminSettingsToTerraform = lookerInstanceAdminSettingsToTerraform;
function lookerInstanceAdminSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        allowed_email_domains: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.allowedEmailDomains),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lookerInstanceAdminSettingsToHclTerraform = lookerInstanceAdminSettingsToHclTerraform;
class LookerInstanceAdminSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowedEmailDomains !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowedEmailDomains = this._allowedEmailDomains;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowedEmailDomains = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowedEmailDomains = value.allowedEmailDomains;
        }
    }
    get allowedEmailDomains() {
        return this.getListAttribute('allowed_email_domains');
    }
    set allowedEmailDomains(value) {
        this._allowedEmailDomains = value;
    }
    resetAllowedEmailDomains() {
        this._allowedEmailDomains = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowedEmailDomainsInput() {
        return this._allowedEmailDomains;
    }
}
exports.LookerInstanceAdminSettingsOutputReference = LookerInstanceAdminSettingsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
LookerInstanceAdminSettingsOutputReference[_a] = { fqn: "@cdktf/provider-google.lookerInstance.LookerInstanceAdminSettingsOutputReference", version: "14.13.1" };
function lookerInstanceCustomDomainToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        domain: cdktf.stringToTerraform(struct.domain),
    };
}
exports.lookerInstanceCustomDomainToTerraform = lookerInstanceCustomDomainToTerraform;
function lookerInstanceCustomDomainToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        domain: {
            value: cdktf.stringToHclTerraform(struct.domain),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lookerInstanceCustomDomainToHclTerraform = lookerInstanceCustomDomainToHclTerraform;
class LookerInstanceCustomDomainOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._domain !== undefined) {
            hasAnyValues = true;
            internalValueResult.domain = this._domain;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._domain = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._domain = value.domain;
        }
    }
    get domain() {
        return this.getStringAttribute('domain');
    }
    set domain(value) {
        this._domain = value;
    }
    resetDomain() {
        this._domain = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get domainInput() {
        return this._domain;
    }
    // state - computed: true, optional: false, required: false
    get state() {
        return this.getStringAttribute('state');
    }
}
exports.LookerInstanceCustomDomainOutputReference = LookerInstanceCustomDomainOutputReference;
_b = JSII_RTTI_SYMBOL_1;
LookerInstanceCustomDomainOutputReference[_b] = { fqn: "@cdktf/provider-google.lookerInstance.LookerInstanceCustomDomainOutputReference", version: "14.13.1" };
function lookerInstanceDenyMaintenancePeriodEndDateToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        day: cdktf.numberToTerraform(struct.day),
        month: cdktf.numberToTerraform(struct.month),
        year: cdktf.numberToTerraform(struct.year),
    };
}
exports.lookerInstanceDenyMaintenancePeriodEndDateToTerraform = lookerInstanceDenyMaintenancePeriodEndDateToTerraform;
function lookerInstanceDenyMaintenancePeriodEndDateToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        day: {
            value: cdktf.numberToHclTerraform(struct.day),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        month: {
            value: cdktf.numberToHclTerraform(struct.month),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        year: {
            value: cdktf.numberToHclTerraform(struct.year),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lookerInstanceDenyMaintenancePeriodEndDateToHclTerraform = lookerInstanceDenyMaintenancePeriodEndDateToHclTerraform;
class LookerInstanceDenyMaintenancePeriodEndDateOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._day !== undefined) {
            hasAnyValues = true;
            internalValueResult.day = this._day;
        }
        if (this._month !== undefined) {
            hasAnyValues = true;
            internalValueResult.month = this._month;
        }
        if (this._year !== undefined) {
            hasAnyValues = true;
            internalValueResult.year = this._year;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._day = undefined;
            this._month = undefined;
            this._year = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._day = value.day;
            this._month = value.month;
            this._year = value.year;
        }
    }
    get day() {
        return this.getNumberAttribute('day');
    }
    set day(value) {
        this._day = value;
    }
    resetDay() {
        this._day = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dayInput() {
        return this._day;
    }
    get month() {
        return this.getNumberAttribute('month');
    }
    set month(value) {
        this._month = value;
    }
    resetMonth() {
        this._month = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get monthInput() {
        return this._month;
    }
    get year() {
        return this.getNumberAttribute('year');
    }
    set year(value) {
        this._year = value;
    }
    resetYear() {
        this._year = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get yearInput() {
        return this._year;
    }
}
exports.LookerInstanceDenyMaintenancePeriodEndDateOutputReference = LookerInstanceDenyMaintenancePeriodEndDateOutputReference;
_c = JSII_RTTI_SYMBOL_1;
LookerInstanceDenyMaintenancePeriodEndDateOutputReference[_c] = { fqn: "@cdktf/provider-google.lookerInstance.LookerInstanceDenyMaintenancePeriodEndDateOutputReference", version: "14.13.1" };
function lookerInstanceDenyMaintenancePeriodStartDateToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        day: cdktf.numberToTerraform(struct.day),
        month: cdktf.numberToTerraform(struct.month),
        year: cdktf.numberToTerraform(struct.year),
    };
}
exports.lookerInstanceDenyMaintenancePeriodStartDateToTerraform = lookerInstanceDenyMaintenancePeriodStartDateToTerraform;
function lookerInstanceDenyMaintenancePeriodStartDateToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        day: {
            value: cdktf.numberToHclTerraform(struct.day),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        month: {
            value: cdktf.numberToHclTerraform(struct.month),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        year: {
            value: cdktf.numberToHclTerraform(struct.year),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lookerInstanceDenyMaintenancePeriodStartDateToHclTerraform = lookerInstanceDenyMaintenancePeriodStartDateToHclTerraform;
class LookerInstanceDenyMaintenancePeriodStartDateOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._day !== undefined) {
            hasAnyValues = true;
            internalValueResult.day = this._day;
        }
        if (this._month !== undefined) {
            hasAnyValues = true;
            internalValueResult.month = this._month;
        }
        if (this._year !== undefined) {
            hasAnyValues = true;
            internalValueResult.year = this._year;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._day = undefined;
            this._month = undefined;
            this._year = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._day = value.day;
            this._month = value.month;
            this._year = value.year;
        }
    }
    get day() {
        return this.getNumberAttribute('day');
    }
    set day(value) {
        this._day = value;
    }
    resetDay() {
        this._day = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dayInput() {
        return this._day;
    }
    get month() {
        return this.getNumberAttribute('month');
    }
    set month(value) {
        this._month = value;
    }
    resetMonth() {
        this._month = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get monthInput() {
        return this._month;
    }
    get year() {
        return this.getNumberAttribute('year');
    }
    set year(value) {
        this._year = value;
    }
    resetYear() {
        this._year = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get yearInput() {
        return this._year;
    }
}
exports.LookerInstanceDenyMaintenancePeriodStartDateOutputReference = LookerInstanceDenyMaintenancePeriodStartDateOutputReference;
_d = JSII_RTTI_SYMBOL_1;
LookerInstanceDenyMaintenancePeriodStartDateOutputReference[_d] = { fqn: "@cdktf/provider-google.lookerInstance.LookerInstanceDenyMaintenancePeriodStartDateOutputReference", version: "14.13.1" };
function lookerInstanceDenyMaintenancePeriodTimeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        hours: cdktf.numberToTerraform(struct.hours),
        minutes: cdktf.numberToTerraform(struct.minutes),
        nanos: cdktf.numberToTerraform(struct.nanos),
        seconds: cdktf.numberToTerraform(struct.seconds),
    };
}
exports.lookerInstanceDenyMaintenancePeriodTimeToTerraform = lookerInstanceDenyMaintenancePeriodTimeToTerraform;
function lookerInstanceDenyMaintenancePeriodTimeToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        hours: {
            value: cdktf.numberToHclTerraform(struct.hours),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        minutes: {
            value: cdktf.numberToHclTerraform(struct.minutes),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        nanos: {
            value: cdktf.numberToHclTerraform(struct.nanos),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        seconds: {
            value: cdktf.numberToHclTerraform(struct.seconds),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lookerInstanceDenyMaintenancePeriodTimeToHclTerraform = lookerInstanceDenyMaintenancePeriodTimeToHclTerraform;
class LookerInstanceDenyMaintenancePeriodTimeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hours !== undefined) {
            hasAnyValues = true;
            internalValueResult.hours = this._hours;
        }
        if (this._minutes !== undefined) {
            hasAnyValues = true;
            internalValueResult.minutes = this._minutes;
        }
        if (this._nanos !== undefined) {
            hasAnyValues = true;
            internalValueResult.nanos = this._nanos;
        }
        if (this._seconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.seconds = this._seconds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hours = undefined;
            this._minutes = undefined;
            this._nanos = undefined;
            this._seconds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hours = value.hours;
            this._minutes = value.minutes;
            this._nanos = value.nanos;
            this._seconds = value.seconds;
        }
    }
    get hours() {
        return this.getNumberAttribute('hours');
    }
    set hours(value) {
        this._hours = value;
    }
    resetHours() {
        this._hours = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hoursInput() {
        return this._hours;
    }
    get minutes() {
        return this.getNumberAttribute('minutes');
    }
    set minutes(value) {
        this._minutes = value;
    }
    resetMinutes() {
        this._minutes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minutesInput() {
        return this._minutes;
    }
    get nanos() {
        return this.getNumberAttribute('nanos');
    }
    set nanos(value) {
        this._nanos = value;
    }
    resetNanos() {
        this._nanos = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nanosInput() {
        return this._nanos;
    }
    get seconds() {
        return this.getNumberAttribute('seconds');
    }
    set seconds(value) {
        this._seconds = value;
    }
    resetSeconds() {
        this._seconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secondsInput() {
        return this._seconds;
    }
}
exports.LookerInstanceDenyMaintenancePeriodTimeOutputReference = LookerInstanceDenyMaintenancePeriodTimeOutputReference;
_e = JSII_RTTI_SYMBOL_1;
LookerInstanceDenyMaintenancePeriodTimeOutputReference[_e] = { fqn: "@cdktf/provider-google.lookerInstance.LookerInstanceDenyMaintenancePeriodTimeOutputReference", version: "14.13.1" };
function lookerInstanceDenyMaintenancePeriodToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        end_date: lookerInstanceDenyMaintenancePeriodEndDateToTerraform(struct.endDate),
        start_date: lookerInstanceDenyMaintenancePeriodStartDateToTerraform(struct.startDate),
        time: lookerInstanceDenyMaintenancePeriodTimeToTerraform(struct.time),
    };
}
exports.lookerInstanceDenyMaintenancePeriodToTerraform = lookerInstanceDenyMaintenancePeriodToTerraform;
function lookerInstanceDenyMaintenancePeriodToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        end_date: {
            value: lookerInstanceDenyMaintenancePeriodEndDateToHclTerraform(struct.endDate),
            isBlock: true,
            type: "list",
            storageClassType: "LookerInstanceDenyMaintenancePeriodEndDateList",
        },
        start_date: {
            value: lookerInstanceDenyMaintenancePeriodStartDateToHclTerraform(struct.startDate),
            isBlock: true,
            type: "list",
            storageClassType: "LookerInstanceDenyMaintenancePeriodStartDateList",
        },
        time: {
            value: lookerInstanceDenyMaintenancePeriodTimeToHclTerraform(struct.time),
            isBlock: true,
            type: "list",
            storageClassType: "LookerInstanceDenyMaintenancePeriodTimeList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lookerInstanceDenyMaintenancePeriodToHclTerraform = lookerInstanceDenyMaintenancePeriodToHclTerraform;
class LookerInstanceDenyMaintenancePeriodOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // end_date - computed: false, optional: false, required: true
        this._endDate = new LookerInstanceDenyMaintenancePeriodEndDateOutputReference(this, "end_date");
        // start_date - computed: false, optional: false, required: true
        this._startDate = new LookerInstanceDenyMaintenancePeriodStartDateOutputReference(this, "start_date");
        // time - computed: false, optional: false, required: true
        this._time = new LookerInstanceDenyMaintenancePeriodTimeOutputReference(this, "time");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._endDate?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.endDate = this._endDate?.internalValue;
        }
        if (this._startDate?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.startDate = this._startDate?.internalValue;
        }
        if (this._time?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.time = this._time?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._endDate.internalValue = undefined;
            this._startDate.internalValue = undefined;
            this._time.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._endDate.internalValue = value.endDate;
            this._startDate.internalValue = value.startDate;
            this._time.internalValue = value.time;
        }
    }
    get endDate() {
        return this._endDate;
    }
    putEndDate(value) {
        this._endDate.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get endDateInput() {
        return this._endDate.internalValue;
    }
    get startDate() {
        return this._startDate;
    }
    putStartDate(value) {
        this._startDate.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get startDateInput() {
        return this._startDate.internalValue;
    }
    get time() {
        return this._time;
    }
    putTime(value) {
        this._time.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get timeInput() {
        return this._time.internalValue;
    }
}
exports.LookerInstanceDenyMaintenancePeriodOutputReference = LookerInstanceDenyMaintenancePeriodOutputReference;
_f = JSII_RTTI_SYMBOL_1;
LookerInstanceDenyMaintenancePeriodOutputReference[_f] = { fqn: "@cdktf/provider-google.lookerInstance.LookerInstanceDenyMaintenancePeriodOutputReference", version: "14.13.1" };
function lookerInstanceEncryptionConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        kms_key_name: cdktf.stringToTerraform(struct.kmsKeyName),
    };
}
exports.lookerInstanceEncryptionConfigToTerraform = lookerInstanceEncryptionConfigToTerraform;
function lookerInstanceEncryptionConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        kms_key_name: {
            value: cdktf.stringToHclTerraform(struct.kmsKeyName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lookerInstanceEncryptionConfigToHclTerraform = lookerInstanceEncryptionConfigToHclTerraform;
class LookerInstanceEncryptionConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._kmsKeyName !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyName = this._kmsKeyName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._kmsKeyName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._kmsKeyName = value.kmsKeyName;
        }
    }
    get kmsKeyName() {
        return this.getStringAttribute('kms_key_name');
    }
    set kmsKeyName(value) {
        this._kmsKeyName = value;
    }
    resetKmsKeyName() {
        this._kmsKeyName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyNameInput() {
        return this._kmsKeyName;
    }
    // kms_key_name_version - computed: true, optional: false, required: false
    get kmsKeyNameVersion() {
        return this.getStringAttribute('kms_key_name_version');
    }
    // kms_key_state - computed: true, optional: false, required: false
    get kmsKeyState() {
        return this.getStringAttribute('kms_key_state');
    }
}
exports.LookerInstanceEncryptionConfigOutputReference = LookerInstanceEncryptionConfigOutputReference;
_g = JSII_RTTI_SYMBOL_1;
LookerInstanceEncryptionConfigOutputReference[_g] = { fqn: "@cdktf/provider-google.lookerInstance.LookerInstanceEncryptionConfigOutputReference", version: "14.13.1" };
function lookerInstanceMaintenanceWindowStartTimeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        hours: cdktf.numberToTerraform(struct.hours),
        minutes: cdktf.numberToTerraform(struct.minutes),
        nanos: cdktf.numberToTerraform(struct.nanos),
        seconds: cdktf.numberToTerraform(struct.seconds),
    };
}
exports.lookerInstanceMaintenanceWindowStartTimeToTerraform = lookerInstanceMaintenanceWindowStartTimeToTerraform;
function lookerInstanceMaintenanceWindowStartTimeToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        hours: {
            value: cdktf.numberToHclTerraform(struct.hours),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        minutes: {
            value: cdktf.numberToHclTerraform(struct.minutes),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        nanos: {
            value: cdktf.numberToHclTerraform(struct.nanos),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        seconds: {
            value: cdktf.numberToHclTerraform(struct.seconds),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lookerInstanceMaintenanceWindowStartTimeToHclTerraform = lookerInstanceMaintenanceWindowStartTimeToHclTerraform;
class LookerInstanceMaintenanceWindowStartTimeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hours !== undefined) {
            hasAnyValues = true;
            internalValueResult.hours = this._hours;
        }
        if (this._minutes !== undefined) {
            hasAnyValues = true;
            internalValueResult.minutes = this._minutes;
        }
        if (this._nanos !== undefined) {
            hasAnyValues = true;
            internalValueResult.nanos = this._nanos;
        }
        if (this._seconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.seconds = this._seconds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hours = undefined;
            this._minutes = undefined;
            this._nanos = undefined;
            this._seconds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hours = value.hours;
            this._minutes = value.minutes;
            this._nanos = value.nanos;
            this._seconds = value.seconds;
        }
    }
    get hours() {
        return this.getNumberAttribute('hours');
    }
    set hours(value) {
        this._hours = value;
    }
    resetHours() {
        this._hours = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hoursInput() {
        return this._hours;
    }
    get minutes() {
        return this.getNumberAttribute('minutes');
    }
    set minutes(value) {
        this._minutes = value;
    }
    resetMinutes() {
        this._minutes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minutesInput() {
        return this._minutes;
    }
    get nanos() {
        return this.getNumberAttribute('nanos');
    }
    set nanos(value) {
        this._nanos = value;
    }
    resetNanos() {
        this._nanos = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nanosInput() {
        return this._nanos;
    }
    get seconds() {
        return this.getNumberAttribute('seconds');
    }
    set seconds(value) {
        this._seconds = value;
    }
    resetSeconds() {
        this._seconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secondsInput() {
        return this._seconds;
    }
}
exports.LookerInstanceMaintenanceWindowStartTimeOutputReference = LookerInstanceMaintenanceWindowStartTimeOutputReference;
_h = JSII_RTTI_SYMBOL_1;
LookerInstanceMaintenanceWindowStartTimeOutputReference[_h] = { fqn: "@cdktf/provider-google.lookerInstance.LookerInstanceMaintenanceWindowStartTimeOutputReference", version: "14.13.1" };
function lookerInstanceMaintenanceWindowToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        day_of_week: cdktf.stringToTerraform(struct.dayOfWeek),
        start_time: lookerInstanceMaintenanceWindowStartTimeToTerraform(struct.startTime),
    };
}
exports.lookerInstanceMaintenanceWindowToTerraform = lookerInstanceMaintenanceWindowToTerraform;
function lookerInstanceMaintenanceWindowToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        day_of_week: {
            value: cdktf.stringToHclTerraform(struct.dayOfWeek),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        start_time: {
            value: lookerInstanceMaintenanceWindowStartTimeToHclTerraform(struct.startTime),
            isBlock: true,
            type: "list",
            storageClassType: "LookerInstanceMaintenanceWindowStartTimeList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lookerInstanceMaintenanceWindowToHclTerraform = lookerInstanceMaintenanceWindowToHclTerraform;
class LookerInstanceMaintenanceWindowOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // start_time - computed: false, optional: false, required: true
        this._startTime = new LookerInstanceMaintenanceWindowStartTimeOutputReference(this, "start_time");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dayOfWeek !== undefined) {
            hasAnyValues = true;
            internalValueResult.dayOfWeek = this._dayOfWeek;
        }
        if (this._startTime?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.startTime = this._startTime?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._dayOfWeek = undefined;
            this._startTime.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._dayOfWeek = value.dayOfWeek;
            this._startTime.internalValue = value.startTime;
        }
    }
    get dayOfWeek() {
        return this.getStringAttribute('day_of_week');
    }
    set dayOfWeek(value) {
        this._dayOfWeek = value;
    }
    // Temporarily expose input value. Use with caution.
    get dayOfWeekInput() {
        return this._dayOfWeek;
    }
    get startTime() {
        return this._startTime;
    }
    putStartTime(value) {
        this._startTime.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get startTimeInput() {
        return this._startTime.internalValue;
    }
}
exports.LookerInstanceMaintenanceWindowOutputReference = LookerInstanceMaintenanceWindowOutputReference;
_j = JSII_RTTI_SYMBOL_1;
LookerInstanceMaintenanceWindowOutputReference[_j] = { fqn: "@cdktf/provider-google.lookerInstance.LookerInstanceMaintenanceWindowOutputReference", version: "14.13.1" };
function lookerInstanceOauthConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        client_id: cdktf.stringToTerraform(struct.clientId),
        client_secret: cdktf.stringToTerraform(struct.clientSecret),
    };
}
exports.lookerInstanceOauthConfigToTerraform = lookerInstanceOauthConfigToTerraform;
function lookerInstanceOauthConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        client_id: {
            value: cdktf.stringToHclTerraform(struct.clientId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        client_secret: {
            value: cdktf.stringToHclTerraform(struct.clientSecret),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lookerInstanceOauthConfigToHclTerraform = lookerInstanceOauthConfigToHclTerraform;
class LookerInstanceOauthConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._clientId !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientId = this._clientId;
        }
        if (this._clientSecret !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientSecret = this._clientSecret;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._clientId = undefined;
            this._clientSecret = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._clientId = value.clientId;
            this._clientSecret = value.clientSecret;
        }
    }
    get clientId() {
        return this.getStringAttribute('client_id');
    }
    set clientId(value) {
        this._clientId = value;
    }
    // Temporarily expose input value. Use with caution.
    get clientIdInput() {
        return this._clientId;
    }
    get clientSecret() {
        return this.getStringAttribute('client_secret');
    }
    set clientSecret(value) {
        this._clientSecret = value;
    }
    // Temporarily expose input value. Use with caution.
    get clientSecretInput() {
        return this._clientSecret;
    }
}
exports.LookerInstanceOauthConfigOutputReference = LookerInstanceOauthConfigOutputReference;
_k = JSII_RTTI_SYMBOL_1;
LookerInstanceOauthConfigOutputReference[_k] = { fqn: "@cdktf/provider-google.lookerInstance.LookerInstanceOauthConfigOutputReference", version: "14.13.1" };
function lookerInstancePscConfigServiceAttachmentsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        local_fqdn: cdktf.stringToTerraform(struct.localFqdn),
        target_service_attachment_uri: cdktf.stringToTerraform(struct.targetServiceAttachmentUri),
    };
}
exports.lookerInstancePscConfigServiceAttachmentsToTerraform = lookerInstancePscConfigServiceAttachmentsToTerraform;
function lookerInstancePscConfigServiceAttachmentsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        local_fqdn: {
            value: cdktf.stringToHclTerraform(struct.localFqdn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        target_service_attachment_uri: {
            value: cdktf.stringToHclTerraform(struct.targetServiceAttachmentUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lookerInstancePscConfigServiceAttachmentsToHclTerraform = lookerInstancePscConfigServiceAttachmentsToHclTerraform;
class LookerInstancePscConfigServiceAttachmentsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._localFqdn !== undefined) {
            hasAnyValues = true;
            internalValueResult.localFqdn = this._localFqdn;
        }
        if (this._targetServiceAttachmentUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetServiceAttachmentUri = this._targetServiceAttachmentUri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._localFqdn = undefined;
            this._targetServiceAttachmentUri = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._localFqdn = value.localFqdn;
            this._targetServiceAttachmentUri = value.targetServiceAttachmentUri;
        }
    }
    // connection_status - computed: true, optional: false, required: false
    get connectionStatus() {
        return this.getStringAttribute('connection_status');
    }
    get localFqdn() {
        return this.getStringAttribute('local_fqdn');
    }
    set localFqdn(value) {
        this._localFqdn = value;
    }
    resetLocalFqdn() {
        this._localFqdn = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get localFqdnInput() {
        return this._localFqdn;
    }
    get targetServiceAttachmentUri() {
        return this.getStringAttribute('target_service_attachment_uri');
    }
    set targetServiceAttachmentUri(value) {
        this._targetServiceAttachmentUri = value;
    }
    resetTargetServiceAttachmentUri() {
        this._targetServiceAttachmentUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetServiceAttachmentUriInput() {
        return this._targetServiceAttachmentUri;
    }
}
exports.LookerInstancePscConfigServiceAttachmentsOutputReference = LookerInstancePscConfigServiceAttachmentsOutputReference;
_l = JSII_RTTI_SYMBOL_1;
LookerInstancePscConfigServiceAttachmentsOutputReference[_l] = { fqn: "@cdktf/provider-google.lookerInstance.LookerInstancePscConfigServiceAttachmentsOutputReference", version: "14.13.1" };
class LookerInstancePscConfigServiceAttachmentsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new LookerInstancePscConfigServiceAttachmentsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.LookerInstancePscConfigServiceAttachmentsList = LookerInstancePscConfigServiceAttachmentsList;
_m = JSII_RTTI_SYMBOL_1;
LookerInstancePscConfigServiceAttachmentsList[_m] = { fqn: "@cdktf/provider-google.lookerInstance.LookerInstancePscConfigServiceAttachmentsList", version: "14.13.1" };
function lookerInstancePscConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allowed_vpcs: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowedVpcs),
        service_attachments: cdktf.listMapper(lookerInstancePscConfigServiceAttachmentsToTerraform, true)(struct.serviceAttachments),
    };
}
exports.lookerInstancePscConfigToTerraform = lookerInstancePscConfigToTerraform;
function lookerInstancePscConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        allowed_vpcs: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.allowedVpcs),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        service_attachments: {
            value: cdktf.listMapperHcl(lookerInstancePscConfigServiceAttachmentsToHclTerraform, true)(struct.serviceAttachments),
            isBlock: true,
            type: "list",
            storageClassType: "LookerInstancePscConfigServiceAttachmentsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lookerInstancePscConfigToHclTerraform = lookerInstancePscConfigToHclTerraform;
class LookerInstancePscConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // service_attachments - computed: false, optional: true, required: false
        this._serviceAttachments = new LookerInstancePscConfigServiceAttachmentsList(this, "service_attachments", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowedVpcs !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowedVpcs = this._allowedVpcs;
        }
        if (this._serviceAttachments?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceAttachments = this._serviceAttachments?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowedVpcs = undefined;
            this._serviceAttachments.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowedVpcs = value.allowedVpcs;
            this._serviceAttachments.internalValue = value.serviceAttachments;
        }
    }
    get allowedVpcs() {
        return this.getListAttribute('allowed_vpcs');
    }
    set allowedVpcs(value) {
        this._allowedVpcs = value;
    }
    resetAllowedVpcs() {
        this._allowedVpcs = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowedVpcsInput() {
        return this._allowedVpcs;
    }
    // looker_service_attachment_uri - computed: true, optional: false, required: false
    get lookerServiceAttachmentUri() {
        return this.getStringAttribute('looker_service_attachment_uri');
    }
    get serviceAttachments() {
        return this._serviceAttachments;
    }
    putServiceAttachments(value) {
        this._serviceAttachments.internalValue = value;
    }
    resetServiceAttachments() {
        this._serviceAttachments.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceAttachmentsInput() {
        return this._serviceAttachments.internalValue;
    }
}
exports.LookerInstancePscConfigOutputReference = LookerInstancePscConfigOutputReference;
_o = JSII_RTTI_SYMBOL_1;
LookerInstancePscConfigOutputReference[_o] = { fqn: "@cdktf/provider-google.lookerInstance.LookerInstancePscConfigOutputReference", version: "14.13.1" };
function lookerInstanceTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.lookerInstanceTimeoutsToTerraform = lookerInstanceTimeoutsToTerraform;
function lookerInstanceTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lookerInstanceTimeoutsToHclTerraform = lookerInstanceTimeoutsToHclTerraform;
class LookerInstanceTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.LookerInstanceTimeoutsOutputReference = LookerInstanceTimeoutsOutputReference;
_p = JSII_RTTI_SYMBOL_1;
LookerInstanceTimeoutsOutputReference[_p] = { fqn: "@cdktf/provider-google.lookerInstance.LookerInstanceTimeoutsOutputReference", version: "14.13.1" };
function lookerInstanceUserMetadataToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        additional_developer_user_count: cdktf.numberToTerraform(struct.additionalDeveloperUserCount),
        additional_standard_user_count: cdktf.numberToTerraform(struct.additionalStandardUserCount),
        additional_viewer_user_count: cdktf.numberToTerraform(struct.additionalViewerUserCount),
    };
}
exports.lookerInstanceUserMetadataToTerraform = lookerInstanceUserMetadataToTerraform;
function lookerInstanceUserMetadataToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        additional_developer_user_count: {
            value: cdktf.numberToHclTerraform(struct.additionalDeveloperUserCount),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        additional_standard_user_count: {
            value: cdktf.numberToHclTerraform(struct.additionalStandardUserCount),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        additional_viewer_user_count: {
            value: cdktf.numberToHclTerraform(struct.additionalViewerUserCount),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.lookerInstanceUserMetadataToHclTerraform = lookerInstanceUserMetadataToHclTerraform;
class LookerInstanceUserMetadataOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._additionalDeveloperUserCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.additionalDeveloperUserCount = this._additionalDeveloperUserCount;
        }
        if (this._additionalStandardUserCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.additionalStandardUserCount = this._additionalStandardUserCount;
        }
        if (this._additionalViewerUserCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.additionalViewerUserCount = this._additionalViewerUserCount;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._additionalDeveloperUserCount = undefined;
            this._additionalStandardUserCount = undefined;
            this._additionalViewerUserCount = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._additionalDeveloperUserCount = value.additionalDeveloperUserCount;
            this._additionalStandardUserCount = value.additionalStandardUserCount;
            this._additionalViewerUserCount = value.additionalViewerUserCount;
        }
    }
    get additionalDeveloperUserCount() {
        return this.getNumberAttribute('additional_developer_user_count');
    }
    set additionalDeveloperUserCount(value) {
        this._additionalDeveloperUserCount = value;
    }
    resetAdditionalDeveloperUserCount() {
        this._additionalDeveloperUserCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get additionalDeveloperUserCountInput() {
        return this._additionalDeveloperUserCount;
    }
    get additionalStandardUserCount() {
        return this.getNumberAttribute('additional_standard_user_count');
    }
    set additionalStandardUserCount(value) {
        this._additionalStandardUserCount = value;
    }
    resetAdditionalStandardUserCount() {
        this._additionalStandardUserCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get additionalStandardUserCountInput() {
        return this._additionalStandardUserCount;
    }
    get additionalViewerUserCount() {
        return this.getNumberAttribute('additional_viewer_user_count');
    }
    set additionalViewerUserCount(value) {
        this._additionalViewerUserCount = value;
    }
    resetAdditionalViewerUserCount() {
        this._additionalViewerUserCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get additionalViewerUserCountInput() {
        return this._additionalViewerUserCount;
    }
}
exports.LookerInstanceUserMetadataOutputReference = LookerInstanceUserMetadataOutputReference;
_q = JSII_RTTI_SYMBOL_1;
LookerInstanceUserMetadataOutputReference[_q] = { fqn: "@cdktf/provider-google.lookerInstance.LookerInstanceUserMetadataOutputReference", version: "14.13.1" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/looker_instance google_looker_instance}
*/
class LookerInstance extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a LookerInstance resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the LookerInstance to import
    * @param importFromId The id of the existing LookerInstance that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/looker_instance#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the LookerInstance to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_looker_instance", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/looker_instance google_looker_instance} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options LookerInstanceConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_looker_instance',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // admin_settings - computed: false, optional: true, required: false
        this._adminSettings = new LookerInstanceAdminSettingsOutputReference(this, "admin_settings");
        // custom_domain - computed: false, optional: true, required: false
        this._customDomain = new LookerInstanceCustomDomainOutputReference(this, "custom_domain");
        // deny_maintenance_period - computed: false, optional: true, required: false
        this._denyMaintenancePeriod = new LookerInstanceDenyMaintenancePeriodOutputReference(this, "deny_maintenance_period");
        // encryption_config - computed: false, optional: true, required: false
        this._encryptionConfig = new LookerInstanceEncryptionConfigOutputReference(this, "encryption_config");
        // maintenance_window - computed: false, optional: true, required: false
        this._maintenanceWindow = new LookerInstanceMaintenanceWindowOutputReference(this, "maintenance_window");
        // oauth_config - computed: false, optional: false, required: true
        this._oauthConfig = new LookerInstanceOauthConfigOutputReference(this, "oauth_config");
        // psc_config - computed: false, optional: true, required: false
        this._pscConfig = new LookerInstancePscConfigOutputReference(this, "psc_config");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new LookerInstanceTimeoutsOutputReference(this, "timeouts");
        // user_metadata - computed: false, optional: true, required: false
        this._userMetadata = new LookerInstanceUserMetadataOutputReference(this, "user_metadata");
        this._consumerNetwork = config.consumerNetwork;
        this._deletionPolicy = config.deletionPolicy;
        this._fipsEnabled = config.fipsEnabled;
        this._id = config.id;
        this._name = config.name;
        this._platformEdition = config.platformEdition;
        this._privateIpEnabled = config.privateIpEnabled;
        this._project = config.project;
        this._pscEnabled = config.pscEnabled;
        this._publicIpEnabled = config.publicIpEnabled;
        this._region = config.region;
        this._reservedRange = config.reservedRange;
        this._adminSettings.internalValue = config.adminSettings;
        this._customDomain.internalValue = config.customDomain;
        this._denyMaintenancePeriod.internalValue = config.denyMaintenancePeriod;
        this._encryptionConfig.internalValue = config.encryptionConfig;
        this._maintenanceWindow.internalValue = config.maintenanceWindow;
        this._oauthConfig.internalValue = config.oauthConfig;
        this._pscConfig.internalValue = config.pscConfig;
        this._timeouts.internalValue = config.timeouts;
        this._userMetadata.internalValue = config.userMetadata;
    }
    get consumerNetwork() {
        return this.getStringAttribute('consumer_network');
    }
    set consumerNetwork(value) {
        this._consumerNetwork = value;
    }
    resetConsumerNetwork() {
        this._consumerNetwork = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get consumerNetworkInput() {
        return this._consumerNetwork;
    }
    // create_time - computed: true, optional: false, required: false
    get createTime() {
        return this.getStringAttribute('create_time');
    }
    get deletionPolicy() {
        return this.getStringAttribute('deletion_policy');
    }
    set deletionPolicy(value) {
        this._deletionPolicy = value;
    }
    resetDeletionPolicy() {
        this._deletionPolicy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deletionPolicyInput() {
        return this._deletionPolicy;
    }
    // egress_public_ip - computed: true, optional: false, required: false
    get egressPublicIp() {
        return this.getStringAttribute('egress_public_ip');
    }
    get fipsEnabled() {
        return this.getBooleanAttribute('fips_enabled');
    }
    set fipsEnabled(value) {
        this._fipsEnabled = value;
    }
    resetFipsEnabled() {
        this._fipsEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fipsEnabledInput() {
        return this._fipsEnabled;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // ingress_private_ip - computed: true, optional: false, required: false
    get ingressPrivateIp() {
        return this.getStringAttribute('ingress_private_ip');
    }
    // ingress_public_ip - computed: true, optional: false, required: false
    get ingressPublicIp() {
        return this.getStringAttribute('ingress_public_ip');
    }
    // looker_uri - computed: true, optional: false, required: false
    get lookerUri() {
        return this.getStringAttribute('looker_uri');
    }
    // looker_version - computed: true, optional: false, required: false
    get lookerVersion() {
        return this.getStringAttribute('looker_version');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get platformEdition() {
        return this.getStringAttribute('platform_edition');
    }
    set platformEdition(value) {
        this._platformEdition = value;
    }
    resetPlatformEdition() {
        this._platformEdition = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get platformEditionInput() {
        return this._platformEdition;
    }
    get privateIpEnabled() {
        return this.getBooleanAttribute('private_ip_enabled');
    }
    set privateIpEnabled(value) {
        this._privateIpEnabled = value;
    }
    resetPrivateIpEnabled() {
        this._privateIpEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get privateIpEnabledInput() {
        return this._privateIpEnabled;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get pscEnabled() {
        return this.getBooleanAttribute('psc_enabled');
    }
    set pscEnabled(value) {
        this._pscEnabled = value;
    }
    resetPscEnabled() {
        this._pscEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pscEnabledInput() {
        return this._pscEnabled;
    }
    get publicIpEnabled() {
        return this.getBooleanAttribute('public_ip_enabled');
    }
    set publicIpEnabled(value) {
        this._publicIpEnabled = value;
    }
    resetPublicIpEnabled() {
        this._publicIpEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get publicIpEnabledInput() {
        return this._publicIpEnabled;
    }
    get region() {
        return this.getStringAttribute('region');
    }
    set region(value) {
        this._region = value;
    }
    resetRegion() {
        this._region = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get regionInput() {
        return this._region;
    }
    get reservedRange() {
        return this.getStringAttribute('reserved_range');
    }
    set reservedRange(value) {
        this._reservedRange = value;
    }
    resetReservedRange() {
        this._reservedRange = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get reservedRangeInput() {
        return this._reservedRange;
    }
    // update_time - computed: true, optional: false, required: false
    get updateTime() {
        return this.getStringAttribute('update_time');
    }
    get adminSettings() {
        return this._adminSettings;
    }
    putAdminSettings(value) {
        this._adminSettings.internalValue = value;
    }
    resetAdminSettings() {
        this._adminSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get adminSettingsInput() {
        return this._adminSettings.internalValue;
    }
    get customDomain() {
        return this._customDomain;
    }
    putCustomDomain(value) {
        this._customDomain.internalValue = value;
    }
    resetCustomDomain() {
        this._customDomain.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customDomainInput() {
        return this._customDomain.internalValue;
    }
    get denyMaintenancePeriod() {
        return this._denyMaintenancePeriod;
    }
    putDenyMaintenancePeriod(value) {
        this._denyMaintenancePeriod.internalValue = value;
    }
    resetDenyMaintenancePeriod() {
        this._denyMaintenancePeriod.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get denyMaintenancePeriodInput() {
        return this._denyMaintenancePeriod.internalValue;
    }
    get encryptionConfig() {
        return this._encryptionConfig;
    }
    putEncryptionConfig(value) {
        this._encryptionConfig.internalValue = value;
    }
    resetEncryptionConfig() {
        this._encryptionConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encryptionConfigInput() {
        return this._encryptionConfig.internalValue;
    }
    get maintenanceWindow() {
        return this._maintenanceWindow;
    }
    putMaintenanceWindow(value) {
        this._maintenanceWindow.internalValue = value;
    }
    resetMaintenanceWindow() {
        this._maintenanceWindow.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maintenanceWindowInput() {
        return this._maintenanceWindow.internalValue;
    }
    get oauthConfig() {
        return this._oauthConfig;
    }
    putOauthConfig(value) {
        this._oauthConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get oauthConfigInput() {
        return this._oauthConfig.internalValue;
    }
    get pscConfig() {
        return this._pscConfig;
    }
    putPscConfig(value) {
        this._pscConfig.internalValue = value;
    }
    resetPscConfig() {
        this._pscConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pscConfigInput() {
        return this._pscConfig.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    get userMetadata() {
        return this._userMetadata;
    }
    putUserMetadata(value) {
        this._userMetadata.internalValue = value;
    }
    resetUserMetadata() {
        this._userMetadata.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get userMetadataInput() {
        return this._userMetadata.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            consumer_network: cdktf.stringToTerraform(this._consumerNetwork),
            deletion_policy: cdktf.stringToTerraform(this._deletionPolicy),
            fips_enabled: cdktf.booleanToTerraform(this._fipsEnabled),
            id: cdktf.stringToTerraform(this._id),
            name: cdktf.stringToTerraform(this._name),
            platform_edition: cdktf.stringToTerraform(this._platformEdition),
            private_ip_enabled: cdktf.booleanToTerraform(this._privateIpEnabled),
            project: cdktf.stringToTerraform(this._project),
            psc_enabled: cdktf.booleanToTerraform(this._pscEnabled),
            public_ip_enabled: cdktf.booleanToTerraform(this._publicIpEnabled),
            region: cdktf.stringToTerraform(this._region),
            reserved_range: cdktf.stringToTerraform(this._reservedRange),
            admin_settings: lookerInstanceAdminSettingsToTerraform(this._adminSettings.internalValue),
            custom_domain: lookerInstanceCustomDomainToTerraform(this._customDomain.internalValue),
            deny_maintenance_period: lookerInstanceDenyMaintenancePeriodToTerraform(this._denyMaintenancePeriod.internalValue),
            encryption_config: lookerInstanceEncryptionConfigToTerraform(this._encryptionConfig.internalValue),
            maintenance_window: lookerInstanceMaintenanceWindowToTerraform(this._maintenanceWindow.internalValue),
            oauth_config: lookerInstanceOauthConfigToTerraform(this._oauthConfig.internalValue),
            psc_config: lookerInstancePscConfigToTerraform(this._pscConfig.internalValue),
            timeouts: lookerInstanceTimeoutsToTerraform(this._timeouts.internalValue),
            user_metadata: lookerInstanceUserMetadataToTerraform(this._userMetadata.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            consumer_network: {
                value: cdktf.stringToHclTerraform(this._consumerNetwork),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            deletion_policy: {
                value: cdktf.stringToHclTerraform(this._deletionPolicy),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            fips_enabled: {
                value: cdktf.booleanToHclTerraform(this._fipsEnabled),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            name: {
                value: cdktf.stringToHclTerraform(this._name),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            platform_edition: {
                value: cdktf.stringToHclTerraform(this._platformEdition),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            private_ip_enabled: {
                value: cdktf.booleanToHclTerraform(this._privateIpEnabled),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            project: {
                value: cdktf.stringToHclTerraform(this._project),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            psc_enabled: {
                value: cdktf.booleanToHclTerraform(this._pscEnabled),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            public_ip_enabled: {
                value: cdktf.booleanToHclTerraform(this._publicIpEnabled),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            region: {
                value: cdktf.stringToHclTerraform(this._region),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            reserved_range: {
                value: cdktf.stringToHclTerraform(this._reservedRange),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            admin_settings: {
                value: lookerInstanceAdminSettingsToHclTerraform(this._adminSettings.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "LookerInstanceAdminSettingsList",
            },
            custom_domain: {
                value: lookerInstanceCustomDomainToHclTerraform(this._customDomain.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "LookerInstanceCustomDomainList",
            },
            deny_maintenance_period: {
                value: lookerInstanceDenyMaintenancePeriodToHclTerraform(this._denyMaintenancePeriod.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "LookerInstanceDenyMaintenancePeriodList",
            },
            encryption_config: {
                value: lookerInstanceEncryptionConfigToHclTerraform(this._encryptionConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "LookerInstanceEncryptionConfigList",
            },
            maintenance_window: {
                value: lookerInstanceMaintenanceWindowToHclTerraform(this._maintenanceWindow.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "LookerInstanceMaintenanceWindowList",
            },
            oauth_config: {
                value: lookerInstanceOauthConfigToHclTerraform(this._oauthConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "LookerInstanceOauthConfigList",
            },
            psc_config: {
                value: lookerInstancePscConfigToHclTerraform(this._pscConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "LookerInstancePscConfigList",
            },
            timeouts: {
                value: lookerInstanceTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "LookerInstanceTimeouts",
            },
            user_metadata: {
                value: lookerInstanceUserMetadataToHclTerraform(this._userMetadata.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "LookerInstanceUserMetadataList",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.LookerInstance = LookerInstance;
_r = JSII_RTTI_SYMBOL_1;
LookerInstance[_r] = { fqn: "@cdktf/provider-google.lookerInstance.LookerInstance", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
LookerInstance.tfResourceType = "google_looker_instance";
//# sourceMappingURL=data:application/json;base64,