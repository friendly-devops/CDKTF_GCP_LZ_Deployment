"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.identityPlatformConfigSignInEmailToHclTerraform = exports.identityPlatformConfigSignInEmailToTerraform = exports.IdentityPlatformConfigSignInAnonymousOutputReference = exports.identityPlatformConfigSignInAnonymousToHclTerraform = exports.identityPlatformConfigSignInAnonymousToTerraform = exports.IdentityPlatformConfigSignInHashConfigList = exports.IdentityPlatformConfigSignInHashConfigOutputReference = exports.identityPlatformConfigSignInHashConfigToHclTerraform = exports.identityPlatformConfigSignInHashConfigToTerraform = exports.IdentityPlatformConfigQuotaOutputReference = exports.identityPlatformConfigQuotaToHclTerraform = exports.identityPlatformConfigQuotaToTerraform = exports.IdentityPlatformConfigQuotaSignUpQuotaConfigOutputReference = exports.identityPlatformConfigQuotaSignUpQuotaConfigToHclTerraform = exports.identityPlatformConfigQuotaSignUpQuotaConfigToTerraform = exports.IdentityPlatformConfigMultiTenantOutputReference = exports.identityPlatformConfigMultiTenantToHclTerraform = exports.identityPlatformConfigMultiTenantToTerraform = exports.IdentityPlatformConfigMonitoringOutputReference = exports.identityPlatformConfigMonitoringToHclTerraform = exports.identityPlatformConfigMonitoringToTerraform = exports.IdentityPlatformConfigMonitoringRequestLoggingOutputReference = exports.identityPlatformConfigMonitoringRequestLoggingToHclTerraform = exports.identityPlatformConfigMonitoringRequestLoggingToTerraform = exports.IdentityPlatformConfigMfaOutputReference = exports.identityPlatformConfigMfaToHclTerraform = exports.identityPlatformConfigMfaToTerraform = exports.IdentityPlatformConfigMfaProviderConfigsList = exports.IdentityPlatformConfigMfaProviderConfigsOutputReference = exports.identityPlatformConfigMfaProviderConfigsToHclTerraform = exports.identityPlatformConfigMfaProviderConfigsToTerraform = exports.IdentityPlatformConfigMfaProviderConfigsTotpProviderConfigOutputReference = exports.identityPlatformConfigMfaProviderConfigsTotpProviderConfigToHclTerraform = exports.identityPlatformConfigMfaProviderConfigsTotpProviderConfigToTerraform = exports.IdentityPlatformConfigClientOutputReference = exports.identityPlatformConfigClientToHclTerraform = exports.identityPlatformConfigClientToTerraform = exports.IdentityPlatformConfigClientPermissionsOutputReference = exports.identityPlatformConfigClientPermissionsToHclTerraform = exports.identityPlatformConfigClientPermissionsToTerraform = exports.IdentityPlatformConfigBlockingFunctionsOutputReference = exports.identityPlatformConfigBlockingFunctionsToHclTerraform = exports.identityPlatformConfigBlockingFunctionsToTerraform = exports.IdentityPlatformConfigBlockingFunctionsTriggersList = exports.IdentityPlatformConfigBlockingFunctionsTriggersOutputReference = exports.identityPlatformConfigBlockingFunctionsTriggersToHclTerraform = exports.identityPlatformConfigBlockingFunctionsTriggersToTerraform = exports.IdentityPlatformConfigBlockingFunctionsForwardInboundCredentialsOutputReference = exports.identityPlatformConfigBlockingFunctionsForwardInboundCredentialsToHclTerraform = exports.identityPlatformConfigBlockingFunctionsForwardInboundCredentialsToTerraform = void 0;
exports.IdentityPlatformConfig = exports.IdentityPlatformConfigTimeoutsOutputReference = exports.identityPlatformConfigTimeoutsToHclTerraform = exports.identityPlatformConfigTimeoutsToTerraform = exports.IdentityPlatformConfigSmsRegionConfigOutputReference = exports.identityPlatformConfigSmsRegionConfigToHclTerraform = exports.identityPlatformConfigSmsRegionConfigToTerraform = exports.IdentityPlatformConfigSmsRegionConfigAllowlistOnlyOutputReference = exports.identityPlatformConfigSmsRegionConfigAllowlistOnlyToHclTerraform = exports.identityPlatformConfigSmsRegionConfigAllowlistOnlyToTerraform = exports.IdentityPlatformConfigSmsRegionConfigAllowByDefaultOutputReference = exports.identityPlatformConfigSmsRegionConfigAllowByDefaultToHclTerraform = exports.identityPlatformConfigSmsRegionConfigAllowByDefaultToTerraform = exports.IdentityPlatformConfigSignInOutputReference = exports.identityPlatformConfigSignInToHclTerraform = exports.identityPlatformConfigSignInToTerraform = exports.IdentityPlatformConfigSignInPhoneNumberOutputReference = exports.identityPlatformConfigSignInPhoneNumberToHclTerraform = exports.identityPlatformConfigSignInPhoneNumberToTerraform = exports.IdentityPlatformConfigSignInEmailOutputReference = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function identityPlatformConfigBlockingFunctionsForwardInboundCredentialsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        access_token: cdktf.booleanToTerraform(struct.accessToken),
        id_token: cdktf.booleanToTerraform(struct.idToken),
        refresh_token: cdktf.booleanToTerraform(struct.refreshToken),
    };
}
exports.identityPlatformConfigBlockingFunctionsForwardInboundCredentialsToTerraform = identityPlatformConfigBlockingFunctionsForwardInboundCredentialsToTerraform;
function identityPlatformConfigBlockingFunctionsForwardInboundCredentialsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        access_token: {
            value: cdktf.booleanToHclTerraform(struct.accessToken),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        id_token: {
            value: cdktf.booleanToHclTerraform(struct.idToken),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        refresh_token: {
            value: cdktf.booleanToHclTerraform(struct.refreshToken),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.identityPlatformConfigBlockingFunctionsForwardInboundCredentialsToHclTerraform = identityPlatformConfigBlockingFunctionsForwardInboundCredentialsToHclTerraform;
class IdentityPlatformConfigBlockingFunctionsForwardInboundCredentialsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._accessToken !== undefined) {
            hasAnyValues = true;
            internalValueResult.accessToken = this._accessToken;
        }
        if (this._idToken !== undefined) {
            hasAnyValues = true;
            internalValueResult.idToken = this._idToken;
        }
        if (this._refreshToken !== undefined) {
            hasAnyValues = true;
            internalValueResult.refreshToken = this._refreshToken;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._accessToken = undefined;
            this._idToken = undefined;
            this._refreshToken = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._accessToken = value.accessToken;
            this._idToken = value.idToken;
            this._refreshToken = value.refreshToken;
        }
    }
    get accessToken() {
        return this.getBooleanAttribute('access_token');
    }
    set accessToken(value) {
        this._accessToken = value;
    }
    resetAccessToken() {
        this._accessToken = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accessTokenInput() {
        return this._accessToken;
    }
    get idToken() {
        return this.getBooleanAttribute('id_token');
    }
    set idToken(value) {
        this._idToken = value;
    }
    resetIdToken() {
        this._idToken = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idTokenInput() {
        return this._idToken;
    }
    get refreshToken() {
        return this.getBooleanAttribute('refresh_token');
    }
    set refreshToken(value) {
        this._refreshToken = value;
    }
    resetRefreshToken() {
        this._refreshToken = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get refreshTokenInput() {
        return this._refreshToken;
    }
}
exports.IdentityPlatformConfigBlockingFunctionsForwardInboundCredentialsOutputReference = IdentityPlatformConfigBlockingFunctionsForwardInboundCredentialsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
IdentityPlatformConfigBlockingFunctionsForwardInboundCredentialsOutputReference[_a] = { fqn: "@cdktf/provider-google.identityPlatformConfig.IdentityPlatformConfigBlockingFunctionsForwardInboundCredentialsOutputReference", version: "14.13.1" };
function identityPlatformConfigBlockingFunctionsTriggersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        event_type: cdktf.stringToTerraform(struct.eventType),
        function_uri: cdktf.stringToTerraform(struct.functionUri),
    };
}
exports.identityPlatformConfigBlockingFunctionsTriggersToTerraform = identityPlatformConfigBlockingFunctionsTriggersToTerraform;
function identityPlatformConfigBlockingFunctionsTriggersToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        event_type: {
            value: cdktf.stringToHclTerraform(struct.eventType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        function_uri: {
            value: cdktf.stringToHclTerraform(struct.functionUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.identityPlatformConfigBlockingFunctionsTriggersToHclTerraform = identityPlatformConfigBlockingFunctionsTriggersToHclTerraform;
class IdentityPlatformConfigBlockingFunctionsTriggersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._eventType !== undefined) {
            hasAnyValues = true;
            internalValueResult.eventType = this._eventType;
        }
        if (this._functionUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.functionUri = this._functionUri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._eventType = undefined;
            this._functionUri = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._eventType = value.eventType;
            this._functionUri = value.functionUri;
        }
    }
    get eventType() {
        return this.getStringAttribute('event_type');
    }
    set eventType(value) {
        this._eventType = value;
    }
    // Temporarily expose input value. Use with caution.
    get eventTypeInput() {
        return this._eventType;
    }
    get functionUri() {
        return this.getStringAttribute('function_uri');
    }
    set functionUri(value) {
        this._functionUri = value;
    }
    // Temporarily expose input value. Use with caution.
    get functionUriInput() {
        return this._functionUri;
    }
    // update_time - computed: true, optional: false, required: false
    get updateTime() {
        return this.getStringAttribute('update_time');
    }
}
exports.IdentityPlatformConfigBlockingFunctionsTriggersOutputReference = IdentityPlatformConfigBlockingFunctionsTriggersOutputReference;
_b = JSII_RTTI_SYMBOL_1;
IdentityPlatformConfigBlockingFunctionsTriggersOutputReference[_b] = { fqn: "@cdktf/provider-google.identityPlatformConfig.IdentityPlatformConfigBlockingFunctionsTriggersOutputReference", version: "14.13.1" };
class IdentityPlatformConfigBlockingFunctionsTriggersList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new IdentityPlatformConfigBlockingFunctionsTriggersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.IdentityPlatformConfigBlockingFunctionsTriggersList = IdentityPlatformConfigBlockingFunctionsTriggersList;
_c = JSII_RTTI_SYMBOL_1;
IdentityPlatformConfigBlockingFunctionsTriggersList[_c] = { fqn: "@cdktf/provider-google.identityPlatformConfig.IdentityPlatformConfigBlockingFunctionsTriggersList", version: "14.13.1" };
function identityPlatformConfigBlockingFunctionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        forward_inbound_credentials: identityPlatformConfigBlockingFunctionsForwardInboundCredentialsToTerraform(struct.forwardInboundCredentials),
        triggers: cdktf.listMapper(identityPlatformConfigBlockingFunctionsTriggersToTerraform, true)(struct.triggers),
    };
}
exports.identityPlatformConfigBlockingFunctionsToTerraform = identityPlatformConfigBlockingFunctionsToTerraform;
function identityPlatformConfigBlockingFunctionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        forward_inbound_credentials: {
            value: identityPlatformConfigBlockingFunctionsForwardInboundCredentialsToHclTerraform(struct.forwardInboundCredentials),
            isBlock: true,
            type: "list",
            storageClassType: "IdentityPlatformConfigBlockingFunctionsForwardInboundCredentialsList",
        },
        triggers: {
            value: cdktf.listMapperHcl(identityPlatformConfigBlockingFunctionsTriggersToHclTerraform, true)(struct.triggers),
            isBlock: true,
            type: "set",
            storageClassType: "IdentityPlatformConfigBlockingFunctionsTriggersList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.identityPlatformConfigBlockingFunctionsToHclTerraform = identityPlatformConfigBlockingFunctionsToHclTerraform;
class IdentityPlatformConfigBlockingFunctionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // forward_inbound_credentials - computed: false, optional: true, required: false
        this._forwardInboundCredentials = new IdentityPlatformConfigBlockingFunctionsForwardInboundCredentialsOutputReference(this, "forward_inbound_credentials");
        // triggers - computed: false, optional: false, required: true
        this._triggers = new IdentityPlatformConfigBlockingFunctionsTriggersList(this, "triggers", true);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._forwardInboundCredentials?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.forwardInboundCredentials = this._forwardInboundCredentials?.internalValue;
        }
        if (this._triggers?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.triggers = this._triggers?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._forwardInboundCredentials.internalValue = undefined;
            this._triggers.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._forwardInboundCredentials.internalValue = value.forwardInboundCredentials;
            this._triggers.internalValue = value.triggers;
        }
    }
    get forwardInboundCredentials() {
        return this._forwardInboundCredentials;
    }
    putForwardInboundCredentials(value) {
        this._forwardInboundCredentials.internalValue = value;
    }
    resetForwardInboundCredentials() {
        this._forwardInboundCredentials.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get forwardInboundCredentialsInput() {
        return this._forwardInboundCredentials.internalValue;
    }
    get triggers() {
        return this._triggers;
    }
    putTriggers(value) {
        this._triggers.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get triggersInput() {
        return this._triggers.internalValue;
    }
}
exports.IdentityPlatformConfigBlockingFunctionsOutputReference = IdentityPlatformConfigBlockingFunctionsOutputReference;
_d = JSII_RTTI_SYMBOL_1;
IdentityPlatformConfigBlockingFunctionsOutputReference[_d] = { fqn: "@cdktf/provider-google.identityPlatformConfig.IdentityPlatformConfigBlockingFunctionsOutputReference", version: "14.13.1" };
function identityPlatformConfigClientPermissionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        disabled_user_deletion: cdktf.booleanToTerraform(struct.disabledUserDeletion),
        disabled_user_signup: cdktf.booleanToTerraform(struct.disabledUserSignup),
    };
}
exports.identityPlatformConfigClientPermissionsToTerraform = identityPlatformConfigClientPermissionsToTerraform;
function identityPlatformConfigClientPermissionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        disabled_user_deletion: {
            value: cdktf.booleanToHclTerraform(struct.disabledUserDeletion),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        disabled_user_signup: {
            value: cdktf.booleanToHclTerraform(struct.disabledUserSignup),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.identityPlatformConfigClientPermissionsToHclTerraform = identityPlatformConfigClientPermissionsToHclTerraform;
class IdentityPlatformConfigClientPermissionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._disabledUserDeletion !== undefined) {
            hasAnyValues = true;
            internalValueResult.disabledUserDeletion = this._disabledUserDeletion;
        }
        if (this._disabledUserSignup !== undefined) {
            hasAnyValues = true;
            internalValueResult.disabledUserSignup = this._disabledUserSignup;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._disabledUserDeletion = undefined;
            this._disabledUserSignup = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._disabledUserDeletion = value.disabledUserDeletion;
            this._disabledUserSignup = value.disabledUserSignup;
        }
    }
    get disabledUserDeletion() {
        return this.getBooleanAttribute('disabled_user_deletion');
    }
    set disabledUserDeletion(value) {
        this._disabledUserDeletion = value;
    }
    resetDisabledUserDeletion() {
        this._disabledUserDeletion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get disabledUserDeletionInput() {
        return this._disabledUserDeletion;
    }
    get disabledUserSignup() {
        return this.getBooleanAttribute('disabled_user_signup');
    }
    set disabledUserSignup(value) {
        this._disabledUserSignup = value;
    }
    resetDisabledUserSignup() {
        this._disabledUserSignup = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get disabledUserSignupInput() {
        return this._disabledUserSignup;
    }
}
exports.IdentityPlatformConfigClientPermissionsOutputReference = IdentityPlatformConfigClientPermissionsOutputReference;
_e = JSII_RTTI_SYMBOL_1;
IdentityPlatformConfigClientPermissionsOutputReference[_e] = { fqn: "@cdktf/provider-google.identityPlatformConfig.IdentityPlatformConfigClientPermissionsOutputReference", version: "14.13.1" };
function identityPlatformConfigClientToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        permissions: identityPlatformConfigClientPermissionsToTerraform(struct.permissions),
    };
}
exports.identityPlatformConfigClientToTerraform = identityPlatformConfigClientToTerraform;
function identityPlatformConfigClientToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        permissions: {
            value: identityPlatformConfigClientPermissionsToHclTerraform(struct.permissions),
            isBlock: true,
            type: "list",
            storageClassType: "IdentityPlatformConfigClientPermissionsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.identityPlatformConfigClientToHclTerraform = identityPlatformConfigClientToHclTerraform;
class IdentityPlatformConfigClientOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // permissions - computed: false, optional: true, required: false
        this._permissions = new IdentityPlatformConfigClientPermissionsOutputReference(this, "permissions");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._permissions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.permissions = this._permissions?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._permissions.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._permissions.internalValue = value.permissions;
        }
    }
    // api_key - computed: true, optional: false, required: false
    get apiKey() {
        return this.getStringAttribute('api_key');
    }
    // firebase_subdomain - computed: true, optional: false, required: false
    get firebaseSubdomain() {
        return this.getStringAttribute('firebase_subdomain');
    }
    get permissions() {
        return this._permissions;
    }
    putPermissions(value) {
        this._permissions.internalValue = value;
    }
    resetPermissions() {
        this._permissions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get permissionsInput() {
        return this._permissions.internalValue;
    }
}
exports.IdentityPlatformConfigClientOutputReference = IdentityPlatformConfigClientOutputReference;
_f = JSII_RTTI_SYMBOL_1;
IdentityPlatformConfigClientOutputReference[_f] = { fqn: "@cdktf/provider-google.identityPlatformConfig.IdentityPlatformConfigClientOutputReference", version: "14.13.1" };
function identityPlatformConfigMfaProviderConfigsTotpProviderConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        adjacent_intervals: cdktf.numberToTerraform(struct.adjacentIntervals),
    };
}
exports.identityPlatformConfigMfaProviderConfigsTotpProviderConfigToTerraform = identityPlatformConfigMfaProviderConfigsTotpProviderConfigToTerraform;
function identityPlatformConfigMfaProviderConfigsTotpProviderConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        adjacent_intervals: {
            value: cdktf.numberToHclTerraform(struct.adjacentIntervals),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.identityPlatformConfigMfaProviderConfigsTotpProviderConfigToHclTerraform = identityPlatformConfigMfaProviderConfigsTotpProviderConfigToHclTerraform;
class IdentityPlatformConfigMfaProviderConfigsTotpProviderConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._adjacentIntervals !== undefined) {
            hasAnyValues = true;
            internalValueResult.adjacentIntervals = this._adjacentIntervals;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._adjacentIntervals = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._adjacentIntervals = value.adjacentIntervals;
        }
    }
    get adjacentIntervals() {
        return this.getNumberAttribute('adjacent_intervals');
    }
    set adjacentIntervals(value) {
        this._adjacentIntervals = value;
    }
    resetAdjacentIntervals() {
        this._adjacentIntervals = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get adjacentIntervalsInput() {
        return this._adjacentIntervals;
    }
}
exports.IdentityPlatformConfigMfaProviderConfigsTotpProviderConfigOutputReference = IdentityPlatformConfigMfaProviderConfigsTotpProviderConfigOutputReference;
_g = JSII_RTTI_SYMBOL_1;
IdentityPlatformConfigMfaProviderConfigsTotpProviderConfigOutputReference[_g] = { fqn: "@cdktf/provider-google.identityPlatformConfig.IdentityPlatformConfigMfaProviderConfigsTotpProviderConfigOutputReference", version: "14.13.1" };
function identityPlatformConfigMfaProviderConfigsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        state: cdktf.stringToTerraform(struct.state),
        totp_provider_config: identityPlatformConfigMfaProviderConfigsTotpProviderConfigToTerraform(struct.totpProviderConfig),
    };
}
exports.identityPlatformConfigMfaProviderConfigsToTerraform = identityPlatformConfigMfaProviderConfigsToTerraform;
function identityPlatformConfigMfaProviderConfigsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        state: {
            value: cdktf.stringToHclTerraform(struct.state),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        totp_provider_config: {
            value: identityPlatformConfigMfaProviderConfigsTotpProviderConfigToHclTerraform(struct.totpProviderConfig),
            isBlock: true,
            type: "list",
            storageClassType: "IdentityPlatformConfigMfaProviderConfigsTotpProviderConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.identityPlatformConfigMfaProviderConfigsToHclTerraform = identityPlatformConfigMfaProviderConfigsToHclTerraform;
class IdentityPlatformConfigMfaProviderConfigsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // totp_provider_config - computed: false, optional: true, required: false
        this._totpProviderConfig = new IdentityPlatformConfigMfaProviderConfigsTotpProviderConfigOutputReference(this, "totp_provider_config");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._state !== undefined) {
            hasAnyValues = true;
            internalValueResult.state = this._state;
        }
        if (this._totpProviderConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.totpProviderConfig = this._totpProviderConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._state = undefined;
            this._totpProviderConfig.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._state = value.state;
            this._totpProviderConfig.internalValue = value.totpProviderConfig;
        }
    }
    get state() {
        return this.getStringAttribute('state');
    }
    set state(value) {
        this._state = value;
    }
    resetState() {
        this._state = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stateInput() {
        return this._state;
    }
    get totpProviderConfig() {
        return this._totpProviderConfig;
    }
    putTotpProviderConfig(value) {
        this._totpProviderConfig.internalValue = value;
    }
    resetTotpProviderConfig() {
        this._totpProviderConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get totpProviderConfigInput() {
        return this._totpProviderConfig.internalValue;
    }
}
exports.IdentityPlatformConfigMfaProviderConfigsOutputReference = IdentityPlatformConfigMfaProviderConfigsOutputReference;
_h = JSII_RTTI_SYMBOL_1;
IdentityPlatformConfigMfaProviderConfigsOutputReference[_h] = { fqn: "@cdktf/provider-google.identityPlatformConfig.IdentityPlatformConfigMfaProviderConfigsOutputReference", version: "14.13.1" };
class IdentityPlatformConfigMfaProviderConfigsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new IdentityPlatformConfigMfaProviderConfigsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.IdentityPlatformConfigMfaProviderConfigsList = IdentityPlatformConfigMfaProviderConfigsList;
_j = JSII_RTTI_SYMBOL_1;
IdentityPlatformConfigMfaProviderConfigsList[_j] = { fqn: "@cdktf/provider-google.identityPlatformConfig.IdentityPlatformConfigMfaProviderConfigsList", version: "14.13.1" };
function identityPlatformConfigMfaToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled_providers: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.enabledProviders),
        state: cdktf.stringToTerraform(struct.state),
        provider_configs: cdktf.listMapper(identityPlatformConfigMfaProviderConfigsToTerraform, true)(struct.providerConfigs),
    };
}
exports.identityPlatformConfigMfaToTerraform = identityPlatformConfigMfaToTerraform;
function identityPlatformConfigMfaToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled_providers: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.enabledProviders),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        state: {
            value: cdktf.stringToHclTerraform(struct.state),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        provider_configs: {
            value: cdktf.listMapperHcl(identityPlatformConfigMfaProviderConfigsToHclTerraform, true)(struct.providerConfigs),
            isBlock: true,
            type: "list",
            storageClassType: "IdentityPlatformConfigMfaProviderConfigsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.identityPlatformConfigMfaToHclTerraform = identityPlatformConfigMfaToHclTerraform;
class IdentityPlatformConfigMfaOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // provider_configs - computed: false, optional: true, required: false
        this._providerConfigs = new IdentityPlatformConfigMfaProviderConfigsList(this, "provider_configs", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabledProviders !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabledProviders = this._enabledProviders;
        }
        if (this._state !== undefined) {
            hasAnyValues = true;
            internalValueResult.state = this._state;
        }
        if (this._providerConfigs?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.providerConfigs = this._providerConfigs?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabledProviders = undefined;
            this._state = undefined;
            this._providerConfigs.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabledProviders = value.enabledProviders;
            this._state = value.state;
            this._providerConfigs.internalValue = value.providerConfigs;
        }
    }
    get enabledProviders() {
        return this.getListAttribute('enabled_providers');
    }
    set enabledProviders(value) {
        this._enabledProviders = value;
    }
    resetEnabledProviders() {
        this._enabledProviders = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledProvidersInput() {
        return this._enabledProviders;
    }
    get state() {
        return this.getStringAttribute('state');
    }
    set state(value) {
        this._state = value;
    }
    resetState() {
        this._state = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stateInput() {
        return this._state;
    }
    get providerConfigs() {
        return this._providerConfigs;
    }
    putProviderConfigs(value) {
        this._providerConfigs.internalValue = value;
    }
    resetProviderConfigs() {
        this._providerConfigs.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get providerConfigsInput() {
        return this._providerConfigs.internalValue;
    }
}
exports.IdentityPlatformConfigMfaOutputReference = IdentityPlatformConfigMfaOutputReference;
_k = JSII_RTTI_SYMBOL_1;
IdentityPlatformConfigMfaOutputReference[_k] = { fqn: "@cdktf/provider-google.identityPlatformConfig.IdentityPlatformConfigMfaOutputReference", version: "14.13.1" };
function identityPlatformConfigMonitoringRequestLoggingToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.identityPlatformConfigMonitoringRequestLoggingToTerraform = identityPlatformConfigMonitoringRequestLoggingToTerraform;
function identityPlatformConfigMonitoringRequestLoggingToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.identityPlatformConfigMonitoringRequestLoggingToHclTerraform = identityPlatformConfigMonitoringRequestLoggingToHclTerraform;
class IdentityPlatformConfigMonitoringRequestLoggingOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
}
exports.IdentityPlatformConfigMonitoringRequestLoggingOutputReference = IdentityPlatformConfigMonitoringRequestLoggingOutputReference;
_l = JSII_RTTI_SYMBOL_1;
IdentityPlatformConfigMonitoringRequestLoggingOutputReference[_l] = { fqn: "@cdktf/provider-google.identityPlatformConfig.IdentityPlatformConfigMonitoringRequestLoggingOutputReference", version: "14.13.1" };
function identityPlatformConfigMonitoringToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        request_logging: identityPlatformConfigMonitoringRequestLoggingToTerraform(struct.requestLogging),
    };
}
exports.identityPlatformConfigMonitoringToTerraform = identityPlatformConfigMonitoringToTerraform;
function identityPlatformConfigMonitoringToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        request_logging: {
            value: identityPlatformConfigMonitoringRequestLoggingToHclTerraform(struct.requestLogging),
            isBlock: true,
            type: "list",
            storageClassType: "IdentityPlatformConfigMonitoringRequestLoggingList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.identityPlatformConfigMonitoringToHclTerraform = identityPlatformConfigMonitoringToHclTerraform;
class IdentityPlatformConfigMonitoringOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // request_logging - computed: false, optional: true, required: false
        this._requestLogging = new IdentityPlatformConfigMonitoringRequestLoggingOutputReference(this, "request_logging");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._requestLogging?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.requestLogging = this._requestLogging?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._requestLogging.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._requestLogging.internalValue = value.requestLogging;
        }
    }
    get requestLogging() {
        return this._requestLogging;
    }
    putRequestLogging(value) {
        this._requestLogging.internalValue = value;
    }
    resetRequestLogging() {
        this._requestLogging.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestLoggingInput() {
        return this._requestLogging.internalValue;
    }
}
exports.IdentityPlatformConfigMonitoringOutputReference = IdentityPlatformConfigMonitoringOutputReference;
_m = JSII_RTTI_SYMBOL_1;
IdentityPlatformConfigMonitoringOutputReference[_m] = { fqn: "@cdktf/provider-google.identityPlatformConfig.IdentityPlatformConfigMonitoringOutputReference", version: "14.13.1" };
function identityPlatformConfigMultiTenantToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allow_tenants: cdktf.booleanToTerraform(struct.allowTenants),
        default_tenant_location: cdktf.stringToTerraform(struct.defaultTenantLocation),
    };
}
exports.identityPlatformConfigMultiTenantToTerraform = identityPlatformConfigMultiTenantToTerraform;
function identityPlatformConfigMultiTenantToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        allow_tenants: {
            value: cdktf.booleanToHclTerraform(struct.allowTenants),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        default_tenant_location: {
            value: cdktf.stringToHclTerraform(struct.defaultTenantLocation),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.identityPlatformConfigMultiTenantToHclTerraform = identityPlatformConfigMultiTenantToHclTerraform;
class IdentityPlatformConfigMultiTenantOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowTenants !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowTenants = this._allowTenants;
        }
        if (this._defaultTenantLocation !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultTenantLocation = this._defaultTenantLocation;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowTenants = undefined;
            this._defaultTenantLocation = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowTenants = value.allowTenants;
            this._defaultTenantLocation = value.defaultTenantLocation;
        }
    }
    get allowTenants() {
        return this.getBooleanAttribute('allow_tenants');
    }
    set allowTenants(value) {
        this._allowTenants = value;
    }
    resetAllowTenants() {
        this._allowTenants = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowTenantsInput() {
        return this._allowTenants;
    }
    get defaultTenantLocation() {
        return this.getStringAttribute('default_tenant_location');
    }
    set defaultTenantLocation(value) {
        this._defaultTenantLocation = value;
    }
    resetDefaultTenantLocation() {
        this._defaultTenantLocation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultTenantLocationInput() {
        return this._defaultTenantLocation;
    }
}
exports.IdentityPlatformConfigMultiTenantOutputReference = IdentityPlatformConfigMultiTenantOutputReference;
_o = JSII_RTTI_SYMBOL_1;
IdentityPlatformConfigMultiTenantOutputReference[_o] = { fqn: "@cdktf/provider-google.identityPlatformConfig.IdentityPlatformConfigMultiTenantOutputReference", version: "14.13.1" };
function identityPlatformConfigQuotaSignUpQuotaConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        quota: cdktf.numberToTerraform(struct.quota),
        quota_duration: cdktf.stringToTerraform(struct.quotaDuration),
        start_time: cdktf.stringToTerraform(struct.startTime),
    };
}
exports.identityPlatformConfigQuotaSignUpQuotaConfigToTerraform = identityPlatformConfigQuotaSignUpQuotaConfigToTerraform;
function identityPlatformConfigQuotaSignUpQuotaConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        quota: {
            value: cdktf.numberToHclTerraform(struct.quota),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        quota_duration: {
            value: cdktf.stringToHclTerraform(struct.quotaDuration),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        start_time: {
            value: cdktf.stringToHclTerraform(struct.startTime),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.identityPlatformConfigQuotaSignUpQuotaConfigToHclTerraform = identityPlatformConfigQuotaSignUpQuotaConfigToHclTerraform;
class IdentityPlatformConfigQuotaSignUpQuotaConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._quota !== undefined) {
            hasAnyValues = true;
            internalValueResult.quota = this._quota;
        }
        if (this._quotaDuration !== undefined) {
            hasAnyValues = true;
            internalValueResult.quotaDuration = this._quotaDuration;
        }
        if (this._startTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.startTime = this._startTime;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._quota = undefined;
            this._quotaDuration = undefined;
            this._startTime = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._quota = value.quota;
            this._quotaDuration = value.quotaDuration;
            this._startTime = value.startTime;
        }
    }
    get quota() {
        return this.getNumberAttribute('quota');
    }
    set quota(value) {
        this._quota = value;
    }
    resetQuota() {
        this._quota = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get quotaInput() {
        return this._quota;
    }
    get quotaDuration() {
        return this.getStringAttribute('quota_duration');
    }
    set quotaDuration(value) {
        this._quotaDuration = value;
    }
    resetQuotaDuration() {
        this._quotaDuration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get quotaDurationInput() {
        return this._quotaDuration;
    }
    get startTime() {
        return this.getStringAttribute('start_time');
    }
    set startTime(value) {
        this._startTime = value;
    }
    resetStartTime() {
        this._startTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get startTimeInput() {
        return this._startTime;
    }
}
exports.IdentityPlatformConfigQuotaSignUpQuotaConfigOutputReference = IdentityPlatformConfigQuotaSignUpQuotaConfigOutputReference;
_p = JSII_RTTI_SYMBOL_1;
IdentityPlatformConfigQuotaSignUpQuotaConfigOutputReference[_p] = { fqn: "@cdktf/provider-google.identityPlatformConfig.IdentityPlatformConfigQuotaSignUpQuotaConfigOutputReference", version: "14.13.1" };
function identityPlatformConfigQuotaToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        sign_up_quota_config: identityPlatformConfigQuotaSignUpQuotaConfigToTerraform(struct.signUpQuotaConfig),
    };
}
exports.identityPlatformConfigQuotaToTerraform = identityPlatformConfigQuotaToTerraform;
function identityPlatformConfigQuotaToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        sign_up_quota_config: {
            value: identityPlatformConfigQuotaSignUpQuotaConfigToHclTerraform(struct.signUpQuotaConfig),
            isBlock: true,
            type: "list",
            storageClassType: "IdentityPlatformConfigQuotaSignUpQuotaConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.identityPlatformConfigQuotaToHclTerraform = identityPlatformConfigQuotaToHclTerraform;
class IdentityPlatformConfigQuotaOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // sign_up_quota_config - computed: false, optional: true, required: false
        this._signUpQuotaConfig = new IdentityPlatformConfigQuotaSignUpQuotaConfigOutputReference(this, "sign_up_quota_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._signUpQuotaConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.signUpQuotaConfig = this._signUpQuotaConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._signUpQuotaConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._signUpQuotaConfig.internalValue = value.signUpQuotaConfig;
        }
    }
    get signUpQuotaConfig() {
        return this._signUpQuotaConfig;
    }
    putSignUpQuotaConfig(value) {
        this._signUpQuotaConfig.internalValue = value;
    }
    resetSignUpQuotaConfig() {
        this._signUpQuotaConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get signUpQuotaConfigInput() {
        return this._signUpQuotaConfig.internalValue;
    }
}
exports.IdentityPlatformConfigQuotaOutputReference = IdentityPlatformConfigQuotaOutputReference;
_q = JSII_RTTI_SYMBOL_1;
IdentityPlatformConfigQuotaOutputReference[_q] = { fqn: "@cdktf/provider-google.identityPlatformConfig.IdentityPlatformConfigQuotaOutputReference", version: "14.13.1" };
function identityPlatformConfigSignInHashConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.identityPlatformConfigSignInHashConfigToTerraform = identityPlatformConfigSignInHashConfigToTerraform;
function identityPlatformConfigSignInHashConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.identityPlatformConfigSignInHashConfigToHclTerraform = identityPlatformConfigSignInHashConfigToHclTerraform;
class IdentityPlatformConfigSignInHashConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // algorithm - computed: true, optional: false, required: false
    get algorithm() {
        return this.getStringAttribute('algorithm');
    }
    // memory_cost - computed: true, optional: false, required: false
    get memoryCost() {
        return this.getNumberAttribute('memory_cost');
    }
    // rounds - computed: true, optional: false, required: false
    get rounds() {
        return this.getNumberAttribute('rounds');
    }
    // salt_separator - computed: true, optional: false, required: false
    get saltSeparator() {
        return this.getStringAttribute('salt_separator');
    }
    // signer_key - computed: true, optional: false, required: false
    get signerKey() {
        return this.getStringAttribute('signer_key');
    }
}
exports.IdentityPlatformConfigSignInHashConfigOutputReference = IdentityPlatformConfigSignInHashConfigOutputReference;
_r = JSII_RTTI_SYMBOL_1;
IdentityPlatformConfigSignInHashConfigOutputReference[_r] = { fqn: "@cdktf/provider-google.identityPlatformConfig.IdentityPlatformConfigSignInHashConfigOutputReference", version: "14.13.1" };
class IdentityPlatformConfigSignInHashConfigList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new IdentityPlatformConfigSignInHashConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.IdentityPlatformConfigSignInHashConfigList = IdentityPlatformConfigSignInHashConfigList;
_s = JSII_RTTI_SYMBOL_1;
IdentityPlatformConfigSignInHashConfigList[_s] = { fqn: "@cdktf/provider-google.identityPlatformConfig.IdentityPlatformConfigSignInHashConfigList", version: "14.13.1" };
function identityPlatformConfigSignInAnonymousToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.identityPlatformConfigSignInAnonymousToTerraform = identityPlatformConfigSignInAnonymousToTerraform;
function identityPlatformConfigSignInAnonymousToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.identityPlatformConfigSignInAnonymousToHclTerraform = identityPlatformConfigSignInAnonymousToHclTerraform;
class IdentityPlatformConfigSignInAnonymousOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
}
exports.IdentityPlatformConfigSignInAnonymousOutputReference = IdentityPlatformConfigSignInAnonymousOutputReference;
_t = JSII_RTTI_SYMBOL_1;
IdentityPlatformConfigSignInAnonymousOutputReference[_t] = { fqn: "@cdktf/provider-google.identityPlatformConfig.IdentityPlatformConfigSignInAnonymousOutputReference", version: "14.13.1" };
function identityPlatformConfigSignInEmailToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        password_required: cdktf.booleanToTerraform(struct.passwordRequired),
    };
}
exports.identityPlatformConfigSignInEmailToTerraform = identityPlatformConfigSignInEmailToTerraform;
function identityPlatformConfigSignInEmailToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        password_required: {
            value: cdktf.booleanToHclTerraform(struct.passwordRequired),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.identityPlatformConfigSignInEmailToHclTerraform = identityPlatformConfigSignInEmailToHclTerraform;
class IdentityPlatformConfigSignInEmailOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._passwordRequired !== undefined) {
            hasAnyValues = true;
            internalValueResult.passwordRequired = this._passwordRequired;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._passwordRequired = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._passwordRequired = value.passwordRequired;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get passwordRequired() {
        return this.getBooleanAttribute('password_required');
    }
    set passwordRequired(value) {
        this._passwordRequired = value;
    }
    resetPasswordRequired() {
        this._passwordRequired = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get passwordRequiredInput() {
        return this._passwordRequired;
    }
}
exports.IdentityPlatformConfigSignInEmailOutputReference = IdentityPlatformConfigSignInEmailOutputReference;
_u = JSII_RTTI_SYMBOL_1;
IdentityPlatformConfigSignInEmailOutputReference[_u] = { fqn: "@cdktf/provider-google.identityPlatformConfig.IdentityPlatformConfigSignInEmailOutputReference", version: "14.13.1" };
function identityPlatformConfigSignInPhoneNumberToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        test_phone_numbers: cdktf.hashMapper(cdktf.stringToTerraform)(struct.testPhoneNumbers),
    };
}
exports.identityPlatformConfigSignInPhoneNumberToTerraform = identityPlatformConfigSignInPhoneNumberToTerraform;
function identityPlatformConfigSignInPhoneNumberToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        test_phone_numbers: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.testPhoneNumbers),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.identityPlatformConfigSignInPhoneNumberToHclTerraform = identityPlatformConfigSignInPhoneNumberToHclTerraform;
class IdentityPlatformConfigSignInPhoneNumberOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._testPhoneNumbers !== undefined) {
            hasAnyValues = true;
            internalValueResult.testPhoneNumbers = this._testPhoneNumbers;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._testPhoneNumbers = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._testPhoneNumbers = value.testPhoneNumbers;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get testPhoneNumbers() {
        return this.getStringMapAttribute('test_phone_numbers');
    }
    set testPhoneNumbers(value) {
        this._testPhoneNumbers = value;
    }
    resetTestPhoneNumbers() {
        this._testPhoneNumbers = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get testPhoneNumbersInput() {
        return this._testPhoneNumbers;
    }
}
exports.IdentityPlatformConfigSignInPhoneNumberOutputReference = IdentityPlatformConfigSignInPhoneNumberOutputReference;
_v = JSII_RTTI_SYMBOL_1;
IdentityPlatformConfigSignInPhoneNumberOutputReference[_v] = { fqn: "@cdktf/provider-google.identityPlatformConfig.IdentityPlatformConfigSignInPhoneNumberOutputReference", version: "14.13.1" };
function identityPlatformConfigSignInToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allow_duplicate_emails: cdktf.booleanToTerraform(struct.allowDuplicateEmails),
        anonymous: identityPlatformConfigSignInAnonymousToTerraform(struct.anonymous),
        email: identityPlatformConfigSignInEmailToTerraform(struct.email),
        phone_number: identityPlatformConfigSignInPhoneNumberToTerraform(struct.phoneNumber),
    };
}
exports.identityPlatformConfigSignInToTerraform = identityPlatformConfigSignInToTerraform;
function identityPlatformConfigSignInToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        allow_duplicate_emails: {
            value: cdktf.booleanToHclTerraform(struct.allowDuplicateEmails),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        anonymous: {
            value: identityPlatformConfigSignInAnonymousToHclTerraform(struct.anonymous),
            isBlock: true,
            type: "list",
            storageClassType: "IdentityPlatformConfigSignInAnonymousList",
        },
        email: {
            value: identityPlatformConfigSignInEmailToHclTerraform(struct.email),
            isBlock: true,
            type: "list",
            storageClassType: "IdentityPlatformConfigSignInEmailList",
        },
        phone_number: {
            value: identityPlatformConfigSignInPhoneNumberToHclTerraform(struct.phoneNumber),
            isBlock: true,
            type: "list",
            storageClassType: "IdentityPlatformConfigSignInPhoneNumberList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.identityPlatformConfigSignInToHclTerraform = identityPlatformConfigSignInToHclTerraform;
class IdentityPlatformConfigSignInOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // hash_config - computed: true, optional: false, required: false
        this._hashConfig = new IdentityPlatformConfigSignInHashConfigList(this, "hash_config", false);
        // anonymous - computed: false, optional: true, required: false
        this._anonymous = new IdentityPlatformConfigSignInAnonymousOutputReference(this, "anonymous");
        // email - computed: false, optional: true, required: false
        this._email = new IdentityPlatformConfigSignInEmailOutputReference(this, "email");
        // phone_number - computed: false, optional: true, required: false
        this._phoneNumber = new IdentityPlatformConfigSignInPhoneNumberOutputReference(this, "phone_number");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowDuplicateEmails !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowDuplicateEmails = this._allowDuplicateEmails;
        }
        if (this._anonymous?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.anonymous = this._anonymous?.internalValue;
        }
        if (this._email?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.email = this._email?.internalValue;
        }
        if (this._phoneNumber?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.phoneNumber = this._phoneNumber?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowDuplicateEmails = undefined;
            this._anonymous.internalValue = undefined;
            this._email.internalValue = undefined;
            this._phoneNumber.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowDuplicateEmails = value.allowDuplicateEmails;
            this._anonymous.internalValue = value.anonymous;
            this._email.internalValue = value.email;
            this._phoneNumber.internalValue = value.phoneNumber;
        }
    }
    get allowDuplicateEmails() {
        return this.getBooleanAttribute('allow_duplicate_emails');
    }
    set allowDuplicateEmails(value) {
        this._allowDuplicateEmails = value;
    }
    resetAllowDuplicateEmails() {
        this._allowDuplicateEmails = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowDuplicateEmailsInput() {
        return this._allowDuplicateEmails;
    }
    get hashConfig() {
        return this._hashConfig;
    }
    get anonymous() {
        return this._anonymous;
    }
    putAnonymous(value) {
        this._anonymous.internalValue = value;
    }
    resetAnonymous() {
        this._anonymous.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get anonymousInput() {
        return this._anonymous.internalValue;
    }
    get email() {
        return this._email;
    }
    putEmail(value) {
        this._email.internalValue = value;
    }
    resetEmail() {
        this._email.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get emailInput() {
        return this._email.internalValue;
    }
    get phoneNumber() {
        return this._phoneNumber;
    }
    putPhoneNumber(value) {
        this._phoneNumber.internalValue = value;
    }
    resetPhoneNumber() {
        this._phoneNumber.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get phoneNumberInput() {
        return this._phoneNumber.internalValue;
    }
}
exports.IdentityPlatformConfigSignInOutputReference = IdentityPlatformConfigSignInOutputReference;
_w = JSII_RTTI_SYMBOL_1;
IdentityPlatformConfigSignInOutputReference[_w] = { fqn: "@cdktf/provider-google.identityPlatformConfig.IdentityPlatformConfigSignInOutputReference", version: "14.13.1" };
function identityPlatformConfigSmsRegionConfigAllowByDefaultToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        disallowed_regions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.disallowedRegions),
    };
}
exports.identityPlatformConfigSmsRegionConfigAllowByDefaultToTerraform = identityPlatformConfigSmsRegionConfigAllowByDefaultToTerraform;
function identityPlatformConfigSmsRegionConfigAllowByDefaultToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        disallowed_regions: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.disallowedRegions),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.identityPlatformConfigSmsRegionConfigAllowByDefaultToHclTerraform = identityPlatformConfigSmsRegionConfigAllowByDefaultToHclTerraform;
class IdentityPlatformConfigSmsRegionConfigAllowByDefaultOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._disallowedRegions !== undefined) {
            hasAnyValues = true;
            internalValueResult.disallowedRegions = this._disallowedRegions;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._disallowedRegions = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._disallowedRegions = value.disallowedRegions;
        }
    }
    get disallowedRegions() {
        return this.getListAttribute('disallowed_regions');
    }
    set disallowedRegions(value) {
        this._disallowedRegions = value;
    }
    resetDisallowedRegions() {
        this._disallowedRegions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get disallowedRegionsInput() {
        return this._disallowedRegions;
    }
}
exports.IdentityPlatformConfigSmsRegionConfigAllowByDefaultOutputReference = IdentityPlatformConfigSmsRegionConfigAllowByDefaultOutputReference;
_x = JSII_RTTI_SYMBOL_1;
IdentityPlatformConfigSmsRegionConfigAllowByDefaultOutputReference[_x] = { fqn: "@cdktf/provider-google.identityPlatformConfig.IdentityPlatformConfigSmsRegionConfigAllowByDefaultOutputReference", version: "14.13.1" };
function identityPlatformConfigSmsRegionConfigAllowlistOnlyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allowed_regions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.allowedRegions),
    };
}
exports.identityPlatformConfigSmsRegionConfigAllowlistOnlyToTerraform = identityPlatformConfigSmsRegionConfigAllowlistOnlyToTerraform;
function identityPlatformConfigSmsRegionConfigAllowlistOnlyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        allowed_regions: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.allowedRegions),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.identityPlatformConfigSmsRegionConfigAllowlistOnlyToHclTerraform = identityPlatformConfigSmsRegionConfigAllowlistOnlyToHclTerraform;
class IdentityPlatformConfigSmsRegionConfigAllowlistOnlyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowedRegions !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowedRegions = this._allowedRegions;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowedRegions = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowedRegions = value.allowedRegions;
        }
    }
    get allowedRegions() {
        return this.getListAttribute('allowed_regions');
    }
    set allowedRegions(value) {
        this._allowedRegions = value;
    }
    resetAllowedRegions() {
        this._allowedRegions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowedRegionsInput() {
        return this._allowedRegions;
    }
}
exports.IdentityPlatformConfigSmsRegionConfigAllowlistOnlyOutputReference = IdentityPlatformConfigSmsRegionConfigAllowlistOnlyOutputReference;
_y = JSII_RTTI_SYMBOL_1;
IdentityPlatformConfigSmsRegionConfigAllowlistOnlyOutputReference[_y] = { fqn: "@cdktf/provider-google.identityPlatformConfig.IdentityPlatformConfigSmsRegionConfigAllowlistOnlyOutputReference", version: "14.13.1" };
function identityPlatformConfigSmsRegionConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allow_by_default: identityPlatformConfigSmsRegionConfigAllowByDefaultToTerraform(struct.allowByDefault),
        allowlist_only: identityPlatformConfigSmsRegionConfigAllowlistOnlyToTerraform(struct.allowlistOnly),
    };
}
exports.identityPlatformConfigSmsRegionConfigToTerraform = identityPlatformConfigSmsRegionConfigToTerraform;
function identityPlatformConfigSmsRegionConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        allow_by_default: {
            value: identityPlatformConfigSmsRegionConfigAllowByDefaultToHclTerraform(struct.allowByDefault),
            isBlock: true,
            type: "list",
            storageClassType: "IdentityPlatformConfigSmsRegionConfigAllowByDefaultList",
        },
        allowlist_only: {
            value: identityPlatformConfigSmsRegionConfigAllowlistOnlyToHclTerraform(struct.allowlistOnly),
            isBlock: true,
            type: "list",
            storageClassType: "IdentityPlatformConfigSmsRegionConfigAllowlistOnlyList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.identityPlatformConfigSmsRegionConfigToHclTerraform = identityPlatformConfigSmsRegionConfigToHclTerraform;
class IdentityPlatformConfigSmsRegionConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // allow_by_default - computed: false, optional: true, required: false
        this._allowByDefault = new IdentityPlatformConfigSmsRegionConfigAllowByDefaultOutputReference(this, "allow_by_default");
        // allowlist_only - computed: false, optional: true, required: false
        this._allowlistOnly = new IdentityPlatformConfigSmsRegionConfigAllowlistOnlyOutputReference(this, "allowlist_only");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allowByDefault?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowByDefault = this._allowByDefault?.internalValue;
        }
        if (this._allowlistOnly?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.allowlistOnly = this._allowlistOnly?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allowByDefault.internalValue = undefined;
            this._allowlistOnly.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allowByDefault.internalValue = value.allowByDefault;
            this._allowlistOnly.internalValue = value.allowlistOnly;
        }
    }
    get allowByDefault() {
        return this._allowByDefault;
    }
    putAllowByDefault(value) {
        this._allowByDefault.internalValue = value;
    }
    resetAllowByDefault() {
        this._allowByDefault.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowByDefaultInput() {
        return this._allowByDefault.internalValue;
    }
    get allowlistOnly() {
        return this._allowlistOnly;
    }
    putAllowlistOnly(value) {
        this._allowlistOnly.internalValue = value;
    }
    resetAllowlistOnly() {
        this._allowlistOnly.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowlistOnlyInput() {
        return this._allowlistOnly.internalValue;
    }
}
exports.IdentityPlatformConfigSmsRegionConfigOutputReference = IdentityPlatformConfigSmsRegionConfigOutputReference;
_z = JSII_RTTI_SYMBOL_1;
IdentityPlatformConfigSmsRegionConfigOutputReference[_z] = { fqn: "@cdktf/provider-google.identityPlatformConfig.IdentityPlatformConfigSmsRegionConfigOutputReference", version: "14.13.1" };
function identityPlatformConfigTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.identityPlatformConfigTimeoutsToTerraform = identityPlatformConfigTimeoutsToTerraform;
function identityPlatformConfigTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.identityPlatformConfigTimeoutsToHclTerraform = identityPlatformConfigTimeoutsToHclTerraform;
class IdentityPlatformConfigTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.IdentityPlatformConfigTimeoutsOutputReference = IdentityPlatformConfigTimeoutsOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
IdentityPlatformConfigTimeoutsOutputReference[_0] = { fqn: "@cdktf/provider-google.identityPlatformConfig.IdentityPlatformConfigTimeoutsOutputReference", version: "14.13.1" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/identity_platform_config google_identity_platform_config}
*/
class IdentityPlatformConfig extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a IdentityPlatformConfig resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the IdentityPlatformConfig to import
    * @param importFromId The id of the existing IdentityPlatformConfig that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/identity_platform_config#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the IdentityPlatformConfig to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_identity_platform_config", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/identity_platform_config google_identity_platform_config} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options IdentityPlatformConfigConfig = {}
    */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'google_identity_platform_config',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // blocking_functions - computed: false, optional: true, required: false
        this._blockingFunctions = new IdentityPlatformConfigBlockingFunctionsOutputReference(this, "blocking_functions");
        // client - computed: false, optional: true, required: false
        this._client = new IdentityPlatformConfigClientOutputReference(this, "client");
        // mfa - computed: false, optional: true, required: false
        this._mfa = new IdentityPlatformConfigMfaOutputReference(this, "mfa");
        // monitoring - computed: false, optional: true, required: false
        this._monitoring = new IdentityPlatformConfigMonitoringOutputReference(this, "monitoring");
        // multi_tenant - computed: false, optional: true, required: false
        this._multiTenant = new IdentityPlatformConfigMultiTenantOutputReference(this, "multi_tenant");
        // quota - computed: false, optional: true, required: false
        this._quota = new IdentityPlatformConfigQuotaOutputReference(this, "quota");
        // sign_in - computed: false, optional: true, required: false
        this._signIn = new IdentityPlatformConfigSignInOutputReference(this, "sign_in");
        // sms_region_config - computed: false, optional: true, required: false
        this._smsRegionConfig = new IdentityPlatformConfigSmsRegionConfigOutputReference(this, "sms_region_config");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new IdentityPlatformConfigTimeoutsOutputReference(this, "timeouts");
        this._authorizedDomains = config.authorizedDomains;
        this._autodeleteAnonymousUsers = config.autodeleteAnonymousUsers;
        this._id = config.id;
        this._project = config.project;
        this._blockingFunctions.internalValue = config.blockingFunctions;
        this._client.internalValue = config.client;
        this._mfa.internalValue = config.mfa;
        this._monitoring.internalValue = config.monitoring;
        this._multiTenant.internalValue = config.multiTenant;
        this._quota.internalValue = config.quota;
        this._signIn.internalValue = config.signIn;
        this._smsRegionConfig.internalValue = config.smsRegionConfig;
        this._timeouts.internalValue = config.timeouts;
    }
    get authorizedDomains() {
        return this.getListAttribute('authorized_domains');
    }
    set authorizedDomains(value) {
        this._authorizedDomains = value;
    }
    resetAuthorizedDomains() {
        this._authorizedDomains = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authorizedDomainsInput() {
        return this._authorizedDomains;
    }
    get autodeleteAnonymousUsers() {
        return this.getBooleanAttribute('autodelete_anonymous_users');
    }
    set autodeleteAnonymousUsers(value) {
        this._autodeleteAnonymousUsers = value;
    }
    resetAutodeleteAnonymousUsers() {
        this._autodeleteAnonymousUsers = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autodeleteAnonymousUsersInput() {
        return this._autodeleteAnonymousUsers;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get blockingFunctions() {
        return this._blockingFunctions;
    }
    putBlockingFunctions(value) {
        this._blockingFunctions.internalValue = value;
    }
    resetBlockingFunctions() {
        this._blockingFunctions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get blockingFunctionsInput() {
        return this._blockingFunctions.internalValue;
    }
    get client() {
        return this._client;
    }
    putClient(value) {
        this._client.internalValue = value;
    }
    resetClient() {
        this._client.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientInput() {
        return this._client.internalValue;
    }
    get mfa() {
        return this._mfa;
    }
    putMfa(value) {
        this._mfa.internalValue = value;
    }
    resetMfa() {
        this._mfa.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mfaInput() {
        return this._mfa.internalValue;
    }
    get monitoring() {
        return this._monitoring;
    }
    putMonitoring(value) {
        this._monitoring.internalValue = value;
    }
    resetMonitoring() {
        this._monitoring.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get monitoringInput() {
        return this._monitoring.internalValue;
    }
    get multiTenant() {
        return this._multiTenant;
    }
    putMultiTenant(value) {
        this._multiTenant.internalValue = value;
    }
    resetMultiTenant() {
        this._multiTenant.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get multiTenantInput() {
        return this._multiTenant.internalValue;
    }
    get quota() {
        return this._quota;
    }
    putQuota(value) {
        this._quota.internalValue = value;
    }
    resetQuota() {
        this._quota.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get quotaInput() {
        return this._quota.internalValue;
    }
    get signIn() {
        return this._signIn;
    }
    putSignIn(value) {
        this._signIn.internalValue = value;
    }
    resetSignIn() {
        this._signIn.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get signInInput() {
        return this._signIn.internalValue;
    }
    get smsRegionConfig() {
        return this._smsRegionConfig;
    }
    putSmsRegionConfig(value) {
        this._smsRegionConfig.internalValue = value;
    }
    resetSmsRegionConfig() {
        this._smsRegionConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get smsRegionConfigInput() {
        return this._smsRegionConfig.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            authorized_domains: cdktf.listMapper(cdktf.stringToTerraform, false)(this._authorizedDomains),
            autodelete_anonymous_users: cdktf.booleanToTerraform(this._autodeleteAnonymousUsers),
            id: cdktf.stringToTerraform(this._id),
            project: cdktf.stringToTerraform(this._project),
            blocking_functions: identityPlatformConfigBlockingFunctionsToTerraform(this._blockingFunctions.internalValue),
            client: identityPlatformConfigClientToTerraform(this._client.internalValue),
            mfa: identityPlatformConfigMfaToTerraform(this._mfa.internalValue),
            monitoring: identityPlatformConfigMonitoringToTerraform(this._monitoring.internalValue),
            multi_tenant: identityPlatformConfigMultiTenantToTerraform(this._multiTenant.internalValue),
            quota: identityPlatformConfigQuotaToTerraform(this._quota.internalValue),
            sign_in: identityPlatformConfigSignInToTerraform(this._signIn.internalValue),
            sms_region_config: identityPlatformConfigSmsRegionConfigToTerraform(this._smsRegionConfig.internalValue),
            timeouts: identityPlatformConfigTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            authorized_domains: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._authorizedDomains),
                isBlock: false,
                type: "list",
                storageClassType: "stringList",
            },
            autodelete_anonymous_users: {
                value: cdktf.booleanToHclTerraform(this._autodeleteAnonymousUsers),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            project: {
                value: cdktf.stringToHclTerraform(this._project),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            blocking_functions: {
                value: identityPlatformConfigBlockingFunctionsToHclTerraform(this._blockingFunctions.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "IdentityPlatformConfigBlockingFunctionsList",
            },
            client: {
                value: identityPlatformConfigClientToHclTerraform(this._client.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "IdentityPlatformConfigClientList",
            },
            mfa: {
                value: identityPlatformConfigMfaToHclTerraform(this._mfa.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "IdentityPlatformConfigMfaList",
            },
            monitoring: {
                value: identityPlatformConfigMonitoringToHclTerraform(this._monitoring.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "IdentityPlatformConfigMonitoringList",
            },
            multi_tenant: {
                value: identityPlatformConfigMultiTenantToHclTerraform(this._multiTenant.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "IdentityPlatformConfigMultiTenantList",
            },
            quota: {
                value: identityPlatformConfigQuotaToHclTerraform(this._quota.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "IdentityPlatformConfigQuotaList",
            },
            sign_in: {
                value: identityPlatformConfigSignInToHclTerraform(this._signIn.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "IdentityPlatformConfigSignInList",
            },
            sms_region_config: {
                value: identityPlatformConfigSmsRegionConfigToHclTerraform(this._smsRegionConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "IdentityPlatformConfigSmsRegionConfigList",
            },
            timeouts: {
                value: identityPlatformConfigTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "IdentityPlatformConfigTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.IdentityPlatformConfig = IdentityPlatformConfig;
_1 = JSII_RTTI_SYMBOL_1;
IdentityPlatformConfig[_1] = { fqn: "@cdktf/provider-google.identityPlatformConfig.IdentityPlatformConfig", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
IdentityPlatformConfig.tfResourceType = "google_identity_platform_config";
//# sourceMappingURL=data:application/json;base64,