/**
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: MPL-2.0
 */
import { Construct } from 'constructs';
import * as cdktf from 'cdktf';
export interface SecureSourceManagerBranchRuleConfig extends cdktf.TerraformMetaArguments {
    /**
    * Determines if allow stale reviews or approvals before merging to the branch.
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/secure_source_manager_branch_rule#allow_stale_reviews SecureSourceManagerBranchRule#allow_stale_reviews}
    */
    readonly allowStaleReviews?: boolean | cdktf.IResolvable;
    /**
    * The ID for the BranchRule.
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/secure_source_manager_branch_rule#branch_rule_id SecureSourceManagerBranchRule#branch_rule_id}
    */
    readonly branchRuleId: string;
    /**
    * Determines if the branch rule is disabled or not.
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/secure_source_manager_branch_rule#disabled SecureSourceManagerBranchRule#disabled}
    */
    readonly disabled?: boolean | cdktf.IResolvable;
    /**
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/secure_source_manager_branch_rule#id SecureSourceManagerBranchRule#id}
    *
    * Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2.
    * If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
    */
    readonly id?: string;
    /**
    * The BranchRule matches branches based on the specified regular expression. Use .* to match all branches.
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/secure_source_manager_branch_rule#include_pattern SecureSourceManagerBranchRule#include_pattern}
    */
    readonly includePattern: string;
    /**
    * The location for the Repository.
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/secure_source_manager_branch_rule#location SecureSourceManagerBranchRule#location}
    */
    readonly location: string;
    /**
    * The minimum number of approvals required for the branch rule to be matched.
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/secure_source_manager_branch_rule#minimum_approvals_count SecureSourceManagerBranchRule#minimum_approvals_count}
    */
    readonly minimumApprovalsCount?: number;
    /**
    * The minimum number of reviews required for the branch rule to be matched.
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/secure_source_manager_branch_rule#minimum_reviews_count SecureSourceManagerBranchRule#minimum_reviews_count}
    */
    readonly minimumReviewsCount?: number;
    /**
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/secure_source_manager_branch_rule#project SecureSourceManagerBranchRule#project}
    */
    readonly project?: string;
    /**
    * The ID for the Repository.
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/secure_source_manager_branch_rule#repository_id SecureSourceManagerBranchRule#repository_id}
    */
    readonly repositoryId: string;
    /**
    * Determines if require comments resolved before merging to the branch.
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/secure_source_manager_branch_rule#require_comments_resolved SecureSourceManagerBranchRule#require_comments_resolved}
    */
    readonly requireCommentsResolved?: boolean | cdktf.IResolvable;
    /**
    * Determines if require linear history before merging to the branch.
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/secure_source_manager_branch_rule#require_linear_history SecureSourceManagerBranchRule#require_linear_history}
    */
    readonly requireLinearHistory?: boolean | cdktf.IResolvable;
    /**
    * Determines if the branch rule requires a pull request or not.
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/secure_source_manager_branch_rule#require_pull_request SecureSourceManagerBranchRule#require_pull_request}
    */
    readonly requirePullRequest?: boolean | cdktf.IResolvable;
    /**
    * timeouts block
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/secure_source_manager_branch_rule#timeouts SecureSourceManagerBranchRule#timeouts}
    */
    readonly timeouts?: SecureSourceManagerBranchRuleTimeouts;
}
export interface SecureSourceManagerBranchRuleTimeouts {
    /**
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/secure_source_manager_branch_rule#create SecureSourceManagerBranchRule#create}
    */
    readonly create?: string;
    /**
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/secure_source_manager_branch_rule#delete SecureSourceManagerBranchRule#delete}
    */
    readonly delete?: string;
    /**
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/secure_source_manager_branch_rule#update SecureSourceManagerBranchRule#update}
    */
    readonly update?: string;
}
export declare function secureSourceManagerBranchRuleTimeoutsToTerraform(struct?: SecureSourceManagerBranchRuleTimeouts | cdktf.IResolvable): any;
export declare function secureSourceManagerBranchRuleTimeoutsToHclTerraform(struct?: SecureSourceManagerBranchRuleTimeouts | cdktf.IResolvable): any;
export declare class SecureSourceManagerBranchRuleTimeoutsOutputReference extends cdktf.ComplexObject {
    private isEmptyObject;
    private resolvableValue?;
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string);
    get internalValue(): SecureSourceManagerBranchRuleTimeouts | cdktf.IResolvable | undefined;
    set internalValue(value: SecureSourceManagerBranchRuleTimeouts | cdktf.IResolvable | undefined);
    private _create?;
    get create(): string;
    set create(value: string);
    resetCreate(): void;
    get createInput(): string | undefined;
    private _delete?;
    get delete(): string;
    set delete(value: string);
    resetDelete(): void;
    get deleteInput(): string | undefined;
    private _update?;
    get update(): string;
    set update(value: string);
    resetUpdate(): void;
    get updateInput(): string | undefined;
}
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/secure_source_manager_branch_rule google_secure_source_manager_branch_rule}
*/
export declare class SecureSourceManagerBranchRule extends cdktf.TerraformResource {
    static readonly tfResourceType = "google_secure_source_manager_branch_rule";
    /**
    * Generates CDKTF code for importing a SecureSourceManagerBranchRule resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the SecureSourceManagerBranchRule to import
    * @param importFromId The id of the existing SecureSourceManagerBranchRule that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/secure_source_manager_branch_rule#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the SecureSourceManagerBranchRule to import is found
    */
    static generateConfigForImport(scope: Construct, importToId: string, importFromId: string, provider?: cdktf.TerraformProvider): cdktf.ImportableResource;
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/secure_source_manager_branch_rule google_secure_source_manager_branch_rule} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options SecureSourceManagerBranchRuleConfig
    */
    constructor(scope: Construct, id: string, config: SecureSourceManagerBranchRuleConfig);
    private _allowStaleReviews?;
    get allowStaleReviews(): boolean | cdktf.IResolvable;
    set allowStaleReviews(value: boolean | cdktf.IResolvable);
    resetAllowStaleReviews(): void;
    get allowStaleReviewsInput(): boolean | cdktf.IResolvable | undefined;
    private _branchRuleId?;
    get branchRuleId(): string;
    set branchRuleId(value: string);
    get branchRuleIdInput(): string | undefined;
    get createTime(): string;
    private _disabled?;
    get disabled(): boolean | cdktf.IResolvable;
    set disabled(value: boolean | cdktf.IResolvable);
    resetDisabled(): void;
    get disabledInput(): boolean | cdktf.IResolvable | undefined;
    private _id?;
    get id(): string;
    set id(value: string);
    resetId(): void;
    get idInput(): string | undefined;
    private _includePattern?;
    get includePattern(): string;
    set includePattern(value: string);
    get includePatternInput(): string | undefined;
    private _location?;
    get location(): string;
    set location(value: string);
    get locationInput(): string | undefined;
    private _minimumApprovalsCount?;
    get minimumApprovalsCount(): number;
    set minimumApprovalsCount(value: number);
    resetMinimumApprovalsCount(): void;
    get minimumApprovalsCountInput(): number | undefined;
    private _minimumReviewsCount?;
    get minimumReviewsCount(): number;
    set minimumReviewsCount(value: number);
    resetMinimumReviewsCount(): void;
    get minimumReviewsCountInput(): number | undefined;
    get name(): string;
    private _project?;
    get project(): string;
    set project(value: string);
    resetProject(): void;
    get projectInput(): string | undefined;
    private _repositoryId?;
    get repositoryId(): string;
    set repositoryId(value: string);
    get repositoryIdInput(): string | undefined;
    private _requireCommentsResolved?;
    get requireCommentsResolved(): boolean | cdktf.IResolvable;
    set requireCommentsResolved(value: boolean | cdktf.IResolvable);
    resetRequireCommentsResolved(): void;
    get requireCommentsResolvedInput(): boolean | cdktf.IResolvable | undefined;
    private _requireLinearHistory?;
    get requireLinearHistory(): boolean | cdktf.IResolvable;
    set requireLinearHistory(value: boolean | cdktf.IResolvable);
    resetRequireLinearHistory(): void;
    get requireLinearHistoryInput(): boolean | cdktf.IResolvable | undefined;
    private _requirePullRequest?;
    get requirePullRequest(): boolean | cdktf.IResolvable;
    set requirePullRequest(value: boolean | cdktf.IResolvable);
    resetRequirePullRequest(): void;
    get requirePullRequestInput(): boolean | cdktf.IResolvable | undefined;
    get uid(): string;
    get updateTime(): string;
    private _timeouts;
    get timeouts(): SecureSourceManagerBranchRuleTimeoutsOutputReference;
    putTimeouts(value: SecureSourceManagerBranchRuleTimeouts): void;
    resetTimeouts(): void;
    get timeoutsInput(): cdktf.IResolvable | SecureSourceManagerBranchRuleTimeouts | undefined;
    protected synthesizeAttributes(): {
        [name: string]: any;
    };
    protected synthesizeHclAttributes(): {
        [name: string]: any;
    };
}
