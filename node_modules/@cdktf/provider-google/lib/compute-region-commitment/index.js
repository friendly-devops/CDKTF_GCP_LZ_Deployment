"use strict";
var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComputeRegionCommitment = exports.ComputeRegionCommitmentTimeoutsOutputReference = exports.computeRegionCommitmentTimeoutsToHclTerraform = exports.computeRegionCommitmentTimeoutsToTerraform = exports.ComputeRegionCommitmentResourcesList = exports.ComputeRegionCommitmentResourcesOutputReference = exports.computeRegionCommitmentResourcesToHclTerraform = exports.computeRegionCommitmentResourcesToTerraform = exports.ComputeRegionCommitmentLicenseResourceOutputReference = exports.computeRegionCommitmentLicenseResourceToHclTerraform = exports.computeRegionCommitmentLicenseResourceToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function computeRegionCommitmentLicenseResourceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        amount: cdktf.stringToTerraform(struct.amount),
        cores_per_license: cdktf.stringToTerraform(struct.coresPerLicense),
        license: cdktf.stringToTerraform(struct.license),
    };
}
exports.computeRegionCommitmentLicenseResourceToTerraform = computeRegionCommitmentLicenseResourceToTerraform;
function computeRegionCommitmentLicenseResourceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        amount: {
            value: cdktf.stringToHclTerraform(struct.amount),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cores_per_license: {
            value: cdktf.stringToHclTerraform(struct.coresPerLicense),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        license: {
            value: cdktf.stringToHclTerraform(struct.license),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeRegionCommitmentLicenseResourceToHclTerraform = computeRegionCommitmentLicenseResourceToHclTerraform;
class ComputeRegionCommitmentLicenseResourceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._amount !== undefined) {
            hasAnyValues = true;
            internalValueResult.amount = this._amount;
        }
        if (this._coresPerLicense !== undefined) {
            hasAnyValues = true;
            internalValueResult.coresPerLicense = this._coresPerLicense;
        }
        if (this._license !== undefined) {
            hasAnyValues = true;
            internalValueResult.license = this._license;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._amount = undefined;
            this._coresPerLicense = undefined;
            this._license = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._amount = value.amount;
            this._coresPerLicense = value.coresPerLicense;
            this._license = value.license;
        }
    }
    get amount() {
        return this.getStringAttribute('amount');
    }
    set amount(value) {
        this._amount = value;
    }
    resetAmount() {
        this._amount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get amountInput() {
        return this._amount;
    }
    get coresPerLicense() {
        return this.getStringAttribute('cores_per_license');
    }
    set coresPerLicense(value) {
        this._coresPerLicense = value;
    }
    resetCoresPerLicense() {
        this._coresPerLicense = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get coresPerLicenseInput() {
        return this._coresPerLicense;
    }
    get license() {
        return this.getStringAttribute('license');
    }
    set license(value) {
        this._license = value;
    }
    // Temporarily expose input value. Use with caution.
    get licenseInput() {
        return this._license;
    }
}
exports.ComputeRegionCommitmentLicenseResourceOutputReference = ComputeRegionCommitmentLicenseResourceOutputReference;
_a = JSII_RTTI_SYMBOL_1;
ComputeRegionCommitmentLicenseResourceOutputReference[_a] = { fqn: "@cdktf/provider-google.computeRegionCommitment.ComputeRegionCommitmentLicenseResourceOutputReference", version: "14.13.1" };
function computeRegionCommitmentResourcesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        accelerator_type: cdktf.stringToTerraform(struct.acceleratorType),
        amount: cdktf.stringToTerraform(struct.amount),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.computeRegionCommitmentResourcesToTerraform = computeRegionCommitmentResourcesToTerraform;
function computeRegionCommitmentResourcesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        accelerator_type: {
            value: cdktf.stringToHclTerraform(struct.acceleratorType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        amount: {
            value: cdktf.stringToHclTerraform(struct.amount),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        type: {
            value: cdktf.stringToHclTerraform(struct.type),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeRegionCommitmentResourcesToHclTerraform = computeRegionCommitmentResourcesToHclTerraform;
class ComputeRegionCommitmentResourcesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._acceleratorType !== undefined) {
            hasAnyValues = true;
            internalValueResult.acceleratorType = this._acceleratorType;
        }
        if (this._amount !== undefined) {
            hasAnyValues = true;
            internalValueResult.amount = this._amount;
        }
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._acceleratorType = undefined;
            this._amount = undefined;
            this._type = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._acceleratorType = value.acceleratorType;
            this._amount = value.amount;
            this._type = value.type;
        }
    }
    get acceleratorType() {
        return this.getStringAttribute('accelerator_type');
    }
    set acceleratorType(value) {
        this._acceleratorType = value;
    }
    resetAcceleratorType() {
        this._acceleratorType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get acceleratorTypeInput() {
        return this._acceleratorType;
    }
    get amount() {
        return this.getStringAttribute('amount');
    }
    set amount(value) {
        this._amount = value;
    }
    resetAmount() {
        this._amount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get amountInput() {
        return this._amount;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    resetType() {
        this._type = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
}
exports.ComputeRegionCommitmentResourcesOutputReference = ComputeRegionCommitmentResourcesOutputReference;
_b = JSII_RTTI_SYMBOL_1;
ComputeRegionCommitmentResourcesOutputReference[_b] = { fqn: "@cdktf/provider-google.computeRegionCommitment.ComputeRegionCommitmentResourcesOutputReference", version: "14.13.1" };
class ComputeRegionCommitmentResourcesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeRegionCommitmentResourcesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeRegionCommitmentResourcesList = ComputeRegionCommitmentResourcesList;
_c = JSII_RTTI_SYMBOL_1;
ComputeRegionCommitmentResourcesList[_c] = { fqn: "@cdktf/provider-google.computeRegionCommitment.ComputeRegionCommitmentResourcesList", version: "14.13.1" };
function computeRegionCommitmentTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
    };
}
exports.computeRegionCommitmentTimeoutsToTerraform = computeRegionCommitmentTimeoutsToTerraform;
function computeRegionCommitmentTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeRegionCommitmentTimeoutsToHclTerraform = computeRegionCommitmentTimeoutsToHclTerraform;
class ComputeRegionCommitmentTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
}
exports.ComputeRegionCommitmentTimeoutsOutputReference = ComputeRegionCommitmentTimeoutsOutputReference;
_d = JSII_RTTI_SYMBOL_1;
ComputeRegionCommitmentTimeoutsOutputReference[_d] = { fqn: "@cdktf/provider-google.computeRegionCommitment.ComputeRegionCommitmentTimeoutsOutputReference", version: "14.13.1" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/compute_region_commitment google_compute_region_commitment}
*/
class ComputeRegionCommitment extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a ComputeRegionCommitment resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the ComputeRegionCommitment to import
    * @param importFromId The id of the existing ComputeRegionCommitment that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/compute_region_commitment#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the ComputeRegionCommitment to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_compute_region_commitment", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/compute_region_commitment google_compute_region_commitment} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ComputeRegionCommitmentConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_compute_region_commitment',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // license_resource - computed: false, optional: true, required: false
        this._licenseResource = new ComputeRegionCommitmentLicenseResourceOutputReference(this, "license_resource");
        // resources - computed: false, optional: true, required: false
        this._resources = new ComputeRegionCommitmentResourcesList(this, "resources", false);
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new ComputeRegionCommitmentTimeoutsOutputReference(this, "timeouts");
        this._autoRenew = config.autoRenew;
        this._category = config.category;
        this._description = config.description;
        this._existingReservations = config.existingReservations;
        this._id = config.id;
        this._name = config.name;
        this._plan = config.plan;
        this._project = config.project;
        this._region = config.region;
        this._type = config.type;
        this._licenseResource.internalValue = config.licenseResource;
        this._resources.internalValue = config.resources;
        this._timeouts.internalValue = config.timeouts;
    }
    get autoRenew() {
        return this.getBooleanAttribute('auto_renew');
    }
    set autoRenew(value) {
        this._autoRenew = value;
    }
    resetAutoRenew() {
        this._autoRenew = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoRenewInput() {
        return this._autoRenew;
    }
    get category() {
        return this.getStringAttribute('category');
    }
    set category(value) {
        this._category = value;
    }
    resetCategory() {
        this._category = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get categoryInput() {
        return this._category;
    }
    // commitment_id - computed: true, optional: false, required: false
    get commitmentId() {
        return this.getNumberAttribute('commitment_id');
    }
    // creation_timestamp - computed: true, optional: false, required: false
    get creationTimestamp() {
        return this.getStringAttribute('creation_timestamp');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    // end_timestamp - computed: true, optional: false, required: false
    get endTimestamp() {
        return this.getStringAttribute('end_timestamp');
    }
    get existingReservations() {
        return this.getStringAttribute('existing_reservations');
    }
    set existingReservations(value) {
        this._existingReservations = value;
    }
    resetExistingReservations() {
        this._existingReservations = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get existingReservationsInput() {
        return this._existingReservations;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get plan() {
        return this.getStringAttribute('plan');
    }
    set plan(value) {
        this._plan = value;
    }
    // Temporarily expose input value. Use with caution.
    get planInput() {
        return this._plan;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get region() {
        return this.getStringAttribute('region');
    }
    set region(value) {
        this._region = value;
    }
    resetRegion() {
        this._region = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get regionInput() {
        return this._region;
    }
    // self_link - computed: true, optional: false, required: false
    get selfLink() {
        return this.getStringAttribute('self_link');
    }
    // start_timestamp - computed: true, optional: false, required: false
    get startTimestamp() {
        return this.getStringAttribute('start_timestamp');
    }
    // status - computed: true, optional: false, required: false
    get status() {
        return this.getStringAttribute('status');
    }
    // status_message - computed: true, optional: false, required: false
    get statusMessage() {
        return this.getStringAttribute('status_message');
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    resetType() {
        this._type = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    get licenseResource() {
        return this._licenseResource;
    }
    putLicenseResource(value) {
        this._licenseResource.internalValue = value;
    }
    resetLicenseResource() {
        this._licenseResource.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get licenseResourceInput() {
        return this._licenseResource.internalValue;
    }
    get resources() {
        return this._resources;
    }
    putResources(value) {
        this._resources.internalValue = value;
    }
    resetResources() {
        this._resources.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourcesInput() {
        return this._resources.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            auto_renew: cdktf.booleanToTerraform(this._autoRenew),
            category: cdktf.stringToTerraform(this._category),
            description: cdktf.stringToTerraform(this._description),
            existing_reservations: cdktf.stringToTerraform(this._existingReservations),
            id: cdktf.stringToTerraform(this._id),
            name: cdktf.stringToTerraform(this._name),
            plan: cdktf.stringToTerraform(this._plan),
            project: cdktf.stringToTerraform(this._project),
            region: cdktf.stringToTerraform(this._region),
            type: cdktf.stringToTerraform(this._type),
            license_resource: computeRegionCommitmentLicenseResourceToTerraform(this._licenseResource.internalValue),
            resources: cdktf.listMapper(computeRegionCommitmentResourcesToTerraform, true)(this._resources.internalValue),
            timeouts: computeRegionCommitmentTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            auto_renew: {
                value: cdktf.booleanToHclTerraform(this._autoRenew),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            category: {
                value: cdktf.stringToHclTerraform(this._category),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            description: {
                value: cdktf.stringToHclTerraform(this._description),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            existing_reservations: {
                value: cdktf.stringToHclTerraform(this._existingReservations),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            name: {
                value: cdktf.stringToHclTerraform(this._name),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            plan: {
                value: cdktf.stringToHclTerraform(this._plan),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            project: {
                value: cdktf.stringToHclTerraform(this._project),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            region: {
                value: cdktf.stringToHclTerraform(this._region),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            type: {
                value: cdktf.stringToHclTerraform(this._type),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            license_resource: {
                value: computeRegionCommitmentLicenseResourceToHclTerraform(this._licenseResource.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ComputeRegionCommitmentLicenseResourceList",
            },
            resources: {
                value: cdktf.listMapperHcl(computeRegionCommitmentResourcesToHclTerraform, true)(this._resources.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ComputeRegionCommitmentResourcesList",
            },
            timeouts: {
                value: computeRegionCommitmentTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "ComputeRegionCommitmentTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.ComputeRegionCommitment = ComputeRegionCommitment;
_e = JSII_RTTI_SYMBOL_1;
ComputeRegionCommitment[_e] = { fqn: "@cdktf/provider-google.computeRegionCommitment.ComputeRegionCommitment", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
ComputeRegionCommitment.tfResourceType = "google_compute_region_commitment";
//# sourceMappingURL=data:application/json;base64,