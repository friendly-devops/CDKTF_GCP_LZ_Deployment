"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrivilegedAccessManagerEntitlement = exports.PrivilegedAccessManagerEntitlementTimeoutsOutputReference = exports.privilegedAccessManagerEntitlementTimeoutsToHclTerraform = exports.privilegedAccessManagerEntitlementTimeoutsToTerraform = exports.PrivilegedAccessManagerEntitlementRequesterJustificationConfigOutputReference = exports.privilegedAccessManagerEntitlementRequesterJustificationConfigToHclTerraform = exports.privilegedAccessManagerEntitlementRequesterJustificationConfigToTerraform = exports.PrivilegedAccessManagerEntitlementRequesterJustificationConfigUnstructuredOutputReference = exports.privilegedAccessManagerEntitlementRequesterJustificationConfigUnstructuredToHclTerraform = exports.privilegedAccessManagerEntitlementRequesterJustificationConfigUnstructuredToTerraform = exports.PrivilegedAccessManagerEntitlementRequesterJustificationConfigNotMandatoryOutputReference = exports.privilegedAccessManagerEntitlementRequesterJustificationConfigNotMandatoryToHclTerraform = exports.privilegedAccessManagerEntitlementRequesterJustificationConfigNotMandatoryToTerraform = exports.PrivilegedAccessManagerEntitlementPrivilegedAccessOutputReference = exports.privilegedAccessManagerEntitlementPrivilegedAccessToHclTerraform = exports.privilegedAccessManagerEntitlementPrivilegedAccessToTerraform = exports.PrivilegedAccessManagerEntitlementPrivilegedAccessGcpIamAccessOutputReference = exports.privilegedAccessManagerEntitlementPrivilegedAccessGcpIamAccessToHclTerraform = exports.privilegedAccessManagerEntitlementPrivilegedAccessGcpIamAccessToTerraform = exports.PrivilegedAccessManagerEntitlementPrivilegedAccessGcpIamAccessRoleBindingsList = exports.PrivilegedAccessManagerEntitlementPrivilegedAccessGcpIamAccessRoleBindingsOutputReference = exports.privilegedAccessManagerEntitlementPrivilegedAccessGcpIamAccessRoleBindingsToHclTerraform = exports.privilegedAccessManagerEntitlementPrivilegedAccessGcpIamAccessRoleBindingsToTerraform = exports.PrivilegedAccessManagerEntitlementEligibleUsersList = exports.PrivilegedAccessManagerEntitlementEligibleUsersOutputReference = exports.privilegedAccessManagerEntitlementEligibleUsersToHclTerraform = exports.privilegedAccessManagerEntitlementEligibleUsersToTerraform = exports.PrivilegedAccessManagerEntitlementApprovalWorkflowOutputReference = exports.privilegedAccessManagerEntitlementApprovalWorkflowToHclTerraform = exports.privilegedAccessManagerEntitlementApprovalWorkflowToTerraform = exports.PrivilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsOutputReference = exports.privilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsToHclTerraform = exports.privilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsToTerraform = exports.PrivilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsStepsList = exports.PrivilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsStepsOutputReference = exports.privilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsStepsToHclTerraform = exports.privilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsStepsToTerraform = exports.PrivilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsStepsApproversOutputReference = exports.privilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsStepsApproversToHclTerraform = exports.privilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsStepsApproversToTerraform = exports.PrivilegedAccessManagerEntitlementAdditionalNotificationTargetsOutputReference = exports.privilegedAccessManagerEntitlementAdditionalNotificationTargetsToHclTerraform = exports.privilegedAccessManagerEntitlementAdditionalNotificationTargetsToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function privilegedAccessManagerEntitlementAdditionalNotificationTargetsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        admin_email_recipients: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.adminEmailRecipients),
        requester_email_recipients: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.requesterEmailRecipients),
    };
}
exports.privilegedAccessManagerEntitlementAdditionalNotificationTargetsToTerraform = privilegedAccessManagerEntitlementAdditionalNotificationTargetsToTerraform;
function privilegedAccessManagerEntitlementAdditionalNotificationTargetsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        admin_email_recipients: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.adminEmailRecipients),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        requester_email_recipients: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.requesterEmailRecipients),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.privilegedAccessManagerEntitlementAdditionalNotificationTargetsToHclTerraform = privilegedAccessManagerEntitlementAdditionalNotificationTargetsToHclTerraform;
class PrivilegedAccessManagerEntitlementAdditionalNotificationTargetsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._adminEmailRecipients !== undefined) {
            hasAnyValues = true;
            internalValueResult.adminEmailRecipients = this._adminEmailRecipients;
        }
        if (this._requesterEmailRecipients !== undefined) {
            hasAnyValues = true;
            internalValueResult.requesterEmailRecipients = this._requesterEmailRecipients;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._adminEmailRecipients = undefined;
            this._requesterEmailRecipients = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._adminEmailRecipients = value.adminEmailRecipients;
            this._requesterEmailRecipients = value.requesterEmailRecipients;
        }
    }
    get adminEmailRecipients() {
        return cdktf.Fn.tolist(this.getListAttribute('admin_email_recipients'));
    }
    set adminEmailRecipients(value) {
        this._adminEmailRecipients = value;
    }
    resetAdminEmailRecipients() {
        this._adminEmailRecipients = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get adminEmailRecipientsInput() {
        return this._adminEmailRecipients;
    }
    get requesterEmailRecipients() {
        return cdktf.Fn.tolist(this.getListAttribute('requester_email_recipients'));
    }
    set requesterEmailRecipients(value) {
        this._requesterEmailRecipients = value;
    }
    resetRequesterEmailRecipients() {
        this._requesterEmailRecipients = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requesterEmailRecipientsInput() {
        return this._requesterEmailRecipients;
    }
}
exports.PrivilegedAccessManagerEntitlementAdditionalNotificationTargetsOutputReference = PrivilegedAccessManagerEntitlementAdditionalNotificationTargetsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
PrivilegedAccessManagerEntitlementAdditionalNotificationTargetsOutputReference[_a] = { fqn: "@cdktf/provider-google.privilegedAccessManagerEntitlement.PrivilegedAccessManagerEntitlementAdditionalNotificationTargetsOutputReference", version: "14.13.1" };
function privilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsStepsApproversToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        principals: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.principals),
    };
}
exports.privilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsStepsApproversToTerraform = privilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsStepsApproversToTerraform;
function privilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsStepsApproversToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        principals: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.principals),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.privilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsStepsApproversToHclTerraform = privilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsStepsApproversToHclTerraform;
class PrivilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsStepsApproversOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._principals !== undefined) {
            hasAnyValues = true;
            internalValueResult.principals = this._principals;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._principals = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._principals = value.principals;
        }
    }
    get principals() {
        return cdktf.Fn.tolist(this.getListAttribute('principals'));
    }
    set principals(value) {
        this._principals = value;
    }
    // Temporarily expose input value. Use with caution.
    get principalsInput() {
        return this._principals;
    }
}
exports.PrivilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsStepsApproversOutputReference = PrivilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsStepsApproversOutputReference;
_b = JSII_RTTI_SYMBOL_1;
PrivilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsStepsApproversOutputReference[_b] = { fqn: "@cdktf/provider-google.privilegedAccessManagerEntitlement.PrivilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsStepsApproversOutputReference", version: "14.13.1" };
function privilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsStepsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        approvals_needed: cdktf.numberToTerraform(struct.approvalsNeeded),
        approver_email_recipients: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.approverEmailRecipients),
        approvers: privilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsStepsApproversToTerraform(struct.approvers),
    };
}
exports.privilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsStepsToTerraform = privilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsStepsToTerraform;
function privilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsStepsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        approvals_needed: {
            value: cdktf.numberToHclTerraform(struct.approvalsNeeded),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        approver_email_recipients: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.approverEmailRecipients),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        approvers: {
            value: privilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsStepsApproversToHclTerraform(struct.approvers),
            isBlock: true,
            type: "list",
            storageClassType: "PrivilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsStepsApproversList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.privilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsStepsToHclTerraform = privilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsStepsToHclTerraform;
class PrivilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsStepsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // approvers - computed: false, optional: false, required: true
        this._approvers = new PrivilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsStepsApproversOutputReference(this, "approvers");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._approvalsNeeded !== undefined) {
            hasAnyValues = true;
            internalValueResult.approvalsNeeded = this._approvalsNeeded;
        }
        if (this._approverEmailRecipients !== undefined) {
            hasAnyValues = true;
            internalValueResult.approverEmailRecipients = this._approverEmailRecipients;
        }
        if (this._approvers?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.approvers = this._approvers?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._approvalsNeeded = undefined;
            this._approverEmailRecipients = undefined;
            this._approvers.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._approvalsNeeded = value.approvalsNeeded;
            this._approverEmailRecipients = value.approverEmailRecipients;
            this._approvers.internalValue = value.approvers;
        }
    }
    get approvalsNeeded() {
        return this.getNumberAttribute('approvals_needed');
    }
    set approvalsNeeded(value) {
        this._approvalsNeeded = value;
    }
    resetApprovalsNeeded() {
        this._approvalsNeeded = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get approvalsNeededInput() {
        return this._approvalsNeeded;
    }
    get approverEmailRecipients() {
        return cdktf.Fn.tolist(this.getListAttribute('approver_email_recipients'));
    }
    set approverEmailRecipients(value) {
        this._approverEmailRecipients = value;
    }
    resetApproverEmailRecipients() {
        this._approverEmailRecipients = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get approverEmailRecipientsInput() {
        return this._approverEmailRecipients;
    }
    get approvers() {
        return this._approvers;
    }
    putApprovers(value) {
        this._approvers.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get approversInput() {
        return this._approvers.internalValue;
    }
}
exports.PrivilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsStepsOutputReference = PrivilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsStepsOutputReference;
_c = JSII_RTTI_SYMBOL_1;
PrivilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsStepsOutputReference[_c] = { fqn: "@cdktf/provider-google.privilegedAccessManagerEntitlement.PrivilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsStepsOutputReference", version: "14.13.1" };
class PrivilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsStepsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new PrivilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsStepsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.PrivilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsStepsList = PrivilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsStepsList;
_d = JSII_RTTI_SYMBOL_1;
PrivilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsStepsList[_d] = { fqn: "@cdktf/provider-google.privilegedAccessManagerEntitlement.PrivilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsStepsList", version: "14.13.1" };
function privilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        require_approver_justification: cdktf.booleanToTerraform(struct.requireApproverJustification),
        steps: cdktf.listMapper(privilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsStepsToTerraform, true)(struct.steps),
    };
}
exports.privilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsToTerraform = privilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsToTerraform;
function privilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        require_approver_justification: {
            value: cdktf.booleanToHclTerraform(struct.requireApproverJustification),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        steps: {
            value: cdktf.listMapperHcl(privilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsStepsToHclTerraform, true)(struct.steps),
            isBlock: true,
            type: "list",
            storageClassType: "PrivilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsStepsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.privilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsToHclTerraform = privilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsToHclTerraform;
class PrivilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // steps - computed: false, optional: false, required: true
        this._steps = new PrivilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsStepsList(this, "steps", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._requireApproverJustification !== undefined) {
            hasAnyValues = true;
            internalValueResult.requireApproverJustification = this._requireApproverJustification;
        }
        if (this._steps?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.steps = this._steps?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._requireApproverJustification = undefined;
            this._steps.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._requireApproverJustification = value.requireApproverJustification;
            this._steps.internalValue = value.steps;
        }
    }
    get requireApproverJustification() {
        return this.getBooleanAttribute('require_approver_justification');
    }
    set requireApproverJustification(value) {
        this._requireApproverJustification = value;
    }
    resetRequireApproverJustification() {
        this._requireApproverJustification = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requireApproverJustificationInput() {
        return this._requireApproverJustification;
    }
    get steps() {
        return this._steps;
    }
    putSteps(value) {
        this._steps.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get stepsInput() {
        return this._steps.internalValue;
    }
}
exports.PrivilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsOutputReference = PrivilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsOutputReference;
_e = JSII_RTTI_SYMBOL_1;
PrivilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsOutputReference[_e] = { fqn: "@cdktf/provider-google.privilegedAccessManagerEntitlement.PrivilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsOutputReference", version: "14.13.1" };
function privilegedAccessManagerEntitlementApprovalWorkflowToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        manual_approvals: privilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsToTerraform(struct.manualApprovals),
    };
}
exports.privilegedAccessManagerEntitlementApprovalWorkflowToTerraform = privilegedAccessManagerEntitlementApprovalWorkflowToTerraform;
function privilegedAccessManagerEntitlementApprovalWorkflowToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        manual_approvals: {
            value: privilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsToHclTerraform(struct.manualApprovals),
            isBlock: true,
            type: "list",
            storageClassType: "PrivilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.privilegedAccessManagerEntitlementApprovalWorkflowToHclTerraform = privilegedAccessManagerEntitlementApprovalWorkflowToHclTerraform;
class PrivilegedAccessManagerEntitlementApprovalWorkflowOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // manual_approvals - computed: false, optional: false, required: true
        this._manualApprovals = new PrivilegedAccessManagerEntitlementApprovalWorkflowManualApprovalsOutputReference(this, "manual_approvals");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._manualApprovals?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.manualApprovals = this._manualApprovals?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._manualApprovals.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._manualApprovals.internalValue = value.manualApprovals;
        }
    }
    get manualApprovals() {
        return this._manualApprovals;
    }
    putManualApprovals(value) {
        this._manualApprovals.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get manualApprovalsInput() {
        return this._manualApprovals.internalValue;
    }
}
exports.PrivilegedAccessManagerEntitlementApprovalWorkflowOutputReference = PrivilegedAccessManagerEntitlementApprovalWorkflowOutputReference;
_f = JSII_RTTI_SYMBOL_1;
PrivilegedAccessManagerEntitlementApprovalWorkflowOutputReference[_f] = { fqn: "@cdktf/provider-google.privilegedAccessManagerEntitlement.PrivilegedAccessManagerEntitlementApprovalWorkflowOutputReference", version: "14.13.1" };
function privilegedAccessManagerEntitlementEligibleUsersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        principals: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.principals),
    };
}
exports.privilegedAccessManagerEntitlementEligibleUsersToTerraform = privilegedAccessManagerEntitlementEligibleUsersToTerraform;
function privilegedAccessManagerEntitlementEligibleUsersToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        principals: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.principals),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.privilegedAccessManagerEntitlementEligibleUsersToHclTerraform = privilegedAccessManagerEntitlementEligibleUsersToHclTerraform;
class PrivilegedAccessManagerEntitlementEligibleUsersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._principals !== undefined) {
            hasAnyValues = true;
            internalValueResult.principals = this._principals;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._principals = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._principals = value.principals;
        }
    }
    get principals() {
        return cdktf.Fn.tolist(this.getListAttribute('principals'));
    }
    set principals(value) {
        this._principals = value;
    }
    // Temporarily expose input value. Use with caution.
    get principalsInput() {
        return this._principals;
    }
}
exports.PrivilegedAccessManagerEntitlementEligibleUsersOutputReference = PrivilegedAccessManagerEntitlementEligibleUsersOutputReference;
_g = JSII_RTTI_SYMBOL_1;
PrivilegedAccessManagerEntitlementEligibleUsersOutputReference[_g] = { fqn: "@cdktf/provider-google.privilegedAccessManagerEntitlement.PrivilegedAccessManagerEntitlementEligibleUsersOutputReference", version: "14.13.1" };
class PrivilegedAccessManagerEntitlementEligibleUsersList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new PrivilegedAccessManagerEntitlementEligibleUsersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.PrivilegedAccessManagerEntitlementEligibleUsersList = PrivilegedAccessManagerEntitlementEligibleUsersList;
_h = JSII_RTTI_SYMBOL_1;
PrivilegedAccessManagerEntitlementEligibleUsersList[_h] = { fqn: "@cdktf/provider-google.privilegedAccessManagerEntitlement.PrivilegedAccessManagerEntitlementEligibleUsersList", version: "14.13.1" };
function privilegedAccessManagerEntitlementPrivilegedAccessGcpIamAccessRoleBindingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        condition_expression: cdktf.stringToTerraform(struct.conditionExpression),
        role: cdktf.stringToTerraform(struct.role),
    };
}
exports.privilegedAccessManagerEntitlementPrivilegedAccessGcpIamAccessRoleBindingsToTerraform = privilegedAccessManagerEntitlementPrivilegedAccessGcpIamAccessRoleBindingsToTerraform;
function privilegedAccessManagerEntitlementPrivilegedAccessGcpIamAccessRoleBindingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        condition_expression: {
            value: cdktf.stringToHclTerraform(struct.conditionExpression),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        role: {
            value: cdktf.stringToHclTerraform(struct.role),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.privilegedAccessManagerEntitlementPrivilegedAccessGcpIamAccessRoleBindingsToHclTerraform = privilegedAccessManagerEntitlementPrivilegedAccessGcpIamAccessRoleBindingsToHclTerraform;
class PrivilegedAccessManagerEntitlementPrivilegedAccessGcpIamAccessRoleBindingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._conditionExpression !== undefined) {
            hasAnyValues = true;
            internalValueResult.conditionExpression = this._conditionExpression;
        }
        if (this._role !== undefined) {
            hasAnyValues = true;
            internalValueResult.role = this._role;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._conditionExpression = undefined;
            this._role = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._conditionExpression = value.conditionExpression;
            this._role = value.role;
        }
    }
    get conditionExpression() {
        return this.getStringAttribute('condition_expression');
    }
    set conditionExpression(value) {
        this._conditionExpression = value;
    }
    resetConditionExpression() {
        this._conditionExpression = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get conditionExpressionInput() {
        return this._conditionExpression;
    }
    get role() {
        return this.getStringAttribute('role');
    }
    set role(value) {
        this._role = value;
    }
    // Temporarily expose input value. Use with caution.
    get roleInput() {
        return this._role;
    }
}
exports.PrivilegedAccessManagerEntitlementPrivilegedAccessGcpIamAccessRoleBindingsOutputReference = PrivilegedAccessManagerEntitlementPrivilegedAccessGcpIamAccessRoleBindingsOutputReference;
_j = JSII_RTTI_SYMBOL_1;
PrivilegedAccessManagerEntitlementPrivilegedAccessGcpIamAccessRoleBindingsOutputReference[_j] = { fqn: "@cdktf/provider-google.privilegedAccessManagerEntitlement.PrivilegedAccessManagerEntitlementPrivilegedAccessGcpIamAccessRoleBindingsOutputReference", version: "14.13.1" };
class PrivilegedAccessManagerEntitlementPrivilegedAccessGcpIamAccessRoleBindingsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new PrivilegedAccessManagerEntitlementPrivilegedAccessGcpIamAccessRoleBindingsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.PrivilegedAccessManagerEntitlementPrivilegedAccessGcpIamAccessRoleBindingsList = PrivilegedAccessManagerEntitlementPrivilegedAccessGcpIamAccessRoleBindingsList;
_k = JSII_RTTI_SYMBOL_1;
PrivilegedAccessManagerEntitlementPrivilegedAccessGcpIamAccessRoleBindingsList[_k] = { fqn: "@cdktf/provider-google.privilegedAccessManagerEntitlement.PrivilegedAccessManagerEntitlementPrivilegedAccessGcpIamAccessRoleBindingsList", version: "14.13.1" };
function privilegedAccessManagerEntitlementPrivilegedAccessGcpIamAccessToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        resource: cdktf.stringToTerraform(struct.resource),
        resource_type: cdktf.stringToTerraform(struct.resourceType),
        role_bindings: cdktf.listMapper(privilegedAccessManagerEntitlementPrivilegedAccessGcpIamAccessRoleBindingsToTerraform, true)(struct.roleBindings),
    };
}
exports.privilegedAccessManagerEntitlementPrivilegedAccessGcpIamAccessToTerraform = privilegedAccessManagerEntitlementPrivilegedAccessGcpIamAccessToTerraform;
function privilegedAccessManagerEntitlementPrivilegedAccessGcpIamAccessToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        resource: {
            value: cdktf.stringToHclTerraform(struct.resource),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        resource_type: {
            value: cdktf.stringToHclTerraform(struct.resourceType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        role_bindings: {
            value: cdktf.listMapperHcl(privilegedAccessManagerEntitlementPrivilegedAccessGcpIamAccessRoleBindingsToHclTerraform, true)(struct.roleBindings),
            isBlock: true,
            type: "list",
            storageClassType: "PrivilegedAccessManagerEntitlementPrivilegedAccessGcpIamAccessRoleBindingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.privilegedAccessManagerEntitlementPrivilegedAccessGcpIamAccessToHclTerraform = privilegedAccessManagerEntitlementPrivilegedAccessGcpIamAccessToHclTerraform;
class PrivilegedAccessManagerEntitlementPrivilegedAccessGcpIamAccessOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // role_bindings - computed: false, optional: false, required: true
        this._roleBindings = new PrivilegedAccessManagerEntitlementPrivilegedAccessGcpIamAccessRoleBindingsList(this, "role_bindings", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._resource !== undefined) {
            hasAnyValues = true;
            internalValueResult.resource = this._resource;
        }
        if (this._resourceType !== undefined) {
            hasAnyValues = true;
            internalValueResult.resourceType = this._resourceType;
        }
        if (this._roleBindings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.roleBindings = this._roleBindings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._resource = undefined;
            this._resourceType = undefined;
            this._roleBindings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._resource = value.resource;
            this._resourceType = value.resourceType;
            this._roleBindings.internalValue = value.roleBindings;
        }
    }
    get resource() {
        return this.getStringAttribute('resource');
    }
    set resource(value) {
        this._resource = value;
    }
    // Temporarily expose input value. Use with caution.
    get resourceInput() {
        return this._resource;
    }
    get resourceType() {
        return this.getStringAttribute('resource_type');
    }
    set resourceType(value) {
        this._resourceType = value;
    }
    // Temporarily expose input value. Use with caution.
    get resourceTypeInput() {
        return this._resourceType;
    }
    get roleBindings() {
        return this._roleBindings;
    }
    putRoleBindings(value) {
        this._roleBindings.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get roleBindingsInput() {
        return this._roleBindings.internalValue;
    }
}
exports.PrivilegedAccessManagerEntitlementPrivilegedAccessGcpIamAccessOutputReference = PrivilegedAccessManagerEntitlementPrivilegedAccessGcpIamAccessOutputReference;
_l = JSII_RTTI_SYMBOL_1;
PrivilegedAccessManagerEntitlementPrivilegedAccessGcpIamAccessOutputReference[_l] = { fqn: "@cdktf/provider-google.privilegedAccessManagerEntitlement.PrivilegedAccessManagerEntitlementPrivilegedAccessGcpIamAccessOutputReference", version: "14.13.1" };
function privilegedAccessManagerEntitlementPrivilegedAccessToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        gcp_iam_access: privilegedAccessManagerEntitlementPrivilegedAccessGcpIamAccessToTerraform(struct.gcpIamAccess),
    };
}
exports.privilegedAccessManagerEntitlementPrivilegedAccessToTerraform = privilegedAccessManagerEntitlementPrivilegedAccessToTerraform;
function privilegedAccessManagerEntitlementPrivilegedAccessToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        gcp_iam_access: {
            value: privilegedAccessManagerEntitlementPrivilegedAccessGcpIamAccessToHclTerraform(struct.gcpIamAccess),
            isBlock: true,
            type: "list",
            storageClassType: "PrivilegedAccessManagerEntitlementPrivilegedAccessGcpIamAccessList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.privilegedAccessManagerEntitlementPrivilegedAccessToHclTerraform = privilegedAccessManagerEntitlementPrivilegedAccessToHclTerraform;
class PrivilegedAccessManagerEntitlementPrivilegedAccessOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // gcp_iam_access - computed: false, optional: false, required: true
        this._gcpIamAccess = new PrivilegedAccessManagerEntitlementPrivilegedAccessGcpIamAccessOutputReference(this, "gcp_iam_access");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._gcpIamAccess?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.gcpIamAccess = this._gcpIamAccess?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._gcpIamAccess.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._gcpIamAccess.internalValue = value.gcpIamAccess;
        }
    }
    get gcpIamAccess() {
        return this._gcpIamAccess;
    }
    putGcpIamAccess(value) {
        this._gcpIamAccess.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get gcpIamAccessInput() {
        return this._gcpIamAccess.internalValue;
    }
}
exports.PrivilegedAccessManagerEntitlementPrivilegedAccessOutputReference = PrivilegedAccessManagerEntitlementPrivilegedAccessOutputReference;
_m = JSII_RTTI_SYMBOL_1;
PrivilegedAccessManagerEntitlementPrivilegedAccessOutputReference[_m] = { fqn: "@cdktf/provider-google.privilegedAccessManagerEntitlement.PrivilegedAccessManagerEntitlementPrivilegedAccessOutputReference", version: "14.13.1" };
function privilegedAccessManagerEntitlementRequesterJustificationConfigNotMandatoryToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.privilegedAccessManagerEntitlementRequesterJustificationConfigNotMandatoryToTerraform = privilegedAccessManagerEntitlementRequesterJustificationConfigNotMandatoryToTerraform;
function privilegedAccessManagerEntitlementRequesterJustificationConfigNotMandatoryToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.privilegedAccessManagerEntitlementRequesterJustificationConfigNotMandatoryToHclTerraform = privilegedAccessManagerEntitlementRequesterJustificationConfigNotMandatoryToHclTerraform;
class PrivilegedAccessManagerEntitlementRequesterJustificationConfigNotMandatoryOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.PrivilegedAccessManagerEntitlementRequesterJustificationConfigNotMandatoryOutputReference = PrivilegedAccessManagerEntitlementRequesterJustificationConfigNotMandatoryOutputReference;
_o = JSII_RTTI_SYMBOL_1;
PrivilegedAccessManagerEntitlementRequesterJustificationConfigNotMandatoryOutputReference[_o] = { fqn: "@cdktf/provider-google.privilegedAccessManagerEntitlement.PrivilegedAccessManagerEntitlementRequesterJustificationConfigNotMandatoryOutputReference", version: "14.13.1" };
function privilegedAccessManagerEntitlementRequesterJustificationConfigUnstructuredToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.privilegedAccessManagerEntitlementRequesterJustificationConfigUnstructuredToTerraform = privilegedAccessManagerEntitlementRequesterJustificationConfigUnstructuredToTerraform;
function privilegedAccessManagerEntitlementRequesterJustificationConfigUnstructuredToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.privilegedAccessManagerEntitlementRequesterJustificationConfigUnstructuredToHclTerraform = privilegedAccessManagerEntitlementRequesterJustificationConfigUnstructuredToHclTerraform;
class PrivilegedAccessManagerEntitlementRequesterJustificationConfigUnstructuredOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
}
exports.PrivilegedAccessManagerEntitlementRequesterJustificationConfigUnstructuredOutputReference = PrivilegedAccessManagerEntitlementRequesterJustificationConfigUnstructuredOutputReference;
_p = JSII_RTTI_SYMBOL_1;
PrivilegedAccessManagerEntitlementRequesterJustificationConfigUnstructuredOutputReference[_p] = { fqn: "@cdktf/provider-google.privilegedAccessManagerEntitlement.PrivilegedAccessManagerEntitlementRequesterJustificationConfigUnstructuredOutputReference", version: "14.13.1" };
function privilegedAccessManagerEntitlementRequesterJustificationConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        not_mandatory: privilegedAccessManagerEntitlementRequesterJustificationConfigNotMandatoryToTerraform(struct.notMandatory),
        unstructured: privilegedAccessManagerEntitlementRequesterJustificationConfigUnstructuredToTerraform(struct.unstructured),
    };
}
exports.privilegedAccessManagerEntitlementRequesterJustificationConfigToTerraform = privilegedAccessManagerEntitlementRequesterJustificationConfigToTerraform;
function privilegedAccessManagerEntitlementRequesterJustificationConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        not_mandatory: {
            value: privilegedAccessManagerEntitlementRequesterJustificationConfigNotMandatoryToHclTerraform(struct.notMandatory),
            isBlock: true,
            type: "list",
            storageClassType: "PrivilegedAccessManagerEntitlementRequesterJustificationConfigNotMandatoryList",
        },
        unstructured: {
            value: privilegedAccessManagerEntitlementRequesterJustificationConfigUnstructuredToHclTerraform(struct.unstructured),
            isBlock: true,
            type: "list",
            storageClassType: "PrivilegedAccessManagerEntitlementRequesterJustificationConfigUnstructuredList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.privilegedAccessManagerEntitlementRequesterJustificationConfigToHclTerraform = privilegedAccessManagerEntitlementRequesterJustificationConfigToHclTerraform;
class PrivilegedAccessManagerEntitlementRequesterJustificationConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // not_mandatory - computed: false, optional: true, required: false
        this._notMandatory = new PrivilegedAccessManagerEntitlementRequesterJustificationConfigNotMandatoryOutputReference(this, "not_mandatory");
        // unstructured - computed: false, optional: true, required: false
        this._unstructured = new PrivilegedAccessManagerEntitlementRequesterJustificationConfigUnstructuredOutputReference(this, "unstructured");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._notMandatory?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.notMandatory = this._notMandatory?.internalValue;
        }
        if (this._unstructured?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.unstructured = this._unstructured?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._notMandatory.internalValue = undefined;
            this._unstructured.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._notMandatory.internalValue = value.notMandatory;
            this._unstructured.internalValue = value.unstructured;
        }
    }
    get notMandatory() {
        return this._notMandatory;
    }
    putNotMandatory(value) {
        this._notMandatory.internalValue = value;
    }
    resetNotMandatory() {
        this._notMandatory.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get notMandatoryInput() {
        return this._notMandatory.internalValue;
    }
    get unstructured() {
        return this._unstructured;
    }
    putUnstructured(value) {
        this._unstructured.internalValue = value;
    }
    resetUnstructured() {
        this._unstructured.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get unstructuredInput() {
        return this._unstructured.internalValue;
    }
}
exports.PrivilegedAccessManagerEntitlementRequesterJustificationConfigOutputReference = PrivilegedAccessManagerEntitlementRequesterJustificationConfigOutputReference;
_q = JSII_RTTI_SYMBOL_1;
PrivilegedAccessManagerEntitlementRequesterJustificationConfigOutputReference[_q] = { fqn: "@cdktf/provider-google.privilegedAccessManagerEntitlement.PrivilegedAccessManagerEntitlementRequesterJustificationConfigOutputReference", version: "14.13.1" };
function privilegedAccessManagerEntitlementTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.privilegedAccessManagerEntitlementTimeoutsToTerraform = privilegedAccessManagerEntitlementTimeoutsToTerraform;
function privilegedAccessManagerEntitlementTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.privilegedAccessManagerEntitlementTimeoutsToHclTerraform = privilegedAccessManagerEntitlementTimeoutsToHclTerraform;
class PrivilegedAccessManagerEntitlementTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.PrivilegedAccessManagerEntitlementTimeoutsOutputReference = PrivilegedAccessManagerEntitlementTimeoutsOutputReference;
_r = JSII_RTTI_SYMBOL_1;
PrivilegedAccessManagerEntitlementTimeoutsOutputReference[_r] = { fqn: "@cdktf/provider-google.privilegedAccessManagerEntitlement.PrivilegedAccessManagerEntitlementTimeoutsOutputReference", version: "14.13.1" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/privileged_access_manager_entitlement google_privileged_access_manager_entitlement}
*/
class PrivilegedAccessManagerEntitlement extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a PrivilegedAccessManagerEntitlement resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the PrivilegedAccessManagerEntitlement to import
    * @param importFromId The id of the existing PrivilegedAccessManagerEntitlement that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/privileged_access_manager_entitlement#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the PrivilegedAccessManagerEntitlement to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_privileged_access_manager_entitlement", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/privileged_access_manager_entitlement google_privileged_access_manager_entitlement} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options PrivilegedAccessManagerEntitlementConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_privileged_access_manager_entitlement',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // additional_notification_targets - computed: false, optional: true, required: false
        this._additionalNotificationTargets = new PrivilegedAccessManagerEntitlementAdditionalNotificationTargetsOutputReference(this, "additional_notification_targets");
        // approval_workflow - computed: false, optional: true, required: false
        this._approvalWorkflow = new PrivilegedAccessManagerEntitlementApprovalWorkflowOutputReference(this, "approval_workflow");
        // eligible_users - computed: false, optional: false, required: true
        this._eligibleUsers = new PrivilegedAccessManagerEntitlementEligibleUsersList(this, "eligible_users", false);
        // privileged_access - computed: false, optional: false, required: true
        this._privilegedAccess = new PrivilegedAccessManagerEntitlementPrivilegedAccessOutputReference(this, "privileged_access");
        // requester_justification_config - computed: false, optional: false, required: true
        this._requesterJustificationConfig = new PrivilegedAccessManagerEntitlementRequesterJustificationConfigOutputReference(this, "requester_justification_config");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new PrivilegedAccessManagerEntitlementTimeoutsOutputReference(this, "timeouts");
        this._entitlementId = config.entitlementId;
        this._id = config.id;
        this._location = config.location;
        this._maxRequestDuration = config.maxRequestDuration;
        this._parent = config.parent;
        this._additionalNotificationTargets.internalValue = config.additionalNotificationTargets;
        this._approvalWorkflow.internalValue = config.approvalWorkflow;
        this._eligibleUsers.internalValue = config.eligibleUsers;
        this._privilegedAccess.internalValue = config.privilegedAccess;
        this._requesterJustificationConfig.internalValue = config.requesterJustificationConfig;
        this._timeouts.internalValue = config.timeouts;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // create_time - computed: true, optional: false, required: false
    get createTime() {
        return this.getStringAttribute('create_time');
    }
    get entitlementId() {
        return this.getStringAttribute('entitlement_id');
    }
    set entitlementId(value) {
        this._entitlementId = value;
    }
    // Temporarily expose input value. Use with caution.
    get entitlementIdInput() {
        return this._entitlementId;
    }
    // etag - computed: true, optional: false, required: false
    get etag() {
        return this.getStringAttribute('etag');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    get maxRequestDuration() {
        return this.getStringAttribute('max_request_duration');
    }
    set maxRequestDuration(value) {
        this._maxRequestDuration = value;
    }
    // Temporarily expose input value. Use with caution.
    get maxRequestDurationInput() {
        return this._maxRequestDuration;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get parent() {
        return this.getStringAttribute('parent');
    }
    set parent(value) {
        this._parent = value;
    }
    // Temporarily expose input value. Use with caution.
    get parentInput() {
        return this._parent;
    }
    // state - computed: true, optional: false, required: false
    get state() {
        return this.getStringAttribute('state');
    }
    // update_time - computed: true, optional: false, required: false
    get updateTime() {
        return this.getStringAttribute('update_time');
    }
    get additionalNotificationTargets() {
        return this._additionalNotificationTargets;
    }
    putAdditionalNotificationTargets(value) {
        this._additionalNotificationTargets.internalValue = value;
    }
    resetAdditionalNotificationTargets() {
        this._additionalNotificationTargets.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get additionalNotificationTargetsInput() {
        return this._additionalNotificationTargets.internalValue;
    }
    get approvalWorkflow() {
        return this._approvalWorkflow;
    }
    putApprovalWorkflow(value) {
        this._approvalWorkflow.internalValue = value;
    }
    resetApprovalWorkflow() {
        this._approvalWorkflow.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get approvalWorkflowInput() {
        return this._approvalWorkflow.internalValue;
    }
    get eligibleUsers() {
        return this._eligibleUsers;
    }
    putEligibleUsers(value) {
        this._eligibleUsers.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get eligibleUsersInput() {
        return this._eligibleUsers.internalValue;
    }
    get privilegedAccess() {
        return this._privilegedAccess;
    }
    putPrivilegedAccess(value) {
        this._privilegedAccess.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get privilegedAccessInput() {
        return this._privilegedAccess.internalValue;
    }
    get requesterJustificationConfig() {
        return this._requesterJustificationConfig;
    }
    putRequesterJustificationConfig(value) {
        this._requesterJustificationConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get requesterJustificationConfigInput() {
        return this._requesterJustificationConfig.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            entitlement_id: cdktf.stringToTerraform(this._entitlementId),
            id: cdktf.stringToTerraform(this._id),
            location: cdktf.stringToTerraform(this._location),
            max_request_duration: cdktf.stringToTerraform(this._maxRequestDuration),
            parent: cdktf.stringToTerraform(this._parent),
            additional_notification_targets: privilegedAccessManagerEntitlementAdditionalNotificationTargetsToTerraform(this._additionalNotificationTargets.internalValue),
            approval_workflow: privilegedAccessManagerEntitlementApprovalWorkflowToTerraform(this._approvalWorkflow.internalValue),
            eligible_users: cdktf.listMapper(privilegedAccessManagerEntitlementEligibleUsersToTerraform, true)(this._eligibleUsers.internalValue),
            privileged_access: privilegedAccessManagerEntitlementPrivilegedAccessToTerraform(this._privilegedAccess.internalValue),
            requester_justification_config: privilegedAccessManagerEntitlementRequesterJustificationConfigToTerraform(this._requesterJustificationConfig.internalValue),
            timeouts: privilegedAccessManagerEntitlementTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            entitlement_id: {
                value: cdktf.stringToHclTerraform(this._entitlementId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            location: {
                value: cdktf.stringToHclTerraform(this._location),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            max_request_duration: {
                value: cdktf.stringToHclTerraform(this._maxRequestDuration),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            parent: {
                value: cdktf.stringToHclTerraform(this._parent),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            additional_notification_targets: {
                value: privilegedAccessManagerEntitlementAdditionalNotificationTargetsToHclTerraform(this._additionalNotificationTargets.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "PrivilegedAccessManagerEntitlementAdditionalNotificationTargetsList",
            },
            approval_workflow: {
                value: privilegedAccessManagerEntitlementApprovalWorkflowToHclTerraform(this._approvalWorkflow.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "PrivilegedAccessManagerEntitlementApprovalWorkflowList",
            },
            eligible_users: {
                value: cdktf.listMapperHcl(privilegedAccessManagerEntitlementEligibleUsersToHclTerraform, true)(this._eligibleUsers.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "PrivilegedAccessManagerEntitlementEligibleUsersList",
            },
            privileged_access: {
                value: privilegedAccessManagerEntitlementPrivilegedAccessToHclTerraform(this._privilegedAccess.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "PrivilegedAccessManagerEntitlementPrivilegedAccessList",
            },
            requester_justification_config: {
                value: privilegedAccessManagerEntitlementRequesterJustificationConfigToHclTerraform(this._requesterJustificationConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "PrivilegedAccessManagerEntitlementRequesterJustificationConfigList",
            },
            timeouts: {
                value: privilegedAccessManagerEntitlementTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "PrivilegedAccessManagerEntitlementTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.PrivilegedAccessManagerEntitlement = PrivilegedAccessManagerEntitlement;
_s = JSII_RTTI_SYMBOL_1;
PrivilegedAccessManagerEntitlement[_s] = { fqn: "@cdktf/provider-google.privilegedAccessManagerEntitlement.PrivilegedAccessManagerEntitlement", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
PrivilegedAccessManagerEntitlement.tfResourceType = "google_privileged_access_manager_entitlement";
//# sourceMappingURL=data:application/json;base64,