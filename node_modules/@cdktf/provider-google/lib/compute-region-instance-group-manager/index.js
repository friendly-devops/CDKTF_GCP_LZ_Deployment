"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5;
Object.defineProperty(exports, "__esModule", { value: true });
exports.computeRegionInstanceGroupManagerStatefulInternalIpToHclTerraform = exports.computeRegionInstanceGroupManagerStatefulInternalIpToTerraform = exports.ComputeRegionInstanceGroupManagerStatefulExternalIpList = exports.ComputeRegionInstanceGroupManagerStatefulExternalIpOutputReference = exports.computeRegionInstanceGroupManagerStatefulExternalIpToHclTerraform = exports.computeRegionInstanceGroupManagerStatefulExternalIpToTerraform = exports.ComputeRegionInstanceGroupManagerStatefulDiskList = exports.ComputeRegionInstanceGroupManagerStatefulDiskOutputReference = exports.computeRegionInstanceGroupManagerStatefulDiskToHclTerraform = exports.computeRegionInstanceGroupManagerStatefulDiskToTerraform = exports.ComputeRegionInstanceGroupManagerNamedPortList = exports.ComputeRegionInstanceGroupManagerNamedPortOutputReference = exports.computeRegionInstanceGroupManagerNamedPortToHclTerraform = exports.computeRegionInstanceGroupManagerNamedPortToTerraform = exports.ComputeRegionInstanceGroupManagerInstanceLifecyclePolicyOutputReference = exports.computeRegionInstanceGroupManagerInstanceLifecyclePolicyToHclTerraform = exports.computeRegionInstanceGroupManagerInstanceLifecyclePolicyToTerraform = exports.ComputeRegionInstanceGroupManagerInstanceFlexibilityPolicyOutputReference = exports.computeRegionInstanceGroupManagerInstanceFlexibilityPolicyToHclTerraform = exports.computeRegionInstanceGroupManagerInstanceFlexibilityPolicyToTerraform = exports.ComputeRegionInstanceGroupManagerInstanceFlexibilityPolicyInstanceSelectionsList = exports.ComputeRegionInstanceGroupManagerInstanceFlexibilityPolicyInstanceSelectionsOutputReference = exports.computeRegionInstanceGroupManagerInstanceFlexibilityPolicyInstanceSelectionsToHclTerraform = exports.computeRegionInstanceGroupManagerInstanceFlexibilityPolicyInstanceSelectionsToTerraform = exports.ComputeRegionInstanceGroupManagerAutoHealingPoliciesOutputReference = exports.computeRegionInstanceGroupManagerAutoHealingPoliciesToHclTerraform = exports.computeRegionInstanceGroupManagerAutoHealingPoliciesToTerraform = exports.ComputeRegionInstanceGroupManagerAllInstancesConfigOutputReference = exports.computeRegionInstanceGroupManagerAllInstancesConfigToHclTerraform = exports.computeRegionInstanceGroupManagerAllInstancesConfigToTerraform = exports.ComputeRegionInstanceGroupManagerStatusList = exports.ComputeRegionInstanceGroupManagerStatusOutputReference = exports.computeRegionInstanceGroupManagerStatusToHclTerraform = exports.computeRegionInstanceGroupManagerStatusToTerraform = exports.ComputeRegionInstanceGroupManagerStatusVersionTargetList = exports.ComputeRegionInstanceGroupManagerStatusVersionTargetOutputReference = exports.computeRegionInstanceGroupManagerStatusVersionTargetToHclTerraform = exports.computeRegionInstanceGroupManagerStatusVersionTargetToTerraform = exports.ComputeRegionInstanceGroupManagerStatusStatefulList = exports.ComputeRegionInstanceGroupManagerStatusStatefulOutputReference = exports.computeRegionInstanceGroupManagerStatusStatefulToHclTerraform = exports.computeRegionInstanceGroupManagerStatusStatefulToTerraform = exports.ComputeRegionInstanceGroupManagerStatusStatefulPerInstanceConfigsList = exports.ComputeRegionInstanceGroupManagerStatusStatefulPerInstanceConfigsOutputReference = exports.computeRegionInstanceGroupManagerStatusStatefulPerInstanceConfigsToHclTerraform = exports.computeRegionInstanceGroupManagerStatusStatefulPerInstanceConfigsToTerraform = exports.ComputeRegionInstanceGroupManagerStatusAllInstancesConfigList = exports.ComputeRegionInstanceGroupManagerStatusAllInstancesConfigOutputReference = exports.computeRegionInstanceGroupManagerStatusAllInstancesConfigToHclTerraform = exports.computeRegionInstanceGroupManagerStatusAllInstancesConfigToTerraform = void 0;
exports.ComputeRegionInstanceGroupManager = exports.ComputeRegionInstanceGroupManagerVersionList = exports.ComputeRegionInstanceGroupManagerVersionOutputReference = exports.computeRegionInstanceGroupManagerVersionToHclTerraform = exports.computeRegionInstanceGroupManagerVersionToTerraform = exports.ComputeRegionInstanceGroupManagerVersionTargetSizeOutputReference = exports.computeRegionInstanceGroupManagerVersionTargetSizeToHclTerraform = exports.computeRegionInstanceGroupManagerVersionTargetSizeToTerraform = exports.ComputeRegionInstanceGroupManagerUpdatePolicyOutputReference = exports.computeRegionInstanceGroupManagerUpdatePolicyToHclTerraform = exports.computeRegionInstanceGroupManagerUpdatePolicyToTerraform = exports.ComputeRegionInstanceGroupManagerTimeoutsOutputReference = exports.computeRegionInstanceGroupManagerTimeoutsToHclTerraform = exports.computeRegionInstanceGroupManagerTimeoutsToTerraform = exports.ComputeRegionInstanceGroupManagerStatefulInternalIpList = exports.ComputeRegionInstanceGroupManagerStatefulInternalIpOutputReference = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function computeRegionInstanceGroupManagerStatusAllInstancesConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.computeRegionInstanceGroupManagerStatusAllInstancesConfigToTerraform = computeRegionInstanceGroupManagerStatusAllInstancesConfigToTerraform;
function computeRegionInstanceGroupManagerStatusAllInstancesConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.computeRegionInstanceGroupManagerStatusAllInstancesConfigToHclTerraform = computeRegionInstanceGroupManagerStatusAllInstancesConfigToHclTerraform;
class ComputeRegionInstanceGroupManagerStatusAllInstancesConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // current_revision - computed: true, optional: false, required: false
    get currentRevision() {
        return this.getStringAttribute('current_revision');
    }
    // effective - computed: true, optional: false, required: false
    get effective() {
        return this.getBooleanAttribute('effective');
    }
}
exports.ComputeRegionInstanceGroupManagerStatusAllInstancesConfigOutputReference = ComputeRegionInstanceGroupManagerStatusAllInstancesConfigOutputReference;
_a = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceGroupManagerStatusAllInstancesConfigOutputReference[_a] = { fqn: "@cdktf/provider-google.computeRegionInstanceGroupManager.ComputeRegionInstanceGroupManagerStatusAllInstancesConfigOutputReference", version: "14.13.1" };
class ComputeRegionInstanceGroupManagerStatusAllInstancesConfigList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeRegionInstanceGroupManagerStatusAllInstancesConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeRegionInstanceGroupManagerStatusAllInstancesConfigList = ComputeRegionInstanceGroupManagerStatusAllInstancesConfigList;
_b = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceGroupManagerStatusAllInstancesConfigList[_b] = { fqn: "@cdktf/provider-google.computeRegionInstanceGroupManager.ComputeRegionInstanceGroupManagerStatusAllInstancesConfigList", version: "14.13.1" };
function computeRegionInstanceGroupManagerStatusStatefulPerInstanceConfigsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.computeRegionInstanceGroupManagerStatusStatefulPerInstanceConfigsToTerraform = computeRegionInstanceGroupManagerStatusStatefulPerInstanceConfigsToTerraform;
function computeRegionInstanceGroupManagerStatusStatefulPerInstanceConfigsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.computeRegionInstanceGroupManagerStatusStatefulPerInstanceConfigsToHclTerraform = computeRegionInstanceGroupManagerStatusStatefulPerInstanceConfigsToHclTerraform;
class ComputeRegionInstanceGroupManagerStatusStatefulPerInstanceConfigsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // all_effective - computed: true, optional: false, required: false
    get allEffective() {
        return this.getBooleanAttribute('all_effective');
    }
}
exports.ComputeRegionInstanceGroupManagerStatusStatefulPerInstanceConfigsOutputReference = ComputeRegionInstanceGroupManagerStatusStatefulPerInstanceConfigsOutputReference;
_c = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceGroupManagerStatusStatefulPerInstanceConfigsOutputReference[_c] = { fqn: "@cdktf/provider-google.computeRegionInstanceGroupManager.ComputeRegionInstanceGroupManagerStatusStatefulPerInstanceConfigsOutputReference", version: "14.13.1" };
class ComputeRegionInstanceGroupManagerStatusStatefulPerInstanceConfigsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeRegionInstanceGroupManagerStatusStatefulPerInstanceConfigsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeRegionInstanceGroupManagerStatusStatefulPerInstanceConfigsList = ComputeRegionInstanceGroupManagerStatusStatefulPerInstanceConfigsList;
_d = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceGroupManagerStatusStatefulPerInstanceConfigsList[_d] = { fqn: "@cdktf/provider-google.computeRegionInstanceGroupManager.ComputeRegionInstanceGroupManagerStatusStatefulPerInstanceConfigsList", version: "14.13.1" };
function computeRegionInstanceGroupManagerStatusStatefulToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.computeRegionInstanceGroupManagerStatusStatefulToTerraform = computeRegionInstanceGroupManagerStatusStatefulToTerraform;
function computeRegionInstanceGroupManagerStatusStatefulToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.computeRegionInstanceGroupManagerStatusStatefulToHclTerraform = computeRegionInstanceGroupManagerStatusStatefulToHclTerraform;
class ComputeRegionInstanceGroupManagerStatusStatefulOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // per_instance_configs - computed: true, optional: false, required: false
        this._perInstanceConfigs = new ComputeRegionInstanceGroupManagerStatusStatefulPerInstanceConfigsList(this, "per_instance_configs", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // has_stateful_config - computed: true, optional: false, required: false
    get hasStatefulConfig() {
        return this.getBooleanAttribute('has_stateful_config');
    }
    get perInstanceConfigs() {
        return this._perInstanceConfigs;
    }
}
exports.ComputeRegionInstanceGroupManagerStatusStatefulOutputReference = ComputeRegionInstanceGroupManagerStatusStatefulOutputReference;
_e = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceGroupManagerStatusStatefulOutputReference[_e] = { fqn: "@cdktf/provider-google.computeRegionInstanceGroupManager.ComputeRegionInstanceGroupManagerStatusStatefulOutputReference", version: "14.13.1" };
class ComputeRegionInstanceGroupManagerStatusStatefulList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeRegionInstanceGroupManagerStatusStatefulOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeRegionInstanceGroupManagerStatusStatefulList = ComputeRegionInstanceGroupManagerStatusStatefulList;
_f = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceGroupManagerStatusStatefulList[_f] = { fqn: "@cdktf/provider-google.computeRegionInstanceGroupManager.ComputeRegionInstanceGroupManagerStatusStatefulList", version: "14.13.1" };
function computeRegionInstanceGroupManagerStatusVersionTargetToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.computeRegionInstanceGroupManagerStatusVersionTargetToTerraform = computeRegionInstanceGroupManagerStatusVersionTargetToTerraform;
function computeRegionInstanceGroupManagerStatusVersionTargetToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.computeRegionInstanceGroupManagerStatusVersionTargetToHclTerraform = computeRegionInstanceGroupManagerStatusVersionTargetToHclTerraform;
class ComputeRegionInstanceGroupManagerStatusVersionTargetOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // is_reached - computed: true, optional: false, required: false
    get isReached() {
        return this.getBooleanAttribute('is_reached');
    }
}
exports.ComputeRegionInstanceGroupManagerStatusVersionTargetOutputReference = ComputeRegionInstanceGroupManagerStatusVersionTargetOutputReference;
_g = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceGroupManagerStatusVersionTargetOutputReference[_g] = { fqn: "@cdktf/provider-google.computeRegionInstanceGroupManager.ComputeRegionInstanceGroupManagerStatusVersionTargetOutputReference", version: "14.13.1" };
class ComputeRegionInstanceGroupManagerStatusVersionTargetList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeRegionInstanceGroupManagerStatusVersionTargetOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeRegionInstanceGroupManagerStatusVersionTargetList = ComputeRegionInstanceGroupManagerStatusVersionTargetList;
_h = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceGroupManagerStatusVersionTargetList[_h] = { fqn: "@cdktf/provider-google.computeRegionInstanceGroupManager.ComputeRegionInstanceGroupManagerStatusVersionTargetList", version: "14.13.1" };
function computeRegionInstanceGroupManagerStatusToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.computeRegionInstanceGroupManagerStatusToTerraform = computeRegionInstanceGroupManagerStatusToTerraform;
function computeRegionInstanceGroupManagerStatusToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.computeRegionInstanceGroupManagerStatusToHclTerraform = computeRegionInstanceGroupManagerStatusToHclTerraform;
class ComputeRegionInstanceGroupManagerStatusOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // all_instances_config - computed: true, optional: false, required: false
        this._allInstancesConfig = new ComputeRegionInstanceGroupManagerStatusAllInstancesConfigList(this, "all_instances_config", false);
        // stateful - computed: true, optional: false, required: false
        this._stateful = new ComputeRegionInstanceGroupManagerStatusStatefulList(this, "stateful", false);
        // version_target - computed: true, optional: false, required: false
        this._versionTarget = new ComputeRegionInstanceGroupManagerStatusVersionTargetList(this, "version_target", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    get allInstancesConfig() {
        return this._allInstancesConfig;
    }
    // is_stable - computed: true, optional: false, required: false
    get isStable() {
        return this.getBooleanAttribute('is_stable');
    }
    get stateful() {
        return this._stateful;
    }
    get versionTarget() {
        return this._versionTarget;
    }
}
exports.ComputeRegionInstanceGroupManagerStatusOutputReference = ComputeRegionInstanceGroupManagerStatusOutputReference;
_j = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceGroupManagerStatusOutputReference[_j] = { fqn: "@cdktf/provider-google.computeRegionInstanceGroupManager.ComputeRegionInstanceGroupManagerStatusOutputReference", version: "14.13.1" };
class ComputeRegionInstanceGroupManagerStatusList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeRegionInstanceGroupManagerStatusOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeRegionInstanceGroupManagerStatusList = ComputeRegionInstanceGroupManagerStatusList;
_k = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceGroupManagerStatusList[_k] = { fqn: "@cdktf/provider-google.computeRegionInstanceGroupManager.ComputeRegionInstanceGroupManagerStatusList", version: "14.13.1" };
function computeRegionInstanceGroupManagerAllInstancesConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        labels: cdktf.hashMapper(cdktf.stringToTerraform)(struct.labels),
        metadata: cdktf.hashMapper(cdktf.stringToTerraform)(struct.metadata),
    };
}
exports.computeRegionInstanceGroupManagerAllInstancesConfigToTerraform = computeRegionInstanceGroupManagerAllInstancesConfigToTerraform;
function computeRegionInstanceGroupManagerAllInstancesConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        labels: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.labels),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        metadata: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.metadata),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeRegionInstanceGroupManagerAllInstancesConfigToHclTerraform = computeRegionInstanceGroupManagerAllInstancesConfigToHclTerraform;
class ComputeRegionInstanceGroupManagerAllInstancesConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._labels !== undefined) {
            hasAnyValues = true;
            internalValueResult.labels = this._labels;
        }
        if (this._metadata !== undefined) {
            hasAnyValues = true;
            internalValueResult.metadata = this._metadata;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._labels = undefined;
            this._metadata = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._labels = value.labels;
            this._metadata = value.metadata;
        }
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get metadata() {
        return this.getStringMapAttribute('metadata');
    }
    set metadata(value) {
        this._metadata = value;
    }
    resetMetadata() {
        this._metadata = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get metadataInput() {
        return this._metadata;
    }
}
exports.ComputeRegionInstanceGroupManagerAllInstancesConfigOutputReference = ComputeRegionInstanceGroupManagerAllInstancesConfigOutputReference;
_l = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceGroupManagerAllInstancesConfigOutputReference[_l] = { fqn: "@cdktf/provider-google.computeRegionInstanceGroupManager.ComputeRegionInstanceGroupManagerAllInstancesConfigOutputReference", version: "14.13.1" };
function computeRegionInstanceGroupManagerAutoHealingPoliciesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        health_check: cdktf.stringToTerraform(struct.healthCheck),
        initial_delay_sec: cdktf.numberToTerraform(struct.initialDelaySec),
    };
}
exports.computeRegionInstanceGroupManagerAutoHealingPoliciesToTerraform = computeRegionInstanceGroupManagerAutoHealingPoliciesToTerraform;
function computeRegionInstanceGroupManagerAutoHealingPoliciesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        health_check: {
            value: cdktf.stringToHclTerraform(struct.healthCheck),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        initial_delay_sec: {
            value: cdktf.numberToHclTerraform(struct.initialDelaySec),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeRegionInstanceGroupManagerAutoHealingPoliciesToHclTerraform = computeRegionInstanceGroupManagerAutoHealingPoliciesToHclTerraform;
class ComputeRegionInstanceGroupManagerAutoHealingPoliciesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._healthCheck !== undefined) {
            hasAnyValues = true;
            internalValueResult.healthCheck = this._healthCheck;
        }
        if (this._initialDelaySec !== undefined) {
            hasAnyValues = true;
            internalValueResult.initialDelaySec = this._initialDelaySec;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._healthCheck = undefined;
            this._initialDelaySec = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._healthCheck = value.healthCheck;
            this._initialDelaySec = value.initialDelaySec;
        }
    }
    get healthCheck() {
        return this.getStringAttribute('health_check');
    }
    set healthCheck(value) {
        this._healthCheck = value;
    }
    // Temporarily expose input value. Use with caution.
    get healthCheckInput() {
        return this._healthCheck;
    }
    get initialDelaySec() {
        return this.getNumberAttribute('initial_delay_sec');
    }
    set initialDelaySec(value) {
        this._initialDelaySec = value;
    }
    // Temporarily expose input value. Use with caution.
    get initialDelaySecInput() {
        return this._initialDelaySec;
    }
}
exports.ComputeRegionInstanceGroupManagerAutoHealingPoliciesOutputReference = ComputeRegionInstanceGroupManagerAutoHealingPoliciesOutputReference;
_m = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceGroupManagerAutoHealingPoliciesOutputReference[_m] = { fqn: "@cdktf/provider-google.computeRegionInstanceGroupManager.ComputeRegionInstanceGroupManagerAutoHealingPoliciesOutputReference", version: "14.13.1" };
function computeRegionInstanceGroupManagerInstanceFlexibilityPolicyInstanceSelectionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        machine_types: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.machineTypes),
        name: cdktf.stringToTerraform(struct.name),
        rank: cdktf.numberToTerraform(struct.rank),
    };
}
exports.computeRegionInstanceGroupManagerInstanceFlexibilityPolicyInstanceSelectionsToTerraform = computeRegionInstanceGroupManagerInstanceFlexibilityPolicyInstanceSelectionsToTerraform;
function computeRegionInstanceGroupManagerInstanceFlexibilityPolicyInstanceSelectionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        machine_types: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.machineTypes),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        rank: {
            value: cdktf.numberToHclTerraform(struct.rank),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeRegionInstanceGroupManagerInstanceFlexibilityPolicyInstanceSelectionsToHclTerraform = computeRegionInstanceGroupManagerInstanceFlexibilityPolicyInstanceSelectionsToHclTerraform;
class ComputeRegionInstanceGroupManagerInstanceFlexibilityPolicyInstanceSelectionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._machineTypes !== undefined) {
            hasAnyValues = true;
            internalValueResult.machineTypes = this._machineTypes;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._rank !== undefined) {
            hasAnyValues = true;
            internalValueResult.rank = this._rank;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._machineTypes = undefined;
            this._name = undefined;
            this._rank = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._machineTypes = value.machineTypes;
            this._name = value.name;
            this._rank = value.rank;
        }
    }
    get machineTypes() {
        return cdktf.Fn.tolist(this.getListAttribute('machine_types'));
    }
    set machineTypes(value) {
        this._machineTypes = value;
    }
    // Temporarily expose input value. Use with caution.
    get machineTypesInput() {
        return this._machineTypes;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get rank() {
        return this.getNumberAttribute('rank');
    }
    set rank(value) {
        this._rank = value;
    }
    resetRank() {
        this._rank = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rankInput() {
        return this._rank;
    }
}
exports.ComputeRegionInstanceGroupManagerInstanceFlexibilityPolicyInstanceSelectionsOutputReference = ComputeRegionInstanceGroupManagerInstanceFlexibilityPolicyInstanceSelectionsOutputReference;
_o = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceGroupManagerInstanceFlexibilityPolicyInstanceSelectionsOutputReference[_o] = { fqn: "@cdktf/provider-google.computeRegionInstanceGroupManager.ComputeRegionInstanceGroupManagerInstanceFlexibilityPolicyInstanceSelectionsOutputReference", version: "14.13.1" };
class ComputeRegionInstanceGroupManagerInstanceFlexibilityPolicyInstanceSelectionsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeRegionInstanceGroupManagerInstanceFlexibilityPolicyInstanceSelectionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeRegionInstanceGroupManagerInstanceFlexibilityPolicyInstanceSelectionsList = ComputeRegionInstanceGroupManagerInstanceFlexibilityPolicyInstanceSelectionsList;
_p = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceGroupManagerInstanceFlexibilityPolicyInstanceSelectionsList[_p] = { fqn: "@cdktf/provider-google.computeRegionInstanceGroupManager.ComputeRegionInstanceGroupManagerInstanceFlexibilityPolicyInstanceSelectionsList", version: "14.13.1" };
function computeRegionInstanceGroupManagerInstanceFlexibilityPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        instance_selections: cdktf.listMapper(computeRegionInstanceGroupManagerInstanceFlexibilityPolicyInstanceSelectionsToTerraform, true)(struct.instanceSelections),
    };
}
exports.computeRegionInstanceGroupManagerInstanceFlexibilityPolicyToTerraform = computeRegionInstanceGroupManagerInstanceFlexibilityPolicyToTerraform;
function computeRegionInstanceGroupManagerInstanceFlexibilityPolicyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        instance_selections: {
            value: cdktf.listMapperHcl(computeRegionInstanceGroupManagerInstanceFlexibilityPolicyInstanceSelectionsToHclTerraform, true)(struct.instanceSelections),
            isBlock: true,
            type: "set",
            storageClassType: "ComputeRegionInstanceGroupManagerInstanceFlexibilityPolicyInstanceSelectionsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeRegionInstanceGroupManagerInstanceFlexibilityPolicyToHclTerraform = computeRegionInstanceGroupManagerInstanceFlexibilityPolicyToHclTerraform;
class ComputeRegionInstanceGroupManagerInstanceFlexibilityPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // instance_selections - computed: false, optional: true, required: false
        this._instanceSelections = new ComputeRegionInstanceGroupManagerInstanceFlexibilityPolicyInstanceSelectionsList(this, "instance_selections", true);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._instanceSelections?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceSelections = this._instanceSelections?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._instanceSelections.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._instanceSelections.internalValue = value.instanceSelections;
        }
    }
    get instanceSelections() {
        return this._instanceSelections;
    }
    putInstanceSelections(value) {
        this._instanceSelections.internalValue = value;
    }
    resetInstanceSelections() {
        this._instanceSelections.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceSelectionsInput() {
        return this._instanceSelections.internalValue;
    }
}
exports.ComputeRegionInstanceGroupManagerInstanceFlexibilityPolicyOutputReference = ComputeRegionInstanceGroupManagerInstanceFlexibilityPolicyOutputReference;
_q = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceGroupManagerInstanceFlexibilityPolicyOutputReference[_q] = { fqn: "@cdktf/provider-google.computeRegionInstanceGroupManager.ComputeRegionInstanceGroupManagerInstanceFlexibilityPolicyOutputReference", version: "14.13.1" };
function computeRegionInstanceGroupManagerInstanceLifecyclePolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        default_action_on_failure: cdktf.stringToTerraform(struct.defaultActionOnFailure),
        force_update_on_repair: cdktf.stringToTerraform(struct.forceUpdateOnRepair),
    };
}
exports.computeRegionInstanceGroupManagerInstanceLifecyclePolicyToTerraform = computeRegionInstanceGroupManagerInstanceLifecyclePolicyToTerraform;
function computeRegionInstanceGroupManagerInstanceLifecyclePolicyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        default_action_on_failure: {
            value: cdktf.stringToHclTerraform(struct.defaultActionOnFailure),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        force_update_on_repair: {
            value: cdktf.stringToHclTerraform(struct.forceUpdateOnRepair),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeRegionInstanceGroupManagerInstanceLifecyclePolicyToHclTerraform = computeRegionInstanceGroupManagerInstanceLifecyclePolicyToHclTerraform;
class ComputeRegionInstanceGroupManagerInstanceLifecyclePolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._defaultActionOnFailure !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultActionOnFailure = this._defaultActionOnFailure;
        }
        if (this._forceUpdateOnRepair !== undefined) {
            hasAnyValues = true;
            internalValueResult.forceUpdateOnRepair = this._forceUpdateOnRepair;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._defaultActionOnFailure = undefined;
            this._forceUpdateOnRepair = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._defaultActionOnFailure = value.defaultActionOnFailure;
            this._forceUpdateOnRepair = value.forceUpdateOnRepair;
        }
    }
    get defaultActionOnFailure() {
        return this.getStringAttribute('default_action_on_failure');
    }
    set defaultActionOnFailure(value) {
        this._defaultActionOnFailure = value;
    }
    resetDefaultActionOnFailure() {
        this._defaultActionOnFailure = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultActionOnFailureInput() {
        return this._defaultActionOnFailure;
    }
    get forceUpdateOnRepair() {
        return this.getStringAttribute('force_update_on_repair');
    }
    set forceUpdateOnRepair(value) {
        this._forceUpdateOnRepair = value;
    }
    resetForceUpdateOnRepair() {
        this._forceUpdateOnRepair = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get forceUpdateOnRepairInput() {
        return this._forceUpdateOnRepair;
    }
}
exports.ComputeRegionInstanceGroupManagerInstanceLifecyclePolicyOutputReference = ComputeRegionInstanceGroupManagerInstanceLifecyclePolicyOutputReference;
_r = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceGroupManagerInstanceLifecyclePolicyOutputReference[_r] = { fqn: "@cdktf/provider-google.computeRegionInstanceGroupManager.ComputeRegionInstanceGroupManagerInstanceLifecyclePolicyOutputReference", version: "14.13.1" };
function computeRegionInstanceGroupManagerNamedPortToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        port: cdktf.numberToTerraform(struct.port),
    };
}
exports.computeRegionInstanceGroupManagerNamedPortToTerraform = computeRegionInstanceGroupManagerNamedPortToTerraform;
function computeRegionInstanceGroupManagerNamedPortToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        port: {
            value: cdktf.numberToHclTerraform(struct.port),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeRegionInstanceGroupManagerNamedPortToHclTerraform = computeRegionInstanceGroupManagerNamedPortToHclTerraform;
class ComputeRegionInstanceGroupManagerNamedPortOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._port !== undefined) {
            hasAnyValues = true;
            internalValueResult.port = this._port;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._name = undefined;
            this._port = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._name = value.name;
            this._port = value.port;
        }
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get port() {
        return this.getNumberAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
}
exports.ComputeRegionInstanceGroupManagerNamedPortOutputReference = ComputeRegionInstanceGroupManagerNamedPortOutputReference;
_s = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceGroupManagerNamedPortOutputReference[_s] = { fqn: "@cdktf/provider-google.computeRegionInstanceGroupManager.ComputeRegionInstanceGroupManagerNamedPortOutputReference", version: "14.13.1" };
class ComputeRegionInstanceGroupManagerNamedPortList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeRegionInstanceGroupManagerNamedPortOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeRegionInstanceGroupManagerNamedPortList = ComputeRegionInstanceGroupManagerNamedPortList;
_t = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceGroupManagerNamedPortList[_t] = { fqn: "@cdktf/provider-google.computeRegionInstanceGroupManager.ComputeRegionInstanceGroupManagerNamedPortList", version: "14.13.1" };
function computeRegionInstanceGroupManagerStatefulDiskToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        delete_rule: cdktf.stringToTerraform(struct.deleteRule),
        device_name: cdktf.stringToTerraform(struct.deviceName),
    };
}
exports.computeRegionInstanceGroupManagerStatefulDiskToTerraform = computeRegionInstanceGroupManagerStatefulDiskToTerraform;
function computeRegionInstanceGroupManagerStatefulDiskToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        delete_rule: {
            value: cdktf.stringToHclTerraform(struct.deleteRule),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        device_name: {
            value: cdktf.stringToHclTerraform(struct.deviceName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeRegionInstanceGroupManagerStatefulDiskToHclTerraform = computeRegionInstanceGroupManagerStatefulDiskToHclTerraform;
class ComputeRegionInstanceGroupManagerStatefulDiskOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._deleteRule !== undefined) {
            hasAnyValues = true;
            internalValueResult.deleteRule = this._deleteRule;
        }
        if (this._deviceName !== undefined) {
            hasAnyValues = true;
            internalValueResult.deviceName = this._deviceName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._deleteRule = undefined;
            this._deviceName = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._deleteRule = value.deleteRule;
            this._deviceName = value.deviceName;
        }
    }
    get deleteRule() {
        return this.getStringAttribute('delete_rule');
    }
    set deleteRule(value) {
        this._deleteRule = value;
    }
    resetDeleteRule() {
        this._deleteRule = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteRuleInput() {
        return this._deleteRule;
    }
    get deviceName() {
        return this.getStringAttribute('device_name');
    }
    set deviceName(value) {
        this._deviceName = value;
    }
    // Temporarily expose input value. Use with caution.
    get deviceNameInput() {
        return this._deviceName;
    }
}
exports.ComputeRegionInstanceGroupManagerStatefulDiskOutputReference = ComputeRegionInstanceGroupManagerStatefulDiskOutputReference;
_u = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceGroupManagerStatefulDiskOutputReference[_u] = { fqn: "@cdktf/provider-google.computeRegionInstanceGroupManager.ComputeRegionInstanceGroupManagerStatefulDiskOutputReference", version: "14.13.1" };
class ComputeRegionInstanceGroupManagerStatefulDiskList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeRegionInstanceGroupManagerStatefulDiskOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeRegionInstanceGroupManagerStatefulDiskList = ComputeRegionInstanceGroupManagerStatefulDiskList;
_v = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceGroupManagerStatefulDiskList[_v] = { fqn: "@cdktf/provider-google.computeRegionInstanceGroupManager.ComputeRegionInstanceGroupManagerStatefulDiskList", version: "14.13.1" };
function computeRegionInstanceGroupManagerStatefulExternalIpToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        delete_rule: cdktf.stringToTerraform(struct.deleteRule),
        interface_name: cdktf.stringToTerraform(struct.interfaceName),
    };
}
exports.computeRegionInstanceGroupManagerStatefulExternalIpToTerraform = computeRegionInstanceGroupManagerStatefulExternalIpToTerraform;
function computeRegionInstanceGroupManagerStatefulExternalIpToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        delete_rule: {
            value: cdktf.stringToHclTerraform(struct.deleteRule),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        interface_name: {
            value: cdktf.stringToHclTerraform(struct.interfaceName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeRegionInstanceGroupManagerStatefulExternalIpToHclTerraform = computeRegionInstanceGroupManagerStatefulExternalIpToHclTerraform;
class ComputeRegionInstanceGroupManagerStatefulExternalIpOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._deleteRule !== undefined) {
            hasAnyValues = true;
            internalValueResult.deleteRule = this._deleteRule;
        }
        if (this._interfaceName !== undefined) {
            hasAnyValues = true;
            internalValueResult.interfaceName = this._interfaceName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._deleteRule = undefined;
            this._interfaceName = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._deleteRule = value.deleteRule;
            this._interfaceName = value.interfaceName;
        }
    }
    get deleteRule() {
        return this.getStringAttribute('delete_rule');
    }
    set deleteRule(value) {
        this._deleteRule = value;
    }
    resetDeleteRule() {
        this._deleteRule = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteRuleInput() {
        return this._deleteRule;
    }
    get interfaceName() {
        return this.getStringAttribute('interface_name');
    }
    set interfaceName(value) {
        this._interfaceName = value;
    }
    resetInterfaceName() {
        this._interfaceName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get interfaceNameInput() {
        return this._interfaceName;
    }
}
exports.ComputeRegionInstanceGroupManagerStatefulExternalIpOutputReference = ComputeRegionInstanceGroupManagerStatefulExternalIpOutputReference;
_w = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceGroupManagerStatefulExternalIpOutputReference[_w] = { fqn: "@cdktf/provider-google.computeRegionInstanceGroupManager.ComputeRegionInstanceGroupManagerStatefulExternalIpOutputReference", version: "14.13.1" };
class ComputeRegionInstanceGroupManagerStatefulExternalIpList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeRegionInstanceGroupManagerStatefulExternalIpOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeRegionInstanceGroupManagerStatefulExternalIpList = ComputeRegionInstanceGroupManagerStatefulExternalIpList;
_x = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceGroupManagerStatefulExternalIpList[_x] = { fqn: "@cdktf/provider-google.computeRegionInstanceGroupManager.ComputeRegionInstanceGroupManagerStatefulExternalIpList", version: "14.13.1" };
function computeRegionInstanceGroupManagerStatefulInternalIpToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        delete_rule: cdktf.stringToTerraform(struct.deleteRule),
        interface_name: cdktf.stringToTerraform(struct.interfaceName),
    };
}
exports.computeRegionInstanceGroupManagerStatefulInternalIpToTerraform = computeRegionInstanceGroupManagerStatefulInternalIpToTerraform;
function computeRegionInstanceGroupManagerStatefulInternalIpToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        delete_rule: {
            value: cdktf.stringToHclTerraform(struct.deleteRule),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        interface_name: {
            value: cdktf.stringToHclTerraform(struct.interfaceName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeRegionInstanceGroupManagerStatefulInternalIpToHclTerraform = computeRegionInstanceGroupManagerStatefulInternalIpToHclTerraform;
class ComputeRegionInstanceGroupManagerStatefulInternalIpOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._deleteRule !== undefined) {
            hasAnyValues = true;
            internalValueResult.deleteRule = this._deleteRule;
        }
        if (this._interfaceName !== undefined) {
            hasAnyValues = true;
            internalValueResult.interfaceName = this._interfaceName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._deleteRule = undefined;
            this._interfaceName = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._deleteRule = value.deleteRule;
            this._interfaceName = value.interfaceName;
        }
    }
    get deleteRule() {
        return this.getStringAttribute('delete_rule');
    }
    set deleteRule(value) {
        this._deleteRule = value;
    }
    resetDeleteRule() {
        this._deleteRule = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteRuleInput() {
        return this._deleteRule;
    }
    get interfaceName() {
        return this.getStringAttribute('interface_name');
    }
    set interfaceName(value) {
        this._interfaceName = value;
    }
    resetInterfaceName() {
        this._interfaceName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get interfaceNameInput() {
        return this._interfaceName;
    }
}
exports.ComputeRegionInstanceGroupManagerStatefulInternalIpOutputReference = ComputeRegionInstanceGroupManagerStatefulInternalIpOutputReference;
_y = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceGroupManagerStatefulInternalIpOutputReference[_y] = { fqn: "@cdktf/provider-google.computeRegionInstanceGroupManager.ComputeRegionInstanceGroupManagerStatefulInternalIpOutputReference", version: "14.13.1" };
class ComputeRegionInstanceGroupManagerStatefulInternalIpList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeRegionInstanceGroupManagerStatefulInternalIpOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeRegionInstanceGroupManagerStatefulInternalIpList = ComputeRegionInstanceGroupManagerStatefulInternalIpList;
_z = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceGroupManagerStatefulInternalIpList[_z] = { fqn: "@cdktf/provider-google.computeRegionInstanceGroupManager.ComputeRegionInstanceGroupManagerStatefulInternalIpList", version: "14.13.1" };
function computeRegionInstanceGroupManagerTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.computeRegionInstanceGroupManagerTimeoutsToTerraform = computeRegionInstanceGroupManagerTimeoutsToTerraform;
function computeRegionInstanceGroupManagerTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeRegionInstanceGroupManagerTimeoutsToHclTerraform = computeRegionInstanceGroupManagerTimeoutsToHclTerraform;
class ComputeRegionInstanceGroupManagerTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.ComputeRegionInstanceGroupManagerTimeoutsOutputReference = ComputeRegionInstanceGroupManagerTimeoutsOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceGroupManagerTimeoutsOutputReference[_0] = { fqn: "@cdktf/provider-google.computeRegionInstanceGroupManager.ComputeRegionInstanceGroupManagerTimeoutsOutputReference", version: "14.13.1" };
function computeRegionInstanceGroupManagerUpdatePolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        instance_redistribution_type: cdktf.stringToTerraform(struct.instanceRedistributionType),
        max_surge_fixed: cdktf.numberToTerraform(struct.maxSurgeFixed),
        max_surge_percent: cdktf.numberToTerraform(struct.maxSurgePercent),
        max_unavailable_fixed: cdktf.numberToTerraform(struct.maxUnavailableFixed),
        max_unavailable_percent: cdktf.numberToTerraform(struct.maxUnavailablePercent),
        minimal_action: cdktf.stringToTerraform(struct.minimalAction),
        most_disruptive_allowed_action: cdktf.stringToTerraform(struct.mostDisruptiveAllowedAction),
        replacement_method: cdktf.stringToTerraform(struct.replacementMethod),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.computeRegionInstanceGroupManagerUpdatePolicyToTerraform = computeRegionInstanceGroupManagerUpdatePolicyToTerraform;
function computeRegionInstanceGroupManagerUpdatePolicyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        instance_redistribution_type: {
            value: cdktf.stringToHclTerraform(struct.instanceRedistributionType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        max_surge_fixed: {
            value: cdktf.numberToHclTerraform(struct.maxSurgeFixed),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        max_surge_percent: {
            value: cdktf.numberToHclTerraform(struct.maxSurgePercent),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        max_unavailable_fixed: {
            value: cdktf.numberToHclTerraform(struct.maxUnavailableFixed),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        max_unavailable_percent: {
            value: cdktf.numberToHclTerraform(struct.maxUnavailablePercent),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        minimal_action: {
            value: cdktf.stringToHclTerraform(struct.minimalAction),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        most_disruptive_allowed_action: {
            value: cdktf.stringToHclTerraform(struct.mostDisruptiveAllowedAction),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        replacement_method: {
            value: cdktf.stringToHclTerraform(struct.replacementMethod),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        type: {
            value: cdktf.stringToHclTerraform(struct.type),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeRegionInstanceGroupManagerUpdatePolicyToHclTerraform = computeRegionInstanceGroupManagerUpdatePolicyToHclTerraform;
class ComputeRegionInstanceGroupManagerUpdatePolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._instanceRedistributionType !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceRedistributionType = this._instanceRedistributionType;
        }
        if (this._maxSurgeFixed !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxSurgeFixed = this._maxSurgeFixed;
        }
        if (this._maxSurgePercent !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxSurgePercent = this._maxSurgePercent;
        }
        if (this._maxUnavailableFixed !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxUnavailableFixed = this._maxUnavailableFixed;
        }
        if (this._maxUnavailablePercent !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxUnavailablePercent = this._maxUnavailablePercent;
        }
        if (this._minimalAction !== undefined) {
            hasAnyValues = true;
            internalValueResult.minimalAction = this._minimalAction;
        }
        if (this._mostDisruptiveAllowedAction !== undefined) {
            hasAnyValues = true;
            internalValueResult.mostDisruptiveAllowedAction = this._mostDisruptiveAllowedAction;
        }
        if (this._replacementMethod !== undefined) {
            hasAnyValues = true;
            internalValueResult.replacementMethod = this._replacementMethod;
        }
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._instanceRedistributionType = undefined;
            this._maxSurgeFixed = undefined;
            this._maxSurgePercent = undefined;
            this._maxUnavailableFixed = undefined;
            this._maxUnavailablePercent = undefined;
            this._minimalAction = undefined;
            this._mostDisruptiveAllowedAction = undefined;
            this._replacementMethod = undefined;
            this._type = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._instanceRedistributionType = value.instanceRedistributionType;
            this._maxSurgeFixed = value.maxSurgeFixed;
            this._maxSurgePercent = value.maxSurgePercent;
            this._maxUnavailableFixed = value.maxUnavailableFixed;
            this._maxUnavailablePercent = value.maxUnavailablePercent;
            this._minimalAction = value.minimalAction;
            this._mostDisruptiveAllowedAction = value.mostDisruptiveAllowedAction;
            this._replacementMethod = value.replacementMethod;
            this._type = value.type;
        }
    }
    get instanceRedistributionType() {
        return this.getStringAttribute('instance_redistribution_type');
    }
    set instanceRedistributionType(value) {
        this._instanceRedistributionType = value;
    }
    resetInstanceRedistributionType() {
        this._instanceRedistributionType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceRedistributionTypeInput() {
        return this._instanceRedistributionType;
    }
    get maxSurgeFixed() {
        return this.getNumberAttribute('max_surge_fixed');
    }
    set maxSurgeFixed(value) {
        this._maxSurgeFixed = value;
    }
    resetMaxSurgeFixed() {
        this._maxSurgeFixed = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxSurgeFixedInput() {
        return this._maxSurgeFixed;
    }
    get maxSurgePercent() {
        return this.getNumberAttribute('max_surge_percent');
    }
    set maxSurgePercent(value) {
        this._maxSurgePercent = value;
    }
    resetMaxSurgePercent() {
        this._maxSurgePercent = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxSurgePercentInput() {
        return this._maxSurgePercent;
    }
    get maxUnavailableFixed() {
        return this.getNumberAttribute('max_unavailable_fixed');
    }
    set maxUnavailableFixed(value) {
        this._maxUnavailableFixed = value;
    }
    resetMaxUnavailableFixed() {
        this._maxUnavailableFixed = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxUnavailableFixedInput() {
        return this._maxUnavailableFixed;
    }
    get maxUnavailablePercent() {
        return this.getNumberAttribute('max_unavailable_percent');
    }
    set maxUnavailablePercent(value) {
        this._maxUnavailablePercent = value;
    }
    resetMaxUnavailablePercent() {
        this._maxUnavailablePercent = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxUnavailablePercentInput() {
        return this._maxUnavailablePercent;
    }
    get minimalAction() {
        return this.getStringAttribute('minimal_action');
    }
    set minimalAction(value) {
        this._minimalAction = value;
    }
    // Temporarily expose input value. Use with caution.
    get minimalActionInput() {
        return this._minimalAction;
    }
    get mostDisruptiveAllowedAction() {
        return this.getStringAttribute('most_disruptive_allowed_action');
    }
    set mostDisruptiveAllowedAction(value) {
        this._mostDisruptiveAllowedAction = value;
    }
    resetMostDisruptiveAllowedAction() {
        this._mostDisruptiveAllowedAction = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mostDisruptiveAllowedActionInput() {
        return this._mostDisruptiveAllowedAction;
    }
    get replacementMethod() {
        return this.getStringAttribute('replacement_method');
    }
    set replacementMethod(value) {
        this._replacementMethod = value;
    }
    resetReplacementMethod() {
        this._replacementMethod = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get replacementMethodInput() {
        return this._replacementMethod;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
}
exports.ComputeRegionInstanceGroupManagerUpdatePolicyOutputReference = ComputeRegionInstanceGroupManagerUpdatePolicyOutputReference;
_1 = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceGroupManagerUpdatePolicyOutputReference[_1] = { fqn: "@cdktf/provider-google.computeRegionInstanceGroupManager.ComputeRegionInstanceGroupManagerUpdatePolicyOutputReference", version: "14.13.1" };
function computeRegionInstanceGroupManagerVersionTargetSizeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        fixed: cdktf.numberToTerraform(struct.fixed),
        percent: cdktf.numberToTerraform(struct.percent),
    };
}
exports.computeRegionInstanceGroupManagerVersionTargetSizeToTerraform = computeRegionInstanceGroupManagerVersionTargetSizeToTerraform;
function computeRegionInstanceGroupManagerVersionTargetSizeToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        fixed: {
            value: cdktf.numberToHclTerraform(struct.fixed),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        percent: {
            value: cdktf.numberToHclTerraform(struct.percent),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeRegionInstanceGroupManagerVersionTargetSizeToHclTerraform = computeRegionInstanceGroupManagerVersionTargetSizeToHclTerraform;
class ComputeRegionInstanceGroupManagerVersionTargetSizeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._fixed !== undefined) {
            hasAnyValues = true;
            internalValueResult.fixed = this._fixed;
        }
        if (this._percent !== undefined) {
            hasAnyValues = true;
            internalValueResult.percent = this._percent;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._fixed = undefined;
            this._percent = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._fixed = value.fixed;
            this._percent = value.percent;
        }
    }
    get fixed() {
        return this.getNumberAttribute('fixed');
    }
    set fixed(value) {
        this._fixed = value;
    }
    resetFixed() {
        this._fixed = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fixedInput() {
        return this._fixed;
    }
    get percent() {
        return this.getNumberAttribute('percent');
    }
    set percent(value) {
        this._percent = value;
    }
    resetPercent() {
        this._percent = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get percentInput() {
        return this._percent;
    }
}
exports.ComputeRegionInstanceGroupManagerVersionTargetSizeOutputReference = ComputeRegionInstanceGroupManagerVersionTargetSizeOutputReference;
_2 = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceGroupManagerVersionTargetSizeOutputReference[_2] = { fqn: "@cdktf/provider-google.computeRegionInstanceGroupManager.ComputeRegionInstanceGroupManagerVersionTargetSizeOutputReference", version: "14.13.1" };
function computeRegionInstanceGroupManagerVersionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        instance_template: cdktf.stringToTerraform(struct.instanceTemplate),
        name: cdktf.stringToTerraform(struct.name),
        target_size: computeRegionInstanceGroupManagerVersionTargetSizeToTerraform(struct.targetSize),
    };
}
exports.computeRegionInstanceGroupManagerVersionToTerraform = computeRegionInstanceGroupManagerVersionToTerraform;
function computeRegionInstanceGroupManagerVersionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        instance_template: {
            value: cdktf.stringToHclTerraform(struct.instanceTemplate),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        target_size: {
            value: computeRegionInstanceGroupManagerVersionTargetSizeToHclTerraform(struct.targetSize),
            isBlock: true,
            type: "list",
            storageClassType: "ComputeRegionInstanceGroupManagerVersionTargetSizeList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeRegionInstanceGroupManagerVersionToHclTerraform = computeRegionInstanceGroupManagerVersionToHclTerraform;
class ComputeRegionInstanceGroupManagerVersionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // target_size - computed: false, optional: true, required: false
        this._targetSize = new ComputeRegionInstanceGroupManagerVersionTargetSizeOutputReference(this, "target_size");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._instanceTemplate !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceTemplate = this._instanceTemplate;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._targetSize?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetSize = this._targetSize?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._instanceTemplate = undefined;
            this._name = undefined;
            this._targetSize.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._instanceTemplate = value.instanceTemplate;
            this._name = value.name;
            this._targetSize.internalValue = value.targetSize;
        }
    }
    get instanceTemplate() {
        return this.getStringAttribute('instance_template');
    }
    set instanceTemplate(value) {
        this._instanceTemplate = value;
    }
    // Temporarily expose input value. Use with caution.
    get instanceTemplateInput() {
        return this._instanceTemplate;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get targetSize() {
        return this._targetSize;
    }
    putTargetSize(value) {
        this._targetSize.internalValue = value;
    }
    resetTargetSize() {
        this._targetSize.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetSizeInput() {
        return this._targetSize.internalValue;
    }
}
exports.ComputeRegionInstanceGroupManagerVersionOutputReference = ComputeRegionInstanceGroupManagerVersionOutputReference;
_3 = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceGroupManagerVersionOutputReference[_3] = { fqn: "@cdktf/provider-google.computeRegionInstanceGroupManager.ComputeRegionInstanceGroupManagerVersionOutputReference", version: "14.13.1" };
class ComputeRegionInstanceGroupManagerVersionList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeRegionInstanceGroupManagerVersionOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeRegionInstanceGroupManagerVersionList = ComputeRegionInstanceGroupManagerVersionList;
_4 = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceGroupManagerVersionList[_4] = { fqn: "@cdktf/provider-google.computeRegionInstanceGroupManager.ComputeRegionInstanceGroupManagerVersionList", version: "14.13.1" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/compute_region_instance_group_manager google_compute_region_instance_group_manager}
*/
class ComputeRegionInstanceGroupManager extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a ComputeRegionInstanceGroupManager resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the ComputeRegionInstanceGroupManager to import
    * @param importFromId The id of the existing ComputeRegionInstanceGroupManager that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/compute_region_instance_group_manager#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the ComputeRegionInstanceGroupManager to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_compute_region_instance_group_manager", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/compute_region_instance_group_manager google_compute_region_instance_group_manager} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ComputeRegionInstanceGroupManagerConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_compute_region_instance_group_manager',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // status - computed: true, optional: false, required: false
        this._status = new ComputeRegionInstanceGroupManagerStatusList(this, "status", false);
        // all_instances_config - computed: false, optional: true, required: false
        this._allInstancesConfig = new ComputeRegionInstanceGroupManagerAllInstancesConfigOutputReference(this, "all_instances_config");
        // auto_healing_policies - computed: false, optional: true, required: false
        this._autoHealingPolicies = new ComputeRegionInstanceGroupManagerAutoHealingPoliciesOutputReference(this, "auto_healing_policies");
        // instance_flexibility_policy - computed: false, optional: true, required: false
        this._instanceFlexibilityPolicy = new ComputeRegionInstanceGroupManagerInstanceFlexibilityPolicyOutputReference(this, "instance_flexibility_policy");
        // instance_lifecycle_policy - computed: false, optional: true, required: false
        this._instanceLifecyclePolicy = new ComputeRegionInstanceGroupManagerInstanceLifecyclePolicyOutputReference(this, "instance_lifecycle_policy");
        // named_port - computed: false, optional: true, required: false
        this._namedPort = new ComputeRegionInstanceGroupManagerNamedPortList(this, "named_port", true);
        // stateful_disk - computed: false, optional: true, required: false
        this._statefulDisk = new ComputeRegionInstanceGroupManagerStatefulDiskList(this, "stateful_disk", true);
        // stateful_external_ip - computed: false, optional: true, required: false
        this._statefulExternalIp = new ComputeRegionInstanceGroupManagerStatefulExternalIpList(this, "stateful_external_ip", false);
        // stateful_internal_ip - computed: false, optional: true, required: false
        this._statefulInternalIp = new ComputeRegionInstanceGroupManagerStatefulInternalIpList(this, "stateful_internal_ip", false);
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new ComputeRegionInstanceGroupManagerTimeoutsOutputReference(this, "timeouts");
        // update_policy - computed: false, optional: true, required: false
        this._updatePolicy = new ComputeRegionInstanceGroupManagerUpdatePolicyOutputReference(this, "update_policy");
        // version - computed: false, optional: false, required: true
        this._version = new ComputeRegionInstanceGroupManagerVersionList(this, "version", false);
        this._baseInstanceName = config.baseInstanceName;
        this._description = config.description;
        this._distributionPolicyTargetShape = config.distributionPolicyTargetShape;
        this._distributionPolicyZones = config.distributionPolicyZones;
        this._id = config.id;
        this._listManagedInstancesResults = config.listManagedInstancesResults;
        this._name = config.name;
        this._project = config.project;
        this._region = config.region;
        this._targetPools = config.targetPools;
        this._targetSize = config.targetSize;
        this._waitForInstances = config.waitForInstances;
        this._waitForInstancesStatus = config.waitForInstancesStatus;
        this._allInstancesConfig.internalValue = config.allInstancesConfig;
        this._autoHealingPolicies.internalValue = config.autoHealingPolicies;
        this._instanceFlexibilityPolicy.internalValue = config.instanceFlexibilityPolicy;
        this._instanceLifecyclePolicy.internalValue = config.instanceLifecyclePolicy;
        this._namedPort.internalValue = config.namedPort;
        this._statefulDisk.internalValue = config.statefulDisk;
        this._statefulExternalIp.internalValue = config.statefulExternalIp;
        this._statefulInternalIp.internalValue = config.statefulInternalIp;
        this._timeouts.internalValue = config.timeouts;
        this._updatePolicy.internalValue = config.updatePolicy;
        this._version.internalValue = config.version;
    }
    get baseInstanceName() {
        return this.getStringAttribute('base_instance_name');
    }
    set baseInstanceName(value) {
        this._baseInstanceName = value;
    }
    // Temporarily expose input value. Use with caution.
    get baseInstanceNameInput() {
        return this._baseInstanceName;
    }
    // creation_timestamp - computed: true, optional: false, required: false
    get creationTimestamp() {
        return this.getStringAttribute('creation_timestamp');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get distributionPolicyTargetShape() {
        return this.getStringAttribute('distribution_policy_target_shape');
    }
    set distributionPolicyTargetShape(value) {
        this._distributionPolicyTargetShape = value;
    }
    resetDistributionPolicyTargetShape() {
        this._distributionPolicyTargetShape = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get distributionPolicyTargetShapeInput() {
        return this._distributionPolicyTargetShape;
    }
    get distributionPolicyZones() {
        return cdktf.Fn.tolist(this.getListAttribute('distribution_policy_zones'));
    }
    set distributionPolicyZones(value) {
        this._distributionPolicyZones = value;
    }
    resetDistributionPolicyZones() {
        this._distributionPolicyZones = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get distributionPolicyZonesInput() {
        return this._distributionPolicyZones;
    }
    // fingerprint - computed: true, optional: false, required: false
    get fingerprint() {
        return this.getStringAttribute('fingerprint');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // instance_group - computed: true, optional: false, required: false
    get instanceGroup() {
        return this.getStringAttribute('instance_group');
    }
    // instance_group_manager_id - computed: true, optional: false, required: false
    get instanceGroupManagerId() {
        return this.getNumberAttribute('instance_group_manager_id');
    }
    get listManagedInstancesResults() {
        return this.getStringAttribute('list_managed_instances_results');
    }
    set listManagedInstancesResults(value) {
        this._listManagedInstancesResults = value;
    }
    resetListManagedInstancesResults() {
        this._listManagedInstancesResults = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get listManagedInstancesResultsInput() {
        return this._listManagedInstancesResults;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get region() {
        return this.getStringAttribute('region');
    }
    set region(value) {
        this._region = value;
    }
    resetRegion() {
        this._region = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get regionInput() {
        return this._region;
    }
    // self_link - computed: true, optional: false, required: false
    get selfLink() {
        return this.getStringAttribute('self_link');
    }
    get status() {
        return this._status;
    }
    get targetPools() {
        return cdktf.Fn.tolist(this.getListAttribute('target_pools'));
    }
    set targetPools(value) {
        this._targetPools = value;
    }
    resetTargetPools() {
        this._targetPools = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetPoolsInput() {
        return this._targetPools;
    }
    get targetSize() {
        return this.getNumberAttribute('target_size');
    }
    set targetSize(value) {
        this._targetSize = value;
    }
    resetTargetSize() {
        this._targetSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetSizeInput() {
        return this._targetSize;
    }
    get waitForInstances() {
        return this.getBooleanAttribute('wait_for_instances');
    }
    set waitForInstances(value) {
        this._waitForInstances = value;
    }
    resetWaitForInstances() {
        this._waitForInstances = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get waitForInstancesInput() {
        return this._waitForInstances;
    }
    get waitForInstancesStatus() {
        return this.getStringAttribute('wait_for_instances_status');
    }
    set waitForInstancesStatus(value) {
        this._waitForInstancesStatus = value;
    }
    resetWaitForInstancesStatus() {
        this._waitForInstancesStatus = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get waitForInstancesStatusInput() {
        return this._waitForInstancesStatus;
    }
    get allInstancesConfig() {
        return this._allInstancesConfig;
    }
    putAllInstancesConfig(value) {
        this._allInstancesConfig.internalValue = value;
    }
    resetAllInstancesConfig() {
        this._allInstancesConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allInstancesConfigInput() {
        return this._allInstancesConfig.internalValue;
    }
    get autoHealingPolicies() {
        return this._autoHealingPolicies;
    }
    putAutoHealingPolicies(value) {
        this._autoHealingPolicies.internalValue = value;
    }
    resetAutoHealingPolicies() {
        this._autoHealingPolicies.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoHealingPoliciesInput() {
        return this._autoHealingPolicies.internalValue;
    }
    get instanceFlexibilityPolicy() {
        return this._instanceFlexibilityPolicy;
    }
    putInstanceFlexibilityPolicy(value) {
        this._instanceFlexibilityPolicy.internalValue = value;
    }
    resetInstanceFlexibilityPolicy() {
        this._instanceFlexibilityPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceFlexibilityPolicyInput() {
        return this._instanceFlexibilityPolicy.internalValue;
    }
    get instanceLifecyclePolicy() {
        return this._instanceLifecyclePolicy;
    }
    putInstanceLifecyclePolicy(value) {
        this._instanceLifecyclePolicy.internalValue = value;
    }
    resetInstanceLifecyclePolicy() {
        this._instanceLifecyclePolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceLifecyclePolicyInput() {
        return this._instanceLifecyclePolicy.internalValue;
    }
    get namedPort() {
        return this._namedPort;
    }
    putNamedPort(value) {
        this._namedPort.internalValue = value;
    }
    resetNamedPort() {
        this._namedPort.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get namedPortInput() {
        return this._namedPort.internalValue;
    }
    get statefulDisk() {
        return this._statefulDisk;
    }
    putStatefulDisk(value) {
        this._statefulDisk.internalValue = value;
    }
    resetStatefulDisk() {
        this._statefulDisk.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get statefulDiskInput() {
        return this._statefulDisk.internalValue;
    }
    get statefulExternalIp() {
        return this._statefulExternalIp;
    }
    putStatefulExternalIp(value) {
        this._statefulExternalIp.internalValue = value;
    }
    resetStatefulExternalIp() {
        this._statefulExternalIp.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get statefulExternalIpInput() {
        return this._statefulExternalIp.internalValue;
    }
    get statefulInternalIp() {
        return this._statefulInternalIp;
    }
    putStatefulInternalIp(value) {
        this._statefulInternalIp.internalValue = value;
    }
    resetStatefulInternalIp() {
        this._statefulInternalIp.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get statefulInternalIpInput() {
        return this._statefulInternalIp.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    get updatePolicy() {
        return this._updatePolicy;
    }
    putUpdatePolicy(value) {
        this._updatePolicy.internalValue = value;
    }
    resetUpdatePolicy() {
        this._updatePolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updatePolicyInput() {
        return this._updatePolicy.internalValue;
    }
    get version() {
        return this._version;
    }
    putVersion(value) {
        this._version.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get versionInput() {
        return this._version.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            base_instance_name: cdktf.stringToTerraform(this._baseInstanceName),
            description: cdktf.stringToTerraform(this._description),
            distribution_policy_target_shape: cdktf.stringToTerraform(this._distributionPolicyTargetShape),
            distribution_policy_zones: cdktf.listMapper(cdktf.stringToTerraform, false)(this._distributionPolicyZones),
            id: cdktf.stringToTerraform(this._id),
            list_managed_instances_results: cdktf.stringToTerraform(this._listManagedInstancesResults),
            name: cdktf.stringToTerraform(this._name),
            project: cdktf.stringToTerraform(this._project),
            region: cdktf.stringToTerraform(this._region),
            target_pools: cdktf.listMapper(cdktf.stringToTerraform, false)(this._targetPools),
            target_size: cdktf.numberToTerraform(this._targetSize),
            wait_for_instances: cdktf.booleanToTerraform(this._waitForInstances),
            wait_for_instances_status: cdktf.stringToTerraform(this._waitForInstancesStatus),
            all_instances_config: computeRegionInstanceGroupManagerAllInstancesConfigToTerraform(this._allInstancesConfig.internalValue),
            auto_healing_policies: computeRegionInstanceGroupManagerAutoHealingPoliciesToTerraform(this._autoHealingPolicies.internalValue),
            instance_flexibility_policy: computeRegionInstanceGroupManagerInstanceFlexibilityPolicyToTerraform(this._instanceFlexibilityPolicy.internalValue),
            instance_lifecycle_policy: computeRegionInstanceGroupManagerInstanceLifecyclePolicyToTerraform(this._instanceLifecyclePolicy.internalValue),
            named_port: cdktf.listMapper(computeRegionInstanceGroupManagerNamedPortToTerraform, true)(this._namedPort.internalValue),
            stateful_disk: cdktf.listMapper(computeRegionInstanceGroupManagerStatefulDiskToTerraform, true)(this._statefulDisk.internalValue),
            stateful_external_ip: cdktf.listMapper(computeRegionInstanceGroupManagerStatefulExternalIpToTerraform, true)(this._statefulExternalIp.internalValue),
            stateful_internal_ip: cdktf.listMapper(computeRegionInstanceGroupManagerStatefulInternalIpToTerraform, true)(this._statefulInternalIp.internalValue),
            timeouts: computeRegionInstanceGroupManagerTimeoutsToTerraform(this._timeouts.internalValue),
            update_policy: computeRegionInstanceGroupManagerUpdatePolicyToTerraform(this._updatePolicy.internalValue),
            version: cdktf.listMapper(computeRegionInstanceGroupManagerVersionToTerraform, true)(this._version.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            base_instance_name: {
                value: cdktf.stringToHclTerraform(this._baseInstanceName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            description: {
                value: cdktf.stringToHclTerraform(this._description),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            distribution_policy_target_shape: {
                value: cdktf.stringToHclTerraform(this._distributionPolicyTargetShape),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            distribution_policy_zones: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._distributionPolicyZones),
                isBlock: false,
                type: "set",
                storageClassType: "stringList",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            list_managed_instances_results: {
                value: cdktf.stringToHclTerraform(this._listManagedInstancesResults),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            name: {
                value: cdktf.stringToHclTerraform(this._name),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            project: {
                value: cdktf.stringToHclTerraform(this._project),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            region: {
                value: cdktf.stringToHclTerraform(this._region),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            target_pools: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._targetPools),
                isBlock: false,
                type: "set",
                storageClassType: "stringList",
            },
            target_size: {
                value: cdktf.numberToHclTerraform(this._targetSize),
                isBlock: false,
                type: "simple",
                storageClassType: "number",
            },
            wait_for_instances: {
                value: cdktf.booleanToHclTerraform(this._waitForInstances),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            wait_for_instances_status: {
                value: cdktf.stringToHclTerraform(this._waitForInstancesStatus),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            all_instances_config: {
                value: computeRegionInstanceGroupManagerAllInstancesConfigToHclTerraform(this._allInstancesConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ComputeRegionInstanceGroupManagerAllInstancesConfigList",
            },
            auto_healing_policies: {
                value: computeRegionInstanceGroupManagerAutoHealingPoliciesToHclTerraform(this._autoHealingPolicies.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ComputeRegionInstanceGroupManagerAutoHealingPoliciesList",
            },
            instance_flexibility_policy: {
                value: computeRegionInstanceGroupManagerInstanceFlexibilityPolicyToHclTerraform(this._instanceFlexibilityPolicy.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ComputeRegionInstanceGroupManagerInstanceFlexibilityPolicyList",
            },
            instance_lifecycle_policy: {
                value: computeRegionInstanceGroupManagerInstanceLifecyclePolicyToHclTerraform(this._instanceLifecyclePolicy.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ComputeRegionInstanceGroupManagerInstanceLifecyclePolicyList",
            },
            named_port: {
                value: cdktf.listMapperHcl(computeRegionInstanceGroupManagerNamedPortToHclTerraform, true)(this._namedPort.internalValue),
                isBlock: true,
                type: "set",
                storageClassType: "ComputeRegionInstanceGroupManagerNamedPortList",
            },
            stateful_disk: {
                value: cdktf.listMapperHcl(computeRegionInstanceGroupManagerStatefulDiskToHclTerraform, true)(this._statefulDisk.internalValue),
                isBlock: true,
                type: "set",
                storageClassType: "ComputeRegionInstanceGroupManagerStatefulDiskList",
            },
            stateful_external_ip: {
                value: cdktf.listMapperHcl(computeRegionInstanceGroupManagerStatefulExternalIpToHclTerraform, true)(this._statefulExternalIp.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ComputeRegionInstanceGroupManagerStatefulExternalIpList",
            },
            stateful_internal_ip: {
                value: cdktf.listMapperHcl(computeRegionInstanceGroupManagerStatefulInternalIpToHclTerraform, true)(this._statefulInternalIp.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ComputeRegionInstanceGroupManagerStatefulInternalIpList",
            },
            timeouts: {
                value: computeRegionInstanceGroupManagerTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "ComputeRegionInstanceGroupManagerTimeouts",
            },
            update_policy: {
                value: computeRegionInstanceGroupManagerUpdatePolicyToHclTerraform(this._updatePolicy.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ComputeRegionInstanceGroupManagerUpdatePolicyList",
            },
            version: {
                value: cdktf.listMapperHcl(computeRegionInstanceGroupManagerVersionToHclTerraform, true)(this._version.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ComputeRegionInstanceGroupManagerVersionList",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.ComputeRegionInstanceGroupManager = ComputeRegionInstanceGroupManager;
_5 = JSII_RTTI_SYMBOL_1;
ComputeRegionInstanceGroupManager[_5] = { fqn: "@cdktf/provider-google.computeRegionInstanceGroupManager.ComputeRegionInstanceGroupManager", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
ComputeRegionInstanceGroupManager.tfResourceType = "google_compute_region_instance_group_manager";
//# sourceMappingURL=data:application/json;base64,