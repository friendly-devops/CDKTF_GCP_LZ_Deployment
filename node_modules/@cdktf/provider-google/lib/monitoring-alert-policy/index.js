"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MonitoringAlertPolicyConditionsConditionThresholdTriggerOutputReference = exports.monitoringAlertPolicyConditionsConditionThresholdTriggerToHclTerraform = exports.monitoringAlertPolicyConditionsConditionThresholdTriggerToTerraform = exports.MonitoringAlertPolicyConditionsConditionThresholdForecastOptionsOutputReference = exports.monitoringAlertPolicyConditionsConditionThresholdForecastOptionsToHclTerraform = exports.monitoringAlertPolicyConditionsConditionThresholdForecastOptionsToTerraform = exports.MonitoringAlertPolicyConditionsConditionThresholdDenominatorAggregationsList = exports.MonitoringAlertPolicyConditionsConditionThresholdDenominatorAggregationsOutputReference = exports.monitoringAlertPolicyConditionsConditionThresholdDenominatorAggregationsToHclTerraform = exports.monitoringAlertPolicyConditionsConditionThresholdDenominatorAggregationsToTerraform = exports.MonitoringAlertPolicyConditionsConditionThresholdAggregationsList = exports.MonitoringAlertPolicyConditionsConditionThresholdAggregationsOutputReference = exports.monitoringAlertPolicyConditionsConditionThresholdAggregationsToHclTerraform = exports.monitoringAlertPolicyConditionsConditionThresholdAggregationsToTerraform = exports.MonitoringAlertPolicyConditionsConditionPrometheusQueryLanguageOutputReference = exports.monitoringAlertPolicyConditionsConditionPrometheusQueryLanguageToHclTerraform = exports.monitoringAlertPolicyConditionsConditionPrometheusQueryLanguageToTerraform = exports.MonitoringAlertPolicyConditionsConditionMonitoringQueryLanguageOutputReference = exports.monitoringAlertPolicyConditionsConditionMonitoringQueryLanguageToHclTerraform = exports.monitoringAlertPolicyConditionsConditionMonitoringQueryLanguageToTerraform = exports.MonitoringAlertPolicyConditionsConditionMonitoringQueryLanguageTriggerOutputReference = exports.monitoringAlertPolicyConditionsConditionMonitoringQueryLanguageTriggerToHclTerraform = exports.monitoringAlertPolicyConditionsConditionMonitoringQueryLanguageTriggerToTerraform = exports.MonitoringAlertPolicyConditionsConditionMatchedLogOutputReference = exports.monitoringAlertPolicyConditionsConditionMatchedLogToHclTerraform = exports.monitoringAlertPolicyConditionsConditionMatchedLogToTerraform = exports.MonitoringAlertPolicyConditionsConditionAbsentOutputReference = exports.monitoringAlertPolicyConditionsConditionAbsentToHclTerraform = exports.monitoringAlertPolicyConditionsConditionAbsentToTerraform = exports.MonitoringAlertPolicyConditionsConditionAbsentTriggerOutputReference = exports.monitoringAlertPolicyConditionsConditionAbsentTriggerToHclTerraform = exports.monitoringAlertPolicyConditionsConditionAbsentTriggerToTerraform = exports.MonitoringAlertPolicyConditionsConditionAbsentAggregationsList = exports.MonitoringAlertPolicyConditionsConditionAbsentAggregationsOutputReference = exports.monitoringAlertPolicyConditionsConditionAbsentAggregationsToHclTerraform = exports.monitoringAlertPolicyConditionsConditionAbsentAggregationsToTerraform = exports.MonitoringAlertPolicyAlertStrategyOutputReference = exports.monitoringAlertPolicyAlertStrategyToHclTerraform = exports.monitoringAlertPolicyAlertStrategyToTerraform = exports.MonitoringAlertPolicyAlertStrategyNotificationRateLimitOutputReference = exports.monitoringAlertPolicyAlertStrategyNotificationRateLimitToHclTerraform = exports.monitoringAlertPolicyAlertStrategyNotificationRateLimitToTerraform = exports.MonitoringAlertPolicyAlertStrategyNotificationChannelStrategyList = exports.MonitoringAlertPolicyAlertStrategyNotificationChannelStrategyOutputReference = exports.monitoringAlertPolicyAlertStrategyNotificationChannelStrategyToHclTerraform = exports.monitoringAlertPolicyAlertStrategyNotificationChannelStrategyToTerraform = exports.MonitoringAlertPolicyCreationRecordList = exports.MonitoringAlertPolicyCreationRecordOutputReference = exports.monitoringAlertPolicyCreationRecordToHclTerraform = exports.monitoringAlertPolicyCreationRecordToTerraform = void 0;
exports.MonitoringAlertPolicy = exports.MonitoringAlertPolicyTimeoutsOutputReference = exports.monitoringAlertPolicyTimeoutsToHclTerraform = exports.monitoringAlertPolicyTimeoutsToTerraform = exports.MonitoringAlertPolicyDocumentationOutputReference = exports.monitoringAlertPolicyDocumentationToHclTerraform = exports.monitoringAlertPolicyDocumentationToTerraform = exports.MonitoringAlertPolicyDocumentationLinksList = exports.MonitoringAlertPolicyDocumentationLinksOutputReference = exports.monitoringAlertPolicyDocumentationLinksToHclTerraform = exports.monitoringAlertPolicyDocumentationLinksToTerraform = exports.MonitoringAlertPolicyConditionsList = exports.MonitoringAlertPolicyConditionsOutputReference = exports.monitoringAlertPolicyConditionsToHclTerraform = exports.monitoringAlertPolicyConditionsToTerraform = exports.MonitoringAlertPolicyConditionsConditionThresholdOutputReference = exports.monitoringAlertPolicyConditionsConditionThresholdToHclTerraform = exports.monitoringAlertPolicyConditionsConditionThresholdToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function monitoringAlertPolicyCreationRecordToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.monitoringAlertPolicyCreationRecordToTerraform = monitoringAlertPolicyCreationRecordToTerraform;
function monitoringAlertPolicyCreationRecordToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.monitoringAlertPolicyCreationRecordToHclTerraform = monitoringAlertPolicyCreationRecordToHclTerraform;
class MonitoringAlertPolicyCreationRecordOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // mutate_time - computed: true, optional: false, required: false
    get mutateTime() {
        return this.getStringAttribute('mutate_time');
    }
    // mutated_by - computed: true, optional: false, required: false
    get mutatedBy() {
        return this.getStringAttribute('mutated_by');
    }
}
exports.MonitoringAlertPolicyCreationRecordOutputReference = MonitoringAlertPolicyCreationRecordOutputReference;
_a = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyCreationRecordOutputReference[_a] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyCreationRecordOutputReference", version: "14.13.1" };
class MonitoringAlertPolicyCreationRecordList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MonitoringAlertPolicyCreationRecordOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MonitoringAlertPolicyCreationRecordList = MonitoringAlertPolicyCreationRecordList;
_b = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyCreationRecordList[_b] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyCreationRecordList", version: "14.13.1" };
function monitoringAlertPolicyAlertStrategyNotificationChannelStrategyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        notification_channel_names: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.notificationChannelNames),
        renotify_interval: cdktf.stringToTerraform(struct.renotifyInterval),
    };
}
exports.monitoringAlertPolicyAlertStrategyNotificationChannelStrategyToTerraform = monitoringAlertPolicyAlertStrategyNotificationChannelStrategyToTerraform;
function monitoringAlertPolicyAlertStrategyNotificationChannelStrategyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        notification_channel_names: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.notificationChannelNames),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        renotify_interval: {
            value: cdktf.stringToHclTerraform(struct.renotifyInterval),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.monitoringAlertPolicyAlertStrategyNotificationChannelStrategyToHclTerraform = monitoringAlertPolicyAlertStrategyNotificationChannelStrategyToHclTerraform;
class MonitoringAlertPolicyAlertStrategyNotificationChannelStrategyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._notificationChannelNames !== undefined) {
            hasAnyValues = true;
            internalValueResult.notificationChannelNames = this._notificationChannelNames;
        }
        if (this._renotifyInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.renotifyInterval = this._renotifyInterval;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._notificationChannelNames = undefined;
            this._renotifyInterval = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._notificationChannelNames = value.notificationChannelNames;
            this._renotifyInterval = value.renotifyInterval;
        }
    }
    get notificationChannelNames() {
        return this.getListAttribute('notification_channel_names');
    }
    set notificationChannelNames(value) {
        this._notificationChannelNames = value;
    }
    resetNotificationChannelNames() {
        this._notificationChannelNames = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get notificationChannelNamesInput() {
        return this._notificationChannelNames;
    }
    get renotifyInterval() {
        return this.getStringAttribute('renotify_interval');
    }
    set renotifyInterval(value) {
        this._renotifyInterval = value;
    }
    resetRenotifyInterval() {
        this._renotifyInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get renotifyIntervalInput() {
        return this._renotifyInterval;
    }
}
exports.MonitoringAlertPolicyAlertStrategyNotificationChannelStrategyOutputReference = MonitoringAlertPolicyAlertStrategyNotificationChannelStrategyOutputReference;
_c = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyAlertStrategyNotificationChannelStrategyOutputReference[_c] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyAlertStrategyNotificationChannelStrategyOutputReference", version: "14.13.1" };
class MonitoringAlertPolicyAlertStrategyNotificationChannelStrategyList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MonitoringAlertPolicyAlertStrategyNotificationChannelStrategyOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MonitoringAlertPolicyAlertStrategyNotificationChannelStrategyList = MonitoringAlertPolicyAlertStrategyNotificationChannelStrategyList;
_d = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyAlertStrategyNotificationChannelStrategyList[_d] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyAlertStrategyNotificationChannelStrategyList", version: "14.13.1" };
function monitoringAlertPolicyAlertStrategyNotificationRateLimitToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        period: cdktf.stringToTerraform(struct.period),
    };
}
exports.monitoringAlertPolicyAlertStrategyNotificationRateLimitToTerraform = monitoringAlertPolicyAlertStrategyNotificationRateLimitToTerraform;
function monitoringAlertPolicyAlertStrategyNotificationRateLimitToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        period: {
            value: cdktf.stringToHclTerraform(struct.period),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.monitoringAlertPolicyAlertStrategyNotificationRateLimitToHclTerraform = monitoringAlertPolicyAlertStrategyNotificationRateLimitToHclTerraform;
class MonitoringAlertPolicyAlertStrategyNotificationRateLimitOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._period !== undefined) {
            hasAnyValues = true;
            internalValueResult.period = this._period;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._period = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._period = value.period;
        }
    }
    get period() {
        return this.getStringAttribute('period');
    }
    set period(value) {
        this._period = value;
    }
    resetPeriod() {
        this._period = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get periodInput() {
        return this._period;
    }
}
exports.MonitoringAlertPolicyAlertStrategyNotificationRateLimitOutputReference = MonitoringAlertPolicyAlertStrategyNotificationRateLimitOutputReference;
_e = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyAlertStrategyNotificationRateLimitOutputReference[_e] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyAlertStrategyNotificationRateLimitOutputReference", version: "14.13.1" };
function monitoringAlertPolicyAlertStrategyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        auto_close: cdktf.stringToTerraform(struct.autoClose),
        notification_prompts: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.notificationPrompts),
        notification_channel_strategy: cdktf.listMapper(monitoringAlertPolicyAlertStrategyNotificationChannelStrategyToTerraform, true)(struct.notificationChannelStrategy),
        notification_rate_limit: monitoringAlertPolicyAlertStrategyNotificationRateLimitToTerraform(struct.notificationRateLimit),
    };
}
exports.monitoringAlertPolicyAlertStrategyToTerraform = monitoringAlertPolicyAlertStrategyToTerraform;
function monitoringAlertPolicyAlertStrategyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        auto_close: {
            value: cdktf.stringToHclTerraform(struct.autoClose),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        notification_prompts: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.notificationPrompts),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        notification_channel_strategy: {
            value: cdktf.listMapperHcl(monitoringAlertPolicyAlertStrategyNotificationChannelStrategyToHclTerraform, true)(struct.notificationChannelStrategy),
            isBlock: true,
            type: "list",
            storageClassType: "MonitoringAlertPolicyAlertStrategyNotificationChannelStrategyList",
        },
        notification_rate_limit: {
            value: monitoringAlertPolicyAlertStrategyNotificationRateLimitToHclTerraform(struct.notificationRateLimit),
            isBlock: true,
            type: "list",
            storageClassType: "MonitoringAlertPolicyAlertStrategyNotificationRateLimitList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.monitoringAlertPolicyAlertStrategyToHclTerraform = monitoringAlertPolicyAlertStrategyToHclTerraform;
class MonitoringAlertPolicyAlertStrategyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // notification_channel_strategy - computed: false, optional: true, required: false
        this._notificationChannelStrategy = new MonitoringAlertPolicyAlertStrategyNotificationChannelStrategyList(this, "notification_channel_strategy", false);
        // notification_rate_limit - computed: false, optional: true, required: false
        this._notificationRateLimit = new MonitoringAlertPolicyAlertStrategyNotificationRateLimitOutputReference(this, "notification_rate_limit");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._autoClose !== undefined) {
            hasAnyValues = true;
            internalValueResult.autoClose = this._autoClose;
        }
        if (this._notificationPrompts !== undefined) {
            hasAnyValues = true;
            internalValueResult.notificationPrompts = this._notificationPrompts;
        }
        if (this._notificationChannelStrategy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.notificationChannelStrategy = this._notificationChannelStrategy?.internalValue;
        }
        if (this._notificationRateLimit?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.notificationRateLimit = this._notificationRateLimit?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._autoClose = undefined;
            this._notificationPrompts = undefined;
            this._notificationChannelStrategy.internalValue = undefined;
            this._notificationRateLimit.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._autoClose = value.autoClose;
            this._notificationPrompts = value.notificationPrompts;
            this._notificationChannelStrategy.internalValue = value.notificationChannelStrategy;
            this._notificationRateLimit.internalValue = value.notificationRateLimit;
        }
    }
    get autoClose() {
        return this.getStringAttribute('auto_close');
    }
    set autoClose(value) {
        this._autoClose = value;
    }
    resetAutoClose() {
        this._autoClose = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoCloseInput() {
        return this._autoClose;
    }
    get notificationPrompts() {
        return this.getListAttribute('notification_prompts');
    }
    set notificationPrompts(value) {
        this._notificationPrompts = value;
    }
    resetNotificationPrompts() {
        this._notificationPrompts = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get notificationPromptsInput() {
        return this._notificationPrompts;
    }
    get notificationChannelStrategy() {
        return this._notificationChannelStrategy;
    }
    putNotificationChannelStrategy(value) {
        this._notificationChannelStrategy.internalValue = value;
    }
    resetNotificationChannelStrategy() {
        this._notificationChannelStrategy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get notificationChannelStrategyInput() {
        return this._notificationChannelStrategy.internalValue;
    }
    get notificationRateLimit() {
        return this._notificationRateLimit;
    }
    putNotificationRateLimit(value) {
        this._notificationRateLimit.internalValue = value;
    }
    resetNotificationRateLimit() {
        this._notificationRateLimit.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get notificationRateLimitInput() {
        return this._notificationRateLimit.internalValue;
    }
}
exports.MonitoringAlertPolicyAlertStrategyOutputReference = MonitoringAlertPolicyAlertStrategyOutputReference;
_f = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyAlertStrategyOutputReference[_f] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyAlertStrategyOutputReference", version: "14.13.1" };
function monitoringAlertPolicyConditionsConditionAbsentAggregationsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        alignment_period: cdktf.stringToTerraform(struct.alignmentPeriod),
        cross_series_reducer: cdktf.stringToTerraform(struct.crossSeriesReducer),
        group_by_fields: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.groupByFields),
        per_series_aligner: cdktf.stringToTerraform(struct.perSeriesAligner),
    };
}
exports.monitoringAlertPolicyConditionsConditionAbsentAggregationsToTerraform = monitoringAlertPolicyConditionsConditionAbsentAggregationsToTerraform;
function monitoringAlertPolicyConditionsConditionAbsentAggregationsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        alignment_period: {
            value: cdktf.stringToHclTerraform(struct.alignmentPeriod),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cross_series_reducer: {
            value: cdktf.stringToHclTerraform(struct.crossSeriesReducer),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        group_by_fields: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.groupByFields),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        per_series_aligner: {
            value: cdktf.stringToHclTerraform(struct.perSeriesAligner),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.monitoringAlertPolicyConditionsConditionAbsentAggregationsToHclTerraform = monitoringAlertPolicyConditionsConditionAbsentAggregationsToHclTerraform;
class MonitoringAlertPolicyConditionsConditionAbsentAggregationsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._alignmentPeriod !== undefined) {
            hasAnyValues = true;
            internalValueResult.alignmentPeriod = this._alignmentPeriod;
        }
        if (this._crossSeriesReducer !== undefined) {
            hasAnyValues = true;
            internalValueResult.crossSeriesReducer = this._crossSeriesReducer;
        }
        if (this._groupByFields !== undefined) {
            hasAnyValues = true;
            internalValueResult.groupByFields = this._groupByFields;
        }
        if (this._perSeriesAligner !== undefined) {
            hasAnyValues = true;
            internalValueResult.perSeriesAligner = this._perSeriesAligner;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._alignmentPeriod = undefined;
            this._crossSeriesReducer = undefined;
            this._groupByFields = undefined;
            this._perSeriesAligner = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._alignmentPeriod = value.alignmentPeriod;
            this._crossSeriesReducer = value.crossSeriesReducer;
            this._groupByFields = value.groupByFields;
            this._perSeriesAligner = value.perSeriesAligner;
        }
    }
    get alignmentPeriod() {
        return this.getStringAttribute('alignment_period');
    }
    set alignmentPeriod(value) {
        this._alignmentPeriod = value;
    }
    resetAlignmentPeriod() {
        this._alignmentPeriod = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get alignmentPeriodInput() {
        return this._alignmentPeriod;
    }
    get crossSeriesReducer() {
        return this.getStringAttribute('cross_series_reducer');
    }
    set crossSeriesReducer(value) {
        this._crossSeriesReducer = value;
    }
    resetCrossSeriesReducer() {
        this._crossSeriesReducer = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get crossSeriesReducerInput() {
        return this._crossSeriesReducer;
    }
    get groupByFields() {
        return this.getListAttribute('group_by_fields');
    }
    set groupByFields(value) {
        this._groupByFields = value;
    }
    resetGroupByFields() {
        this._groupByFields = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get groupByFieldsInput() {
        return this._groupByFields;
    }
    get perSeriesAligner() {
        return this.getStringAttribute('per_series_aligner');
    }
    set perSeriesAligner(value) {
        this._perSeriesAligner = value;
    }
    resetPerSeriesAligner() {
        this._perSeriesAligner = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get perSeriesAlignerInput() {
        return this._perSeriesAligner;
    }
}
exports.MonitoringAlertPolicyConditionsConditionAbsentAggregationsOutputReference = MonitoringAlertPolicyConditionsConditionAbsentAggregationsOutputReference;
_g = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyConditionsConditionAbsentAggregationsOutputReference[_g] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyConditionsConditionAbsentAggregationsOutputReference", version: "14.13.1" };
class MonitoringAlertPolicyConditionsConditionAbsentAggregationsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MonitoringAlertPolicyConditionsConditionAbsentAggregationsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MonitoringAlertPolicyConditionsConditionAbsentAggregationsList = MonitoringAlertPolicyConditionsConditionAbsentAggregationsList;
_h = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyConditionsConditionAbsentAggregationsList[_h] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyConditionsConditionAbsentAggregationsList", version: "14.13.1" };
function monitoringAlertPolicyConditionsConditionAbsentTriggerToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        count: cdktf.numberToTerraform(struct.count),
        percent: cdktf.numberToTerraform(struct.percent),
    };
}
exports.monitoringAlertPolicyConditionsConditionAbsentTriggerToTerraform = monitoringAlertPolicyConditionsConditionAbsentTriggerToTerraform;
function monitoringAlertPolicyConditionsConditionAbsentTriggerToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        count: {
            value: cdktf.numberToHclTerraform(struct.count),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        percent: {
            value: cdktf.numberToHclTerraform(struct.percent),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.monitoringAlertPolicyConditionsConditionAbsentTriggerToHclTerraform = monitoringAlertPolicyConditionsConditionAbsentTriggerToHclTerraform;
class MonitoringAlertPolicyConditionsConditionAbsentTriggerOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._count !== undefined) {
            hasAnyValues = true;
            internalValueResult.count = this._count;
        }
        if (this._percent !== undefined) {
            hasAnyValues = true;
            internalValueResult.percent = this._percent;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._count = undefined;
            this._percent = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._count = value.count;
            this._percent = value.percent;
        }
    }
    get count() {
        return this.getNumberAttribute('count');
    }
    set count(value) {
        this._count = value;
    }
    resetCount() {
        this._count = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get countInput() {
        return this._count;
    }
    get percent() {
        return this.getNumberAttribute('percent');
    }
    set percent(value) {
        this._percent = value;
    }
    resetPercent() {
        this._percent = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get percentInput() {
        return this._percent;
    }
}
exports.MonitoringAlertPolicyConditionsConditionAbsentTriggerOutputReference = MonitoringAlertPolicyConditionsConditionAbsentTriggerOutputReference;
_j = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyConditionsConditionAbsentTriggerOutputReference[_j] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyConditionsConditionAbsentTriggerOutputReference", version: "14.13.1" };
function monitoringAlertPolicyConditionsConditionAbsentToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        duration: cdktf.stringToTerraform(struct.duration),
        filter: cdktf.stringToTerraform(struct.filter),
        aggregations: cdktf.listMapper(monitoringAlertPolicyConditionsConditionAbsentAggregationsToTerraform, true)(struct.aggregations),
        trigger: monitoringAlertPolicyConditionsConditionAbsentTriggerToTerraform(struct.trigger),
    };
}
exports.monitoringAlertPolicyConditionsConditionAbsentToTerraform = monitoringAlertPolicyConditionsConditionAbsentToTerraform;
function monitoringAlertPolicyConditionsConditionAbsentToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        duration: {
            value: cdktf.stringToHclTerraform(struct.duration),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        filter: {
            value: cdktf.stringToHclTerraform(struct.filter),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        aggregations: {
            value: cdktf.listMapperHcl(monitoringAlertPolicyConditionsConditionAbsentAggregationsToHclTerraform, true)(struct.aggregations),
            isBlock: true,
            type: "list",
            storageClassType: "MonitoringAlertPolicyConditionsConditionAbsentAggregationsList",
        },
        trigger: {
            value: monitoringAlertPolicyConditionsConditionAbsentTriggerToHclTerraform(struct.trigger),
            isBlock: true,
            type: "list",
            storageClassType: "MonitoringAlertPolicyConditionsConditionAbsentTriggerList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.monitoringAlertPolicyConditionsConditionAbsentToHclTerraform = monitoringAlertPolicyConditionsConditionAbsentToHclTerraform;
class MonitoringAlertPolicyConditionsConditionAbsentOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // aggregations - computed: false, optional: true, required: false
        this._aggregations = new MonitoringAlertPolicyConditionsConditionAbsentAggregationsList(this, "aggregations", false);
        // trigger - computed: false, optional: true, required: false
        this._trigger = new MonitoringAlertPolicyConditionsConditionAbsentTriggerOutputReference(this, "trigger");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._duration !== undefined) {
            hasAnyValues = true;
            internalValueResult.duration = this._duration;
        }
        if (this._filter !== undefined) {
            hasAnyValues = true;
            internalValueResult.filter = this._filter;
        }
        if (this._aggregations?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.aggregations = this._aggregations?.internalValue;
        }
        if (this._trigger?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.trigger = this._trigger?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._duration = undefined;
            this._filter = undefined;
            this._aggregations.internalValue = undefined;
            this._trigger.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._duration = value.duration;
            this._filter = value.filter;
            this._aggregations.internalValue = value.aggregations;
            this._trigger.internalValue = value.trigger;
        }
    }
    get duration() {
        return this.getStringAttribute('duration');
    }
    set duration(value) {
        this._duration = value;
    }
    // Temporarily expose input value. Use with caution.
    get durationInput() {
        return this._duration;
    }
    get filter() {
        return this.getStringAttribute('filter');
    }
    set filter(value) {
        this._filter = value;
    }
    resetFilter() {
        this._filter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get filterInput() {
        return this._filter;
    }
    get aggregations() {
        return this._aggregations;
    }
    putAggregations(value) {
        this._aggregations.internalValue = value;
    }
    resetAggregations() {
        this._aggregations.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get aggregationsInput() {
        return this._aggregations.internalValue;
    }
    get trigger() {
        return this._trigger;
    }
    putTrigger(value) {
        this._trigger.internalValue = value;
    }
    resetTrigger() {
        this._trigger.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get triggerInput() {
        return this._trigger.internalValue;
    }
}
exports.MonitoringAlertPolicyConditionsConditionAbsentOutputReference = MonitoringAlertPolicyConditionsConditionAbsentOutputReference;
_k = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyConditionsConditionAbsentOutputReference[_k] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyConditionsConditionAbsentOutputReference", version: "14.13.1" };
function monitoringAlertPolicyConditionsConditionMatchedLogToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        filter: cdktf.stringToTerraform(struct.filter),
        label_extractors: cdktf.hashMapper(cdktf.stringToTerraform)(struct.labelExtractors),
    };
}
exports.monitoringAlertPolicyConditionsConditionMatchedLogToTerraform = monitoringAlertPolicyConditionsConditionMatchedLogToTerraform;
function monitoringAlertPolicyConditionsConditionMatchedLogToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        filter: {
            value: cdktf.stringToHclTerraform(struct.filter),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        label_extractors: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.labelExtractors),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.monitoringAlertPolicyConditionsConditionMatchedLogToHclTerraform = monitoringAlertPolicyConditionsConditionMatchedLogToHclTerraform;
class MonitoringAlertPolicyConditionsConditionMatchedLogOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._filter !== undefined) {
            hasAnyValues = true;
            internalValueResult.filter = this._filter;
        }
        if (this._labelExtractors !== undefined) {
            hasAnyValues = true;
            internalValueResult.labelExtractors = this._labelExtractors;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._filter = undefined;
            this._labelExtractors = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._filter = value.filter;
            this._labelExtractors = value.labelExtractors;
        }
    }
    get filter() {
        return this.getStringAttribute('filter');
    }
    set filter(value) {
        this._filter = value;
    }
    // Temporarily expose input value. Use with caution.
    get filterInput() {
        return this._filter;
    }
    get labelExtractors() {
        return this.getStringMapAttribute('label_extractors');
    }
    set labelExtractors(value) {
        this._labelExtractors = value;
    }
    resetLabelExtractors() {
        this._labelExtractors = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelExtractorsInput() {
        return this._labelExtractors;
    }
}
exports.MonitoringAlertPolicyConditionsConditionMatchedLogOutputReference = MonitoringAlertPolicyConditionsConditionMatchedLogOutputReference;
_l = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyConditionsConditionMatchedLogOutputReference[_l] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyConditionsConditionMatchedLogOutputReference", version: "14.13.1" };
function monitoringAlertPolicyConditionsConditionMonitoringQueryLanguageTriggerToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        count: cdktf.numberToTerraform(struct.count),
        percent: cdktf.numberToTerraform(struct.percent),
    };
}
exports.monitoringAlertPolicyConditionsConditionMonitoringQueryLanguageTriggerToTerraform = monitoringAlertPolicyConditionsConditionMonitoringQueryLanguageTriggerToTerraform;
function monitoringAlertPolicyConditionsConditionMonitoringQueryLanguageTriggerToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        count: {
            value: cdktf.numberToHclTerraform(struct.count),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        percent: {
            value: cdktf.numberToHclTerraform(struct.percent),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.monitoringAlertPolicyConditionsConditionMonitoringQueryLanguageTriggerToHclTerraform = monitoringAlertPolicyConditionsConditionMonitoringQueryLanguageTriggerToHclTerraform;
class MonitoringAlertPolicyConditionsConditionMonitoringQueryLanguageTriggerOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._count !== undefined) {
            hasAnyValues = true;
            internalValueResult.count = this._count;
        }
        if (this._percent !== undefined) {
            hasAnyValues = true;
            internalValueResult.percent = this._percent;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._count = undefined;
            this._percent = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._count = value.count;
            this._percent = value.percent;
        }
    }
    get count() {
        return this.getNumberAttribute('count');
    }
    set count(value) {
        this._count = value;
    }
    resetCount() {
        this._count = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get countInput() {
        return this._count;
    }
    get percent() {
        return this.getNumberAttribute('percent');
    }
    set percent(value) {
        this._percent = value;
    }
    resetPercent() {
        this._percent = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get percentInput() {
        return this._percent;
    }
}
exports.MonitoringAlertPolicyConditionsConditionMonitoringQueryLanguageTriggerOutputReference = MonitoringAlertPolicyConditionsConditionMonitoringQueryLanguageTriggerOutputReference;
_m = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyConditionsConditionMonitoringQueryLanguageTriggerOutputReference[_m] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyConditionsConditionMonitoringQueryLanguageTriggerOutputReference", version: "14.13.1" };
function monitoringAlertPolicyConditionsConditionMonitoringQueryLanguageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        duration: cdktf.stringToTerraform(struct.duration),
        evaluation_missing_data: cdktf.stringToTerraform(struct.evaluationMissingData),
        query: cdktf.stringToTerraform(struct.query),
        trigger: monitoringAlertPolicyConditionsConditionMonitoringQueryLanguageTriggerToTerraform(struct.trigger),
    };
}
exports.monitoringAlertPolicyConditionsConditionMonitoringQueryLanguageToTerraform = monitoringAlertPolicyConditionsConditionMonitoringQueryLanguageToTerraform;
function monitoringAlertPolicyConditionsConditionMonitoringQueryLanguageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        duration: {
            value: cdktf.stringToHclTerraform(struct.duration),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        evaluation_missing_data: {
            value: cdktf.stringToHclTerraform(struct.evaluationMissingData),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        query: {
            value: cdktf.stringToHclTerraform(struct.query),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        trigger: {
            value: monitoringAlertPolicyConditionsConditionMonitoringQueryLanguageTriggerToHclTerraform(struct.trigger),
            isBlock: true,
            type: "list",
            storageClassType: "MonitoringAlertPolicyConditionsConditionMonitoringQueryLanguageTriggerList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.monitoringAlertPolicyConditionsConditionMonitoringQueryLanguageToHclTerraform = monitoringAlertPolicyConditionsConditionMonitoringQueryLanguageToHclTerraform;
class MonitoringAlertPolicyConditionsConditionMonitoringQueryLanguageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // trigger - computed: false, optional: true, required: false
        this._trigger = new MonitoringAlertPolicyConditionsConditionMonitoringQueryLanguageTriggerOutputReference(this, "trigger");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._duration !== undefined) {
            hasAnyValues = true;
            internalValueResult.duration = this._duration;
        }
        if (this._evaluationMissingData !== undefined) {
            hasAnyValues = true;
            internalValueResult.evaluationMissingData = this._evaluationMissingData;
        }
        if (this._query !== undefined) {
            hasAnyValues = true;
            internalValueResult.query = this._query;
        }
        if (this._trigger?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.trigger = this._trigger?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._duration = undefined;
            this._evaluationMissingData = undefined;
            this._query = undefined;
            this._trigger.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._duration = value.duration;
            this._evaluationMissingData = value.evaluationMissingData;
            this._query = value.query;
            this._trigger.internalValue = value.trigger;
        }
    }
    get duration() {
        return this.getStringAttribute('duration');
    }
    set duration(value) {
        this._duration = value;
    }
    // Temporarily expose input value. Use with caution.
    get durationInput() {
        return this._duration;
    }
    get evaluationMissingData() {
        return this.getStringAttribute('evaluation_missing_data');
    }
    set evaluationMissingData(value) {
        this._evaluationMissingData = value;
    }
    resetEvaluationMissingData() {
        this._evaluationMissingData = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get evaluationMissingDataInput() {
        return this._evaluationMissingData;
    }
    get query() {
        return this.getStringAttribute('query');
    }
    set query(value) {
        this._query = value;
    }
    // Temporarily expose input value. Use with caution.
    get queryInput() {
        return this._query;
    }
    get trigger() {
        return this._trigger;
    }
    putTrigger(value) {
        this._trigger.internalValue = value;
    }
    resetTrigger() {
        this._trigger.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get triggerInput() {
        return this._trigger.internalValue;
    }
}
exports.MonitoringAlertPolicyConditionsConditionMonitoringQueryLanguageOutputReference = MonitoringAlertPolicyConditionsConditionMonitoringQueryLanguageOutputReference;
_o = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyConditionsConditionMonitoringQueryLanguageOutputReference[_o] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyConditionsConditionMonitoringQueryLanguageOutputReference", version: "14.13.1" };
function monitoringAlertPolicyConditionsConditionPrometheusQueryLanguageToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        alert_rule: cdktf.stringToTerraform(struct.alertRule),
        disable_metric_validation: cdktf.booleanToTerraform(struct.disableMetricValidation),
        duration: cdktf.stringToTerraform(struct.duration),
        evaluation_interval: cdktf.stringToTerraform(struct.evaluationInterval),
        labels: cdktf.hashMapper(cdktf.stringToTerraform)(struct.labels),
        query: cdktf.stringToTerraform(struct.query),
        rule_group: cdktf.stringToTerraform(struct.ruleGroup),
    };
}
exports.monitoringAlertPolicyConditionsConditionPrometheusQueryLanguageToTerraform = monitoringAlertPolicyConditionsConditionPrometheusQueryLanguageToTerraform;
function monitoringAlertPolicyConditionsConditionPrometheusQueryLanguageToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        alert_rule: {
            value: cdktf.stringToHclTerraform(struct.alertRule),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        disable_metric_validation: {
            value: cdktf.booleanToHclTerraform(struct.disableMetricValidation),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        duration: {
            value: cdktf.stringToHclTerraform(struct.duration),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        evaluation_interval: {
            value: cdktf.stringToHclTerraform(struct.evaluationInterval),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        labels: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.labels),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        query: {
            value: cdktf.stringToHclTerraform(struct.query),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        rule_group: {
            value: cdktf.stringToHclTerraform(struct.ruleGroup),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.monitoringAlertPolicyConditionsConditionPrometheusQueryLanguageToHclTerraform = monitoringAlertPolicyConditionsConditionPrometheusQueryLanguageToHclTerraform;
class MonitoringAlertPolicyConditionsConditionPrometheusQueryLanguageOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._alertRule !== undefined) {
            hasAnyValues = true;
            internalValueResult.alertRule = this._alertRule;
        }
        if (this._disableMetricValidation !== undefined) {
            hasAnyValues = true;
            internalValueResult.disableMetricValidation = this._disableMetricValidation;
        }
        if (this._duration !== undefined) {
            hasAnyValues = true;
            internalValueResult.duration = this._duration;
        }
        if (this._evaluationInterval !== undefined) {
            hasAnyValues = true;
            internalValueResult.evaluationInterval = this._evaluationInterval;
        }
        if (this._labels !== undefined) {
            hasAnyValues = true;
            internalValueResult.labels = this._labels;
        }
        if (this._query !== undefined) {
            hasAnyValues = true;
            internalValueResult.query = this._query;
        }
        if (this._ruleGroup !== undefined) {
            hasAnyValues = true;
            internalValueResult.ruleGroup = this._ruleGroup;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._alertRule = undefined;
            this._disableMetricValidation = undefined;
            this._duration = undefined;
            this._evaluationInterval = undefined;
            this._labels = undefined;
            this._query = undefined;
            this._ruleGroup = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._alertRule = value.alertRule;
            this._disableMetricValidation = value.disableMetricValidation;
            this._duration = value.duration;
            this._evaluationInterval = value.evaluationInterval;
            this._labels = value.labels;
            this._query = value.query;
            this._ruleGroup = value.ruleGroup;
        }
    }
    get alertRule() {
        return this.getStringAttribute('alert_rule');
    }
    set alertRule(value) {
        this._alertRule = value;
    }
    resetAlertRule() {
        this._alertRule = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get alertRuleInput() {
        return this._alertRule;
    }
    get disableMetricValidation() {
        return this.getBooleanAttribute('disable_metric_validation');
    }
    set disableMetricValidation(value) {
        this._disableMetricValidation = value;
    }
    resetDisableMetricValidation() {
        this._disableMetricValidation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get disableMetricValidationInput() {
        return this._disableMetricValidation;
    }
    get duration() {
        return this.getStringAttribute('duration');
    }
    set duration(value) {
        this._duration = value;
    }
    resetDuration() {
        this._duration = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get durationInput() {
        return this._duration;
    }
    get evaluationInterval() {
        return this.getStringAttribute('evaluation_interval');
    }
    set evaluationInterval(value) {
        this._evaluationInterval = value;
    }
    resetEvaluationInterval() {
        this._evaluationInterval = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get evaluationIntervalInput() {
        return this._evaluationInterval;
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get query() {
        return this.getStringAttribute('query');
    }
    set query(value) {
        this._query = value;
    }
    // Temporarily expose input value. Use with caution.
    get queryInput() {
        return this._query;
    }
    get ruleGroup() {
        return this.getStringAttribute('rule_group');
    }
    set ruleGroup(value) {
        this._ruleGroup = value;
    }
    resetRuleGroup() {
        this._ruleGroup = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ruleGroupInput() {
        return this._ruleGroup;
    }
}
exports.MonitoringAlertPolicyConditionsConditionPrometheusQueryLanguageOutputReference = MonitoringAlertPolicyConditionsConditionPrometheusQueryLanguageOutputReference;
_p = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyConditionsConditionPrometheusQueryLanguageOutputReference[_p] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyConditionsConditionPrometheusQueryLanguageOutputReference", version: "14.13.1" };
function monitoringAlertPolicyConditionsConditionThresholdAggregationsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        alignment_period: cdktf.stringToTerraform(struct.alignmentPeriod),
        cross_series_reducer: cdktf.stringToTerraform(struct.crossSeriesReducer),
        group_by_fields: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.groupByFields),
        per_series_aligner: cdktf.stringToTerraform(struct.perSeriesAligner),
    };
}
exports.monitoringAlertPolicyConditionsConditionThresholdAggregationsToTerraform = monitoringAlertPolicyConditionsConditionThresholdAggregationsToTerraform;
function monitoringAlertPolicyConditionsConditionThresholdAggregationsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        alignment_period: {
            value: cdktf.stringToHclTerraform(struct.alignmentPeriod),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cross_series_reducer: {
            value: cdktf.stringToHclTerraform(struct.crossSeriesReducer),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        group_by_fields: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.groupByFields),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        per_series_aligner: {
            value: cdktf.stringToHclTerraform(struct.perSeriesAligner),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.monitoringAlertPolicyConditionsConditionThresholdAggregationsToHclTerraform = monitoringAlertPolicyConditionsConditionThresholdAggregationsToHclTerraform;
class MonitoringAlertPolicyConditionsConditionThresholdAggregationsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._alignmentPeriod !== undefined) {
            hasAnyValues = true;
            internalValueResult.alignmentPeriod = this._alignmentPeriod;
        }
        if (this._crossSeriesReducer !== undefined) {
            hasAnyValues = true;
            internalValueResult.crossSeriesReducer = this._crossSeriesReducer;
        }
        if (this._groupByFields !== undefined) {
            hasAnyValues = true;
            internalValueResult.groupByFields = this._groupByFields;
        }
        if (this._perSeriesAligner !== undefined) {
            hasAnyValues = true;
            internalValueResult.perSeriesAligner = this._perSeriesAligner;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._alignmentPeriod = undefined;
            this._crossSeriesReducer = undefined;
            this._groupByFields = undefined;
            this._perSeriesAligner = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._alignmentPeriod = value.alignmentPeriod;
            this._crossSeriesReducer = value.crossSeriesReducer;
            this._groupByFields = value.groupByFields;
            this._perSeriesAligner = value.perSeriesAligner;
        }
    }
    get alignmentPeriod() {
        return this.getStringAttribute('alignment_period');
    }
    set alignmentPeriod(value) {
        this._alignmentPeriod = value;
    }
    resetAlignmentPeriod() {
        this._alignmentPeriod = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get alignmentPeriodInput() {
        return this._alignmentPeriod;
    }
    get crossSeriesReducer() {
        return this.getStringAttribute('cross_series_reducer');
    }
    set crossSeriesReducer(value) {
        this._crossSeriesReducer = value;
    }
    resetCrossSeriesReducer() {
        this._crossSeriesReducer = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get crossSeriesReducerInput() {
        return this._crossSeriesReducer;
    }
    get groupByFields() {
        return this.getListAttribute('group_by_fields');
    }
    set groupByFields(value) {
        this._groupByFields = value;
    }
    resetGroupByFields() {
        this._groupByFields = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get groupByFieldsInput() {
        return this._groupByFields;
    }
    get perSeriesAligner() {
        return this.getStringAttribute('per_series_aligner');
    }
    set perSeriesAligner(value) {
        this._perSeriesAligner = value;
    }
    resetPerSeriesAligner() {
        this._perSeriesAligner = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get perSeriesAlignerInput() {
        return this._perSeriesAligner;
    }
}
exports.MonitoringAlertPolicyConditionsConditionThresholdAggregationsOutputReference = MonitoringAlertPolicyConditionsConditionThresholdAggregationsOutputReference;
_q = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyConditionsConditionThresholdAggregationsOutputReference[_q] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyConditionsConditionThresholdAggregationsOutputReference", version: "14.13.1" };
class MonitoringAlertPolicyConditionsConditionThresholdAggregationsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MonitoringAlertPolicyConditionsConditionThresholdAggregationsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MonitoringAlertPolicyConditionsConditionThresholdAggregationsList = MonitoringAlertPolicyConditionsConditionThresholdAggregationsList;
_r = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyConditionsConditionThresholdAggregationsList[_r] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyConditionsConditionThresholdAggregationsList", version: "14.13.1" };
function monitoringAlertPolicyConditionsConditionThresholdDenominatorAggregationsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        alignment_period: cdktf.stringToTerraform(struct.alignmentPeriod),
        cross_series_reducer: cdktf.stringToTerraform(struct.crossSeriesReducer),
        group_by_fields: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.groupByFields),
        per_series_aligner: cdktf.stringToTerraform(struct.perSeriesAligner),
    };
}
exports.monitoringAlertPolicyConditionsConditionThresholdDenominatorAggregationsToTerraform = monitoringAlertPolicyConditionsConditionThresholdDenominatorAggregationsToTerraform;
function monitoringAlertPolicyConditionsConditionThresholdDenominatorAggregationsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        alignment_period: {
            value: cdktf.stringToHclTerraform(struct.alignmentPeriod),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cross_series_reducer: {
            value: cdktf.stringToHclTerraform(struct.crossSeriesReducer),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        group_by_fields: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.groupByFields),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        per_series_aligner: {
            value: cdktf.stringToHclTerraform(struct.perSeriesAligner),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.monitoringAlertPolicyConditionsConditionThresholdDenominatorAggregationsToHclTerraform = monitoringAlertPolicyConditionsConditionThresholdDenominatorAggregationsToHclTerraform;
class MonitoringAlertPolicyConditionsConditionThresholdDenominatorAggregationsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._alignmentPeriod !== undefined) {
            hasAnyValues = true;
            internalValueResult.alignmentPeriod = this._alignmentPeriod;
        }
        if (this._crossSeriesReducer !== undefined) {
            hasAnyValues = true;
            internalValueResult.crossSeriesReducer = this._crossSeriesReducer;
        }
        if (this._groupByFields !== undefined) {
            hasAnyValues = true;
            internalValueResult.groupByFields = this._groupByFields;
        }
        if (this._perSeriesAligner !== undefined) {
            hasAnyValues = true;
            internalValueResult.perSeriesAligner = this._perSeriesAligner;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._alignmentPeriod = undefined;
            this._crossSeriesReducer = undefined;
            this._groupByFields = undefined;
            this._perSeriesAligner = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._alignmentPeriod = value.alignmentPeriod;
            this._crossSeriesReducer = value.crossSeriesReducer;
            this._groupByFields = value.groupByFields;
            this._perSeriesAligner = value.perSeriesAligner;
        }
    }
    get alignmentPeriod() {
        return this.getStringAttribute('alignment_period');
    }
    set alignmentPeriod(value) {
        this._alignmentPeriod = value;
    }
    resetAlignmentPeriod() {
        this._alignmentPeriod = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get alignmentPeriodInput() {
        return this._alignmentPeriod;
    }
    get crossSeriesReducer() {
        return this.getStringAttribute('cross_series_reducer');
    }
    set crossSeriesReducer(value) {
        this._crossSeriesReducer = value;
    }
    resetCrossSeriesReducer() {
        this._crossSeriesReducer = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get crossSeriesReducerInput() {
        return this._crossSeriesReducer;
    }
    get groupByFields() {
        return this.getListAttribute('group_by_fields');
    }
    set groupByFields(value) {
        this._groupByFields = value;
    }
    resetGroupByFields() {
        this._groupByFields = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get groupByFieldsInput() {
        return this._groupByFields;
    }
    get perSeriesAligner() {
        return this.getStringAttribute('per_series_aligner');
    }
    set perSeriesAligner(value) {
        this._perSeriesAligner = value;
    }
    resetPerSeriesAligner() {
        this._perSeriesAligner = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get perSeriesAlignerInput() {
        return this._perSeriesAligner;
    }
}
exports.MonitoringAlertPolicyConditionsConditionThresholdDenominatorAggregationsOutputReference = MonitoringAlertPolicyConditionsConditionThresholdDenominatorAggregationsOutputReference;
_s = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyConditionsConditionThresholdDenominatorAggregationsOutputReference[_s] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyConditionsConditionThresholdDenominatorAggregationsOutputReference", version: "14.13.1" };
class MonitoringAlertPolicyConditionsConditionThresholdDenominatorAggregationsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MonitoringAlertPolicyConditionsConditionThresholdDenominatorAggregationsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MonitoringAlertPolicyConditionsConditionThresholdDenominatorAggregationsList = MonitoringAlertPolicyConditionsConditionThresholdDenominatorAggregationsList;
_t = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyConditionsConditionThresholdDenominatorAggregationsList[_t] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyConditionsConditionThresholdDenominatorAggregationsList", version: "14.13.1" };
function monitoringAlertPolicyConditionsConditionThresholdForecastOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        forecast_horizon: cdktf.stringToTerraform(struct.forecastHorizon),
    };
}
exports.monitoringAlertPolicyConditionsConditionThresholdForecastOptionsToTerraform = monitoringAlertPolicyConditionsConditionThresholdForecastOptionsToTerraform;
function monitoringAlertPolicyConditionsConditionThresholdForecastOptionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        forecast_horizon: {
            value: cdktf.stringToHclTerraform(struct.forecastHorizon),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.monitoringAlertPolicyConditionsConditionThresholdForecastOptionsToHclTerraform = monitoringAlertPolicyConditionsConditionThresholdForecastOptionsToHclTerraform;
class MonitoringAlertPolicyConditionsConditionThresholdForecastOptionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._forecastHorizon !== undefined) {
            hasAnyValues = true;
            internalValueResult.forecastHorizon = this._forecastHorizon;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._forecastHorizon = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._forecastHorizon = value.forecastHorizon;
        }
    }
    get forecastHorizon() {
        return this.getStringAttribute('forecast_horizon');
    }
    set forecastHorizon(value) {
        this._forecastHorizon = value;
    }
    // Temporarily expose input value. Use with caution.
    get forecastHorizonInput() {
        return this._forecastHorizon;
    }
}
exports.MonitoringAlertPolicyConditionsConditionThresholdForecastOptionsOutputReference = MonitoringAlertPolicyConditionsConditionThresholdForecastOptionsOutputReference;
_u = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyConditionsConditionThresholdForecastOptionsOutputReference[_u] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyConditionsConditionThresholdForecastOptionsOutputReference", version: "14.13.1" };
function monitoringAlertPolicyConditionsConditionThresholdTriggerToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        count: cdktf.numberToTerraform(struct.count),
        percent: cdktf.numberToTerraform(struct.percent),
    };
}
exports.monitoringAlertPolicyConditionsConditionThresholdTriggerToTerraform = monitoringAlertPolicyConditionsConditionThresholdTriggerToTerraform;
function monitoringAlertPolicyConditionsConditionThresholdTriggerToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        count: {
            value: cdktf.numberToHclTerraform(struct.count),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        percent: {
            value: cdktf.numberToHclTerraform(struct.percent),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.monitoringAlertPolicyConditionsConditionThresholdTriggerToHclTerraform = monitoringAlertPolicyConditionsConditionThresholdTriggerToHclTerraform;
class MonitoringAlertPolicyConditionsConditionThresholdTriggerOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._count !== undefined) {
            hasAnyValues = true;
            internalValueResult.count = this._count;
        }
        if (this._percent !== undefined) {
            hasAnyValues = true;
            internalValueResult.percent = this._percent;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._count = undefined;
            this._percent = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._count = value.count;
            this._percent = value.percent;
        }
    }
    get count() {
        return this.getNumberAttribute('count');
    }
    set count(value) {
        this._count = value;
    }
    resetCount() {
        this._count = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get countInput() {
        return this._count;
    }
    get percent() {
        return this.getNumberAttribute('percent');
    }
    set percent(value) {
        this._percent = value;
    }
    resetPercent() {
        this._percent = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get percentInput() {
        return this._percent;
    }
}
exports.MonitoringAlertPolicyConditionsConditionThresholdTriggerOutputReference = MonitoringAlertPolicyConditionsConditionThresholdTriggerOutputReference;
_v = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyConditionsConditionThresholdTriggerOutputReference[_v] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyConditionsConditionThresholdTriggerOutputReference", version: "14.13.1" };
function monitoringAlertPolicyConditionsConditionThresholdToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        comparison: cdktf.stringToTerraform(struct.comparison),
        denominator_filter: cdktf.stringToTerraform(struct.denominatorFilter),
        duration: cdktf.stringToTerraform(struct.duration),
        evaluation_missing_data: cdktf.stringToTerraform(struct.evaluationMissingData),
        filter: cdktf.stringToTerraform(struct.filter),
        threshold_value: cdktf.numberToTerraform(struct.thresholdValue),
        aggregations: cdktf.listMapper(monitoringAlertPolicyConditionsConditionThresholdAggregationsToTerraform, true)(struct.aggregations),
        denominator_aggregations: cdktf.listMapper(monitoringAlertPolicyConditionsConditionThresholdDenominatorAggregationsToTerraform, true)(struct.denominatorAggregations),
        forecast_options: monitoringAlertPolicyConditionsConditionThresholdForecastOptionsToTerraform(struct.forecastOptions),
        trigger: monitoringAlertPolicyConditionsConditionThresholdTriggerToTerraform(struct.trigger),
    };
}
exports.monitoringAlertPolicyConditionsConditionThresholdToTerraform = monitoringAlertPolicyConditionsConditionThresholdToTerraform;
function monitoringAlertPolicyConditionsConditionThresholdToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        comparison: {
            value: cdktf.stringToHclTerraform(struct.comparison),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        denominator_filter: {
            value: cdktf.stringToHclTerraform(struct.denominatorFilter),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        duration: {
            value: cdktf.stringToHclTerraform(struct.duration),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        evaluation_missing_data: {
            value: cdktf.stringToHclTerraform(struct.evaluationMissingData),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        filter: {
            value: cdktf.stringToHclTerraform(struct.filter),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        threshold_value: {
            value: cdktf.numberToHclTerraform(struct.thresholdValue),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        aggregations: {
            value: cdktf.listMapperHcl(monitoringAlertPolicyConditionsConditionThresholdAggregationsToHclTerraform, true)(struct.aggregations),
            isBlock: true,
            type: "list",
            storageClassType: "MonitoringAlertPolicyConditionsConditionThresholdAggregationsList",
        },
        denominator_aggregations: {
            value: cdktf.listMapperHcl(monitoringAlertPolicyConditionsConditionThresholdDenominatorAggregationsToHclTerraform, true)(struct.denominatorAggregations),
            isBlock: true,
            type: "list",
            storageClassType: "MonitoringAlertPolicyConditionsConditionThresholdDenominatorAggregationsList",
        },
        forecast_options: {
            value: monitoringAlertPolicyConditionsConditionThresholdForecastOptionsToHclTerraform(struct.forecastOptions),
            isBlock: true,
            type: "list",
            storageClassType: "MonitoringAlertPolicyConditionsConditionThresholdForecastOptionsList",
        },
        trigger: {
            value: monitoringAlertPolicyConditionsConditionThresholdTriggerToHclTerraform(struct.trigger),
            isBlock: true,
            type: "list",
            storageClassType: "MonitoringAlertPolicyConditionsConditionThresholdTriggerList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.monitoringAlertPolicyConditionsConditionThresholdToHclTerraform = monitoringAlertPolicyConditionsConditionThresholdToHclTerraform;
class MonitoringAlertPolicyConditionsConditionThresholdOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // aggregations - computed: false, optional: true, required: false
        this._aggregations = new MonitoringAlertPolicyConditionsConditionThresholdAggregationsList(this, "aggregations", false);
        // denominator_aggregations - computed: false, optional: true, required: false
        this._denominatorAggregations = new MonitoringAlertPolicyConditionsConditionThresholdDenominatorAggregationsList(this, "denominator_aggregations", false);
        // forecast_options - computed: false, optional: true, required: false
        this._forecastOptions = new MonitoringAlertPolicyConditionsConditionThresholdForecastOptionsOutputReference(this, "forecast_options");
        // trigger - computed: false, optional: true, required: false
        this._trigger = new MonitoringAlertPolicyConditionsConditionThresholdTriggerOutputReference(this, "trigger");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._comparison !== undefined) {
            hasAnyValues = true;
            internalValueResult.comparison = this._comparison;
        }
        if (this._denominatorFilter !== undefined) {
            hasAnyValues = true;
            internalValueResult.denominatorFilter = this._denominatorFilter;
        }
        if (this._duration !== undefined) {
            hasAnyValues = true;
            internalValueResult.duration = this._duration;
        }
        if (this._evaluationMissingData !== undefined) {
            hasAnyValues = true;
            internalValueResult.evaluationMissingData = this._evaluationMissingData;
        }
        if (this._filter !== undefined) {
            hasAnyValues = true;
            internalValueResult.filter = this._filter;
        }
        if (this._thresholdValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.thresholdValue = this._thresholdValue;
        }
        if (this._aggregations?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.aggregations = this._aggregations?.internalValue;
        }
        if (this._denominatorAggregations?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.denominatorAggregations = this._denominatorAggregations?.internalValue;
        }
        if (this._forecastOptions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.forecastOptions = this._forecastOptions?.internalValue;
        }
        if (this._trigger?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.trigger = this._trigger?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._comparison = undefined;
            this._denominatorFilter = undefined;
            this._duration = undefined;
            this._evaluationMissingData = undefined;
            this._filter = undefined;
            this._thresholdValue = undefined;
            this._aggregations.internalValue = undefined;
            this._denominatorAggregations.internalValue = undefined;
            this._forecastOptions.internalValue = undefined;
            this._trigger.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._comparison = value.comparison;
            this._denominatorFilter = value.denominatorFilter;
            this._duration = value.duration;
            this._evaluationMissingData = value.evaluationMissingData;
            this._filter = value.filter;
            this._thresholdValue = value.thresholdValue;
            this._aggregations.internalValue = value.aggregations;
            this._denominatorAggregations.internalValue = value.denominatorAggregations;
            this._forecastOptions.internalValue = value.forecastOptions;
            this._trigger.internalValue = value.trigger;
        }
    }
    get comparison() {
        return this.getStringAttribute('comparison');
    }
    set comparison(value) {
        this._comparison = value;
    }
    // Temporarily expose input value. Use with caution.
    get comparisonInput() {
        return this._comparison;
    }
    get denominatorFilter() {
        return this.getStringAttribute('denominator_filter');
    }
    set denominatorFilter(value) {
        this._denominatorFilter = value;
    }
    resetDenominatorFilter() {
        this._denominatorFilter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get denominatorFilterInput() {
        return this._denominatorFilter;
    }
    get duration() {
        return this.getStringAttribute('duration');
    }
    set duration(value) {
        this._duration = value;
    }
    // Temporarily expose input value. Use with caution.
    get durationInput() {
        return this._duration;
    }
    get evaluationMissingData() {
        return this.getStringAttribute('evaluation_missing_data');
    }
    set evaluationMissingData(value) {
        this._evaluationMissingData = value;
    }
    resetEvaluationMissingData() {
        this._evaluationMissingData = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get evaluationMissingDataInput() {
        return this._evaluationMissingData;
    }
    get filter() {
        return this.getStringAttribute('filter');
    }
    set filter(value) {
        this._filter = value;
    }
    resetFilter() {
        this._filter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get filterInput() {
        return this._filter;
    }
    get thresholdValue() {
        return this.getNumberAttribute('threshold_value');
    }
    set thresholdValue(value) {
        this._thresholdValue = value;
    }
    resetThresholdValue() {
        this._thresholdValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get thresholdValueInput() {
        return this._thresholdValue;
    }
    get aggregations() {
        return this._aggregations;
    }
    putAggregations(value) {
        this._aggregations.internalValue = value;
    }
    resetAggregations() {
        this._aggregations.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get aggregationsInput() {
        return this._aggregations.internalValue;
    }
    get denominatorAggregations() {
        return this._denominatorAggregations;
    }
    putDenominatorAggregations(value) {
        this._denominatorAggregations.internalValue = value;
    }
    resetDenominatorAggregations() {
        this._denominatorAggregations.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get denominatorAggregationsInput() {
        return this._denominatorAggregations.internalValue;
    }
    get forecastOptions() {
        return this._forecastOptions;
    }
    putForecastOptions(value) {
        this._forecastOptions.internalValue = value;
    }
    resetForecastOptions() {
        this._forecastOptions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get forecastOptionsInput() {
        return this._forecastOptions.internalValue;
    }
    get trigger() {
        return this._trigger;
    }
    putTrigger(value) {
        this._trigger.internalValue = value;
    }
    resetTrigger() {
        this._trigger.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get triggerInput() {
        return this._trigger.internalValue;
    }
}
exports.MonitoringAlertPolicyConditionsConditionThresholdOutputReference = MonitoringAlertPolicyConditionsConditionThresholdOutputReference;
_w = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyConditionsConditionThresholdOutputReference[_w] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyConditionsConditionThresholdOutputReference", version: "14.13.1" };
function monitoringAlertPolicyConditionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        display_name: cdktf.stringToTerraform(struct.displayName),
        condition_absent: monitoringAlertPolicyConditionsConditionAbsentToTerraform(struct.conditionAbsent),
        condition_matched_log: monitoringAlertPolicyConditionsConditionMatchedLogToTerraform(struct.conditionMatchedLog),
        condition_monitoring_query_language: monitoringAlertPolicyConditionsConditionMonitoringQueryLanguageToTerraform(struct.conditionMonitoringQueryLanguage),
        condition_prometheus_query_language: monitoringAlertPolicyConditionsConditionPrometheusQueryLanguageToTerraform(struct.conditionPrometheusQueryLanguage),
        condition_threshold: monitoringAlertPolicyConditionsConditionThresholdToTerraform(struct.conditionThreshold),
    };
}
exports.monitoringAlertPolicyConditionsToTerraform = monitoringAlertPolicyConditionsToTerraform;
function monitoringAlertPolicyConditionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        display_name: {
            value: cdktf.stringToHclTerraform(struct.displayName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        condition_absent: {
            value: monitoringAlertPolicyConditionsConditionAbsentToHclTerraform(struct.conditionAbsent),
            isBlock: true,
            type: "list",
            storageClassType: "MonitoringAlertPolicyConditionsConditionAbsentList",
        },
        condition_matched_log: {
            value: monitoringAlertPolicyConditionsConditionMatchedLogToHclTerraform(struct.conditionMatchedLog),
            isBlock: true,
            type: "list",
            storageClassType: "MonitoringAlertPolicyConditionsConditionMatchedLogList",
        },
        condition_monitoring_query_language: {
            value: monitoringAlertPolicyConditionsConditionMonitoringQueryLanguageToHclTerraform(struct.conditionMonitoringQueryLanguage),
            isBlock: true,
            type: "list",
            storageClassType: "MonitoringAlertPolicyConditionsConditionMonitoringQueryLanguageList",
        },
        condition_prometheus_query_language: {
            value: monitoringAlertPolicyConditionsConditionPrometheusQueryLanguageToHclTerraform(struct.conditionPrometheusQueryLanguage),
            isBlock: true,
            type: "list",
            storageClassType: "MonitoringAlertPolicyConditionsConditionPrometheusQueryLanguageList",
        },
        condition_threshold: {
            value: monitoringAlertPolicyConditionsConditionThresholdToHclTerraform(struct.conditionThreshold),
            isBlock: true,
            type: "list",
            storageClassType: "MonitoringAlertPolicyConditionsConditionThresholdList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.monitoringAlertPolicyConditionsToHclTerraform = monitoringAlertPolicyConditionsToHclTerraform;
class MonitoringAlertPolicyConditionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // condition_absent - computed: false, optional: true, required: false
        this._conditionAbsent = new MonitoringAlertPolicyConditionsConditionAbsentOutputReference(this, "condition_absent");
        // condition_matched_log - computed: false, optional: true, required: false
        this._conditionMatchedLog = new MonitoringAlertPolicyConditionsConditionMatchedLogOutputReference(this, "condition_matched_log");
        // condition_monitoring_query_language - computed: false, optional: true, required: false
        this._conditionMonitoringQueryLanguage = new MonitoringAlertPolicyConditionsConditionMonitoringQueryLanguageOutputReference(this, "condition_monitoring_query_language");
        // condition_prometheus_query_language - computed: false, optional: true, required: false
        this._conditionPrometheusQueryLanguage = new MonitoringAlertPolicyConditionsConditionPrometheusQueryLanguageOutputReference(this, "condition_prometheus_query_language");
        // condition_threshold - computed: false, optional: true, required: false
        this._conditionThreshold = new MonitoringAlertPolicyConditionsConditionThresholdOutputReference(this, "condition_threshold");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._displayName !== undefined) {
            hasAnyValues = true;
            internalValueResult.displayName = this._displayName;
        }
        if (this._conditionAbsent?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.conditionAbsent = this._conditionAbsent?.internalValue;
        }
        if (this._conditionMatchedLog?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.conditionMatchedLog = this._conditionMatchedLog?.internalValue;
        }
        if (this._conditionMonitoringQueryLanguage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.conditionMonitoringQueryLanguage = this._conditionMonitoringQueryLanguage?.internalValue;
        }
        if (this._conditionPrometheusQueryLanguage?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.conditionPrometheusQueryLanguage = this._conditionPrometheusQueryLanguage?.internalValue;
        }
        if (this._conditionThreshold?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.conditionThreshold = this._conditionThreshold?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._displayName = undefined;
            this._conditionAbsent.internalValue = undefined;
            this._conditionMatchedLog.internalValue = undefined;
            this._conditionMonitoringQueryLanguage.internalValue = undefined;
            this._conditionPrometheusQueryLanguage.internalValue = undefined;
            this._conditionThreshold.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._displayName = value.displayName;
            this._conditionAbsent.internalValue = value.conditionAbsent;
            this._conditionMatchedLog.internalValue = value.conditionMatchedLog;
            this._conditionMonitoringQueryLanguage.internalValue = value.conditionMonitoringQueryLanguage;
            this._conditionPrometheusQueryLanguage.internalValue = value.conditionPrometheusQueryLanguage;
            this._conditionThreshold.internalValue = value.conditionThreshold;
        }
    }
    get displayName() {
        return this.getStringAttribute('display_name');
    }
    set displayName(value) {
        this._displayName = value;
    }
    // Temporarily expose input value. Use with caution.
    get displayNameInput() {
        return this._displayName;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get conditionAbsent() {
        return this._conditionAbsent;
    }
    putConditionAbsent(value) {
        this._conditionAbsent.internalValue = value;
    }
    resetConditionAbsent() {
        this._conditionAbsent.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get conditionAbsentInput() {
        return this._conditionAbsent.internalValue;
    }
    get conditionMatchedLog() {
        return this._conditionMatchedLog;
    }
    putConditionMatchedLog(value) {
        this._conditionMatchedLog.internalValue = value;
    }
    resetConditionMatchedLog() {
        this._conditionMatchedLog.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get conditionMatchedLogInput() {
        return this._conditionMatchedLog.internalValue;
    }
    get conditionMonitoringQueryLanguage() {
        return this._conditionMonitoringQueryLanguage;
    }
    putConditionMonitoringQueryLanguage(value) {
        this._conditionMonitoringQueryLanguage.internalValue = value;
    }
    resetConditionMonitoringQueryLanguage() {
        this._conditionMonitoringQueryLanguage.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get conditionMonitoringQueryLanguageInput() {
        return this._conditionMonitoringQueryLanguage.internalValue;
    }
    get conditionPrometheusQueryLanguage() {
        return this._conditionPrometheusQueryLanguage;
    }
    putConditionPrometheusQueryLanguage(value) {
        this._conditionPrometheusQueryLanguage.internalValue = value;
    }
    resetConditionPrometheusQueryLanguage() {
        this._conditionPrometheusQueryLanguage.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get conditionPrometheusQueryLanguageInput() {
        return this._conditionPrometheusQueryLanguage.internalValue;
    }
    get conditionThreshold() {
        return this._conditionThreshold;
    }
    putConditionThreshold(value) {
        this._conditionThreshold.internalValue = value;
    }
    resetConditionThreshold() {
        this._conditionThreshold.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get conditionThresholdInput() {
        return this._conditionThreshold.internalValue;
    }
}
exports.MonitoringAlertPolicyConditionsOutputReference = MonitoringAlertPolicyConditionsOutputReference;
_x = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyConditionsOutputReference[_x] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyConditionsOutputReference", version: "14.13.1" };
class MonitoringAlertPolicyConditionsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MonitoringAlertPolicyConditionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MonitoringAlertPolicyConditionsList = MonitoringAlertPolicyConditionsList;
_y = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyConditionsList[_y] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyConditionsList", version: "14.13.1" };
function monitoringAlertPolicyDocumentationLinksToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        display_name: cdktf.stringToTerraform(struct.displayName),
        url: cdktf.stringToTerraform(struct.url),
    };
}
exports.monitoringAlertPolicyDocumentationLinksToTerraform = monitoringAlertPolicyDocumentationLinksToTerraform;
function monitoringAlertPolicyDocumentationLinksToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        display_name: {
            value: cdktf.stringToHclTerraform(struct.displayName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        url: {
            value: cdktf.stringToHclTerraform(struct.url),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.monitoringAlertPolicyDocumentationLinksToHclTerraform = monitoringAlertPolicyDocumentationLinksToHclTerraform;
class MonitoringAlertPolicyDocumentationLinksOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._displayName !== undefined) {
            hasAnyValues = true;
            internalValueResult.displayName = this._displayName;
        }
        if (this._url !== undefined) {
            hasAnyValues = true;
            internalValueResult.url = this._url;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._displayName = undefined;
            this._url = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._displayName = value.displayName;
            this._url = value.url;
        }
    }
    get displayName() {
        return this.getStringAttribute('display_name');
    }
    set displayName(value) {
        this._displayName = value;
    }
    resetDisplayName() {
        this._displayName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get displayNameInput() {
        return this._displayName;
    }
    get url() {
        return this.getStringAttribute('url');
    }
    set url(value) {
        this._url = value;
    }
    resetUrl() {
        this._url = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get urlInput() {
        return this._url;
    }
}
exports.MonitoringAlertPolicyDocumentationLinksOutputReference = MonitoringAlertPolicyDocumentationLinksOutputReference;
_z = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyDocumentationLinksOutputReference[_z] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyDocumentationLinksOutputReference", version: "14.13.1" };
class MonitoringAlertPolicyDocumentationLinksList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new MonitoringAlertPolicyDocumentationLinksOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.MonitoringAlertPolicyDocumentationLinksList = MonitoringAlertPolicyDocumentationLinksList;
_0 = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyDocumentationLinksList[_0] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyDocumentationLinksList", version: "14.13.1" };
function monitoringAlertPolicyDocumentationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        content: cdktf.stringToTerraform(struct.content),
        mime_type: cdktf.stringToTerraform(struct.mimeType),
        subject: cdktf.stringToTerraform(struct.subject),
        links: cdktf.listMapper(monitoringAlertPolicyDocumentationLinksToTerraform, true)(struct.links),
    };
}
exports.monitoringAlertPolicyDocumentationToTerraform = monitoringAlertPolicyDocumentationToTerraform;
function monitoringAlertPolicyDocumentationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        content: {
            value: cdktf.stringToHclTerraform(struct.content),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        mime_type: {
            value: cdktf.stringToHclTerraform(struct.mimeType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        subject: {
            value: cdktf.stringToHclTerraform(struct.subject),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        links: {
            value: cdktf.listMapperHcl(monitoringAlertPolicyDocumentationLinksToHclTerraform, true)(struct.links),
            isBlock: true,
            type: "list",
            storageClassType: "MonitoringAlertPolicyDocumentationLinksList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.monitoringAlertPolicyDocumentationToHclTerraform = monitoringAlertPolicyDocumentationToHclTerraform;
class MonitoringAlertPolicyDocumentationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // links - computed: false, optional: true, required: false
        this._links = new MonitoringAlertPolicyDocumentationLinksList(this, "links", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._content !== undefined) {
            hasAnyValues = true;
            internalValueResult.content = this._content;
        }
        if (this._mimeType !== undefined) {
            hasAnyValues = true;
            internalValueResult.mimeType = this._mimeType;
        }
        if (this._subject !== undefined) {
            hasAnyValues = true;
            internalValueResult.subject = this._subject;
        }
        if (this._links?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.links = this._links?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._content = undefined;
            this._mimeType = undefined;
            this._subject = undefined;
            this._links.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._content = value.content;
            this._mimeType = value.mimeType;
            this._subject = value.subject;
            this._links.internalValue = value.links;
        }
    }
    get content() {
        return this.getStringAttribute('content');
    }
    set content(value) {
        this._content = value;
    }
    resetContent() {
        this._content = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get contentInput() {
        return this._content;
    }
    get mimeType() {
        return this.getStringAttribute('mime_type');
    }
    set mimeType(value) {
        this._mimeType = value;
    }
    resetMimeType() {
        this._mimeType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mimeTypeInput() {
        return this._mimeType;
    }
    get subject() {
        return this.getStringAttribute('subject');
    }
    set subject(value) {
        this._subject = value;
    }
    resetSubject() {
        this._subject = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subjectInput() {
        return this._subject;
    }
    get links() {
        return this._links;
    }
    putLinks(value) {
        this._links.internalValue = value;
    }
    resetLinks() {
        this._links.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get linksInput() {
        return this._links.internalValue;
    }
}
exports.MonitoringAlertPolicyDocumentationOutputReference = MonitoringAlertPolicyDocumentationOutputReference;
_1 = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyDocumentationOutputReference[_1] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyDocumentationOutputReference", version: "14.13.1" };
function monitoringAlertPolicyTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.monitoringAlertPolicyTimeoutsToTerraform = monitoringAlertPolicyTimeoutsToTerraform;
function monitoringAlertPolicyTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.monitoringAlertPolicyTimeoutsToHclTerraform = monitoringAlertPolicyTimeoutsToHclTerraform;
class MonitoringAlertPolicyTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.MonitoringAlertPolicyTimeoutsOutputReference = MonitoringAlertPolicyTimeoutsOutputReference;
_2 = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicyTimeoutsOutputReference[_2] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicyTimeoutsOutputReference", version: "14.13.1" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/monitoring_alert_policy google_monitoring_alert_policy}
*/
class MonitoringAlertPolicy extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a MonitoringAlertPolicy resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the MonitoringAlertPolicy to import
    * @param importFromId The id of the existing MonitoringAlertPolicy that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/monitoring_alert_policy#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the MonitoringAlertPolicy to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_monitoring_alert_policy", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/monitoring_alert_policy google_monitoring_alert_policy} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options MonitoringAlertPolicyConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_monitoring_alert_policy',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // creation_record - computed: true, optional: false, required: false
        this._creationRecord = new MonitoringAlertPolicyCreationRecordList(this, "creation_record", false);
        // alert_strategy - computed: false, optional: true, required: false
        this._alertStrategy = new MonitoringAlertPolicyAlertStrategyOutputReference(this, "alert_strategy");
        // conditions - computed: false, optional: false, required: true
        this._conditions = new MonitoringAlertPolicyConditionsList(this, "conditions", false);
        // documentation - computed: false, optional: true, required: false
        this._documentation = new MonitoringAlertPolicyDocumentationOutputReference(this, "documentation");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new MonitoringAlertPolicyTimeoutsOutputReference(this, "timeouts");
        this._combiner = config.combiner;
        this._displayName = config.displayName;
        this._enabled = config.enabled;
        this._id = config.id;
        this._notificationChannels = config.notificationChannels;
        this._project = config.project;
        this._severity = config.severity;
        this._userLabels = config.userLabels;
        this._alertStrategy.internalValue = config.alertStrategy;
        this._conditions.internalValue = config.conditions;
        this._documentation.internalValue = config.documentation;
        this._timeouts.internalValue = config.timeouts;
    }
    get combiner() {
        return this.getStringAttribute('combiner');
    }
    set combiner(value) {
        this._combiner = value;
    }
    // Temporarily expose input value. Use with caution.
    get combinerInput() {
        return this._combiner;
    }
    get creationRecord() {
        return this._creationRecord;
    }
    get displayName() {
        return this.getStringAttribute('display_name');
    }
    set displayName(value) {
        this._displayName = value;
    }
    // Temporarily expose input value. Use with caution.
    get displayNameInput() {
        return this._displayName;
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get notificationChannels() {
        return this.getListAttribute('notification_channels');
    }
    set notificationChannels(value) {
        this._notificationChannels = value;
    }
    resetNotificationChannels() {
        this._notificationChannels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get notificationChannelsInput() {
        return this._notificationChannels;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get severity() {
        return this.getStringAttribute('severity');
    }
    set severity(value) {
        this._severity = value;
    }
    resetSeverity() {
        this._severity = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get severityInput() {
        return this._severity;
    }
    get userLabels() {
        return this.getStringMapAttribute('user_labels');
    }
    set userLabels(value) {
        this._userLabels = value;
    }
    resetUserLabels() {
        this._userLabels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get userLabelsInput() {
        return this._userLabels;
    }
    get alertStrategy() {
        return this._alertStrategy;
    }
    putAlertStrategy(value) {
        this._alertStrategy.internalValue = value;
    }
    resetAlertStrategy() {
        this._alertStrategy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get alertStrategyInput() {
        return this._alertStrategy.internalValue;
    }
    get conditions() {
        return this._conditions;
    }
    putConditions(value) {
        this._conditions.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get conditionsInput() {
        return this._conditions.internalValue;
    }
    get documentation() {
        return this._documentation;
    }
    putDocumentation(value) {
        this._documentation.internalValue = value;
    }
    resetDocumentation() {
        this._documentation.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get documentationInput() {
        return this._documentation.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            combiner: cdktf.stringToTerraform(this._combiner),
            display_name: cdktf.stringToTerraform(this._displayName),
            enabled: cdktf.booleanToTerraform(this._enabled),
            id: cdktf.stringToTerraform(this._id),
            notification_channels: cdktf.listMapper(cdktf.stringToTerraform, false)(this._notificationChannels),
            project: cdktf.stringToTerraform(this._project),
            severity: cdktf.stringToTerraform(this._severity),
            user_labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._userLabels),
            alert_strategy: monitoringAlertPolicyAlertStrategyToTerraform(this._alertStrategy.internalValue),
            conditions: cdktf.listMapper(monitoringAlertPolicyConditionsToTerraform, true)(this._conditions.internalValue),
            documentation: monitoringAlertPolicyDocumentationToTerraform(this._documentation.internalValue),
            timeouts: monitoringAlertPolicyTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            combiner: {
                value: cdktf.stringToHclTerraform(this._combiner),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            display_name: {
                value: cdktf.stringToHclTerraform(this._displayName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            enabled: {
                value: cdktf.booleanToHclTerraform(this._enabled),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            notification_channels: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._notificationChannels),
                isBlock: false,
                type: "list",
                storageClassType: "stringList",
            },
            project: {
                value: cdktf.stringToHclTerraform(this._project),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            severity: {
                value: cdktf.stringToHclTerraform(this._severity),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            user_labels: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._userLabels),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            alert_strategy: {
                value: monitoringAlertPolicyAlertStrategyToHclTerraform(this._alertStrategy.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "MonitoringAlertPolicyAlertStrategyList",
            },
            conditions: {
                value: cdktf.listMapperHcl(monitoringAlertPolicyConditionsToHclTerraform, true)(this._conditions.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "MonitoringAlertPolicyConditionsList",
            },
            documentation: {
                value: monitoringAlertPolicyDocumentationToHclTerraform(this._documentation.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "MonitoringAlertPolicyDocumentationList",
            },
            timeouts: {
                value: monitoringAlertPolicyTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "MonitoringAlertPolicyTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.MonitoringAlertPolicy = MonitoringAlertPolicy;
_3 = JSII_RTTI_SYMBOL_1;
MonitoringAlertPolicy[_3] = { fqn: "@cdktf/provider-google.monitoringAlertPolicy.MonitoringAlertPolicy", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
MonitoringAlertPolicy.tfResourceType = "google_monitoring_alert_policy";
//# sourceMappingURL=data:application/json;base64,