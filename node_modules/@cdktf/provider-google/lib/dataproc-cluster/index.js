"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32;
Object.defineProperty(exports, "__esModule", { value: true });
exports.dataprocClusterClusterConfigInitializationActionToTerraform = exports.DataprocClusterClusterConfigGceClusterConfigOutputReference = exports.dataprocClusterClusterConfigGceClusterConfigToHclTerraform = exports.dataprocClusterClusterConfigGceClusterConfigToTerraform = exports.DataprocClusterClusterConfigGceClusterConfigShieldedInstanceConfigOutputReference = exports.dataprocClusterClusterConfigGceClusterConfigShieldedInstanceConfigToHclTerraform = exports.dataprocClusterClusterConfigGceClusterConfigShieldedInstanceConfigToTerraform = exports.DataprocClusterClusterConfigGceClusterConfigReservationAffinityOutputReference = exports.dataprocClusterClusterConfigGceClusterConfigReservationAffinityToHclTerraform = exports.dataprocClusterClusterConfigGceClusterConfigReservationAffinityToTerraform = exports.DataprocClusterClusterConfigGceClusterConfigNodeGroupAffinityOutputReference = exports.dataprocClusterClusterConfigGceClusterConfigNodeGroupAffinityToHclTerraform = exports.dataprocClusterClusterConfigGceClusterConfigNodeGroupAffinityToTerraform = exports.DataprocClusterClusterConfigGceClusterConfigConfidentialInstanceConfigOutputReference = exports.dataprocClusterClusterConfigGceClusterConfigConfidentialInstanceConfigToHclTerraform = exports.dataprocClusterClusterConfigGceClusterConfigConfidentialInstanceConfigToTerraform = exports.DataprocClusterClusterConfigEndpointConfigOutputReference = exports.dataprocClusterClusterConfigEndpointConfigToHclTerraform = exports.dataprocClusterClusterConfigEndpointConfigToTerraform = exports.DataprocClusterClusterConfigEncryptionConfigOutputReference = exports.dataprocClusterClusterConfigEncryptionConfigToHclTerraform = exports.dataprocClusterClusterConfigEncryptionConfigToTerraform = exports.DataprocClusterClusterConfigDataprocMetricConfigOutputReference = exports.dataprocClusterClusterConfigDataprocMetricConfigToHclTerraform = exports.dataprocClusterClusterConfigDataprocMetricConfigToTerraform = exports.DataprocClusterClusterConfigDataprocMetricConfigMetricsList = exports.DataprocClusterClusterConfigDataprocMetricConfigMetricsOutputReference = exports.dataprocClusterClusterConfigDataprocMetricConfigMetricsToHclTerraform = exports.dataprocClusterClusterConfigDataprocMetricConfigMetricsToTerraform = exports.DataprocClusterClusterConfigAuxiliaryNodeGroupsList = exports.DataprocClusterClusterConfigAuxiliaryNodeGroupsOutputReference = exports.dataprocClusterClusterConfigAuxiliaryNodeGroupsToHclTerraform = exports.dataprocClusterClusterConfigAuxiliaryNodeGroupsToTerraform = exports.DataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupList = exports.DataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupOutputReference = exports.dataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupToHclTerraform = exports.dataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupToTerraform = exports.DataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigOutputReference = exports.dataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigToHclTerraform = exports.dataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigToTerraform = exports.DataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigDiskConfigOutputReference = exports.dataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigDiskConfigToHclTerraform = exports.dataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigDiskConfigToTerraform = exports.DataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigAcceleratorsList = exports.DataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigAcceleratorsOutputReference = exports.dataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigAcceleratorsToHclTerraform = exports.dataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigAcceleratorsToTerraform = exports.DataprocClusterClusterConfigAutoscalingConfigOutputReference = exports.dataprocClusterClusterConfigAutoscalingConfigToHclTerraform = exports.dataprocClusterClusterConfigAutoscalingConfigToTerraform = void 0;
exports.dataprocClusterClusterConfigWorkerConfigAcceleratorsToHclTerraform = exports.dataprocClusterClusterConfigWorkerConfigAcceleratorsToTerraform = exports.DataprocClusterClusterConfigSoftwareConfigOutputReference = exports.dataprocClusterClusterConfigSoftwareConfigToHclTerraform = exports.dataprocClusterClusterConfigSoftwareConfigToTerraform = exports.DataprocClusterClusterConfigSecurityConfigOutputReference = exports.dataprocClusterClusterConfigSecurityConfigToHclTerraform = exports.dataprocClusterClusterConfigSecurityConfigToTerraform = exports.DataprocClusterClusterConfigSecurityConfigKerberosConfigOutputReference = exports.dataprocClusterClusterConfigSecurityConfigKerberosConfigToHclTerraform = exports.dataprocClusterClusterConfigSecurityConfigKerberosConfigToTerraform = exports.DataprocClusterClusterConfigPreemptibleWorkerConfigOutputReference = exports.dataprocClusterClusterConfigPreemptibleWorkerConfigToHclTerraform = exports.dataprocClusterClusterConfigPreemptibleWorkerConfigToTerraform = exports.DataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyOutputReference = exports.dataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyToHclTerraform = exports.dataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyToTerraform = exports.DataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyProvisioningModelMixOutputReference = exports.dataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyProvisioningModelMixToHclTerraform = exports.dataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyProvisioningModelMixToTerraform = exports.DataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionListStructList = exports.DataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionListStructOutputReference = exports.dataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionListStructToHclTerraform = exports.dataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionListStructToTerraform = exports.DataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionResultsList = exports.DataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionResultsOutputReference = exports.dataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionResultsToHclTerraform = exports.dataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionResultsToTerraform = exports.DataprocClusterClusterConfigPreemptibleWorkerConfigDiskConfigOutputReference = exports.dataprocClusterClusterConfigPreemptibleWorkerConfigDiskConfigToHclTerraform = exports.dataprocClusterClusterConfigPreemptibleWorkerConfigDiskConfigToTerraform = exports.DataprocClusterClusterConfigMetastoreConfigOutputReference = exports.dataprocClusterClusterConfigMetastoreConfigToHclTerraform = exports.dataprocClusterClusterConfigMetastoreConfigToTerraform = exports.DataprocClusterClusterConfigMasterConfigOutputReference = exports.dataprocClusterClusterConfigMasterConfigToHclTerraform = exports.dataprocClusterClusterConfigMasterConfigToTerraform = exports.DataprocClusterClusterConfigMasterConfigDiskConfigOutputReference = exports.dataprocClusterClusterConfigMasterConfigDiskConfigToHclTerraform = exports.dataprocClusterClusterConfigMasterConfigDiskConfigToTerraform = exports.DataprocClusterClusterConfigMasterConfigAcceleratorsList = exports.DataprocClusterClusterConfigMasterConfigAcceleratorsOutputReference = exports.dataprocClusterClusterConfigMasterConfigAcceleratorsToHclTerraform = exports.dataprocClusterClusterConfigMasterConfigAcceleratorsToTerraform = exports.DataprocClusterClusterConfigLifecycleConfigOutputReference = exports.dataprocClusterClusterConfigLifecycleConfigToHclTerraform = exports.dataprocClusterClusterConfigLifecycleConfigToTerraform = exports.DataprocClusterClusterConfigInitializationActionList = exports.DataprocClusterClusterConfigInitializationActionOutputReference = exports.dataprocClusterClusterConfigInitializationActionToHclTerraform = void 0;
exports.DataprocCluster = exports.DataprocClusterVirtualClusterConfigOutputReference = exports.dataprocClusterVirtualClusterConfigToHclTerraform = exports.dataprocClusterVirtualClusterConfigToTerraform = exports.DataprocClusterVirtualClusterConfigKubernetesClusterConfigOutputReference = exports.dataprocClusterVirtualClusterConfigKubernetesClusterConfigToHclTerraform = exports.dataprocClusterVirtualClusterConfigKubernetesClusterConfigToTerraform = exports.DataprocClusterVirtualClusterConfigKubernetesClusterConfigKubernetesSoftwareConfigOutputReference = exports.dataprocClusterVirtualClusterConfigKubernetesClusterConfigKubernetesSoftwareConfigToHclTerraform = exports.dataprocClusterVirtualClusterConfigKubernetesClusterConfigKubernetesSoftwareConfigToTerraform = exports.DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigOutputReference = exports.dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigToHclTerraform = exports.dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigToTerraform = exports.DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetList = exports.DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetOutputReference = exports.dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetToHclTerraform = exports.dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetToTerraform = exports.DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigOutputReference = exports.dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigToHclTerraform = exports.dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigToTerraform = exports.DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigConfigOutputReference = exports.dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigConfigToHclTerraform = exports.dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigConfigToTerraform = exports.DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigAutoscalingOutputReference = exports.dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigAutoscalingToHclTerraform = exports.dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigAutoscalingToTerraform = exports.DataprocClusterVirtualClusterConfigAuxiliaryServicesConfigOutputReference = exports.dataprocClusterVirtualClusterConfigAuxiliaryServicesConfigToHclTerraform = exports.dataprocClusterVirtualClusterConfigAuxiliaryServicesConfigToTerraform = exports.DataprocClusterVirtualClusterConfigAuxiliaryServicesConfigSparkHistoryServerConfigOutputReference = exports.dataprocClusterVirtualClusterConfigAuxiliaryServicesConfigSparkHistoryServerConfigToHclTerraform = exports.dataprocClusterVirtualClusterConfigAuxiliaryServicesConfigSparkHistoryServerConfigToTerraform = exports.DataprocClusterVirtualClusterConfigAuxiliaryServicesConfigMetastoreConfigOutputReference = exports.dataprocClusterVirtualClusterConfigAuxiliaryServicesConfigMetastoreConfigToHclTerraform = exports.dataprocClusterVirtualClusterConfigAuxiliaryServicesConfigMetastoreConfigToTerraform = exports.DataprocClusterTimeoutsOutputReference = exports.dataprocClusterTimeoutsToHclTerraform = exports.dataprocClusterTimeoutsToTerraform = exports.DataprocClusterClusterConfigOutputReference = exports.dataprocClusterClusterConfigToHclTerraform = exports.dataprocClusterClusterConfigToTerraform = exports.DataprocClusterClusterConfigWorkerConfigOutputReference = exports.dataprocClusterClusterConfigWorkerConfigToHclTerraform = exports.dataprocClusterClusterConfigWorkerConfigToTerraform = exports.DataprocClusterClusterConfigWorkerConfigDiskConfigOutputReference = exports.dataprocClusterClusterConfigWorkerConfigDiskConfigToHclTerraform = exports.dataprocClusterClusterConfigWorkerConfigDiskConfigToTerraform = exports.DataprocClusterClusterConfigWorkerConfigAcceleratorsList = exports.DataprocClusterClusterConfigWorkerConfigAcceleratorsOutputReference = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function dataprocClusterClusterConfigAutoscalingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        policy_uri: cdktf.stringToTerraform(struct.policyUri),
    };
}
exports.dataprocClusterClusterConfigAutoscalingConfigToTerraform = dataprocClusterClusterConfigAutoscalingConfigToTerraform;
function dataprocClusterClusterConfigAutoscalingConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        policy_uri: {
            value: cdktf.stringToHclTerraform(struct.policyUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocClusterClusterConfigAutoscalingConfigToHclTerraform = dataprocClusterClusterConfigAutoscalingConfigToHclTerraform;
class DataprocClusterClusterConfigAutoscalingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._policyUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.policyUri = this._policyUri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._policyUri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._policyUri = value.policyUri;
        }
    }
    get policyUri() {
        return this.getStringAttribute('policy_uri');
    }
    set policyUri(value) {
        this._policyUri = value;
    }
    // Temporarily expose input value. Use with caution.
    get policyUriInput() {
        return this._policyUri;
    }
}
exports.DataprocClusterClusterConfigAutoscalingConfigOutputReference = DataprocClusterClusterConfigAutoscalingConfigOutputReference;
_a = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigAutoscalingConfigOutputReference[_a] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigAutoscalingConfigOutputReference", version: "14.13.1" };
function dataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigAcceleratorsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        accelerator_count: cdktf.numberToTerraform(struct.acceleratorCount),
        accelerator_type: cdktf.stringToTerraform(struct.acceleratorType),
    };
}
exports.dataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigAcceleratorsToTerraform = dataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigAcceleratorsToTerraform;
function dataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigAcceleratorsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        accelerator_count: {
            value: cdktf.numberToHclTerraform(struct.acceleratorCount),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        accelerator_type: {
            value: cdktf.stringToHclTerraform(struct.acceleratorType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigAcceleratorsToHclTerraform = dataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigAcceleratorsToHclTerraform;
class DataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigAcceleratorsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._acceleratorCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.acceleratorCount = this._acceleratorCount;
        }
        if (this._acceleratorType !== undefined) {
            hasAnyValues = true;
            internalValueResult.acceleratorType = this._acceleratorType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._acceleratorCount = undefined;
            this._acceleratorType = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._acceleratorCount = value.acceleratorCount;
            this._acceleratorType = value.acceleratorType;
        }
    }
    get acceleratorCount() {
        return this.getNumberAttribute('accelerator_count');
    }
    set acceleratorCount(value) {
        this._acceleratorCount = value;
    }
    // Temporarily expose input value. Use with caution.
    get acceleratorCountInput() {
        return this._acceleratorCount;
    }
    get acceleratorType() {
        return this.getStringAttribute('accelerator_type');
    }
    set acceleratorType(value) {
        this._acceleratorType = value;
    }
    // Temporarily expose input value. Use with caution.
    get acceleratorTypeInput() {
        return this._acceleratorType;
    }
}
exports.DataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigAcceleratorsOutputReference = DataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigAcceleratorsOutputReference;
_b = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigAcceleratorsOutputReference[_b] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigAcceleratorsOutputReference", version: "14.13.1" };
class DataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigAcceleratorsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigAcceleratorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigAcceleratorsList = DataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigAcceleratorsList;
_c = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigAcceleratorsList[_c] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigAcceleratorsList", version: "14.13.1" };
function dataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigDiskConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        boot_disk_size_gb: cdktf.numberToTerraform(struct.bootDiskSizeGb),
        boot_disk_type: cdktf.stringToTerraform(struct.bootDiskType),
        local_ssd_interface: cdktf.stringToTerraform(struct.localSsdInterface),
        num_local_ssds: cdktf.numberToTerraform(struct.numLocalSsds),
    };
}
exports.dataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigDiskConfigToTerraform = dataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigDiskConfigToTerraform;
function dataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigDiskConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        boot_disk_size_gb: {
            value: cdktf.numberToHclTerraform(struct.bootDiskSizeGb),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        boot_disk_type: {
            value: cdktf.stringToHclTerraform(struct.bootDiskType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        local_ssd_interface: {
            value: cdktf.stringToHclTerraform(struct.localSsdInterface),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        num_local_ssds: {
            value: cdktf.numberToHclTerraform(struct.numLocalSsds),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigDiskConfigToHclTerraform = dataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigDiskConfigToHclTerraform;
class DataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigDiskConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bootDiskSizeGb !== undefined) {
            hasAnyValues = true;
            internalValueResult.bootDiskSizeGb = this._bootDiskSizeGb;
        }
        if (this._bootDiskType !== undefined) {
            hasAnyValues = true;
            internalValueResult.bootDiskType = this._bootDiskType;
        }
        if (this._localSsdInterface !== undefined) {
            hasAnyValues = true;
            internalValueResult.localSsdInterface = this._localSsdInterface;
        }
        if (this._numLocalSsds !== undefined) {
            hasAnyValues = true;
            internalValueResult.numLocalSsds = this._numLocalSsds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bootDiskSizeGb = undefined;
            this._bootDiskType = undefined;
            this._localSsdInterface = undefined;
            this._numLocalSsds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bootDiskSizeGb = value.bootDiskSizeGb;
            this._bootDiskType = value.bootDiskType;
            this._localSsdInterface = value.localSsdInterface;
            this._numLocalSsds = value.numLocalSsds;
        }
    }
    get bootDiskSizeGb() {
        return this.getNumberAttribute('boot_disk_size_gb');
    }
    set bootDiskSizeGb(value) {
        this._bootDiskSizeGb = value;
    }
    resetBootDiskSizeGb() {
        this._bootDiskSizeGb = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bootDiskSizeGbInput() {
        return this._bootDiskSizeGb;
    }
    get bootDiskType() {
        return this.getStringAttribute('boot_disk_type');
    }
    set bootDiskType(value) {
        this._bootDiskType = value;
    }
    resetBootDiskType() {
        this._bootDiskType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bootDiskTypeInput() {
        return this._bootDiskType;
    }
    get localSsdInterface() {
        return this.getStringAttribute('local_ssd_interface');
    }
    set localSsdInterface(value) {
        this._localSsdInterface = value;
    }
    resetLocalSsdInterface() {
        this._localSsdInterface = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get localSsdInterfaceInput() {
        return this._localSsdInterface;
    }
    get numLocalSsds() {
        return this.getNumberAttribute('num_local_ssds');
    }
    set numLocalSsds(value) {
        this._numLocalSsds = value;
    }
    resetNumLocalSsds() {
        this._numLocalSsds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numLocalSsdsInput() {
        return this._numLocalSsds;
    }
}
exports.DataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigDiskConfigOutputReference = DataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigDiskConfigOutputReference;
_d = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigDiskConfigOutputReference[_d] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigDiskConfigOutputReference", version: "14.13.1" };
function dataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        machine_type: cdktf.stringToTerraform(struct.machineType),
        min_cpu_platform: cdktf.stringToTerraform(struct.minCpuPlatform),
        num_instances: cdktf.numberToTerraform(struct.numInstances),
        accelerators: cdktf.listMapper(dataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigAcceleratorsToTerraform, true)(struct.accelerators),
        disk_config: dataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigDiskConfigToTerraform(struct.diskConfig),
    };
}
exports.dataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigToTerraform = dataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigToTerraform;
function dataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        machine_type: {
            value: cdktf.stringToHclTerraform(struct.machineType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        min_cpu_platform: {
            value: cdktf.stringToHclTerraform(struct.minCpuPlatform),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        num_instances: {
            value: cdktf.numberToHclTerraform(struct.numInstances),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        accelerators: {
            value: cdktf.listMapperHcl(dataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigAcceleratorsToHclTerraform, true)(struct.accelerators),
            isBlock: true,
            type: "set",
            storageClassType: "DataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigAcceleratorsList",
        },
        disk_config: {
            value: dataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigDiskConfigToHclTerraform(struct.diskConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigDiskConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigToHclTerraform = dataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigToHclTerraform;
class DataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // accelerators - computed: false, optional: true, required: false
        this._accelerators = new DataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigAcceleratorsList(this, "accelerators", true);
        // disk_config - computed: false, optional: true, required: false
        this._diskConfig = new DataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigDiskConfigOutputReference(this, "disk_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._machineType !== undefined) {
            hasAnyValues = true;
            internalValueResult.machineType = this._machineType;
        }
        if (this._minCpuPlatform !== undefined) {
            hasAnyValues = true;
            internalValueResult.minCpuPlatform = this._minCpuPlatform;
        }
        if (this._numInstances !== undefined) {
            hasAnyValues = true;
            internalValueResult.numInstances = this._numInstances;
        }
        if (this._accelerators?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.accelerators = this._accelerators?.internalValue;
        }
        if (this._diskConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.diskConfig = this._diskConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._machineType = undefined;
            this._minCpuPlatform = undefined;
            this._numInstances = undefined;
            this._accelerators.internalValue = undefined;
            this._diskConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._machineType = value.machineType;
            this._minCpuPlatform = value.minCpuPlatform;
            this._numInstances = value.numInstances;
            this._accelerators.internalValue = value.accelerators;
            this._diskConfig.internalValue = value.diskConfig;
        }
    }
    // instance_names - computed: true, optional: false, required: false
    get instanceNames() {
        return this.getListAttribute('instance_names');
    }
    get machineType() {
        return this.getStringAttribute('machine_type');
    }
    set machineType(value) {
        this._machineType = value;
    }
    resetMachineType() {
        this._machineType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get machineTypeInput() {
        return this._machineType;
    }
    get minCpuPlatform() {
        return this.getStringAttribute('min_cpu_platform');
    }
    set minCpuPlatform(value) {
        this._minCpuPlatform = value;
    }
    resetMinCpuPlatform() {
        this._minCpuPlatform = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minCpuPlatformInput() {
        return this._minCpuPlatform;
    }
    get numInstances() {
        return this.getNumberAttribute('num_instances');
    }
    set numInstances(value) {
        this._numInstances = value;
    }
    resetNumInstances() {
        this._numInstances = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numInstancesInput() {
        return this._numInstances;
    }
    get accelerators() {
        return this._accelerators;
    }
    putAccelerators(value) {
        this._accelerators.internalValue = value;
    }
    resetAccelerators() {
        this._accelerators.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get acceleratorsInput() {
        return this._accelerators.internalValue;
    }
    get diskConfig() {
        return this._diskConfig;
    }
    putDiskConfig(value) {
        this._diskConfig.internalValue = value;
    }
    resetDiskConfig() {
        this._diskConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get diskConfigInput() {
        return this._diskConfig.internalValue;
    }
}
exports.DataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigOutputReference = DataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigOutputReference;
_e = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigOutputReference[_e] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigOutputReference", version: "14.13.1" };
function dataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        roles: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.roles),
        node_group_config: dataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigToTerraform(struct.nodeGroupConfig),
    };
}
exports.dataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupToTerraform = dataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupToTerraform;
function dataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        roles: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.roles),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        node_group_config: {
            value: dataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigToHclTerraform(struct.nodeGroupConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupToHclTerraform = dataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupToHclTerraform;
class DataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // node_group_config - computed: false, optional: true, required: false
        this._nodeGroupConfig = new DataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupNodeGroupConfigOutputReference(this, "node_group_config");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._roles !== undefined) {
            hasAnyValues = true;
            internalValueResult.roles = this._roles;
        }
        if (this._nodeGroupConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.nodeGroupConfig = this._nodeGroupConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._roles = undefined;
            this._nodeGroupConfig.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._roles = value.roles;
            this._nodeGroupConfig.internalValue = value.nodeGroupConfig;
        }
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get roles() {
        return this.getListAttribute('roles');
    }
    set roles(value) {
        this._roles = value;
    }
    // Temporarily expose input value. Use with caution.
    get rolesInput() {
        return this._roles;
    }
    get nodeGroupConfig() {
        return this._nodeGroupConfig;
    }
    putNodeGroupConfig(value) {
        this._nodeGroupConfig.internalValue = value;
    }
    resetNodeGroupConfig() {
        this._nodeGroupConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nodeGroupConfigInput() {
        return this._nodeGroupConfig.internalValue;
    }
}
exports.DataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupOutputReference = DataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupOutputReference;
_f = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupOutputReference[_f] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupOutputReference", version: "14.13.1" };
class DataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupList = DataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupList;
_g = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupList[_g] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupList", version: "14.13.1" };
function dataprocClusterClusterConfigAuxiliaryNodeGroupsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        node_group_id: cdktf.stringToTerraform(struct.nodeGroupId),
        node_group: cdktf.listMapper(dataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupToTerraform, true)(struct.nodeGroup),
    };
}
exports.dataprocClusterClusterConfigAuxiliaryNodeGroupsToTerraform = dataprocClusterClusterConfigAuxiliaryNodeGroupsToTerraform;
function dataprocClusterClusterConfigAuxiliaryNodeGroupsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        node_group_id: {
            value: cdktf.stringToHclTerraform(struct.nodeGroupId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        node_group: {
            value: cdktf.listMapperHcl(dataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupToHclTerraform, true)(struct.nodeGroup),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocClusterClusterConfigAuxiliaryNodeGroupsToHclTerraform = dataprocClusterClusterConfigAuxiliaryNodeGroupsToHclTerraform;
class DataprocClusterClusterConfigAuxiliaryNodeGroupsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // node_group - computed: false, optional: false, required: true
        this._nodeGroup = new DataprocClusterClusterConfigAuxiliaryNodeGroupsNodeGroupList(this, "node_group", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._nodeGroupId !== undefined) {
            hasAnyValues = true;
            internalValueResult.nodeGroupId = this._nodeGroupId;
        }
        if (this._nodeGroup?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.nodeGroup = this._nodeGroup?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._nodeGroupId = undefined;
            this._nodeGroup.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._nodeGroupId = value.nodeGroupId;
            this._nodeGroup.internalValue = value.nodeGroup;
        }
    }
    get nodeGroupId() {
        return this.getStringAttribute('node_group_id');
    }
    set nodeGroupId(value) {
        this._nodeGroupId = value;
    }
    resetNodeGroupId() {
        this._nodeGroupId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nodeGroupIdInput() {
        return this._nodeGroupId;
    }
    get nodeGroup() {
        return this._nodeGroup;
    }
    putNodeGroup(value) {
        this._nodeGroup.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get nodeGroupInput() {
        return this._nodeGroup.internalValue;
    }
}
exports.DataprocClusterClusterConfigAuxiliaryNodeGroupsOutputReference = DataprocClusterClusterConfigAuxiliaryNodeGroupsOutputReference;
_h = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigAuxiliaryNodeGroupsOutputReference[_h] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigAuxiliaryNodeGroupsOutputReference", version: "14.13.1" };
class DataprocClusterClusterConfigAuxiliaryNodeGroupsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataprocClusterClusterConfigAuxiliaryNodeGroupsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataprocClusterClusterConfigAuxiliaryNodeGroupsList = DataprocClusterClusterConfigAuxiliaryNodeGroupsList;
_j = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigAuxiliaryNodeGroupsList[_j] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigAuxiliaryNodeGroupsList", version: "14.13.1" };
function dataprocClusterClusterConfigDataprocMetricConfigMetricsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        metric_overrides: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.metricOverrides),
        metric_source: cdktf.stringToTerraform(struct.metricSource),
    };
}
exports.dataprocClusterClusterConfigDataprocMetricConfigMetricsToTerraform = dataprocClusterClusterConfigDataprocMetricConfigMetricsToTerraform;
function dataprocClusterClusterConfigDataprocMetricConfigMetricsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        metric_overrides: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.metricOverrides),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        metric_source: {
            value: cdktf.stringToHclTerraform(struct.metricSource),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocClusterClusterConfigDataprocMetricConfigMetricsToHclTerraform = dataprocClusterClusterConfigDataprocMetricConfigMetricsToHclTerraform;
class DataprocClusterClusterConfigDataprocMetricConfigMetricsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._metricOverrides !== undefined) {
            hasAnyValues = true;
            internalValueResult.metricOverrides = this._metricOverrides;
        }
        if (this._metricSource !== undefined) {
            hasAnyValues = true;
            internalValueResult.metricSource = this._metricSource;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._metricOverrides = undefined;
            this._metricSource = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._metricOverrides = value.metricOverrides;
            this._metricSource = value.metricSource;
        }
    }
    get metricOverrides() {
        return cdktf.Fn.tolist(this.getListAttribute('metric_overrides'));
    }
    set metricOverrides(value) {
        this._metricOverrides = value;
    }
    resetMetricOverrides() {
        this._metricOverrides = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get metricOverridesInput() {
        return this._metricOverrides;
    }
    get metricSource() {
        return this.getStringAttribute('metric_source');
    }
    set metricSource(value) {
        this._metricSource = value;
    }
    // Temporarily expose input value. Use with caution.
    get metricSourceInput() {
        return this._metricSource;
    }
}
exports.DataprocClusterClusterConfigDataprocMetricConfigMetricsOutputReference = DataprocClusterClusterConfigDataprocMetricConfigMetricsOutputReference;
_k = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigDataprocMetricConfigMetricsOutputReference[_k] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigDataprocMetricConfigMetricsOutputReference", version: "14.13.1" };
class DataprocClusterClusterConfigDataprocMetricConfigMetricsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataprocClusterClusterConfigDataprocMetricConfigMetricsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataprocClusterClusterConfigDataprocMetricConfigMetricsList = DataprocClusterClusterConfigDataprocMetricConfigMetricsList;
_l = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigDataprocMetricConfigMetricsList[_l] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigDataprocMetricConfigMetricsList", version: "14.13.1" };
function dataprocClusterClusterConfigDataprocMetricConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        metrics: cdktf.listMapper(dataprocClusterClusterConfigDataprocMetricConfigMetricsToTerraform, true)(struct.metrics),
    };
}
exports.dataprocClusterClusterConfigDataprocMetricConfigToTerraform = dataprocClusterClusterConfigDataprocMetricConfigToTerraform;
function dataprocClusterClusterConfigDataprocMetricConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        metrics: {
            value: cdktf.listMapperHcl(dataprocClusterClusterConfigDataprocMetricConfigMetricsToHclTerraform, true)(struct.metrics),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocClusterClusterConfigDataprocMetricConfigMetricsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocClusterClusterConfigDataprocMetricConfigToHclTerraform = dataprocClusterClusterConfigDataprocMetricConfigToHclTerraform;
class DataprocClusterClusterConfigDataprocMetricConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // metrics - computed: false, optional: false, required: true
        this._metrics = new DataprocClusterClusterConfigDataprocMetricConfigMetricsList(this, "metrics", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._metrics?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.metrics = this._metrics?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._metrics.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._metrics.internalValue = value.metrics;
        }
    }
    get metrics() {
        return this._metrics;
    }
    putMetrics(value) {
        this._metrics.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get metricsInput() {
        return this._metrics.internalValue;
    }
}
exports.DataprocClusterClusterConfigDataprocMetricConfigOutputReference = DataprocClusterClusterConfigDataprocMetricConfigOutputReference;
_m = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigDataprocMetricConfigOutputReference[_m] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigDataprocMetricConfigOutputReference", version: "14.13.1" };
function dataprocClusterClusterConfigEncryptionConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        kms_key_name: cdktf.stringToTerraform(struct.kmsKeyName),
    };
}
exports.dataprocClusterClusterConfigEncryptionConfigToTerraform = dataprocClusterClusterConfigEncryptionConfigToTerraform;
function dataprocClusterClusterConfigEncryptionConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        kms_key_name: {
            value: cdktf.stringToHclTerraform(struct.kmsKeyName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocClusterClusterConfigEncryptionConfigToHclTerraform = dataprocClusterClusterConfigEncryptionConfigToHclTerraform;
class DataprocClusterClusterConfigEncryptionConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._kmsKeyName !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyName = this._kmsKeyName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._kmsKeyName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._kmsKeyName = value.kmsKeyName;
        }
    }
    get kmsKeyName() {
        return this.getStringAttribute('kms_key_name');
    }
    set kmsKeyName(value) {
        this._kmsKeyName = value;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyNameInput() {
        return this._kmsKeyName;
    }
}
exports.DataprocClusterClusterConfigEncryptionConfigOutputReference = DataprocClusterClusterConfigEncryptionConfigOutputReference;
_o = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigEncryptionConfigOutputReference[_o] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigEncryptionConfigOutputReference", version: "14.13.1" };
function dataprocClusterClusterConfigEndpointConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enable_http_port_access: cdktf.booleanToTerraform(struct.enableHttpPortAccess),
    };
}
exports.dataprocClusterClusterConfigEndpointConfigToTerraform = dataprocClusterClusterConfigEndpointConfigToTerraform;
function dataprocClusterClusterConfigEndpointConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enable_http_port_access: {
            value: cdktf.booleanToHclTerraform(struct.enableHttpPortAccess),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocClusterClusterConfigEndpointConfigToHclTerraform = dataprocClusterClusterConfigEndpointConfigToHclTerraform;
class DataprocClusterClusterConfigEndpointConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // http_ports - computed: true, optional: false, required: false
        this._httpPorts = new cdktf.StringMap(this, "http_ports");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enableHttpPortAccess !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableHttpPortAccess = this._enableHttpPortAccess;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enableHttpPortAccess = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enableHttpPortAccess = value.enableHttpPortAccess;
        }
    }
    get enableHttpPortAccess() {
        return this.getBooleanAttribute('enable_http_port_access');
    }
    set enableHttpPortAccess(value) {
        this._enableHttpPortAccess = value;
    }
    // Temporarily expose input value. Use with caution.
    get enableHttpPortAccessInput() {
        return this._enableHttpPortAccess;
    }
    get httpPorts() {
        return this._httpPorts;
    }
}
exports.DataprocClusterClusterConfigEndpointConfigOutputReference = DataprocClusterClusterConfigEndpointConfigOutputReference;
_p = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigEndpointConfigOutputReference[_p] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigEndpointConfigOutputReference", version: "14.13.1" };
function dataprocClusterClusterConfigGceClusterConfigConfidentialInstanceConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enable_confidential_compute: cdktf.booleanToTerraform(struct.enableConfidentialCompute),
    };
}
exports.dataprocClusterClusterConfigGceClusterConfigConfidentialInstanceConfigToTerraform = dataprocClusterClusterConfigGceClusterConfigConfidentialInstanceConfigToTerraform;
function dataprocClusterClusterConfigGceClusterConfigConfidentialInstanceConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enable_confidential_compute: {
            value: cdktf.booleanToHclTerraform(struct.enableConfidentialCompute),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocClusterClusterConfigGceClusterConfigConfidentialInstanceConfigToHclTerraform = dataprocClusterClusterConfigGceClusterConfigConfidentialInstanceConfigToHclTerraform;
class DataprocClusterClusterConfigGceClusterConfigConfidentialInstanceConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enableConfidentialCompute !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableConfidentialCompute = this._enableConfidentialCompute;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enableConfidentialCompute = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enableConfidentialCompute = value.enableConfidentialCompute;
        }
    }
    get enableConfidentialCompute() {
        return this.getBooleanAttribute('enable_confidential_compute');
    }
    set enableConfidentialCompute(value) {
        this._enableConfidentialCompute = value;
    }
    resetEnableConfidentialCompute() {
        this._enableConfidentialCompute = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableConfidentialComputeInput() {
        return this._enableConfidentialCompute;
    }
}
exports.DataprocClusterClusterConfigGceClusterConfigConfidentialInstanceConfigOutputReference = DataprocClusterClusterConfigGceClusterConfigConfidentialInstanceConfigOutputReference;
_q = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigGceClusterConfigConfidentialInstanceConfigOutputReference[_q] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigGceClusterConfigConfidentialInstanceConfigOutputReference", version: "14.13.1" };
function dataprocClusterClusterConfigGceClusterConfigNodeGroupAffinityToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        node_group_uri: cdktf.stringToTerraform(struct.nodeGroupUri),
    };
}
exports.dataprocClusterClusterConfigGceClusterConfigNodeGroupAffinityToTerraform = dataprocClusterClusterConfigGceClusterConfigNodeGroupAffinityToTerraform;
function dataprocClusterClusterConfigGceClusterConfigNodeGroupAffinityToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        node_group_uri: {
            value: cdktf.stringToHclTerraform(struct.nodeGroupUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocClusterClusterConfigGceClusterConfigNodeGroupAffinityToHclTerraform = dataprocClusterClusterConfigGceClusterConfigNodeGroupAffinityToHclTerraform;
class DataprocClusterClusterConfigGceClusterConfigNodeGroupAffinityOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._nodeGroupUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.nodeGroupUri = this._nodeGroupUri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._nodeGroupUri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._nodeGroupUri = value.nodeGroupUri;
        }
    }
    get nodeGroupUri() {
        return this.getStringAttribute('node_group_uri');
    }
    set nodeGroupUri(value) {
        this._nodeGroupUri = value;
    }
    // Temporarily expose input value. Use with caution.
    get nodeGroupUriInput() {
        return this._nodeGroupUri;
    }
}
exports.DataprocClusterClusterConfigGceClusterConfigNodeGroupAffinityOutputReference = DataprocClusterClusterConfigGceClusterConfigNodeGroupAffinityOutputReference;
_r = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigGceClusterConfigNodeGroupAffinityOutputReference[_r] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigGceClusterConfigNodeGroupAffinityOutputReference", version: "14.13.1" };
function dataprocClusterClusterConfigGceClusterConfigReservationAffinityToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        consume_reservation_type: cdktf.stringToTerraform(struct.consumeReservationType),
        key: cdktf.stringToTerraform(struct.key),
        values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.values),
    };
}
exports.dataprocClusterClusterConfigGceClusterConfigReservationAffinityToTerraform = dataprocClusterClusterConfigGceClusterConfigReservationAffinityToTerraform;
function dataprocClusterClusterConfigGceClusterConfigReservationAffinityToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        consume_reservation_type: {
            value: cdktf.stringToHclTerraform(struct.consumeReservationType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        key: {
            value: cdktf.stringToHclTerraform(struct.key),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        values: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.values),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocClusterClusterConfigGceClusterConfigReservationAffinityToHclTerraform = dataprocClusterClusterConfigGceClusterConfigReservationAffinityToHclTerraform;
class DataprocClusterClusterConfigGceClusterConfigReservationAffinityOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._consumeReservationType !== undefined) {
            hasAnyValues = true;
            internalValueResult.consumeReservationType = this._consumeReservationType;
        }
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._values !== undefined) {
            hasAnyValues = true;
            internalValueResult.values = this._values;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._consumeReservationType = undefined;
            this._key = undefined;
            this._values = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._consumeReservationType = value.consumeReservationType;
            this._key = value.key;
            this._values = value.values;
        }
    }
    get consumeReservationType() {
        return this.getStringAttribute('consume_reservation_type');
    }
    set consumeReservationType(value) {
        this._consumeReservationType = value;
    }
    resetConsumeReservationType() {
        this._consumeReservationType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get consumeReservationTypeInput() {
        return this._consumeReservationType;
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    resetKey() {
        this._key = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get values() {
        return cdktf.Fn.tolist(this.getListAttribute('values'));
    }
    set values(value) {
        this._values = value;
    }
    resetValues() {
        this._values = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get valuesInput() {
        return this._values;
    }
}
exports.DataprocClusterClusterConfigGceClusterConfigReservationAffinityOutputReference = DataprocClusterClusterConfigGceClusterConfigReservationAffinityOutputReference;
_s = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigGceClusterConfigReservationAffinityOutputReference[_s] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigGceClusterConfigReservationAffinityOutputReference", version: "14.13.1" };
function dataprocClusterClusterConfigGceClusterConfigShieldedInstanceConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enable_integrity_monitoring: cdktf.booleanToTerraform(struct.enableIntegrityMonitoring),
        enable_secure_boot: cdktf.booleanToTerraform(struct.enableSecureBoot),
        enable_vtpm: cdktf.booleanToTerraform(struct.enableVtpm),
    };
}
exports.dataprocClusterClusterConfigGceClusterConfigShieldedInstanceConfigToTerraform = dataprocClusterClusterConfigGceClusterConfigShieldedInstanceConfigToTerraform;
function dataprocClusterClusterConfigGceClusterConfigShieldedInstanceConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enable_integrity_monitoring: {
            value: cdktf.booleanToHclTerraform(struct.enableIntegrityMonitoring),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        enable_secure_boot: {
            value: cdktf.booleanToHclTerraform(struct.enableSecureBoot),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        enable_vtpm: {
            value: cdktf.booleanToHclTerraform(struct.enableVtpm),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocClusterClusterConfigGceClusterConfigShieldedInstanceConfigToHclTerraform = dataprocClusterClusterConfigGceClusterConfigShieldedInstanceConfigToHclTerraform;
class DataprocClusterClusterConfigGceClusterConfigShieldedInstanceConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enableIntegrityMonitoring !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableIntegrityMonitoring = this._enableIntegrityMonitoring;
        }
        if (this._enableSecureBoot !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableSecureBoot = this._enableSecureBoot;
        }
        if (this._enableVtpm !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableVtpm = this._enableVtpm;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enableIntegrityMonitoring = undefined;
            this._enableSecureBoot = undefined;
            this._enableVtpm = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enableIntegrityMonitoring = value.enableIntegrityMonitoring;
            this._enableSecureBoot = value.enableSecureBoot;
            this._enableVtpm = value.enableVtpm;
        }
    }
    get enableIntegrityMonitoring() {
        return this.getBooleanAttribute('enable_integrity_monitoring');
    }
    set enableIntegrityMonitoring(value) {
        this._enableIntegrityMonitoring = value;
    }
    resetEnableIntegrityMonitoring() {
        this._enableIntegrityMonitoring = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableIntegrityMonitoringInput() {
        return this._enableIntegrityMonitoring;
    }
    get enableSecureBoot() {
        return this.getBooleanAttribute('enable_secure_boot');
    }
    set enableSecureBoot(value) {
        this._enableSecureBoot = value;
    }
    resetEnableSecureBoot() {
        this._enableSecureBoot = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableSecureBootInput() {
        return this._enableSecureBoot;
    }
    get enableVtpm() {
        return this.getBooleanAttribute('enable_vtpm');
    }
    set enableVtpm(value) {
        this._enableVtpm = value;
    }
    resetEnableVtpm() {
        this._enableVtpm = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableVtpmInput() {
        return this._enableVtpm;
    }
}
exports.DataprocClusterClusterConfigGceClusterConfigShieldedInstanceConfigOutputReference = DataprocClusterClusterConfigGceClusterConfigShieldedInstanceConfigOutputReference;
_t = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigGceClusterConfigShieldedInstanceConfigOutputReference[_t] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigGceClusterConfigShieldedInstanceConfigOutputReference", version: "14.13.1" };
function dataprocClusterClusterConfigGceClusterConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        internal_ip_only: cdktf.booleanToTerraform(struct.internalIpOnly),
        metadata: cdktf.hashMapper(cdktf.stringToTerraform)(struct.metadata),
        network: cdktf.stringToTerraform(struct.network),
        service_account: cdktf.stringToTerraform(struct.serviceAccount),
        service_account_scopes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.serviceAccountScopes),
        subnetwork: cdktf.stringToTerraform(struct.subnetwork),
        tags: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.tags),
        zone: cdktf.stringToTerraform(struct.zone),
        confidential_instance_config: dataprocClusterClusterConfigGceClusterConfigConfidentialInstanceConfigToTerraform(struct.confidentialInstanceConfig),
        node_group_affinity: dataprocClusterClusterConfigGceClusterConfigNodeGroupAffinityToTerraform(struct.nodeGroupAffinity),
        reservation_affinity: dataprocClusterClusterConfigGceClusterConfigReservationAffinityToTerraform(struct.reservationAffinity),
        shielded_instance_config: dataprocClusterClusterConfigGceClusterConfigShieldedInstanceConfigToTerraform(struct.shieldedInstanceConfig),
    };
}
exports.dataprocClusterClusterConfigGceClusterConfigToTerraform = dataprocClusterClusterConfigGceClusterConfigToTerraform;
function dataprocClusterClusterConfigGceClusterConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        internal_ip_only: {
            value: cdktf.booleanToHclTerraform(struct.internalIpOnly),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        metadata: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.metadata),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        network: {
            value: cdktf.stringToHclTerraform(struct.network),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        service_account: {
            value: cdktf.stringToHclTerraform(struct.serviceAccount),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        service_account_scopes: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.serviceAccountScopes),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        subnetwork: {
            value: cdktf.stringToHclTerraform(struct.subnetwork),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        tags: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.tags),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        zone: {
            value: cdktf.stringToHclTerraform(struct.zone),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        confidential_instance_config: {
            value: dataprocClusterClusterConfigGceClusterConfigConfidentialInstanceConfigToHclTerraform(struct.confidentialInstanceConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocClusterClusterConfigGceClusterConfigConfidentialInstanceConfigList",
        },
        node_group_affinity: {
            value: dataprocClusterClusterConfigGceClusterConfigNodeGroupAffinityToHclTerraform(struct.nodeGroupAffinity),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocClusterClusterConfigGceClusterConfigNodeGroupAffinityList",
        },
        reservation_affinity: {
            value: dataprocClusterClusterConfigGceClusterConfigReservationAffinityToHclTerraform(struct.reservationAffinity),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocClusterClusterConfigGceClusterConfigReservationAffinityList",
        },
        shielded_instance_config: {
            value: dataprocClusterClusterConfigGceClusterConfigShieldedInstanceConfigToHclTerraform(struct.shieldedInstanceConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocClusterClusterConfigGceClusterConfigShieldedInstanceConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocClusterClusterConfigGceClusterConfigToHclTerraform = dataprocClusterClusterConfigGceClusterConfigToHclTerraform;
class DataprocClusterClusterConfigGceClusterConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // confidential_instance_config - computed: false, optional: true, required: false
        this._confidentialInstanceConfig = new DataprocClusterClusterConfigGceClusterConfigConfidentialInstanceConfigOutputReference(this, "confidential_instance_config");
        // node_group_affinity - computed: false, optional: true, required: false
        this._nodeGroupAffinity = new DataprocClusterClusterConfigGceClusterConfigNodeGroupAffinityOutputReference(this, "node_group_affinity");
        // reservation_affinity - computed: false, optional: true, required: false
        this._reservationAffinity = new DataprocClusterClusterConfigGceClusterConfigReservationAffinityOutputReference(this, "reservation_affinity");
        // shielded_instance_config - computed: false, optional: true, required: false
        this._shieldedInstanceConfig = new DataprocClusterClusterConfigGceClusterConfigShieldedInstanceConfigOutputReference(this, "shielded_instance_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._internalIpOnly !== undefined) {
            hasAnyValues = true;
            internalValueResult.internalIpOnly = this._internalIpOnly;
        }
        if (this._metadata !== undefined) {
            hasAnyValues = true;
            internalValueResult.metadata = this._metadata;
        }
        if (this._network !== undefined) {
            hasAnyValues = true;
            internalValueResult.network = this._network;
        }
        if (this._serviceAccount !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceAccount = this._serviceAccount;
        }
        if (this._serviceAccountScopes !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceAccountScopes = this._serviceAccountScopes;
        }
        if (this._subnetwork !== undefined) {
            hasAnyValues = true;
            internalValueResult.subnetwork = this._subnetwork;
        }
        if (this._tags !== undefined) {
            hasAnyValues = true;
            internalValueResult.tags = this._tags;
        }
        if (this._zone !== undefined) {
            hasAnyValues = true;
            internalValueResult.zone = this._zone;
        }
        if (this._confidentialInstanceConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.confidentialInstanceConfig = this._confidentialInstanceConfig?.internalValue;
        }
        if (this._nodeGroupAffinity?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.nodeGroupAffinity = this._nodeGroupAffinity?.internalValue;
        }
        if (this._reservationAffinity?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.reservationAffinity = this._reservationAffinity?.internalValue;
        }
        if (this._shieldedInstanceConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.shieldedInstanceConfig = this._shieldedInstanceConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._internalIpOnly = undefined;
            this._metadata = undefined;
            this._network = undefined;
            this._serviceAccount = undefined;
            this._serviceAccountScopes = undefined;
            this._subnetwork = undefined;
            this._tags = undefined;
            this._zone = undefined;
            this._confidentialInstanceConfig.internalValue = undefined;
            this._nodeGroupAffinity.internalValue = undefined;
            this._reservationAffinity.internalValue = undefined;
            this._shieldedInstanceConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._internalIpOnly = value.internalIpOnly;
            this._metadata = value.metadata;
            this._network = value.network;
            this._serviceAccount = value.serviceAccount;
            this._serviceAccountScopes = value.serviceAccountScopes;
            this._subnetwork = value.subnetwork;
            this._tags = value.tags;
            this._zone = value.zone;
            this._confidentialInstanceConfig.internalValue = value.confidentialInstanceConfig;
            this._nodeGroupAffinity.internalValue = value.nodeGroupAffinity;
            this._reservationAffinity.internalValue = value.reservationAffinity;
            this._shieldedInstanceConfig.internalValue = value.shieldedInstanceConfig;
        }
    }
    get internalIpOnly() {
        return this.getBooleanAttribute('internal_ip_only');
    }
    set internalIpOnly(value) {
        this._internalIpOnly = value;
    }
    resetInternalIpOnly() {
        this._internalIpOnly = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get internalIpOnlyInput() {
        return this._internalIpOnly;
    }
    get metadata() {
        return this.getStringMapAttribute('metadata');
    }
    set metadata(value) {
        this._metadata = value;
    }
    resetMetadata() {
        this._metadata = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get metadataInput() {
        return this._metadata;
    }
    get network() {
        return this.getStringAttribute('network');
    }
    set network(value) {
        this._network = value;
    }
    resetNetwork() {
        this._network = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkInput() {
        return this._network;
    }
    get serviceAccount() {
        return this.getStringAttribute('service_account');
    }
    set serviceAccount(value) {
        this._serviceAccount = value;
    }
    resetServiceAccount() {
        this._serviceAccount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceAccountInput() {
        return this._serviceAccount;
    }
    get serviceAccountScopes() {
        return cdktf.Fn.tolist(this.getListAttribute('service_account_scopes'));
    }
    set serviceAccountScopes(value) {
        this._serviceAccountScopes = value;
    }
    resetServiceAccountScopes() {
        this._serviceAccountScopes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceAccountScopesInput() {
        return this._serviceAccountScopes;
    }
    get subnetwork() {
        return this.getStringAttribute('subnetwork');
    }
    set subnetwork(value) {
        this._subnetwork = value;
    }
    resetSubnetwork() {
        this._subnetwork = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subnetworkInput() {
        return this._subnetwork;
    }
    get tags() {
        return cdktf.Fn.tolist(this.getListAttribute('tags'));
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get zone() {
        return this.getStringAttribute('zone');
    }
    set zone(value) {
        this._zone = value;
    }
    resetZone() {
        this._zone = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get zoneInput() {
        return this._zone;
    }
    get confidentialInstanceConfig() {
        return this._confidentialInstanceConfig;
    }
    putConfidentialInstanceConfig(value) {
        this._confidentialInstanceConfig.internalValue = value;
    }
    resetConfidentialInstanceConfig() {
        this._confidentialInstanceConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get confidentialInstanceConfigInput() {
        return this._confidentialInstanceConfig.internalValue;
    }
    get nodeGroupAffinity() {
        return this._nodeGroupAffinity;
    }
    putNodeGroupAffinity(value) {
        this._nodeGroupAffinity.internalValue = value;
    }
    resetNodeGroupAffinity() {
        this._nodeGroupAffinity.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nodeGroupAffinityInput() {
        return this._nodeGroupAffinity.internalValue;
    }
    get reservationAffinity() {
        return this._reservationAffinity;
    }
    putReservationAffinity(value) {
        this._reservationAffinity.internalValue = value;
    }
    resetReservationAffinity() {
        this._reservationAffinity.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get reservationAffinityInput() {
        return this._reservationAffinity.internalValue;
    }
    get shieldedInstanceConfig() {
        return this._shieldedInstanceConfig;
    }
    putShieldedInstanceConfig(value) {
        this._shieldedInstanceConfig.internalValue = value;
    }
    resetShieldedInstanceConfig() {
        this._shieldedInstanceConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get shieldedInstanceConfigInput() {
        return this._shieldedInstanceConfig.internalValue;
    }
}
exports.DataprocClusterClusterConfigGceClusterConfigOutputReference = DataprocClusterClusterConfigGceClusterConfigOutputReference;
_u = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigGceClusterConfigOutputReference[_u] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigGceClusterConfigOutputReference", version: "14.13.1" };
function dataprocClusterClusterConfigInitializationActionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        script: cdktf.stringToTerraform(struct.script),
        timeout_sec: cdktf.numberToTerraform(struct.timeoutSec),
    };
}
exports.dataprocClusterClusterConfigInitializationActionToTerraform = dataprocClusterClusterConfigInitializationActionToTerraform;
function dataprocClusterClusterConfigInitializationActionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        script: {
            value: cdktf.stringToHclTerraform(struct.script),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        timeout_sec: {
            value: cdktf.numberToHclTerraform(struct.timeoutSec),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocClusterClusterConfigInitializationActionToHclTerraform = dataprocClusterClusterConfigInitializationActionToHclTerraform;
class DataprocClusterClusterConfigInitializationActionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._script !== undefined) {
            hasAnyValues = true;
            internalValueResult.script = this._script;
        }
        if (this._timeoutSec !== undefined) {
            hasAnyValues = true;
            internalValueResult.timeoutSec = this._timeoutSec;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._script = undefined;
            this._timeoutSec = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._script = value.script;
            this._timeoutSec = value.timeoutSec;
        }
    }
    get script() {
        return this.getStringAttribute('script');
    }
    set script(value) {
        this._script = value;
    }
    // Temporarily expose input value. Use with caution.
    get scriptInput() {
        return this._script;
    }
    get timeoutSec() {
        return this.getNumberAttribute('timeout_sec');
    }
    set timeoutSec(value) {
        this._timeoutSec = value;
    }
    resetTimeoutSec() {
        this._timeoutSec = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutSecInput() {
        return this._timeoutSec;
    }
}
exports.DataprocClusterClusterConfigInitializationActionOutputReference = DataprocClusterClusterConfigInitializationActionOutputReference;
_v = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigInitializationActionOutputReference[_v] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigInitializationActionOutputReference", version: "14.13.1" };
class DataprocClusterClusterConfigInitializationActionList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataprocClusterClusterConfigInitializationActionOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataprocClusterClusterConfigInitializationActionList = DataprocClusterClusterConfigInitializationActionList;
_w = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigInitializationActionList[_w] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigInitializationActionList", version: "14.13.1" };
function dataprocClusterClusterConfigLifecycleConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        auto_delete_time: cdktf.stringToTerraform(struct.autoDeleteTime),
        idle_delete_ttl: cdktf.stringToTerraform(struct.idleDeleteTtl),
    };
}
exports.dataprocClusterClusterConfigLifecycleConfigToTerraform = dataprocClusterClusterConfigLifecycleConfigToTerraform;
function dataprocClusterClusterConfigLifecycleConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        auto_delete_time: {
            value: cdktf.stringToHclTerraform(struct.autoDeleteTime),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        idle_delete_ttl: {
            value: cdktf.stringToHclTerraform(struct.idleDeleteTtl),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocClusterClusterConfigLifecycleConfigToHclTerraform = dataprocClusterClusterConfigLifecycleConfigToHclTerraform;
class DataprocClusterClusterConfigLifecycleConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._autoDeleteTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.autoDeleteTime = this._autoDeleteTime;
        }
        if (this._idleDeleteTtl !== undefined) {
            hasAnyValues = true;
            internalValueResult.idleDeleteTtl = this._idleDeleteTtl;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._autoDeleteTime = undefined;
            this._idleDeleteTtl = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._autoDeleteTime = value.autoDeleteTime;
            this._idleDeleteTtl = value.idleDeleteTtl;
        }
    }
    get autoDeleteTime() {
        return this.getStringAttribute('auto_delete_time');
    }
    set autoDeleteTime(value) {
        this._autoDeleteTime = value;
    }
    resetAutoDeleteTime() {
        this._autoDeleteTime = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoDeleteTimeInput() {
        return this._autoDeleteTime;
    }
    get idleDeleteTtl() {
        return this.getStringAttribute('idle_delete_ttl');
    }
    set idleDeleteTtl(value) {
        this._idleDeleteTtl = value;
    }
    resetIdleDeleteTtl() {
        this._idleDeleteTtl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idleDeleteTtlInput() {
        return this._idleDeleteTtl;
    }
    // idle_start_time - computed: true, optional: false, required: false
    get idleStartTime() {
        return this.getStringAttribute('idle_start_time');
    }
}
exports.DataprocClusterClusterConfigLifecycleConfigOutputReference = DataprocClusterClusterConfigLifecycleConfigOutputReference;
_x = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigLifecycleConfigOutputReference[_x] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigLifecycleConfigOutputReference", version: "14.13.1" };
function dataprocClusterClusterConfigMasterConfigAcceleratorsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        accelerator_count: cdktf.numberToTerraform(struct.acceleratorCount),
        accelerator_type: cdktf.stringToTerraform(struct.acceleratorType),
    };
}
exports.dataprocClusterClusterConfigMasterConfigAcceleratorsToTerraform = dataprocClusterClusterConfigMasterConfigAcceleratorsToTerraform;
function dataprocClusterClusterConfigMasterConfigAcceleratorsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        accelerator_count: {
            value: cdktf.numberToHclTerraform(struct.acceleratorCount),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        accelerator_type: {
            value: cdktf.stringToHclTerraform(struct.acceleratorType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocClusterClusterConfigMasterConfigAcceleratorsToHclTerraform = dataprocClusterClusterConfigMasterConfigAcceleratorsToHclTerraform;
class DataprocClusterClusterConfigMasterConfigAcceleratorsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._acceleratorCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.acceleratorCount = this._acceleratorCount;
        }
        if (this._acceleratorType !== undefined) {
            hasAnyValues = true;
            internalValueResult.acceleratorType = this._acceleratorType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._acceleratorCount = undefined;
            this._acceleratorType = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._acceleratorCount = value.acceleratorCount;
            this._acceleratorType = value.acceleratorType;
        }
    }
    get acceleratorCount() {
        return this.getNumberAttribute('accelerator_count');
    }
    set acceleratorCount(value) {
        this._acceleratorCount = value;
    }
    // Temporarily expose input value. Use with caution.
    get acceleratorCountInput() {
        return this._acceleratorCount;
    }
    get acceleratorType() {
        return this.getStringAttribute('accelerator_type');
    }
    set acceleratorType(value) {
        this._acceleratorType = value;
    }
    // Temporarily expose input value. Use with caution.
    get acceleratorTypeInput() {
        return this._acceleratorType;
    }
}
exports.DataprocClusterClusterConfigMasterConfigAcceleratorsOutputReference = DataprocClusterClusterConfigMasterConfigAcceleratorsOutputReference;
_y = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigMasterConfigAcceleratorsOutputReference[_y] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigMasterConfigAcceleratorsOutputReference", version: "14.13.1" };
class DataprocClusterClusterConfigMasterConfigAcceleratorsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataprocClusterClusterConfigMasterConfigAcceleratorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataprocClusterClusterConfigMasterConfigAcceleratorsList = DataprocClusterClusterConfigMasterConfigAcceleratorsList;
_z = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigMasterConfigAcceleratorsList[_z] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigMasterConfigAcceleratorsList", version: "14.13.1" };
function dataprocClusterClusterConfigMasterConfigDiskConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        boot_disk_size_gb: cdktf.numberToTerraform(struct.bootDiskSizeGb),
        boot_disk_type: cdktf.stringToTerraform(struct.bootDiskType),
        local_ssd_interface: cdktf.stringToTerraform(struct.localSsdInterface),
        num_local_ssds: cdktf.numberToTerraform(struct.numLocalSsds),
    };
}
exports.dataprocClusterClusterConfigMasterConfigDiskConfigToTerraform = dataprocClusterClusterConfigMasterConfigDiskConfigToTerraform;
function dataprocClusterClusterConfigMasterConfigDiskConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        boot_disk_size_gb: {
            value: cdktf.numberToHclTerraform(struct.bootDiskSizeGb),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        boot_disk_type: {
            value: cdktf.stringToHclTerraform(struct.bootDiskType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        local_ssd_interface: {
            value: cdktf.stringToHclTerraform(struct.localSsdInterface),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        num_local_ssds: {
            value: cdktf.numberToHclTerraform(struct.numLocalSsds),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocClusterClusterConfigMasterConfigDiskConfigToHclTerraform = dataprocClusterClusterConfigMasterConfigDiskConfigToHclTerraform;
class DataprocClusterClusterConfigMasterConfigDiskConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bootDiskSizeGb !== undefined) {
            hasAnyValues = true;
            internalValueResult.bootDiskSizeGb = this._bootDiskSizeGb;
        }
        if (this._bootDiskType !== undefined) {
            hasAnyValues = true;
            internalValueResult.bootDiskType = this._bootDiskType;
        }
        if (this._localSsdInterface !== undefined) {
            hasAnyValues = true;
            internalValueResult.localSsdInterface = this._localSsdInterface;
        }
        if (this._numLocalSsds !== undefined) {
            hasAnyValues = true;
            internalValueResult.numLocalSsds = this._numLocalSsds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bootDiskSizeGb = undefined;
            this._bootDiskType = undefined;
            this._localSsdInterface = undefined;
            this._numLocalSsds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bootDiskSizeGb = value.bootDiskSizeGb;
            this._bootDiskType = value.bootDiskType;
            this._localSsdInterface = value.localSsdInterface;
            this._numLocalSsds = value.numLocalSsds;
        }
    }
    get bootDiskSizeGb() {
        return this.getNumberAttribute('boot_disk_size_gb');
    }
    set bootDiskSizeGb(value) {
        this._bootDiskSizeGb = value;
    }
    resetBootDiskSizeGb() {
        this._bootDiskSizeGb = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bootDiskSizeGbInput() {
        return this._bootDiskSizeGb;
    }
    get bootDiskType() {
        return this.getStringAttribute('boot_disk_type');
    }
    set bootDiskType(value) {
        this._bootDiskType = value;
    }
    resetBootDiskType() {
        this._bootDiskType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bootDiskTypeInput() {
        return this._bootDiskType;
    }
    get localSsdInterface() {
        return this.getStringAttribute('local_ssd_interface');
    }
    set localSsdInterface(value) {
        this._localSsdInterface = value;
    }
    resetLocalSsdInterface() {
        this._localSsdInterface = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get localSsdInterfaceInput() {
        return this._localSsdInterface;
    }
    get numLocalSsds() {
        return this.getNumberAttribute('num_local_ssds');
    }
    set numLocalSsds(value) {
        this._numLocalSsds = value;
    }
    resetNumLocalSsds() {
        this._numLocalSsds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numLocalSsdsInput() {
        return this._numLocalSsds;
    }
}
exports.DataprocClusterClusterConfigMasterConfigDiskConfigOutputReference = DataprocClusterClusterConfigMasterConfigDiskConfigOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigMasterConfigDiskConfigOutputReference[_0] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigMasterConfigDiskConfigOutputReference", version: "14.13.1" };
function dataprocClusterClusterConfigMasterConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        image_uri: cdktf.stringToTerraform(struct.imageUri),
        machine_type: cdktf.stringToTerraform(struct.machineType),
        min_cpu_platform: cdktf.stringToTerraform(struct.minCpuPlatform),
        num_instances: cdktf.numberToTerraform(struct.numInstances),
        accelerators: cdktf.listMapper(dataprocClusterClusterConfigMasterConfigAcceleratorsToTerraform, true)(struct.accelerators),
        disk_config: dataprocClusterClusterConfigMasterConfigDiskConfigToTerraform(struct.diskConfig),
    };
}
exports.dataprocClusterClusterConfigMasterConfigToTerraform = dataprocClusterClusterConfigMasterConfigToTerraform;
function dataprocClusterClusterConfigMasterConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        image_uri: {
            value: cdktf.stringToHclTerraform(struct.imageUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        machine_type: {
            value: cdktf.stringToHclTerraform(struct.machineType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        min_cpu_platform: {
            value: cdktf.stringToHclTerraform(struct.minCpuPlatform),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        num_instances: {
            value: cdktf.numberToHclTerraform(struct.numInstances),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        accelerators: {
            value: cdktf.listMapperHcl(dataprocClusterClusterConfigMasterConfigAcceleratorsToHclTerraform, true)(struct.accelerators),
            isBlock: true,
            type: "set",
            storageClassType: "DataprocClusterClusterConfigMasterConfigAcceleratorsList",
        },
        disk_config: {
            value: dataprocClusterClusterConfigMasterConfigDiskConfigToHclTerraform(struct.diskConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocClusterClusterConfigMasterConfigDiskConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocClusterClusterConfigMasterConfigToHclTerraform = dataprocClusterClusterConfigMasterConfigToHclTerraform;
class DataprocClusterClusterConfigMasterConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // accelerators - computed: false, optional: true, required: false
        this._accelerators = new DataprocClusterClusterConfigMasterConfigAcceleratorsList(this, "accelerators", true);
        // disk_config - computed: false, optional: true, required: false
        this._diskConfig = new DataprocClusterClusterConfigMasterConfigDiskConfigOutputReference(this, "disk_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._imageUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageUri = this._imageUri;
        }
        if (this._machineType !== undefined) {
            hasAnyValues = true;
            internalValueResult.machineType = this._machineType;
        }
        if (this._minCpuPlatform !== undefined) {
            hasAnyValues = true;
            internalValueResult.minCpuPlatform = this._minCpuPlatform;
        }
        if (this._numInstances !== undefined) {
            hasAnyValues = true;
            internalValueResult.numInstances = this._numInstances;
        }
        if (this._accelerators?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.accelerators = this._accelerators?.internalValue;
        }
        if (this._diskConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.diskConfig = this._diskConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._imageUri = undefined;
            this._machineType = undefined;
            this._minCpuPlatform = undefined;
            this._numInstances = undefined;
            this._accelerators.internalValue = undefined;
            this._diskConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._imageUri = value.imageUri;
            this._machineType = value.machineType;
            this._minCpuPlatform = value.minCpuPlatform;
            this._numInstances = value.numInstances;
            this._accelerators.internalValue = value.accelerators;
            this._diskConfig.internalValue = value.diskConfig;
        }
    }
    get imageUri() {
        return this.getStringAttribute('image_uri');
    }
    set imageUri(value) {
        this._imageUri = value;
    }
    resetImageUri() {
        this._imageUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageUriInput() {
        return this._imageUri;
    }
    // instance_names - computed: true, optional: false, required: false
    get instanceNames() {
        return this.getListAttribute('instance_names');
    }
    get machineType() {
        return this.getStringAttribute('machine_type');
    }
    set machineType(value) {
        this._machineType = value;
    }
    resetMachineType() {
        this._machineType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get machineTypeInput() {
        return this._machineType;
    }
    get minCpuPlatform() {
        return this.getStringAttribute('min_cpu_platform');
    }
    set minCpuPlatform(value) {
        this._minCpuPlatform = value;
    }
    resetMinCpuPlatform() {
        this._minCpuPlatform = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minCpuPlatformInput() {
        return this._minCpuPlatform;
    }
    get numInstances() {
        return this.getNumberAttribute('num_instances');
    }
    set numInstances(value) {
        this._numInstances = value;
    }
    resetNumInstances() {
        this._numInstances = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numInstancesInput() {
        return this._numInstances;
    }
    get accelerators() {
        return this._accelerators;
    }
    putAccelerators(value) {
        this._accelerators.internalValue = value;
    }
    resetAccelerators() {
        this._accelerators.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get acceleratorsInput() {
        return this._accelerators.internalValue;
    }
    get diskConfig() {
        return this._diskConfig;
    }
    putDiskConfig(value) {
        this._diskConfig.internalValue = value;
    }
    resetDiskConfig() {
        this._diskConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get diskConfigInput() {
        return this._diskConfig.internalValue;
    }
}
exports.DataprocClusterClusterConfigMasterConfigOutputReference = DataprocClusterClusterConfigMasterConfigOutputReference;
_1 = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigMasterConfigOutputReference[_1] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigMasterConfigOutputReference", version: "14.13.1" };
function dataprocClusterClusterConfigMetastoreConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        dataproc_metastore_service: cdktf.stringToTerraform(struct.dataprocMetastoreService),
    };
}
exports.dataprocClusterClusterConfigMetastoreConfigToTerraform = dataprocClusterClusterConfigMetastoreConfigToTerraform;
function dataprocClusterClusterConfigMetastoreConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        dataproc_metastore_service: {
            value: cdktf.stringToHclTerraform(struct.dataprocMetastoreService),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocClusterClusterConfigMetastoreConfigToHclTerraform = dataprocClusterClusterConfigMetastoreConfigToHclTerraform;
class DataprocClusterClusterConfigMetastoreConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dataprocMetastoreService !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataprocMetastoreService = this._dataprocMetastoreService;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._dataprocMetastoreService = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._dataprocMetastoreService = value.dataprocMetastoreService;
        }
    }
    get dataprocMetastoreService() {
        return this.getStringAttribute('dataproc_metastore_service');
    }
    set dataprocMetastoreService(value) {
        this._dataprocMetastoreService = value;
    }
    // Temporarily expose input value. Use with caution.
    get dataprocMetastoreServiceInput() {
        return this._dataprocMetastoreService;
    }
}
exports.DataprocClusterClusterConfigMetastoreConfigOutputReference = DataprocClusterClusterConfigMetastoreConfigOutputReference;
_2 = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigMetastoreConfigOutputReference[_2] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigMetastoreConfigOutputReference", version: "14.13.1" };
function dataprocClusterClusterConfigPreemptibleWorkerConfigDiskConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        boot_disk_size_gb: cdktf.numberToTerraform(struct.bootDiskSizeGb),
        boot_disk_type: cdktf.stringToTerraform(struct.bootDiskType),
        local_ssd_interface: cdktf.stringToTerraform(struct.localSsdInterface),
        num_local_ssds: cdktf.numberToTerraform(struct.numLocalSsds),
    };
}
exports.dataprocClusterClusterConfigPreemptibleWorkerConfigDiskConfigToTerraform = dataprocClusterClusterConfigPreemptibleWorkerConfigDiskConfigToTerraform;
function dataprocClusterClusterConfigPreemptibleWorkerConfigDiskConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        boot_disk_size_gb: {
            value: cdktf.numberToHclTerraform(struct.bootDiskSizeGb),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        boot_disk_type: {
            value: cdktf.stringToHclTerraform(struct.bootDiskType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        local_ssd_interface: {
            value: cdktf.stringToHclTerraform(struct.localSsdInterface),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        num_local_ssds: {
            value: cdktf.numberToHclTerraform(struct.numLocalSsds),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocClusterClusterConfigPreemptibleWorkerConfigDiskConfigToHclTerraform = dataprocClusterClusterConfigPreemptibleWorkerConfigDiskConfigToHclTerraform;
class DataprocClusterClusterConfigPreemptibleWorkerConfigDiskConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bootDiskSizeGb !== undefined) {
            hasAnyValues = true;
            internalValueResult.bootDiskSizeGb = this._bootDiskSizeGb;
        }
        if (this._bootDiskType !== undefined) {
            hasAnyValues = true;
            internalValueResult.bootDiskType = this._bootDiskType;
        }
        if (this._localSsdInterface !== undefined) {
            hasAnyValues = true;
            internalValueResult.localSsdInterface = this._localSsdInterface;
        }
        if (this._numLocalSsds !== undefined) {
            hasAnyValues = true;
            internalValueResult.numLocalSsds = this._numLocalSsds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bootDiskSizeGb = undefined;
            this._bootDiskType = undefined;
            this._localSsdInterface = undefined;
            this._numLocalSsds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bootDiskSizeGb = value.bootDiskSizeGb;
            this._bootDiskType = value.bootDiskType;
            this._localSsdInterface = value.localSsdInterface;
            this._numLocalSsds = value.numLocalSsds;
        }
    }
    get bootDiskSizeGb() {
        return this.getNumberAttribute('boot_disk_size_gb');
    }
    set bootDiskSizeGb(value) {
        this._bootDiskSizeGb = value;
    }
    resetBootDiskSizeGb() {
        this._bootDiskSizeGb = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bootDiskSizeGbInput() {
        return this._bootDiskSizeGb;
    }
    get bootDiskType() {
        return this.getStringAttribute('boot_disk_type');
    }
    set bootDiskType(value) {
        this._bootDiskType = value;
    }
    resetBootDiskType() {
        this._bootDiskType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bootDiskTypeInput() {
        return this._bootDiskType;
    }
    get localSsdInterface() {
        return this.getStringAttribute('local_ssd_interface');
    }
    set localSsdInterface(value) {
        this._localSsdInterface = value;
    }
    resetLocalSsdInterface() {
        this._localSsdInterface = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get localSsdInterfaceInput() {
        return this._localSsdInterface;
    }
    get numLocalSsds() {
        return this.getNumberAttribute('num_local_ssds');
    }
    set numLocalSsds(value) {
        this._numLocalSsds = value;
    }
    resetNumLocalSsds() {
        this._numLocalSsds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numLocalSsdsInput() {
        return this._numLocalSsds;
    }
}
exports.DataprocClusterClusterConfigPreemptibleWorkerConfigDiskConfigOutputReference = DataprocClusterClusterConfigPreemptibleWorkerConfigDiskConfigOutputReference;
_3 = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigPreemptibleWorkerConfigDiskConfigOutputReference[_3] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigPreemptibleWorkerConfigDiskConfigOutputReference", version: "14.13.1" };
function dataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionResultsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.dataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionResultsToTerraform = dataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionResultsToTerraform;
function dataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionResultsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.dataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionResultsToHclTerraform = dataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionResultsToHclTerraform;
class DataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionResultsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // machine_type - computed: true, optional: false, required: false
    get machineType() {
        return this.getStringAttribute('machine_type');
    }
    // vm_count - computed: true, optional: false, required: false
    get vmCount() {
        return this.getNumberAttribute('vm_count');
    }
}
exports.DataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionResultsOutputReference = DataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionResultsOutputReference;
_4 = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionResultsOutputReference[_4] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionResultsOutputReference", version: "14.13.1" };
class DataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionResultsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionResultsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionResultsList = DataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionResultsList;
_5 = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionResultsList[_5] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionResultsList", version: "14.13.1" };
function dataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionListStructToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        machine_types: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.machineTypes),
        rank: cdktf.numberToTerraform(struct.rank),
    };
}
exports.dataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionListStructToTerraform = dataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionListStructToTerraform;
function dataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionListStructToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        machine_types: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.machineTypes),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        rank: {
            value: cdktf.numberToHclTerraform(struct.rank),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionListStructToHclTerraform = dataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionListStructToHclTerraform;
class DataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionListStructOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._machineTypes !== undefined) {
            hasAnyValues = true;
            internalValueResult.machineTypes = this._machineTypes;
        }
        if (this._rank !== undefined) {
            hasAnyValues = true;
            internalValueResult.rank = this._rank;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._machineTypes = undefined;
            this._rank = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._machineTypes = value.machineTypes;
            this._rank = value.rank;
        }
    }
    get machineTypes() {
        return this.getListAttribute('machine_types');
    }
    set machineTypes(value) {
        this._machineTypes = value;
    }
    resetMachineTypes() {
        this._machineTypes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get machineTypesInput() {
        return this._machineTypes;
    }
    get rank() {
        return this.getNumberAttribute('rank');
    }
    set rank(value) {
        this._rank = value;
    }
    resetRank() {
        this._rank = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get rankInput() {
        return this._rank;
    }
}
exports.DataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionListStructOutputReference = DataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionListStructOutputReference;
_6 = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionListStructOutputReference[_6] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionListStructOutputReference", version: "14.13.1" };
class DataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionListStructList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionListStructOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionListStructList = DataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionListStructList;
_7 = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionListStructList[_7] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionListStructList", version: "14.13.1" };
function dataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyProvisioningModelMixToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        standard_capacity_base: cdktf.numberToTerraform(struct.standardCapacityBase),
        standard_capacity_percent_above_base: cdktf.numberToTerraform(struct.standardCapacityPercentAboveBase),
    };
}
exports.dataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyProvisioningModelMixToTerraform = dataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyProvisioningModelMixToTerraform;
function dataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyProvisioningModelMixToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        standard_capacity_base: {
            value: cdktf.numberToHclTerraform(struct.standardCapacityBase),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        standard_capacity_percent_above_base: {
            value: cdktf.numberToHclTerraform(struct.standardCapacityPercentAboveBase),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyProvisioningModelMixToHclTerraform = dataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyProvisioningModelMixToHclTerraform;
class DataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyProvisioningModelMixOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._standardCapacityBase !== undefined) {
            hasAnyValues = true;
            internalValueResult.standardCapacityBase = this._standardCapacityBase;
        }
        if (this._standardCapacityPercentAboveBase !== undefined) {
            hasAnyValues = true;
            internalValueResult.standardCapacityPercentAboveBase = this._standardCapacityPercentAboveBase;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._standardCapacityBase = undefined;
            this._standardCapacityPercentAboveBase = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._standardCapacityBase = value.standardCapacityBase;
            this._standardCapacityPercentAboveBase = value.standardCapacityPercentAboveBase;
        }
    }
    get standardCapacityBase() {
        return this.getNumberAttribute('standard_capacity_base');
    }
    set standardCapacityBase(value) {
        this._standardCapacityBase = value;
    }
    resetStandardCapacityBase() {
        this._standardCapacityBase = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get standardCapacityBaseInput() {
        return this._standardCapacityBase;
    }
    get standardCapacityPercentAboveBase() {
        return this.getNumberAttribute('standard_capacity_percent_above_base');
    }
    set standardCapacityPercentAboveBase(value) {
        this._standardCapacityPercentAboveBase = value;
    }
    resetStandardCapacityPercentAboveBase() {
        this._standardCapacityPercentAboveBase = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get standardCapacityPercentAboveBaseInput() {
        return this._standardCapacityPercentAboveBase;
    }
}
exports.DataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyProvisioningModelMixOutputReference = DataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyProvisioningModelMixOutputReference;
_8 = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyProvisioningModelMixOutputReference[_8] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyProvisioningModelMixOutputReference", version: "14.13.1" };
function dataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        instance_selection_list: cdktf.listMapper(dataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionListStructToTerraform, true)(struct.instanceSelectionList),
        provisioning_model_mix: dataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyProvisioningModelMixToTerraform(struct.provisioningModelMix),
    };
}
exports.dataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyToTerraform = dataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyToTerraform;
function dataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        instance_selection_list: {
            value: cdktf.listMapperHcl(dataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionListStructToHclTerraform, true)(struct.instanceSelectionList),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionListStructList",
        },
        provisioning_model_mix: {
            value: dataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyProvisioningModelMixToHclTerraform(struct.provisioningModelMix),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyProvisioningModelMixList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyToHclTerraform = dataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyToHclTerraform;
class DataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // instance_selection_results - computed: true, optional: false, required: false
        this._instanceSelectionResults = new DataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionResultsList(this, "instance_selection_results", false);
        // instance_selection_list - computed: false, optional: true, required: false
        this._instanceSelectionList = new DataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyInstanceSelectionListStructList(this, "instance_selection_list", false);
        // provisioning_model_mix - computed: false, optional: true, required: false
        this._provisioningModelMix = new DataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyProvisioningModelMixOutputReference(this, "provisioning_model_mix");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._instanceSelectionList?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceSelectionList = this._instanceSelectionList?.internalValue;
        }
        if (this._provisioningModelMix?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.provisioningModelMix = this._provisioningModelMix?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._instanceSelectionList.internalValue = undefined;
            this._provisioningModelMix.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._instanceSelectionList.internalValue = value.instanceSelectionList;
            this._provisioningModelMix.internalValue = value.provisioningModelMix;
        }
    }
    get instanceSelectionResults() {
        return this._instanceSelectionResults;
    }
    get instanceSelectionList() {
        return this._instanceSelectionList;
    }
    putInstanceSelectionList(value) {
        this._instanceSelectionList.internalValue = value;
    }
    resetInstanceSelectionList() {
        this._instanceSelectionList.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceSelectionListInput() {
        return this._instanceSelectionList.internalValue;
    }
    get provisioningModelMix() {
        return this._provisioningModelMix;
    }
    putProvisioningModelMix(value) {
        this._provisioningModelMix.internalValue = value;
    }
    resetProvisioningModelMix() {
        this._provisioningModelMix.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get provisioningModelMixInput() {
        return this._provisioningModelMix.internalValue;
    }
}
exports.DataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyOutputReference = DataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyOutputReference;
_9 = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyOutputReference[_9] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyOutputReference", version: "14.13.1" };
function dataprocClusterClusterConfigPreemptibleWorkerConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        num_instances: cdktf.numberToTerraform(struct.numInstances),
        preemptibility: cdktf.stringToTerraform(struct.preemptibility),
        disk_config: dataprocClusterClusterConfigPreemptibleWorkerConfigDiskConfigToTerraform(struct.diskConfig),
        instance_flexibility_policy: dataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyToTerraform(struct.instanceFlexibilityPolicy),
    };
}
exports.dataprocClusterClusterConfigPreemptibleWorkerConfigToTerraform = dataprocClusterClusterConfigPreemptibleWorkerConfigToTerraform;
function dataprocClusterClusterConfigPreemptibleWorkerConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        num_instances: {
            value: cdktf.numberToHclTerraform(struct.numInstances),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        preemptibility: {
            value: cdktf.stringToHclTerraform(struct.preemptibility),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        disk_config: {
            value: dataprocClusterClusterConfigPreemptibleWorkerConfigDiskConfigToHclTerraform(struct.diskConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocClusterClusterConfigPreemptibleWorkerConfigDiskConfigList",
        },
        instance_flexibility_policy: {
            value: dataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyToHclTerraform(struct.instanceFlexibilityPolicy),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocClusterClusterConfigPreemptibleWorkerConfigToHclTerraform = dataprocClusterClusterConfigPreemptibleWorkerConfigToHclTerraform;
class DataprocClusterClusterConfigPreemptibleWorkerConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // disk_config - computed: false, optional: true, required: false
        this._diskConfig = new DataprocClusterClusterConfigPreemptibleWorkerConfigDiskConfigOutputReference(this, "disk_config");
        // instance_flexibility_policy - computed: false, optional: true, required: false
        this._instanceFlexibilityPolicy = new DataprocClusterClusterConfigPreemptibleWorkerConfigInstanceFlexibilityPolicyOutputReference(this, "instance_flexibility_policy");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._numInstances !== undefined) {
            hasAnyValues = true;
            internalValueResult.numInstances = this._numInstances;
        }
        if (this._preemptibility !== undefined) {
            hasAnyValues = true;
            internalValueResult.preemptibility = this._preemptibility;
        }
        if (this._diskConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.diskConfig = this._diskConfig?.internalValue;
        }
        if (this._instanceFlexibilityPolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceFlexibilityPolicy = this._instanceFlexibilityPolicy?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._numInstances = undefined;
            this._preemptibility = undefined;
            this._diskConfig.internalValue = undefined;
            this._instanceFlexibilityPolicy.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._numInstances = value.numInstances;
            this._preemptibility = value.preemptibility;
            this._diskConfig.internalValue = value.diskConfig;
            this._instanceFlexibilityPolicy.internalValue = value.instanceFlexibilityPolicy;
        }
    }
    // instance_names - computed: true, optional: false, required: false
    get instanceNames() {
        return this.getListAttribute('instance_names');
    }
    get numInstances() {
        return this.getNumberAttribute('num_instances');
    }
    set numInstances(value) {
        this._numInstances = value;
    }
    resetNumInstances() {
        this._numInstances = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numInstancesInput() {
        return this._numInstances;
    }
    get preemptibility() {
        return this.getStringAttribute('preemptibility');
    }
    set preemptibility(value) {
        this._preemptibility = value;
    }
    resetPreemptibility() {
        this._preemptibility = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get preemptibilityInput() {
        return this._preemptibility;
    }
    get diskConfig() {
        return this._diskConfig;
    }
    putDiskConfig(value) {
        this._diskConfig.internalValue = value;
    }
    resetDiskConfig() {
        this._diskConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get diskConfigInput() {
        return this._diskConfig.internalValue;
    }
    get instanceFlexibilityPolicy() {
        return this._instanceFlexibilityPolicy;
    }
    putInstanceFlexibilityPolicy(value) {
        this._instanceFlexibilityPolicy.internalValue = value;
    }
    resetInstanceFlexibilityPolicy() {
        this._instanceFlexibilityPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceFlexibilityPolicyInput() {
        return this._instanceFlexibilityPolicy.internalValue;
    }
}
exports.DataprocClusterClusterConfigPreemptibleWorkerConfigOutputReference = DataprocClusterClusterConfigPreemptibleWorkerConfigOutputReference;
_10 = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigPreemptibleWorkerConfigOutputReference[_10] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigPreemptibleWorkerConfigOutputReference", version: "14.13.1" };
function dataprocClusterClusterConfigSecurityConfigKerberosConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cross_realm_trust_admin_server: cdktf.stringToTerraform(struct.crossRealmTrustAdminServer),
        cross_realm_trust_kdc: cdktf.stringToTerraform(struct.crossRealmTrustKdc),
        cross_realm_trust_realm: cdktf.stringToTerraform(struct.crossRealmTrustRealm),
        cross_realm_trust_shared_password_uri: cdktf.stringToTerraform(struct.crossRealmTrustSharedPasswordUri),
        enable_kerberos: cdktf.booleanToTerraform(struct.enableKerberos),
        kdc_db_key_uri: cdktf.stringToTerraform(struct.kdcDbKeyUri),
        key_password_uri: cdktf.stringToTerraform(struct.keyPasswordUri),
        keystore_password_uri: cdktf.stringToTerraform(struct.keystorePasswordUri),
        keystore_uri: cdktf.stringToTerraform(struct.keystoreUri),
        kms_key_uri: cdktf.stringToTerraform(struct.kmsKeyUri),
        realm: cdktf.stringToTerraform(struct.realm),
        root_principal_password_uri: cdktf.stringToTerraform(struct.rootPrincipalPasswordUri),
        tgt_lifetime_hours: cdktf.numberToTerraform(struct.tgtLifetimeHours),
        truststore_password_uri: cdktf.stringToTerraform(struct.truststorePasswordUri),
        truststore_uri: cdktf.stringToTerraform(struct.truststoreUri),
    };
}
exports.dataprocClusterClusterConfigSecurityConfigKerberosConfigToTerraform = dataprocClusterClusterConfigSecurityConfigKerberosConfigToTerraform;
function dataprocClusterClusterConfigSecurityConfigKerberosConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cross_realm_trust_admin_server: {
            value: cdktf.stringToHclTerraform(struct.crossRealmTrustAdminServer),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cross_realm_trust_kdc: {
            value: cdktf.stringToHclTerraform(struct.crossRealmTrustKdc),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cross_realm_trust_realm: {
            value: cdktf.stringToHclTerraform(struct.crossRealmTrustRealm),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        cross_realm_trust_shared_password_uri: {
            value: cdktf.stringToHclTerraform(struct.crossRealmTrustSharedPasswordUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        enable_kerberos: {
            value: cdktf.booleanToHclTerraform(struct.enableKerberos),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        kdc_db_key_uri: {
            value: cdktf.stringToHclTerraform(struct.kdcDbKeyUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        key_password_uri: {
            value: cdktf.stringToHclTerraform(struct.keyPasswordUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        keystore_password_uri: {
            value: cdktf.stringToHclTerraform(struct.keystorePasswordUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        keystore_uri: {
            value: cdktf.stringToHclTerraform(struct.keystoreUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        kms_key_uri: {
            value: cdktf.stringToHclTerraform(struct.kmsKeyUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        realm: {
            value: cdktf.stringToHclTerraform(struct.realm),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        root_principal_password_uri: {
            value: cdktf.stringToHclTerraform(struct.rootPrincipalPasswordUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        tgt_lifetime_hours: {
            value: cdktf.numberToHclTerraform(struct.tgtLifetimeHours),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        truststore_password_uri: {
            value: cdktf.stringToHclTerraform(struct.truststorePasswordUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        truststore_uri: {
            value: cdktf.stringToHclTerraform(struct.truststoreUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocClusterClusterConfigSecurityConfigKerberosConfigToHclTerraform = dataprocClusterClusterConfigSecurityConfigKerberosConfigToHclTerraform;
class DataprocClusterClusterConfigSecurityConfigKerberosConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._crossRealmTrustAdminServer !== undefined) {
            hasAnyValues = true;
            internalValueResult.crossRealmTrustAdminServer = this._crossRealmTrustAdminServer;
        }
        if (this._crossRealmTrustKdc !== undefined) {
            hasAnyValues = true;
            internalValueResult.crossRealmTrustKdc = this._crossRealmTrustKdc;
        }
        if (this._crossRealmTrustRealm !== undefined) {
            hasAnyValues = true;
            internalValueResult.crossRealmTrustRealm = this._crossRealmTrustRealm;
        }
        if (this._crossRealmTrustSharedPasswordUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.crossRealmTrustSharedPasswordUri = this._crossRealmTrustSharedPasswordUri;
        }
        if (this._enableKerberos !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableKerberos = this._enableKerberos;
        }
        if (this._kdcDbKeyUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.kdcDbKeyUri = this._kdcDbKeyUri;
        }
        if (this._keyPasswordUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.keyPasswordUri = this._keyPasswordUri;
        }
        if (this._keystorePasswordUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.keystorePasswordUri = this._keystorePasswordUri;
        }
        if (this._keystoreUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.keystoreUri = this._keystoreUri;
        }
        if (this._kmsKeyUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyUri = this._kmsKeyUri;
        }
        if (this._realm !== undefined) {
            hasAnyValues = true;
            internalValueResult.realm = this._realm;
        }
        if (this._rootPrincipalPasswordUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.rootPrincipalPasswordUri = this._rootPrincipalPasswordUri;
        }
        if (this._tgtLifetimeHours !== undefined) {
            hasAnyValues = true;
            internalValueResult.tgtLifetimeHours = this._tgtLifetimeHours;
        }
        if (this._truststorePasswordUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.truststorePasswordUri = this._truststorePasswordUri;
        }
        if (this._truststoreUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.truststoreUri = this._truststoreUri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._crossRealmTrustAdminServer = undefined;
            this._crossRealmTrustKdc = undefined;
            this._crossRealmTrustRealm = undefined;
            this._crossRealmTrustSharedPasswordUri = undefined;
            this._enableKerberos = undefined;
            this._kdcDbKeyUri = undefined;
            this._keyPasswordUri = undefined;
            this._keystorePasswordUri = undefined;
            this._keystoreUri = undefined;
            this._kmsKeyUri = undefined;
            this._realm = undefined;
            this._rootPrincipalPasswordUri = undefined;
            this._tgtLifetimeHours = undefined;
            this._truststorePasswordUri = undefined;
            this._truststoreUri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._crossRealmTrustAdminServer = value.crossRealmTrustAdminServer;
            this._crossRealmTrustKdc = value.crossRealmTrustKdc;
            this._crossRealmTrustRealm = value.crossRealmTrustRealm;
            this._crossRealmTrustSharedPasswordUri = value.crossRealmTrustSharedPasswordUri;
            this._enableKerberos = value.enableKerberos;
            this._kdcDbKeyUri = value.kdcDbKeyUri;
            this._keyPasswordUri = value.keyPasswordUri;
            this._keystorePasswordUri = value.keystorePasswordUri;
            this._keystoreUri = value.keystoreUri;
            this._kmsKeyUri = value.kmsKeyUri;
            this._realm = value.realm;
            this._rootPrincipalPasswordUri = value.rootPrincipalPasswordUri;
            this._tgtLifetimeHours = value.tgtLifetimeHours;
            this._truststorePasswordUri = value.truststorePasswordUri;
            this._truststoreUri = value.truststoreUri;
        }
    }
    get crossRealmTrustAdminServer() {
        return this.getStringAttribute('cross_realm_trust_admin_server');
    }
    set crossRealmTrustAdminServer(value) {
        this._crossRealmTrustAdminServer = value;
    }
    resetCrossRealmTrustAdminServer() {
        this._crossRealmTrustAdminServer = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get crossRealmTrustAdminServerInput() {
        return this._crossRealmTrustAdminServer;
    }
    get crossRealmTrustKdc() {
        return this.getStringAttribute('cross_realm_trust_kdc');
    }
    set crossRealmTrustKdc(value) {
        this._crossRealmTrustKdc = value;
    }
    resetCrossRealmTrustKdc() {
        this._crossRealmTrustKdc = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get crossRealmTrustKdcInput() {
        return this._crossRealmTrustKdc;
    }
    get crossRealmTrustRealm() {
        return this.getStringAttribute('cross_realm_trust_realm');
    }
    set crossRealmTrustRealm(value) {
        this._crossRealmTrustRealm = value;
    }
    resetCrossRealmTrustRealm() {
        this._crossRealmTrustRealm = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get crossRealmTrustRealmInput() {
        return this._crossRealmTrustRealm;
    }
    get crossRealmTrustSharedPasswordUri() {
        return this.getStringAttribute('cross_realm_trust_shared_password_uri');
    }
    set crossRealmTrustSharedPasswordUri(value) {
        this._crossRealmTrustSharedPasswordUri = value;
    }
    resetCrossRealmTrustSharedPasswordUri() {
        this._crossRealmTrustSharedPasswordUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get crossRealmTrustSharedPasswordUriInput() {
        return this._crossRealmTrustSharedPasswordUri;
    }
    get enableKerberos() {
        return this.getBooleanAttribute('enable_kerberos');
    }
    set enableKerberos(value) {
        this._enableKerberos = value;
    }
    resetEnableKerberos() {
        this._enableKerberos = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableKerberosInput() {
        return this._enableKerberos;
    }
    get kdcDbKeyUri() {
        return this.getStringAttribute('kdc_db_key_uri');
    }
    set kdcDbKeyUri(value) {
        this._kdcDbKeyUri = value;
    }
    resetKdcDbKeyUri() {
        this._kdcDbKeyUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kdcDbKeyUriInput() {
        return this._kdcDbKeyUri;
    }
    get keyPasswordUri() {
        return this.getStringAttribute('key_password_uri');
    }
    set keyPasswordUri(value) {
        this._keyPasswordUri = value;
    }
    resetKeyPasswordUri() {
        this._keyPasswordUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyPasswordUriInput() {
        return this._keyPasswordUri;
    }
    get keystorePasswordUri() {
        return this.getStringAttribute('keystore_password_uri');
    }
    set keystorePasswordUri(value) {
        this._keystorePasswordUri = value;
    }
    resetKeystorePasswordUri() {
        this._keystorePasswordUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keystorePasswordUriInput() {
        return this._keystorePasswordUri;
    }
    get keystoreUri() {
        return this.getStringAttribute('keystore_uri');
    }
    set keystoreUri(value) {
        this._keystoreUri = value;
    }
    resetKeystoreUri() {
        this._keystoreUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keystoreUriInput() {
        return this._keystoreUri;
    }
    get kmsKeyUri() {
        return this.getStringAttribute('kms_key_uri');
    }
    set kmsKeyUri(value) {
        this._kmsKeyUri = value;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyUriInput() {
        return this._kmsKeyUri;
    }
    get realm() {
        return this.getStringAttribute('realm');
    }
    set realm(value) {
        this._realm = value;
    }
    resetRealm() {
        this._realm = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get realmInput() {
        return this._realm;
    }
    get rootPrincipalPasswordUri() {
        return this.getStringAttribute('root_principal_password_uri');
    }
    set rootPrincipalPasswordUri(value) {
        this._rootPrincipalPasswordUri = value;
    }
    // Temporarily expose input value. Use with caution.
    get rootPrincipalPasswordUriInput() {
        return this._rootPrincipalPasswordUri;
    }
    get tgtLifetimeHours() {
        return this.getNumberAttribute('tgt_lifetime_hours');
    }
    set tgtLifetimeHours(value) {
        this._tgtLifetimeHours = value;
    }
    resetTgtLifetimeHours() {
        this._tgtLifetimeHours = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tgtLifetimeHoursInput() {
        return this._tgtLifetimeHours;
    }
    get truststorePasswordUri() {
        return this.getStringAttribute('truststore_password_uri');
    }
    set truststorePasswordUri(value) {
        this._truststorePasswordUri = value;
    }
    resetTruststorePasswordUri() {
        this._truststorePasswordUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get truststorePasswordUriInput() {
        return this._truststorePasswordUri;
    }
    get truststoreUri() {
        return this.getStringAttribute('truststore_uri');
    }
    set truststoreUri(value) {
        this._truststoreUri = value;
    }
    resetTruststoreUri() {
        this._truststoreUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get truststoreUriInput() {
        return this._truststoreUri;
    }
}
exports.DataprocClusterClusterConfigSecurityConfigKerberosConfigOutputReference = DataprocClusterClusterConfigSecurityConfigKerberosConfigOutputReference;
_11 = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigSecurityConfigKerberosConfigOutputReference[_11] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigSecurityConfigKerberosConfigOutputReference", version: "14.13.1" };
function dataprocClusterClusterConfigSecurityConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        kerberos_config: dataprocClusterClusterConfigSecurityConfigKerberosConfigToTerraform(struct.kerberosConfig),
    };
}
exports.dataprocClusterClusterConfigSecurityConfigToTerraform = dataprocClusterClusterConfigSecurityConfigToTerraform;
function dataprocClusterClusterConfigSecurityConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        kerberos_config: {
            value: dataprocClusterClusterConfigSecurityConfigKerberosConfigToHclTerraform(struct.kerberosConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocClusterClusterConfigSecurityConfigKerberosConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocClusterClusterConfigSecurityConfigToHclTerraform = dataprocClusterClusterConfigSecurityConfigToHclTerraform;
class DataprocClusterClusterConfigSecurityConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // kerberos_config - computed: false, optional: false, required: true
        this._kerberosConfig = new DataprocClusterClusterConfigSecurityConfigKerberosConfigOutputReference(this, "kerberos_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._kerberosConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.kerberosConfig = this._kerberosConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._kerberosConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._kerberosConfig.internalValue = value.kerberosConfig;
        }
    }
    get kerberosConfig() {
        return this._kerberosConfig;
    }
    putKerberosConfig(value) {
        this._kerberosConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get kerberosConfigInput() {
        return this._kerberosConfig.internalValue;
    }
}
exports.DataprocClusterClusterConfigSecurityConfigOutputReference = DataprocClusterClusterConfigSecurityConfigOutputReference;
_12 = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigSecurityConfigOutputReference[_12] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigSecurityConfigOutputReference", version: "14.13.1" };
function dataprocClusterClusterConfigSoftwareConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        image_version: cdktf.stringToTerraform(struct.imageVersion),
        optional_components: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.optionalComponents),
        override_properties: cdktf.hashMapper(cdktf.stringToTerraform)(struct.overrideProperties),
    };
}
exports.dataprocClusterClusterConfigSoftwareConfigToTerraform = dataprocClusterClusterConfigSoftwareConfigToTerraform;
function dataprocClusterClusterConfigSoftwareConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        image_version: {
            value: cdktf.stringToHclTerraform(struct.imageVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        optional_components: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.optionalComponents),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        override_properties: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.overrideProperties),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocClusterClusterConfigSoftwareConfigToHclTerraform = dataprocClusterClusterConfigSoftwareConfigToHclTerraform;
class DataprocClusterClusterConfigSoftwareConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // properties - computed: true, optional: false, required: false
        this._properties = new cdktf.StringMap(this, "properties");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._imageVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageVersion = this._imageVersion;
        }
        if (this._optionalComponents !== undefined) {
            hasAnyValues = true;
            internalValueResult.optionalComponents = this._optionalComponents;
        }
        if (this._overrideProperties !== undefined) {
            hasAnyValues = true;
            internalValueResult.overrideProperties = this._overrideProperties;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._imageVersion = undefined;
            this._optionalComponents = undefined;
            this._overrideProperties = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._imageVersion = value.imageVersion;
            this._optionalComponents = value.optionalComponents;
            this._overrideProperties = value.overrideProperties;
        }
    }
    get imageVersion() {
        return this.getStringAttribute('image_version');
    }
    set imageVersion(value) {
        this._imageVersion = value;
    }
    resetImageVersion() {
        this._imageVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageVersionInput() {
        return this._imageVersion;
    }
    get optionalComponents() {
        return cdktf.Fn.tolist(this.getListAttribute('optional_components'));
    }
    set optionalComponents(value) {
        this._optionalComponents = value;
    }
    resetOptionalComponents() {
        this._optionalComponents = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get optionalComponentsInput() {
        return this._optionalComponents;
    }
    get overrideProperties() {
        return this.getStringMapAttribute('override_properties');
    }
    set overrideProperties(value) {
        this._overrideProperties = value;
    }
    resetOverrideProperties() {
        this._overrideProperties = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get overridePropertiesInput() {
        return this._overrideProperties;
    }
    get properties() {
        return this._properties;
    }
}
exports.DataprocClusterClusterConfigSoftwareConfigOutputReference = DataprocClusterClusterConfigSoftwareConfigOutputReference;
_13 = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigSoftwareConfigOutputReference[_13] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigSoftwareConfigOutputReference", version: "14.13.1" };
function dataprocClusterClusterConfigWorkerConfigAcceleratorsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        accelerator_count: cdktf.numberToTerraform(struct.acceleratorCount),
        accelerator_type: cdktf.stringToTerraform(struct.acceleratorType),
    };
}
exports.dataprocClusterClusterConfigWorkerConfigAcceleratorsToTerraform = dataprocClusterClusterConfigWorkerConfigAcceleratorsToTerraform;
function dataprocClusterClusterConfigWorkerConfigAcceleratorsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        accelerator_count: {
            value: cdktf.numberToHclTerraform(struct.acceleratorCount),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        accelerator_type: {
            value: cdktf.stringToHclTerraform(struct.acceleratorType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocClusterClusterConfigWorkerConfigAcceleratorsToHclTerraform = dataprocClusterClusterConfigWorkerConfigAcceleratorsToHclTerraform;
class DataprocClusterClusterConfigWorkerConfigAcceleratorsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._acceleratorCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.acceleratorCount = this._acceleratorCount;
        }
        if (this._acceleratorType !== undefined) {
            hasAnyValues = true;
            internalValueResult.acceleratorType = this._acceleratorType;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._acceleratorCount = undefined;
            this._acceleratorType = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._acceleratorCount = value.acceleratorCount;
            this._acceleratorType = value.acceleratorType;
        }
    }
    get acceleratorCount() {
        return this.getNumberAttribute('accelerator_count');
    }
    set acceleratorCount(value) {
        this._acceleratorCount = value;
    }
    // Temporarily expose input value. Use with caution.
    get acceleratorCountInput() {
        return this._acceleratorCount;
    }
    get acceleratorType() {
        return this.getStringAttribute('accelerator_type');
    }
    set acceleratorType(value) {
        this._acceleratorType = value;
    }
    // Temporarily expose input value. Use with caution.
    get acceleratorTypeInput() {
        return this._acceleratorType;
    }
}
exports.DataprocClusterClusterConfigWorkerConfigAcceleratorsOutputReference = DataprocClusterClusterConfigWorkerConfigAcceleratorsOutputReference;
_14 = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigWorkerConfigAcceleratorsOutputReference[_14] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigWorkerConfigAcceleratorsOutputReference", version: "14.13.1" };
class DataprocClusterClusterConfigWorkerConfigAcceleratorsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataprocClusterClusterConfigWorkerConfigAcceleratorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataprocClusterClusterConfigWorkerConfigAcceleratorsList = DataprocClusterClusterConfigWorkerConfigAcceleratorsList;
_15 = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigWorkerConfigAcceleratorsList[_15] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigWorkerConfigAcceleratorsList", version: "14.13.1" };
function dataprocClusterClusterConfigWorkerConfigDiskConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        boot_disk_size_gb: cdktf.numberToTerraform(struct.bootDiskSizeGb),
        boot_disk_type: cdktf.stringToTerraform(struct.bootDiskType),
        local_ssd_interface: cdktf.stringToTerraform(struct.localSsdInterface),
        num_local_ssds: cdktf.numberToTerraform(struct.numLocalSsds),
    };
}
exports.dataprocClusterClusterConfigWorkerConfigDiskConfigToTerraform = dataprocClusterClusterConfigWorkerConfigDiskConfigToTerraform;
function dataprocClusterClusterConfigWorkerConfigDiskConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        boot_disk_size_gb: {
            value: cdktf.numberToHclTerraform(struct.bootDiskSizeGb),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        boot_disk_type: {
            value: cdktf.stringToHclTerraform(struct.bootDiskType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        local_ssd_interface: {
            value: cdktf.stringToHclTerraform(struct.localSsdInterface),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        num_local_ssds: {
            value: cdktf.numberToHclTerraform(struct.numLocalSsds),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocClusterClusterConfigWorkerConfigDiskConfigToHclTerraform = dataprocClusterClusterConfigWorkerConfigDiskConfigToHclTerraform;
class DataprocClusterClusterConfigWorkerConfigDiskConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bootDiskSizeGb !== undefined) {
            hasAnyValues = true;
            internalValueResult.bootDiskSizeGb = this._bootDiskSizeGb;
        }
        if (this._bootDiskType !== undefined) {
            hasAnyValues = true;
            internalValueResult.bootDiskType = this._bootDiskType;
        }
        if (this._localSsdInterface !== undefined) {
            hasAnyValues = true;
            internalValueResult.localSsdInterface = this._localSsdInterface;
        }
        if (this._numLocalSsds !== undefined) {
            hasAnyValues = true;
            internalValueResult.numLocalSsds = this._numLocalSsds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bootDiskSizeGb = undefined;
            this._bootDiskType = undefined;
            this._localSsdInterface = undefined;
            this._numLocalSsds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bootDiskSizeGb = value.bootDiskSizeGb;
            this._bootDiskType = value.bootDiskType;
            this._localSsdInterface = value.localSsdInterface;
            this._numLocalSsds = value.numLocalSsds;
        }
    }
    get bootDiskSizeGb() {
        return this.getNumberAttribute('boot_disk_size_gb');
    }
    set bootDiskSizeGb(value) {
        this._bootDiskSizeGb = value;
    }
    resetBootDiskSizeGb() {
        this._bootDiskSizeGb = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bootDiskSizeGbInput() {
        return this._bootDiskSizeGb;
    }
    get bootDiskType() {
        return this.getStringAttribute('boot_disk_type');
    }
    set bootDiskType(value) {
        this._bootDiskType = value;
    }
    resetBootDiskType() {
        this._bootDiskType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bootDiskTypeInput() {
        return this._bootDiskType;
    }
    get localSsdInterface() {
        return this.getStringAttribute('local_ssd_interface');
    }
    set localSsdInterface(value) {
        this._localSsdInterface = value;
    }
    resetLocalSsdInterface() {
        this._localSsdInterface = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get localSsdInterfaceInput() {
        return this._localSsdInterface;
    }
    get numLocalSsds() {
        return this.getNumberAttribute('num_local_ssds');
    }
    set numLocalSsds(value) {
        this._numLocalSsds = value;
    }
    resetNumLocalSsds() {
        this._numLocalSsds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numLocalSsdsInput() {
        return this._numLocalSsds;
    }
}
exports.DataprocClusterClusterConfigWorkerConfigDiskConfigOutputReference = DataprocClusterClusterConfigWorkerConfigDiskConfigOutputReference;
_16 = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigWorkerConfigDiskConfigOutputReference[_16] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigWorkerConfigDiskConfigOutputReference", version: "14.13.1" };
function dataprocClusterClusterConfigWorkerConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        image_uri: cdktf.stringToTerraform(struct.imageUri),
        machine_type: cdktf.stringToTerraform(struct.machineType),
        min_cpu_platform: cdktf.stringToTerraform(struct.minCpuPlatform),
        min_num_instances: cdktf.numberToTerraform(struct.minNumInstances),
        num_instances: cdktf.numberToTerraform(struct.numInstances),
        accelerators: cdktf.listMapper(dataprocClusterClusterConfigWorkerConfigAcceleratorsToTerraform, true)(struct.accelerators),
        disk_config: dataprocClusterClusterConfigWorkerConfigDiskConfigToTerraform(struct.diskConfig),
    };
}
exports.dataprocClusterClusterConfigWorkerConfigToTerraform = dataprocClusterClusterConfigWorkerConfigToTerraform;
function dataprocClusterClusterConfigWorkerConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        image_uri: {
            value: cdktf.stringToHclTerraform(struct.imageUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        machine_type: {
            value: cdktf.stringToHclTerraform(struct.machineType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        min_cpu_platform: {
            value: cdktf.stringToHclTerraform(struct.minCpuPlatform),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        min_num_instances: {
            value: cdktf.numberToHclTerraform(struct.minNumInstances),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        num_instances: {
            value: cdktf.numberToHclTerraform(struct.numInstances),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        accelerators: {
            value: cdktf.listMapperHcl(dataprocClusterClusterConfigWorkerConfigAcceleratorsToHclTerraform, true)(struct.accelerators),
            isBlock: true,
            type: "set",
            storageClassType: "DataprocClusterClusterConfigWorkerConfigAcceleratorsList",
        },
        disk_config: {
            value: dataprocClusterClusterConfigWorkerConfigDiskConfigToHclTerraform(struct.diskConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocClusterClusterConfigWorkerConfigDiskConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocClusterClusterConfigWorkerConfigToHclTerraform = dataprocClusterClusterConfigWorkerConfigToHclTerraform;
class DataprocClusterClusterConfigWorkerConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // accelerators - computed: false, optional: true, required: false
        this._accelerators = new DataprocClusterClusterConfigWorkerConfigAcceleratorsList(this, "accelerators", true);
        // disk_config - computed: false, optional: true, required: false
        this._diskConfig = new DataprocClusterClusterConfigWorkerConfigDiskConfigOutputReference(this, "disk_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._imageUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.imageUri = this._imageUri;
        }
        if (this._machineType !== undefined) {
            hasAnyValues = true;
            internalValueResult.machineType = this._machineType;
        }
        if (this._minCpuPlatform !== undefined) {
            hasAnyValues = true;
            internalValueResult.minCpuPlatform = this._minCpuPlatform;
        }
        if (this._minNumInstances !== undefined) {
            hasAnyValues = true;
            internalValueResult.minNumInstances = this._minNumInstances;
        }
        if (this._numInstances !== undefined) {
            hasAnyValues = true;
            internalValueResult.numInstances = this._numInstances;
        }
        if (this._accelerators?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.accelerators = this._accelerators?.internalValue;
        }
        if (this._diskConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.diskConfig = this._diskConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._imageUri = undefined;
            this._machineType = undefined;
            this._minCpuPlatform = undefined;
            this._minNumInstances = undefined;
            this._numInstances = undefined;
            this._accelerators.internalValue = undefined;
            this._diskConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._imageUri = value.imageUri;
            this._machineType = value.machineType;
            this._minCpuPlatform = value.minCpuPlatform;
            this._minNumInstances = value.minNumInstances;
            this._numInstances = value.numInstances;
            this._accelerators.internalValue = value.accelerators;
            this._diskConfig.internalValue = value.diskConfig;
        }
    }
    get imageUri() {
        return this.getStringAttribute('image_uri');
    }
    set imageUri(value) {
        this._imageUri = value;
    }
    resetImageUri() {
        this._imageUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageUriInput() {
        return this._imageUri;
    }
    // instance_names - computed: true, optional: false, required: false
    get instanceNames() {
        return this.getListAttribute('instance_names');
    }
    get machineType() {
        return this.getStringAttribute('machine_type');
    }
    set machineType(value) {
        this._machineType = value;
    }
    resetMachineType() {
        this._machineType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get machineTypeInput() {
        return this._machineType;
    }
    get minCpuPlatform() {
        return this.getStringAttribute('min_cpu_platform');
    }
    set minCpuPlatform(value) {
        this._minCpuPlatform = value;
    }
    resetMinCpuPlatform() {
        this._minCpuPlatform = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minCpuPlatformInput() {
        return this._minCpuPlatform;
    }
    get minNumInstances() {
        return this.getNumberAttribute('min_num_instances');
    }
    set minNumInstances(value) {
        this._minNumInstances = value;
    }
    resetMinNumInstances() {
        this._minNumInstances = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minNumInstancesInput() {
        return this._minNumInstances;
    }
    get numInstances() {
        return this.getNumberAttribute('num_instances');
    }
    set numInstances(value) {
        this._numInstances = value;
    }
    resetNumInstances() {
        this._numInstances = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get numInstancesInput() {
        return this._numInstances;
    }
    get accelerators() {
        return this._accelerators;
    }
    putAccelerators(value) {
        this._accelerators.internalValue = value;
    }
    resetAccelerators() {
        this._accelerators.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get acceleratorsInput() {
        return this._accelerators.internalValue;
    }
    get diskConfig() {
        return this._diskConfig;
    }
    putDiskConfig(value) {
        this._diskConfig.internalValue = value;
    }
    resetDiskConfig() {
        this._diskConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get diskConfigInput() {
        return this._diskConfig.internalValue;
    }
}
exports.DataprocClusterClusterConfigWorkerConfigOutputReference = DataprocClusterClusterConfigWorkerConfigOutputReference;
_17 = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigWorkerConfigOutputReference[_17] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigWorkerConfigOutputReference", version: "14.13.1" };
function dataprocClusterClusterConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        staging_bucket: cdktf.stringToTerraform(struct.stagingBucket),
        temp_bucket: cdktf.stringToTerraform(struct.tempBucket),
        autoscaling_config: dataprocClusterClusterConfigAutoscalingConfigToTerraform(struct.autoscalingConfig),
        auxiliary_node_groups: cdktf.listMapper(dataprocClusterClusterConfigAuxiliaryNodeGroupsToTerraform, true)(struct.auxiliaryNodeGroups),
        dataproc_metric_config: dataprocClusterClusterConfigDataprocMetricConfigToTerraform(struct.dataprocMetricConfig),
        encryption_config: dataprocClusterClusterConfigEncryptionConfigToTerraform(struct.encryptionConfig),
        endpoint_config: dataprocClusterClusterConfigEndpointConfigToTerraform(struct.endpointConfig),
        gce_cluster_config: dataprocClusterClusterConfigGceClusterConfigToTerraform(struct.gceClusterConfig),
        initialization_action: cdktf.listMapper(dataprocClusterClusterConfigInitializationActionToTerraform, true)(struct.initializationAction),
        lifecycle_config: dataprocClusterClusterConfigLifecycleConfigToTerraform(struct.lifecycleConfig),
        master_config: dataprocClusterClusterConfigMasterConfigToTerraform(struct.masterConfig),
        metastore_config: dataprocClusterClusterConfigMetastoreConfigToTerraform(struct.metastoreConfig),
        preemptible_worker_config: dataprocClusterClusterConfigPreemptibleWorkerConfigToTerraform(struct.preemptibleWorkerConfig),
        security_config: dataprocClusterClusterConfigSecurityConfigToTerraform(struct.securityConfig),
        software_config: dataprocClusterClusterConfigSoftwareConfigToTerraform(struct.softwareConfig),
        worker_config: dataprocClusterClusterConfigWorkerConfigToTerraform(struct.workerConfig),
    };
}
exports.dataprocClusterClusterConfigToTerraform = dataprocClusterClusterConfigToTerraform;
function dataprocClusterClusterConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        staging_bucket: {
            value: cdktf.stringToHclTerraform(struct.stagingBucket),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        temp_bucket: {
            value: cdktf.stringToHclTerraform(struct.tempBucket),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        autoscaling_config: {
            value: dataprocClusterClusterConfigAutoscalingConfigToHclTerraform(struct.autoscalingConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocClusterClusterConfigAutoscalingConfigList",
        },
        auxiliary_node_groups: {
            value: cdktf.listMapperHcl(dataprocClusterClusterConfigAuxiliaryNodeGroupsToHclTerraform, true)(struct.auxiliaryNodeGroups),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocClusterClusterConfigAuxiliaryNodeGroupsList",
        },
        dataproc_metric_config: {
            value: dataprocClusterClusterConfigDataprocMetricConfigToHclTerraform(struct.dataprocMetricConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocClusterClusterConfigDataprocMetricConfigList",
        },
        encryption_config: {
            value: dataprocClusterClusterConfigEncryptionConfigToHclTerraform(struct.encryptionConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocClusterClusterConfigEncryptionConfigList",
        },
        endpoint_config: {
            value: dataprocClusterClusterConfigEndpointConfigToHclTerraform(struct.endpointConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocClusterClusterConfigEndpointConfigList",
        },
        gce_cluster_config: {
            value: dataprocClusterClusterConfigGceClusterConfigToHclTerraform(struct.gceClusterConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocClusterClusterConfigGceClusterConfigList",
        },
        initialization_action: {
            value: cdktf.listMapperHcl(dataprocClusterClusterConfigInitializationActionToHclTerraform, true)(struct.initializationAction),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocClusterClusterConfigInitializationActionList",
        },
        lifecycle_config: {
            value: dataprocClusterClusterConfigLifecycleConfigToHclTerraform(struct.lifecycleConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocClusterClusterConfigLifecycleConfigList",
        },
        master_config: {
            value: dataprocClusterClusterConfigMasterConfigToHclTerraform(struct.masterConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocClusterClusterConfigMasterConfigList",
        },
        metastore_config: {
            value: dataprocClusterClusterConfigMetastoreConfigToHclTerraform(struct.metastoreConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocClusterClusterConfigMetastoreConfigList",
        },
        preemptible_worker_config: {
            value: dataprocClusterClusterConfigPreemptibleWorkerConfigToHclTerraform(struct.preemptibleWorkerConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocClusterClusterConfigPreemptibleWorkerConfigList",
        },
        security_config: {
            value: dataprocClusterClusterConfigSecurityConfigToHclTerraform(struct.securityConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocClusterClusterConfigSecurityConfigList",
        },
        software_config: {
            value: dataprocClusterClusterConfigSoftwareConfigToHclTerraform(struct.softwareConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocClusterClusterConfigSoftwareConfigList",
        },
        worker_config: {
            value: dataprocClusterClusterConfigWorkerConfigToHclTerraform(struct.workerConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocClusterClusterConfigWorkerConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocClusterClusterConfigToHclTerraform = dataprocClusterClusterConfigToHclTerraform;
class DataprocClusterClusterConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // autoscaling_config - computed: false, optional: true, required: false
        this._autoscalingConfig = new DataprocClusterClusterConfigAutoscalingConfigOutputReference(this, "autoscaling_config");
        // auxiliary_node_groups - computed: false, optional: true, required: false
        this._auxiliaryNodeGroups = new DataprocClusterClusterConfigAuxiliaryNodeGroupsList(this, "auxiliary_node_groups", false);
        // dataproc_metric_config - computed: false, optional: true, required: false
        this._dataprocMetricConfig = new DataprocClusterClusterConfigDataprocMetricConfigOutputReference(this, "dataproc_metric_config");
        // encryption_config - computed: false, optional: true, required: false
        this._encryptionConfig = new DataprocClusterClusterConfigEncryptionConfigOutputReference(this, "encryption_config");
        // endpoint_config - computed: false, optional: true, required: false
        this._endpointConfig = new DataprocClusterClusterConfigEndpointConfigOutputReference(this, "endpoint_config");
        // gce_cluster_config - computed: false, optional: true, required: false
        this._gceClusterConfig = new DataprocClusterClusterConfigGceClusterConfigOutputReference(this, "gce_cluster_config");
        // initialization_action - computed: false, optional: true, required: false
        this._initializationAction = new DataprocClusterClusterConfigInitializationActionList(this, "initialization_action", false);
        // lifecycle_config - computed: false, optional: true, required: false
        this._lifecycleConfig = new DataprocClusterClusterConfigLifecycleConfigOutputReference(this, "lifecycle_config");
        // master_config - computed: false, optional: true, required: false
        this._masterConfig = new DataprocClusterClusterConfigMasterConfigOutputReference(this, "master_config");
        // metastore_config - computed: false, optional: true, required: false
        this._metastoreConfig = new DataprocClusterClusterConfigMetastoreConfigOutputReference(this, "metastore_config");
        // preemptible_worker_config - computed: false, optional: true, required: false
        this._preemptibleWorkerConfig = new DataprocClusterClusterConfigPreemptibleWorkerConfigOutputReference(this, "preemptible_worker_config");
        // security_config - computed: false, optional: true, required: false
        this._securityConfig = new DataprocClusterClusterConfigSecurityConfigOutputReference(this, "security_config");
        // software_config - computed: false, optional: true, required: false
        this._softwareConfig = new DataprocClusterClusterConfigSoftwareConfigOutputReference(this, "software_config");
        // worker_config - computed: false, optional: true, required: false
        this._workerConfig = new DataprocClusterClusterConfigWorkerConfigOutputReference(this, "worker_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._stagingBucket !== undefined) {
            hasAnyValues = true;
            internalValueResult.stagingBucket = this._stagingBucket;
        }
        if (this._tempBucket !== undefined) {
            hasAnyValues = true;
            internalValueResult.tempBucket = this._tempBucket;
        }
        if (this._autoscalingConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.autoscalingConfig = this._autoscalingConfig?.internalValue;
        }
        if (this._auxiliaryNodeGroups?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.auxiliaryNodeGroups = this._auxiliaryNodeGroups?.internalValue;
        }
        if (this._dataprocMetricConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataprocMetricConfig = this._dataprocMetricConfig?.internalValue;
        }
        if (this._encryptionConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.encryptionConfig = this._encryptionConfig?.internalValue;
        }
        if (this._endpointConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.endpointConfig = this._endpointConfig?.internalValue;
        }
        if (this._gceClusterConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.gceClusterConfig = this._gceClusterConfig?.internalValue;
        }
        if (this._initializationAction?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.initializationAction = this._initializationAction?.internalValue;
        }
        if (this._lifecycleConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.lifecycleConfig = this._lifecycleConfig?.internalValue;
        }
        if (this._masterConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.masterConfig = this._masterConfig?.internalValue;
        }
        if (this._metastoreConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.metastoreConfig = this._metastoreConfig?.internalValue;
        }
        if (this._preemptibleWorkerConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.preemptibleWorkerConfig = this._preemptibleWorkerConfig?.internalValue;
        }
        if (this._securityConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.securityConfig = this._securityConfig?.internalValue;
        }
        if (this._softwareConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.softwareConfig = this._softwareConfig?.internalValue;
        }
        if (this._workerConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.workerConfig = this._workerConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._stagingBucket = undefined;
            this._tempBucket = undefined;
            this._autoscalingConfig.internalValue = undefined;
            this._auxiliaryNodeGroups.internalValue = undefined;
            this._dataprocMetricConfig.internalValue = undefined;
            this._encryptionConfig.internalValue = undefined;
            this._endpointConfig.internalValue = undefined;
            this._gceClusterConfig.internalValue = undefined;
            this._initializationAction.internalValue = undefined;
            this._lifecycleConfig.internalValue = undefined;
            this._masterConfig.internalValue = undefined;
            this._metastoreConfig.internalValue = undefined;
            this._preemptibleWorkerConfig.internalValue = undefined;
            this._securityConfig.internalValue = undefined;
            this._softwareConfig.internalValue = undefined;
            this._workerConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._stagingBucket = value.stagingBucket;
            this._tempBucket = value.tempBucket;
            this._autoscalingConfig.internalValue = value.autoscalingConfig;
            this._auxiliaryNodeGroups.internalValue = value.auxiliaryNodeGroups;
            this._dataprocMetricConfig.internalValue = value.dataprocMetricConfig;
            this._encryptionConfig.internalValue = value.encryptionConfig;
            this._endpointConfig.internalValue = value.endpointConfig;
            this._gceClusterConfig.internalValue = value.gceClusterConfig;
            this._initializationAction.internalValue = value.initializationAction;
            this._lifecycleConfig.internalValue = value.lifecycleConfig;
            this._masterConfig.internalValue = value.masterConfig;
            this._metastoreConfig.internalValue = value.metastoreConfig;
            this._preemptibleWorkerConfig.internalValue = value.preemptibleWorkerConfig;
            this._securityConfig.internalValue = value.securityConfig;
            this._softwareConfig.internalValue = value.softwareConfig;
            this._workerConfig.internalValue = value.workerConfig;
        }
    }
    // bucket - computed: true, optional: false, required: false
    get bucket() {
        return this.getStringAttribute('bucket');
    }
    get stagingBucket() {
        return this.getStringAttribute('staging_bucket');
    }
    set stagingBucket(value) {
        this._stagingBucket = value;
    }
    resetStagingBucket() {
        this._stagingBucket = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stagingBucketInput() {
        return this._stagingBucket;
    }
    get tempBucket() {
        return this.getStringAttribute('temp_bucket');
    }
    set tempBucket(value) {
        this._tempBucket = value;
    }
    resetTempBucket() {
        this._tempBucket = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tempBucketInput() {
        return this._tempBucket;
    }
    get autoscalingConfig() {
        return this._autoscalingConfig;
    }
    putAutoscalingConfig(value) {
        this._autoscalingConfig.internalValue = value;
    }
    resetAutoscalingConfig() {
        this._autoscalingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoscalingConfigInput() {
        return this._autoscalingConfig.internalValue;
    }
    get auxiliaryNodeGroups() {
        return this._auxiliaryNodeGroups;
    }
    putAuxiliaryNodeGroups(value) {
        this._auxiliaryNodeGroups.internalValue = value;
    }
    resetAuxiliaryNodeGroups() {
        this._auxiliaryNodeGroups.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get auxiliaryNodeGroupsInput() {
        return this._auxiliaryNodeGroups.internalValue;
    }
    get dataprocMetricConfig() {
        return this._dataprocMetricConfig;
    }
    putDataprocMetricConfig(value) {
        this._dataprocMetricConfig.internalValue = value;
    }
    resetDataprocMetricConfig() {
        this._dataprocMetricConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataprocMetricConfigInput() {
        return this._dataprocMetricConfig.internalValue;
    }
    get encryptionConfig() {
        return this._encryptionConfig;
    }
    putEncryptionConfig(value) {
        this._encryptionConfig.internalValue = value;
    }
    resetEncryptionConfig() {
        this._encryptionConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encryptionConfigInput() {
        return this._encryptionConfig.internalValue;
    }
    get endpointConfig() {
        return this._endpointConfig;
    }
    putEndpointConfig(value) {
        this._endpointConfig.internalValue = value;
    }
    resetEndpointConfig() {
        this._endpointConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get endpointConfigInput() {
        return this._endpointConfig.internalValue;
    }
    get gceClusterConfig() {
        return this._gceClusterConfig;
    }
    putGceClusterConfig(value) {
        this._gceClusterConfig.internalValue = value;
    }
    resetGceClusterConfig() {
        this._gceClusterConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gceClusterConfigInput() {
        return this._gceClusterConfig.internalValue;
    }
    get initializationAction() {
        return this._initializationAction;
    }
    putInitializationAction(value) {
        this._initializationAction.internalValue = value;
    }
    resetInitializationAction() {
        this._initializationAction.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get initializationActionInput() {
        return this._initializationAction.internalValue;
    }
    get lifecycleConfig() {
        return this._lifecycleConfig;
    }
    putLifecycleConfig(value) {
        this._lifecycleConfig.internalValue = value;
    }
    resetLifecycleConfig() {
        this._lifecycleConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lifecycleConfigInput() {
        return this._lifecycleConfig.internalValue;
    }
    get masterConfig() {
        return this._masterConfig;
    }
    putMasterConfig(value) {
        this._masterConfig.internalValue = value;
    }
    resetMasterConfig() {
        this._masterConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get masterConfigInput() {
        return this._masterConfig.internalValue;
    }
    get metastoreConfig() {
        return this._metastoreConfig;
    }
    putMetastoreConfig(value) {
        this._metastoreConfig.internalValue = value;
    }
    resetMetastoreConfig() {
        this._metastoreConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get metastoreConfigInput() {
        return this._metastoreConfig.internalValue;
    }
    get preemptibleWorkerConfig() {
        return this._preemptibleWorkerConfig;
    }
    putPreemptibleWorkerConfig(value) {
        this._preemptibleWorkerConfig.internalValue = value;
    }
    resetPreemptibleWorkerConfig() {
        this._preemptibleWorkerConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get preemptibleWorkerConfigInput() {
        return this._preemptibleWorkerConfig.internalValue;
    }
    get securityConfig() {
        return this._securityConfig;
    }
    putSecurityConfig(value) {
        this._securityConfig.internalValue = value;
    }
    resetSecurityConfig() {
        this._securityConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get securityConfigInput() {
        return this._securityConfig.internalValue;
    }
    get softwareConfig() {
        return this._softwareConfig;
    }
    putSoftwareConfig(value) {
        this._softwareConfig.internalValue = value;
    }
    resetSoftwareConfig() {
        this._softwareConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get softwareConfigInput() {
        return this._softwareConfig.internalValue;
    }
    get workerConfig() {
        return this._workerConfig;
    }
    putWorkerConfig(value) {
        this._workerConfig.internalValue = value;
    }
    resetWorkerConfig() {
        this._workerConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get workerConfigInput() {
        return this._workerConfig.internalValue;
    }
}
exports.DataprocClusterClusterConfigOutputReference = DataprocClusterClusterConfigOutputReference;
_18 = JSII_RTTI_SYMBOL_1;
DataprocClusterClusterConfigOutputReference[_18] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterClusterConfigOutputReference", version: "14.13.1" };
function dataprocClusterTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.dataprocClusterTimeoutsToTerraform = dataprocClusterTimeoutsToTerraform;
function dataprocClusterTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocClusterTimeoutsToHclTerraform = dataprocClusterTimeoutsToHclTerraform;
class DataprocClusterTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.DataprocClusterTimeoutsOutputReference = DataprocClusterTimeoutsOutputReference;
_19 = JSII_RTTI_SYMBOL_1;
DataprocClusterTimeoutsOutputReference[_19] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterTimeoutsOutputReference", version: "14.13.1" };
function dataprocClusterVirtualClusterConfigAuxiliaryServicesConfigMetastoreConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        dataproc_metastore_service: cdktf.stringToTerraform(struct.dataprocMetastoreService),
    };
}
exports.dataprocClusterVirtualClusterConfigAuxiliaryServicesConfigMetastoreConfigToTerraform = dataprocClusterVirtualClusterConfigAuxiliaryServicesConfigMetastoreConfigToTerraform;
function dataprocClusterVirtualClusterConfigAuxiliaryServicesConfigMetastoreConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        dataproc_metastore_service: {
            value: cdktf.stringToHclTerraform(struct.dataprocMetastoreService),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocClusterVirtualClusterConfigAuxiliaryServicesConfigMetastoreConfigToHclTerraform = dataprocClusterVirtualClusterConfigAuxiliaryServicesConfigMetastoreConfigToHclTerraform;
class DataprocClusterVirtualClusterConfigAuxiliaryServicesConfigMetastoreConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dataprocMetastoreService !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataprocMetastoreService = this._dataprocMetastoreService;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._dataprocMetastoreService = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._dataprocMetastoreService = value.dataprocMetastoreService;
        }
    }
    get dataprocMetastoreService() {
        return this.getStringAttribute('dataproc_metastore_service');
    }
    set dataprocMetastoreService(value) {
        this._dataprocMetastoreService = value;
    }
    resetDataprocMetastoreService() {
        this._dataprocMetastoreService = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataprocMetastoreServiceInput() {
        return this._dataprocMetastoreService;
    }
}
exports.DataprocClusterVirtualClusterConfigAuxiliaryServicesConfigMetastoreConfigOutputReference = DataprocClusterVirtualClusterConfigAuxiliaryServicesConfigMetastoreConfigOutputReference;
_20 = JSII_RTTI_SYMBOL_1;
DataprocClusterVirtualClusterConfigAuxiliaryServicesConfigMetastoreConfigOutputReference[_20] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterVirtualClusterConfigAuxiliaryServicesConfigMetastoreConfigOutputReference", version: "14.13.1" };
function dataprocClusterVirtualClusterConfigAuxiliaryServicesConfigSparkHistoryServerConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        dataproc_cluster: cdktf.stringToTerraform(struct.dataprocCluster),
    };
}
exports.dataprocClusterVirtualClusterConfigAuxiliaryServicesConfigSparkHistoryServerConfigToTerraform = dataprocClusterVirtualClusterConfigAuxiliaryServicesConfigSparkHistoryServerConfigToTerraform;
function dataprocClusterVirtualClusterConfigAuxiliaryServicesConfigSparkHistoryServerConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        dataproc_cluster: {
            value: cdktf.stringToHclTerraform(struct.dataprocCluster),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocClusterVirtualClusterConfigAuxiliaryServicesConfigSparkHistoryServerConfigToHclTerraform = dataprocClusterVirtualClusterConfigAuxiliaryServicesConfigSparkHistoryServerConfigToHclTerraform;
class DataprocClusterVirtualClusterConfigAuxiliaryServicesConfigSparkHistoryServerConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dataprocCluster !== undefined) {
            hasAnyValues = true;
            internalValueResult.dataprocCluster = this._dataprocCluster;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._dataprocCluster = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._dataprocCluster = value.dataprocCluster;
        }
    }
    get dataprocCluster() {
        return this.getStringAttribute('dataproc_cluster');
    }
    set dataprocCluster(value) {
        this._dataprocCluster = value;
    }
    resetDataprocCluster() {
        this._dataprocCluster = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dataprocClusterInput() {
        return this._dataprocCluster;
    }
}
exports.DataprocClusterVirtualClusterConfigAuxiliaryServicesConfigSparkHistoryServerConfigOutputReference = DataprocClusterVirtualClusterConfigAuxiliaryServicesConfigSparkHistoryServerConfigOutputReference;
_21 = JSII_RTTI_SYMBOL_1;
DataprocClusterVirtualClusterConfigAuxiliaryServicesConfigSparkHistoryServerConfigOutputReference[_21] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterVirtualClusterConfigAuxiliaryServicesConfigSparkHistoryServerConfigOutputReference", version: "14.13.1" };
function dataprocClusterVirtualClusterConfigAuxiliaryServicesConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        metastore_config: dataprocClusterVirtualClusterConfigAuxiliaryServicesConfigMetastoreConfigToTerraform(struct.metastoreConfig),
        spark_history_server_config: dataprocClusterVirtualClusterConfigAuxiliaryServicesConfigSparkHistoryServerConfigToTerraform(struct.sparkHistoryServerConfig),
    };
}
exports.dataprocClusterVirtualClusterConfigAuxiliaryServicesConfigToTerraform = dataprocClusterVirtualClusterConfigAuxiliaryServicesConfigToTerraform;
function dataprocClusterVirtualClusterConfigAuxiliaryServicesConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        metastore_config: {
            value: dataprocClusterVirtualClusterConfigAuxiliaryServicesConfigMetastoreConfigToHclTerraform(struct.metastoreConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocClusterVirtualClusterConfigAuxiliaryServicesConfigMetastoreConfigList",
        },
        spark_history_server_config: {
            value: dataprocClusterVirtualClusterConfigAuxiliaryServicesConfigSparkHistoryServerConfigToHclTerraform(struct.sparkHistoryServerConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocClusterVirtualClusterConfigAuxiliaryServicesConfigSparkHistoryServerConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocClusterVirtualClusterConfigAuxiliaryServicesConfigToHclTerraform = dataprocClusterVirtualClusterConfigAuxiliaryServicesConfigToHclTerraform;
class DataprocClusterVirtualClusterConfigAuxiliaryServicesConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // metastore_config - computed: false, optional: true, required: false
        this._metastoreConfig = new DataprocClusterVirtualClusterConfigAuxiliaryServicesConfigMetastoreConfigOutputReference(this, "metastore_config");
        // spark_history_server_config - computed: false, optional: true, required: false
        this._sparkHistoryServerConfig = new DataprocClusterVirtualClusterConfigAuxiliaryServicesConfigSparkHistoryServerConfigOutputReference(this, "spark_history_server_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._metastoreConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.metastoreConfig = this._metastoreConfig?.internalValue;
        }
        if (this._sparkHistoryServerConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sparkHistoryServerConfig = this._sparkHistoryServerConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._metastoreConfig.internalValue = undefined;
            this._sparkHistoryServerConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._metastoreConfig.internalValue = value.metastoreConfig;
            this._sparkHistoryServerConfig.internalValue = value.sparkHistoryServerConfig;
        }
    }
    get metastoreConfig() {
        return this._metastoreConfig;
    }
    putMetastoreConfig(value) {
        this._metastoreConfig.internalValue = value;
    }
    resetMetastoreConfig() {
        this._metastoreConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get metastoreConfigInput() {
        return this._metastoreConfig.internalValue;
    }
    get sparkHistoryServerConfig() {
        return this._sparkHistoryServerConfig;
    }
    putSparkHistoryServerConfig(value) {
        this._sparkHistoryServerConfig.internalValue = value;
    }
    resetSparkHistoryServerConfig() {
        this._sparkHistoryServerConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sparkHistoryServerConfigInput() {
        return this._sparkHistoryServerConfig.internalValue;
    }
}
exports.DataprocClusterVirtualClusterConfigAuxiliaryServicesConfigOutputReference = DataprocClusterVirtualClusterConfigAuxiliaryServicesConfigOutputReference;
_22 = JSII_RTTI_SYMBOL_1;
DataprocClusterVirtualClusterConfigAuxiliaryServicesConfigOutputReference[_22] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterVirtualClusterConfigAuxiliaryServicesConfigOutputReference", version: "14.13.1" };
function dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigAutoscalingToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max_node_count: cdktf.numberToTerraform(struct.maxNodeCount),
        min_node_count: cdktf.numberToTerraform(struct.minNodeCount),
    };
}
exports.dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigAutoscalingToTerraform = dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigAutoscalingToTerraform;
function dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigAutoscalingToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        max_node_count: {
            value: cdktf.numberToHclTerraform(struct.maxNodeCount),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        min_node_count: {
            value: cdktf.numberToHclTerraform(struct.minNodeCount),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigAutoscalingToHclTerraform = dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigAutoscalingToHclTerraform;
class DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigAutoscalingOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._maxNodeCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxNodeCount = this._maxNodeCount;
        }
        if (this._minNodeCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.minNodeCount = this._minNodeCount;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._maxNodeCount = undefined;
            this._minNodeCount = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._maxNodeCount = value.maxNodeCount;
            this._minNodeCount = value.minNodeCount;
        }
    }
    get maxNodeCount() {
        return this.getNumberAttribute('max_node_count');
    }
    set maxNodeCount(value) {
        this._maxNodeCount = value;
    }
    resetMaxNodeCount() {
        this._maxNodeCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxNodeCountInput() {
        return this._maxNodeCount;
    }
    get minNodeCount() {
        return this.getNumberAttribute('min_node_count');
    }
    set minNodeCount(value) {
        this._minNodeCount = value;
    }
    resetMinNodeCount() {
        this._minNodeCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minNodeCountInput() {
        return this._minNodeCount;
    }
}
exports.DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigAutoscalingOutputReference = DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigAutoscalingOutputReference;
_23 = JSII_RTTI_SYMBOL_1;
DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigAutoscalingOutputReference[_23] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigAutoscalingOutputReference", version: "14.13.1" };
function dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        local_ssd_count: cdktf.numberToTerraform(struct.localSsdCount),
        machine_type: cdktf.stringToTerraform(struct.machineType),
        min_cpu_platform: cdktf.stringToTerraform(struct.minCpuPlatform),
        preemptible: cdktf.booleanToTerraform(struct.preemptible),
        spot: cdktf.booleanToTerraform(struct.spot),
    };
}
exports.dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigConfigToTerraform = dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigConfigToTerraform;
function dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        local_ssd_count: {
            value: cdktf.numberToHclTerraform(struct.localSsdCount),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        machine_type: {
            value: cdktf.stringToHclTerraform(struct.machineType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        min_cpu_platform: {
            value: cdktf.stringToHclTerraform(struct.minCpuPlatform),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        preemptible: {
            value: cdktf.booleanToHclTerraform(struct.preemptible),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        spot: {
            value: cdktf.booleanToHclTerraform(struct.spot),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigConfigToHclTerraform = dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigConfigToHclTerraform;
class DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._localSsdCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.localSsdCount = this._localSsdCount;
        }
        if (this._machineType !== undefined) {
            hasAnyValues = true;
            internalValueResult.machineType = this._machineType;
        }
        if (this._minCpuPlatform !== undefined) {
            hasAnyValues = true;
            internalValueResult.minCpuPlatform = this._minCpuPlatform;
        }
        if (this._preemptible !== undefined) {
            hasAnyValues = true;
            internalValueResult.preemptible = this._preemptible;
        }
        if (this._spot !== undefined) {
            hasAnyValues = true;
            internalValueResult.spot = this._spot;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._localSsdCount = undefined;
            this._machineType = undefined;
            this._minCpuPlatform = undefined;
            this._preemptible = undefined;
            this._spot = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._localSsdCount = value.localSsdCount;
            this._machineType = value.machineType;
            this._minCpuPlatform = value.minCpuPlatform;
            this._preemptible = value.preemptible;
            this._spot = value.spot;
        }
    }
    get localSsdCount() {
        return this.getNumberAttribute('local_ssd_count');
    }
    set localSsdCount(value) {
        this._localSsdCount = value;
    }
    resetLocalSsdCount() {
        this._localSsdCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get localSsdCountInput() {
        return this._localSsdCount;
    }
    get machineType() {
        return this.getStringAttribute('machine_type');
    }
    set machineType(value) {
        this._machineType = value;
    }
    resetMachineType() {
        this._machineType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get machineTypeInput() {
        return this._machineType;
    }
    get minCpuPlatform() {
        return this.getStringAttribute('min_cpu_platform');
    }
    set minCpuPlatform(value) {
        this._minCpuPlatform = value;
    }
    resetMinCpuPlatform() {
        this._minCpuPlatform = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minCpuPlatformInput() {
        return this._minCpuPlatform;
    }
    get preemptible() {
        return this.getBooleanAttribute('preemptible');
    }
    set preemptible(value) {
        this._preemptible = value;
    }
    resetPreemptible() {
        this._preemptible = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get preemptibleInput() {
        return this._preemptible;
    }
    get spot() {
        return this.getBooleanAttribute('spot');
    }
    set spot(value) {
        this._spot = value;
    }
    resetSpot() {
        this._spot = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get spotInput() {
        return this._spot;
    }
}
exports.DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigConfigOutputReference = DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigConfigOutputReference;
_24 = JSII_RTTI_SYMBOL_1;
DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigConfigOutputReference[_24] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigConfigOutputReference", version: "14.13.1" };
function dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        locations: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.locations),
        autoscaling: dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigAutoscalingToTerraform(struct.autoscaling),
        config: dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigConfigToTerraform(struct.config),
    };
}
exports.dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigToTerraform = dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigToTerraform;
function dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        locations: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.locations),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        autoscaling: {
            value: dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigAutoscalingToHclTerraform(struct.autoscaling),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigAutoscalingList",
        },
        config: {
            value: dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigConfigToHclTerraform(struct.config),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigToHclTerraform = dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigToHclTerraform;
class DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // autoscaling - computed: false, optional: true, required: false
        this._autoscaling = new DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigAutoscalingOutputReference(this, "autoscaling");
        // config - computed: false, optional: true, required: false
        this._config = new DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigConfigOutputReference(this, "config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._locations !== undefined) {
            hasAnyValues = true;
            internalValueResult.locations = this._locations;
        }
        if (this._autoscaling?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.autoscaling = this._autoscaling?.internalValue;
        }
        if (this._config?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.config = this._config?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._locations = undefined;
            this._autoscaling.internalValue = undefined;
            this._config.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._locations = value.locations;
            this._autoscaling.internalValue = value.autoscaling;
            this._config.internalValue = value.config;
        }
    }
    get locations() {
        return cdktf.Fn.tolist(this.getListAttribute('locations'));
    }
    set locations(value) {
        this._locations = value;
    }
    // Temporarily expose input value. Use with caution.
    get locationsInput() {
        return this._locations;
    }
    get autoscaling() {
        return this._autoscaling;
    }
    putAutoscaling(value) {
        this._autoscaling.internalValue = value;
    }
    resetAutoscaling() {
        this._autoscaling.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoscalingInput() {
        return this._autoscaling.internalValue;
    }
    get config() {
        return this._config;
    }
    putConfig(value) {
        this._config.internalValue = value;
    }
    resetConfig() {
        this._config.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get configInput() {
        return this._config.internalValue;
    }
}
exports.DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigOutputReference = DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigOutputReference;
_25 = JSII_RTTI_SYMBOL_1;
DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigOutputReference[_25] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigOutputReference", version: "14.13.1" };
function dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        node_pool: cdktf.stringToTerraform(struct.nodePool),
        roles: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.roles),
        node_pool_config: dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigToTerraform(struct.nodePoolConfig),
    };
}
exports.dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetToTerraform = dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetToTerraform;
function dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        node_pool: {
            value: cdktf.stringToHclTerraform(struct.nodePool),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        roles: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.roles),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
        node_pool_config: {
            value: dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigToHclTerraform(struct.nodePoolConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetToHclTerraform = dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetToHclTerraform;
class DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // node_pool_config - computed: false, optional: true, required: false
        this._nodePoolConfig = new DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetNodePoolConfigOutputReference(this, "node_pool_config");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._nodePool !== undefined) {
            hasAnyValues = true;
            internalValueResult.nodePool = this._nodePool;
        }
        if (this._roles !== undefined) {
            hasAnyValues = true;
            internalValueResult.roles = this._roles;
        }
        if (this._nodePoolConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.nodePoolConfig = this._nodePoolConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._nodePool = undefined;
            this._roles = undefined;
            this._nodePoolConfig.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._nodePool = value.nodePool;
            this._roles = value.roles;
            this._nodePoolConfig.internalValue = value.nodePoolConfig;
        }
    }
    get nodePool() {
        return this.getStringAttribute('node_pool');
    }
    set nodePool(value) {
        this._nodePool = value;
    }
    // Temporarily expose input value. Use with caution.
    get nodePoolInput() {
        return this._nodePool;
    }
    get roles() {
        return cdktf.Fn.tolist(this.getListAttribute('roles'));
    }
    set roles(value) {
        this._roles = value;
    }
    // Temporarily expose input value. Use with caution.
    get rolesInput() {
        return this._roles;
    }
    get nodePoolConfig() {
        return this._nodePoolConfig;
    }
    putNodePoolConfig(value) {
        this._nodePoolConfig.internalValue = value;
    }
    resetNodePoolConfig() {
        this._nodePoolConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nodePoolConfigInput() {
        return this._nodePoolConfig.internalValue;
    }
}
exports.DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetOutputReference = DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetOutputReference;
_26 = JSII_RTTI_SYMBOL_1;
DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetOutputReference[_26] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetOutputReference", version: "14.13.1" };
class DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetList = DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetList;
_27 = JSII_RTTI_SYMBOL_1;
DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetList[_27] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetList", version: "14.13.1" };
function dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        gke_cluster_target: cdktf.stringToTerraform(struct.gkeClusterTarget),
        node_pool_target: cdktf.listMapper(dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetToTerraform, true)(struct.nodePoolTarget),
    };
}
exports.dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigToTerraform = dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigToTerraform;
function dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        gke_cluster_target: {
            value: cdktf.stringToHclTerraform(struct.gkeClusterTarget),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        node_pool_target: {
            value: cdktf.listMapperHcl(dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetToHclTerraform, true)(struct.nodePoolTarget),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigToHclTerraform = dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigToHclTerraform;
class DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // node_pool_target - computed: false, optional: true, required: false
        this._nodePoolTarget = new DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigNodePoolTargetList(this, "node_pool_target", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._gkeClusterTarget !== undefined) {
            hasAnyValues = true;
            internalValueResult.gkeClusterTarget = this._gkeClusterTarget;
        }
        if (this._nodePoolTarget?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.nodePoolTarget = this._nodePoolTarget?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._gkeClusterTarget = undefined;
            this._nodePoolTarget.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._gkeClusterTarget = value.gkeClusterTarget;
            this._nodePoolTarget.internalValue = value.nodePoolTarget;
        }
    }
    get gkeClusterTarget() {
        return this.getStringAttribute('gke_cluster_target');
    }
    set gkeClusterTarget(value) {
        this._gkeClusterTarget = value;
    }
    resetGkeClusterTarget() {
        this._gkeClusterTarget = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gkeClusterTargetInput() {
        return this._gkeClusterTarget;
    }
    get nodePoolTarget() {
        return this._nodePoolTarget;
    }
    putNodePoolTarget(value) {
        this._nodePoolTarget.internalValue = value;
    }
    resetNodePoolTarget() {
        this._nodePoolTarget.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nodePoolTargetInput() {
        return this._nodePoolTarget.internalValue;
    }
}
exports.DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigOutputReference = DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigOutputReference;
_28 = JSII_RTTI_SYMBOL_1;
DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigOutputReference[_28] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigOutputReference", version: "14.13.1" };
function dataprocClusterVirtualClusterConfigKubernetesClusterConfigKubernetesSoftwareConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        component_version: cdktf.hashMapper(cdktf.stringToTerraform)(struct.componentVersion),
        properties: cdktf.hashMapper(cdktf.stringToTerraform)(struct.properties),
    };
}
exports.dataprocClusterVirtualClusterConfigKubernetesClusterConfigKubernetesSoftwareConfigToTerraform = dataprocClusterVirtualClusterConfigKubernetesClusterConfigKubernetesSoftwareConfigToTerraform;
function dataprocClusterVirtualClusterConfigKubernetesClusterConfigKubernetesSoftwareConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        component_version: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.componentVersion),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        properties: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.properties),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocClusterVirtualClusterConfigKubernetesClusterConfigKubernetesSoftwareConfigToHclTerraform = dataprocClusterVirtualClusterConfigKubernetesClusterConfigKubernetesSoftwareConfigToHclTerraform;
class DataprocClusterVirtualClusterConfigKubernetesClusterConfigKubernetesSoftwareConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._componentVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.componentVersion = this._componentVersion;
        }
        if (this._properties !== undefined) {
            hasAnyValues = true;
            internalValueResult.properties = this._properties;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._componentVersion = undefined;
            this._properties = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._componentVersion = value.componentVersion;
            this._properties = value.properties;
        }
    }
    get componentVersion() {
        return this.getStringMapAttribute('component_version');
    }
    set componentVersion(value) {
        this._componentVersion = value;
    }
    // Temporarily expose input value. Use with caution.
    get componentVersionInput() {
        return this._componentVersion;
    }
    get properties() {
        return this.getStringMapAttribute('properties');
    }
    set properties(value) {
        this._properties = value;
    }
    resetProperties() {
        this._properties = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get propertiesInput() {
        return this._properties;
    }
}
exports.DataprocClusterVirtualClusterConfigKubernetesClusterConfigKubernetesSoftwareConfigOutputReference = DataprocClusterVirtualClusterConfigKubernetesClusterConfigKubernetesSoftwareConfigOutputReference;
_29 = JSII_RTTI_SYMBOL_1;
DataprocClusterVirtualClusterConfigKubernetesClusterConfigKubernetesSoftwareConfigOutputReference[_29] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterVirtualClusterConfigKubernetesClusterConfigKubernetesSoftwareConfigOutputReference", version: "14.13.1" };
function dataprocClusterVirtualClusterConfigKubernetesClusterConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        kubernetes_namespace: cdktf.stringToTerraform(struct.kubernetesNamespace),
        gke_cluster_config: dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigToTerraform(struct.gkeClusterConfig),
        kubernetes_software_config: dataprocClusterVirtualClusterConfigKubernetesClusterConfigKubernetesSoftwareConfigToTerraform(struct.kubernetesSoftwareConfig),
    };
}
exports.dataprocClusterVirtualClusterConfigKubernetesClusterConfigToTerraform = dataprocClusterVirtualClusterConfigKubernetesClusterConfigToTerraform;
function dataprocClusterVirtualClusterConfigKubernetesClusterConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        kubernetes_namespace: {
            value: cdktf.stringToHclTerraform(struct.kubernetesNamespace),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        gke_cluster_config: {
            value: dataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigToHclTerraform(struct.gkeClusterConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigList",
        },
        kubernetes_software_config: {
            value: dataprocClusterVirtualClusterConfigKubernetesClusterConfigKubernetesSoftwareConfigToHclTerraform(struct.kubernetesSoftwareConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocClusterVirtualClusterConfigKubernetesClusterConfigKubernetesSoftwareConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocClusterVirtualClusterConfigKubernetesClusterConfigToHclTerraform = dataprocClusterVirtualClusterConfigKubernetesClusterConfigToHclTerraform;
class DataprocClusterVirtualClusterConfigKubernetesClusterConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // gke_cluster_config - computed: false, optional: false, required: true
        this._gkeClusterConfig = new DataprocClusterVirtualClusterConfigKubernetesClusterConfigGkeClusterConfigOutputReference(this, "gke_cluster_config");
        // kubernetes_software_config - computed: false, optional: false, required: true
        this._kubernetesSoftwareConfig = new DataprocClusterVirtualClusterConfigKubernetesClusterConfigKubernetesSoftwareConfigOutputReference(this, "kubernetes_software_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._kubernetesNamespace !== undefined) {
            hasAnyValues = true;
            internalValueResult.kubernetesNamespace = this._kubernetesNamespace;
        }
        if (this._gkeClusterConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.gkeClusterConfig = this._gkeClusterConfig?.internalValue;
        }
        if (this._kubernetesSoftwareConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.kubernetesSoftwareConfig = this._kubernetesSoftwareConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._kubernetesNamespace = undefined;
            this._gkeClusterConfig.internalValue = undefined;
            this._kubernetesSoftwareConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._kubernetesNamespace = value.kubernetesNamespace;
            this._gkeClusterConfig.internalValue = value.gkeClusterConfig;
            this._kubernetesSoftwareConfig.internalValue = value.kubernetesSoftwareConfig;
        }
    }
    get kubernetesNamespace() {
        return this.getStringAttribute('kubernetes_namespace');
    }
    set kubernetesNamespace(value) {
        this._kubernetesNamespace = value;
    }
    resetKubernetesNamespace() {
        this._kubernetesNamespace = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kubernetesNamespaceInput() {
        return this._kubernetesNamespace;
    }
    get gkeClusterConfig() {
        return this._gkeClusterConfig;
    }
    putGkeClusterConfig(value) {
        this._gkeClusterConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get gkeClusterConfigInput() {
        return this._gkeClusterConfig.internalValue;
    }
    get kubernetesSoftwareConfig() {
        return this._kubernetesSoftwareConfig;
    }
    putKubernetesSoftwareConfig(value) {
        this._kubernetesSoftwareConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get kubernetesSoftwareConfigInput() {
        return this._kubernetesSoftwareConfig.internalValue;
    }
}
exports.DataprocClusterVirtualClusterConfigKubernetesClusterConfigOutputReference = DataprocClusterVirtualClusterConfigKubernetesClusterConfigOutputReference;
_30 = JSII_RTTI_SYMBOL_1;
DataprocClusterVirtualClusterConfigKubernetesClusterConfigOutputReference[_30] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterVirtualClusterConfigKubernetesClusterConfigOutputReference", version: "14.13.1" };
function dataprocClusterVirtualClusterConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        staging_bucket: cdktf.stringToTerraform(struct.stagingBucket),
        auxiliary_services_config: dataprocClusterVirtualClusterConfigAuxiliaryServicesConfigToTerraform(struct.auxiliaryServicesConfig),
        kubernetes_cluster_config: dataprocClusterVirtualClusterConfigKubernetesClusterConfigToTerraform(struct.kubernetesClusterConfig),
    };
}
exports.dataprocClusterVirtualClusterConfigToTerraform = dataprocClusterVirtualClusterConfigToTerraform;
function dataprocClusterVirtualClusterConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        staging_bucket: {
            value: cdktf.stringToHclTerraform(struct.stagingBucket),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        auxiliary_services_config: {
            value: dataprocClusterVirtualClusterConfigAuxiliaryServicesConfigToHclTerraform(struct.auxiliaryServicesConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocClusterVirtualClusterConfigAuxiliaryServicesConfigList",
        },
        kubernetes_cluster_config: {
            value: dataprocClusterVirtualClusterConfigKubernetesClusterConfigToHclTerraform(struct.kubernetesClusterConfig),
            isBlock: true,
            type: "list",
            storageClassType: "DataprocClusterVirtualClusterConfigKubernetesClusterConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dataprocClusterVirtualClusterConfigToHclTerraform = dataprocClusterVirtualClusterConfigToHclTerraform;
class DataprocClusterVirtualClusterConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // auxiliary_services_config - computed: false, optional: true, required: false
        this._auxiliaryServicesConfig = new DataprocClusterVirtualClusterConfigAuxiliaryServicesConfigOutputReference(this, "auxiliary_services_config");
        // kubernetes_cluster_config - computed: false, optional: true, required: false
        this._kubernetesClusterConfig = new DataprocClusterVirtualClusterConfigKubernetesClusterConfigOutputReference(this, "kubernetes_cluster_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._stagingBucket !== undefined) {
            hasAnyValues = true;
            internalValueResult.stagingBucket = this._stagingBucket;
        }
        if (this._auxiliaryServicesConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.auxiliaryServicesConfig = this._auxiliaryServicesConfig?.internalValue;
        }
        if (this._kubernetesClusterConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.kubernetesClusterConfig = this._kubernetesClusterConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._stagingBucket = undefined;
            this._auxiliaryServicesConfig.internalValue = undefined;
            this._kubernetesClusterConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._stagingBucket = value.stagingBucket;
            this._auxiliaryServicesConfig.internalValue = value.auxiliaryServicesConfig;
            this._kubernetesClusterConfig.internalValue = value.kubernetesClusterConfig;
        }
    }
    get stagingBucket() {
        return this.getStringAttribute('staging_bucket');
    }
    set stagingBucket(value) {
        this._stagingBucket = value;
    }
    resetStagingBucket() {
        this._stagingBucket = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stagingBucketInput() {
        return this._stagingBucket;
    }
    get auxiliaryServicesConfig() {
        return this._auxiliaryServicesConfig;
    }
    putAuxiliaryServicesConfig(value) {
        this._auxiliaryServicesConfig.internalValue = value;
    }
    resetAuxiliaryServicesConfig() {
        this._auxiliaryServicesConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get auxiliaryServicesConfigInput() {
        return this._auxiliaryServicesConfig.internalValue;
    }
    get kubernetesClusterConfig() {
        return this._kubernetesClusterConfig;
    }
    putKubernetesClusterConfig(value) {
        this._kubernetesClusterConfig.internalValue = value;
    }
    resetKubernetesClusterConfig() {
        this._kubernetesClusterConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kubernetesClusterConfigInput() {
        return this._kubernetesClusterConfig.internalValue;
    }
}
exports.DataprocClusterVirtualClusterConfigOutputReference = DataprocClusterVirtualClusterConfigOutputReference;
_31 = JSII_RTTI_SYMBOL_1;
DataprocClusterVirtualClusterConfigOutputReference[_31] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocClusterVirtualClusterConfigOutputReference", version: "14.13.1" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/dataproc_cluster google_dataproc_cluster}
*/
class DataprocCluster extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a DataprocCluster resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the DataprocCluster to import
    * @param importFromId The id of the existing DataprocCluster that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/dataproc_cluster#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the DataprocCluster to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_dataproc_cluster", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/dataproc_cluster google_dataproc_cluster} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataprocClusterConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_dataproc_cluster',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // ==========
        // ATTRIBUTES
        // ==========
        // effective_labels - computed: true, optional: false, required: false
        this._effectiveLabels = new cdktf.StringMap(this, "effective_labels");
        // terraform_labels - computed: true, optional: false, required: false
        this._terraformLabels = new cdktf.StringMap(this, "terraform_labels");
        // cluster_config - computed: false, optional: true, required: false
        this._clusterConfig = new DataprocClusterClusterConfigOutputReference(this, "cluster_config");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new DataprocClusterTimeoutsOutputReference(this, "timeouts");
        // virtual_cluster_config - computed: false, optional: true, required: false
        this._virtualClusterConfig = new DataprocClusterVirtualClusterConfigOutputReference(this, "virtual_cluster_config");
        this._gracefulDecommissionTimeout = config.gracefulDecommissionTimeout;
        this._id = config.id;
        this._labels = config.labels;
        this._name = config.name;
        this._project = config.project;
        this._region = config.region;
        this._clusterConfig.internalValue = config.clusterConfig;
        this._timeouts.internalValue = config.timeouts;
        this._virtualClusterConfig.internalValue = config.virtualClusterConfig;
    }
    get effectiveLabels() {
        return this._effectiveLabels;
    }
    get gracefulDecommissionTimeout() {
        return this.getStringAttribute('graceful_decommission_timeout');
    }
    set gracefulDecommissionTimeout(value) {
        this._gracefulDecommissionTimeout = value;
    }
    resetGracefulDecommissionTimeout() {
        this._gracefulDecommissionTimeout = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gracefulDecommissionTimeoutInput() {
        return this._gracefulDecommissionTimeout;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get region() {
        return this.getStringAttribute('region');
    }
    set region(value) {
        this._region = value;
    }
    resetRegion() {
        this._region = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get regionInput() {
        return this._region;
    }
    get terraformLabels() {
        return this._terraformLabels;
    }
    get clusterConfig() {
        return this._clusterConfig;
    }
    putClusterConfig(value) {
        this._clusterConfig.internalValue = value;
    }
    resetClusterConfig() {
        this._clusterConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clusterConfigInput() {
        return this._clusterConfig.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    get virtualClusterConfig() {
        return this._virtualClusterConfig;
    }
    putVirtualClusterConfig(value) {
        this._virtualClusterConfig.internalValue = value;
    }
    resetVirtualClusterConfig() {
        this._virtualClusterConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get virtualClusterConfigInput() {
        return this._virtualClusterConfig.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            graceful_decommission_timeout: cdktf.stringToTerraform(this._gracefulDecommissionTimeout),
            id: cdktf.stringToTerraform(this._id),
            labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._labels),
            name: cdktf.stringToTerraform(this._name),
            project: cdktf.stringToTerraform(this._project),
            region: cdktf.stringToTerraform(this._region),
            cluster_config: dataprocClusterClusterConfigToTerraform(this._clusterConfig.internalValue),
            timeouts: dataprocClusterTimeoutsToTerraform(this._timeouts.internalValue),
            virtual_cluster_config: dataprocClusterVirtualClusterConfigToTerraform(this._virtualClusterConfig.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            graceful_decommission_timeout: {
                value: cdktf.stringToHclTerraform(this._gracefulDecommissionTimeout),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            labels: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._labels),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            name: {
                value: cdktf.stringToHclTerraform(this._name),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            project: {
                value: cdktf.stringToHclTerraform(this._project),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            region: {
                value: cdktf.stringToHclTerraform(this._region),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            cluster_config: {
                value: dataprocClusterClusterConfigToHclTerraform(this._clusterConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "DataprocClusterClusterConfigList",
            },
            timeouts: {
                value: dataprocClusterTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "DataprocClusterTimeouts",
            },
            virtual_cluster_config: {
                value: dataprocClusterVirtualClusterConfigToHclTerraform(this._virtualClusterConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "DataprocClusterVirtualClusterConfigList",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.DataprocCluster = DataprocCluster;
_32 = JSII_RTTI_SYMBOL_1;
DataprocCluster[_32] = { fqn: "@cdktf/provider-google.dataprocCluster.DataprocCluster", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
DataprocCluster.tfResourceType = "google_dataproc_cluster";
//# sourceMappingURL=data:application/json;base64,