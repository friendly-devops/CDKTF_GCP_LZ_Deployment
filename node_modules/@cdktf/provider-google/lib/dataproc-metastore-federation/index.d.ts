/**
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: MPL-2.0
 */
import { Construct } from 'constructs';
import * as cdktf from 'cdktf';
export interface DataprocMetastoreFederationConfig extends cdktf.TerraformMetaArguments {
    /**
    * The ID of the metastore federation. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_),
    * and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between
    * 3 and 63 characters.
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/dataproc_metastore_federation#federation_id DataprocMetastoreFederation#federation_id}
    */
    readonly federationId: string;
    /**
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/dataproc_metastore_federation#id DataprocMetastoreFederation#id}
    *
    * Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2.
    * If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
    */
    readonly id?: string;
    /**
    * User-defined labels for the metastore federation.
    *
    * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
    * Please refer to the field 'effective_labels' for all of the labels present on the resource.
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/dataproc_metastore_federation#labels DataprocMetastoreFederation#labels}
    */
    readonly labels?: {
        [key: string]: string;
    };
    /**
    * The location where the metastore federation should reside.
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/dataproc_metastore_federation#location DataprocMetastoreFederation#location}
    */
    readonly location?: string;
    /**
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/dataproc_metastore_federation#project DataprocMetastoreFederation#project}
    */
    readonly project?: string;
    /**
    * The Apache Hive metastore version of the federation. All backend metastore versions must be compatible with the federation version.
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/dataproc_metastore_federation#version DataprocMetastoreFederation#version}
    */
    readonly version: string;
    /**
    * backend_metastores block
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/dataproc_metastore_federation#backend_metastores DataprocMetastoreFederation#backend_metastores}
    */
    readonly backendMetastores: DataprocMetastoreFederationBackendMetastores[] | cdktf.IResolvable;
    /**
    * timeouts block
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/dataproc_metastore_federation#timeouts DataprocMetastoreFederation#timeouts}
    */
    readonly timeouts?: DataprocMetastoreFederationTimeouts;
}
export interface DataprocMetastoreFederationBackendMetastores {
    /**
    * The type of the backend metastore. Possible values: ["METASTORE_TYPE_UNSPECIFIED", "DATAPROC_METASTORE", "BIGQUERY"]
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/dataproc_metastore_federation#metastore_type DataprocMetastoreFederation#metastore_type}
    */
    readonly metastoreType: string;
    /**
    * The relative resource name of the metastore that is being federated. The formats of the relative resource names for the currently supported metastores are listed below: Dataplex: projects/{projectId}/locations/{location}/lakes/{lake_id} BigQuery: projects/{projectId} Dataproc Metastore: projects/{projectId}/locations/{location}/services/{serviceId}
    *
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/dataproc_metastore_federation#name DataprocMetastoreFederation#name}
    */
    readonly name: string;
    /**
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/dataproc_metastore_federation#rank DataprocMetastoreFederation#rank}
    */
    readonly rank: string;
}
export declare function dataprocMetastoreFederationBackendMetastoresToTerraform(struct?: DataprocMetastoreFederationBackendMetastores | cdktf.IResolvable): any;
export declare function dataprocMetastoreFederationBackendMetastoresToHclTerraform(struct?: DataprocMetastoreFederationBackendMetastores | cdktf.IResolvable): any;
export declare class DataprocMetastoreFederationBackendMetastoresOutputReference extends cdktf.ComplexObject {
    private isEmptyObject;
    private resolvableValue?;
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean);
    get internalValue(): DataprocMetastoreFederationBackendMetastores | cdktf.IResolvable | undefined;
    set internalValue(value: DataprocMetastoreFederationBackendMetastores | cdktf.IResolvable | undefined);
    private _metastoreType?;
    get metastoreType(): string;
    set metastoreType(value: string);
    get metastoreTypeInput(): string | undefined;
    private _name?;
    get name(): string;
    set name(value: string);
    get nameInput(): string | undefined;
    private _rank?;
    get rank(): string;
    set rank(value: string);
    get rankInput(): string | undefined;
}
export declare class DataprocMetastoreFederationBackendMetastoresList extends cdktf.ComplexList {
    protected terraformResource: cdktf.IInterpolatingParent;
    protected terraformAttribute: string;
    protected wrapsSet: boolean;
    internalValue?: DataprocMetastoreFederationBackendMetastores[] | cdktf.IResolvable;
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, wrapsSet: boolean);
    /**
    * @param index the index of the item to return
    */
    get(index: number): DataprocMetastoreFederationBackendMetastoresOutputReference;
}
export interface DataprocMetastoreFederationTimeouts {
    /**
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/dataproc_metastore_federation#create DataprocMetastoreFederation#create}
    */
    readonly create?: string;
    /**
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/dataproc_metastore_federation#delete DataprocMetastoreFederation#delete}
    */
    readonly delete?: string;
    /**
    * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/dataproc_metastore_federation#update DataprocMetastoreFederation#update}
    */
    readonly update?: string;
}
export declare function dataprocMetastoreFederationTimeoutsToTerraform(struct?: DataprocMetastoreFederationTimeouts | cdktf.IResolvable): any;
export declare function dataprocMetastoreFederationTimeoutsToHclTerraform(struct?: DataprocMetastoreFederationTimeouts | cdktf.IResolvable): any;
export declare class DataprocMetastoreFederationTimeoutsOutputReference extends cdktf.ComplexObject {
    private isEmptyObject;
    private resolvableValue?;
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string);
    get internalValue(): DataprocMetastoreFederationTimeouts | cdktf.IResolvable | undefined;
    set internalValue(value: DataprocMetastoreFederationTimeouts | cdktf.IResolvable | undefined);
    private _create?;
    get create(): string;
    set create(value: string);
    resetCreate(): void;
    get createInput(): string | undefined;
    private _delete?;
    get delete(): string;
    set delete(value: string);
    resetDelete(): void;
    get deleteInput(): string | undefined;
    private _update?;
    get update(): string;
    set update(value: string);
    resetUpdate(): void;
    get updateInput(): string | undefined;
}
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/dataproc_metastore_federation google_dataproc_metastore_federation}
*/
export declare class DataprocMetastoreFederation extends cdktf.TerraformResource {
    static readonly tfResourceType = "google_dataproc_metastore_federation";
    /**
    * Generates CDKTF code for importing a DataprocMetastoreFederation resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the DataprocMetastoreFederation to import
    * @param importFromId The id of the existing DataprocMetastoreFederation that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/dataproc_metastore_federation#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the DataprocMetastoreFederation to import is found
    */
    static generateConfigForImport(scope: Construct, importToId: string, importFromId: string, provider?: cdktf.TerraformProvider): cdktf.ImportableResource;
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/dataproc_metastore_federation google_dataproc_metastore_federation} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataprocMetastoreFederationConfig
    */
    constructor(scope: Construct, id: string, config: DataprocMetastoreFederationConfig);
    private _effectiveLabels;
    get effectiveLabels(): cdktf.StringMap;
    get endpointUri(): string;
    private _federationId?;
    get federationId(): string;
    set federationId(value: string);
    get federationIdInput(): string | undefined;
    private _id?;
    get id(): string;
    set id(value: string);
    resetId(): void;
    get idInput(): string | undefined;
    private _labels?;
    get labels(): {
        [key: string]: string;
    };
    set labels(value: {
        [key: string]: string;
    });
    resetLabels(): void;
    get labelsInput(): {
        [key: string]: string;
    } | undefined;
    private _location?;
    get location(): string;
    set location(value: string);
    resetLocation(): void;
    get locationInput(): string | undefined;
    get name(): string;
    private _project?;
    get project(): string;
    set project(value: string);
    resetProject(): void;
    get projectInput(): string | undefined;
    get state(): string;
    get stateMessage(): string;
    private _terraformLabels;
    get terraformLabels(): cdktf.StringMap;
    get uid(): string;
    private _version?;
    get version(): string;
    set version(value: string);
    get versionInput(): string | undefined;
    private _backendMetastores;
    get backendMetastores(): DataprocMetastoreFederationBackendMetastoresList;
    putBackendMetastores(value: DataprocMetastoreFederationBackendMetastores[] | cdktf.IResolvable): void;
    get backendMetastoresInput(): cdktf.IResolvable | DataprocMetastoreFederationBackendMetastores[] | undefined;
    private _timeouts;
    get timeouts(): DataprocMetastoreFederationTimeoutsOutputReference;
    putTimeouts(value: DataprocMetastoreFederationTimeouts): void;
    resetTimeouts(): void;
    get timeoutsInput(): cdktf.IResolvable | DataprocMetastoreFederationTimeouts | undefined;
    protected synthesizeAttributes(): {
        [name: string]: any;
    };
    protected synthesizeHclAttributes(): {
        [name: string]: any;
    };
}
