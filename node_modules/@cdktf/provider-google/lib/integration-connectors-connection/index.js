"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationConnectorsConnectionAuthConfigSshPublicKeySshClientCertOutputReference = exports.integrationConnectorsConnectionAuthConfigSshPublicKeySshClientCertToHclTerraform = exports.integrationConnectorsConnectionAuthConfigSshPublicKeySshClientCertToTerraform = exports.IntegrationConnectorsConnectionAuthConfigOauth2JwtBearerOutputReference = exports.integrationConnectorsConnectionAuthConfigOauth2JwtBearerToHclTerraform = exports.integrationConnectorsConnectionAuthConfigOauth2JwtBearerToTerraform = exports.IntegrationConnectorsConnectionAuthConfigOauth2JwtBearerJwtClaimsOutputReference = exports.integrationConnectorsConnectionAuthConfigOauth2JwtBearerJwtClaimsToHclTerraform = exports.integrationConnectorsConnectionAuthConfigOauth2JwtBearerJwtClaimsToTerraform = exports.IntegrationConnectorsConnectionAuthConfigOauth2JwtBearerClientKeyOutputReference = exports.integrationConnectorsConnectionAuthConfigOauth2JwtBearerClientKeyToHclTerraform = exports.integrationConnectorsConnectionAuthConfigOauth2JwtBearerClientKeyToTerraform = exports.IntegrationConnectorsConnectionAuthConfigOauth2ClientCredentialsOutputReference = exports.integrationConnectorsConnectionAuthConfigOauth2ClientCredentialsToHclTerraform = exports.integrationConnectorsConnectionAuthConfigOauth2ClientCredentialsToTerraform = exports.IntegrationConnectorsConnectionAuthConfigOauth2ClientCredentialsClientSecretOutputReference = exports.integrationConnectorsConnectionAuthConfigOauth2ClientCredentialsClientSecretToHclTerraform = exports.integrationConnectorsConnectionAuthConfigOauth2ClientCredentialsClientSecretToTerraform = exports.IntegrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowOutputReference = exports.integrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowToHclTerraform = exports.integrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowToTerraform = exports.IntegrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowClientSecretOutputReference = exports.integrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowClientSecretToHclTerraform = exports.integrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowClientSecretToTerraform = exports.IntegrationConnectorsConnectionAuthConfigAdditionalVariableList = exports.IntegrationConnectorsConnectionAuthConfigAdditionalVariableOutputReference = exports.integrationConnectorsConnectionAuthConfigAdditionalVariableToHclTerraform = exports.integrationConnectorsConnectionAuthConfigAdditionalVariableToTerraform = exports.IntegrationConnectorsConnectionAuthConfigAdditionalVariableSecretValueOutputReference = exports.integrationConnectorsConnectionAuthConfigAdditionalVariableSecretValueToHclTerraform = exports.integrationConnectorsConnectionAuthConfigAdditionalVariableSecretValueToTerraform = exports.IntegrationConnectorsConnectionAuthConfigAdditionalVariableEncryptionKeyValueOutputReference = exports.integrationConnectorsConnectionAuthConfigAdditionalVariableEncryptionKeyValueToHclTerraform = exports.integrationConnectorsConnectionAuthConfigAdditionalVariableEncryptionKeyValueToTerraform = exports.IntegrationConnectorsConnectionStatusList = exports.IntegrationConnectorsConnectionStatusOutputReference = exports.integrationConnectorsConnectionStatusToHclTerraform = exports.integrationConnectorsConnectionStatusToTerraform = exports.IntegrationConnectorsConnectionEventingRuntimeDataList = exports.IntegrationConnectorsConnectionEventingRuntimeDataOutputReference = exports.integrationConnectorsConnectionEventingRuntimeDataToHclTerraform = exports.integrationConnectorsConnectionEventingRuntimeDataToTerraform = exports.IntegrationConnectorsConnectionEventingRuntimeDataStatusList = exports.IntegrationConnectorsConnectionEventingRuntimeDataStatusOutputReference = exports.integrationConnectorsConnectionEventingRuntimeDataStatusToHclTerraform = exports.integrationConnectorsConnectionEventingRuntimeDataStatusToTerraform = exports.IntegrationConnectorsConnectionConnectorVersionInfraConfigList = exports.IntegrationConnectorsConnectionConnectorVersionInfraConfigOutputReference = exports.integrationConnectorsConnectionConnectorVersionInfraConfigToHclTerraform = exports.integrationConnectorsConnectionConnectorVersionInfraConfigToTerraform = void 0;
exports.integrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableToTerraform = exports.IntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableSecretValueOutputReference = exports.integrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableSecretValueToHclTerraform = exports.integrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableSecretValueToTerraform = exports.IntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableEncryptionKeyValueOutputReference = exports.integrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableEncryptionKeyValueToHclTerraform = exports.integrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableEncryptionKeyValueToTerraform = exports.IntegrationConnectorsConnectionEventingConfigAdditionalVariableList = exports.IntegrationConnectorsConnectionEventingConfigAdditionalVariableOutputReference = exports.integrationConnectorsConnectionEventingConfigAdditionalVariableToHclTerraform = exports.integrationConnectorsConnectionEventingConfigAdditionalVariableToTerraform = exports.IntegrationConnectorsConnectionEventingConfigAdditionalVariableSecretValueOutputReference = exports.integrationConnectorsConnectionEventingConfigAdditionalVariableSecretValueToHclTerraform = exports.integrationConnectorsConnectionEventingConfigAdditionalVariableSecretValueToTerraform = exports.IntegrationConnectorsConnectionEventingConfigAdditionalVariableEncryptionKeyValueOutputReference = exports.integrationConnectorsConnectionEventingConfigAdditionalVariableEncryptionKeyValueToHclTerraform = exports.integrationConnectorsConnectionEventingConfigAdditionalVariableEncryptionKeyValueToTerraform = exports.IntegrationConnectorsConnectionDestinationConfigList = exports.IntegrationConnectorsConnectionDestinationConfigOutputReference = exports.integrationConnectorsConnectionDestinationConfigToHclTerraform = exports.integrationConnectorsConnectionDestinationConfigToTerraform = exports.IntegrationConnectorsConnectionDestinationConfigDestinationList = exports.IntegrationConnectorsConnectionDestinationConfigDestinationOutputReference = exports.integrationConnectorsConnectionDestinationConfigDestinationToHclTerraform = exports.integrationConnectorsConnectionDestinationConfigDestinationToTerraform = exports.IntegrationConnectorsConnectionConfigVariableList = exports.IntegrationConnectorsConnectionConfigVariableOutputReference = exports.integrationConnectorsConnectionConfigVariableToHclTerraform = exports.integrationConnectorsConnectionConfigVariableToTerraform = exports.IntegrationConnectorsConnectionConfigVariableSecretValueOutputReference = exports.integrationConnectorsConnectionConfigVariableSecretValueToHclTerraform = exports.integrationConnectorsConnectionConfigVariableSecretValueToTerraform = exports.IntegrationConnectorsConnectionConfigVariableEncryptionKeyValueOutputReference = exports.integrationConnectorsConnectionConfigVariableEncryptionKeyValueToHclTerraform = exports.integrationConnectorsConnectionConfigVariableEncryptionKeyValueToTerraform = exports.IntegrationConnectorsConnectionAuthConfigOutputReference = exports.integrationConnectorsConnectionAuthConfigToHclTerraform = exports.integrationConnectorsConnectionAuthConfigToTerraform = exports.IntegrationConnectorsConnectionAuthConfigUserPasswordOutputReference = exports.integrationConnectorsConnectionAuthConfigUserPasswordToHclTerraform = exports.integrationConnectorsConnectionAuthConfigUserPasswordToTerraform = exports.IntegrationConnectorsConnectionAuthConfigUserPasswordPasswordOutputReference = exports.integrationConnectorsConnectionAuthConfigUserPasswordPasswordToHclTerraform = exports.integrationConnectorsConnectionAuthConfigUserPasswordPasswordToTerraform = exports.IntegrationConnectorsConnectionAuthConfigSshPublicKeyOutputReference = exports.integrationConnectorsConnectionAuthConfigSshPublicKeyToHclTerraform = exports.integrationConnectorsConnectionAuthConfigSshPublicKeyToTerraform = exports.IntegrationConnectorsConnectionAuthConfigSshPublicKeySshClientCertPassOutputReference = exports.integrationConnectorsConnectionAuthConfigSshPublicKeySshClientCertPassToHclTerraform = exports.integrationConnectorsConnectionAuthConfigSshPublicKeySshClientCertPassToTerraform = void 0;
exports.IntegrationConnectorsConnectionSslConfigClientPrivateKeyPassOutputReference = exports.integrationConnectorsConnectionSslConfigClientPrivateKeyPassToHclTerraform = exports.integrationConnectorsConnectionSslConfigClientPrivateKeyPassToTerraform = exports.IntegrationConnectorsConnectionSslConfigClientPrivateKeyOutputReference = exports.integrationConnectorsConnectionSslConfigClientPrivateKeyToHclTerraform = exports.integrationConnectorsConnectionSslConfigClientPrivateKeyToTerraform = exports.IntegrationConnectorsConnectionSslConfigClientCertificateOutputReference = exports.integrationConnectorsConnectionSslConfigClientCertificateToHclTerraform = exports.integrationConnectorsConnectionSslConfigClientCertificateToTerraform = exports.IntegrationConnectorsConnectionSslConfigAdditionalVariableList = exports.IntegrationConnectorsConnectionSslConfigAdditionalVariableOutputReference = exports.integrationConnectorsConnectionSslConfigAdditionalVariableToHclTerraform = exports.integrationConnectorsConnectionSslConfigAdditionalVariableToTerraform = exports.IntegrationConnectorsConnectionSslConfigAdditionalVariableSecretValueOutputReference = exports.integrationConnectorsConnectionSslConfigAdditionalVariableSecretValueToHclTerraform = exports.integrationConnectorsConnectionSslConfigAdditionalVariableSecretValueToTerraform = exports.IntegrationConnectorsConnectionSslConfigAdditionalVariableEncryptionKeyValueOutputReference = exports.integrationConnectorsConnectionSslConfigAdditionalVariableEncryptionKeyValueToHclTerraform = exports.integrationConnectorsConnectionSslConfigAdditionalVariableEncryptionKeyValueToTerraform = exports.IntegrationConnectorsConnectionNodeConfigOutputReference = exports.integrationConnectorsConnectionNodeConfigToHclTerraform = exports.integrationConnectorsConnectionNodeConfigToTerraform = exports.IntegrationConnectorsConnectionLogConfigOutputReference = exports.integrationConnectorsConnectionLogConfigToHclTerraform = exports.integrationConnectorsConnectionLogConfigToTerraform = exports.IntegrationConnectorsConnectionLockConfigOutputReference = exports.integrationConnectorsConnectionLockConfigToHclTerraform = exports.integrationConnectorsConnectionLockConfigToTerraform = exports.IntegrationConnectorsConnectionEventingConfigOutputReference = exports.integrationConnectorsConnectionEventingConfigToHclTerraform = exports.integrationConnectorsConnectionEventingConfigToTerraform = exports.IntegrationConnectorsConnectionEventingConfigRegistrationDestinationConfigOutputReference = exports.integrationConnectorsConnectionEventingConfigRegistrationDestinationConfigToHclTerraform = exports.integrationConnectorsConnectionEventingConfigRegistrationDestinationConfigToTerraform = exports.IntegrationConnectorsConnectionEventingConfigRegistrationDestinationConfigDestinationList = exports.IntegrationConnectorsConnectionEventingConfigRegistrationDestinationConfigDestinationOutputReference = exports.integrationConnectorsConnectionEventingConfigRegistrationDestinationConfigDestinationToHclTerraform = exports.integrationConnectorsConnectionEventingConfigRegistrationDestinationConfigDestinationToTerraform = exports.IntegrationConnectorsConnectionEventingConfigAuthConfigOutputReference = exports.integrationConnectorsConnectionEventingConfigAuthConfigToHclTerraform = exports.integrationConnectorsConnectionEventingConfigAuthConfigToTerraform = exports.IntegrationConnectorsConnectionEventingConfigAuthConfigUserPasswordOutputReference = exports.integrationConnectorsConnectionEventingConfigAuthConfigUserPasswordToHclTerraform = exports.integrationConnectorsConnectionEventingConfigAuthConfigUserPasswordToTerraform = exports.IntegrationConnectorsConnectionEventingConfigAuthConfigUserPasswordPasswordOutputReference = exports.integrationConnectorsConnectionEventingConfigAuthConfigUserPasswordPasswordToHclTerraform = exports.integrationConnectorsConnectionEventingConfigAuthConfigUserPasswordPasswordToTerraform = exports.IntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableList = exports.IntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableOutputReference = exports.integrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableToHclTerraform = void 0;
exports.IntegrationConnectorsConnection = exports.IntegrationConnectorsConnectionTimeoutsOutputReference = exports.integrationConnectorsConnectionTimeoutsToHclTerraform = exports.integrationConnectorsConnectionTimeoutsToTerraform = exports.IntegrationConnectorsConnectionSslConfigOutputReference = exports.integrationConnectorsConnectionSslConfigToHclTerraform = exports.integrationConnectorsConnectionSslConfigToTerraform = exports.IntegrationConnectorsConnectionSslConfigPrivateServerCertificateOutputReference = exports.integrationConnectorsConnectionSslConfigPrivateServerCertificateToHclTerraform = exports.integrationConnectorsConnectionSslConfigPrivateServerCertificateToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function integrationConnectorsConnectionConnectorVersionInfraConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.integrationConnectorsConnectionConnectorVersionInfraConfigToTerraform = integrationConnectorsConnectionConnectorVersionInfraConfigToTerraform;
function integrationConnectorsConnectionConnectorVersionInfraConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.integrationConnectorsConnectionConnectorVersionInfraConfigToHclTerraform = integrationConnectorsConnectionConnectorVersionInfraConfigToHclTerraform;
class IntegrationConnectorsConnectionConnectorVersionInfraConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // ratelimit_threshold - computed: true, optional: false, required: false
    get ratelimitThreshold() {
        return this.getStringAttribute('ratelimit_threshold');
    }
}
exports.IntegrationConnectorsConnectionConnectorVersionInfraConfigOutputReference = IntegrationConnectorsConnectionConnectorVersionInfraConfigOutputReference;
_a = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionConnectorVersionInfraConfigOutputReference[_a] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionConnectorVersionInfraConfigOutputReference", version: "14.13.1" };
class IntegrationConnectorsConnectionConnectorVersionInfraConfigList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new IntegrationConnectorsConnectionConnectorVersionInfraConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.IntegrationConnectorsConnectionConnectorVersionInfraConfigList = IntegrationConnectorsConnectionConnectorVersionInfraConfigList;
_b = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionConnectorVersionInfraConfigList[_b] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionConnectorVersionInfraConfigList", version: "14.13.1" };
function integrationConnectorsConnectionEventingRuntimeDataStatusToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.integrationConnectorsConnectionEventingRuntimeDataStatusToTerraform = integrationConnectorsConnectionEventingRuntimeDataStatusToTerraform;
function integrationConnectorsConnectionEventingRuntimeDataStatusToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.integrationConnectorsConnectionEventingRuntimeDataStatusToHclTerraform = integrationConnectorsConnectionEventingRuntimeDataStatusToHclTerraform;
class IntegrationConnectorsConnectionEventingRuntimeDataStatusOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // description - computed: true, optional: false, required: false
    get description() {
        return this.getStringAttribute('description');
    }
    // state - computed: true, optional: false, required: false
    get state() {
        return this.getStringAttribute('state');
    }
}
exports.IntegrationConnectorsConnectionEventingRuntimeDataStatusOutputReference = IntegrationConnectorsConnectionEventingRuntimeDataStatusOutputReference;
_c = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionEventingRuntimeDataStatusOutputReference[_c] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionEventingRuntimeDataStatusOutputReference", version: "14.13.1" };
class IntegrationConnectorsConnectionEventingRuntimeDataStatusList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new IntegrationConnectorsConnectionEventingRuntimeDataStatusOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.IntegrationConnectorsConnectionEventingRuntimeDataStatusList = IntegrationConnectorsConnectionEventingRuntimeDataStatusList;
_d = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionEventingRuntimeDataStatusList[_d] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionEventingRuntimeDataStatusList", version: "14.13.1" };
function integrationConnectorsConnectionEventingRuntimeDataToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.integrationConnectorsConnectionEventingRuntimeDataToTerraform = integrationConnectorsConnectionEventingRuntimeDataToTerraform;
function integrationConnectorsConnectionEventingRuntimeDataToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.integrationConnectorsConnectionEventingRuntimeDataToHclTerraform = integrationConnectorsConnectionEventingRuntimeDataToHclTerraform;
class IntegrationConnectorsConnectionEventingRuntimeDataOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // status - computed: true, optional: false, required: false
        this._status = new IntegrationConnectorsConnectionEventingRuntimeDataStatusList(this, "status", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // events_listener_endpoint - computed: true, optional: false, required: false
    get eventsListenerEndpoint() {
        return this.getStringAttribute('events_listener_endpoint');
    }
    get status() {
        return this._status;
    }
}
exports.IntegrationConnectorsConnectionEventingRuntimeDataOutputReference = IntegrationConnectorsConnectionEventingRuntimeDataOutputReference;
_e = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionEventingRuntimeDataOutputReference[_e] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionEventingRuntimeDataOutputReference", version: "14.13.1" };
class IntegrationConnectorsConnectionEventingRuntimeDataList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new IntegrationConnectorsConnectionEventingRuntimeDataOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.IntegrationConnectorsConnectionEventingRuntimeDataList = IntegrationConnectorsConnectionEventingRuntimeDataList;
_f = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionEventingRuntimeDataList[_f] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionEventingRuntimeDataList", version: "14.13.1" };
function integrationConnectorsConnectionStatusToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.integrationConnectorsConnectionStatusToTerraform = integrationConnectorsConnectionStatusToTerraform;
function integrationConnectorsConnectionStatusToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.integrationConnectorsConnectionStatusToHclTerraform = integrationConnectorsConnectionStatusToHclTerraform;
class IntegrationConnectorsConnectionStatusOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // description - computed: true, optional: false, required: false
    get description() {
        return this.getStringAttribute('description');
    }
    // state - computed: true, optional: false, required: false
    get state() {
        return this.getStringAttribute('state');
    }
    // status - computed: true, optional: false, required: false
    get status() {
        return this.getStringAttribute('status');
    }
}
exports.IntegrationConnectorsConnectionStatusOutputReference = IntegrationConnectorsConnectionStatusOutputReference;
_g = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionStatusOutputReference[_g] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionStatusOutputReference", version: "14.13.1" };
class IntegrationConnectorsConnectionStatusList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new IntegrationConnectorsConnectionStatusOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.IntegrationConnectorsConnectionStatusList = IntegrationConnectorsConnectionStatusList;
_h = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionStatusList[_h] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionStatusList", version: "14.13.1" };
function integrationConnectorsConnectionAuthConfigAdditionalVariableEncryptionKeyValueToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        kms_key_name: cdktf.stringToTerraform(struct.kmsKeyName),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.integrationConnectorsConnectionAuthConfigAdditionalVariableEncryptionKeyValueToTerraform = integrationConnectorsConnectionAuthConfigAdditionalVariableEncryptionKeyValueToTerraform;
function integrationConnectorsConnectionAuthConfigAdditionalVariableEncryptionKeyValueToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        kms_key_name: {
            value: cdktf.stringToHclTerraform(struct.kmsKeyName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        type: {
            value: cdktf.stringToHclTerraform(struct.type),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.integrationConnectorsConnectionAuthConfigAdditionalVariableEncryptionKeyValueToHclTerraform = integrationConnectorsConnectionAuthConfigAdditionalVariableEncryptionKeyValueToHclTerraform;
class IntegrationConnectorsConnectionAuthConfigAdditionalVariableEncryptionKeyValueOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._kmsKeyName !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyName = this._kmsKeyName;
        }
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._kmsKeyName = undefined;
            this._type = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._kmsKeyName = value.kmsKeyName;
            this._type = value.type;
        }
    }
    get kmsKeyName() {
        return this.getStringAttribute('kms_key_name');
    }
    set kmsKeyName(value) {
        this._kmsKeyName = value;
    }
    resetKmsKeyName() {
        this._kmsKeyName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyNameInput() {
        return this._kmsKeyName;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
}
exports.IntegrationConnectorsConnectionAuthConfigAdditionalVariableEncryptionKeyValueOutputReference = IntegrationConnectorsConnectionAuthConfigAdditionalVariableEncryptionKeyValueOutputReference;
_j = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionAuthConfigAdditionalVariableEncryptionKeyValueOutputReference[_j] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionAuthConfigAdditionalVariableEncryptionKeyValueOutputReference", version: "14.13.1" };
function integrationConnectorsConnectionAuthConfigAdditionalVariableSecretValueToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        secret_version: cdktf.stringToTerraform(struct.secretVersion),
    };
}
exports.integrationConnectorsConnectionAuthConfigAdditionalVariableSecretValueToTerraform = integrationConnectorsConnectionAuthConfigAdditionalVariableSecretValueToTerraform;
function integrationConnectorsConnectionAuthConfigAdditionalVariableSecretValueToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        secret_version: {
            value: cdktf.stringToHclTerraform(struct.secretVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.integrationConnectorsConnectionAuthConfigAdditionalVariableSecretValueToHclTerraform = integrationConnectorsConnectionAuthConfigAdditionalVariableSecretValueToHclTerraform;
class IntegrationConnectorsConnectionAuthConfigAdditionalVariableSecretValueOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._secretVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.secretVersion = this._secretVersion;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._secretVersion = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._secretVersion = value.secretVersion;
        }
    }
    get secretVersion() {
        return this.getStringAttribute('secret_version');
    }
    set secretVersion(value) {
        this._secretVersion = value;
    }
    // Temporarily expose input value. Use with caution.
    get secretVersionInput() {
        return this._secretVersion;
    }
}
exports.IntegrationConnectorsConnectionAuthConfigAdditionalVariableSecretValueOutputReference = IntegrationConnectorsConnectionAuthConfigAdditionalVariableSecretValueOutputReference;
_k = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionAuthConfigAdditionalVariableSecretValueOutputReference[_k] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionAuthConfigAdditionalVariableSecretValueOutputReference", version: "14.13.1" };
function integrationConnectorsConnectionAuthConfigAdditionalVariableToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        boolean_value: cdktf.booleanToTerraform(struct.booleanValue),
        integer_value: cdktf.numberToTerraform(struct.integerValue),
        key: cdktf.stringToTerraform(struct.key),
        string_value: cdktf.stringToTerraform(struct.stringValue),
        encryption_key_value: integrationConnectorsConnectionAuthConfigAdditionalVariableEncryptionKeyValueToTerraform(struct.encryptionKeyValue),
        secret_value: integrationConnectorsConnectionAuthConfigAdditionalVariableSecretValueToTerraform(struct.secretValue),
    };
}
exports.integrationConnectorsConnectionAuthConfigAdditionalVariableToTerraform = integrationConnectorsConnectionAuthConfigAdditionalVariableToTerraform;
function integrationConnectorsConnectionAuthConfigAdditionalVariableToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        boolean_value: {
            value: cdktf.booleanToHclTerraform(struct.booleanValue),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        integer_value: {
            value: cdktf.numberToHclTerraform(struct.integerValue),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        key: {
            value: cdktf.stringToHclTerraform(struct.key),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        string_value: {
            value: cdktf.stringToHclTerraform(struct.stringValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        encryption_key_value: {
            value: integrationConnectorsConnectionAuthConfigAdditionalVariableEncryptionKeyValueToHclTerraform(struct.encryptionKeyValue),
            isBlock: true,
            type: "list",
            storageClassType: "IntegrationConnectorsConnectionAuthConfigAdditionalVariableEncryptionKeyValueList",
        },
        secret_value: {
            value: integrationConnectorsConnectionAuthConfigAdditionalVariableSecretValueToHclTerraform(struct.secretValue),
            isBlock: true,
            type: "list",
            storageClassType: "IntegrationConnectorsConnectionAuthConfigAdditionalVariableSecretValueList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.integrationConnectorsConnectionAuthConfigAdditionalVariableToHclTerraform = integrationConnectorsConnectionAuthConfigAdditionalVariableToHclTerraform;
class IntegrationConnectorsConnectionAuthConfigAdditionalVariableOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // encryption_key_value - computed: false, optional: true, required: false
        this._encryptionKeyValue = new IntegrationConnectorsConnectionAuthConfigAdditionalVariableEncryptionKeyValueOutputReference(this, "encryption_key_value");
        // secret_value - computed: false, optional: true, required: false
        this._secretValue = new IntegrationConnectorsConnectionAuthConfigAdditionalVariableSecretValueOutputReference(this, "secret_value");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._booleanValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.booleanValue = this._booleanValue;
        }
        if (this._integerValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.integerValue = this._integerValue;
        }
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._stringValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.stringValue = this._stringValue;
        }
        if (this._encryptionKeyValue?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.encryptionKeyValue = this._encryptionKeyValue?.internalValue;
        }
        if (this._secretValue?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.secretValue = this._secretValue?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._booleanValue = undefined;
            this._integerValue = undefined;
            this._key = undefined;
            this._stringValue = undefined;
            this._encryptionKeyValue.internalValue = undefined;
            this._secretValue.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._booleanValue = value.booleanValue;
            this._integerValue = value.integerValue;
            this._key = value.key;
            this._stringValue = value.stringValue;
            this._encryptionKeyValue.internalValue = value.encryptionKeyValue;
            this._secretValue.internalValue = value.secretValue;
        }
    }
    get booleanValue() {
        return this.getBooleanAttribute('boolean_value');
    }
    set booleanValue(value) {
        this._booleanValue = value;
    }
    resetBooleanValue() {
        this._booleanValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get booleanValueInput() {
        return this._booleanValue;
    }
    get integerValue() {
        return this.getNumberAttribute('integer_value');
    }
    set integerValue(value) {
        this._integerValue = value;
    }
    resetIntegerValue() {
        this._integerValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get integerValueInput() {
        return this._integerValue;
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get stringValue() {
        return this.getStringAttribute('string_value');
    }
    set stringValue(value) {
        this._stringValue = value;
    }
    resetStringValue() {
        this._stringValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stringValueInput() {
        return this._stringValue;
    }
    get encryptionKeyValue() {
        return this._encryptionKeyValue;
    }
    putEncryptionKeyValue(value) {
        this._encryptionKeyValue.internalValue = value;
    }
    resetEncryptionKeyValue() {
        this._encryptionKeyValue.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encryptionKeyValueInput() {
        return this._encryptionKeyValue.internalValue;
    }
    get secretValue() {
        return this._secretValue;
    }
    putSecretValue(value) {
        this._secretValue.internalValue = value;
    }
    resetSecretValue() {
        this._secretValue.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secretValueInput() {
        return this._secretValue.internalValue;
    }
}
exports.IntegrationConnectorsConnectionAuthConfigAdditionalVariableOutputReference = IntegrationConnectorsConnectionAuthConfigAdditionalVariableOutputReference;
_l = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionAuthConfigAdditionalVariableOutputReference[_l] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionAuthConfigAdditionalVariableOutputReference", version: "14.13.1" };
class IntegrationConnectorsConnectionAuthConfigAdditionalVariableList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new IntegrationConnectorsConnectionAuthConfigAdditionalVariableOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.IntegrationConnectorsConnectionAuthConfigAdditionalVariableList = IntegrationConnectorsConnectionAuthConfigAdditionalVariableList;
_m = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionAuthConfigAdditionalVariableList[_m] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionAuthConfigAdditionalVariableList", version: "14.13.1" };
function integrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowClientSecretToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        secret_version: cdktf.stringToTerraform(struct.secretVersion),
    };
}
exports.integrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowClientSecretToTerraform = integrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowClientSecretToTerraform;
function integrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowClientSecretToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        secret_version: {
            value: cdktf.stringToHclTerraform(struct.secretVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.integrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowClientSecretToHclTerraform = integrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowClientSecretToHclTerraform;
class IntegrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowClientSecretOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._secretVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.secretVersion = this._secretVersion;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._secretVersion = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._secretVersion = value.secretVersion;
        }
    }
    get secretVersion() {
        return this.getStringAttribute('secret_version');
    }
    set secretVersion(value) {
        this._secretVersion = value;
    }
    // Temporarily expose input value. Use with caution.
    get secretVersionInput() {
        return this._secretVersion;
    }
}
exports.IntegrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowClientSecretOutputReference = IntegrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowClientSecretOutputReference;
_o = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowClientSecretOutputReference[_o] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowClientSecretOutputReference", version: "14.13.1" };
function integrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        auth_uri: cdktf.stringToTerraform(struct.authUri),
        client_id: cdktf.stringToTerraform(struct.clientId),
        enable_pkce: cdktf.booleanToTerraform(struct.enablePkce),
        scopes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.scopes),
        client_secret: integrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowClientSecretToTerraform(struct.clientSecret),
    };
}
exports.integrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowToTerraform = integrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowToTerraform;
function integrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        auth_uri: {
            value: cdktf.stringToHclTerraform(struct.authUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        client_id: {
            value: cdktf.stringToHclTerraform(struct.clientId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        enable_pkce: {
            value: cdktf.booleanToHclTerraform(struct.enablePkce),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        scopes: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.scopes),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        client_secret: {
            value: integrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowClientSecretToHclTerraform(struct.clientSecret),
            isBlock: true,
            type: "list",
            storageClassType: "IntegrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowClientSecretList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.integrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowToHclTerraform = integrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowToHclTerraform;
class IntegrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // client_secret - computed: false, optional: true, required: false
        this._clientSecret = new IntegrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowClientSecretOutputReference(this, "client_secret");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._authUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.authUri = this._authUri;
        }
        if (this._clientId !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientId = this._clientId;
        }
        if (this._enablePkce !== undefined) {
            hasAnyValues = true;
            internalValueResult.enablePkce = this._enablePkce;
        }
        if (this._scopes !== undefined) {
            hasAnyValues = true;
            internalValueResult.scopes = this._scopes;
        }
        if (this._clientSecret?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientSecret = this._clientSecret?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._authUri = undefined;
            this._clientId = undefined;
            this._enablePkce = undefined;
            this._scopes = undefined;
            this._clientSecret.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._authUri = value.authUri;
            this._clientId = value.clientId;
            this._enablePkce = value.enablePkce;
            this._scopes = value.scopes;
            this._clientSecret.internalValue = value.clientSecret;
        }
    }
    get authUri() {
        return this.getStringAttribute('auth_uri');
    }
    set authUri(value) {
        this._authUri = value;
    }
    resetAuthUri() {
        this._authUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authUriInput() {
        return this._authUri;
    }
    get clientId() {
        return this.getStringAttribute('client_id');
    }
    set clientId(value) {
        this._clientId = value;
    }
    resetClientId() {
        this._clientId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientIdInput() {
        return this._clientId;
    }
    get enablePkce() {
        return this.getBooleanAttribute('enable_pkce');
    }
    set enablePkce(value) {
        this._enablePkce = value;
    }
    resetEnablePkce() {
        this._enablePkce = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enablePkceInput() {
        return this._enablePkce;
    }
    get scopes() {
        return this.getListAttribute('scopes');
    }
    set scopes(value) {
        this._scopes = value;
    }
    resetScopes() {
        this._scopes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scopesInput() {
        return this._scopes;
    }
    get clientSecret() {
        return this._clientSecret;
    }
    putClientSecret(value) {
        this._clientSecret.internalValue = value;
    }
    resetClientSecret() {
        this._clientSecret.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientSecretInput() {
        return this._clientSecret.internalValue;
    }
}
exports.IntegrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowOutputReference = IntegrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowOutputReference;
_p = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowOutputReference[_p] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowOutputReference", version: "14.13.1" };
function integrationConnectorsConnectionAuthConfigOauth2ClientCredentialsClientSecretToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        secret_version: cdktf.stringToTerraform(struct.secretVersion),
    };
}
exports.integrationConnectorsConnectionAuthConfigOauth2ClientCredentialsClientSecretToTerraform = integrationConnectorsConnectionAuthConfigOauth2ClientCredentialsClientSecretToTerraform;
function integrationConnectorsConnectionAuthConfigOauth2ClientCredentialsClientSecretToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        secret_version: {
            value: cdktf.stringToHclTerraform(struct.secretVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.integrationConnectorsConnectionAuthConfigOauth2ClientCredentialsClientSecretToHclTerraform = integrationConnectorsConnectionAuthConfigOauth2ClientCredentialsClientSecretToHclTerraform;
class IntegrationConnectorsConnectionAuthConfigOauth2ClientCredentialsClientSecretOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._secretVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.secretVersion = this._secretVersion;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._secretVersion = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._secretVersion = value.secretVersion;
        }
    }
    get secretVersion() {
        return this.getStringAttribute('secret_version');
    }
    set secretVersion(value) {
        this._secretVersion = value;
    }
    // Temporarily expose input value. Use with caution.
    get secretVersionInput() {
        return this._secretVersion;
    }
}
exports.IntegrationConnectorsConnectionAuthConfigOauth2ClientCredentialsClientSecretOutputReference = IntegrationConnectorsConnectionAuthConfigOauth2ClientCredentialsClientSecretOutputReference;
_q = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionAuthConfigOauth2ClientCredentialsClientSecretOutputReference[_q] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionAuthConfigOauth2ClientCredentialsClientSecretOutputReference", version: "14.13.1" };
function integrationConnectorsConnectionAuthConfigOauth2ClientCredentialsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        client_id: cdktf.stringToTerraform(struct.clientId),
        client_secret: integrationConnectorsConnectionAuthConfigOauth2ClientCredentialsClientSecretToTerraform(struct.clientSecret),
    };
}
exports.integrationConnectorsConnectionAuthConfigOauth2ClientCredentialsToTerraform = integrationConnectorsConnectionAuthConfigOauth2ClientCredentialsToTerraform;
function integrationConnectorsConnectionAuthConfigOauth2ClientCredentialsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        client_id: {
            value: cdktf.stringToHclTerraform(struct.clientId),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        client_secret: {
            value: integrationConnectorsConnectionAuthConfigOauth2ClientCredentialsClientSecretToHclTerraform(struct.clientSecret),
            isBlock: true,
            type: "list",
            storageClassType: "IntegrationConnectorsConnectionAuthConfigOauth2ClientCredentialsClientSecretList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.integrationConnectorsConnectionAuthConfigOauth2ClientCredentialsToHclTerraform = integrationConnectorsConnectionAuthConfigOauth2ClientCredentialsToHclTerraform;
class IntegrationConnectorsConnectionAuthConfigOauth2ClientCredentialsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // client_secret - computed: false, optional: true, required: false
        this._clientSecret = new IntegrationConnectorsConnectionAuthConfigOauth2ClientCredentialsClientSecretOutputReference(this, "client_secret");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._clientId !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientId = this._clientId;
        }
        if (this._clientSecret?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientSecret = this._clientSecret?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._clientId = undefined;
            this._clientSecret.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._clientId = value.clientId;
            this._clientSecret.internalValue = value.clientSecret;
        }
    }
    get clientId() {
        return this.getStringAttribute('client_id');
    }
    set clientId(value) {
        this._clientId = value;
    }
    // Temporarily expose input value. Use with caution.
    get clientIdInput() {
        return this._clientId;
    }
    get clientSecret() {
        return this._clientSecret;
    }
    putClientSecret(value) {
        this._clientSecret.internalValue = value;
    }
    resetClientSecret() {
        this._clientSecret.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientSecretInput() {
        return this._clientSecret.internalValue;
    }
}
exports.IntegrationConnectorsConnectionAuthConfigOauth2ClientCredentialsOutputReference = IntegrationConnectorsConnectionAuthConfigOauth2ClientCredentialsOutputReference;
_r = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionAuthConfigOauth2ClientCredentialsOutputReference[_r] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionAuthConfigOauth2ClientCredentialsOutputReference", version: "14.13.1" };
function integrationConnectorsConnectionAuthConfigOauth2JwtBearerClientKeyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        secret_version: cdktf.stringToTerraform(struct.secretVersion),
    };
}
exports.integrationConnectorsConnectionAuthConfigOauth2JwtBearerClientKeyToTerraform = integrationConnectorsConnectionAuthConfigOauth2JwtBearerClientKeyToTerraform;
function integrationConnectorsConnectionAuthConfigOauth2JwtBearerClientKeyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        secret_version: {
            value: cdktf.stringToHclTerraform(struct.secretVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.integrationConnectorsConnectionAuthConfigOauth2JwtBearerClientKeyToHclTerraform = integrationConnectorsConnectionAuthConfigOauth2JwtBearerClientKeyToHclTerraform;
class IntegrationConnectorsConnectionAuthConfigOauth2JwtBearerClientKeyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._secretVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.secretVersion = this._secretVersion;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._secretVersion = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._secretVersion = value.secretVersion;
        }
    }
    get secretVersion() {
        return this.getStringAttribute('secret_version');
    }
    set secretVersion(value) {
        this._secretVersion = value;
    }
    // Temporarily expose input value. Use with caution.
    get secretVersionInput() {
        return this._secretVersion;
    }
}
exports.IntegrationConnectorsConnectionAuthConfigOauth2JwtBearerClientKeyOutputReference = IntegrationConnectorsConnectionAuthConfigOauth2JwtBearerClientKeyOutputReference;
_s = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionAuthConfigOauth2JwtBearerClientKeyOutputReference[_s] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionAuthConfigOauth2JwtBearerClientKeyOutputReference", version: "14.13.1" };
function integrationConnectorsConnectionAuthConfigOauth2JwtBearerJwtClaimsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        audience: cdktf.stringToTerraform(struct.audience),
        issuer: cdktf.stringToTerraform(struct.issuer),
        subject: cdktf.stringToTerraform(struct.subject),
    };
}
exports.integrationConnectorsConnectionAuthConfigOauth2JwtBearerJwtClaimsToTerraform = integrationConnectorsConnectionAuthConfigOauth2JwtBearerJwtClaimsToTerraform;
function integrationConnectorsConnectionAuthConfigOauth2JwtBearerJwtClaimsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        audience: {
            value: cdktf.stringToHclTerraform(struct.audience),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        issuer: {
            value: cdktf.stringToHclTerraform(struct.issuer),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        subject: {
            value: cdktf.stringToHclTerraform(struct.subject),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.integrationConnectorsConnectionAuthConfigOauth2JwtBearerJwtClaimsToHclTerraform = integrationConnectorsConnectionAuthConfigOauth2JwtBearerJwtClaimsToHclTerraform;
class IntegrationConnectorsConnectionAuthConfigOauth2JwtBearerJwtClaimsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._audience !== undefined) {
            hasAnyValues = true;
            internalValueResult.audience = this._audience;
        }
        if (this._issuer !== undefined) {
            hasAnyValues = true;
            internalValueResult.issuer = this._issuer;
        }
        if (this._subject !== undefined) {
            hasAnyValues = true;
            internalValueResult.subject = this._subject;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._audience = undefined;
            this._issuer = undefined;
            this._subject = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._audience = value.audience;
            this._issuer = value.issuer;
            this._subject = value.subject;
        }
    }
    get audience() {
        return this.getStringAttribute('audience');
    }
    set audience(value) {
        this._audience = value;
    }
    resetAudience() {
        this._audience = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get audienceInput() {
        return this._audience;
    }
    get issuer() {
        return this.getStringAttribute('issuer');
    }
    set issuer(value) {
        this._issuer = value;
    }
    resetIssuer() {
        this._issuer = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get issuerInput() {
        return this._issuer;
    }
    get subject() {
        return this.getStringAttribute('subject');
    }
    set subject(value) {
        this._subject = value;
    }
    resetSubject() {
        this._subject = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subjectInput() {
        return this._subject;
    }
}
exports.IntegrationConnectorsConnectionAuthConfigOauth2JwtBearerJwtClaimsOutputReference = IntegrationConnectorsConnectionAuthConfigOauth2JwtBearerJwtClaimsOutputReference;
_t = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionAuthConfigOauth2JwtBearerJwtClaimsOutputReference[_t] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionAuthConfigOauth2JwtBearerJwtClaimsOutputReference", version: "14.13.1" };
function integrationConnectorsConnectionAuthConfigOauth2JwtBearerToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        client_key: integrationConnectorsConnectionAuthConfigOauth2JwtBearerClientKeyToTerraform(struct.clientKey),
        jwt_claims: integrationConnectorsConnectionAuthConfigOauth2JwtBearerJwtClaimsToTerraform(struct.jwtClaims),
    };
}
exports.integrationConnectorsConnectionAuthConfigOauth2JwtBearerToTerraform = integrationConnectorsConnectionAuthConfigOauth2JwtBearerToTerraform;
function integrationConnectorsConnectionAuthConfigOauth2JwtBearerToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        client_key: {
            value: integrationConnectorsConnectionAuthConfigOauth2JwtBearerClientKeyToHclTerraform(struct.clientKey),
            isBlock: true,
            type: "list",
            storageClassType: "IntegrationConnectorsConnectionAuthConfigOauth2JwtBearerClientKeyList",
        },
        jwt_claims: {
            value: integrationConnectorsConnectionAuthConfigOauth2JwtBearerJwtClaimsToHclTerraform(struct.jwtClaims),
            isBlock: true,
            type: "list",
            storageClassType: "IntegrationConnectorsConnectionAuthConfigOauth2JwtBearerJwtClaimsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.integrationConnectorsConnectionAuthConfigOauth2JwtBearerToHclTerraform = integrationConnectorsConnectionAuthConfigOauth2JwtBearerToHclTerraform;
class IntegrationConnectorsConnectionAuthConfigOauth2JwtBearerOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // client_key - computed: false, optional: true, required: false
        this._clientKey = new IntegrationConnectorsConnectionAuthConfigOauth2JwtBearerClientKeyOutputReference(this, "client_key");
        // jwt_claims - computed: false, optional: true, required: false
        this._jwtClaims = new IntegrationConnectorsConnectionAuthConfigOauth2JwtBearerJwtClaimsOutputReference(this, "jwt_claims");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._clientKey?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientKey = this._clientKey?.internalValue;
        }
        if (this._jwtClaims?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.jwtClaims = this._jwtClaims?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._clientKey.internalValue = undefined;
            this._jwtClaims.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._clientKey.internalValue = value.clientKey;
            this._jwtClaims.internalValue = value.jwtClaims;
        }
    }
    get clientKey() {
        return this._clientKey;
    }
    putClientKey(value) {
        this._clientKey.internalValue = value;
    }
    resetClientKey() {
        this._clientKey.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientKeyInput() {
        return this._clientKey.internalValue;
    }
    get jwtClaims() {
        return this._jwtClaims;
    }
    putJwtClaims(value) {
        this._jwtClaims.internalValue = value;
    }
    resetJwtClaims() {
        this._jwtClaims.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get jwtClaimsInput() {
        return this._jwtClaims.internalValue;
    }
}
exports.IntegrationConnectorsConnectionAuthConfigOauth2JwtBearerOutputReference = IntegrationConnectorsConnectionAuthConfigOauth2JwtBearerOutputReference;
_u = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionAuthConfigOauth2JwtBearerOutputReference[_u] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionAuthConfigOauth2JwtBearerOutputReference", version: "14.13.1" };
function integrationConnectorsConnectionAuthConfigSshPublicKeySshClientCertToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        secret_version: cdktf.stringToTerraform(struct.secretVersion),
    };
}
exports.integrationConnectorsConnectionAuthConfigSshPublicKeySshClientCertToTerraform = integrationConnectorsConnectionAuthConfigSshPublicKeySshClientCertToTerraform;
function integrationConnectorsConnectionAuthConfigSshPublicKeySshClientCertToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        secret_version: {
            value: cdktf.stringToHclTerraform(struct.secretVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.integrationConnectorsConnectionAuthConfigSshPublicKeySshClientCertToHclTerraform = integrationConnectorsConnectionAuthConfigSshPublicKeySshClientCertToHclTerraform;
class IntegrationConnectorsConnectionAuthConfigSshPublicKeySshClientCertOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._secretVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.secretVersion = this._secretVersion;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._secretVersion = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._secretVersion = value.secretVersion;
        }
    }
    get secretVersion() {
        return this.getStringAttribute('secret_version');
    }
    set secretVersion(value) {
        this._secretVersion = value;
    }
    // Temporarily expose input value. Use with caution.
    get secretVersionInput() {
        return this._secretVersion;
    }
}
exports.IntegrationConnectorsConnectionAuthConfigSshPublicKeySshClientCertOutputReference = IntegrationConnectorsConnectionAuthConfigSshPublicKeySshClientCertOutputReference;
_v = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionAuthConfigSshPublicKeySshClientCertOutputReference[_v] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionAuthConfigSshPublicKeySshClientCertOutputReference", version: "14.13.1" };
function integrationConnectorsConnectionAuthConfigSshPublicKeySshClientCertPassToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        secret_version: cdktf.stringToTerraform(struct.secretVersion),
    };
}
exports.integrationConnectorsConnectionAuthConfigSshPublicKeySshClientCertPassToTerraform = integrationConnectorsConnectionAuthConfigSshPublicKeySshClientCertPassToTerraform;
function integrationConnectorsConnectionAuthConfigSshPublicKeySshClientCertPassToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        secret_version: {
            value: cdktf.stringToHclTerraform(struct.secretVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.integrationConnectorsConnectionAuthConfigSshPublicKeySshClientCertPassToHclTerraform = integrationConnectorsConnectionAuthConfigSshPublicKeySshClientCertPassToHclTerraform;
class IntegrationConnectorsConnectionAuthConfigSshPublicKeySshClientCertPassOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._secretVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.secretVersion = this._secretVersion;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._secretVersion = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._secretVersion = value.secretVersion;
        }
    }
    get secretVersion() {
        return this.getStringAttribute('secret_version');
    }
    set secretVersion(value) {
        this._secretVersion = value;
    }
    // Temporarily expose input value. Use with caution.
    get secretVersionInput() {
        return this._secretVersion;
    }
}
exports.IntegrationConnectorsConnectionAuthConfigSshPublicKeySshClientCertPassOutputReference = IntegrationConnectorsConnectionAuthConfigSshPublicKeySshClientCertPassOutputReference;
_w = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionAuthConfigSshPublicKeySshClientCertPassOutputReference[_w] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionAuthConfigSshPublicKeySshClientCertPassOutputReference", version: "14.13.1" };
function integrationConnectorsConnectionAuthConfigSshPublicKeyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cert_type: cdktf.stringToTerraform(struct.certType),
        username: cdktf.stringToTerraform(struct.username),
        ssh_client_cert: integrationConnectorsConnectionAuthConfigSshPublicKeySshClientCertToTerraform(struct.sshClientCert),
        ssh_client_cert_pass: integrationConnectorsConnectionAuthConfigSshPublicKeySshClientCertPassToTerraform(struct.sshClientCertPass),
    };
}
exports.integrationConnectorsConnectionAuthConfigSshPublicKeyToTerraform = integrationConnectorsConnectionAuthConfigSshPublicKeyToTerraform;
function integrationConnectorsConnectionAuthConfigSshPublicKeyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cert_type: {
            value: cdktf.stringToHclTerraform(struct.certType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        username: {
            value: cdktf.stringToHclTerraform(struct.username),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        ssh_client_cert: {
            value: integrationConnectorsConnectionAuthConfigSshPublicKeySshClientCertToHclTerraform(struct.sshClientCert),
            isBlock: true,
            type: "list",
            storageClassType: "IntegrationConnectorsConnectionAuthConfigSshPublicKeySshClientCertList",
        },
        ssh_client_cert_pass: {
            value: integrationConnectorsConnectionAuthConfigSshPublicKeySshClientCertPassToHclTerraform(struct.sshClientCertPass),
            isBlock: true,
            type: "list",
            storageClassType: "IntegrationConnectorsConnectionAuthConfigSshPublicKeySshClientCertPassList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.integrationConnectorsConnectionAuthConfigSshPublicKeyToHclTerraform = integrationConnectorsConnectionAuthConfigSshPublicKeyToHclTerraform;
class IntegrationConnectorsConnectionAuthConfigSshPublicKeyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // ssh_client_cert - computed: false, optional: true, required: false
        this._sshClientCert = new IntegrationConnectorsConnectionAuthConfigSshPublicKeySshClientCertOutputReference(this, "ssh_client_cert");
        // ssh_client_cert_pass - computed: false, optional: true, required: false
        this._sshClientCertPass = new IntegrationConnectorsConnectionAuthConfigSshPublicKeySshClientCertPassOutputReference(this, "ssh_client_cert_pass");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._certType !== undefined) {
            hasAnyValues = true;
            internalValueResult.certType = this._certType;
        }
        if (this._username !== undefined) {
            hasAnyValues = true;
            internalValueResult.username = this._username;
        }
        if (this._sshClientCert?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sshClientCert = this._sshClientCert?.internalValue;
        }
        if (this._sshClientCertPass?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sshClientCertPass = this._sshClientCertPass?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._certType = undefined;
            this._username = undefined;
            this._sshClientCert.internalValue = undefined;
            this._sshClientCertPass.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._certType = value.certType;
            this._username = value.username;
            this._sshClientCert.internalValue = value.sshClientCert;
            this._sshClientCertPass.internalValue = value.sshClientCertPass;
        }
    }
    get certType() {
        return this.getStringAttribute('cert_type');
    }
    set certType(value) {
        this._certType = value;
    }
    resetCertType() {
        this._certType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get certTypeInput() {
        return this._certType;
    }
    get username() {
        return this.getStringAttribute('username');
    }
    set username(value) {
        this._username = value;
    }
    // Temporarily expose input value. Use with caution.
    get usernameInput() {
        return this._username;
    }
    get sshClientCert() {
        return this._sshClientCert;
    }
    putSshClientCert(value) {
        this._sshClientCert.internalValue = value;
    }
    resetSshClientCert() {
        this._sshClientCert.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sshClientCertInput() {
        return this._sshClientCert.internalValue;
    }
    get sshClientCertPass() {
        return this._sshClientCertPass;
    }
    putSshClientCertPass(value) {
        this._sshClientCertPass.internalValue = value;
    }
    resetSshClientCertPass() {
        this._sshClientCertPass.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sshClientCertPassInput() {
        return this._sshClientCertPass.internalValue;
    }
}
exports.IntegrationConnectorsConnectionAuthConfigSshPublicKeyOutputReference = IntegrationConnectorsConnectionAuthConfigSshPublicKeyOutputReference;
_x = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionAuthConfigSshPublicKeyOutputReference[_x] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionAuthConfigSshPublicKeyOutputReference", version: "14.13.1" };
function integrationConnectorsConnectionAuthConfigUserPasswordPasswordToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        secret_version: cdktf.stringToTerraform(struct.secretVersion),
    };
}
exports.integrationConnectorsConnectionAuthConfigUserPasswordPasswordToTerraform = integrationConnectorsConnectionAuthConfigUserPasswordPasswordToTerraform;
function integrationConnectorsConnectionAuthConfigUserPasswordPasswordToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        secret_version: {
            value: cdktf.stringToHclTerraform(struct.secretVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.integrationConnectorsConnectionAuthConfigUserPasswordPasswordToHclTerraform = integrationConnectorsConnectionAuthConfigUserPasswordPasswordToHclTerraform;
class IntegrationConnectorsConnectionAuthConfigUserPasswordPasswordOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._secretVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.secretVersion = this._secretVersion;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._secretVersion = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._secretVersion = value.secretVersion;
        }
    }
    get secretVersion() {
        return this.getStringAttribute('secret_version');
    }
    set secretVersion(value) {
        this._secretVersion = value;
    }
    // Temporarily expose input value. Use with caution.
    get secretVersionInput() {
        return this._secretVersion;
    }
}
exports.IntegrationConnectorsConnectionAuthConfigUserPasswordPasswordOutputReference = IntegrationConnectorsConnectionAuthConfigUserPasswordPasswordOutputReference;
_y = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionAuthConfigUserPasswordPasswordOutputReference[_y] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionAuthConfigUserPasswordPasswordOutputReference", version: "14.13.1" };
function integrationConnectorsConnectionAuthConfigUserPasswordToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        username: cdktf.stringToTerraform(struct.username),
        password: integrationConnectorsConnectionAuthConfigUserPasswordPasswordToTerraform(struct.password),
    };
}
exports.integrationConnectorsConnectionAuthConfigUserPasswordToTerraform = integrationConnectorsConnectionAuthConfigUserPasswordToTerraform;
function integrationConnectorsConnectionAuthConfigUserPasswordToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        username: {
            value: cdktf.stringToHclTerraform(struct.username),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        password: {
            value: integrationConnectorsConnectionAuthConfigUserPasswordPasswordToHclTerraform(struct.password),
            isBlock: true,
            type: "list",
            storageClassType: "IntegrationConnectorsConnectionAuthConfigUserPasswordPasswordList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.integrationConnectorsConnectionAuthConfigUserPasswordToHclTerraform = integrationConnectorsConnectionAuthConfigUserPasswordToHclTerraform;
class IntegrationConnectorsConnectionAuthConfigUserPasswordOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // password - computed: false, optional: true, required: false
        this._password = new IntegrationConnectorsConnectionAuthConfigUserPasswordPasswordOutputReference(this, "password");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._username !== undefined) {
            hasAnyValues = true;
            internalValueResult.username = this._username;
        }
        if (this._password?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.password = this._password?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._username = undefined;
            this._password.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._username = value.username;
            this._password.internalValue = value.password;
        }
    }
    get username() {
        return this.getStringAttribute('username');
    }
    set username(value) {
        this._username = value;
    }
    // Temporarily expose input value. Use with caution.
    get usernameInput() {
        return this._username;
    }
    get password() {
        return this._password;
    }
    putPassword(value) {
        this._password.internalValue = value;
    }
    resetPassword() {
        this._password.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get passwordInput() {
        return this._password.internalValue;
    }
}
exports.IntegrationConnectorsConnectionAuthConfigUserPasswordOutputReference = IntegrationConnectorsConnectionAuthConfigUserPasswordOutputReference;
_z = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionAuthConfigUserPasswordOutputReference[_z] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionAuthConfigUserPasswordOutputReference", version: "14.13.1" };
function integrationConnectorsConnectionAuthConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        auth_key: cdktf.stringToTerraform(struct.authKey),
        auth_type: cdktf.stringToTerraform(struct.authType),
        additional_variable: cdktf.listMapper(integrationConnectorsConnectionAuthConfigAdditionalVariableToTerraform, true)(struct.additionalVariable),
        oauth2_auth_code_flow: integrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowToTerraform(struct.oauth2AuthCodeFlow),
        oauth2_client_credentials: integrationConnectorsConnectionAuthConfigOauth2ClientCredentialsToTerraform(struct.oauth2ClientCredentials),
        oauth2_jwt_bearer: integrationConnectorsConnectionAuthConfigOauth2JwtBearerToTerraform(struct.oauth2JwtBearer),
        ssh_public_key: integrationConnectorsConnectionAuthConfigSshPublicKeyToTerraform(struct.sshPublicKey),
        user_password: integrationConnectorsConnectionAuthConfigUserPasswordToTerraform(struct.userPassword),
    };
}
exports.integrationConnectorsConnectionAuthConfigToTerraform = integrationConnectorsConnectionAuthConfigToTerraform;
function integrationConnectorsConnectionAuthConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        auth_key: {
            value: cdktf.stringToHclTerraform(struct.authKey),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        auth_type: {
            value: cdktf.stringToHclTerraform(struct.authType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        additional_variable: {
            value: cdktf.listMapperHcl(integrationConnectorsConnectionAuthConfigAdditionalVariableToHclTerraform, true)(struct.additionalVariable),
            isBlock: true,
            type: "list",
            storageClassType: "IntegrationConnectorsConnectionAuthConfigAdditionalVariableList",
        },
        oauth2_auth_code_flow: {
            value: integrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowToHclTerraform(struct.oauth2AuthCodeFlow),
            isBlock: true,
            type: "list",
            storageClassType: "IntegrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowList",
        },
        oauth2_client_credentials: {
            value: integrationConnectorsConnectionAuthConfigOauth2ClientCredentialsToHclTerraform(struct.oauth2ClientCredentials),
            isBlock: true,
            type: "list",
            storageClassType: "IntegrationConnectorsConnectionAuthConfigOauth2ClientCredentialsList",
        },
        oauth2_jwt_bearer: {
            value: integrationConnectorsConnectionAuthConfigOauth2JwtBearerToHclTerraform(struct.oauth2JwtBearer),
            isBlock: true,
            type: "list",
            storageClassType: "IntegrationConnectorsConnectionAuthConfigOauth2JwtBearerList",
        },
        ssh_public_key: {
            value: integrationConnectorsConnectionAuthConfigSshPublicKeyToHclTerraform(struct.sshPublicKey),
            isBlock: true,
            type: "list",
            storageClassType: "IntegrationConnectorsConnectionAuthConfigSshPublicKeyList",
        },
        user_password: {
            value: integrationConnectorsConnectionAuthConfigUserPasswordToHclTerraform(struct.userPassword),
            isBlock: true,
            type: "list",
            storageClassType: "IntegrationConnectorsConnectionAuthConfigUserPasswordList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.integrationConnectorsConnectionAuthConfigToHclTerraform = integrationConnectorsConnectionAuthConfigToHclTerraform;
class IntegrationConnectorsConnectionAuthConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // additional_variable - computed: false, optional: true, required: false
        this._additionalVariable = new IntegrationConnectorsConnectionAuthConfigAdditionalVariableList(this, "additional_variable", false);
        // oauth2_auth_code_flow - computed: false, optional: true, required: false
        this._oauth2AuthCodeFlow = new IntegrationConnectorsConnectionAuthConfigOauth2AuthCodeFlowOutputReference(this, "oauth2_auth_code_flow");
        // oauth2_client_credentials - computed: false, optional: true, required: false
        this._oauth2ClientCredentials = new IntegrationConnectorsConnectionAuthConfigOauth2ClientCredentialsOutputReference(this, "oauth2_client_credentials");
        // oauth2_jwt_bearer - computed: false, optional: true, required: false
        this._oauth2JwtBearer = new IntegrationConnectorsConnectionAuthConfigOauth2JwtBearerOutputReference(this, "oauth2_jwt_bearer");
        // ssh_public_key - computed: false, optional: true, required: false
        this._sshPublicKey = new IntegrationConnectorsConnectionAuthConfigSshPublicKeyOutputReference(this, "ssh_public_key");
        // user_password - computed: false, optional: true, required: false
        this._userPassword = new IntegrationConnectorsConnectionAuthConfigUserPasswordOutputReference(this, "user_password");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._authKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.authKey = this._authKey;
        }
        if (this._authType !== undefined) {
            hasAnyValues = true;
            internalValueResult.authType = this._authType;
        }
        if (this._additionalVariable?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.additionalVariable = this._additionalVariable?.internalValue;
        }
        if (this._oauth2AuthCodeFlow?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.oauth2AuthCodeFlow = this._oauth2AuthCodeFlow?.internalValue;
        }
        if (this._oauth2ClientCredentials?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.oauth2ClientCredentials = this._oauth2ClientCredentials?.internalValue;
        }
        if (this._oauth2JwtBearer?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.oauth2JwtBearer = this._oauth2JwtBearer?.internalValue;
        }
        if (this._sshPublicKey?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sshPublicKey = this._sshPublicKey?.internalValue;
        }
        if (this._userPassword?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.userPassword = this._userPassword?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._authKey = undefined;
            this._authType = undefined;
            this._additionalVariable.internalValue = undefined;
            this._oauth2AuthCodeFlow.internalValue = undefined;
            this._oauth2ClientCredentials.internalValue = undefined;
            this._oauth2JwtBearer.internalValue = undefined;
            this._sshPublicKey.internalValue = undefined;
            this._userPassword.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._authKey = value.authKey;
            this._authType = value.authType;
            this._additionalVariable.internalValue = value.additionalVariable;
            this._oauth2AuthCodeFlow.internalValue = value.oauth2AuthCodeFlow;
            this._oauth2ClientCredentials.internalValue = value.oauth2ClientCredentials;
            this._oauth2JwtBearer.internalValue = value.oauth2JwtBearer;
            this._sshPublicKey.internalValue = value.sshPublicKey;
            this._userPassword.internalValue = value.userPassword;
        }
    }
    get authKey() {
        return this.getStringAttribute('auth_key');
    }
    set authKey(value) {
        this._authKey = value;
    }
    resetAuthKey() {
        this._authKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authKeyInput() {
        return this._authKey;
    }
    get authType() {
        return this.getStringAttribute('auth_type');
    }
    set authType(value) {
        this._authType = value;
    }
    // Temporarily expose input value. Use with caution.
    get authTypeInput() {
        return this._authType;
    }
    get additionalVariable() {
        return this._additionalVariable;
    }
    putAdditionalVariable(value) {
        this._additionalVariable.internalValue = value;
    }
    resetAdditionalVariable() {
        this._additionalVariable.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get additionalVariableInput() {
        return this._additionalVariable.internalValue;
    }
    get oauth2AuthCodeFlow() {
        return this._oauth2AuthCodeFlow;
    }
    putOauth2AuthCodeFlow(value) {
        this._oauth2AuthCodeFlow.internalValue = value;
    }
    resetOauth2AuthCodeFlow() {
        this._oauth2AuthCodeFlow.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get oauth2AuthCodeFlowInput() {
        return this._oauth2AuthCodeFlow.internalValue;
    }
    get oauth2ClientCredentials() {
        return this._oauth2ClientCredentials;
    }
    putOauth2ClientCredentials(value) {
        this._oauth2ClientCredentials.internalValue = value;
    }
    resetOauth2ClientCredentials() {
        this._oauth2ClientCredentials.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get oauth2ClientCredentialsInput() {
        return this._oauth2ClientCredentials.internalValue;
    }
    get oauth2JwtBearer() {
        return this._oauth2JwtBearer;
    }
    putOauth2JwtBearer(value) {
        this._oauth2JwtBearer.internalValue = value;
    }
    resetOauth2JwtBearer() {
        this._oauth2JwtBearer.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get oauth2JwtBearerInput() {
        return this._oauth2JwtBearer.internalValue;
    }
    get sshPublicKey() {
        return this._sshPublicKey;
    }
    putSshPublicKey(value) {
        this._sshPublicKey.internalValue = value;
    }
    resetSshPublicKey() {
        this._sshPublicKey.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sshPublicKeyInput() {
        return this._sshPublicKey.internalValue;
    }
    get userPassword() {
        return this._userPassword;
    }
    putUserPassword(value) {
        this._userPassword.internalValue = value;
    }
    resetUserPassword() {
        this._userPassword.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get userPasswordInput() {
        return this._userPassword.internalValue;
    }
}
exports.IntegrationConnectorsConnectionAuthConfigOutputReference = IntegrationConnectorsConnectionAuthConfigOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionAuthConfigOutputReference[_0] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionAuthConfigOutputReference", version: "14.13.1" };
function integrationConnectorsConnectionConfigVariableEncryptionKeyValueToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        kms_key_name: cdktf.stringToTerraform(struct.kmsKeyName),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.integrationConnectorsConnectionConfigVariableEncryptionKeyValueToTerraform = integrationConnectorsConnectionConfigVariableEncryptionKeyValueToTerraform;
function integrationConnectorsConnectionConfigVariableEncryptionKeyValueToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        kms_key_name: {
            value: cdktf.stringToHclTerraform(struct.kmsKeyName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        type: {
            value: cdktf.stringToHclTerraform(struct.type),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.integrationConnectorsConnectionConfigVariableEncryptionKeyValueToHclTerraform = integrationConnectorsConnectionConfigVariableEncryptionKeyValueToHclTerraform;
class IntegrationConnectorsConnectionConfigVariableEncryptionKeyValueOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._kmsKeyName !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyName = this._kmsKeyName;
        }
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._kmsKeyName = undefined;
            this._type = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._kmsKeyName = value.kmsKeyName;
            this._type = value.type;
        }
    }
    get kmsKeyName() {
        return this.getStringAttribute('kms_key_name');
    }
    set kmsKeyName(value) {
        this._kmsKeyName = value;
    }
    resetKmsKeyName() {
        this._kmsKeyName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyNameInput() {
        return this._kmsKeyName;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
}
exports.IntegrationConnectorsConnectionConfigVariableEncryptionKeyValueOutputReference = IntegrationConnectorsConnectionConfigVariableEncryptionKeyValueOutputReference;
_1 = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionConfigVariableEncryptionKeyValueOutputReference[_1] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionConfigVariableEncryptionKeyValueOutputReference", version: "14.13.1" };
function integrationConnectorsConnectionConfigVariableSecretValueToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        secret_version: cdktf.stringToTerraform(struct.secretVersion),
    };
}
exports.integrationConnectorsConnectionConfigVariableSecretValueToTerraform = integrationConnectorsConnectionConfigVariableSecretValueToTerraform;
function integrationConnectorsConnectionConfigVariableSecretValueToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        secret_version: {
            value: cdktf.stringToHclTerraform(struct.secretVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.integrationConnectorsConnectionConfigVariableSecretValueToHclTerraform = integrationConnectorsConnectionConfigVariableSecretValueToHclTerraform;
class IntegrationConnectorsConnectionConfigVariableSecretValueOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._secretVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.secretVersion = this._secretVersion;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._secretVersion = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._secretVersion = value.secretVersion;
        }
    }
    get secretVersion() {
        return this.getStringAttribute('secret_version');
    }
    set secretVersion(value) {
        this._secretVersion = value;
    }
    // Temporarily expose input value. Use with caution.
    get secretVersionInput() {
        return this._secretVersion;
    }
}
exports.IntegrationConnectorsConnectionConfigVariableSecretValueOutputReference = IntegrationConnectorsConnectionConfigVariableSecretValueOutputReference;
_2 = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionConfigVariableSecretValueOutputReference[_2] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionConfigVariableSecretValueOutputReference", version: "14.13.1" };
function integrationConnectorsConnectionConfigVariableToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        boolean_value: cdktf.booleanToTerraform(struct.booleanValue),
        integer_value: cdktf.numberToTerraform(struct.integerValue),
        key: cdktf.stringToTerraform(struct.key),
        string_value: cdktf.stringToTerraform(struct.stringValue),
        encryption_key_value: integrationConnectorsConnectionConfigVariableEncryptionKeyValueToTerraform(struct.encryptionKeyValue),
        secret_value: integrationConnectorsConnectionConfigVariableSecretValueToTerraform(struct.secretValue),
    };
}
exports.integrationConnectorsConnectionConfigVariableToTerraform = integrationConnectorsConnectionConfigVariableToTerraform;
function integrationConnectorsConnectionConfigVariableToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        boolean_value: {
            value: cdktf.booleanToHclTerraform(struct.booleanValue),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        integer_value: {
            value: cdktf.numberToHclTerraform(struct.integerValue),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        key: {
            value: cdktf.stringToHclTerraform(struct.key),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        string_value: {
            value: cdktf.stringToHclTerraform(struct.stringValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        encryption_key_value: {
            value: integrationConnectorsConnectionConfigVariableEncryptionKeyValueToHclTerraform(struct.encryptionKeyValue),
            isBlock: true,
            type: "list",
            storageClassType: "IntegrationConnectorsConnectionConfigVariableEncryptionKeyValueList",
        },
        secret_value: {
            value: integrationConnectorsConnectionConfigVariableSecretValueToHclTerraform(struct.secretValue),
            isBlock: true,
            type: "list",
            storageClassType: "IntegrationConnectorsConnectionConfigVariableSecretValueList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.integrationConnectorsConnectionConfigVariableToHclTerraform = integrationConnectorsConnectionConfigVariableToHclTerraform;
class IntegrationConnectorsConnectionConfigVariableOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // encryption_key_value - computed: false, optional: true, required: false
        this._encryptionKeyValue = new IntegrationConnectorsConnectionConfigVariableEncryptionKeyValueOutputReference(this, "encryption_key_value");
        // secret_value - computed: false, optional: true, required: false
        this._secretValue = new IntegrationConnectorsConnectionConfigVariableSecretValueOutputReference(this, "secret_value");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._booleanValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.booleanValue = this._booleanValue;
        }
        if (this._integerValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.integerValue = this._integerValue;
        }
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._stringValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.stringValue = this._stringValue;
        }
        if (this._encryptionKeyValue?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.encryptionKeyValue = this._encryptionKeyValue?.internalValue;
        }
        if (this._secretValue?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.secretValue = this._secretValue?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._booleanValue = undefined;
            this._integerValue = undefined;
            this._key = undefined;
            this._stringValue = undefined;
            this._encryptionKeyValue.internalValue = undefined;
            this._secretValue.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._booleanValue = value.booleanValue;
            this._integerValue = value.integerValue;
            this._key = value.key;
            this._stringValue = value.stringValue;
            this._encryptionKeyValue.internalValue = value.encryptionKeyValue;
            this._secretValue.internalValue = value.secretValue;
        }
    }
    get booleanValue() {
        return this.getBooleanAttribute('boolean_value');
    }
    set booleanValue(value) {
        this._booleanValue = value;
    }
    resetBooleanValue() {
        this._booleanValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get booleanValueInput() {
        return this._booleanValue;
    }
    get integerValue() {
        return this.getNumberAttribute('integer_value');
    }
    set integerValue(value) {
        this._integerValue = value;
    }
    resetIntegerValue() {
        this._integerValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get integerValueInput() {
        return this._integerValue;
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get stringValue() {
        return this.getStringAttribute('string_value');
    }
    set stringValue(value) {
        this._stringValue = value;
    }
    resetStringValue() {
        this._stringValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stringValueInput() {
        return this._stringValue;
    }
    get encryptionKeyValue() {
        return this._encryptionKeyValue;
    }
    putEncryptionKeyValue(value) {
        this._encryptionKeyValue.internalValue = value;
    }
    resetEncryptionKeyValue() {
        this._encryptionKeyValue.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encryptionKeyValueInput() {
        return this._encryptionKeyValue.internalValue;
    }
    get secretValue() {
        return this._secretValue;
    }
    putSecretValue(value) {
        this._secretValue.internalValue = value;
    }
    resetSecretValue() {
        this._secretValue.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secretValueInput() {
        return this._secretValue.internalValue;
    }
}
exports.IntegrationConnectorsConnectionConfigVariableOutputReference = IntegrationConnectorsConnectionConfigVariableOutputReference;
_3 = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionConfigVariableOutputReference[_3] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionConfigVariableOutputReference", version: "14.13.1" };
class IntegrationConnectorsConnectionConfigVariableList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new IntegrationConnectorsConnectionConfigVariableOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.IntegrationConnectorsConnectionConfigVariableList = IntegrationConnectorsConnectionConfigVariableList;
_4 = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionConfigVariableList[_4] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionConfigVariableList", version: "14.13.1" };
function integrationConnectorsConnectionDestinationConfigDestinationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
        service_attachment: cdktf.stringToTerraform(struct.serviceAttachment),
    };
}
exports.integrationConnectorsConnectionDestinationConfigDestinationToTerraform = integrationConnectorsConnectionDestinationConfigDestinationToTerraform;
function integrationConnectorsConnectionDestinationConfigDestinationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        host: {
            value: cdktf.stringToHclTerraform(struct.host),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        port: {
            value: cdktf.numberToHclTerraform(struct.port),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        service_attachment: {
            value: cdktf.stringToHclTerraform(struct.serviceAttachment),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.integrationConnectorsConnectionDestinationConfigDestinationToHclTerraform = integrationConnectorsConnectionDestinationConfigDestinationToHclTerraform;
class IntegrationConnectorsConnectionDestinationConfigDestinationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._host !== undefined) {
            hasAnyValues = true;
            internalValueResult.host = this._host;
        }
        if (this._port !== undefined) {
            hasAnyValues = true;
            internalValueResult.port = this._port;
        }
        if (this._serviceAttachment !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceAttachment = this._serviceAttachment;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._host = undefined;
            this._port = undefined;
            this._serviceAttachment = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._host = value.host;
            this._port = value.port;
            this._serviceAttachment = value.serviceAttachment;
        }
    }
    get host() {
        return this.getStringAttribute('host');
    }
    set host(value) {
        this._host = value;
    }
    resetHost() {
        this._host = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostInput() {
        return this._host;
    }
    get port() {
        return this.getNumberAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    resetPort() {
        this._port = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
    get serviceAttachment() {
        return this.getStringAttribute('service_attachment');
    }
    set serviceAttachment(value) {
        this._serviceAttachment = value;
    }
    resetServiceAttachment() {
        this._serviceAttachment = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceAttachmentInput() {
        return this._serviceAttachment;
    }
}
exports.IntegrationConnectorsConnectionDestinationConfigDestinationOutputReference = IntegrationConnectorsConnectionDestinationConfigDestinationOutputReference;
_5 = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionDestinationConfigDestinationOutputReference[_5] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionDestinationConfigDestinationOutputReference", version: "14.13.1" };
class IntegrationConnectorsConnectionDestinationConfigDestinationList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new IntegrationConnectorsConnectionDestinationConfigDestinationOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.IntegrationConnectorsConnectionDestinationConfigDestinationList = IntegrationConnectorsConnectionDestinationConfigDestinationList;
_6 = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionDestinationConfigDestinationList[_6] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionDestinationConfigDestinationList", version: "14.13.1" };
function integrationConnectorsConnectionDestinationConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        destination: cdktf.listMapper(integrationConnectorsConnectionDestinationConfigDestinationToTerraform, true)(struct.destination),
    };
}
exports.integrationConnectorsConnectionDestinationConfigToTerraform = integrationConnectorsConnectionDestinationConfigToTerraform;
function integrationConnectorsConnectionDestinationConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        key: {
            value: cdktf.stringToHclTerraform(struct.key),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        destination: {
            value: cdktf.listMapperHcl(integrationConnectorsConnectionDestinationConfigDestinationToHclTerraform, true)(struct.destination),
            isBlock: true,
            type: "list",
            storageClassType: "IntegrationConnectorsConnectionDestinationConfigDestinationList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.integrationConnectorsConnectionDestinationConfigToHclTerraform = integrationConnectorsConnectionDestinationConfigToHclTerraform;
class IntegrationConnectorsConnectionDestinationConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // destination - computed: false, optional: true, required: false
        this._destination = new IntegrationConnectorsConnectionDestinationConfigDestinationList(this, "destination", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._destination?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.destination = this._destination?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._key = undefined;
            this._destination.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._key = value.key;
            this._destination.internalValue = value.destination;
        }
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get destination() {
        return this._destination;
    }
    putDestination(value) {
        this._destination.internalValue = value;
    }
    resetDestination() {
        this._destination.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get destinationInput() {
        return this._destination.internalValue;
    }
}
exports.IntegrationConnectorsConnectionDestinationConfigOutputReference = IntegrationConnectorsConnectionDestinationConfigOutputReference;
_7 = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionDestinationConfigOutputReference[_7] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionDestinationConfigOutputReference", version: "14.13.1" };
class IntegrationConnectorsConnectionDestinationConfigList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new IntegrationConnectorsConnectionDestinationConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.IntegrationConnectorsConnectionDestinationConfigList = IntegrationConnectorsConnectionDestinationConfigList;
_8 = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionDestinationConfigList[_8] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionDestinationConfigList", version: "14.13.1" };
function integrationConnectorsConnectionEventingConfigAdditionalVariableEncryptionKeyValueToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        kms_key_name: cdktf.stringToTerraform(struct.kmsKeyName),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.integrationConnectorsConnectionEventingConfigAdditionalVariableEncryptionKeyValueToTerraform = integrationConnectorsConnectionEventingConfigAdditionalVariableEncryptionKeyValueToTerraform;
function integrationConnectorsConnectionEventingConfigAdditionalVariableEncryptionKeyValueToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        kms_key_name: {
            value: cdktf.stringToHclTerraform(struct.kmsKeyName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        type: {
            value: cdktf.stringToHclTerraform(struct.type),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.integrationConnectorsConnectionEventingConfigAdditionalVariableEncryptionKeyValueToHclTerraform = integrationConnectorsConnectionEventingConfigAdditionalVariableEncryptionKeyValueToHclTerraform;
class IntegrationConnectorsConnectionEventingConfigAdditionalVariableEncryptionKeyValueOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._kmsKeyName !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyName = this._kmsKeyName;
        }
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._kmsKeyName = undefined;
            this._type = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._kmsKeyName = value.kmsKeyName;
            this._type = value.type;
        }
    }
    get kmsKeyName() {
        return this.getStringAttribute('kms_key_name');
    }
    set kmsKeyName(value) {
        this._kmsKeyName = value;
    }
    resetKmsKeyName() {
        this._kmsKeyName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyNameInput() {
        return this._kmsKeyName;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    resetType() {
        this._type = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
}
exports.IntegrationConnectorsConnectionEventingConfigAdditionalVariableEncryptionKeyValueOutputReference = IntegrationConnectorsConnectionEventingConfigAdditionalVariableEncryptionKeyValueOutputReference;
_9 = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionEventingConfigAdditionalVariableEncryptionKeyValueOutputReference[_9] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionEventingConfigAdditionalVariableEncryptionKeyValueOutputReference", version: "14.13.1" };
function integrationConnectorsConnectionEventingConfigAdditionalVariableSecretValueToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        secret_version: cdktf.stringToTerraform(struct.secretVersion),
    };
}
exports.integrationConnectorsConnectionEventingConfigAdditionalVariableSecretValueToTerraform = integrationConnectorsConnectionEventingConfigAdditionalVariableSecretValueToTerraform;
function integrationConnectorsConnectionEventingConfigAdditionalVariableSecretValueToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        secret_version: {
            value: cdktf.stringToHclTerraform(struct.secretVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.integrationConnectorsConnectionEventingConfigAdditionalVariableSecretValueToHclTerraform = integrationConnectorsConnectionEventingConfigAdditionalVariableSecretValueToHclTerraform;
class IntegrationConnectorsConnectionEventingConfigAdditionalVariableSecretValueOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._secretVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.secretVersion = this._secretVersion;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._secretVersion = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._secretVersion = value.secretVersion;
        }
    }
    get secretVersion() {
        return this.getStringAttribute('secret_version');
    }
    set secretVersion(value) {
        this._secretVersion = value;
    }
    // Temporarily expose input value. Use with caution.
    get secretVersionInput() {
        return this._secretVersion;
    }
}
exports.IntegrationConnectorsConnectionEventingConfigAdditionalVariableSecretValueOutputReference = IntegrationConnectorsConnectionEventingConfigAdditionalVariableSecretValueOutputReference;
_10 = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionEventingConfigAdditionalVariableSecretValueOutputReference[_10] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionEventingConfigAdditionalVariableSecretValueOutputReference", version: "14.13.1" };
function integrationConnectorsConnectionEventingConfigAdditionalVariableToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        boolean_value: cdktf.booleanToTerraform(struct.booleanValue),
        integer_value: cdktf.numberToTerraform(struct.integerValue),
        key: cdktf.stringToTerraform(struct.key),
        string_value: cdktf.stringToTerraform(struct.stringValue),
        encryption_key_value: integrationConnectorsConnectionEventingConfigAdditionalVariableEncryptionKeyValueToTerraform(struct.encryptionKeyValue),
        secret_value: integrationConnectorsConnectionEventingConfigAdditionalVariableSecretValueToTerraform(struct.secretValue),
    };
}
exports.integrationConnectorsConnectionEventingConfigAdditionalVariableToTerraform = integrationConnectorsConnectionEventingConfigAdditionalVariableToTerraform;
function integrationConnectorsConnectionEventingConfigAdditionalVariableToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        boolean_value: {
            value: cdktf.booleanToHclTerraform(struct.booleanValue),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        integer_value: {
            value: cdktf.numberToHclTerraform(struct.integerValue),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        key: {
            value: cdktf.stringToHclTerraform(struct.key),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        string_value: {
            value: cdktf.stringToHclTerraform(struct.stringValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        encryption_key_value: {
            value: integrationConnectorsConnectionEventingConfigAdditionalVariableEncryptionKeyValueToHclTerraform(struct.encryptionKeyValue),
            isBlock: true,
            type: "list",
            storageClassType: "IntegrationConnectorsConnectionEventingConfigAdditionalVariableEncryptionKeyValueList",
        },
        secret_value: {
            value: integrationConnectorsConnectionEventingConfigAdditionalVariableSecretValueToHclTerraform(struct.secretValue),
            isBlock: true,
            type: "list",
            storageClassType: "IntegrationConnectorsConnectionEventingConfigAdditionalVariableSecretValueList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.integrationConnectorsConnectionEventingConfigAdditionalVariableToHclTerraform = integrationConnectorsConnectionEventingConfigAdditionalVariableToHclTerraform;
class IntegrationConnectorsConnectionEventingConfigAdditionalVariableOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // encryption_key_value - computed: false, optional: true, required: false
        this._encryptionKeyValue = new IntegrationConnectorsConnectionEventingConfigAdditionalVariableEncryptionKeyValueOutputReference(this, "encryption_key_value");
        // secret_value - computed: false, optional: true, required: false
        this._secretValue = new IntegrationConnectorsConnectionEventingConfigAdditionalVariableSecretValueOutputReference(this, "secret_value");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._booleanValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.booleanValue = this._booleanValue;
        }
        if (this._integerValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.integerValue = this._integerValue;
        }
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._stringValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.stringValue = this._stringValue;
        }
        if (this._encryptionKeyValue?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.encryptionKeyValue = this._encryptionKeyValue?.internalValue;
        }
        if (this._secretValue?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.secretValue = this._secretValue?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._booleanValue = undefined;
            this._integerValue = undefined;
            this._key = undefined;
            this._stringValue = undefined;
            this._encryptionKeyValue.internalValue = undefined;
            this._secretValue.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._booleanValue = value.booleanValue;
            this._integerValue = value.integerValue;
            this._key = value.key;
            this._stringValue = value.stringValue;
            this._encryptionKeyValue.internalValue = value.encryptionKeyValue;
            this._secretValue.internalValue = value.secretValue;
        }
    }
    get booleanValue() {
        return this.getBooleanAttribute('boolean_value');
    }
    set booleanValue(value) {
        this._booleanValue = value;
    }
    resetBooleanValue() {
        this._booleanValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get booleanValueInput() {
        return this._booleanValue;
    }
    get integerValue() {
        return this.getNumberAttribute('integer_value');
    }
    set integerValue(value) {
        this._integerValue = value;
    }
    resetIntegerValue() {
        this._integerValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get integerValueInput() {
        return this._integerValue;
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get stringValue() {
        return this.getStringAttribute('string_value');
    }
    set stringValue(value) {
        this._stringValue = value;
    }
    resetStringValue() {
        this._stringValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stringValueInput() {
        return this._stringValue;
    }
    get encryptionKeyValue() {
        return this._encryptionKeyValue;
    }
    putEncryptionKeyValue(value) {
        this._encryptionKeyValue.internalValue = value;
    }
    resetEncryptionKeyValue() {
        this._encryptionKeyValue.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encryptionKeyValueInput() {
        return this._encryptionKeyValue.internalValue;
    }
    get secretValue() {
        return this._secretValue;
    }
    putSecretValue(value) {
        this._secretValue.internalValue = value;
    }
    resetSecretValue() {
        this._secretValue.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secretValueInput() {
        return this._secretValue.internalValue;
    }
}
exports.IntegrationConnectorsConnectionEventingConfigAdditionalVariableOutputReference = IntegrationConnectorsConnectionEventingConfigAdditionalVariableOutputReference;
_11 = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionEventingConfigAdditionalVariableOutputReference[_11] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionEventingConfigAdditionalVariableOutputReference", version: "14.13.1" };
class IntegrationConnectorsConnectionEventingConfigAdditionalVariableList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new IntegrationConnectorsConnectionEventingConfigAdditionalVariableOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.IntegrationConnectorsConnectionEventingConfigAdditionalVariableList = IntegrationConnectorsConnectionEventingConfigAdditionalVariableList;
_12 = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionEventingConfigAdditionalVariableList[_12] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionEventingConfigAdditionalVariableList", version: "14.13.1" };
function integrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableEncryptionKeyValueToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        kms_key_name: cdktf.stringToTerraform(struct.kmsKeyName),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.integrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableEncryptionKeyValueToTerraform = integrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableEncryptionKeyValueToTerraform;
function integrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableEncryptionKeyValueToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        kms_key_name: {
            value: cdktf.stringToHclTerraform(struct.kmsKeyName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        type: {
            value: cdktf.stringToHclTerraform(struct.type),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.integrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableEncryptionKeyValueToHclTerraform = integrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableEncryptionKeyValueToHclTerraform;
class IntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableEncryptionKeyValueOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._kmsKeyName !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyName = this._kmsKeyName;
        }
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._kmsKeyName = undefined;
            this._type = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._kmsKeyName = value.kmsKeyName;
            this._type = value.type;
        }
    }
    get kmsKeyName() {
        return this.getStringAttribute('kms_key_name');
    }
    set kmsKeyName(value) {
        this._kmsKeyName = value;
    }
    resetKmsKeyName() {
        this._kmsKeyName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyNameInput() {
        return this._kmsKeyName;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    resetType() {
        this._type = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
}
exports.IntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableEncryptionKeyValueOutputReference = IntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableEncryptionKeyValueOutputReference;
_13 = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableEncryptionKeyValueOutputReference[_13] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableEncryptionKeyValueOutputReference", version: "14.13.1" };
function integrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableSecretValueToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        secret_version: cdktf.stringToTerraform(struct.secretVersion),
    };
}
exports.integrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableSecretValueToTerraform = integrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableSecretValueToTerraform;
function integrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableSecretValueToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        secret_version: {
            value: cdktf.stringToHclTerraform(struct.secretVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.integrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableSecretValueToHclTerraform = integrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableSecretValueToHclTerraform;
class IntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableSecretValueOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._secretVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.secretVersion = this._secretVersion;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._secretVersion = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._secretVersion = value.secretVersion;
        }
    }
    get secretVersion() {
        return this.getStringAttribute('secret_version');
    }
    set secretVersion(value) {
        this._secretVersion = value;
    }
    // Temporarily expose input value. Use with caution.
    get secretVersionInput() {
        return this._secretVersion;
    }
}
exports.IntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableSecretValueOutputReference = IntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableSecretValueOutputReference;
_14 = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableSecretValueOutputReference[_14] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableSecretValueOutputReference", version: "14.13.1" };
function integrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        boolean_value: cdktf.booleanToTerraform(struct.booleanValue),
        integer_value: cdktf.numberToTerraform(struct.integerValue),
        key: cdktf.stringToTerraform(struct.key),
        string_value: cdktf.stringToTerraform(struct.stringValue),
        encryption_key_value: integrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableEncryptionKeyValueToTerraform(struct.encryptionKeyValue),
        secret_value: integrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableSecretValueToTerraform(struct.secretValue),
    };
}
exports.integrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableToTerraform = integrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableToTerraform;
function integrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        boolean_value: {
            value: cdktf.booleanToHclTerraform(struct.booleanValue),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        integer_value: {
            value: cdktf.numberToHclTerraform(struct.integerValue),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        key: {
            value: cdktf.stringToHclTerraform(struct.key),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        string_value: {
            value: cdktf.stringToHclTerraform(struct.stringValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        encryption_key_value: {
            value: integrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableEncryptionKeyValueToHclTerraform(struct.encryptionKeyValue),
            isBlock: true,
            type: "list",
            storageClassType: "IntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableEncryptionKeyValueList",
        },
        secret_value: {
            value: integrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableSecretValueToHclTerraform(struct.secretValue),
            isBlock: true,
            type: "list",
            storageClassType: "IntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableSecretValueList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.integrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableToHclTerraform = integrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableToHclTerraform;
class IntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // encryption_key_value - computed: false, optional: true, required: false
        this._encryptionKeyValue = new IntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableEncryptionKeyValueOutputReference(this, "encryption_key_value");
        // secret_value - computed: false, optional: true, required: false
        this._secretValue = new IntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableSecretValueOutputReference(this, "secret_value");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._booleanValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.booleanValue = this._booleanValue;
        }
        if (this._integerValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.integerValue = this._integerValue;
        }
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._stringValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.stringValue = this._stringValue;
        }
        if (this._encryptionKeyValue?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.encryptionKeyValue = this._encryptionKeyValue?.internalValue;
        }
        if (this._secretValue?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.secretValue = this._secretValue?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._booleanValue = undefined;
            this._integerValue = undefined;
            this._key = undefined;
            this._stringValue = undefined;
            this._encryptionKeyValue.internalValue = undefined;
            this._secretValue.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._booleanValue = value.booleanValue;
            this._integerValue = value.integerValue;
            this._key = value.key;
            this._stringValue = value.stringValue;
            this._encryptionKeyValue.internalValue = value.encryptionKeyValue;
            this._secretValue.internalValue = value.secretValue;
        }
    }
    get booleanValue() {
        return this.getBooleanAttribute('boolean_value');
    }
    set booleanValue(value) {
        this._booleanValue = value;
    }
    resetBooleanValue() {
        this._booleanValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get booleanValueInput() {
        return this._booleanValue;
    }
    get integerValue() {
        return this.getNumberAttribute('integer_value');
    }
    set integerValue(value) {
        this._integerValue = value;
    }
    resetIntegerValue() {
        this._integerValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get integerValueInput() {
        return this._integerValue;
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get stringValue() {
        return this.getStringAttribute('string_value');
    }
    set stringValue(value) {
        this._stringValue = value;
    }
    resetStringValue() {
        this._stringValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stringValueInput() {
        return this._stringValue;
    }
    get encryptionKeyValue() {
        return this._encryptionKeyValue;
    }
    putEncryptionKeyValue(value) {
        this._encryptionKeyValue.internalValue = value;
    }
    resetEncryptionKeyValue() {
        this._encryptionKeyValue.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encryptionKeyValueInput() {
        return this._encryptionKeyValue.internalValue;
    }
    get secretValue() {
        return this._secretValue;
    }
    putSecretValue(value) {
        this._secretValue.internalValue = value;
    }
    resetSecretValue() {
        this._secretValue.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secretValueInput() {
        return this._secretValue.internalValue;
    }
}
exports.IntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableOutputReference = IntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableOutputReference;
_15 = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableOutputReference[_15] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableOutputReference", version: "14.13.1" };
class IntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new IntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.IntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableList = IntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableList;
_16 = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableList[_16] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableList", version: "14.13.1" };
function integrationConnectorsConnectionEventingConfigAuthConfigUserPasswordPasswordToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        secret_version: cdktf.stringToTerraform(struct.secretVersion),
    };
}
exports.integrationConnectorsConnectionEventingConfigAuthConfigUserPasswordPasswordToTerraform = integrationConnectorsConnectionEventingConfigAuthConfigUserPasswordPasswordToTerraform;
function integrationConnectorsConnectionEventingConfigAuthConfigUserPasswordPasswordToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        secret_version: {
            value: cdktf.stringToHclTerraform(struct.secretVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.integrationConnectorsConnectionEventingConfigAuthConfigUserPasswordPasswordToHclTerraform = integrationConnectorsConnectionEventingConfigAuthConfigUserPasswordPasswordToHclTerraform;
class IntegrationConnectorsConnectionEventingConfigAuthConfigUserPasswordPasswordOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._secretVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.secretVersion = this._secretVersion;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._secretVersion = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._secretVersion = value.secretVersion;
        }
    }
    get secretVersion() {
        return this.getStringAttribute('secret_version');
    }
    set secretVersion(value) {
        this._secretVersion = value;
    }
    // Temporarily expose input value. Use with caution.
    get secretVersionInput() {
        return this._secretVersion;
    }
}
exports.IntegrationConnectorsConnectionEventingConfigAuthConfigUserPasswordPasswordOutputReference = IntegrationConnectorsConnectionEventingConfigAuthConfigUserPasswordPasswordOutputReference;
_17 = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionEventingConfigAuthConfigUserPasswordPasswordOutputReference[_17] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionEventingConfigAuthConfigUserPasswordPasswordOutputReference", version: "14.13.1" };
function integrationConnectorsConnectionEventingConfigAuthConfigUserPasswordToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        username: cdktf.stringToTerraform(struct.username),
        password: integrationConnectorsConnectionEventingConfigAuthConfigUserPasswordPasswordToTerraform(struct.password),
    };
}
exports.integrationConnectorsConnectionEventingConfigAuthConfigUserPasswordToTerraform = integrationConnectorsConnectionEventingConfigAuthConfigUserPasswordToTerraform;
function integrationConnectorsConnectionEventingConfigAuthConfigUserPasswordToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        username: {
            value: cdktf.stringToHclTerraform(struct.username),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        password: {
            value: integrationConnectorsConnectionEventingConfigAuthConfigUserPasswordPasswordToHclTerraform(struct.password),
            isBlock: true,
            type: "list",
            storageClassType: "IntegrationConnectorsConnectionEventingConfigAuthConfigUserPasswordPasswordList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.integrationConnectorsConnectionEventingConfigAuthConfigUserPasswordToHclTerraform = integrationConnectorsConnectionEventingConfigAuthConfigUserPasswordToHclTerraform;
class IntegrationConnectorsConnectionEventingConfigAuthConfigUserPasswordOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // password - computed: false, optional: true, required: false
        this._password = new IntegrationConnectorsConnectionEventingConfigAuthConfigUserPasswordPasswordOutputReference(this, "password");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._username !== undefined) {
            hasAnyValues = true;
            internalValueResult.username = this._username;
        }
        if (this._password?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.password = this._password?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._username = undefined;
            this._password.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._username = value.username;
            this._password.internalValue = value.password;
        }
    }
    get username() {
        return this.getStringAttribute('username');
    }
    set username(value) {
        this._username = value;
    }
    resetUsername() {
        this._username = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get usernameInput() {
        return this._username;
    }
    get password() {
        return this._password;
    }
    putPassword(value) {
        this._password.internalValue = value;
    }
    resetPassword() {
        this._password.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get passwordInput() {
        return this._password.internalValue;
    }
}
exports.IntegrationConnectorsConnectionEventingConfigAuthConfigUserPasswordOutputReference = IntegrationConnectorsConnectionEventingConfigAuthConfigUserPasswordOutputReference;
_18 = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionEventingConfigAuthConfigUserPasswordOutputReference[_18] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionEventingConfigAuthConfigUserPasswordOutputReference", version: "14.13.1" };
function integrationConnectorsConnectionEventingConfigAuthConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        auth_key: cdktf.stringToTerraform(struct.authKey),
        auth_type: cdktf.stringToTerraform(struct.authType),
        additional_variable: cdktf.listMapper(integrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableToTerraform, true)(struct.additionalVariable),
        user_password: integrationConnectorsConnectionEventingConfigAuthConfigUserPasswordToTerraform(struct.userPassword),
    };
}
exports.integrationConnectorsConnectionEventingConfigAuthConfigToTerraform = integrationConnectorsConnectionEventingConfigAuthConfigToTerraform;
function integrationConnectorsConnectionEventingConfigAuthConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        auth_key: {
            value: cdktf.stringToHclTerraform(struct.authKey),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        auth_type: {
            value: cdktf.stringToHclTerraform(struct.authType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        additional_variable: {
            value: cdktf.listMapperHcl(integrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableToHclTerraform, true)(struct.additionalVariable),
            isBlock: true,
            type: "list",
            storageClassType: "IntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableList",
        },
        user_password: {
            value: integrationConnectorsConnectionEventingConfigAuthConfigUserPasswordToHclTerraform(struct.userPassword),
            isBlock: true,
            type: "list",
            storageClassType: "IntegrationConnectorsConnectionEventingConfigAuthConfigUserPasswordList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.integrationConnectorsConnectionEventingConfigAuthConfigToHclTerraform = integrationConnectorsConnectionEventingConfigAuthConfigToHclTerraform;
class IntegrationConnectorsConnectionEventingConfigAuthConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // additional_variable - computed: false, optional: true, required: false
        this._additionalVariable = new IntegrationConnectorsConnectionEventingConfigAuthConfigAdditionalVariableList(this, "additional_variable", false);
        // user_password - computed: false, optional: false, required: true
        this._userPassword = new IntegrationConnectorsConnectionEventingConfigAuthConfigUserPasswordOutputReference(this, "user_password");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._authKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.authKey = this._authKey;
        }
        if (this._authType !== undefined) {
            hasAnyValues = true;
            internalValueResult.authType = this._authType;
        }
        if (this._additionalVariable?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.additionalVariable = this._additionalVariable?.internalValue;
        }
        if (this._userPassword?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.userPassword = this._userPassword?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._authKey = undefined;
            this._authType = undefined;
            this._additionalVariable.internalValue = undefined;
            this._userPassword.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._authKey = value.authKey;
            this._authType = value.authType;
            this._additionalVariable.internalValue = value.additionalVariable;
            this._userPassword.internalValue = value.userPassword;
        }
    }
    get authKey() {
        return this.getStringAttribute('auth_key');
    }
    set authKey(value) {
        this._authKey = value;
    }
    resetAuthKey() {
        this._authKey = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authKeyInput() {
        return this._authKey;
    }
    get authType() {
        return this.getStringAttribute('auth_type');
    }
    set authType(value) {
        this._authType = value;
    }
    // Temporarily expose input value. Use with caution.
    get authTypeInput() {
        return this._authType;
    }
    get additionalVariable() {
        return this._additionalVariable;
    }
    putAdditionalVariable(value) {
        this._additionalVariable.internalValue = value;
    }
    resetAdditionalVariable() {
        this._additionalVariable.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get additionalVariableInput() {
        return this._additionalVariable.internalValue;
    }
    get userPassword() {
        return this._userPassword;
    }
    putUserPassword(value) {
        this._userPassword.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get userPasswordInput() {
        return this._userPassword.internalValue;
    }
}
exports.IntegrationConnectorsConnectionEventingConfigAuthConfigOutputReference = IntegrationConnectorsConnectionEventingConfigAuthConfigOutputReference;
_19 = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionEventingConfigAuthConfigOutputReference[_19] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionEventingConfigAuthConfigOutputReference", version: "14.13.1" };
function integrationConnectorsConnectionEventingConfigRegistrationDestinationConfigDestinationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        host: cdktf.stringToTerraform(struct.host),
        port: cdktf.numberToTerraform(struct.port),
        service_attachment: cdktf.stringToTerraform(struct.serviceAttachment),
    };
}
exports.integrationConnectorsConnectionEventingConfigRegistrationDestinationConfigDestinationToTerraform = integrationConnectorsConnectionEventingConfigRegistrationDestinationConfigDestinationToTerraform;
function integrationConnectorsConnectionEventingConfigRegistrationDestinationConfigDestinationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        host: {
            value: cdktf.stringToHclTerraform(struct.host),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        port: {
            value: cdktf.numberToHclTerraform(struct.port),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        service_attachment: {
            value: cdktf.stringToHclTerraform(struct.serviceAttachment),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.integrationConnectorsConnectionEventingConfigRegistrationDestinationConfigDestinationToHclTerraform = integrationConnectorsConnectionEventingConfigRegistrationDestinationConfigDestinationToHclTerraform;
class IntegrationConnectorsConnectionEventingConfigRegistrationDestinationConfigDestinationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._host !== undefined) {
            hasAnyValues = true;
            internalValueResult.host = this._host;
        }
        if (this._port !== undefined) {
            hasAnyValues = true;
            internalValueResult.port = this._port;
        }
        if (this._serviceAttachment !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceAttachment = this._serviceAttachment;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._host = undefined;
            this._port = undefined;
            this._serviceAttachment = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._host = value.host;
            this._port = value.port;
            this._serviceAttachment = value.serviceAttachment;
        }
    }
    get host() {
        return this.getStringAttribute('host');
    }
    set host(value) {
        this._host = value;
    }
    resetHost() {
        this._host = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostInput() {
        return this._host;
    }
    get port() {
        return this.getNumberAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    resetPort() {
        this._port = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
    get serviceAttachment() {
        return this.getStringAttribute('service_attachment');
    }
    set serviceAttachment(value) {
        this._serviceAttachment = value;
    }
    resetServiceAttachment() {
        this._serviceAttachment = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceAttachmentInput() {
        return this._serviceAttachment;
    }
}
exports.IntegrationConnectorsConnectionEventingConfigRegistrationDestinationConfigDestinationOutputReference = IntegrationConnectorsConnectionEventingConfigRegistrationDestinationConfigDestinationOutputReference;
_20 = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionEventingConfigRegistrationDestinationConfigDestinationOutputReference[_20] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionEventingConfigRegistrationDestinationConfigDestinationOutputReference", version: "14.13.1" };
class IntegrationConnectorsConnectionEventingConfigRegistrationDestinationConfigDestinationList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new IntegrationConnectorsConnectionEventingConfigRegistrationDestinationConfigDestinationOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.IntegrationConnectorsConnectionEventingConfigRegistrationDestinationConfigDestinationList = IntegrationConnectorsConnectionEventingConfigRegistrationDestinationConfigDestinationList;
_21 = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionEventingConfigRegistrationDestinationConfigDestinationList[_21] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionEventingConfigRegistrationDestinationConfigDestinationList", version: "14.13.1" };
function integrationConnectorsConnectionEventingConfigRegistrationDestinationConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        destination: cdktf.listMapper(integrationConnectorsConnectionEventingConfigRegistrationDestinationConfigDestinationToTerraform, true)(struct.destination),
    };
}
exports.integrationConnectorsConnectionEventingConfigRegistrationDestinationConfigToTerraform = integrationConnectorsConnectionEventingConfigRegistrationDestinationConfigToTerraform;
function integrationConnectorsConnectionEventingConfigRegistrationDestinationConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        key: {
            value: cdktf.stringToHclTerraform(struct.key),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        destination: {
            value: cdktf.listMapperHcl(integrationConnectorsConnectionEventingConfigRegistrationDestinationConfigDestinationToHclTerraform, true)(struct.destination),
            isBlock: true,
            type: "list",
            storageClassType: "IntegrationConnectorsConnectionEventingConfigRegistrationDestinationConfigDestinationList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.integrationConnectorsConnectionEventingConfigRegistrationDestinationConfigToHclTerraform = integrationConnectorsConnectionEventingConfigRegistrationDestinationConfigToHclTerraform;
class IntegrationConnectorsConnectionEventingConfigRegistrationDestinationConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // destination - computed: false, optional: true, required: false
        this._destination = new IntegrationConnectorsConnectionEventingConfigRegistrationDestinationConfigDestinationList(this, "destination", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._destination?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.destination = this._destination?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._key = undefined;
            this._destination.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._key = value.key;
            this._destination.internalValue = value.destination;
        }
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    resetKey() {
        this._key = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get destination() {
        return this._destination;
    }
    putDestination(value) {
        this._destination.internalValue = value;
    }
    resetDestination() {
        this._destination.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get destinationInput() {
        return this._destination.internalValue;
    }
}
exports.IntegrationConnectorsConnectionEventingConfigRegistrationDestinationConfigOutputReference = IntegrationConnectorsConnectionEventingConfigRegistrationDestinationConfigOutputReference;
_22 = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionEventingConfigRegistrationDestinationConfigOutputReference[_22] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionEventingConfigRegistrationDestinationConfigOutputReference", version: "14.13.1" };
function integrationConnectorsConnectionEventingConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enrichment_enabled: cdktf.booleanToTerraform(struct.enrichmentEnabled),
        additional_variable: cdktf.listMapper(integrationConnectorsConnectionEventingConfigAdditionalVariableToTerraform, true)(struct.additionalVariable),
        auth_config: integrationConnectorsConnectionEventingConfigAuthConfigToTerraform(struct.authConfig),
        registration_destination_config: integrationConnectorsConnectionEventingConfigRegistrationDestinationConfigToTerraform(struct.registrationDestinationConfig),
    };
}
exports.integrationConnectorsConnectionEventingConfigToTerraform = integrationConnectorsConnectionEventingConfigToTerraform;
function integrationConnectorsConnectionEventingConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enrichment_enabled: {
            value: cdktf.booleanToHclTerraform(struct.enrichmentEnabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        additional_variable: {
            value: cdktf.listMapperHcl(integrationConnectorsConnectionEventingConfigAdditionalVariableToHclTerraform, true)(struct.additionalVariable),
            isBlock: true,
            type: "list",
            storageClassType: "IntegrationConnectorsConnectionEventingConfigAdditionalVariableList",
        },
        auth_config: {
            value: integrationConnectorsConnectionEventingConfigAuthConfigToHclTerraform(struct.authConfig),
            isBlock: true,
            type: "list",
            storageClassType: "IntegrationConnectorsConnectionEventingConfigAuthConfigList",
        },
        registration_destination_config: {
            value: integrationConnectorsConnectionEventingConfigRegistrationDestinationConfigToHclTerraform(struct.registrationDestinationConfig),
            isBlock: true,
            type: "list",
            storageClassType: "IntegrationConnectorsConnectionEventingConfigRegistrationDestinationConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.integrationConnectorsConnectionEventingConfigToHclTerraform = integrationConnectorsConnectionEventingConfigToHclTerraform;
class IntegrationConnectorsConnectionEventingConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // additional_variable - computed: false, optional: true, required: false
        this._additionalVariable = new IntegrationConnectorsConnectionEventingConfigAdditionalVariableList(this, "additional_variable", false);
        // auth_config - computed: false, optional: true, required: false
        this._authConfig = new IntegrationConnectorsConnectionEventingConfigAuthConfigOutputReference(this, "auth_config");
        // registration_destination_config - computed: false, optional: false, required: true
        this._registrationDestinationConfig = new IntegrationConnectorsConnectionEventingConfigRegistrationDestinationConfigOutputReference(this, "registration_destination_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enrichmentEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enrichmentEnabled = this._enrichmentEnabled;
        }
        if (this._additionalVariable?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.additionalVariable = this._additionalVariable?.internalValue;
        }
        if (this._authConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.authConfig = this._authConfig?.internalValue;
        }
        if (this._registrationDestinationConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.registrationDestinationConfig = this._registrationDestinationConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enrichmentEnabled = undefined;
            this._additionalVariable.internalValue = undefined;
            this._authConfig.internalValue = undefined;
            this._registrationDestinationConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enrichmentEnabled = value.enrichmentEnabled;
            this._additionalVariable.internalValue = value.additionalVariable;
            this._authConfig.internalValue = value.authConfig;
            this._registrationDestinationConfig.internalValue = value.registrationDestinationConfig;
        }
    }
    get enrichmentEnabled() {
        return this.getBooleanAttribute('enrichment_enabled');
    }
    set enrichmentEnabled(value) {
        this._enrichmentEnabled = value;
    }
    resetEnrichmentEnabled() {
        this._enrichmentEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enrichmentEnabledInput() {
        return this._enrichmentEnabled;
    }
    get additionalVariable() {
        return this._additionalVariable;
    }
    putAdditionalVariable(value) {
        this._additionalVariable.internalValue = value;
    }
    resetAdditionalVariable() {
        this._additionalVariable.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get additionalVariableInput() {
        return this._additionalVariable.internalValue;
    }
    get authConfig() {
        return this._authConfig;
    }
    putAuthConfig(value) {
        this._authConfig.internalValue = value;
    }
    resetAuthConfig() {
        this._authConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authConfigInput() {
        return this._authConfig.internalValue;
    }
    get registrationDestinationConfig() {
        return this._registrationDestinationConfig;
    }
    putRegistrationDestinationConfig(value) {
        this._registrationDestinationConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get registrationDestinationConfigInput() {
        return this._registrationDestinationConfig.internalValue;
    }
}
exports.IntegrationConnectorsConnectionEventingConfigOutputReference = IntegrationConnectorsConnectionEventingConfigOutputReference;
_23 = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionEventingConfigOutputReference[_23] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionEventingConfigOutputReference", version: "14.13.1" };
function integrationConnectorsConnectionLockConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        locked: cdktf.booleanToTerraform(struct.locked),
        reason: cdktf.stringToTerraform(struct.reason),
    };
}
exports.integrationConnectorsConnectionLockConfigToTerraform = integrationConnectorsConnectionLockConfigToTerraform;
function integrationConnectorsConnectionLockConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        locked: {
            value: cdktf.booleanToHclTerraform(struct.locked),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        reason: {
            value: cdktf.stringToHclTerraform(struct.reason),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.integrationConnectorsConnectionLockConfigToHclTerraform = integrationConnectorsConnectionLockConfigToHclTerraform;
class IntegrationConnectorsConnectionLockConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._locked !== undefined) {
            hasAnyValues = true;
            internalValueResult.locked = this._locked;
        }
        if (this._reason !== undefined) {
            hasAnyValues = true;
            internalValueResult.reason = this._reason;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._locked = undefined;
            this._reason = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._locked = value.locked;
            this._reason = value.reason;
        }
    }
    get locked() {
        return this.getBooleanAttribute('locked');
    }
    set locked(value) {
        this._locked = value;
    }
    // Temporarily expose input value. Use with caution.
    get lockedInput() {
        return this._locked;
    }
    get reason() {
        return this.getStringAttribute('reason');
    }
    set reason(value) {
        this._reason = value;
    }
    resetReason() {
        this._reason = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get reasonInput() {
        return this._reason;
    }
}
exports.IntegrationConnectorsConnectionLockConfigOutputReference = IntegrationConnectorsConnectionLockConfigOutputReference;
_24 = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionLockConfigOutputReference[_24] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionLockConfigOutputReference", version: "14.13.1" };
function integrationConnectorsConnectionLogConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.integrationConnectorsConnectionLogConfigToTerraform = integrationConnectorsConnectionLogConfigToTerraform;
function integrationConnectorsConnectionLogConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.integrationConnectorsConnectionLogConfigToHclTerraform = integrationConnectorsConnectionLogConfigToHclTerraform;
class IntegrationConnectorsConnectionLogConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
}
exports.IntegrationConnectorsConnectionLogConfigOutputReference = IntegrationConnectorsConnectionLogConfigOutputReference;
_25 = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionLogConfigOutputReference[_25] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionLogConfigOutputReference", version: "14.13.1" };
function integrationConnectorsConnectionNodeConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max_node_count: cdktf.numberToTerraform(struct.maxNodeCount),
        min_node_count: cdktf.numberToTerraform(struct.minNodeCount),
    };
}
exports.integrationConnectorsConnectionNodeConfigToTerraform = integrationConnectorsConnectionNodeConfigToTerraform;
function integrationConnectorsConnectionNodeConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        max_node_count: {
            value: cdktf.numberToHclTerraform(struct.maxNodeCount),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        min_node_count: {
            value: cdktf.numberToHclTerraform(struct.minNodeCount),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.integrationConnectorsConnectionNodeConfigToHclTerraform = integrationConnectorsConnectionNodeConfigToHclTerraform;
class IntegrationConnectorsConnectionNodeConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._maxNodeCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxNodeCount = this._maxNodeCount;
        }
        if (this._minNodeCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.minNodeCount = this._minNodeCount;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._maxNodeCount = undefined;
            this._minNodeCount = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._maxNodeCount = value.maxNodeCount;
            this._minNodeCount = value.minNodeCount;
        }
    }
    get maxNodeCount() {
        return this.getNumberAttribute('max_node_count');
    }
    set maxNodeCount(value) {
        this._maxNodeCount = value;
    }
    resetMaxNodeCount() {
        this._maxNodeCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxNodeCountInput() {
        return this._maxNodeCount;
    }
    get minNodeCount() {
        return this.getNumberAttribute('min_node_count');
    }
    set minNodeCount(value) {
        this._minNodeCount = value;
    }
    resetMinNodeCount() {
        this._minNodeCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minNodeCountInput() {
        return this._minNodeCount;
    }
}
exports.IntegrationConnectorsConnectionNodeConfigOutputReference = IntegrationConnectorsConnectionNodeConfigOutputReference;
_26 = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionNodeConfigOutputReference[_26] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionNodeConfigOutputReference", version: "14.13.1" };
function integrationConnectorsConnectionSslConfigAdditionalVariableEncryptionKeyValueToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        kms_key_name: cdktf.stringToTerraform(struct.kmsKeyName),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.integrationConnectorsConnectionSslConfigAdditionalVariableEncryptionKeyValueToTerraform = integrationConnectorsConnectionSslConfigAdditionalVariableEncryptionKeyValueToTerraform;
function integrationConnectorsConnectionSslConfigAdditionalVariableEncryptionKeyValueToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        kms_key_name: {
            value: cdktf.stringToHclTerraform(struct.kmsKeyName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        type: {
            value: cdktf.stringToHclTerraform(struct.type),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.integrationConnectorsConnectionSslConfigAdditionalVariableEncryptionKeyValueToHclTerraform = integrationConnectorsConnectionSslConfigAdditionalVariableEncryptionKeyValueToHclTerraform;
class IntegrationConnectorsConnectionSslConfigAdditionalVariableEncryptionKeyValueOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._kmsKeyName !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyName = this._kmsKeyName;
        }
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._kmsKeyName = undefined;
            this._type = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._kmsKeyName = value.kmsKeyName;
            this._type = value.type;
        }
    }
    get kmsKeyName() {
        return this.getStringAttribute('kms_key_name');
    }
    set kmsKeyName(value) {
        this._kmsKeyName = value;
    }
    resetKmsKeyName() {
        this._kmsKeyName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyNameInput() {
        return this._kmsKeyName;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    resetType() {
        this._type = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
}
exports.IntegrationConnectorsConnectionSslConfigAdditionalVariableEncryptionKeyValueOutputReference = IntegrationConnectorsConnectionSslConfigAdditionalVariableEncryptionKeyValueOutputReference;
_27 = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionSslConfigAdditionalVariableEncryptionKeyValueOutputReference[_27] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionSslConfigAdditionalVariableEncryptionKeyValueOutputReference", version: "14.13.1" };
function integrationConnectorsConnectionSslConfigAdditionalVariableSecretValueToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        secret_version: cdktf.stringToTerraform(struct.secretVersion),
    };
}
exports.integrationConnectorsConnectionSslConfigAdditionalVariableSecretValueToTerraform = integrationConnectorsConnectionSslConfigAdditionalVariableSecretValueToTerraform;
function integrationConnectorsConnectionSslConfigAdditionalVariableSecretValueToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        secret_version: {
            value: cdktf.stringToHclTerraform(struct.secretVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.integrationConnectorsConnectionSslConfigAdditionalVariableSecretValueToHclTerraform = integrationConnectorsConnectionSslConfigAdditionalVariableSecretValueToHclTerraform;
class IntegrationConnectorsConnectionSslConfigAdditionalVariableSecretValueOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._secretVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.secretVersion = this._secretVersion;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._secretVersion = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._secretVersion = value.secretVersion;
        }
    }
    get secretVersion() {
        return this.getStringAttribute('secret_version');
    }
    set secretVersion(value) {
        this._secretVersion = value;
    }
    // Temporarily expose input value. Use with caution.
    get secretVersionInput() {
        return this._secretVersion;
    }
}
exports.IntegrationConnectorsConnectionSslConfigAdditionalVariableSecretValueOutputReference = IntegrationConnectorsConnectionSslConfigAdditionalVariableSecretValueOutputReference;
_28 = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionSslConfigAdditionalVariableSecretValueOutputReference[_28] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionSslConfigAdditionalVariableSecretValueOutputReference", version: "14.13.1" };
function integrationConnectorsConnectionSslConfigAdditionalVariableToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        boolean_value: cdktf.booleanToTerraform(struct.booleanValue),
        integer_value: cdktf.numberToTerraform(struct.integerValue),
        key: cdktf.stringToTerraform(struct.key),
        string_value: cdktf.stringToTerraform(struct.stringValue),
        encryption_key_value: integrationConnectorsConnectionSslConfigAdditionalVariableEncryptionKeyValueToTerraform(struct.encryptionKeyValue),
        secret_value: integrationConnectorsConnectionSslConfigAdditionalVariableSecretValueToTerraform(struct.secretValue),
    };
}
exports.integrationConnectorsConnectionSslConfigAdditionalVariableToTerraform = integrationConnectorsConnectionSslConfigAdditionalVariableToTerraform;
function integrationConnectorsConnectionSslConfigAdditionalVariableToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        boolean_value: {
            value: cdktf.booleanToHclTerraform(struct.booleanValue),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        integer_value: {
            value: cdktf.numberToHclTerraform(struct.integerValue),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        key: {
            value: cdktf.stringToHclTerraform(struct.key),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        string_value: {
            value: cdktf.stringToHclTerraform(struct.stringValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        encryption_key_value: {
            value: integrationConnectorsConnectionSslConfigAdditionalVariableEncryptionKeyValueToHclTerraform(struct.encryptionKeyValue),
            isBlock: true,
            type: "list",
            storageClassType: "IntegrationConnectorsConnectionSslConfigAdditionalVariableEncryptionKeyValueList",
        },
        secret_value: {
            value: integrationConnectorsConnectionSslConfigAdditionalVariableSecretValueToHclTerraform(struct.secretValue),
            isBlock: true,
            type: "list",
            storageClassType: "IntegrationConnectorsConnectionSslConfigAdditionalVariableSecretValueList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.integrationConnectorsConnectionSslConfigAdditionalVariableToHclTerraform = integrationConnectorsConnectionSslConfigAdditionalVariableToHclTerraform;
class IntegrationConnectorsConnectionSslConfigAdditionalVariableOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // encryption_key_value - computed: false, optional: true, required: false
        this._encryptionKeyValue = new IntegrationConnectorsConnectionSslConfigAdditionalVariableEncryptionKeyValueOutputReference(this, "encryption_key_value");
        // secret_value - computed: false, optional: true, required: false
        this._secretValue = new IntegrationConnectorsConnectionSslConfigAdditionalVariableSecretValueOutputReference(this, "secret_value");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._booleanValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.booleanValue = this._booleanValue;
        }
        if (this._integerValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.integerValue = this._integerValue;
        }
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._stringValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.stringValue = this._stringValue;
        }
        if (this._encryptionKeyValue?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.encryptionKeyValue = this._encryptionKeyValue?.internalValue;
        }
        if (this._secretValue?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.secretValue = this._secretValue?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._booleanValue = undefined;
            this._integerValue = undefined;
            this._key = undefined;
            this._stringValue = undefined;
            this._encryptionKeyValue.internalValue = undefined;
            this._secretValue.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._booleanValue = value.booleanValue;
            this._integerValue = value.integerValue;
            this._key = value.key;
            this._stringValue = value.stringValue;
            this._encryptionKeyValue.internalValue = value.encryptionKeyValue;
            this._secretValue.internalValue = value.secretValue;
        }
    }
    get booleanValue() {
        return this.getBooleanAttribute('boolean_value');
    }
    set booleanValue(value) {
        this._booleanValue = value;
    }
    resetBooleanValue() {
        this._booleanValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get booleanValueInput() {
        return this._booleanValue;
    }
    get integerValue() {
        return this.getNumberAttribute('integer_value');
    }
    set integerValue(value) {
        this._integerValue = value;
    }
    resetIntegerValue() {
        this._integerValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get integerValueInput() {
        return this._integerValue;
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get stringValue() {
        return this.getStringAttribute('string_value');
    }
    set stringValue(value) {
        this._stringValue = value;
    }
    resetStringValue() {
        this._stringValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stringValueInput() {
        return this._stringValue;
    }
    get encryptionKeyValue() {
        return this._encryptionKeyValue;
    }
    putEncryptionKeyValue(value) {
        this._encryptionKeyValue.internalValue = value;
    }
    resetEncryptionKeyValue() {
        this._encryptionKeyValue.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encryptionKeyValueInput() {
        return this._encryptionKeyValue.internalValue;
    }
    get secretValue() {
        return this._secretValue;
    }
    putSecretValue(value) {
        this._secretValue.internalValue = value;
    }
    resetSecretValue() {
        this._secretValue.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secretValueInput() {
        return this._secretValue.internalValue;
    }
}
exports.IntegrationConnectorsConnectionSslConfigAdditionalVariableOutputReference = IntegrationConnectorsConnectionSslConfigAdditionalVariableOutputReference;
_29 = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionSslConfigAdditionalVariableOutputReference[_29] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionSslConfigAdditionalVariableOutputReference", version: "14.13.1" };
class IntegrationConnectorsConnectionSslConfigAdditionalVariableList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new IntegrationConnectorsConnectionSslConfigAdditionalVariableOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.IntegrationConnectorsConnectionSslConfigAdditionalVariableList = IntegrationConnectorsConnectionSslConfigAdditionalVariableList;
_30 = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionSslConfigAdditionalVariableList[_30] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionSslConfigAdditionalVariableList", version: "14.13.1" };
function integrationConnectorsConnectionSslConfigClientCertificateToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        secret_version: cdktf.stringToTerraform(struct.secretVersion),
    };
}
exports.integrationConnectorsConnectionSslConfigClientCertificateToTerraform = integrationConnectorsConnectionSslConfigClientCertificateToTerraform;
function integrationConnectorsConnectionSslConfigClientCertificateToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        secret_version: {
            value: cdktf.stringToHclTerraform(struct.secretVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.integrationConnectorsConnectionSslConfigClientCertificateToHclTerraform = integrationConnectorsConnectionSslConfigClientCertificateToHclTerraform;
class IntegrationConnectorsConnectionSslConfigClientCertificateOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._secretVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.secretVersion = this._secretVersion;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._secretVersion = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._secretVersion = value.secretVersion;
        }
    }
    get secretVersion() {
        return this.getStringAttribute('secret_version');
    }
    set secretVersion(value) {
        this._secretVersion = value;
    }
    // Temporarily expose input value. Use with caution.
    get secretVersionInput() {
        return this._secretVersion;
    }
}
exports.IntegrationConnectorsConnectionSslConfigClientCertificateOutputReference = IntegrationConnectorsConnectionSslConfigClientCertificateOutputReference;
_31 = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionSslConfigClientCertificateOutputReference[_31] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionSslConfigClientCertificateOutputReference", version: "14.13.1" };
function integrationConnectorsConnectionSslConfigClientPrivateKeyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        secret_version: cdktf.stringToTerraform(struct.secretVersion),
    };
}
exports.integrationConnectorsConnectionSslConfigClientPrivateKeyToTerraform = integrationConnectorsConnectionSslConfigClientPrivateKeyToTerraform;
function integrationConnectorsConnectionSslConfigClientPrivateKeyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        secret_version: {
            value: cdktf.stringToHclTerraform(struct.secretVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.integrationConnectorsConnectionSslConfigClientPrivateKeyToHclTerraform = integrationConnectorsConnectionSslConfigClientPrivateKeyToHclTerraform;
class IntegrationConnectorsConnectionSslConfigClientPrivateKeyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._secretVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.secretVersion = this._secretVersion;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._secretVersion = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._secretVersion = value.secretVersion;
        }
    }
    get secretVersion() {
        return this.getStringAttribute('secret_version');
    }
    set secretVersion(value) {
        this._secretVersion = value;
    }
    // Temporarily expose input value. Use with caution.
    get secretVersionInput() {
        return this._secretVersion;
    }
}
exports.IntegrationConnectorsConnectionSslConfigClientPrivateKeyOutputReference = IntegrationConnectorsConnectionSslConfigClientPrivateKeyOutputReference;
_32 = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionSslConfigClientPrivateKeyOutputReference[_32] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionSslConfigClientPrivateKeyOutputReference", version: "14.13.1" };
function integrationConnectorsConnectionSslConfigClientPrivateKeyPassToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        secret_version: cdktf.stringToTerraform(struct.secretVersion),
    };
}
exports.integrationConnectorsConnectionSslConfigClientPrivateKeyPassToTerraform = integrationConnectorsConnectionSslConfigClientPrivateKeyPassToTerraform;
function integrationConnectorsConnectionSslConfigClientPrivateKeyPassToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        secret_version: {
            value: cdktf.stringToHclTerraform(struct.secretVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.integrationConnectorsConnectionSslConfigClientPrivateKeyPassToHclTerraform = integrationConnectorsConnectionSslConfigClientPrivateKeyPassToHclTerraform;
class IntegrationConnectorsConnectionSslConfigClientPrivateKeyPassOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._secretVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.secretVersion = this._secretVersion;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._secretVersion = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._secretVersion = value.secretVersion;
        }
    }
    get secretVersion() {
        return this.getStringAttribute('secret_version');
    }
    set secretVersion(value) {
        this._secretVersion = value;
    }
    // Temporarily expose input value. Use with caution.
    get secretVersionInput() {
        return this._secretVersion;
    }
}
exports.IntegrationConnectorsConnectionSslConfigClientPrivateKeyPassOutputReference = IntegrationConnectorsConnectionSslConfigClientPrivateKeyPassOutputReference;
_33 = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionSslConfigClientPrivateKeyPassOutputReference[_33] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionSslConfigClientPrivateKeyPassOutputReference", version: "14.13.1" };
function integrationConnectorsConnectionSslConfigPrivateServerCertificateToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        secret_version: cdktf.stringToTerraform(struct.secretVersion),
    };
}
exports.integrationConnectorsConnectionSslConfigPrivateServerCertificateToTerraform = integrationConnectorsConnectionSslConfigPrivateServerCertificateToTerraform;
function integrationConnectorsConnectionSslConfigPrivateServerCertificateToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        secret_version: {
            value: cdktf.stringToHclTerraform(struct.secretVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.integrationConnectorsConnectionSslConfigPrivateServerCertificateToHclTerraform = integrationConnectorsConnectionSslConfigPrivateServerCertificateToHclTerraform;
class IntegrationConnectorsConnectionSslConfigPrivateServerCertificateOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._secretVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.secretVersion = this._secretVersion;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._secretVersion = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._secretVersion = value.secretVersion;
        }
    }
    get secretVersion() {
        return this.getStringAttribute('secret_version');
    }
    set secretVersion(value) {
        this._secretVersion = value;
    }
    // Temporarily expose input value. Use with caution.
    get secretVersionInput() {
        return this._secretVersion;
    }
}
exports.IntegrationConnectorsConnectionSslConfigPrivateServerCertificateOutputReference = IntegrationConnectorsConnectionSslConfigPrivateServerCertificateOutputReference;
_34 = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionSslConfigPrivateServerCertificateOutputReference[_34] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionSslConfigPrivateServerCertificateOutputReference", version: "14.13.1" };
function integrationConnectorsConnectionSslConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        client_cert_type: cdktf.stringToTerraform(struct.clientCertType),
        server_cert_type: cdktf.stringToTerraform(struct.serverCertType),
        trust_model: cdktf.stringToTerraform(struct.trustModel),
        type: cdktf.stringToTerraform(struct.type),
        use_ssl: cdktf.booleanToTerraform(struct.useSsl),
        additional_variable: cdktf.listMapper(integrationConnectorsConnectionSslConfigAdditionalVariableToTerraform, true)(struct.additionalVariable),
        client_certificate: integrationConnectorsConnectionSslConfigClientCertificateToTerraform(struct.clientCertificate),
        client_private_key: integrationConnectorsConnectionSslConfigClientPrivateKeyToTerraform(struct.clientPrivateKey),
        client_private_key_pass: integrationConnectorsConnectionSslConfigClientPrivateKeyPassToTerraform(struct.clientPrivateKeyPass),
        private_server_certificate: integrationConnectorsConnectionSslConfigPrivateServerCertificateToTerraform(struct.privateServerCertificate),
    };
}
exports.integrationConnectorsConnectionSslConfigToTerraform = integrationConnectorsConnectionSslConfigToTerraform;
function integrationConnectorsConnectionSslConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        client_cert_type: {
            value: cdktf.stringToHclTerraform(struct.clientCertType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        server_cert_type: {
            value: cdktf.stringToHclTerraform(struct.serverCertType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        trust_model: {
            value: cdktf.stringToHclTerraform(struct.trustModel),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        type: {
            value: cdktf.stringToHclTerraform(struct.type),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        use_ssl: {
            value: cdktf.booleanToHclTerraform(struct.useSsl),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        additional_variable: {
            value: cdktf.listMapperHcl(integrationConnectorsConnectionSslConfigAdditionalVariableToHclTerraform, true)(struct.additionalVariable),
            isBlock: true,
            type: "list",
            storageClassType: "IntegrationConnectorsConnectionSslConfigAdditionalVariableList",
        },
        client_certificate: {
            value: integrationConnectorsConnectionSslConfigClientCertificateToHclTerraform(struct.clientCertificate),
            isBlock: true,
            type: "list",
            storageClassType: "IntegrationConnectorsConnectionSslConfigClientCertificateList",
        },
        client_private_key: {
            value: integrationConnectorsConnectionSslConfigClientPrivateKeyToHclTerraform(struct.clientPrivateKey),
            isBlock: true,
            type: "list",
            storageClassType: "IntegrationConnectorsConnectionSslConfigClientPrivateKeyList",
        },
        client_private_key_pass: {
            value: integrationConnectorsConnectionSslConfigClientPrivateKeyPassToHclTerraform(struct.clientPrivateKeyPass),
            isBlock: true,
            type: "list",
            storageClassType: "IntegrationConnectorsConnectionSslConfigClientPrivateKeyPassList",
        },
        private_server_certificate: {
            value: integrationConnectorsConnectionSslConfigPrivateServerCertificateToHclTerraform(struct.privateServerCertificate),
            isBlock: true,
            type: "list",
            storageClassType: "IntegrationConnectorsConnectionSslConfigPrivateServerCertificateList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.integrationConnectorsConnectionSslConfigToHclTerraform = integrationConnectorsConnectionSslConfigToHclTerraform;
class IntegrationConnectorsConnectionSslConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // additional_variable - computed: false, optional: true, required: false
        this._additionalVariable = new IntegrationConnectorsConnectionSslConfigAdditionalVariableList(this, "additional_variable", false);
        // client_certificate - computed: false, optional: true, required: false
        this._clientCertificate = new IntegrationConnectorsConnectionSslConfigClientCertificateOutputReference(this, "client_certificate");
        // client_private_key - computed: false, optional: true, required: false
        this._clientPrivateKey = new IntegrationConnectorsConnectionSslConfigClientPrivateKeyOutputReference(this, "client_private_key");
        // client_private_key_pass - computed: false, optional: true, required: false
        this._clientPrivateKeyPass = new IntegrationConnectorsConnectionSslConfigClientPrivateKeyPassOutputReference(this, "client_private_key_pass");
        // private_server_certificate - computed: false, optional: true, required: false
        this._privateServerCertificate = new IntegrationConnectorsConnectionSslConfigPrivateServerCertificateOutputReference(this, "private_server_certificate");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._clientCertType !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientCertType = this._clientCertType;
        }
        if (this._serverCertType !== undefined) {
            hasAnyValues = true;
            internalValueResult.serverCertType = this._serverCertType;
        }
        if (this._trustModel !== undefined) {
            hasAnyValues = true;
            internalValueResult.trustModel = this._trustModel;
        }
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        if (this._useSsl !== undefined) {
            hasAnyValues = true;
            internalValueResult.useSsl = this._useSsl;
        }
        if (this._additionalVariable?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.additionalVariable = this._additionalVariable?.internalValue;
        }
        if (this._clientCertificate?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientCertificate = this._clientCertificate?.internalValue;
        }
        if (this._clientPrivateKey?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientPrivateKey = this._clientPrivateKey?.internalValue;
        }
        if (this._clientPrivateKeyPass?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientPrivateKeyPass = this._clientPrivateKeyPass?.internalValue;
        }
        if (this._privateServerCertificate?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.privateServerCertificate = this._privateServerCertificate?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._clientCertType = undefined;
            this._serverCertType = undefined;
            this._trustModel = undefined;
            this._type = undefined;
            this._useSsl = undefined;
            this._additionalVariable.internalValue = undefined;
            this._clientCertificate.internalValue = undefined;
            this._clientPrivateKey.internalValue = undefined;
            this._clientPrivateKeyPass.internalValue = undefined;
            this._privateServerCertificate.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._clientCertType = value.clientCertType;
            this._serverCertType = value.serverCertType;
            this._trustModel = value.trustModel;
            this._type = value.type;
            this._useSsl = value.useSsl;
            this._additionalVariable.internalValue = value.additionalVariable;
            this._clientCertificate.internalValue = value.clientCertificate;
            this._clientPrivateKey.internalValue = value.clientPrivateKey;
            this._clientPrivateKeyPass.internalValue = value.clientPrivateKeyPass;
            this._privateServerCertificate.internalValue = value.privateServerCertificate;
        }
    }
    get clientCertType() {
        return this.getStringAttribute('client_cert_type');
    }
    set clientCertType(value) {
        this._clientCertType = value;
    }
    resetClientCertType() {
        this._clientCertType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientCertTypeInput() {
        return this._clientCertType;
    }
    get serverCertType() {
        return this.getStringAttribute('server_cert_type');
    }
    set serverCertType(value) {
        this._serverCertType = value;
    }
    resetServerCertType() {
        this._serverCertType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serverCertTypeInput() {
        return this._serverCertType;
    }
    get trustModel() {
        return this.getStringAttribute('trust_model');
    }
    set trustModel(value) {
        this._trustModel = value;
    }
    resetTrustModel() {
        this._trustModel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get trustModelInput() {
        return this._trustModel;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    get useSsl() {
        return this.getBooleanAttribute('use_ssl');
    }
    set useSsl(value) {
        this._useSsl = value;
    }
    resetUseSsl() {
        this._useSsl = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get useSslInput() {
        return this._useSsl;
    }
    get additionalVariable() {
        return this._additionalVariable;
    }
    putAdditionalVariable(value) {
        this._additionalVariable.internalValue = value;
    }
    resetAdditionalVariable() {
        this._additionalVariable.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get additionalVariableInput() {
        return this._additionalVariable.internalValue;
    }
    get clientCertificate() {
        return this._clientCertificate;
    }
    putClientCertificate(value) {
        this._clientCertificate.internalValue = value;
    }
    resetClientCertificate() {
        this._clientCertificate.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientCertificateInput() {
        return this._clientCertificate.internalValue;
    }
    get clientPrivateKey() {
        return this._clientPrivateKey;
    }
    putClientPrivateKey(value) {
        this._clientPrivateKey.internalValue = value;
    }
    resetClientPrivateKey() {
        this._clientPrivateKey.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientPrivateKeyInput() {
        return this._clientPrivateKey.internalValue;
    }
    get clientPrivateKeyPass() {
        return this._clientPrivateKeyPass;
    }
    putClientPrivateKeyPass(value) {
        this._clientPrivateKeyPass.internalValue = value;
    }
    resetClientPrivateKeyPass() {
        this._clientPrivateKeyPass.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientPrivateKeyPassInput() {
        return this._clientPrivateKeyPass.internalValue;
    }
    get privateServerCertificate() {
        return this._privateServerCertificate;
    }
    putPrivateServerCertificate(value) {
        this._privateServerCertificate.internalValue = value;
    }
    resetPrivateServerCertificate() {
        this._privateServerCertificate.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get privateServerCertificateInput() {
        return this._privateServerCertificate.internalValue;
    }
}
exports.IntegrationConnectorsConnectionSslConfigOutputReference = IntegrationConnectorsConnectionSslConfigOutputReference;
_35 = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionSslConfigOutputReference[_35] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionSslConfigOutputReference", version: "14.13.1" };
function integrationConnectorsConnectionTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.integrationConnectorsConnectionTimeoutsToTerraform = integrationConnectorsConnectionTimeoutsToTerraform;
function integrationConnectorsConnectionTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.integrationConnectorsConnectionTimeoutsToHclTerraform = integrationConnectorsConnectionTimeoutsToHclTerraform;
class IntegrationConnectorsConnectionTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.IntegrationConnectorsConnectionTimeoutsOutputReference = IntegrationConnectorsConnectionTimeoutsOutputReference;
_36 = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnectionTimeoutsOutputReference[_36] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnectionTimeoutsOutputReference", version: "14.13.1" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/integration_connectors_connection google_integration_connectors_connection}
*/
class IntegrationConnectorsConnection extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a IntegrationConnectorsConnection resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the IntegrationConnectorsConnection to import
    * @param importFromId The id of the existing IntegrationConnectorsConnection that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/integration_connectors_connection#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the IntegrationConnectorsConnection to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_integration_connectors_connection", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/integration_connectors_connection google_integration_connectors_connection} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options IntegrationConnectorsConnectionConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_integration_connectors_connection',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // connector_version_infra_config - computed: true, optional: false, required: false
        this._connectorVersionInfraConfig = new IntegrationConnectorsConnectionConnectorVersionInfraConfigList(this, "connector_version_infra_config", false);
        // effective_labels - computed: true, optional: false, required: false
        this._effectiveLabels = new cdktf.StringMap(this, "effective_labels");
        // eventing_runtime_data - computed: true, optional: false, required: false
        this._eventingRuntimeData = new IntegrationConnectorsConnectionEventingRuntimeDataList(this, "eventing_runtime_data", false);
        // status - computed: true, optional: false, required: false
        this._status = new IntegrationConnectorsConnectionStatusList(this, "status", false);
        // terraform_labels - computed: true, optional: false, required: false
        this._terraformLabels = new cdktf.StringMap(this, "terraform_labels");
        // auth_config - computed: false, optional: true, required: false
        this._authConfig = new IntegrationConnectorsConnectionAuthConfigOutputReference(this, "auth_config");
        // config_variable - computed: false, optional: true, required: false
        this._configVariable = new IntegrationConnectorsConnectionConfigVariableList(this, "config_variable", false);
        // destination_config - computed: false, optional: true, required: false
        this._destinationConfig = new IntegrationConnectorsConnectionDestinationConfigList(this, "destination_config", false);
        // eventing_config - computed: false, optional: true, required: false
        this._eventingConfig = new IntegrationConnectorsConnectionEventingConfigOutputReference(this, "eventing_config");
        // lock_config - computed: false, optional: true, required: false
        this._lockConfig = new IntegrationConnectorsConnectionLockConfigOutputReference(this, "lock_config");
        // log_config - computed: false, optional: true, required: false
        this._logConfig = new IntegrationConnectorsConnectionLogConfigOutputReference(this, "log_config");
        // node_config - computed: false, optional: true, required: false
        this._nodeConfig = new IntegrationConnectorsConnectionNodeConfigOutputReference(this, "node_config");
        // ssl_config - computed: false, optional: true, required: false
        this._sslConfig = new IntegrationConnectorsConnectionSslConfigOutputReference(this, "ssl_config");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new IntegrationConnectorsConnectionTimeoutsOutputReference(this, "timeouts");
        this._connectorVersion = config.connectorVersion;
        this._description = config.description;
        this._eventingEnablementType = config.eventingEnablementType;
        this._id = config.id;
        this._labels = config.labels;
        this._location = config.location;
        this._name = config.name;
        this._project = config.project;
        this._serviceAccount = config.serviceAccount;
        this._suspended = config.suspended;
        this._authConfig.internalValue = config.authConfig;
        this._configVariable.internalValue = config.configVariable;
        this._destinationConfig.internalValue = config.destinationConfig;
        this._eventingConfig.internalValue = config.eventingConfig;
        this._lockConfig.internalValue = config.lockConfig;
        this._logConfig.internalValue = config.logConfig;
        this._nodeConfig.internalValue = config.nodeConfig;
        this._sslConfig.internalValue = config.sslConfig;
        this._timeouts.internalValue = config.timeouts;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // connection_revision - computed: true, optional: false, required: false
    get connectionRevision() {
        return this.getStringAttribute('connection_revision');
    }
    get connectorVersion() {
        return this.getStringAttribute('connector_version');
    }
    set connectorVersion(value) {
        this._connectorVersion = value;
    }
    // Temporarily expose input value. Use with caution.
    get connectorVersionInput() {
        return this._connectorVersion;
    }
    get connectorVersionInfraConfig() {
        return this._connectorVersionInfraConfig;
    }
    // connector_version_launch_stage - computed: true, optional: false, required: false
    get connectorVersionLaunchStage() {
        return this.getStringAttribute('connector_version_launch_stage');
    }
    // create_time - computed: true, optional: false, required: false
    get createTime() {
        return this.getStringAttribute('create_time');
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get effectiveLabels() {
        return this._effectiveLabels;
    }
    get eventingEnablementType() {
        return this.getStringAttribute('eventing_enablement_type');
    }
    set eventingEnablementType(value) {
        this._eventingEnablementType = value;
    }
    resetEventingEnablementType() {
        this._eventingEnablementType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get eventingEnablementTypeInput() {
        return this._eventingEnablementType;
    }
    get eventingRuntimeData() {
        return this._eventingRuntimeData;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get serviceAccount() {
        return this.getStringAttribute('service_account');
    }
    set serviceAccount(value) {
        this._serviceAccount = value;
    }
    resetServiceAccount() {
        this._serviceAccount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceAccountInput() {
        return this._serviceAccount;
    }
    // service_directory - computed: true, optional: false, required: false
    get serviceDirectory() {
        return this.getStringAttribute('service_directory');
    }
    get status() {
        return this._status;
    }
    // subscription_type - computed: true, optional: false, required: false
    get subscriptionType() {
        return this.getStringAttribute('subscription_type');
    }
    get suspended() {
        return this.getBooleanAttribute('suspended');
    }
    set suspended(value) {
        this._suspended = value;
    }
    resetSuspended() {
        this._suspended = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get suspendedInput() {
        return this._suspended;
    }
    get terraformLabels() {
        return this._terraformLabels;
    }
    // update_time - computed: true, optional: false, required: false
    get updateTime() {
        return this.getStringAttribute('update_time');
    }
    get authConfig() {
        return this._authConfig;
    }
    putAuthConfig(value) {
        this._authConfig.internalValue = value;
    }
    resetAuthConfig() {
        this._authConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authConfigInput() {
        return this._authConfig.internalValue;
    }
    get configVariable() {
        return this._configVariable;
    }
    putConfigVariable(value) {
        this._configVariable.internalValue = value;
    }
    resetConfigVariable() {
        this._configVariable.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get configVariableInput() {
        return this._configVariable.internalValue;
    }
    get destinationConfig() {
        return this._destinationConfig;
    }
    putDestinationConfig(value) {
        this._destinationConfig.internalValue = value;
    }
    resetDestinationConfig() {
        this._destinationConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get destinationConfigInput() {
        return this._destinationConfig.internalValue;
    }
    get eventingConfig() {
        return this._eventingConfig;
    }
    putEventingConfig(value) {
        this._eventingConfig.internalValue = value;
    }
    resetEventingConfig() {
        this._eventingConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get eventingConfigInput() {
        return this._eventingConfig.internalValue;
    }
    get lockConfig() {
        return this._lockConfig;
    }
    putLockConfig(value) {
        this._lockConfig.internalValue = value;
    }
    resetLockConfig() {
        this._lockConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get lockConfigInput() {
        return this._lockConfig.internalValue;
    }
    get logConfig() {
        return this._logConfig;
    }
    putLogConfig(value) {
        this._logConfig.internalValue = value;
    }
    resetLogConfig() {
        this._logConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logConfigInput() {
        return this._logConfig.internalValue;
    }
    get nodeConfig() {
        return this._nodeConfig;
    }
    putNodeConfig(value) {
        this._nodeConfig.internalValue = value;
    }
    resetNodeConfig() {
        this._nodeConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nodeConfigInput() {
        return this._nodeConfig.internalValue;
    }
    get sslConfig() {
        return this._sslConfig;
    }
    putSslConfig(value) {
        this._sslConfig.internalValue = value;
    }
    resetSslConfig() {
        this._sslConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sslConfigInput() {
        return this._sslConfig.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            connector_version: cdktf.stringToTerraform(this._connectorVersion),
            description: cdktf.stringToTerraform(this._description),
            eventing_enablement_type: cdktf.stringToTerraform(this._eventingEnablementType),
            id: cdktf.stringToTerraform(this._id),
            labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._labels),
            location: cdktf.stringToTerraform(this._location),
            name: cdktf.stringToTerraform(this._name),
            project: cdktf.stringToTerraform(this._project),
            service_account: cdktf.stringToTerraform(this._serviceAccount),
            suspended: cdktf.booleanToTerraform(this._suspended),
            auth_config: integrationConnectorsConnectionAuthConfigToTerraform(this._authConfig.internalValue),
            config_variable: cdktf.listMapper(integrationConnectorsConnectionConfigVariableToTerraform, true)(this._configVariable.internalValue),
            destination_config: cdktf.listMapper(integrationConnectorsConnectionDestinationConfigToTerraform, true)(this._destinationConfig.internalValue),
            eventing_config: integrationConnectorsConnectionEventingConfigToTerraform(this._eventingConfig.internalValue),
            lock_config: integrationConnectorsConnectionLockConfigToTerraform(this._lockConfig.internalValue),
            log_config: integrationConnectorsConnectionLogConfigToTerraform(this._logConfig.internalValue),
            node_config: integrationConnectorsConnectionNodeConfigToTerraform(this._nodeConfig.internalValue),
            ssl_config: integrationConnectorsConnectionSslConfigToTerraform(this._sslConfig.internalValue),
            timeouts: integrationConnectorsConnectionTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            connector_version: {
                value: cdktf.stringToHclTerraform(this._connectorVersion),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            description: {
                value: cdktf.stringToHclTerraform(this._description),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            eventing_enablement_type: {
                value: cdktf.stringToHclTerraform(this._eventingEnablementType),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            labels: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._labels),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            location: {
                value: cdktf.stringToHclTerraform(this._location),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            name: {
                value: cdktf.stringToHclTerraform(this._name),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            project: {
                value: cdktf.stringToHclTerraform(this._project),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            service_account: {
                value: cdktf.stringToHclTerraform(this._serviceAccount),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            suspended: {
                value: cdktf.booleanToHclTerraform(this._suspended),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            auth_config: {
                value: integrationConnectorsConnectionAuthConfigToHclTerraform(this._authConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "IntegrationConnectorsConnectionAuthConfigList",
            },
            config_variable: {
                value: cdktf.listMapperHcl(integrationConnectorsConnectionConfigVariableToHclTerraform, true)(this._configVariable.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "IntegrationConnectorsConnectionConfigVariableList",
            },
            destination_config: {
                value: cdktf.listMapperHcl(integrationConnectorsConnectionDestinationConfigToHclTerraform, true)(this._destinationConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "IntegrationConnectorsConnectionDestinationConfigList",
            },
            eventing_config: {
                value: integrationConnectorsConnectionEventingConfigToHclTerraform(this._eventingConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "IntegrationConnectorsConnectionEventingConfigList",
            },
            lock_config: {
                value: integrationConnectorsConnectionLockConfigToHclTerraform(this._lockConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "IntegrationConnectorsConnectionLockConfigList",
            },
            log_config: {
                value: integrationConnectorsConnectionLogConfigToHclTerraform(this._logConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "IntegrationConnectorsConnectionLogConfigList",
            },
            node_config: {
                value: integrationConnectorsConnectionNodeConfigToHclTerraform(this._nodeConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "IntegrationConnectorsConnectionNodeConfigList",
            },
            ssl_config: {
                value: integrationConnectorsConnectionSslConfigToHclTerraform(this._sslConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "IntegrationConnectorsConnectionSslConfigList",
            },
            timeouts: {
                value: integrationConnectorsConnectionTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "IntegrationConnectorsConnectionTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.IntegrationConnectorsConnection = IntegrationConnectorsConnection;
_37 = JSII_RTTI_SYMBOL_1;
IntegrationConnectorsConnection[_37] = { fqn: "@cdktf/provider-google.integrationConnectorsConnection.IntegrationConnectorsConnection", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
IntegrationConnectorsConnection.tfResourceType = "google_integration_connectors_connection";
//# sourceMappingURL=data:application/json;base64,