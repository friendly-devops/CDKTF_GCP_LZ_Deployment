"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
Object.defineProperty(exports, "__esModule", { value: true });
exports.cloudbuildv2ConnectionTimeoutsToTerraform = exports.Cloudbuildv2ConnectionGitlabConfigOutputReference = exports.cloudbuildv2ConnectionGitlabConfigToHclTerraform = exports.cloudbuildv2ConnectionGitlabConfigToTerraform = exports.Cloudbuildv2ConnectionGitlabConfigServiceDirectoryConfigOutputReference = exports.cloudbuildv2ConnectionGitlabConfigServiceDirectoryConfigToHclTerraform = exports.cloudbuildv2ConnectionGitlabConfigServiceDirectoryConfigToTerraform = exports.Cloudbuildv2ConnectionGitlabConfigReadAuthorizerCredentialOutputReference = exports.cloudbuildv2ConnectionGitlabConfigReadAuthorizerCredentialToHclTerraform = exports.cloudbuildv2ConnectionGitlabConfigReadAuthorizerCredentialToTerraform = exports.Cloudbuildv2ConnectionGitlabConfigAuthorizerCredentialOutputReference = exports.cloudbuildv2ConnectionGitlabConfigAuthorizerCredentialToHclTerraform = exports.cloudbuildv2ConnectionGitlabConfigAuthorizerCredentialToTerraform = exports.Cloudbuildv2ConnectionGithubEnterpriseConfigOutputReference = exports.cloudbuildv2ConnectionGithubEnterpriseConfigToHclTerraform = exports.cloudbuildv2ConnectionGithubEnterpriseConfigToTerraform = exports.Cloudbuildv2ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutputReference = exports.cloudbuildv2ConnectionGithubEnterpriseConfigServiceDirectoryConfigToHclTerraform = exports.cloudbuildv2ConnectionGithubEnterpriseConfigServiceDirectoryConfigToTerraform = exports.Cloudbuildv2ConnectionGithubConfigOutputReference = exports.cloudbuildv2ConnectionGithubConfigToHclTerraform = exports.cloudbuildv2ConnectionGithubConfigToTerraform = exports.Cloudbuildv2ConnectionGithubConfigAuthorizerCredentialOutputReference = exports.cloudbuildv2ConnectionGithubConfigAuthorizerCredentialToHclTerraform = exports.cloudbuildv2ConnectionGithubConfigAuthorizerCredentialToTerraform = exports.Cloudbuildv2ConnectionBitbucketDataCenterConfigOutputReference = exports.cloudbuildv2ConnectionBitbucketDataCenterConfigToHclTerraform = exports.cloudbuildv2ConnectionBitbucketDataCenterConfigToTerraform = exports.Cloudbuildv2ConnectionBitbucketDataCenterConfigServiceDirectoryConfigOutputReference = exports.cloudbuildv2ConnectionBitbucketDataCenterConfigServiceDirectoryConfigToHclTerraform = exports.cloudbuildv2ConnectionBitbucketDataCenterConfigServiceDirectoryConfigToTerraform = exports.Cloudbuildv2ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialOutputReference = exports.cloudbuildv2ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialToHclTerraform = exports.cloudbuildv2ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialToTerraform = exports.Cloudbuildv2ConnectionBitbucketDataCenterConfigAuthorizerCredentialOutputReference = exports.cloudbuildv2ConnectionBitbucketDataCenterConfigAuthorizerCredentialToHclTerraform = exports.cloudbuildv2ConnectionBitbucketDataCenterConfigAuthorizerCredentialToTerraform = exports.Cloudbuildv2ConnectionBitbucketCloudConfigOutputReference = exports.cloudbuildv2ConnectionBitbucketCloudConfigToHclTerraform = exports.cloudbuildv2ConnectionBitbucketCloudConfigToTerraform = exports.Cloudbuildv2ConnectionBitbucketCloudConfigReadAuthorizerCredentialOutputReference = exports.cloudbuildv2ConnectionBitbucketCloudConfigReadAuthorizerCredentialToHclTerraform = exports.cloudbuildv2ConnectionBitbucketCloudConfigReadAuthorizerCredentialToTerraform = exports.Cloudbuildv2ConnectionBitbucketCloudConfigAuthorizerCredentialOutputReference = exports.cloudbuildv2ConnectionBitbucketCloudConfigAuthorizerCredentialToHclTerraform = exports.cloudbuildv2ConnectionBitbucketCloudConfigAuthorizerCredentialToTerraform = exports.Cloudbuildv2ConnectionInstallationStateList = exports.Cloudbuildv2ConnectionInstallationStateOutputReference = exports.cloudbuildv2ConnectionInstallationStateToHclTerraform = exports.cloudbuildv2ConnectionInstallationStateToTerraform = void 0;
exports.Cloudbuildv2Connection = exports.Cloudbuildv2ConnectionTimeoutsOutputReference = exports.cloudbuildv2ConnectionTimeoutsToHclTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function cloudbuildv2ConnectionInstallationStateToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.cloudbuildv2ConnectionInstallationStateToTerraform = cloudbuildv2ConnectionInstallationStateToTerraform;
function cloudbuildv2ConnectionInstallationStateToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.cloudbuildv2ConnectionInstallationStateToHclTerraform = cloudbuildv2ConnectionInstallationStateToHclTerraform;
class Cloudbuildv2ConnectionInstallationStateOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // action_uri - computed: true, optional: false, required: false
    get actionUri() {
        return this.getStringAttribute('action_uri');
    }
    // message - computed: true, optional: false, required: false
    get message() {
        return this.getStringAttribute('message');
    }
    // stage - computed: true, optional: false, required: false
    get stage() {
        return this.getStringAttribute('stage');
    }
}
exports.Cloudbuildv2ConnectionInstallationStateOutputReference = Cloudbuildv2ConnectionInstallationStateOutputReference;
_a = JSII_RTTI_SYMBOL_1;
Cloudbuildv2ConnectionInstallationStateOutputReference[_a] = { fqn: "@cdktf/provider-google.cloudbuildv2Connection.Cloudbuildv2ConnectionInstallationStateOutputReference", version: "14.13.1" };
class Cloudbuildv2ConnectionInstallationStateList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new Cloudbuildv2ConnectionInstallationStateOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.Cloudbuildv2ConnectionInstallationStateList = Cloudbuildv2ConnectionInstallationStateList;
_b = JSII_RTTI_SYMBOL_1;
Cloudbuildv2ConnectionInstallationStateList[_b] = { fqn: "@cdktf/provider-google.cloudbuildv2Connection.Cloudbuildv2ConnectionInstallationStateList", version: "14.13.1" };
function cloudbuildv2ConnectionBitbucketCloudConfigAuthorizerCredentialToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        user_token_secret_version: cdktf.stringToTerraform(struct.userTokenSecretVersion),
    };
}
exports.cloudbuildv2ConnectionBitbucketCloudConfigAuthorizerCredentialToTerraform = cloudbuildv2ConnectionBitbucketCloudConfigAuthorizerCredentialToTerraform;
function cloudbuildv2ConnectionBitbucketCloudConfigAuthorizerCredentialToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        user_token_secret_version: {
            value: cdktf.stringToHclTerraform(struct.userTokenSecretVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildv2ConnectionBitbucketCloudConfigAuthorizerCredentialToHclTerraform = cloudbuildv2ConnectionBitbucketCloudConfigAuthorizerCredentialToHclTerraform;
class Cloudbuildv2ConnectionBitbucketCloudConfigAuthorizerCredentialOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._userTokenSecretVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.userTokenSecretVersion = this._userTokenSecretVersion;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._userTokenSecretVersion = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._userTokenSecretVersion = value.userTokenSecretVersion;
        }
    }
    get userTokenSecretVersion() {
        return this.getStringAttribute('user_token_secret_version');
    }
    set userTokenSecretVersion(value) {
        this._userTokenSecretVersion = value;
    }
    // Temporarily expose input value. Use with caution.
    get userTokenSecretVersionInput() {
        return this._userTokenSecretVersion;
    }
    // username - computed: true, optional: false, required: false
    get username() {
        return this.getStringAttribute('username');
    }
}
exports.Cloudbuildv2ConnectionBitbucketCloudConfigAuthorizerCredentialOutputReference = Cloudbuildv2ConnectionBitbucketCloudConfigAuthorizerCredentialOutputReference;
_c = JSII_RTTI_SYMBOL_1;
Cloudbuildv2ConnectionBitbucketCloudConfigAuthorizerCredentialOutputReference[_c] = { fqn: "@cdktf/provider-google.cloudbuildv2Connection.Cloudbuildv2ConnectionBitbucketCloudConfigAuthorizerCredentialOutputReference", version: "14.13.1" };
function cloudbuildv2ConnectionBitbucketCloudConfigReadAuthorizerCredentialToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        user_token_secret_version: cdktf.stringToTerraform(struct.userTokenSecretVersion),
    };
}
exports.cloudbuildv2ConnectionBitbucketCloudConfigReadAuthorizerCredentialToTerraform = cloudbuildv2ConnectionBitbucketCloudConfigReadAuthorizerCredentialToTerraform;
function cloudbuildv2ConnectionBitbucketCloudConfigReadAuthorizerCredentialToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        user_token_secret_version: {
            value: cdktf.stringToHclTerraform(struct.userTokenSecretVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildv2ConnectionBitbucketCloudConfigReadAuthorizerCredentialToHclTerraform = cloudbuildv2ConnectionBitbucketCloudConfigReadAuthorizerCredentialToHclTerraform;
class Cloudbuildv2ConnectionBitbucketCloudConfigReadAuthorizerCredentialOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._userTokenSecretVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.userTokenSecretVersion = this._userTokenSecretVersion;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._userTokenSecretVersion = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._userTokenSecretVersion = value.userTokenSecretVersion;
        }
    }
    get userTokenSecretVersion() {
        return this.getStringAttribute('user_token_secret_version');
    }
    set userTokenSecretVersion(value) {
        this._userTokenSecretVersion = value;
    }
    // Temporarily expose input value. Use with caution.
    get userTokenSecretVersionInput() {
        return this._userTokenSecretVersion;
    }
    // username - computed: true, optional: false, required: false
    get username() {
        return this.getStringAttribute('username');
    }
}
exports.Cloudbuildv2ConnectionBitbucketCloudConfigReadAuthorizerCredentialOutputReference = Cloudbuildv2ConnectionBitbucketCloudConfigReadAuthorizerCredentialOutputReference;
_d = JSII_RTTI_SYMBOL_1;
Cloudbuildv2ConnectionBitbucketCloudConfigReadAuthorizerCredentialOutputReference[_d] = { fqn: "@cdktf/provider-google.cloudbuildv2Connection.Cloudbuildv2ConnectionBitbucketCloudConfigReadAuthorizerCredentialOutputReference", version: "14.13.1" };
function cloudbuildv2ConnectionBitbucketCloudConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        webhook_secret_secret_version: cdktf.stringToTerraform(struct.webhookSecretSecretVersion),
        workspace: cdktf.stringToTerraform(struct.workspace),
        authorizer_credential: cloudbuildv2ConnectionBitbucketCloudConfigAuthorizerCredentialToTerraform(struct.authorizerCredential),
        read_authorizer_credential: cloudbuildv2ConnectionBitbucketCloudConfigReadAuthorizerCredentialToTerraform(struct.readAuthorizerCredential),
    };
}
exports.cloudbuildv2ConnectionBitbucketCloudConfigToTerraform = cloudbuildv2ConnectionBitbucketCloudConfigToTerraform;
function cloudbuildv2ConnectionBitbucketCloudConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        webhook_secret_secret_version: {
            value: cdktf.stringToHclTerraform(struct.webhookSecretSecretVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        workspace: {
            value: cdktf.stringToHclTerraform(struct.workspace),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        authorizer_credential: {
            value: cloudbuildv2ConnectionBitbucketCloudConfigAuthorizerCredentialToHclTerraform(struct.authorizerCredential),
            isBlock: true,
            type: "list",
            storageClassType: "Cloudbuildv2ConnectionBitbucketCloudConfigAuthorizerCredentialList",
        },
        read_authorizer_credential: {
            value: cloudbuildv2ConnectionBitbucketCloudConfigReadAuthorizerCredentialToHclTerraform(struct.readAuthorizerCredential),
            isBlock: true,
            type: "list",
            storageClassType: "Cloudbuildv2ConnectionBitbucketCloudConfigReadAuthorizerCredentialList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildv2ConnectionBitbucketCloudConfigToHclTerraform = cloudbuildv2ConnectionBitbucketCloudConfigToHclTerraform;
class Cloudbuildv2ConnectionBitbucketCloudConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // authorizer_credential - computed: false, optional: false, required: true
        this._authorizerCredential = new Cloudbuildv2ConnectionBitbucketCloudConfigAuthorizerCredentialOutputReference(this, "authorizer_credential");
        // read_authorizer_credential - computed: false, optional: false, required: true
        this._readAuthorizerCredential = new Cloudbuildv2ConnectionBitbucketCloudConfigReadAuthorizerCredentialOutputReference(this, "read_authorizer_credential");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._webhookSecretSecretVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.webhookSecretSecretVersion = this._webhookSecretSecretVersion;
        }
        if (this._workspace !== undefined) {
            hasAnyValues = true;
            internalValueResult.workspace = this._workspace;
        }
        if (this._authorizerCredential?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.authorizerCredential = this._authorizerCredential?.internalValue;
        }
        if (this._readAuthorizerCredential?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.readAuthorizerCredential = this._readAuthorizerCredential?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._webhookSecretSecretVersion = undefined;
            this._workspace = undefined;
            this._authorizerCredential.internalValue = undefined;
            this._readAuthorizerCredential.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._webhookSecretSecretVersion = value.webhookSecretSecretVersion;
            this._workspace = value.workspace;
            this._authorizerCredential.internalValue = value.authorizerCredential;
            this._readAuthorizerCredential.internalValue = value.readAuthorizerCredential;
        }
    }
    get webhookSecretSecretVersion() {
        return this.getStringAttribute('webhook_secret_secret_version');
    }
    set webhookSecretSecretVersion(value) {
        this._webhookSecretSecretVersion = value;
    }
    // Temporarily expose input value. Use with caution.
    get webhookSecretSecretVersionInput() {
        return this._webhookSecretSecretVersion;
    }
    get workspace() {
        return this.getStringAttribute('workspace');
    }
    set workspace(value) {
        this._workspace = value;
    }
    // Temporarily expose input value. Use with caution.
    get workspaceInput() {
        return this._workspace;
    }
    get authorizerCredential() {
        return this._authorizerCredential;
    }
    putAuthorizerCredential(value) {
        this._authorizerCredential.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get authorizerCredentialInput() {
        return this._authorizerCredential.internalValue;
    }
    get readAuthorizerCredential() {
        return this._readAuthorizerCredential;
    }
    putReadAuthorizerCredential(value) {
        this._readAuthorizerCredential.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get readAuthorizerCredentialInput() {
        return this._readAuthorizerCredential.internalValue;
    }
}
exports.Cloudbuildv2ConnectionBitbucketCloudConfigOutputReference = Cloudbuildv2ConnectionBitbucketCloudConfigOutputReference;
_e = JSII_RTTI_SYMBOL_1;
Cloudbuildv2ConnectionBitbucketCloudConfigOutputReference[_e] = { fqn: "@cdktf/provider-google.cloudbuildv2Connection.Cloudbuildv2ConnectionBitbucketCloudConfigOutputReference", version: "14.13.1" };
function cloudbuildv2ConnectionBitbucketDataCenterConfigAuthorizerCredentialToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        user_token_secret_version: cdktf.stringToTerraform(struct.userTokenSecretVersion),
    };
}
exports.cloudbuildv2ConnectionBitbucketDataCenterConfigAuthorizerCredentialToTerraform = cloudbuildv2ConnectionBitbucketDataCenterConfigAuthorizerCredentialToTerraform;
function cloudbuildv2ConnectionBitbucketDataCenterConfigAuthorizerCredentialToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        user_token_secret_version: {
            value: cdktf.stringToHclTerraform(struct.userTokenSecretVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildv2ConnectionBitbucketDataCenterConfigAuthorizerCredentialToHclTerraform = cloudbuildv2ConnectionBitbucketDataCenterConfigAuthorizerCredentialToHclTerraform;
class Cloudbuildv2ConnectionBitbucketDataCenterConfigAuthorizerCredentialOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._userTokenSecretVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.userTokenSecretVersion = this._userTokenSecretVersion;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._userTokenSecretVersion = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._userTokenSecretVersion = value.userTokenSecretVersion;
        }
    }
    get userTokenSecretVersion() {
        return this.getStringAttribute('user_token_secret_version');
    }
    set userTokenSecretVersion(value) {
        this._userTokenSecretVersion = value;
    }
    // Temporarily expose input value. Use with caution.
    get userTokenSecretVersionInput() {
        return this._userTokenSecretVersion;
    }
    // username - computed: true, optional: false, required: false
    get username() {
        return this.getStringAttribute('username');
    }
}
exports.Cloudbuildv2ConnectionBitbucketDataCenterConfigAuthorizerCredentialOutputReference = Cloudbuildv2ConnectionBitbucketDataCenterConfigAuthorizerCredentialOutputReference;
_f = JSII_RTTI_SYMBOL_1;
Cloudbuildv2ConnectionBitbucketDataCenterConfigAuthorizerCredentialOutputReference[_f] = { fqn: "@cdktf/provider-google.cloudbuildv2Connection.Cloudbuildv2ConnectionBitbucketDataCenterConfigAuthorizerCredentialOutputReference", version: "14.13.1" };
function cloudbuildv2ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        user_token_secret_version: cdktf.stringToTerraform(struct.userTokenSecretVersion),
    };
}
exports.cloudbuildv2ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialToTerraform = cloudbuildv2ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialToTerraform;
function cloudbuildv2ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        user_token_secret_version: {
            value: cdktf.stringToHclTerraform(struct.userTokenSecretVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildv2ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialToHclTerraform = cloudbuildv2ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialToHclTerraform;
class Cloudbuildv2ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._userTokenSecretVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.userTokenSecretVersion = this._userTokenSecretVersion;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._userTokenSecretVersion = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._userTokenSecretVersion = value.userTokenSecretVersion;
        }
    }
    get userTokenSecretVersion() {
        return this.getStringAttribute('user_token_secret_version');
    }
    set userTokenSecretVersion(value) {
        this._userTokenSecretVersion = value;
    }
    // Temporarily expose input value. Use with caution.
    get userTokenSecretVersionInput() {
        return this._userTokenSecretVersion;
    }
    // username - computed: true, optional: false, required: false
    get username() {
        return this.getStringAttribute('username');
    }
}
exports.Cloudbuildv2ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialOutputReference = Cloudbuildv2ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialOutputReference;
_g = JSII_RTTI_SYMBOL_1;
Cloudbuildv2ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialOutputReference[_g] = { fqn: "@cdktf/provider-google.cloudbuildv2Connection.Cloudbuildv2ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialOutputReference", version: "14.13.1" };
function cloudbuildv2ConnectionBitbucketDataCenterConfigServiceDirectoryConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        service: cdktf.stringToTerraform(struct.service),
    };
}
exports.cloudbuildv2ConnectionBitbucketDataCenterConfigServiceDirectoryConfigToTerraform = cloudbuildv2ConnectionBitbucketDataCenterConfigServiceDirectoryConfigToTerraform;
function cloudbuildv2ConnectionBitbucketDataCenterConfigServiceDirectoryConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        service: {
            value: cdktf.stringToHclTerraform(struct.service),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildv2ConnectionBitbucketDataCenterConfigServiceDirectoryConfigToHclTerraform = cloudbuildv2ConnectionBitbucketDataCenterConfigServiceDirectoryConfigToHclTerraform;
class Cloudbuildv2ConnectionBitbucketDataCenterConfigServiceDirectoryConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._service !== undefined) {
            hasAnyValues = true;
            internalValueResult.service = this._service;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._service = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._service = value.service;
        }
    }
    get service() {
        return this.getStringAttribute('service');
    }
    set service(value) {
        this._service = value;
    }
    // Temporarily expose input value. Use with caution.
    get serviceInput() {
        return this._service;
    }
}
exports.Cloudbuildv2ConnectionBitbucketDataCenterConfigServiceDirectoryConfigOutputReference = Cloudbuildv2ConnectionBitbucketDataCenterConfigServiceDirectoryConfigOutputReference;
_h = JSII_RTTI_SYMBOL_1;
Cloudbuildv2ConnectionBitbucketDataCenterConfigServiceDirectoryConfigOutputReference[_h] = { fqn: "@cdktf/provider-google.cloudbuildv2Connection.Cloudbuildv2ConnectionBitbucketDataCenterConfigServiceDirectoryConfigOutputReference", version: "14.13.1" };
function cloudbuildv2ConnectionBitbucketDataCenterConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        host_uri: cdktf.stringToTerraform(struct.hostUri),
        ssl_ca: cdktf.stringToTerraform(struct.sslCa),
        webhook_secret_secret_version: cdktf.stringToTerraform(struct.webhookSecretSecretVersion),
        authorizer_credential: cloudbuildv2ConnectionBitbucketDataCenterConfigAuthorizerCredentialToTerraform(struct.authorizerCredential),
        read_authorizer_credential: cloudbuildv2ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialToTerraform(struct.readAuthorizerCredential),
        service_directory_config: cloudbuildv2ConnectionBitbucketDataCenterConfigServiceDirectoryConfigToTerraform(struct.serviceDirectoryConfig),
    };
}
exports.cloudbuildv2ConnectionBitbucketDataCenterConfigToTerraform = cloudbuildv2ConnectionBitbucketDataCenterConfigToTerraform;
function cloudbuildv2ConnectionBitbucketDataCenterConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        host_uri: {
            value: cdktf.stringToHclTerraform(struct.hostUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        ssl_ca: {
            value: cdktf.stringToHclTerraform(struct.sslCa),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        webhook_secret_secret_version: {
            value: cdktf.stringToHclTerraform(struct.webhookSecretSecretVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        authorizer_credential: {
            value: cloudbuildv2ConnectionBitbucketDataCenterConfigAuthorizerCredentialToHclTerraform(struct.authorizerCredential),
            isBlock: true,
            type: "list",
            storageClassType: "Cloudbuildv2ConnectionBitbucketDataCenterConfigAuthorizerCredentialList",
        },
        read_authorizer_credential: {
            value: cloudbuildv2ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialToHclTerraform(struct.readAuthorizerCredential),
            isBlock: true,
            type: "list",
            storageClassType: "Cloudbuildv2ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialList",
        },
        service_directory_config: {
            value: cloudbuildv2ConnectionBitbucketDataCenterConfigServiceDirectoryConfigToHclTerraform(struct.serviceDirectoryConfig),
            isBlock: true,
            type: "list",
            storageClassType: "Cloudbuildv2ConnectionBitbucketDataCenterConfigServiceDirectoryConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildv2ConnectionBitbucketDataCenterConfigToHclTerraform = cloudbuildv2ConnectionBitbucketDataCenterConfigToHclTerraform;
class Cloudbuildv2ConnectionBitbucketDataCenterConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // authorizer_credential - computed: false, optional: false, required: true
        this._authorizerCredential = new Cloudbuildv2ConnectionBitbucketDataCenterConfigAuthorizerCredentialOutputReference(this, "authorizer_credential");
        // read_authorizer_credential - computed: false, optional: false, required: true
        this._readAuthorizerCredential = new Cloudbuildv2ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialOutputReference(this, "read_authorizer_credential");
        // service_directory_config - computed: false, optional: true, required: false
        this._serviceDirectoryConfig = new Cloudbuildv2ConnectionBitbucketDataCenterConfigServiceDirectoryConfigOutputReference(this, "service_directory_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hostUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.hostUri = this._hostUri;
        }
        if (this._sslCa !== undefined) {
            hasAnyValues = true;
            internalValueResult.sslCa = this._sslCa;
        }
        if (this._webhookSecretSecretVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.webhookSecretSecretVersion = this._webhookSecretSecretVersion;
        }
        if (this._authorizerCredential?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.authorizerCredential = this._authorizerCredential?.internalValue;
        }
        if (this._readAuthorizerCredential?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.readAuthorizerCredential = this._readAuthorizerCredential?.internalValue;
        }
        if (this._serviceDirectoryConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceDirectoryConfig = this._serviceDirectoryConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hostUri = undefined;
            this._sslCa = undefined;
            this._webhookSecretSecretVersion = undefined;
            this._authorizerCredential.internalValue = undefined;
            this._readAuthorizerCredential.internalValue = undefined;
            this._serviceDirectoryConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hostUri = value.hostUri;
            this._sslCa = value.sslCa;
            this._webhookSecretSecretVersion = value.webhookSecretSecretVersion;
            this._authorizerCredential.internalValue = value.authorizerCredential;
            this._readAuthorizerCredential.internalValue = value.readAuthorizerCredential;
            this._serviceDirectoryConfig.internalValue = value.serviceDirectoryConfig;
        }
    }
    get hostUri() {
        return this.getStringAttribute('host_uri');
    }
    set hostUri(value) {
        this._hostUri = value;
    }
    // Temporarily expose input value. Use with caution.
    get hostUriInput() {
        return this._hostUri;
    }
    // server_version - computed: true, optional: false, required: false
    get serverVersion() {
        return this.getStringAttribute('server_version');
    }
    get sslCa() {
        return this.getStringAttribute('ssl_ca');
    }
    set sslCa(value) {
        this._sslCa = value;
    }
    resetSslCa() {
        this._sslCa = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sslCaInput() {
        return this._sslCa;
    }
    get webhookSecretSecretVersion() {
        return this.getStringAttribute('webhook_secret_secret_version');
    }
    set webhookSecretSecretVersion(value) {
        this._webhookSecretSecretVersion = value;
    }
    // Temporarily expose input value. Use with caution.
    get webhookSecretSecretVersionInput() {
        return this._webhookSecretSecretVersion;
    }
    get authorizerCredential() {
        return this._authorizerCredential;
    }
    putAuthorizerCredential(value) {
        this._authorizerCredential.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get authorizerCredentialInput() {
        return this._authorizerCredential.internalValue;
    }
    get readAuthorizerCredential() {
        return this._readAuthorizerCredential;
    }
    putReadAuthorizerCredential(value) {
        this._readAuthorizerCredential.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get readAuthorizerCredentialInput() {
        return this._readAuthorizerCredential.internalValue;
    }
    get serviceDirectoryConfig() {
        return this._serviceDirectoryConfig;
    }
    putServiceDirectoryConfig(value) {
        this._serviceDirectoryConfig.internalValue = value;
    }
    resetServiceDirectoryConfig() {
        this._serviceDirectoryConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceDirectoryConfigInput() {
        return this._serviceDirectoryConfig.internalValue;
    }
}
exports.Cloudbuildv2ConnectionBitbucketDataCenterConfigOutputReference = Cloudbuildv2ConnectionBitbucketDataCenterConfigOutputReference;
_j = JSII_RTTI_SYMBOL_1;
Cloudbuildv2ConnectionBitbucketDataCenterConfigOutputReference[_j] = { fqn: "@cdktf/provider-google.cloudbuildv2Connection.Cloudbuildv2ConnectionBitbucketDataCenterConfigOutputReference", version: "14.13.1" };
function cloudbuildv2ConnectionGithubConfigAuthorizerCredentialToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        oauth_token_secret_version: cdktf.stringToTerraform(struct.oauthTokenSecretVersion),
    };
}
exports.cloudbuildv2ConnectionGithubConfigAuthorizerCredentialToTerraform = cloudbuildv2ConnectionGithubConfigAuthorizerCredentialToTerraform;
function cloudbuildv2ConnectionGithubConfigAuthorizerCredentialToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        oauth_token_secret_version: {
            value: cdktf.stringToHclTerraform(struct.oauthTokenSecretVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildv2ConnectionGithubConfigAuthorizerCredentialToHclTerraform = cloudbuildv2ConnectionGithubConfigAuthorizerCredentialToHclTerraform;
class Cloudbuildv2ConnectionGithubConfigAuthorizerCredentialOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._oauthTokenSecretVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.oauthTokenSecretVersion = this._oauthTokenSecretVersion;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._oauthTokenSecretVersion = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._oauthTokenSecretVersion = value.oauthTokenSecretVersion;
        }
    }
    get oauthTokenSecretVersion() {
        return this.getStringAttribute('oauth_token_secret_version');
    }
    set oauthTokenSecretVersion(value) {
        this._oauthTokenSecretVersion = value;
    }
    resetOauthTokenSecretVersion() {
        this._oauthTokenSecretVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get oauthTokenSecretVersionInput() {
        return this._oauthTokenSecretVersion;
    }
    // username - computed: true, optional: false, required: false
    get username() {
        return this.getStringAttribute('username');
    }
}
exports.Cloudbuildv2ConnectionGithubConfigAuthorizerCredentialOutputReference = Cloudbuildv2ConnectionGithubConfigAuthorizerCredentialOutputReference;
_k = JSII_RTTI_SYMBOL_1;
Cloudbuildv2ConnectionGithubConfigAuthorizerCredentialOutputReference[_k] = { fqn: "@cdktf/provider-google.cloudbuildv2Connection.Cloudbuildv2ConnectionGithubConfigAuthorizerCredentialOutputReference", version: "14.13.1" };
function cloudbuildv2ConnectionGithubConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        app_installation_id: cdktf.numberToTerraform(struct.appInstallationId),
        authorizer_credential: cloudbuildv2ConnectionGithubConfigAuthorizerCredentialToTerraform(struct.authorizerCredential),
    };
}
exports.cloudbuildv2ConnectionGithubConfigToTerraform = cloudbuildv2ConnectionGithubConfigToTerraform;
function cloudbuildv2ConnectionGithubConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        app_installation_id: {
            value: cdktf.numberToHclTerraform(struct.appInstallationId),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        authorizer_credential: {
            value: cloudbuildv2ConnectionGithubConfigAuthorizerCredentialToHclTerraform(struct.authorizerCredential),
            isBlock: true,
            type: "list",
            storageClassType: "Cloudbuildv2ConnectionGithubConfigAuthorizerCredentialList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildv2ConnectionGithubConfigToHclTerraform = cloudbuildv2ConnectionGithubConfigToHclTerraform;
class Cloudbuildv2ConnectionGithubConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // authorizer_credential - computed: false, optional: true, required: false
        this._authorizerCredential = new Cloudbuildv2ConnectionGithubConfigAuthorizerCredentialOutputReference(this, "authorizer_credential");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._appInstallationId !== undefined) {
            hasAnyValues = true;
            internalValueResult.appInstallationId = this._appInstallationId;
        }
        if (this._authorizerCredential?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.authorizerCredential = this._authorizerCredential?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._appInstallationId = undefined;
            this._authorizerCredential.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._appInstallationId = value.appInstallationId;
            this._authorizerCredential.internalValue = value.authorizerCredential;
        }
    }
    get appInstallationId() {
        return this.getNumberAttribute('app_installation_id');
    }
    set appInstallationId(value) {
        this._appInstallationId = value;
    }
    resetAppInstallationId() {
        this._appInstallationId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get appInstallationIdInput() {
        return this._appInstallationId;
    }
    get authorizerCredential() {
        return this._authorizerCredential;
    }
    putAuthorizerCredential(value) {
        this._authorizerCredential.internalValue = value;
    }
    resetAuthorizerCredential() {
        this._authorizerCredential.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get authorizerCredentialInput() {
        return this._authorizerCredential.internalValue;
    }
}
exports.Cloudbuildv2ConnectionGithubConfigOutputReference = Cloudbuildv2ConnectionGithubConfigOutputReference;
_l = JSII_RTTI_SYMBOL_1;
Cloudbuildv2ConnectionGithubConfigOutputReference[_l] = { fqn: "@cdktf/provider-google.cloudbuildv2Connection.Cloudbuildv2ConnectionGithubConfigOutputReference", version: "14.13.1" };
function cloudbuildv2ConnectionGithubEnterpriseConfigServiceDirectoryConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        service: cdktf.stringToTerraform(struct.service),
    };
}
exports.cloudbuildv2ConnectionGithubEnterpriseConfigServiceDirectoryConfigToTerraform = cloudbuildv2ConnectionGithubEnterpriseConfigServiceDirectoryConfigToTerraform;
function cloudbuildv2ConnectionGithubEnterpriseConfigServiceDirectoryConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        service: {
            value: cdktf.stringToHclTerraform(struct.service),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildv2ConnectionGithubEnterpriseConfigServiceDirectoryConfigToHclTerraform = cloudbuildv2ConnectionGithubEnterpriseConfigServiceDirectoryConfigToHclTerraform;
class Cloudbuildv2ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._service !== undefined) {
            hasAnyValues = true;
            internalValueResult.service = this._service;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._service = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._service = value.service;
        }
    }
    get service() {
        return this.getStringAttribute('service');
    }
    set service(value) {
        this._service = value;
    }
    // Temporarily expose input value. Use with caution.
    get serviceInput() {
        return this._service;
    }
}
exports.Cloudbuildv2ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutputReference = Cloudbuildv2ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutputReference;
_m = JSII_RTTI_SYMBOL_1;
Cloudbuildv2ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutputReference[_m] = { fqn: "@cdktf/provider-google.cloudbuildv2Connection.Cloudbuildv2ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutputReference", version: "14.13.1" };
function cloudbuildv2ConnectionGithubEnterpriseConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        app_id: cdktf.numberToTerraform(struct.appId),
        app_installation_id: cdktf.numberToTerraform(struct.appInstallationId),
        app_slug: cdktf.stringToTerraform(struct.appSlug),
        host_uri: cdktf.stringToTerraform(struct.hostUri),
        private_key_secret_version: cdktf.stringToTerraform(struct.privateKeySecretVersion),
        ssl_ca: cdktf.stringToTerraform(struct.sslCa),
        webhook_secret_secret_version: cdktf.stringToTerraform(struct.webhookSecretSecretVersion),
        service_directory_config: cloudbuildv2ConnectionGithubEnterpriseConfigServiceDirectoryConfigToTerraform(struct.serviceDirectoryConfig),
    };
}
exports.cloudbuildv2ConnectionGithubEnterpriseConfigToTerraform = cloudbuildv2ConnectionGithubEnterpriseConfigToTerraform;
function cloudbuildv2ConnectionGithubEnterpriseConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        app_id: {
            value: cdktf.numberToHclTerraform(struct.appId),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        app_installation_id: {
            value: cdktf.numberToHclTerraform(struct.appInstallationId),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        app_slug: {
            value: cdktf.stringToHclTerraform(struct.appSlug),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        host_uri: {
            value: cdktf.stringToHclTerraform(struct.hostUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        private_key_secret_version: {
            value: cdktf.stringToHclTerraform(struct.privateKeySecretVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        ssl_ca: {
            value: cdktf.stringToHclTerraform(struct.sslCa),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        webhook_secret_secret_version: {
            value: cdktf.stringToHclTerraform(struct.webhookSecretSecretVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        service_directory_config: {
            value: cloudbuildv2ConnectionGithubEnterpriseConfigServiceDirectoryConfigToHclTerraform(struct.serviceDirectoryConfig),
            isBlock: true,
            type: "list",
            storageClassType: "Cloudbuildv2ConnectionGithubEnterpriseConfigServiceDirectoryConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildv2ConnectionGithubEnterpriseConfigToHclTerraform = cloudbuildv2ConnectionGithubEnterpriseConfigToHclTerraform;
class Cloudbuildv2ConnectionGithubEnterpriseConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // service_directory_config - computed: false, optional: true, required: false
        this._serviceDirectoryConfig = new Cloudbuildv2ConnectionGithubEnterpriseConfigServiceDirectoryConfigOutputReference(this, "service_directory_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._appId !== undefined) {
            hasAnyValues = true;
            internalValueResult.appId = this._appId;
        }
        if (this._appInstallationId !== undefined) {
            hasAnyValues = true;
            internalValueResult.appInstallationId = this._appInstallationId;
        }
        if (this._appSlug !== undefined) {
            hasAnyValues = true;
            internalValueResult.appSlug = this._appSlug;
        }
        if (this._hostUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.hostUri = this._hostUri;
        }
        if (this._privateKeySecretVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.privateKeySecretVersion = this._privateKeySecretVersion;
        }
        if (this._sslCa !== undefined) {
            hasAnyValues = true;
            internalValueResult.sslCa = this._sslCa;
        }
        if (this._webhookSecretSecretVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.webhookSecretSecretVersion = this._webhookSecretSecretVersion;
        }
        if (this._serviceDirectoryConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceDirectoryConfig = this._serviceDirectoryConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._appId = undefined;
            this._appInstallationId = undefined;
            this._appSlug = undefined;
            this._hostUri = undefined;
            this._privateKeySecretVersion = undefined;
            this._sslCa = undefined;
            this._webhookSecretSecretVersion = undefined;
            this._serviceDirectoryConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._appId = value.appId;
            this._appInstallationId = value.appInstallationId;
            this._appSlug = value.appSlug;
            this._hostUri = value.hostUri;
            this._privateKeySecretVersion = value.privateKeySecretVersion;
            this._sslCa = value.sslCa;
            this._webhookSecretSecretVersion = value.webhookSecretSecretVersion;
            this._serviceDirectoryConfig.internalValue = value.serviceDirectoryConfig;
        }
    }
    get appId() {
        return this.getNumberAttribute('app_id');
    }
    set appId(value) {
        this._appId = value;
    }
    resetAppId() {
        this._appId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get appIdInput() {
        return this._appId;
    }
    get appInstallationId() {
        return this.getNumberAttribute('app_installation_id');
    }
    set appInstallationId(value) {
        this._appInstallationId = value;
    }
    resetAppInstallationId() {
        this._appInstallationId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get appInstallationIdInput() {
        return this._appInstallationId;
    }
    get appSlug() {
        return this.getStringAttribute('app_slug');
    }
    set appSlug(value) {
        this._appSlug = value;
    }
    resetAppSlug() {
        this._appSlug = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get appSlugInput() {
        return this._appSlug;
    }
    get hostUri() {
        return this.getStringAttribute('host_uri');
    }
    set hostUri(value) {
        this._hostUri = value;
    }
    // Temporarily expose input value. Use with caution.
    get hostUriInput() {
        return this._hostUri;
    }
    get privateKeySecretVersion() {
        return this.getStringAttribute('private_key_secret_version');
    }
    set privateKeySecretVersion(value) {
        this._privateKeySecretVersion = value;
    }
    resetPrivateKeySecretVersion() {
        this._privateKeySecretVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get privateKeySecretVersionInput() {
        return this._privateKeySecretVersion;
    }
    get sslCa() {
        return this.getStringAttribute('ssl_ca');
    }
    set sslCa(value) {
        this._sslCa = value;
    }
    resetSslCa() {
        this._sslCa = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sslCaInput() {
        return this._sslCa;
    }
    get webhookSecretSecretVersion() {
        return this.getStringAttribute('webhook_secret_secret_version');
    }
    set webhookSecretSecretVersion(value) {
        this._webhookSecretSecretVersion = value;
    }
    resetWebhookSecretSecretVersion() {
        this._webhookSecretSecretVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get webhookSecretSecretVersionInput() {
        return this._webhookSecretSecretVersion;
    }
    get serviceDirectoryConfig() {
        return this._serviceDirectoryConfig;
    }
    putServiceDirectoryConfig(value) {
        this._serviceDirectoryConfig.internalValue = value;
    }
    resetServiceDirectoryConfig() {
        this._serviceDirectoryConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceDirectoryConfigInput() {
        return this._serviceDirectoryConfig.internalValue;
    }
}
exports.Cloudbuildv2ConnectionGithubEnterpriseConfigOutputReference = Cloudbuildv2ConnectionGithubEnterpriseConfigOutputReference;
_o = JSII_RTTI_SYMBOL_1;
Cloudbuildv2ConnectionGithubEnterpriseConfigOutputReference[_o] = { fqn: "@cdktf/provider-google.cloudbuildv2Connection.Cloudbuildv2ConnectionGithubEnterpriseConfigOutputReference", version: "14.13.1" };
function cloudbuildv2ConnectionGitlabConfigAuthorizerCredentialToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        user_token_secret_version: cdktf.stringToTerraform(struct.userTokenSecretVersion),
    };
}
exports.cloudbuildv2ConnectionGitlabConfigAuthorizerCredentialToTerraform = cloudbuildv2ConnectionGitlabConfigAuthorizerCredentialToTerraform;
function cloudbuildv2ConnectionGitlabConfigAuthorizerCredentialToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        user_token_secret_version: {
            value: cdktf.stringToHclTerraform(struct.userTokenSecretVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildv2ConnectionGitlabConfigAuthorizerCredentialToHclTerraform = cloudbuildv2ConnectionGitlabConfigAuthorizerCredentialToHclTerraform;
class Cloudbuildv2ConnectionGitlabConfigAuthorizerCredentialOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._userTokenSecretVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.userTokenSecretVersion = this._userTokenSecretVersion;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._userTokenSecretVersion = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._userTokenSecretVersion = value.userTokenSecretVersion;
        }
    }
    get userTokenSecretVersion() {
        return this.getStringAttribute('user_token_secret_version');
    }
    set userTokenSecretVersion(value) {
        this._userTokenSecretVersion = value;
    }
    // Temporarily expose input value. Use with caution.
    get userTokenSecretVersionInput() {
        return this._userTokenSecretVersion;
    }
    // username - computed: true, optional: false, required: false
    get username() {
        return this.getStringAttribute('username');
    }
}
exports.Cloudbuildv2ConnectionGitlabConfigAuthorizerCredentialOutputReference = Cloudbuildv2ConnectionGitlabConfigAuthorizerCredentialOutputReference;
_p = JSII_RTTI_SYMBOL_1;
Cloudbuildv2ConnectionGitlabConfigAuthorizerCredentialOutputReference[_p] = { fqn: "@cdktf/provider-google.cloudbuildv2Connection.Cloudbuildv2ConnectionGitlabConfigAuthorizerCredentialOutputReference", version: "14.13.1" };
function cloudbuildv2ConnectionGitlabConfigReadAuthorizerCredentialToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        user_token_secret_version: cdktf.stringToTerraform(struct.userTokenSecretVersion),
    };
}
exports.cloudbuildv2ConnectionGitlabConfigReadAuthorizerCredentialToTerraform = cloudbuildv2ConnectionGitlabConfigReadAuthorizerCredentialToTerraform;
function cloudbuildv2ConnectionGitlabConfigReadAuthorizerCredentialToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        user_token_secret_version: {
            value: cdktf.stringToHclTerraform(struct.userTokenSecretVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildv2ConnectionGitlabConfigReadAuthorizerCredentialToHclTerraform = cloudbuildv2ConnectionGitlabConfigReadAuthorizerCredentialToHclTerraform;
class Cloudbuildv2ConnectionGitlabConfigReadAuthorizerCredentialOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._userTokenSecretVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.userTokenSecretVersion = this._userTokenSecretVersion;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._userTokenSecretVersion = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._userTokenSecretVersion = value.userTokenSecretVersion;
        }
    }
    get userTokenSecretVersion() {
        return this.getStringAttribute('user_token_secret_version');
    }
    set userTokenSecretVersion(value) {
        this._userTokenSecretVersion = value;
    }
    // Temporarily expose input value. Use with caution.
    get userTokenSecretVersionInput() {
        return this._userTokenSecretVersion;
    }
    // username - computed: true, optional: false, required: false
    get username() {
        return this.getStringAttribute('username');
    }
}
exports.Cloudbuildv2ConnectionGitlabConfigReadAuthorizerCredentialOutputReference = Cloudbuildv2ConnectionGitlabConfigReadAuthorizerCredentialOutputReference;
_q = JSII_RTTI_SYMBOL_1;
Cloudbuildv2ConnectionGitlabConfigReadAuthorizerCredentialOutputReference[_q] = { fqn: "@cdktf/provider-google.cloudbuildv2Connection.Cloudbuildv2ConnectionGitlabConfigReadAuthorizerCredentialOutputReference", version: "14.13.1" };
function cloudbuildv2ConnectionGitlabConfigServiceDirectoryConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        service: cdktf.stringToTerraform(struct.service),
    };
}
exports.cloudbuildv2ConnectionGitlabConfigServiceDirectoryConfigToTerraform = cloudbuildv2ConnectionGitlabConfigServiceDirectoryConfigToTerraform;
function cloudbuildv2ConnectionGitlabConfigServiceDirectoryConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        service: {
            value: cdktf.stringToHclTerraform(struct.service),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildv2ConnectionGitlabConfigServiceDirectoryConfigToHclTerraform = cloudbuildv2ConnectionGitlabConfigServiceDirectoryConfigToHclTerraform;
class Cloudbuildv2ConnectionGitlabConfigServiceDirectoryConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._service !== undefined) {
            hasAnyValues = true;
            internalValueResult.service = this._service;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._service = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._service = value.service;
        }
    }
    get service() {
        return this.getStringAttribute('service');
    }
    set service(value) {
        this._service = value;
    }
    // Temporarily expose input value. Use with caution.
    get serviceInput() {
        return this._service;
    }
}
exports.Cloudbuildv2ConnectionGitlabConfigServiceDirectoryConfigOutputReference = Cloudbuildv2ConnectionGitlabConfigServiceDirectoryConfigOutputReference;
_r = JSII_RTTI_SYMBOL_1;
Cloudbuildv2ConnectionGitlabConfigServiceDirectoryConfigOutputReference[_r] = { fqn: "@cdktf/provider-google.cloudbuildv2Connection.Cloudbuildv2ConnectionGitlabConfigServiceDirectoryConfigOutputReference", version: "14.13.1" };
function cloudbuildv2ConnectionGitlabConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        host_uri: cdktf.stringToTerraform(struct.hostUri),
        ssl_ca: cdktf.stringToTerraform(struct.sslCa),
        webhook_secret_secret_version: cdktf.stringToTerraform(struct.webhookSecretSecretVersion),
        authorizer_credential: cloudbuildv2ConnectionGitlabConfigAuthorizerCredentialToTerraform(struct.authorizerCredential),
        read_authorizer_credential: cloudbuildv2ConnectionGitlabConfigReadAuthorizerCredentialToTerraform(struct.readAuthorizerCredential),
        service_directory_config: cloudbuildv2ConnectionGitlabConfigServiceDirectoryConfigToTerraform(struct.serviceDirectoryConfig),
    };
}
exports.cloudbuildv2ConnectionGitlabConfigToTerraform = cloudbuildv2ConnectionGitlabConfigToTerraform;
function cloudbuildv2ConnectionGitlabConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        host_uri: {
            value: cdktf.stringToHclTerraform(struct.hostUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        ssl_ca: {
            value: cdktf.stringToHclTerraform(struct.sslCa),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        webhook_secret_secret_version: {
            value: cdktf.stringToHclTerraform(struct.webhookSecretSecretVersion),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        authorizer_credential: {
            value: cloudbuildv2ConnectionGitlabConfigAuthorizerCredentialToHclTerraform(struct.authorizerCredential),
            isBlock: true,
            type: "list",
            storageClassType: "Cloudbuildv2ConnectionGitlabConfigAuthorizerCredentialList",
        },
        read_authorizer_credential: {
            value: cloudbuildv2ConnectionGitlabConfigReadAuthorizerCredentialToHclTerraform(struct.readAuthorizerCredential),
            isBlock: true,
            type: "list",
            storageClassType: "Cloudbuildv2ConnectionGitlabConfigReadAuthorizerCredentialList",
        },
        service_directory_config: {
            value: cloudbuildv2ConnectionGitlabConfigServiceDirectoryConfigToHclTerraform(struct.serviceDirectoryConfig),
            isBlock: true,
            type: "list",
            storageClassType: "Cloudbuildv2ConnectionGitlabConfigServiceDirectoryConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildv2ConnectionGitlabConfigToHclTerraform = cloudbuildv2ConnectionGitlabConfigToHclTerraform;
class Cloudbuildv2ConnectionGitlabConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // authorizer_credential - computed: false, optional: false, required: true
        this._authorizerCredential = new Cloudbuildv2ConnectionGitlabConfigAuthorizerCredentialOutputReference(this, "authorizer_credential");
        // read_authorizer_credential - computed: false, optional: false, required: true
        this._readAuthorizerCredential = new Cloudbuildv2ConnectionGitlabConfigReadAuthorizerCredentialOutputReference(this, "read_authorizer_credential");
        // service_directory_config - computed: false, optional: true, required: false
        this._serviceDirectoryConfig = new Cloudbuildv2ConnectionGitlabConfigServiceDirectoryConfigOutputReference(this, "service_directory_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hostUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.hostUri = this._hostUri;
        }
        if (this._sslCa !== undefined) {
            hasAnyValues = true;
            internalValueResult.sslCa = this._sslCa;
        }
        if (this._webhookSecretSecretVersion !== undefined) {
            hasAnyValues = true;
            internalValueResult.webhookSecretSecretVersion = this._webhookSecretSecretVersion;
        }
        if (this._authorizerCredential?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.authorizerCredential = this._authorizerCredential?.internalValue;
        }
        if (this._readAuthorizerCredential?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.readAuthorizerCredential = this._readAuthorizerCredential?.internalValue;
        }
        if (this._serviceDirectoryConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceDirectoryConfig = this._serviceDirectoryConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hostUri = undefined;
            this._sslCa = undefined;
            this._webhookSecretSecretVersion = undefined;
            this._authorizerCredential.internalValue = undefined;
            this._readAuthorizerCredential.internalValue = undefined;
            this._serviceDirectoryConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hostUri = value.hostUri;
            this._sslCa = value.sslCa;
            this._webhookSecretSecretVersion = value.webhookSecretSecretVersion;
            this._authorizerCredential.internalValue = value.authorizerCredential;
            this._readAuthorizerCredential.internalValue = value.readAuthorizerCredential;
            this._serviceDirectoryConfig.internalValue = value.serviceDirectoryConfig;
        }
    }
    get hostUri() {
        return this.getStringAttribute('host_uri');
    }
    set hostUri(value) {
        this._hostUri = value;
    }
    resetHostUri() {
        this._hostUri = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostUriInput() {
        return this._hostUri;
    }
    // server_version - computed: true, optional: false, required: false
    get serverVersion() {
        return this.getStringAttribute('server_version');
    }
    get sslCa() {
        return this.getStringAttribute('ssl_ca');
    }
    set sslCa(value) {
        this._sslCa = value;
    }
    resetSslCa() {
        this._sslCa = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sslCaInput() {
        return this._sslCa;
    }
    get webhookSecretSecretVersion() {
        return this.getStringAttribute('webhook_secret_secret_version');
    }
    set webhookSecretSecretVersion(value) {
        this._webhookSecretSecretVersion = value;
    }
    // Temporarily expose input value. Use with caution.
    get webhookSecretSecretVersionInput() {
        return this._webhookSecretSecretVersion;
    }
    get authorizerCredential() {
        return this._authorizerCredential;
    }
    putAuthorizerCredential(value) {
        this._authorizerCredential.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get authorizerCredentialInput() {
        return this._authorizerCredential.internalValue;
    }
    get readAuthorizerCredential() {
        return this._readAuthorizerCredential;
    }
    putReadAuthorizerCredential(value) {
        this._readAuthorizerCredential.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get readAuthorizerCredentialInput() {
        return this._readAuthorizerCredential.internalValue;
    }
    get serviceDirectoryConfig() {
        return this._serviceDirectoryConfig;
    }
    putServiceDirectoryConfig(value) {
        this._serviceDirectoryConfig.internalValue = value;
    }
    resetServiceDirectoryConfig() {
        this._serviceDirectoryConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceDirectoryConfigInput() {
        return this._serviceDirectoryConfig.internalValue;
    }
}
exports.Cloudbuildv2ConnectionGitlabConfigOutputReference = Cloudbuildv2ConnectionGitlabConfigOutputReference;
_s = JSII_RTTI_SYMBOL_1;
Cloudbuildv2ConnectionGitlabConfigOutputReference[_s] = { fqn: "@cdktf/provider-google.cloudbuildv2Connection.Cloudbuildv2ConnectionGitlabConfigOutputReference", version: "14.13.1" };
function cloudbuildv2ConnectionTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.cloudbuildv2ConnectionTimeoutsToTerraform = cloudbuildv2ConnectionTimeoutsToTerraform;
function cloudbuildv2ConnectionTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.cloudbuildv2ConnectionTimeoutsToHclTerraform = cloudbuildv2ConnectionTimeoutsToHclTerraform;
class Cloudbuildv2ConnectionTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.Cloudbuildv2ConnectionTimeoutsOutputReference = Cloudbuildv2ConnectionTimeoutsOutputReference;
_t = JSII_RTTI_SYMBOL_1;
Cloudbuildv2ConnectionTimeoutsOutputReference[_t] = { fqn: "@cdktf/provider-google.cloudbuildv2Connection.Cloudbuildv2ConnectionTimeoutsOutputReference", version: "14.13.1" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/cloudbuildv2_connection google_cloudbuildv2_connection}
*/
class Cloudbuildv2Connection extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a Cloudbuildv2Connection resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the Cloudbuildv2Connection to import
    * @param importFromId The id of the existing Cloudbuildv2Connection that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/cloudbuildv2_connection#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the Cloudbuildv2Connection to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_cloudbuildv2_connection", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/cloudbuildv2_connection google_cloudbuildv2_connection} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options Cloudbuildv2ConnectionConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_cloudbuildv2_connection',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // effective_annotations - computed: true, optional: false, required: false
        this._effectiveAnnotations = new cdktf.StringMap(this, "effective_annotations");
        // installation_state - computed: true, optional: false, required: false
        this._installationState = new Cloudbuildv2ConnectionInstallationStateList(this, "installation_state", false);
        // bitbucket_cloud_config - computed: false, optional: true, required: false
        this._bitbucketCloudConfig = new Cloudbuildv2ConnectionBitbucketCloudConfigOutputReference(this, "bitbucket_cloud_config");
        // bitbucket_data_center_config - computed: false, optional: true, required: false
        this._bitbucketDataCenterConfig = new Cloudbuildv2ConnectionBitbucketDataCenterConfigOutputReference(this, "bitbucket_data_center_config");
        // github_config - computed: false, optional: true, required: false
        this._githubConfig = new Cloudbuildv2ConnectionGithubConfigOutputReference(this, "github_config");
        // github_enterprise_config - computed: false, optional: true, required: false
        this._githubEnterpriseConfig = new Cloudbuildv2ConnectionGithubEnterpriseConfigOutputReference(this, "github_enterprise_config");
        // gitlab_config - computed: false, optional: true, required: false
        this._gitlabConfig = new Cloudbuildv2ConnectionGitlabConfigOutputReference(this, "gitlab_config");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new Cloudbuildv2ConnectionTimeoutsOutputReference(this, "timeouts");
        this._annotations = config.annotations;
        this._disabled = config.disabled;
        this._id = config.id;
        this._location = config.location;
        this._name = config.name;
        this._project = config.project;
        this._bitbucketCloudConfig.internalValue = config.bitbucketCloudConfig;
        this._bitbucketDataCenterConfig.internalValue = config.bitbucketDataCenterConfig;
        this._githubConfig.internalValue = config.githubConfig;
        this._githubEnterpriseConfig.internalValue = config.githubEnterpriseConfig;
        this._gitlabConfig.internalValue = config.gitlabConfig;
        this._timeouts.internalValue = config.timeouts;
    }
    get annotations() {
        return this.getStringMapAttribute('annotations');
    }
    set annotations(value) {
        this._annotations = value;
    }
    resetAnnotations() {
        this._annotations = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get annotationsInput() {
        return this._annotations;
    }
    // create_time - computed: true, optional: false, required: false
    get createTime() {
        return this.getStringAttribute('create_time');
    }
    get disabled() {
        return this.getBooleanAttribute('disabled');
    }
    set disabled(value) {
        this._disabled = value;
    }
    resetDisabled() {
        this._disabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get disabledInput() {
        return this._disabled;
    }
    get effectiveAnnotations() {
        return this._effectiveAnnotations;
    }
    // etag - computed: true, optional: false, required: false
    get etag() {
        return this.getStringAttribute('etag');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get installationState() {
        return this._installationState;
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    // reconciling - computed: true, optional: false, required: false
    get reconciling() {
        return this.getBooleanAttribute('reconciling');
    }
    // update_time - computed: true, optional: false, required: false
    get updateTime() {
        return this.getStringAttribute('update_time');
    }
    get bitbucketCloudConfig() {
        return this._bitbucketCloudConfig;
    }
    putBitbucketCloudConfig(value) {
        this._bitbucketCloudConfig.internalValue = value;
    }
    resetBitbucketCloudConfig() {
        this._bitbucketCloudConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bitbucketCloudConfigInput() {
        return this._bitbucketCloudConfig.internalValue;
    }
    get bitbucketDataCenterConfig() {
        return this._bitbucketDataCenterConfig;
    }
    putBitbucketDataCenterConfig(value) {
        this._bitbucketDataCenterConfig.internalValue = value;
    }
    resetBitbucketDataCenterConfig() {
        this._bitbucketDataCenterConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bitbucketDataCenterConfigInput() {
        return this._bitbucketDataCenterConfig.internalValue;
    }
    get githubConfig() {
        return this._githubConfig;
    }
    putGithubConfig(value) {
        this._githubConfig.internalValue = value;
    }
    resetGithubConfig() {
        this._githubConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get githubConfigInput() {
        return this._githubConfig.internalValue;
    }
    get githubEnterpriseConfig() {
        return this._githubEnterpriseConfig;
    }
    putGithubEnterpriseConfig(value) {
        this._githubEnterpriseConfig.internalValue = value;
    }
    resetGithubEnterpriseConfig() {
        this._githubEnterpriseConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get githubEnterpriseConfigInput() {
        return this._githubEnterpriseConfig.internalValue;
    }
    get gitlabConfig() {
        return this._gitlabConfig;
    }
    putGitlabConfig(value) {
        this._gitlabConfig.internalValue = value;
    }
    resetGitlabConfig() {
        this._gitlabConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gitlabConfigInput() {
        return this._gitlabConfig.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            annotations: cdktf.hashMapper(cdktf.stringToTerraform)(this._annotations),
            disabled: cdktf.booleanToTerraform(this._disabled),
            id: cdktf.stringToTerraform(this._id),
            location: cdktf.stringToTerraform(this._location),
            name: cdktf.stringToTerraform(this._name),
            project: cdktf.stringToTerraform(this._project),
            bitbucket_cloud_config: cloudbuildv2ConnectionBitbucketCloudConfigToTerraform(this._bitbucketCloudConfig.internalValue),
            bitbucket_data_center_config: cloudbuildv2ConnectionBitbucketDataCenterConfigToTerraform(this._bitbucketDataCenterConfig.internalValue),
            github_config: cloudbuildv2ConnectionGithubConfigToTerraform(this._githubConfig.internalValue),
            github_enterprise_config: cloudbuildv2ConnectionGithubEnterpriseConfigToTerraform(this._githubEnterpriseConfig.internalValue),
            gitlab_config: cloudbuildv2ConnectionGitlabConfigToTerraform(this._gitlabConfig.internalValue),
            timeouts: cloudbuildv2ConnectionTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            annotations: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._annotations),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            disabled: {
                value: cdktf.booleanToHclTerraform(this._disabled),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            location: {
                value: cdktf.stringToHclTerraform(this._location),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            name: {
                value: cdktf.stringToHclTerraform(this._name),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            project: {
                value: cdktf.stringToHclTerraform(this._project),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            bitbucket_cloud_config: {
                value: cloudbuildv2ConnectionBitbucketCloudConfigToHclTerraform(this._bitbucketCloudConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "Cloudbuildv2ConnectionBitbucketCloudConfigList",
            },
            bitbucket_data_center_config: {
                value: cloudbuildv2ConnectionBitbucketDataCenterConfigToHclTerraform(this._bitbucketDataCenterConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "Cloudbuildv2ConnectionBitbucketDataCenterConfigList",
            },
            github_config: {
                value: cloudbuildv2ConnectionGithubConfigToHclTerraform(this._githubConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "Cloudbuildv2ConnectionGithubConfigList",
            },
            github_enterprise_config: {
                value: cloudbuildv2ConnectionGithubEnterpriseConfigToHclTerraform(this._githubEnterpriseConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "Cloudbuildv2ConnectionGithubEnterpriseConfigList",
            },
            gitlab_config: {
                value: cloudbuildv2ConnectionGitlabConfigToHclTerraform(this._gitlabConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "Cloudbuildv2ConnectionGitlabConfigList",
            },
            timeouts: {
                value: cloudbuildv2ConnectionTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "Cloudbuildv2ConnectionTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.Cloudbuildv2Connection = Cloudbuildv2Connection;
_u = JSII_RTTI_SYMBOL_1;
Cloudbuildv2Connection[_u] = { fqn: "@cdktf/provider-google.cloudbuildv2Connection.Cloudbuildv2Connection", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
Cloudbuildv2Connection.tfResourceType = "google_cloudbuildv2_connection";
//# sourceMappingURL=data:application/json;base64,