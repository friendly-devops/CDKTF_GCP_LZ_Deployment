"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesOutputReference = exports.gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesToHclTerraform = exports.gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesToTerraform = exports.GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigMonitoringOutputReference = exports.gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigMonitoringToHclTerraform = exports.gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigMonitoringToTerraform = exports.GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsList = exports.GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsOutputReference = exports.gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsToHclTerraform = exports.gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsToTerraform = exports.GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationsList = exports.GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationsOutputReference = exports.gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationsToHclTerraform = exports.gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationsToTerraform = exports.GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesOutputReference = exports.gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesToHclTerraform = exports.gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesToTerraform = exports.GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesRequestsOutputReference = exports.gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesRequestsToHclTerraform = exports.gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesRequestsToTerraform = exports.GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesLimitsOutputReference = exports.gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesLimitsToHclTerraform = exports.gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesLimitsToTerraform = exports.GkeHubFeatureMembershipMeshOutputReference = exports.gkeHubFeatureMembershipMeshToHclTerraform = exports.gkeHubFeatureMembershipMeshToTerraform = exports.GkeHubFeatureMembershipConfigmanagementOutputReference = exports.gkeHubFeatureMembershipConfigmanagementToHclTerraform = exports.gkeHubFeatureMembershipConfigmanagementToTerraform = exports.GkeHubFeatureMembershipConfigmanagementPolicyControllerOutputReference = exports.gkeHubFeatureMembershipConfigmanagementPolicyControllerToHclTerraform = exports.gkeHubFeatureMembershipConfigmanagementPolicyControllerToTerraform = exports.GkeHubFeatureMembershipConfigmanagementPolicyControllerMonitoringOutputReference = exports.gkeHubFeatureMembershipConfigmanagementPolicyControllerMonitoringToHclTerraform = exports.gkeHubFeatureMembershipConfigmanagementPolicyControllerMonitoringToTerraform = exports.GkeHubFeatureMembershipConfigmanagementHierarchyControllerOutputReference = exports.gkeHubFeatureMembershipConfigmanagementHierarchyControllerToHclTerraform = exports.gkeHubFeatureMembershipConfigmanagementHierarchyControllerToTerraform = exports.GkeHubFeatureMembershipConfigmanagementConfigSyncOutputReference = exports.gkeHubFeatureMembershipConfigmanagementConfigSyncToHclTerraform = exports.gkeHubFeatureMembershipConfigmanagementConfigSyncToTerraform = exports.GkeHubFeatureMembershipConfigmanagementConfigSyncOciOutputReference = exports.gkeHubFeatureMembershipConfigmanagementConfigSyncOciToHclTerraform = exports.gkeHubFeatureMembershipConfigmanagementConfigSyncOciToTerraform = exports.GkeHubFeatureMembershipConfigmanagementConfigSyncGitOutputReference = exports.gkeHubFeatureMembershipConfigmanagementConfigSyncGitToHclTerraform = exports.gkeHubFeatureMembershipConfigmanagementConfigSyncGitToTerraform = exports.GkeHubFeatureMembershipConfigmanagementBinauthzOutputReference = exports.gkeHubFeatureMembershipConfigmanagementBinauthzToHclTerraform = exports.gkeHubFeatureMembershipConfigmanagementBinauthzToTerraform = void 0;
exports.GkeHubFeatureMembership = exports.GkeHubFeatureMembershipTimeoutsOutputReference = exports.gkeHubFeatureMembershipTimeoutsToHclTerraform = exports.gkeHubFeatureMembershipTimeoutsToTerraform = exports.GkeHubFeatureMembershipPolicycontrollerOutputReference = exports.gkeHubFeatureMembershipPolicycontrollerToHclTerraform = exports.gkeHubFeatureMembershipPolicycontrollerToTerraform = exports.GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigOutputReference = exports.gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigToHclTerraform = exports.gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigToTerraform = exports.GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentOutputReference = exports.gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentToHclTerraform = exports.gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentToTerraform = exports.GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryOutputReference = exports.gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryToHclTerraform = exports.gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryToTerraform = exports.GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesList = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function gkeHubFeatureMembershipConfigmanagementBinauthzToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.gkeHubFeatureMembershipConfigmanagementBinauthzToTerraform = gkeHubFeatureMembershipConfigmanagementBinauthzToTerraform;
function gkeHubFeatureMembershipConfigmanagementBinauthzToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureMembershipConfigmanagementBinauthzToHclTerraform = gkeHubFeatureMembershipConfigmanagementBinauthzToHclTerraform;
class GkeHubFeatureMembershipConfigmanagementBinauthzOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
}
exports.GkeHubFeatureMembershipConfigmanagementBinauthzOutputReference = GkeHubFeatureMembershipConfigmanagementBinauthzOutputReference;
_a = JSII_RTTI_SYMBOL_1;
GkeHubFeatureMembershipConfigmanagementBinauthzOutputReference[_a] = { fqn: "@cdktf/provider-google.gkeHubFeatureMembership.GkeHubFeatureMembershipConfigmanagementBinauthzOutputReference", version: "14.13.1" };
function gkeHubFeatureMembershipConfigmanagementConfigSyncGitToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        gcp_service_account_email: cdktf.stringToTerraform(struct.gcpServiceAccountEmail),
        https_proxy: cdktf.stringToTerraform(struct.httpsProxy),
        policy_dir: cdktf.stringToTerraform(struct.policyDir),
        secret_type: cdktf.stringToTerraform(struct.secretType),
        sync_branch: cdktf.stringToTerraform(struct.syncBranch),
        sync_repo: cdktf.stringToTerraform(struct.syncRepo),
        sync_rev: cdktf.stringToTerraform(struct.syncRev),
        sync_wait_secs: cdktf.stringToTerraform(struct.syncWaitSecs),
    };
}
exports.gkeHubFeatureMembershipConfigmanagementConfigSyncGitToTerraform = gkeHubFeatureMembershipConfigmanagementConfigSyncGitToTerraform;
function gkeHubFeatureMembershipConfigmanagementConfigSyncGitToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        gcp_service_account_email: {
            value: cdktf.stringToHclTerraform(struct.gcpServiceAccountEmail),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        https_proxy: {
            value: cdktf.stringToHclTerraform(struct.httpsProxy),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        policy_dir: {
            value: cdktf.stringToHclTerraform(struct.policyDir),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        secret_type: {
            value: cdktf.stringToHclTerraform(struct.secretType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sync_branch: {
            value: cdktf.stringToHclTerraform(struct.syncBranch),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sync_repo: {
            value: cdktf.stringToHclTerraform(struct.syncRepo),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sync_rev: {
            value: cdktf.stringToHclTerraform(struct.syncRev),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sync_wait_secs: {
            value: cdktf.stringToHclTerraform(struct.syncWaitSecs),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureMembershipConfigmanagementConfigSyncGitToHclTerraform = gkeHubFeatureMembershipConfigmanagementConfigSyncGitToHclTerraform;
class GkeHubFeatureMembershipConfigmanagementConfigSyncGitOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._gcpServiceAccountEmail !== undefined) {
            hasAnyValues = true;
            internalValueResult.gcpServiceAccountEmail = this._gcpServiceAccountEmail;
        }
        if (this._httpsProxy !== undefined) {
            hasAnyValues = true;
            internalValueResult.httpsProxy = this._httpsProxy;
        }
        if (this._policyDir !== undefined) {
            hasAnyValues = true;
            internalValueResult.policyDir = this._policyDir;
        }
        if (this._secretType !== undefined) {
            hasAnyValues = true;
            internalValueResult.secretType = this._secretType;
        }
        if (this._syncBranch !== undefined) {
            hasAnyValues = true;
            internalValueResult.syncBranch = this._syncBranch;
        }
        if (this._syncRepo !== undefined) {
            hasAnyValues = true;
            internalValueResult.syncRepo = this._syncRepo;
        }
        if (this._syncRev !== undefined) {
            hasAnyValues = true;
            internalValueResult.syncRev = this._syncRev;
        }
        if (this._syncWaitSecs !== undefined) {
            hasAnyValues = true;
            internalValueResult.syncWaitSecs = this._syncWaitSecs;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._gcpServiceAccountEmail = undefined;
            this._httpsProxy = undefined;
            this._policyDir = undefined;
            this._secretType = undefined;
            this._syncBranch = undefined;
            this._syncRepo = undefined;
            this._syncRev = undefined;
            this._syncWaitSecs = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._gcpServiceAccountEmail = value.gcpServiceAccountEmail;
            this._httpsProxy = value.httpsProxy;
            this._policyDir = value.policyDir;
            this._secretType = value.secretType;
            this._syncBranch = value.syncBranch;
            this._syncRepo = value.syncRepo;
            this._syncRev = value.syncRev;
            this._syncWaitSecs = value.syncWaitSecs;
        }
    }
    get gcpServiceAccountEmail() {
        return this.getStringAttribute('gcp_service_account_email');
    }
    set gcpServiceAccountEmail(value) {
        this._gcpServiceAccountEmail = value;
    }
    resetGcpServiceAccountEmail() {
        this._gcpServiceAccountEmail = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gcpServiceAccountEmailInput() {
        return this._gcpServiceAccountEmail;
    }
    get httpsProxy() {
        return this.getStringAttribute('https_proxy');
    }
    set httpsProxy(value) {
        this._httpsProxy = value;
    }
    resetHttpsProxy() {
        this._httpsProxy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpsProxyInput() {
        return this._httpsProxy;
    }
    get policyDir() {
        return this.getStringAttribute('policy_dir');
    }
    set policyDir(value) {
        this._policyDir = value;
    }
    resetPolicyDir() {
        this._policyDir = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get policyDirInput() {
        return this._policyDir;
    }
    get secretType() {
        return this.getStringAttribute('secret_type');
    }
    set secretType(value) {
        this._secretType = value;
    }
    resetSecretType() {
        this._secretType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secretTypeInput() {
        return this._secretType;
    }
    get syncBranch() {
        return this.getStringAttribute('sync_branch');
    }
    set syncBranch(value) {
        this._syncBranch = value;
    }
    resetSyncBranch() {
        this._syncBranch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get syncBranchInput() {
        return this._syncBranch;
    }
    get syncRepo() {
        return this.getStringAttribute('sync_repo');
    }
    set syncRepo(value) {
        this._syncRepo = value;
    }
    resetSyncRepo() {
        this._syncRepo = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get syncRepoInput() {
        return this._syncRepo;
    }
    get syncRev() {
        return this.getStringAttribute('sync_rev');
    }
    set syncRev(value) {
        this._syncRev = value;
    }
    resetSyncRev() {
        this._syncRev = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get syncRevInput() {
        return this._syncRev;
    }
    get syncWaitSecs() {
        return this.getStringAttribute('sync_wait_secs');
    }
    set syncWaitSecs(value) {
        this._syncWaitSecs = value;
    }
    resetSyncWaitSecs() {
        this._syncWaitSecs = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get syncWaitSecsInput() {
        return this._syncWaitSecs;
    }
}
exports.GkeHubFeatureMembershipConfigmanagementConfigSyncGitOutputReference = GkeHubFeatureMembershipConfigmanagementConfigSyncGitOutputReference;
_b = JSII_RTTI_SYMBOL_1;
GkeHubFeatureMembershipConfigmanagementConfigSyncGitOutputReference[_b] = { fqn: "@cdktf/provider-google.gkeHubFeatureMembership.GkeHubFeatureMembershipConfigmanagementConfigSyncGitOutputReference", version: "14.13.1" };
function gkeHubFeatureMembershipConfigmanagementConfigSyncOciToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        gcp_service_account_email: cdktf.stringToTerraform(struct.gcpServiceAccountEmail),
        policy_dir: cdktf.stringToTerraform(struct.policyDir),
        secret_type: cdktf.stringToTerraform(struct.secretType),
        sync_repo: cdktf.stringToTerraform(struct.syncRepo),
        sync_wait_secs: cdktf.stringToTerraform(struct.syncWaitSecs),
    };
}
exports.gkeHubFeatureMembershipConfigmanagementConfigSyncOciToTerraform = gkeHubFeatureMembershipConfigmanagementConfigSyncOciToTerraform;
function gkeHubFeatureMembershipConfigmanagementConfigSyncOciToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        gcp_service_account_email: {
            value: cdktf.stringToHclTerraform(struct.gcpServiceAccountEmail),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        policy_dir: {
            value: cdktf.stringToHclTerraform(struct.policyDir),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        secret_type: {
            value: cdktf.stringToHclTerraform(struct.secretType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sync_repo: {
            value: cdktf.stringToHclTerraform(struct.syncRepo),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        sync_wait_secs: {
            value: cdktf.stringToHclTerraform(struct.syncWaitSecs),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureMembershipConfigmanagementConfigSyncOciToHclTerraform = gkeHubFeatureMembershipConfigmanagementConfigSyncOciToHclTerraform;
class GkeHubFeatureMembershipConfigmanagementConfigSyncOciOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._gcpServiceAccountEmail !== undefined) {
            hasAnyValues = true;
            internalValueResult.gcpServiceAccountEmail = this._gcpServiceAccountEmail;
        }
        if (this._policyDir !== undefined) {
            hasAnyValues = true;
            internalValueResult.policyDir = this._policyDir;
        }
        if (this._secretType !== undefined) {
            hasAnyValues = true;
            internalValueResult.secretType = this._secretType;
        }
        if (this._syncRepo !== undefined) {
            hasAnyValues = true;
            internalValueResult.syncRepo = this._syncRepo;
        }
        if (this._syncWaitSecs !== undefined) {
            hasAnyValues = true;
            internalValueResult.syncWaitSecs = this._syncWaitSecs;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._gcpServiceAccountEmail = undefined;
            this._policyDir = undefined;
            this._secretType = undefined;
            this._syncRepo = undefined;
            this._syncWaitSecs = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._gcpServiceAccountEmail = value.gcpServiceAccountEmail;
            this._policyDir = value.policyDir;
            this._secretType = value.secretType;
            this._syncRepo = value.syncRepo;
            this._syncWaitSecs = value.syncWaitSecs;
        }
    }
    get gcpServiceAccountEmail() {
        return this.getStringAttribute('gcp_service_account_email');
    }
    set gcpServiceAccountEmail(value) {
        this._gcpServiceAccountEmail = value;
    }
    resetGcpServiceAccountEmail() {
        this._gcpServiceAccountEmail = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gcpServiceAccountEmailInput() {
        return this._gcpServiceAccountEmail;
    }
    get policyDir() {
        return this.getStringAttribute('policy_dir');
    }
    set policyDir(value) {
        this._policyDir = value;
    }
    resetPolicyDir() {
        this._policyDir = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get policyDirInput() {
        return this._policyDir;
    }
    get secretType() {
        return this.getStringAttribute('secret_type');
    }
    set secretType(value) {
        this._secretType = value;
    }
    resetSecretType() {
        this._secretType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secretTypeInput() {
        return this._secretType;
    }
    get syncRepo() {
        return this.getStringAttribute('sync_repo');
    }
    set syncRepo(value) {
        this._syncRepo = value;
    }
    resetSyncRepo() {
        this._syncRepo = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get syncRepoInput() {
        return this._syncRepo;
    }
    get syncWaitSecs() {
        return this.getStringAttribute('sync_wait_secs');
    }
    set syncWaitSecs(value) {
        this._syncWaitSecs = value;
    }
    resetSyncWaitSecs() {
        this._syncWaitSecs = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get syncWaitSecsInput() {
        return this._syncWaitSecs;
    }
}
exports.GkeHubFeatureMembershipConfigmanagementConfigSyncOciOutputReference = GkeHubFeatureMembershipConfigmanagementConfigSyncOciOutputReference;
_c = JSII_RTTI_SYMBOL_1;
GkeHubFeatureMembershipConfigmanagementConfigSyncOciOutputReference[_c] = { fqn: "@cdktf/provider-google.gkeHubFeatureMembership.GkeHubFeatureMembershipConfigmanagementConfigSyncOciOutputReference", version: "14.13.1" };
function gkeHubFeatureMembershipConfigmanagementConfigSyncToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        metrics_gcp_service_account_email: cdktf.stringToTerraform(struct.metricsGcpServiceAccountEmail),
        prevent_drift: cdktf.booleanToTerraform(struct.preventDrift),
        source_format: cdktf.stringToTerraform(struct.sourceFormat),
        stop_syncing: cdktf.booleanToTerraform(struct.stopSyncing),
        git: gkeHubFeatureMembershipConfigmanagementConfigSyncGitToTerraform(struct.git),
        oci: gkeHubFeatureMembershipConfigmanagementConfigSyncOciToTerraform(struct.oci),
    };
}
exports.gkeHubFeatureMembershipConfigmanagementConfigSyncToTerraform = gkeHubFeatureMembershipConfigmanagementConfigSyncToTerraform;
function gkeHubFeatureMembershipConfigmanagementConfigSyncToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        metrics_gcp_service_account_email: {
            value: cdktf.stringToHclTerraform(struct.metricsGcpServiceAccountEmail),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        prevent_drift: {
            value: cdktf.booleanToHclTerraform(struct.preventDrift),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        source_format: {
            value: cdktf.stringToHclTerraform(struct.sourceFormat),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        stop_syncing: {
            value: cdktf.booleanToHclTerraform(struct.stopSyncing),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        git: {
            value: gkeHubFeatureMembershipConfigmanagementConfigSyncGitToHclTerraform(struct.git),
            isBlock: true,
            type: "list",
            storageClassType: "GkeHubFeatureMembershipConfigmanagementConfigSyncGitList",
        },
        oci: {
            value: gkeHubFeatureMembershipConfigmanagementConfigSyncOciToHclTerraform(struct.oci),
            isBlock: true,
            type: "list",
            storageClassType: "GkeHubFeatureMembershipConfigmanagementConfigSyncOciList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureMembershipConfigmanagementConfigSyncToHclTerraform = gkeHubFeatureMembershipConfigmanagementConfigSyncToHclTerraform;
class GkeHubFeatureMembershipConfigmanagementConfigSyncOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // git - computed: false, optional: true, required: false
        this._git = new GkeHubFeatureMembershipConfigmanagementConfigSyncGitOutputReference(this, "git");
        // oci - computed: false, optional: true, required: false
        this._oci = new GkeHubFeatureMembershipConfigmanagementConfigSyncOciOutputReference(this, "oci");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._metricsGcpServiceAccountEmail !== undefined) {
            hasAnyValues = true;
            internalValueResult.metricsGcpServiceAccountEmail = this._metricsGcpServiceAccountEmail;
        }
        if (this._preventDrift !== undefined) {
            hasAnyValues = true;
            internalValueResult.preventDrift = this._preventDrift;
        }
        if (this._sourceFormat !== undefined) {
            hasAnyValues = true;
            internalValueResult.sourceFormat = this._sourceFormat;
        }
        if (this._stopSyncing !== undefined) {
            hasAnyValues = true;
            internalValueResult.stopSyncing = this._stopSyncing;
        }
        if (this._git?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.git = this._git?.internalValue;
        }
        if (this._oci?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.oci = this._oci?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._metricsGcpServiceAccountEmail = undefined;
            this._preventDrift = undefined;
            this._sourceFormat = undefined;
            this._stopSyncing = undefined;
            this._git.internalValue = undefined;
            this._oci.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._metricsGcpServiceAccountEmail = value.metricsGcpServiceAccountEmail;
            this._preventDrift = value.preventDrift;
            this._sourceFormat = value.sourceFormat;
            this._stopSyncing = value.stopSyncing;
            this._git.internalValue = value.git;
            this._oci.internalValue = value.oci;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get metricsGcpServiceAccountEmail() {
        return this.getStringAttribute('metrics_gcp_service_account_email');
    }
    set metricsGcpServiceAccountEmail(value) {
        this._metricsGcpServiceAccountEmail = value;
    }
    resetMetricsGcpServiceAccountEmail() {
        this._metricsGcpServiceAccountEmail = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get metricsGcpServiceAccountEmailInput() {
        return this._metricsGcpServiceAccountEmail;
    }
    get preventDrift() {
        return this.getBooleanAttribute('prevent_drift');
    }
    set preventDrift(value) {
        this._preventDrift = value;
    }
    resetPreventDrift() {
        this._preventDrift = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get preventDriftInput() {
        return this._preventDrift;
    }
    get sourceFormat() {
        return this.getStringAttribute('source_format');
    }
    set sourceFormat(value) {
        this._sourceFormat = value;
    }
    resetSourceFormat() {
        this._sourceFormat = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sourceFormatInput() {
        return this._sourceFormat;
    }
    get stopSyncing() {
        return this.getBooleanAttribute('stop_syncing');
    }
    set stopSyncing(value) {
        this._stopSyncing = value;
    }
    resetStopSyncing() {
        this._stopSyncing = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stopSyncingInput() {
        return this._stopSyncing;
    }
    get git() {
        return this._git;
    }
    putGit(value) {
        this._git.internalValue = value;
    }
    resetGit() {
        this._git.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gitInput() {
        return this._git.internalValue;
    }
    get oci() {
        return this._oci;
    }
    putOci(value) {
        this._oci.internalValue = value;
    }
    resetOci() {
        this._oci.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ociInput() {
        return this._oci.internalValue;
    }
}
exports.GkeHubFeatureMembershipConfigmanagementConfigSyncOutputReference = GkeHubFeatureMembershipConfigmanagementConfigSyncOutputReference;
_d = JSII_RTTI_SYMBOL_1;
GkeHubFeatureMembershipConfigmanagementConfigSyncOutputReference[_d] = { fqn: "@cdktf/provider-google.gkeHubFeatureMembership.GkeHubFeatureMembershipConfigmanagementConfigSyncOutputReference", version: "14.13.1" };
function gkeHubFeatureMembershipConfigmanagementHierarchyControllerToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enable_hierarchical_resource_quota: cdktf.booleanToTerraform(struct.enableHierarchicalResourceQuota),
        enable_pod_tree_labels: cdktf.booleanToTerraform(struct.enablePodTreeLabels),
        enabled: cdktf.booleanToTerraform(struct.enabled),
    };
}
exports.gkeHubFeatureMembershipConfigmanagementHierarchyControllerToTerraform = gkeHubFeatureMembershipConfigmanagementHierarchyControllerToTerraform;
function gkeHubFeatureMembershipConfigmanagementHierarchyControllerToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enable_hierarchical_resource_quota: {
            value: cdktf.booleanToHclTerraform(struct.enableHierarchicalResourceQuota),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        enable_pod_tree_labels: {
            value: cdktf.booleanToHclTerraform(struct.enablePodTreeLabels),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureMembershipConfigmanagementHierarchyControllerToHclTerraform = gkeHubFeatureMembershipConfigmanagementHierarchyControllerToHclTerraform;
class GkeHubFeatureMembershipConfigmanagementHierarchyControllerOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enableHierarchicalResourceQuota !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableHierarchicalResourceQuota = this._enableHierarchicalResourceQuota;
        }
        if (this._enablePodTreeLabels !== undefined) {
            hasAnyValues = true;
            internalValueResult.enablePodTreeLabels = this._enablePodTreeLabels;
        }
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enableHierarchicalResourceQuota = undefined;
            this._enablePodTreeLabels = undefined;
            this._enabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enableHierarchicalResourceQuota = value.enableHierarchicalResourceQuota;
            this._enablePodTreeLabels = value.enablePodTreeLabels;
            this._enabled = value.enabled;
        }
    }
    get enableHierarchicalResourceQuota() {
        return this.getBooleanAttribute('enable_hierarchical_resource_quota');
    }
    set enableHierarchicalResourceQuota(value) {
        this._enableHierarchicalResourceQuota = value;
    }
    resetEnableHierarchicalResourceQuota() {
        this._enableHierarchicalResourceQuota = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableHierarchicalResourceQuotaInput() {
        return this._enableHierarchicalResourceQuota;
    }
    get enablePodTreeLabels() {
        return this.getBooleanAttribute('enable_pod_tree_labels');
    }
    set enablePodTreeLabels(value) {
        this._enablePodTreeLabels = value;
    }
    resetEnablePodTreeLabels() {
        this._enablePodTreeLabels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enablePodTreeLabelsInput() {
        return this._enablePodTreeLabels;
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
}
exports.GkeHubFeatureMembershipConfigmanagementHierarchyControllerOutputReference = GkeHubFeatureMembershipConfigmanagementHierarchyControllerOutputReference;
_e = JSII_RTTI_SYMBOL_1;
GkeHubFeatureMembershipConfigmanagementHierarchyControllerOutputReference[_e] = { fqn: "@cdktf/provider-google.gkeHubFeatureMembership.GkeHubFeatureMembershipConfigmanagementHierarchyControllerOutputReference", version: "14.13.1" };
function gkeHubFeatureMembershipConfigmanagementPolicyControllerMonitoringToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        backends: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.backends),
    };
}
exports.gkeHubFeatureMembershipConfigmanagementPolicyControllerMonitoringToTerraform = gkeHubFeatureMembershipConfigmanagementPolicyControllerMonitoringToTerraform;
function gkeHubFeatureMembershipConfigmanagementPolicyControllerMonitoringToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        backends: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.backends),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureMembershipConfigmanagementPolicyControllerMonitoringToHclTerraform = gkeHubFeatureMembershipConfigmanagementPolicyControllerMonitoringToHclTerraform;
class GkeHubFeatureMembershipConfigmanagementPolicyControllerMonitoringOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._backends !== undefined) {
            hasAnyValues = true;
            internalValueResult.backends = this._backends;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._backends = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._backends = value.backends;
        }
    }
    get backends() {
        return this.getListAttribute('backends');
    }
    set backends(value) {
        this._backends = value;
    }
    resetBackends() {
        this._backends = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get backendsInput() {
        return this._backends;
    }
}
exports.GkeHubFeatureMembershipConfigmanagementPolicyControllerMonitoringOutputReference = GkeHubFeatureMembershipConfigmanagementPolicyControllerMonitoringOutputReference;
_f = JSII_RTTI_SYMBOL_1;
GkeHubFeatureMembershipConfigmanagementPolicyControllerMonitoringOutputReference[_f] = { fqn: "@cdktf/provider-google.gkeHubFeatureMembership.GkeHubFeatureMembershipConfigmanagementPolicyControllerMonitoringOutputReference", version: "14.13.1" };
function gkeHubFeatureMembershipConfigmanagementPolicyControllerToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        audit_interval_seconds: cdktf.stringToTerraform(struct.auditIntervalSeconds),
        enabled: cdktf.booleanToTerraform(struct.enabled),
        exemptable_namespaces: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.exemptableNamespaces),
        log_denies_enabled: cdktf.booleanToTerraform(struct.logDeniesEnabled),
        mutation_enabled: cdktf.booleanToTerraform(struct.mutationEnabled),
        referential_rules_enabled: cdktf.booleanToTerraform(struct.referentialRulesEnabled),
        template_library_installed: cdktf.booleanToTerraform(struct.templateLibraryInstalled),
        monitoring: gkeHubFeatureMembershipConfigmanagementPolicyControllerMonitoringToTerraform(struct.monitoring),
    };
}
exports.gkeHubFeatureMembershipConfigmanagementPolicyControllerToTerraform = gkeHubFeatureMembershipConfigmanagementPolicyControllerToTerraform;
function gkeHubFeatureMembershipConfigmanagementPolicyControllerToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        audit_interval_seconds: {
            value: cdktf.stringToHclTerraform(struct.auditIntervalSeconds),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        exemptable_namespaces: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.exemptableNamespaces),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        log_denies_enabled: {
            value: cdktf.booleanToHclTerraform(struct.logDeniesEnabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        mutation_enabled: {
            value: cdktf.booleanToHclTerraform(struct.mutationEnabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        referential_rules_enabled: {
            value: cdktf.booleanToHclTerraform(struct.referentialRulesEnabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        template_library_installed: {
            value: cdktf.booleanToHclTerraform(struct.templateLibraryInstalled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        monitoring: {
            value: gkeHubFeatureMembershipConfigmanagementPolicyControllerMonitoringToHclTerraform(struct.monitoring),
            isBlock: true,
            type: "list",
            storageClassType: "GkeHubFeatureMembershipConfigmanagementPolicyControllerMonitoringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureMembershipConfigmanagementPolicyControllerToHclTerraform = gkeHubFeatureMembershipConfigmanagementPolicyControllerToHclTerraform;
class GkeHubFeatureMembershipConfigmanagementPolicyControllerOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // monitoring - computed: false, optional: true, required: false
        this._monitoring = new GkeHubFeatureMembershipConfigmanagementPolicyControllerMonitoringOutputReference(this, "monitoring");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._auditIntervalSeconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.auditIntervalSeconds = this._auditIntervalSeconds;
        }
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._exemptableNamespaces !== undefined) {
            hasAnyValues = true;
            internalValueResult.exemptableNamespaces = this._exemptableNamespaces;
        }
        if (this._logDeniesEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.logDeniesEnabled = this._logDeniesEnabled;
        }
        if (this._mutationEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.mutationEnabled = this._mutationEnabled;
        }
        if (this._referentialRulesEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.referentialRulesEnabled = this._referentialRulesEnabled;
        }
        if (this._templateLibraryInstalled !== undefined) {
            hasAnyValues = true;
            internalValueResult.templateLibraryInstalled = this._templateLibraryInstalled;
        }
        if (this._monitoring?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.monitoring = this._monitoring?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._auditIntervalSeconds = undefined;
            this._enabled = undefined;
            this._exemptableNamespaces = undefined;
            this._logDeniesEnabled = undefined;
            this._mutationEnabled = undefined;
            this._referentialRulesEnabled = undefined;
            this._templateLibraryInstalled = undefined;
            this._monitoring.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._auditIntervalSeconds = value.auditIntervalSeconds;
            this._enabled = value.enabled;
            this._exemptableNamespaces = value.exemptableNamespaces;
            this._logDeniesEnabled = value.logDeniesEnabled;
            this._mutationEnabled = value.mutationEnabled;
            this._referentialRulesEnabled = value.referentialRulesEnabled;
            this._templateLibraryInstalled = value.templateLibraryInstalled;
            this._monitoring.internalValue = value.monitoring;
        }
    }
    get auditIntervalSeconds() {
        return this.getStringAttribute('audit_interval_seconds');
    }
    set auditIntervalSeconds(value) {
        this._auditIntervalSeconds = value;
    }
    resetAuditIntervalSeconds() {
        this._auditIntervalSeconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get auditIntervalSecondsInput() {
        return this._auditIntervalSeconds;
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get exemptableNamespaces() {
        return this.getListAttribute('exemptable_namespaces');
    }
    set exemptableNamespaces(value) {
        this._exemptableNamespaces = value;
    }
    resetExemptableNamespaces() {
        this._exemptableNamespaces = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get exemptableNamespacesInput() {
        return this._exemptableNamespaces;
    }
    get logDeniesEnabled() {
        return this.getBooleanAttribute('log_denies_enabled');
    }
    set logDeniesEnabled(value) {
        this._logDeniesEnabled = value;
    }
    resetLogDeniesEnabled() {
        this._logDeniesEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logDeniesEnabledInput() {
        return this._logDeniesEnabled;
    }
    get mutationEnabled() {
        return this.getBooleanAttribute('mutation_enabled');
    }
    set mutationEnabled(value) {
        this._mutationEnabled = value;
    }
    resetMutationEnabled() {
        this._mutationEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mutationEnabledInput() {
        return this._mutationEnabled;
    }
    get referentialRulesEnabled() {
        return this.getBooleanAttribute('referential_rules_enabled');
    }
    set referentialRulesEnabled(value) {
        this._referentialRulesEnabled = value;
    }
    resetReferentialRulesEnabled() {
        this._referentialRulesEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get referentialRulesEnabledInput() {
        return this._referentialRulesEnabled;
    }
    get templateLibraryInstalled() {
        return this.getBooleanAttribute('template_library_installed');
    }
    set templateLibraryInstalled(value) {
        this._templateLibraryInstalled = value;
    }
    resetTemplateLibraryInstalled() {
        this._templateLibraryInstalled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get templateLibraryInstalledInput() {
        return this._templateLibraryInstalled;
    }
    get monitoring() {
        return this._monitoring;
    }
    putMonitoring(value) {
        this._monitoring.internalValue = value;
    }
    resetMonitoring() {
        this._monitoring.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get monitoringInput() {
        return this._monitoring.internalValue;
    }
}
exports.GkeHubFeatureMembershipConfigmanagementPolicyControllerOutputReference = GkeHubFeatureMembershipConfigmanagementPolicyControllerOutputReference;
_g = JSII_RTTI_SYMBOL_1;
GkeHubFeatureMembershipConfigmanagementPolicyControllerOutputReference[_g] = { fqn: "@cdktf/provider-google.gkeHubFeatureMembership.GkeHubFeatureMembershipConfigmanagementPolicyControllerOutputReference", version: "14.13.1" };
function gkeHubFeatureMembershipConfigmanagementToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        management: cdktf.stringToTerraform(struct.management),
        version: cdktf.stringToTerraform(struct.version),
        binauthz: gkeHubFeatureMembershipConfigmanagementBinauthzToTerraform(struct.binauthz),
        config_sync: gkeHubFeatureMembershipConfigmanagementConfigSyncToTerraform(struct.configSync),
        hierarchy_controller: gkeHubFeatureMembershipConfigmanagementHierarchyControllerToTerraform(struct.hierarchyController),
        policy_controller: gkeHubFeatureMembershipConfigmanagementPolicyControllerToTerraform(struct.policyController),
    };
}
exports.gkeHubFeatureMembershipConfigmanagementToTerraform = gkeHubFeatureMembershipConfigmanagementToTerraform;
function gkeHubFeatureMembershipConfigmanagementToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        management: {
            value: cdktf.stringToHclTerraform(struct.management),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        version: {
            value: cdktf.stringToHclTerraform(struct.version),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        binauthz: {
            value: gkeHubFeatureMembershipConfigmanagementBinauthzToHclTerraform(struct.binauthz),
            isBlock: true,
            type: "list",
            storageClassType: "GkeHubFeatureMembershipConfigmanagementBinauthzList",
        },
        config_sync: {
            value: gkeHubFeatureMembershipConfigmanagementConfigSyncToHclTerraform(struct.configSync),
            isBlock: true,
            type: "list",
            storageClassType: "GkeHubFeatureMembershipConfigmanagementConfigSyncList",
        },
        hierarchy_controller: {
            value: gkeHubFeatureMembershipConfigmanagementHierarchyControllerToHclTerraform(struct.hierarchyController),
            isBlock: true,
            type: "list",
            storageClassType: "GkeHubFeatureMembershipConfigmanagementHierarchyControllerList",
        },
        policy_controller: {
            value: gkeHubFeatureMembershipConfigmanagementPolicyControllerToHclTerraform(struct.policyController),
            isBlock: true,
            type: "list",
            storageClassType: "GkeHubFeatureMembershipConfigmanagementPolicyControllerList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureMembershipConfigmanagementToHclTerraform = gkeHubFeatureMembershipConfigmanagementToHclTerraform;
class GkeHubFeatureMembershipConfigmanagementOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // binauthz - computed: false, optional: true, required: false
        this._binauthz = new GkeHubFeatureMembershipConfigmanagementBinauthzOutputReference(this, "binauthz");
        // config_sync - computed: false, optional: true, required: false
        this._configSync = new GkeHubFeatureMembershipConfigmanagementConfigSyncOutputReference(this, "config_sync");
        // hierarchy_controller - computed: false, optional: true, required: false
        this._hierarchyController = new GkeHubFeatureMembershipConfigmanagementHierarchyControllerOutputReference(this, "hierarchy_controller");
        // policy_controller - computed: false, optional: true, required: false
        this._policyController = new GkeHubFeatureMembershipConfigmanagementPolicyControllerOutputReference(this, "policy_controller");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._management !== undefined) {
            hasAnyValues = true;
            internalValueResult.management = this._management;
        }
        if (this._version !== undefined) {
            hasAnyValues = true;
            internalValueResult.version = this._version;
        }
        if (this._binauthz?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.binauthz = this._binauthz?.internalValue;
        }
        if (this._configSync?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.configSync = this._configSync?.internalValue;
        }
        if (this._hierarchyController?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.hierarchyController = this._hierarchyController?.internalValue;
        }
        if (this._policyController?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.policyController = this._policyController?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._management = undefined;
            this._version = undefined;
            this._binauthz.internalValue = undefined;
            this._configSync.internalValue = undefined;
            this._hierarchyController.internalValue = undefined;
            this._policyController.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._management = value.management;
            this._version = value.version;
            this._binauthz.internalValue = value.binauthz;
            this._configSync.internalValue = value.configSync;
            this._hierarchyController.internalValue = value.hierarchyController;
            this._policyController.internalValue = value.policyController;
        }
    }
    get management() {
        return this.getStringAttribute('management');
    }
    set management(value) {
        this._management = value;
    }
    resetManagement() {
        this._management = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get managementInput() {
        return this._management;
    }
    get version() {
        return this.getStringAttribute('version');
    }
    set version(value) {
        this._version = value;
    }
    resetVersion() {
        this._version = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get versionInput() {
        return this._version;
    }
    get binauthz() {
        return this._binauthz;
    }
    putBinauthz(value) {
        this._binauthz.internalValue = value;
    }
    resetBinauthz() {
        this._binauthz.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get binauthzInput() {
        return this._binauthz.internalValue;
    }
    get configSync() {
        return this._configSync;
    }
    putConfigSync(value) {
        this._configSync.internalValue = value;
    }
    resetConfigSync() {
        this._configSync.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get configSyncInput() {
        return this._configSync.internalValue;
    }
    get hierarchyController() {
        return this._hierarchyController;
    }
    putHierarchyController(value) {
        this._hierarchyController.internalValue = value;
    }
    resetHierarchyController() {
        this._hierarchyController.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hierarchyControllerInput() {
        return this._hierarchyController.internalValue;
    }
    get policyController() {
        return this._policyController;
    }
    putPolicyController(value) {
        this._policyController.internalValue = value;
    }
    resetPolicyController() {
        this._policyController.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get policyControllerInput() {
        return this._policyController.internalValue;
    }
}
exports.GkeHubFeatureMembershipConfigmanagementOutputReference = GkeHubFeatureMembershipConfigmanagementOutputReference;
_h = JSII_RTTI_SYMBOL_1;
GkeHubFeatureMembershipConfigmanagementOutputReference[_h] = { fqn: "@cdktf/provider-google.gkeHubFeatureMembership.GkeHubFeatureMembershipConfigmanagementOutputReference", version: "14.13.1" };
function gkeHubFeatureMembershipMeshToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        control_plane: cdktf.stringToTerraform(struct.controlPlane),
        management: cdktf.stringToTerraform(struct.management),
    };
}
exports.gkeHubFeatureMembershipMeshToTerraform = gkeHubFeatureMembershipMeshToTerraform;
function gkeHubFeatureMembershipMeshToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        control_plane: {
            value: cdktf.stringToHclTerraform(struct.controlPlane),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        management: {
            value: cdktf.stringToHclTerraform(struct.management),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureMembershipMeshToHclTerraform = gkeHubFeatureMembershipMeshToHclTerraform;
class GkeHubFeatureMembershipMeshOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._controlPlane !== undefined) {
            hasAnyValues = true;
            internalValueResult.controlPlane = this._controlPlane;
        }
        if (this._management !== undefined) {
            hasAnyValues = true;
            internalValueResult.management = this._management;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._controlPlane = undefined;
            this._management = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._controlPlane = value.controlPlane;
            this._management = value.management;
        }
    }
    get controlPlane() {
        return this.getStringAttribute('control_plane');
    }
    set controlPlane(value) {
        this._controlPlane = value;
    }
    resetControlPlane() {
        this._controlPlane = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get controlPlaneInput() {
        return this._controlPlane;
    }
    get management() {
        return this.getStringAttribute('management');
    }
    set management(value) {
        this._management = value;
    }
    resetManagement() {
        this._management = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get managementInput() {
        return this._management;
    }
}
exports.GkeHubFeatureMembershipMeshOutputReference = GkeHubFeatureMembershipMeshOutputReference;
_j = JSII_RTTI_SYMBOL_1;
GkeHubFeatureMembershipMeshOutputReference[_j] = { fqn: "@cdktf/provider-google.gkeHubFeatureMembership.GkeHubFeatureMembershipMeshOutputReference", version: "14.13.1" };
function gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesLimitsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cpu: cdktf.stringToTerraform(struct.cpu),
        memory: cdktf.stringToTerraform(struct.memory),
    };
}
exports.gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesLimitsToTerraform = gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesLimitsToTerraform;
function gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesLimitsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cpu: {
            value: cdktf.stringToHclTerraform(struct.cpu),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        memory: {
            value: cdktf.stringToHclTerraform(struct.memory),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesLimitsToHclTerraform = gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesLimitsToHclTerraform;
class GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesLimitsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cpu !== undefined) {
            hasAnyValues = true;
            internalValueResult.cpu = this._cpu;
        }
        if (this._memory !== undefined) {
            hasAnyValues = true;
            internalValueResult.memory = this._memory;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cpu = undefined;
            this._memory = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cpu = value.cpu;
            this._memory = value.memory;
        }
    }
    get cpu() {
        return this.getStringAttribute('cpu');
    }
    set cpu(value) {
        this._cpu = value;
    }
    resetCpu() {
        this._cpu = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cpuInput() {
        return this._cpu;
    }
    get memory() {
        return this.getStringAttribute('memory');
    }
    set memory(value) {
        this._memory = value;
    }
    resetMemory() {
        this._memory = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get memoryInput() {
        return this._memory;
    }
}
exports.GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesLimitsOutputReference = GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesLimitsOutputReference;
_k = JSII_RTTI_SYMBOL_1;
GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesLimitsOutputReference[_k] = { fqn: "@cdktf/provider-google.gkeHubFeatureMembership.GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesLimitsOutputReference", version: "14.13.1" };
function gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesRequestsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cpu: cdktf.stringToTerraform(struct.cpu),
        memory: cdktf.stringToTerraform(struct.memory),
    };
}
exports.gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesRequestsToTerraform = gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesRequestsToTerraform;
function gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesRequestsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cpu: {
            value: cdktf.stringToHclTerraform(struct.cpu),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        memory: {
            value: cdktf.stringToHclTerraform(struct.memory),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesRequestsToHclTerraform = gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesRequestsToHclTerraform;
class GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesRequestsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cpu !== undefined) {
            hasAnyValues = true;
            internalValueResult.cpu = this._cpu;
        }
        if (this._memory !== undefined) {
            hasAnyValues = true;
            internalValueResult.memory = this._memory;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cpu = undefined;
            this._memory = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cpu = value.cpu;
            this._memory = value.memory;
        }
    }
    get cpu() {
        return this.getStringAttribute('cpu');
    }
    set cpu(value) {
        this._cpu = value;
    }
    resetCpu() {
        this._cpu = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get cpuInput() {
        return this._cpu;
    }
    get memory() {
        return this.getStringAttribute('memory');
    }
    set memory(value) {
        this._memory = value;
    }
    resetMemory() {
        this._memory = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get memoryInput() {
        return this._memory;
    }
}
exports.GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesRequestsOutputReference = GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesRequestsOutputReference;
_l = JSII_RTTI_SYMBOL_1;
GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesRequestsOutputReference[_l] = { fqn: "@cdktf/provider-google.gkeHubFeatureMembership.GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesRequestsOutputReference", version: "14.13.1" };
function gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        limits: gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesLimitsToTerraform(struct.limits),
        requests: gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesRequestsToTerraform(struct.requests),
    };
}
exports.gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesToTerraform = gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesToTerraform;
function gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        limits: {
            value: gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesLimitsToHclTerraform(struct.limits),
            isBlock: true,
            type: "list",
            storageClassType: "GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesLimitsList",
        },
        requests: {
            value: gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesRequestsToHclTerraform(struct.requests),
            isBlock: true,
            type: "list",
            storageClassType: "GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesRequestsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesToHclTerraform = gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesToHclTerraform;
class GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // limits - computed: false, optional: true, required: false
        this._limits = new GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesLimitsOutputReference(this, "limits");
        // requests - computed: false, optional: true, required: false
        this._requests = new GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesRequestsOutputReference(this, "requests");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._limits?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.limits = this._limits?.internalValue;
        }
        if (this._requests?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.requests = this._requests?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._limits.internalValue = undefined;
            this._requests.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._limits.internalValue = value.limits;
            this._requests.internalValue = value.requests;
        }
    }
    get limits() {
        return this._limits;
    }
    putLimits(value) {
        this._limits.internalValue = value;
    }
    resetLimits() {
        this._limits.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get limitsInput() {
        return this._limits.internalValue;
    }
    get requests() {
        return this._requests;
    }
    putRequests(value) {
        this._requests.internalValue = value;
    }
    resetRequests() {
        this._requests.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requestsInput() {
        return this._requests.internalValue;
    }
}
exports.GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesOutputReference = GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesOutputReference;
_m = JSII_RTTI_SYMBOL_1;
GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesOutputReference[_m] = { fqn: "@cdktf/provider-google.gkeHubFeatureMembership.GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesOutputReference", version: "14.13.1" };
function gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        effect: cdktf.stringToTerraform(struct.effect),
        key: cdktf.stringToTerraform(struct.key),
        operator: cdktf.stringToTerraform(struct.operator),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationsToTerraform = gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationsToTerraform;
function gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        effect: {
            value: cdktf.stringToHclTerraform(struct.effect),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        key: {
            value: cdktf.stringToHclTerraform(struct.key),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        operator: {
            value: cdktf.stringToHclTerraform(struct.operator),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationsToHclTerraform = gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationsToHclTerraform;
class GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._effect !== undefined) {
            hasAnyValues = true;
            internalValueResult.effect = this._effect;
        }
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._operator !== undefined) {
            hasAnyValues = true;
            internalValueResult.operator = this._operator;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._effect = undefined;
            this._key = undefined;
            this._operator = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._effect = value.effect;
            this._key = value.key;
            this._operator = value.operator;
            this._value = value.value;
        }
    }
    get effect() {
        return this.getStringAttribute('effect');
    }
    set effect(value) {
        this._effect = value;
    }
    resetEffect() {
        this._effect = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get effectInput() {
        return this._effect;
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    resetKey() {
        this._key = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get operator() {
        return this.getStringAttribute('operator');
    }
    set operator(value) {
        this._operator = value;
    }
    resetOperator() {
        this._operator = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get operatorInput() {
        return this._operator;
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    resetValue() {
        this._value = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationsOutputReference = GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationsOutputReference;
_o = JSII_RTTI_SYMBOL_1;
GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationsOutputReference[_o] = { fqn: "@cdktf/provider-google.gkeHubFeatureMembership.GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationsOutputReference", version: "14.13.1" };
class GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationsList = GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationsList;
_p = JSII_RTTI_SYMBOL_1;
GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationsList[_p] = { fqn: "@cdktf/provider-google.gkeHubFeatureMembership.GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationsList", version: "14.13.1" };
function gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        component_name: cdktf.stringToTerraform(struct.componentName),
        pod_affinity: cdktf.stringToTerraform(struct.podAffinity),
        replica_count: cdktf.numberToTerraform(struct.replicaCount),
        container_resources: gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesToTerraform(struct.containerResources),
        pod_tolerations: cdktf.listMapper(gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationsToTerraform, true)(struct.podTolerations),
    };
}
exports.gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsToTerraform = gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsToTerraform;
function gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        component_name: {
            value: cdktf.stringToHclTerraform(struct.componentName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        pod_affinity: {
            value: cdktf.stringToHclTerraform(struct.podAffinity),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        replica_count: {
            value: cdktf.numberToHclTerraform(struct.replicaCount),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        container_resources: {
            value: gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesToHclTerraform(struct.containerResources),
            isBlock: true,
            type: "list",
            storageClassType: "GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesList",
        },
        pod_tolerations: {
            value: cdktf.listMapperHcl(gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationsToHclTerraform, true)(struct.podTolerations),
            isBlock: true,
            type: "list",
            storageClassType: "GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsToHclTerraform = gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsToHclTerraform;
class GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // container_resources - computed: false, optional: true, required: false
        this._containerResources = new GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsContainerResourcesOutputReference(this, "container_resources");
        // pod_tolerations - computed: false, optional: true, required: false
        this._podTolerations = new GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsPodTolerationsList(this, "pod_tolerations", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._componentName !== undefined) {
            hasAnyValues = true;
            internalValueResult.componentName = this._componentName;
        }
        if (this._podAffinity !== undefined) {
            hasAnyValues = true;
            internalValueResult.podAffinity = this._podAffinity;
        }
        if (this._replicaCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.replicaCount = this._replicaCount;
        }
        if (this._containerResources?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.containerResources = this._containerResources?.internalValue;
        }
        if (this._podTolerations?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.podTolerations = this._podTolerations?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._componentName = undefined;
            this._podAffinity = undefined;
            this._replicaCount = undefined;
            this._containerResources.internalValue = undefined;
            this._podTolerations.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._componentName = value.componentName;
            this._podAffinity = value.podAffinity;
            this._replicaCount = value.replicaCount;
            this._containerResources.internalValue = value.containerResources;
            this._podTolerations.internalValue = value.podTolerations;
        }
    }
    get componentName() {
        return this.getStringAttribute('component_name');
    }
    set componentName(value) {
        this._componentName = value;
    }
    // Temporarily expose input value. Use with caution.
    get componentNameInput() {
        return this._componentName;
    }
    get podAffinity() {
        return this.getStringAttribute('pod_affinity');
    }
    set podAffinity(value) {
        this._podAffinity = value;
    }
    resetPodAffinity() {
        this._podAffinity = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get podAffinityInput() {
        return this._podAffinity;
    }
    get replicaCount() {
        return this.getNumberAttribute('replica_count');
    }
    set replicaCount(value) {
        this._replicaCount = value;
    }
    resetReplicaCount() {
        this._replicaCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get replicaCountInput() {
        return this._replicaCount;
    }
    get containerResources() {
        return this._containerResources;
    }
    putContainerResources(value) {
        this._containerResources.internalValue = value;
    }
    resetContainerResources() {
        this._containerResources.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get containerResourcesInput() {
        return this._containerResources.internalValue;
    }
    get podTolerations() {
        return this._podTolerations;
    }
    putPodTolerations(value) {
        this._podTolerations.internalValue = value;
    }
    resetPodTolerations() {
        this._podTolerations.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get podTolerationsInput() {
        return this._podTolerations.internalValue;
    }
}
exports.GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsOutputReference = GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsOutputReference;
_q = JSII_RTTI_SYMBOL_1;
GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsOutputReference[_q] = { fqn: "@cdktf/provider-google.gkeHubFeatureMembership.GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsOutputReference", version: "14.13.1" };
class GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsList = GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsList;
_r = JSII_RTTI_SYMBOL_1;
GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsList[_r] = { fqn: "@cdktf/provider-google.gkeHubFeatureMembership.GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsList", version: "14.13.1" };
function gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigMonitoringToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        backends: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.backends),
    };
}
exports.gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigMonitoringToTerraform = gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigMonitoringToTerraform;
function gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigMonitoringToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        backends: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.backends),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigMonitoringToHclTerraform = gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigMonitoringToHclTerraform;
class GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigMonitoringOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._backends !== undefined) {
            hasAnyValues = true;
            internalValueResult.backends = this._backends;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._backends = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._backends = value.backends;
        }
    }
    get backends() {
        return this.getListAttribute('backends');
    }
    set backends(value) {
        this._backends = value;
    }
    resetBackends() {
        this._backends = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get backendsInput() {
        return this._backends;
    }
}
exports.GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigMonitoringOutputReference = GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigMonitoringOutputReference;
_s = JSII_RTTI_SYMBOL_1;
GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigMonitoringOutputReference[_s] = { fqn: "@cdktf/provider-google.gkeHubFeatureMembership.GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigMonitoringOutputReference", version: "14.13.1" };
function gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bundle_name: cdktf.stringToTerraform(struct.bundleName),
        exempted_namespaces: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.exemptedNamespaces),
    };
}
exports.gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesToTerraform = gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesToTerraform;
function gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        bundle_name: {
            value: cdktf.stringToHclTerraform(struct.bundleName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        exempted_namespaces: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.exemptedNamespaces),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesToHclTerraform = gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesToHclTerraform;
class GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bundleName !== undefined) {
            hasAnyValues = true;
            internalValueResult.bundleName = this._bundleName;
        }
        if (this._exemptedNamespaces !== undefined) {
            hasAnyValues = true;
            internalValueResult.exemptedNamespaces = this._exemptedNamespaces;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._bundleName = undefined;
            this._exemptedNamespaces = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._bundleName = value.bundleName;
            this._exemptedNamespaces = value.exemptedNamespaces;
        }
    }
    get bundleName() {
        return this.getStringAttribute('bundle_name');
    }
    set bundleName(value) {
        this._bundleName = value;
    }
    // Temporarily expose input value. Use with caution.
    get bundleNameInput() {
        return this._bundleName;
    }
    get exemptedNamespaces() {
        return this.getListAttribute('exempted_namespaces');
    }
    set exemptedNamespaces(value) {
        this._exemptedNamespaces = value;
    }
    resetExemptedNamespaces() {
        this._exemptedNamespaces = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get exemptedNamespacesInput() {
        return this._exemptedNamespaces;
    }
}
exports.GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesOutputReference = GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesOutputReference;
_t = JSII_RTTI_SYMBOL_1;
GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesOutputReference[_t] = { fqn: "@cdktf/provider-google.gkeHubFeatureMembership.GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesOutputReference", version: "14.13.1" };
class GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesList = GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesList;
_u = JSII_RTTI_SYMBOL_1;
GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesList[_u] = { fqn: "@cdktf/provider-google.gkeHubFeatureMembership.GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesList", version: "14.13.1" };
function gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        installation: cdktf.stringToTerraform(struct.installation),
    };
}
exports.gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryToTerraform = gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryToTerraform;
function gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        installation: {
            value: cdktf.stringToHclTerraform(struct.installation),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryToHclTerraform = gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryToHclTerraform;
class GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._installation !== undefined) {
            hasAnyValues = true;
            internalValueResult.installation = this._installation;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._installation = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._installation = value.installation;
        }
    }
    get installation() {
        return this.getStringAttribute('installation');
    }
    set installation(value) {
        this._installation = value;
    }
    resetInstallation() {
        this._installation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get installationInput() {
        return this._installation;
    }
}
exports.GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryOutputReference = GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryOutputReference;
_v = JSII_RTTI_SYMBOL_1;
GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryOutputReference[_v] = { fqn: "@cdktf/provider-google.gkeHubFeatureMembership.GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryOutputReference", version: "14.13.1" };
function gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        bundles: cdktf.listMapper(gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesToTerraform, true)(struct.bundles),
        template_library: gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryToTerraform(struct.templateLibrary),
    };
}
exports.gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentToTerraform = gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentToTerraform;
function gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        bundles: {
            value: cdktf.listMapperHcl(gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesToHclTerraform, true)(struct.bundles),
            isBlock: true,
            type: "set",
            storageClassType: "GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesList",
        },
        template_library: {
            value: gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryToHclTerraform(struct.templateLibrary),
            isBlock: true,
            type: "list",
            storageClassType: "GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentToHclTerraform = gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentToHclTerraform;
class GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // bundles - computed: false, optional: true, required: false
        this._bundles = new GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentBundlesList(this, "bundles", true);
        // template_library - computed: false, optional: true, required: false
        this._templateLibrary = new GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryOutputReference(this, "template_library");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._bundles?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.bundles = this._bundles?.internalValue;
        }
        if (this._templateLibrary?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.templateLibrary = this._templateLibrary?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._bundles.internalValue = undefined;
            this._templateLibrary.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._bundles.internalValue = value.bundles;
            this._templateLibrary.internalValue = value.templateLibrary;
        }
    }
    get bundles() {
        return this._bundles;
    }
    putBundles(value) {
        this._bundles.internalValue = value;
    }
    resetBundles() {
        this._bundles.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bundlesInput() {
        return this._bundles.internalValue;
    }
    get templateLibrary() {
        return this._templateLibrary;
    }
    putTemplateLibrary(value) {
        this._templateLibrary.internalValue = value;
    }
    resetTemplateLibrary() {
        this._templateLibrary.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get templateLibraryInput() {
        return this._templateLibrary.internalValue;
    }
}
exports.GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentOutputReference = GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentOutputReference;
_w = JSII_RTTI_SYMBOL_1;
GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentOutputReference[_w] = { fqn: "@cdktf/provider-google.gkeHubFeatureMembership.GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentOutputReference", version: "14.13.1" };
function gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        audit_interval_seconds: cdktf.numberToTerraform(struct.auditIntervalSeconds),
        constraint_violation_limit: cdktf.numberToTerraform(struct.constraintViolationLimit),
        exemptable_namespaces: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.exemptableNamespaces),
        install_spec: cdktf.stringToTerraform(struct.installSpec),
        log_denies_enabled: cdktf.booleanToTerraform(struct.logDeniesEnabled),
        mutation_enabled: cdktf.booleanToTerraform(struct.mutationEnabled),
        referential_rules_enabled: cdktf.booleanToTerraform(struct.referentialRulesEnabled),
        deployment_configs: cdktf.listMapper(gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsToTerraform, true)(struct.deploymentConfigs),
        monitoring: gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigMonitoringToTerraform(struct.monitoring),
        policy_content: gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentToTerraform(struct.policyContent),
    };
}
exports.gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigToTerraform = gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigToTerraform;
function gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        audit_interval_seconds: {
            value: cdktf.numberToHclTerraform(struct.auditIntervalSeconds),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        constraint_violation_limit: {
            value: cdktf.numberToHclTerraform(struct.constraintViolationLimit),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        exemptable_namespaces: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.exemptableNamespaces),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        install_spec: {
            value: cdktf.stringToHclTerraform(struct.installSpec),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        log_denies_enabled: {
            value: cdktf.booleanToHclTerraform(struct.logDeniesEnabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        mutation_enabled: {
            value: cdktf.booleanToHclTerraform(struct.mutationEnabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        referential_rules_enabled: {
            value: cdktf.booleanToHclTerraform(struct.referentialRulesEnabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        deployment_configs: {
            value: cdktf.listMapperHcl(gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsToHclTerraform, true)(struct.deploymentConfigs),
            isBlock: true,
            type: "set",
            storageClassType: "GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsList",
        },
        monitoring: {
            value: gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigMonitoringToHclTerraform(struct.monitoring),
            isBlock: true,
            type: "list",
            storageClassType: "GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigMonitoringList",
        },
        policy_content: {
            value: gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentToHclTerraform(struct.policyContent),
            isBlock: true,
            type: "list",
            storageClassType: "GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigToHclTerraform = gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigToHclTerraform;
class GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // deployment_configs - computed: false, optional: true, required: false
        this._deploymentConfigs = new GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigsList(this, "deployment_configs", true);
        // monitoring - computed: false, optional: true, required: false
        this._monitoring = new GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigMonitoringOutputReference(this, "monitoring");
        // policy_content - computed: false, optional: true, required: false
        this._policyContent = new GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentOutputReference(this, "policy_content");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._auditIntervalSeconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.auditIntervalSeconds = this._auditIntervalSeconds;
        }
        if (this._constraintViolationLimit !== undefined) {
            hasAnyValues = true;
            internalValueResult.constraintViolationLimit = this._constraintViolationLimit;
        }
        if (this._exemptableNamespaces !== undefined) {
            hasAnyValues = true;
            internalValueResult.exemptableNamespaces = this._exemptableNamespaces;
        }
        if (this._installSpec !== undefined) {
            hasAnyValues = true;
            internalValueResult.installSpec = this._installSpec;
        }
        if (this._logDeniesEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.logDeniesEnabled = this._logDeniesEnabled;
        }
        if (this._mutationEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.mutationEnabled = this._mutationEnabled;
        }
        if (this._referentialRulesEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.referentialRulesEnabled = this._referentialRulesEnabled;
        }
        if (this._deploymentConfigs?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.deploymentConfigs = this._deploymentConfigs?.internalValue;
        }
        if (this._monitoring?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.monitoring = this._monitoring?.internalValue;
        }
        if (this._policyContent?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.policyContent = this._policyContent?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._auditIntervalSeconds = undefined;
            this._constraintViolationLimit = undefined;
            this._exemptableNamespaces = undefined;
            this._installSpec = undefined;
            this._logDeniesEnabled = undefined;
            this._mutationEnabled = undefined;
            this._referentialRulesEnabled = undefined;
            this._deploymentConfigs.internalValue = undefined;
            this._monitoring.internalValue = undefined;
            this._policyContent.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._auditIntervalSeconds = value.auditIntervalSeconds;
            this._constraintViolationLimit = value.constraintViolationLimit;
            this._exemptableNamespaces = value.exemptableNamespaces;
            this._installSpec = value.installSpec;
            this._logDeniesEnabled = value.logDeniesEnabled;
            this._mutationEnabled = value.mutationEnabled;
            this._referentialRulesEnabled = value.referentialRulesEnabled;
            this._deploymentConfigs.internalValue = value.deploymentConfigs;
            this._monitoring.internalValue = value.monitoring;
            this._policyContent.internalValue = value.policyContent;
        }
    }
    get auditIntervalSeconds() {
        return this.getNumberAttribute('audit_interval_seconds');
    }
    set auditIntervalSeconds(value) {
        this._auditIntervalSeconds = value;
    }
    resetAuditIntervalSeconds() {
        this._auditIntervalSeconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get auditIntervalSecondsInput() {
        return this._auditIntervalSeconds;
    }
    get constraintViolationLimit() {
        return this.getNumberAttribute('constraint_violation_limit');
    }
    set constraintViolationLimit(value) {
        this._constraintViolationLimit = value;
    }
    resetConstraintViolationLimit() {
        this._constraintViolationLimit = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get constraintViolationLimitInput() {
        return this._constraintViolationLimit;
    }
    get exemptableNamespaces() {
        return this.getListAttribute('exemptable_namespaces');
    }
    set exemptableNamespaces(value) {
        this._exemptableNamespaces = value;
    }
    resetExemptableNamespaces() {
        this._exemptableNamespaces = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get exemptableNamespacesInput() {
        return this._exemptableNamespaces;
    }
    get installSpec() {
        return this.getStringAttribute('install_spec');
    }
    set installSpec(value) {
        this._installSpec = value;
    }
    resetInstallSpec() {
        this._installSpec = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get installSpecInput() {
        return this._installSpec;
    }
    get logDeniesEnabled() {
        return this.getBooleanAttribute('log_denies_enabled');
    }
    set logDeniesEnabled(value) {
        this._logDeniesEnabled = value;
    }
    resetLogDeniesEnabled() {
        this._logDeniesEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get logDeniesEnabledInput() {
        return this._logDeniesEnabled;
    }
    get mutationEnabled() {
        return this.getBooleanAttribute('mutation_enabled');
    }
    set mutationEnabled(value) {
        this._mutationEnabled = value;
    }
    resetMutationEnabled() {
        this._mutationEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get mutationEnabledInput() {
        return this._mutationEnabled;
    }
    get referentialRulesEnabled() {
        return this.getBooleanAttribute('referential_rules_enabled');
    }
    set referentialRulesEnabled(value) {
        this._referentialRulesEnabled = value;
    }
    resetReferentialRulesEnabled() {
        this._referentialRulesEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get referentialRulesEnabledInput() {
        return this._referentialRulesEnabled;
    }
    get deploymentConfigs() {
        return this._deploymentConfigs;
    }
    putDeploymentConfigs(value) {
        this._deploymentConfigs.internalValue = value;
    }
    resetDeploymentConfigs() {
        this._deploymentConfigs.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deploymentConfigsInput() {
        return this._deploymentConfigs.internalValue;
    }
    get monitoring() {
        return this._monitoring;
    }
    putMonitoring(value) {
        this._monitoring.internalValue = value;
    }
    resetMonitoring() {
        this._monitoring.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get monitoringInput() {
        return this._monitoring.internalValue;
    }
    get policyContent() {
        return this._policyContent;
    }
    putPolicyContent(value) {
        this._policyContent.internalValue = value;
    }
    resetPolicyContent() {
        this._policyContent.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get policyContentInput() {
        return this._policyContent.internalValue;
    }
}
exports.GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigOutputReference = GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigOutputReference;
_x = JSII_RTTI_SYMBOL_1;
GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigOutputReference[_x] = { fqn: "@cdktf/provider-google.gkeHubFeatureMembership.GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigOutputReference", version: "14.13.1" };
function gkeHubFeatureMembershipPolicycontrollerToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        version: cdktf.stringToTerraform(struct.version),
        policy_controller_hub_config: gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigToTerraform(struct.policyControllerHubConfig),
    };
}
exports.gkeHubFeatureMembershipPolicycontrollerToTerraform = gkeHubFeatureMembershipPolicycontrollerToTerraform;
function gkeHubFeatureMembershipPolicycontrollerToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        version: {
            value: cdktf.stringToHclTerraform(struct.version),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        policy_controller_hub_config: {
            value: gkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigToHclTerraform(struct.policyControllerHubConfig),
            isBlock: true,
            type: "list",
            storageClassType: "GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureMembershipPolicycontrollerToHclTerraform = gkeHubFeatureMembershipPolicycontrollerToHclTerraform;
class GkeHubFeatureMembershipPolicycontrollerOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // policy_controller_hub_config - computed: false, optional: false, required: true
        this._policyControllerHubConfig = new GkeHubFeatureMembershipPolicycontrollerPolicyControllerHubConfigOutputReference(this, "policy_controller_hub_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._version !== undefined) {
            hasAnyValues = true;
            internalValueResult.version = this._version;
        }
        if (this._policyControllerHubConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.policyControllerHubConfig = this._policyControllerHubConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._version = undefined;
            this._policyControllerHubConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._version = value.version;
            this._policyControllerHubConfig.internalValue = value.policyControllerHubConfig;
        }
    }
    get version() {
        return this.getStringAttribute('version');
    }
    set version(value) {
        this._version = value;
    }
    resetVersion() {
        this._version = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get versionInput() {
        return this._version;
    }
    get policyControllerHubConfig() {
        return this._policyControllerHubConfig;
    }
    putPolicyControllerHubConfig(value) {
        this._policyControllerHubConfig.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get policyControllerHubConfigInput() {
        return this._policyControllerHubConfig.internalValue;
    }
}
exports.GkeHubFeatureMembershipPolicycontrollerOutputReference = GkeHubFeatureMembershipPolicycontrollerOutputReference;
_y = JSII_RTTI_SYMBOL_1;
GkeHubFeatureMembershipPolicycontrollerOutputReference[_y] = { fqn: "@cdktf/provider-google.gkeHubFeatureMembership.GkeHubFeatureMembershipPolicycontrollerOutputReference", version: "14.13.1" };
function gkeHubFeatureMembershipTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.gkeHubFeatureMembershipTimeoutsToTerraform = gkeHubFeatureMembershipTimeoutsToTerraform;
function gkeHubFeatureMembershipTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.gkeHubFeatureMembershipTimeoutsToHclTerraform = gkeHubFeatureMembershipTimeoutsToHclTerraform;
class GkeHubFeatureMembershipTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.GkeHubFeatureMembershipTimeoutsOutputReference = GkeHubFeatureMembershipTimeoutsOutputReference;
_z = JSII_RTTI_SYMBOL_1;
GkeHubFeatureMembershipTimeoutsOutputReference[_z] = { fqn: "@cdktf/provider-google.gkeHubFeatureMembership.GkeHubFeatureMembershipTimeoutsOutputReference", version: "14.13.1" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/gke_hub_feature_membership google_gke_hub_feature_membership}
*/
class GkeHubFeatureMembership extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a GkeHubFeatureMembership resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the GkeHubFeatureMembership to import
    * @param importFromId The id of the existing GkeHubFeatureMembership that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/gke_hub_feature_membership#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the GkeHubFeatureMembership to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_gke_hub_feature_membership", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/gke_hub_feature_membership google_gke_hub_feature_membership} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options GkeHubFeatureMembershipConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_gke_hub_feature_membership',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // configmanagement - computed: false, optional: true, required: false
        this._configmanagement = new GkeHubFeatureMembershipConfigmanagementOutputReference(this, "configmanagement");
        // mesh - computed: false, optional: true, required: false
        this._mesh = new GkeHubFeatureMembershipMeshOutputReference(this, "mesh");
        // policycontroller - computed: false, optional: true, required: false
        this._policycontroller = new GkeHubFeatureMembershipPolicycontrollerOutputReference(this, "policycontroller");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new GkeHubFeatureMembershipTimeoutsOutputReference(this, "timeouts");
        this._feature = config.feature;
        this._id = config.id;
        this._location = config.location;
        this._membership = config.membership;
        this._membershipLocation = config.membershipLocation;
        this._project = config.project;
        this._configmanagement.internalValue = config.configmanagement;
        this._mesh.internalValue = config.mesh;
        this._policycontroller.internalValue = config.policycontroller;
        this._timeouts.internalValue = config.timeouts;
    }
    get feature() {
        return this.getStringAttribute('feature');
    }
    set feature(value) {
        this._feature = value;
    }
    // Temporarily expose input value. Use with caution.
    get featureInput() {
        return this._feature;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    get membership() {
        return this.getStringAttribute('membership');
    }
    set membership(value) {
        this._membership = value;
    }
    // Temporarily expose input value. Use with caution.
    get membershipInput() {
        return this._membership;
    }
    get membershipLocation() {
        return this.getStringAttribute('membership_location');
    }
    set membershipLocation(value) {
        this._membershipLocation = value;
    }
    resetMembershipLocation() {
        this._membershipLocation = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get membershipLocationInput() {
        return this._membershipLocation;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get configmanagement() {
        return this._configmanagement;
    }
    putConfigmanagement(value) {
        this._configmanagement.internalValue = value;
    }
    resetConfigmanagement() {
        this._configmanagement.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get configmanagementInput() {
        return this._configmanagement.internalValue;
    }
    get mesh() {
        return this._mesh;
    }
    putMesh(value) {
        this._mesh.internalValue = value;
    }
    resetMesh() {
        this._mesh.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get meshInput() {
        return this._mesh.internalValue;
    }
    get policycontroller() {
        return this._policycontroller;
    }
    putPolicycontroller(value) {
        this._policycontroller.internalValue = value;
    }
    resetPolicycontroller() {
        this._policycontroller.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get policycontrollerInput() {
        return this._policycontroller.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            feature: cdktf.stringToTerraform(this._feature),
            id: cdktf.stringToTerraform(this._id),
            location: cdktf.stringToTerraform(this._location),
            membership: cdktf.stringToTerraform(this._membership),
            membership_location: cdktf.stringToTerraform(this._membershipLocation),
            project: cdktf.stringToTerraform(this._project),
            configmanagement: gkeHubFeatureMembershipConfigmanagementToTerraform(this._configmanagement.internalValue),
            mesh: gkeHubFeatureMembershipMeshToTerraform(this._mesh.internalValue),
            policycontroller: gkeHubFeatureMembershipPolicycontrollerToTerraform(this._policycontroller.internalValue),
            timeouts: gkeHubFeatureMembershipTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            feature: {
                value: cdktf.stringToHclTerraform(this._feature),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            location: {
                value: cdktf.stringToHclTerraform(this._location),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            membership: {
                value: cdktf.stringToHclTerraform(this._membership),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            membership_location: {
                value: cdktf.stringToHclTerraform(this._membershipLocation),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            project: {
                value: cdktf.stringToHclTerraform(this._project),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            configmanagement: {
                value: gkeHubFeatureMembershipConfigmanagementToHclTerraform(this._configmanagement.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "GkeHubFeatureMembershipConfigmanagementList",
            },
            mesh: {
                value: gkeHubFeatureMembershipMeshToHclTerraform(this._mesh.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "GkeHubFeatureMembershipMeshList",
            },
            policycontroller: {
                value: gkeHubFeatureMembershipPolicycontrollerToHclTerraform(this._policycontroller.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "GkeHubFeatureMembershipPolicycontrollerList",
            },
            timeouts: {
                value: gkeHubFeatureMembershipTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "GkeHubFeatureMembershipTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.GkeHubFeatureMembership = GkeHubFeatureMembership;
_0 = JSII_RTTI_SYMBOL_1;
GkeHubFeatureMembership[_0] = { fqn: "@cdktf/provider-google.gkeHubFeatureMembership.GkeHubFeatureMembership", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
GkeHubFeatureMembership.tfResourceType = "google_gke_hub_feature_membership";
//# sourceMappingURL=data:application/json;base64,