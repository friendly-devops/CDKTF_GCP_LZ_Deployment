"use strict";
var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OracleDatabaseCloudExadataInfrastructure = exports.OracleDatabaseCloudExadataInfrastructureTimeoutsOutputReference = exports.oracleDatabaseCloudExadataInfrastructureTimeoutsToHclTerraform = exports.oracleDatabaseCloudExadataInfrastructureTimeoutsToTerraform = exports.OracleDatabaseCloudExadataInfrastructurePropertiesOutputReference = exports.oracleDatabaseCloudExadataInfrastructurePropertiesToHclTerraform = exports.oracleDatabaseCloudExadataInfrastructurePropertiesToTerraform = exports.OracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowOutputReference = exports.oracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowToHclTerraform = exports.oracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowToTerraform = exports.OracleDatabaseCloudExadataInfrastructurePropertiesCustomerContactsList = exports.OracleDatabaseCloudExadataInfrastructurePropertiesCustomerContactsOutputReference = exports.oracleDatabaseCloudExadataInfrastructurePropertiesCustomerContactsToHclTerraform = exports.oracleDatabaseCloudExadataInfrastructurePropertiesCustomerContactsToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function oracleDatabaseCloudExadataInfrastructurePropertiesCustomerContactsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        email: cdktf.stringToTerraform(struct.email),
    };
}
exports.oracleDatabaseCloudExadataInfrastructurePropertiesCustomerContactsToTerraform = oracleDatabaseCloudExadataInfrastructurePropertiesCustomerContactsToTerraform;
function oracleDatabaseCloudExadataInfrastructurePropertiesCustomerContactsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        email: {
            value: cdktf.stringToHclTerraform(struct.email),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.oracleDatabaseCloudExadataInfrastructurePropertiesCustomerContactsToHclTerraform = oracleDatabaseCloudExadataInfrastructurePropertiesCustomerContactsToHclTerraform;
class OracleDatabaseCloudExadataInfrastructurePropertiesCustomerContactsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._email !== undefined) {
            hasAnyValues = true;
            internalValueResult.email = this._email;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._email = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._email = value.email;
        }
    }
    get email() {
        return this.getStringAttribute('email');
    }
    set email(value) {
        this._email = value;
    }
    // Temporarily expose input value. Use with caution.
    get emailInput() {
        return this._email;
    }
}
exports.OracleDatabaseCloudExadataInfrastructurePropertiesCustomerContactsOutputReference = OracleDatabaseCloudExadataInfrastructurePropertiesCustomerContactsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
OracleDatabaseCloudExadataInfrastructurePropertiesCustomerContactsOutputReference[_a] = { fqn: "@cdktf/provider-google.oracleDatabaseCloudExadataInfrastructure.OracleDatabaseCloudExadataInfrastructurePropertiesCustomerContactsOutputReference", version: "14.13.1" };
class OracleDatabaseCloudExadataInfrastructurePropertiesCustomerContactsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new OracleDatabaseCloudExadataInfrastructurePropertiesCustomerContactsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.OracleDatabaseCloudExadataInfrastructurePropertiesCustomerContactsList = OracleDatabaseCloudExadataInfrastructurePropertiesCustomerContactsList;
_b = JSII_RTTI_SYMBOL_1;
OracleDatabaseCloudExadataInfrastructurePropertiesCustomerContactsList[_b] = { fqn: "@cdktf/provider-google.oracleDatabaseCloudExadataInfrastructure.OracleDatabaseCloudExadataInfrastructurePropertiesCustomerContactsList", version: "14.13.1" };
function oracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        custom_action_timeout_mins: cdktf.numberToTerraform(struct.customActionTimeoutMins),
        days_of_week: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.daysOfWeek),
        hours_of_day: cdktf.listMapper(cdktf.numberToTerraform, false)(struct.hoursOfDay),
        is_custom_action_timeout_enabled: cdktf.booleanToTerraform(struct.isCustomActionTimeoutEnabled),
        lead_time_week: cdktf.numberToTerraform(struct.leadTimeWeek),
        months: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.months),
        patching_mode: cdktf.stringToTerraform(struct.patchingMode),
        preference: cdktf.stringToTerraform(struct.preference),
        weeks_of_month: cdktf.listMapper(cdktf.numberToTerraform, false)(struct.weeksOfMonth),
    };
}
exports.oracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowToTerraform = oracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowToTerraform;
function oracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        custom_action_timeout_mins: {
            value: cdktf.numberToHclTerraform(struct.customActionTimeoutMins),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        days_of_week: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.daysOfWeek),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        hours_of_day: {
            value: cdktf.listMapperHcl(cdktf.numberToHclTerraform, false)(struct.hoursOfDay),
            isBlock: false,
            type: "list",
            storageClassType: "numberList",
        },
        is_custom_action_timeout_enabled: {
            value: cdktf.booleanToHclTerraform(struct.isCustomActionTimeoutEnabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        lead_time_week: {
            value: cdktf.numberToHclTerraform(struct.leadTimeWeek),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        months: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.months),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        patching_mode: {
            value: cdktf.stringToHclTerraform(struct.patchingMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        preference: {
            value: cdktf.stringToHclTerraform(struct.preference),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        weeks_of_month: {
            value: cdktf.listMapperHcl(cdktf.numberToHclTerraform, false)(struct.weeksOfMonth),
            isBlock: false,
            type: "list",
            storageClassType: "numberList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.oracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowToHclTerraform = oracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowToHclTerraform;
class OracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._customActionTimeoutMins !== undefined) {
            hasAnyValues = true;
            internalValueResult.customActionTimeoutMins = this._customActionTimeoutMins;
        }
        if (this._daysOfWeek !== undefined) {
            hasAnyValues = true;
            internalValueResult.daysOfWeek = this._daysOfWeek;
        }
        if (this._hoursOfDay !== undefined) {
            hasAnyValues = true;
            internalValueResult.hoursOfDay = this._hoursOfDay;
        }
        if (this._isCustomActionTimeoutEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.isCustomActionTimeoutEnabled = this._isCustomActionTimeoutEnabled;
        }
        if (this._leadTimeWeek !== undefined) {
            hasAnyValues = true;
            internalValueResult.leadTimeWeek = this._leadTimeWeek;
        }
        if (this._months !== undefined) {
            hasAnyValues = true;
            internalValueResult.months = this._months;
        }
        if (this._patchingMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.patchingMode = this._patchingMode;
        }
        if (this._preference !== undefined) {
            hasAnyValues = true;
            internalValueResult.preference = this._preference;
        }
        if (this._weeksOfMonth !== undefined) {
            hasAnyValues = true;
            internalValueResult.weeksOfMonth = this._weeksOfMonth;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._customActionTimeoutMins = undefined;
            this._daysOfWeek = undefined;
            this._hoursOfDay = undefined;
            this._isCustomActionTimeoutEnabled = undefined;
            this._leadTimeWeek = undefined;
            this._months = undefined;
            this._patchingMode = undefined;
            this._preference = undefined;
            this._weeksOfMonth = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._customActionTimeoutMins = value.customActionTimeoutMins;
            this._daysOfWeek = value.daysOfWeek;
            this._hoursOfDay = value.hoursOfDay;
            this._isCustomActionTimeoutEnabled = value.isCustomActionTimeoutEnabled;
            this._leadTimeWeek = value.leadTimeWeek;
            this._months = value.months;
            this._patchingMode = value.patchingMode;
            this._preference = value.preference;
            this._weeksOfMonth = value.weeksOfMonth;
        }
    }
    get customActionTimeoutMins() {
        return this.getNumberAttribute('custom_action_timeout_mins');
    }
    set customActionTimeoutMins(value) {
        this._customActionTimeoutMins = value;
    }
    resetCustomActionTimeoutMins() {
        this._customActionTimeoutMins = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customActionTimeoutMinsInput() {
        return this._customActionTimeoutMins;
    }
    get daysOfWeek() {
        return this.getListAttribute('days_of_week');
    }
    set daysOfWeek(value) {
        this._daysOfWeek = value;
    }
    resetDaysOfWeek() {
        this._daysOfWeek = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get daysOfWeekInput() {
        return this._daysOfWeek;
    }
    get hoursOfDay() {
        return this.getNumberListAttribute('hours_of_day');
    }
    set hoursOfDay(value) {
        this._hoursOfDay = value;
    }
    resetHoursOfDay() {
        this._hoursOfDay = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hoursOfDayInput() {
        return this._hoursOfDay;
    }
    get isCustomActionTimeoutEnabled() {
        return this.getBooleanAttribute('is_custom_action_timeout_enabled');
    }
    set isCustomActionTimeoutEnabled(value) {
        this._isCustomActionTimeoutEnabled = value;
    }
    resetIsCustomActionTimeoutEnabled() {
        this._isCustomActionTimeoutEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get isCustomActionTimeoutEnabledInput() {
        return this._isCustomActionTimeoutEnabled;
    }
    get leadTimeWeek() {
        return this.getNumberAttribute('lead_time_week');
    }
    set leadTimeWeek(value) {
        this._leadTimeWeek = value;
    }
    resetLeadTimeWeek() {
        this._leadTimeWeek = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get leadTimeWeekInput() {
        return this._leadTimeWeek;
    }
    get months() {
        return this.getListAttribute('months');
    }
    set months(value) {
        this._months = value;
    }
    resetMonths() {
        this._months = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get monthsInput() {
        return this._months;
    }
    get patchingMode() {
        return this.getStringAttribute('patching_mode');
    }
    set patchingMode(value) {
        this._patchingMode = value;
    }
    resetPatchingMode() {
        this._patchingMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get patchingModeInput() {
        return this._patchingMode;
    }
    get preference() {
        return this.getStringAttribute('preference');
    }
    set preference(value) {
        this._preference = value;
    }
    resetPreference() {
        this._preference = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get preferenceInput() {
        return this._preference;
    }
    get weeksOfMonth() {
        return this.getNumberListAttribute('weeks_of_month');
    }
    set weeksOfMonth(value) {
        this._weeksOfMonth = value;
    }
    resetWeeksOfMonth() {
        this._weeksOfMonth = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get weeksOfMonthInput() {
        return this._weeksOfMonth;
    }
}
exports.OracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowOutputReference = OracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowOutputReference;
_c = JSII_RTTI_SYMBOL_1;
OracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowOutputReference[_c] = { fqn: "@cdktf/provider-google.oracleDatabaseCloudExadataInfrastructure.OracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowOutputReference", version: "14.13.1" };
function oracleDatabaseCloudExadataInfrastructurePropertiesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        compute_count: cdktf.numberToTerraform(struct.computeCount),
        shape: cdktf.stringToTerraform(struct.shape),
        storage_count: cdktf.numberToTerraform(struct.storageCount),
        total_storage_size_gb: cdktf.numberToTerraform(struct.totalStorageSizeGb),
        customer_contacts: cdktf.listMapper(oracleDatabaseCloudExadataInfrastructurePropertiesCustomerContactsToTerraform, true)(struct.customerContacts),
        maintenance_window: oracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowToTerraform(struct.maintenanceWindow),
    };
}
exports.oracleDatabaseCloudExadataInfrastructurePropertiesToTerraform = oracleDatabaseCloudExadataInfrastructurePropertiesToTerraform;
function oracleDatabaseCloudExadataInfrastructurePropertiesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        compute_count: {
            value: cdktf.numberToHclTerraform(struct.computeCount),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        shape: {
            value: cdktf.stringToHclTerraform(struct.shape),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        storage_count: {
            value: cdktf.numberToHclTerraform(struct.storageCount),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        total_storage_size_gb: {
            value: cdktf.numberToHclTerraform(struct.totalStorageSizeGb),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        customer_contacts: {
            value: cdktf.listMapperHcl(oracleDatabaseCloudExadataInfrastructurePropertiesCustomerContactsToHclTerraform, true)(struct.customerContacts),
            isBlock: true,
            type: "list",
            storageClassType: "OracleDatabaseCloudExadataInfrastructurePropertiesCustomerContactsList",
        },
        maintenance_window: {
            value: oracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowToHclTerraform(struct.maintenanceWindow),
            isBlock: true,
            type: "list",
            storageClassType: "OracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.oracleDatabaseCloudExadataInfrastructurePropertiesToHclTerraform = oracleDatabaseCloudExadataInfrastructurePropertiesToHclTerraform;
class OracleDatabaseCloudExadataInfrastructurePropertiesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // customer_contacts - computed: false, optional: true, required: false
        this._customerContacts = new OracleDatabaseCloudExadataInfrastructurePropertiesCustomerContactsList(this, "customer_contacts", false);
        // maintenance_window - computed: false, optional: true, required: false
        this._maintenanceWindow = new OracleDatabaseCloudExadataInfrastructurePropertiesMaintenanceWindowOutputReference(this, "maintenance_window");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._computeCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.computeCount = this._computeCount;
        }
        if (this._shape !== undefined) {
            hasAnyValues = true;
            internalValueResult.shape = this._shape;
        }
        if (this._storageCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.storageCount = this._storageCount;
        }
        if (this._totalStorageSizeGb !== undefined) {
            hasAnyValues = true;
            internalValueResult.totalStorageSizeGb = this._totalStorageSizeGb;
        }
        if (this._customerContacts?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.customerContacts = this._customerContacts?.internalValue;
        }
        if (this._maintenanceWindow?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.maintenanceWindow = this._maintenanceWindow?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._computeCount = undefined;
            this._shape = undefined;
            this._storageCount = undefined;
            this._totalStorageSizeGb = undefined;
            this._customerContacts.internalValue = undefined;
            this._maintenanceWindow.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._computeCount = value.computeCount;
            this._shape = value.shape;
            this._storageCount = value.storageCount;
            this._totalStorageSizeGb = value.totalStorageSizeGb;
            this._customerContacts.internalValue = value.customerContacts;
            this._maintenanceWindow.internalValue = value.maintenanceWindow;
        }
    }
    // activated_storage_count - computed: true, optional: false, required: false
    get activatedStorageCount() {
        return this.getNumberAttribute('activated_storage_count');
    }
    // additional_storage_count - computed: true, optional: false, required: false
    get additionalStorageCount() {
        return this.getNumberAttribute('additional_storage_count');
    }
    // available_storage_size_gb - computed: true, optional: false, required: false
    get availableStorageSizeGb() {
        return this.getNumberAttribute('available_storage_size_gb');
    }
    get computeCount() {
        return this.getNumberAttribute('compute_count');
    }
    set computeCount(value) {
        this._computeCount = value;
    }
    resetComputeCount() {
        this._computeCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get computeCountInput() {
        return this._computeCount;
    }
    // cpu_count - computed: true, optional: false, required: false
    get cpuCount() {
        return this.getNumberAttribute('cpu_count');
    }
    // data_storage_size_tb - computed: true, optional: false, required: false
    get dataStorageSizeTb() {
        return this.getNumberAttribute('data_storage_size_tb');
    }
    // db_node_storage_size_gb - computed: true, optional: false, required: false
    get dbNodeStorageSizeGb() {
        return this.getNumberAttribute('db_node_storage_size_gb');
    }
    // db_server_version - computed: true, optional: false, required: false
    get dbServerVersion() {
        return this.getStringAttribute('db_server_version');
    }
    // max_cpu_count - computed: true, optional: false, required: false
    get maxCpuCount() {
        return this.getNumberAttribute('max_cpu_count');
    }
    // max_data_storage_tb - computed: true, optional: false, required: false
    get maxDataStorageTb() {
        return this.getNumberAttribute('max_data_storage_tb');
    }
    // max_db_node_storage_size_gb - computed: true, optional: false, required: false
    get maxDbNodeStorageSizeGb() {
        return this.getNumberAttribute('max_db_node_storage_size_gb');
    }
    // max_memory_gb - computed: true, optional: false, required: false
    get maxMemoryGb() {
        return this.getNumberAttribute('max_memory_gb');
    }
    // memory_size_gb - computed: true, optional: false, required: false
    get memorySizeGb() {
        return this.getNumberAttribute('memory_size_gb');
    }
    // monthly_db_server_version - computed: true, optional: false, required: false
    get monthlyDbServerVersion() {
        return this.getStringAttribute('monthly_db_server_version');
    }
    // monthly_storage_server_version - computed: true, optional: false, required: false
    get monthlyStorageServerVersion() {
        return this.getStringAttribute('monthly_storage_server_version');
    }
    // next_maintenance_run_id - computed: true, optional: false, required: false
    get nextMaintenanceRunId() {
        return this.getStringAttribute('next_maintenance_run_id');
    }
    // next_maintenance_run_time - computed: true, optional: false, required: false
    get nextMaintenanceRunTime() {
        return this.getStringAttribute('next_maintenance_run_time');
    }
    // next_security_maintenance_run_time - computed: true, optional: false, required: false
    get nextSecurityMaintenanceRunTime() {
        return this.getStringAttribute('next_security_maintenance_run_time');
    }
    // oci_url - computed: true, optional: false, required: false
    get ociUrl() {
        return this.getStringAttribute('oci_url');
    }
    // ocid - computed: true, optional: false, required: false
    get ocid() {
        return this.getStringAttribute('ocid');
    }
    get shape() {
        return this.getStringAttribute('shape');
    }
    set shape(value) {
        this._shape = value;
    }
    // Temporarily expose input value. Use with caution.
    get shapeInput() {
        return this._shape;
    }
    // state - computed: true, optional: false, required: false
    get state() {
        return this.getStringAttribute('state');
    }
    get storageCount() {
        return this.getNumberAttribute('storage_count');
    }
    set storageCount(value) {
        this._storageCount = value;
    }
    resetStorageCount() {
        this._storageCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get storageCountInput() {
        return this._storageCount;
    }
    // storage_server_version - computed: true, optional: false, required: false
    get storageServerVersion() {
        return this.getStringAttribute('storage_server_version');
    }
    get totalStorageSizeGb() {
        return this.getNumberAttribute('total_storage_size_gb');
    }
    set totalStorageSizeGb(value) {
        this._totalStorageSizeGb = value;
    }
    resetTotalStorageSizeGb() {
        this._totalStorageSizeGb = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get totalStorageSizeGbInput() {
        return this._totalStorageSizeGb;
    }
    get customerContacts() {
        return this._customerContacts;
    }
    putCustomerContacts(value) {
        this._customerContacts.internalValue = value;
    }
    resetCustomerContacts() {
        this._customerContacts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get customerContactsInput() {
        return this._customerContacts.internalValue;
    }
    get maintenanceWindow() {
        return this._maintenanceWindow;
    }
    putMaintenanceWindow(value) {
        this._maintenanceWindow.internalValue = value;
    }
    resetMaintenanceWindow() {
        this._maintenanceWindow.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maintenanceWindowInput() {
        return this._maintenanceWindow.internalValue;
    }
}
exports.OracleDatabaseCloudExadataInfrastructurePropertiesOutputReference = OracleDatabaseCloudExadataInfrastructurePropertiesOutputReference;
_d = JSII_RTTI_SYMBOL_1;
OracleDatabaseCloudExadataInfrastructurePropertiesOutputReference[_d] = { fqn: "@cdktf/provider-google.oracleDatabaseCloudExadataInfrastructure.OracleDatabaseCloudExadataInfrastructurePropertiesOutputReference", version: "14.13.1" };
function oracleDatabaseCloudExadataInfrastructureTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.oracleDatabaseCloudExadataInfrastructureTimeoutsToTerraform = oracleDatabaseCloudExadataInfrastructureTimeoutsToTerraform;
function oracleDatabaseCloudExadataInfrastructureTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.oracleDatabaseCloudExadataInfrastructureTimeoutsToHclTerraform = oracleDatabaseCloudExadataInfrastructureTimeoutsToHclTerraform;
class OracleDatabaseCloudExadataInfrastructureTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.OracleDatabaseCloudExadataInfrastructureTimeoutsOutputReference = OracleDatabaseCloudExadataInfrastructureTimeoutsOutputReference;
_e = JSII_RTTI_SYMBOL_1;
OracleDatabaseCloudExadataInfrastructureTimeoutsOutputReference[_e] = { fqn: "@cdktf/provider-google.oracleDatabaseCloudExadataInfrastructure.OracleDatabaseCloudExadataInfrastructureTimeoutsOutputReference", version: "14.13.1" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/oracle_database_cloud_exadata_infrastructure google_oracle_database_cloud_exadata_infrastructure}
*/
class OracleDatabaseCloudExadataInfrastructure extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a OracleDatabaseCloudExadataInfrastructure resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the OracleDatabaseCloudExadataInfrastructure to import
    * @param importFromId The id of the existing OracleDatabaseCloudExadataInfrastructure that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/oracle_database_cloud_exadata_infrastructure#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the OracleDatabaseCloudExadataInfrastructure to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_oracle_database_cloud_exadata_infrastructure", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/oracle_database_cloud_exadata_infrastructure google_oracle_database_cloud_exadata_infrastructure} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options OracleDatabaseCloudExadataInfrastructureConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_oracle_database_cloud_exadata_infrastructure',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // effective_labels - computed: true, optional: false, required: false
        this._effectiveLabels = new cdktf.StringMap(this, "effective_labels");
        // terraform_labels - computed: true, optional: false, required: false
        this._terraformLabels = new cdktf.StringMap(this, "terraform_labels");
        // properties - computed: false, optional: true, required: false
        this._properties = new OracleDatabaseCloudExadataInfrastructurePropertiesOutputReference(this, "properties");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new OracleDatabaseCloudExadataInfrastructureTimeoutsOutputReference(this, "timeouts");
        this._cloudExadataInfrastructureId = config.cloudExadataInfrastructureId;
        this._deletionProtection = config.deletionProtection;
        this._displayName = config.displayName;
        this._gcpOracleZone = config.gcpOracleZone;
        this._id = config.id;
        this._labels = config.labels;
        this._location = config.location;
        this._project = config.project;
        this._properties.internalValue = config.properties;
        this._timeouts.internalValue = config.timeouts;
    }
    get cloudExadataInfrastructureId() {
        return this.getStringAttribute('cloud_exadata_infrastructure_id');
    }
    set cloudExadataInfrastructureId(value) {
        this._cloudExadataInfrastructureId = value;
    }
    // Temporarily expose input value. Use with caution.
    get cloudExadataInfrastructureIdInput() {
        return this._cloudExadataInfrastructureId;
    }
    // create_time - computed: true, optional: false, required: false
    get createTime() {
        return this.getStringAttribute('create_time');
    }
    get deletionProtection() {
        return this.getBooleanAttribute('deletion_protection');
    }
    set deletionProtection(value) {
        this._deletionProtection = value;
    }
    resetDeletionProtection() {
        this._deletionProtection = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deletionProtectionInput() {
        return this._deletionProtection;
    }
    get displayName() {
        return this.getStringAttribute('display_name');
    }
    set displayName(value) {
        this._displayName = value;
    }
    resetDisplayName() {
        this._displayName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get displayNameInput() {
        return this._displayName;
    }
    get effectiveLabels() {
        return this._effectiveLabels;
    }
    // entitlement_id - computed: true, optional: false, required: false
    get entitlementId() {
        return this.getStringAttribute('entitlement_id');
    }
    get gcpOracleZone() {
        return this.getStringAttribute('gcp_oracle_zone');
    }
    set gcpOracleZone(value) {
        this._gcpOracleZone = value;
    }
    resetGcpOracleZone() {
        this._gcpOracleZone = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get gcpOracleZoneInput() {
        return this._gcpOracleZone;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get terraformLabels() {
        return this._terraformLabels;
    }
    get properties() {
        return this._properties;
    }
    putProperties(value) {
        this._properties.internalValue = value;
    }
    resetProperties() {
        this._properties.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get propertiesInput() {
        return this._properties.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            cloud_exadata_infrastructure_id: cdktf.stringToTerraform(this._cloudExadataInfrastructureId),
            deletion_protection: cdktf.booleanToTerraform(this._deletionProtection),
            display_name: cdktf.stringToTerraform(this._displayName),
            gcp_oracle_zone: cdktf.stringToTerraform(this._gcpOracleZone),
            id: cdktf.stringToTerraform(this._id),
            labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._labels),
            location: cdktf.stringToTerraform(this._location),
            project: cdktf.stringToTerraform(this._project),
            properties: oracleDatabaseCloudExadataInfrastructurePropertiesToTerraform(this._properties.internalValue),
            timeouts: oracleDatabaseCloudExadataInfrastructureTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            cloud_exadata_infrastructure_id: {
                value: cdktf.stringToHclTerraform(this._cloudExadataInfrastructureId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            deletion_protection: {
                value: cdktf.booleanToHclTerraform(this._deletionProtection),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            display_name: {
                value: cdktf.stringToHclTerraform(this._displayName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            gcp_oracle_zone: {
                value: cdktf.stringToHclTerraform(this._gcpOracleZone),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            labels: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._labels),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            location: {
                value: cdktf.stringToHclTerraform(this._location),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            project: {
                value: cdktf.stringToHclTerraform(this._project),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            properties: {
                value: oracleDatabaseCloudExadataInfrastructurePropertiesToHclTerraform(this._properties.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "OracleDatabaseCloudExadataInfrastructurePropertiesList",
            },
            timeouts: {
                value: oracleDatabaseCloudExadataInfrastructureTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "OracleDatabaseCloudExadataInfrastructureTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.OracleDatabaseCloudExadataInfrastructure = OracleDatabaseCloudExadataInfrastructure;
_f = JSII_RTTI_SYMBOL_1;
OracleDatabaseCloudExadataInfrastructure[_f] = { fqn: "@cdktf/provider-google.oracleDatabaseCloudExadataInfrastructure.OracleDatabaseCloudExadataInfrastructure", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
OracleDatabaseCloudExadataInfrastructure.tfResourceType = "google_oracle_database_cloud_exadata_infrastructure";
//# sourceMappingURL=data:application/json;base64,