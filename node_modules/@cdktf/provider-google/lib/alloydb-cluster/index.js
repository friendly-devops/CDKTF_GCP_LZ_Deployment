"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9;
Object.defineProperty(exports, "__esModule", { value: true });
exports.alloydbClusterEncryptionConfigToTerraform = exports.AlloydbClusterContinuousBackupConfigOutputReference = exports.alloydbClusterContinuousBackupConfigToHclTerraform = exports.alloydbClusterContinuousBackupConfigToTerraform = exports.AlloydbClusterContinuousBackupConfigEncryptionConfigOutputReference = exports.alloydbClusterContinuousBackupConfigEncryptionConfigToHclTerraform = exports.alloydbClusterContinuousBackupConfigEncryptionConfigToTerraform = exports.AlloydbClusterAutomatedBackupPolicyOutputReference = exports.alloydbClusterAutomatedBackupPolicyToHclTerraform = exports.alloydbClusterAutomatedBackupPolicyToTerraform = exports.AlloydbClusterAutomatedBackupPolicyWeeklyScheduleOutputReference = exports.alloydbClusterAutomatedBackupPolicyWeeklyScheduleToHclTerraform = exports.alloydbClusterAutomatedBackupPolicyWeeklyScheduleToTerraform = exports.AlloydbClusterAutomatedBackupPolicyWeeklyScheduleStartTimesList = exports.AlloydbClusterAutomatedBackupPolicyWeeklyScheduleStartTimesOutputReference = exports.alloydbClusterAutomatedBackupPolicyWeeklyScheduleStartTimesToHclTerraform = exports.alloydbClusterAutomatedBackupPolicyWeeklyScheduleStartTimesToTerraform = exports.AlloydbClusterAutomatedBackupPolicyTimeBasedRetentionOutputReference = exports.alloydbClusterAutomatedBackupPolicyTimeBasedRetentionToHclTerraform = exports.alloydbClusterAutomatedBackupPolicyTimeBasedRetentionToTerraform = exports.AlloydbClusterAutomatedBackupPolicyQuantityBasedRetentionOutputReference = exports.alloydbClusterAutomatedBackupPolicyQuantityBasedRetentionToHclTerraform = exports.alloydbClusterAutomatedBackupPolicyQuantityBasedRetentionToTerraform = exports.AlloydbClusterAutomatedBackupPolicyEncryptionConfigOutputReference = exports.alloydbClusterAutomatedBackupPolicyEncryptionConfigToHclTerraform = exports.alloydbClusterAutomatedBackupPolicyEncryptionConfigToTerraform = exports.AlloydbClusterTrialMetadataList = exports.AlloydbClusterTrialMetadataOutputReference = exports.alloydbClusterTrialMetadataToHclTerraform = exports.alloydbClusterTrialMetadataToTerraform = exports.AlloydbClusterMigrationSourceList = exports.AlloydbClusterMigrationSourceOutputReference = exports.alloydbClusterMigrationSourceToHclTerraform = exports.alloydbClusterMigrationSourceToTerraform = exports.AlloydbClusterEncryptionInfoList = exports.AlloydbClusterEncryptionInfoOutputReference = exports.alloydbClusterEncryptionInfoToHclTerraform = exports.alloydbClusterEncryptionInfoToTerraform = exports.AlloydbClusterContinuousBackupInfoList = exports.AlloydbClusterContinuousBackupInfoOutputReference = exports.alloydbClusterContinuousBackupInfoToHclTerraform = exports.alloydbClusterContinuousBackupInfoToTerraform = exports.AlloydbClusterContinuousBackupInfoEncryptionInfoList = exports.AlloydbClusterContinuousBackupInfoEncryptionInfoOutputReference = exports.alloydbClusterContinuousBackupInfoEncryptionInfoToHclTerraform = exports.alloydbClusterContinuousBackupInfoEncryptionInfoToTerraform = exports.AlloydbClusterBackupSourceList = exports.AlloydbClusterBackupSourceOutputReference = exports.alloydbClusterBackupSourceToHclTerraform = exports.alloydbClusterBackupSourceToTerraform = void 0;
exports.AlloydbCluster = exports.AlloydbClusterTimeoutsOutputReference = exports.alloydbClusterTimeoutsToHclTerraform = exports.alloydbClusterTimeoutsToTerraform = exports.AlloydbClusterSecondaryConfigOutputReference = exports.alloydbClusterSecondaryConfigToHclTerraform = exports.alloydbClusterSecondaryConfigToTerraform = exports.AlloydbClusterRestoreContinuousBackupSourceOutputReference = exports.alloydbClusterRestoreContinuousBackupSourceToHclTerraform = exports.alloydbClusterRestoreContinuousBackupSourceToTerraform = exports.AlloydbClusterRestoreBackupSourceOutputReference = exports.alloydbClusterRestoreBackupSourceToHclTerraform = exports.alloydbClusterRestoreBackupSourceToTerraform = exports.AlloydbClusterPscConfigOutputReference = exports.alloydbClusterPscConfigToHclTerraform = exports.alloydbClusterPscConfigToTerraform = exports.AlloydbClusterNetworkConfigOutputReference = exports.alloydbClusterNetworkConfigToHclTerraform = exports.alloydbClusterNetworkConfigToTerraform = exports.AlloydbClusterMaintenanceUpdatePolicyOutputReference = exports.alloydbClusterMaintenanceUpdatePolicyToHclTerraform = exports.alloydbClusterMaintenanceUpdatePolicyToTerraform = exports.AlloydbClusterMaintenanceUpdatePolicyMaintenanceWindowsList = exports.AlloydbClusterMaintenanceUpdatePolicyMaintenanceWindowsOutputReference = exports.alloydbClusterMaintenanceUpdatePolicyMaintenanceWindowsToHclTerraform = exports.alloydbClusterMaintenanceUpdatePolicyMaintenanceWindowsToTerraform = exports.AlloydbClusterMaintenanceUpdatePolicyMaintenanceWindowsStartTimeOutputReference = exports.alloydbClusterMaintenanceUpdatePolicyMaintenanceWindowsStartTimeToHclTerraform = exports.alloydbClusterMaintenanceUpdatePolicyMaintenanceWindowsStartTimeToTerraform = exports.AlloydbClusterInitialUserOutputReference = exports.alloydbClusterInitialUserToHclTerraform = exports.alloydbClusterInitialUserToTerraform = exports.AlloydbClusterEncryptionConfigOutputReference = exports.alloydbClusterEncryptionConfigToHclTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function alloydbClusterBackupSourceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.alloydbClusterBackupSourceToTerraform = alloydbClusterBackupSourceToTerraform;
function alloydbClusterBackupSourceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.alloydbClusterBackupSourceToHclTerraform = alloydbClusterBackupSourceToHclTerraform;
class AlloydbClusterBackupSourceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // backup_name - computed: true, optional: false, required: false
    get backupName() {
        return this.getStringAttribute('backup_name');
    }
}
exports.AlloydbClusterBackupSourceOutputReference = AlloydbClusterBackupSourceOutputReference;
_a = JSII_RTTI_SYMBOL_1;
AlloydbClusterBackupSourceOutputReference[_a] = { fqn: "@cdktf/provider-google.alloydbCluster.AlloydbClusterBackupSourceOutputReference", version: "14.13.1" };
class AlloydbClusterBackupSourceList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AlloydbClusterBackupSourceOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AlloydbClusterBackupSourceList = AlloydbClusterBackupSourceList;
_b = JSII_RTTI_SYMBOL_1;
AlloydbClusterBackupSourceList[_b] = { fqn: "@cdktf/provider-google.alloydbCluster.AlloydbClusterBackupSourceList", version: "14.13.1" };
function alloydbClusterContinuousBackupInfoEncryptionInfoToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.alloydbClusterContinuousBackupInfoEncryptionInfoToTerraform = alloydbClusterContinuousBackupInfoEncryptionInfoToTerraform;
function alloydbClusterContinuousBackupInfoEncryptionInfoToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.alloydbClusterContinuousBackupInfoEncryptionInfoToHclTerraform = alloydbClusterContinuousBackupInfoEncryptionInfoToHclTerraform;
class AlloydbClusterContinuousBackupInfoEncryptionInfoOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // encryption_type - computed: true, optional: false, required: false
    get encryptionType() {
        return this.getStringAttribute('encryption_type');
    }
    // kms_key_versions - computed: true, optional: false, required: false
    get kmsKeyVersions() {
        return this.getListAttribute('kms_key_versions');
    }
}
exports.AlloydbClusterContinuousBackupInfoEncryptionInfoOutputReference = AlloydbClusterContinuousBackupInfoEncryptionInfoOutputReference;
_c = JSII_RTTI_SYMBOL_1;
AlloydbClusterContinuousBackupInfoEncryptionInfoOutputReference[_c] = { fqn: "@cdktf/provider-google.alloydbCluster.AlloydbClusterContinuousBackupInfoEncryptionInfoOutputReference", version: "14.13.1" };
class AlloydbClusterContinuousBackupInfoEncryptionInfoList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AlloydbClusterContinuousBackupInfoEncryptionInfoOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AlloydbClusterContinuousBackupInfoEncryptionInfoList = AlloydbClusterContinuousBackupInfoEncryptionInfoList;
_d = JSII_RTTI_SYMBOL_1;
AlloydbClusterContinuousBackupInfoEncryptionInfoList[_d] = { fqn: "@cdktf/provider-google.alloydbCluster.AlloydbClusterContinuousBackupInfoEncryptionInfoList", version: "14.13.1" };
function alloydbClusterContinuousBackupInfoToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.alloydbClusterContinuousBackupInfoToTerraform = alloydbClusterContinuousBackupInfoToTerraform;
function alloydbClusterContinuousBackupInfoToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.alloydbClusterContinuousBackupInfoToHclTerraform = alloydbClusterContinuousBackupInfoToHclTerraform;
class AlloydbClusterContinuousBackupInfoOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // encryption_info - computed: true, optional: false, required: false
        this._encryptionInfo = new AlloydbClusterContinuousBackupInfoEncryptionInfoList(this, "encryption_info", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // earliest_restorable_time - computed: true, optional: false, required: false
    get earliestRestorableTime() {
        return this.getStringAttribute('earliest_restorable_time');
    }
    // enabled_time - computed: true, optional: false, required: false
    get enabledTime() {
        return this.getStringAttribute('enabled_time');
    }
    get encryptionInfo() {
        return this._encryptionInfo;
    }
    // schedule - computed: true, optional: false, required: false
    get schedule() {
        return this.getListAttribute('schedule');
    }
}
exports.AlloydbClusterContinuousBackupInfoOutputReference = AlloydbClusterContinuousBackupInfoOutputReference;
_e = JSII_RTTI_SYMBOL_1;
AlloydbClusterContinuousBackupInfoOutputReference[_e] = { fqn: "@cdktf/provider-google.alloydbCluster.AlloydbClusterContinuousBackupInfoOutputReference", version: "14.13.1" };
class AlloydbClusterContinuousBackupInfoList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AlloydbClusterContinuousBackupInfoOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AlloydbClusterContinuousBackupInfoList = AlloydbClusterContinuousBackupInfoList;
_f = JSII_RTTI_SYMBOL_1;
AlloydbClusterContinuousBackupInfoList[_f] = { fqn: "@cdktf/provider-google.alloydbCluster.AlloydbClusterContinuousBackupInfoList", version: "14.13.1" };
function alloydbClusterEncryptionInfoToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.alloydbClusterEncryptionInfoToTerraform = alloydbClusterEncryptionInfoToTerraform;
function alloydbClusterEncryptionInfoToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.alloydbClusterEncryptionInfoToHclTerraform = alloydbClusterEncryptionInfoToHclTerraform;
class AlloydbClusterEncryptionInfoOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // encryption_type - computed: true, optional: false, required: false
    get encryptionType() {
        return this.getStringAttribute('encryption_type');
    }
    // kms_key_versions - computed: true, optional: false, required: false
    get kmsKeyVersions() {
        return this.getListAttribute('kms_key_versions');
    }
}
exports.AlloydbClusterEncryptionInfoOutputReference = AlloydbClusterEncryptionInfoOutputReference;
_g = JSII_RTTI_SYMBOL_1;
AlloydbClusterEncryptionInfoOutputReference[_g] = { fqn: "@cdktf/provider-google.alloydbCluster.AlloydbClusterEncryptionInfoOutputReference", version: "14.13.1" };
class AlloydbClusterEncryptionInfoList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AlloydbClusterEncryptionInfoOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AlloydbClusterEncryptionInfoList = AlloydbClusterEncryptionInfoList;
_h = JSII_RTTI_SYMBOL_1;
AlloydbClusterEncryptionInfoList[_h] = { fqn: "@cdktf/provider-google.alloydbCluster.AlloydbClusterEncryptionInfoList", version: "14.13.1" };
function alloydbClusterMigrationSourceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.alloydbClusterMigrationSourceToTerraform = alloydbClusterMigrationSourceToTerraform;
function alloydbClusterMigrationSourceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.alloydbClusterMigrationSourceToHclTerraform = alloydbClusterMigrationSourceToHclTerraform;
class AlloydbClusterMigrationSourceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // host_port - computed: true, optional: false, required: false
    get hostPort() {
        return this.getStringAttribute('host_port');
    }
    // reference_id - computed: true, optional: false, required: false
    get referenceId() {
        return this.getStringAttribute('reference_id');
    }
    // source_type - computed: true, optional: false, required: false
    get sourceType() {
        return this.getStringAttribute('source_type');
    }
}
exports.AlloydbClusterMigrationSourceOutputReference = AlloydbClusterMigrationSourceOutputReference;
_j = JSII_RTTI_SYMBOL_1;
AlloydbClusterMigrationSourceOutputReference[_j] = { fqn: "@cdktf/provider-google.alloydbCluster.AlloydbClusterMigrationSourceOutputReference", version: "14.13.1" };
class AlloydbClusterMigrationSourceList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AlloydbClusterMigrationSourceOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AlloydbClusterMigrationSourceList = AlloydbClusterMigrationSourceList;
_k = JSII_RTTI_SYMBOL_1;
AlloydbClusterMigrationSourceList[_k] = { fqn: "@cdktf/provider-google.alloydbCluster.AlloydbClusterMigrationSourceList", version: "14.13.1" };
function alloydbClusterTrialMetadataToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.alloydbClusterTrialMetadataToTerraform = alloydbClusterTrialMetadataToTerraform;
function alloydbClusterTrialMetadataToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.alloydbClusterTrialMetadataToHclTerraform = alloydbClusterTrialMetadataToHclTerraform;
class AlloydbClusterTrialMetadataOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // end_time - computed: true, optional: false, required: false
    get endTime() {
        return this.getStringAttribute('end_time');
    }
    // grace_end_time - computed: true, optional: false, required: false
    get graceEndTime() {
        return this.getStringAttribute('grace_end_time');
    }
    // start_time - computed: true, optional: false, required: false
    get startTime() {
        return this.getStringAttribute('start_time');
    }
    // upgrade_time - computed: true, optional: false, required: false
    get upgradeTime() {
        return this.getStringAttribute('upgrade_time');
    }
}
exports.AlloydbClusterTrialMetadataOutputReference = AlloydbClusterTrialMetadataOutputReference;
_l = JSII_RTTI_SYMBOL_1;
AlloydbClusterTrialMetadataOutputReference[_l] = { fqn: "@cdktf/provider-google.alloydbCluster.AlloydbClusterTrialMetadataOutputReference", version: "14.13.1" };
class AlloydbClusterTrialMetadataList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AlloydbClusterTrialMetadataOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AlloydbClusterTrialMetadataList = AlloydbClusterTrialMetadataList;
_m = JSII_RTTI_SYMBOL_1;
AlloydbClusterTrialMetadataList[_m] = { fqn: "@cdktf/provider-google.alloydbCluster.AlloydbClusterTrialMetadataList", version: "14.13.1" };
function alloydbClusterAutomatedBackupPolicyEncryptionConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        kms_key_name: cdktf.stringToTerraform(struct.kmsKeyName),
    };
}
exports.alloydbClusterAutomatedBackupPolicyEncryptionConfigToTerraform = alloydbClusterAutomatedBackupPolicyEncryptionConfigToTerraform;
function alloydbClusterAutomatedBackupPolicyEncryptionConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        kms_key_name: {
            value: cdktf.stringToHclTerraform(struct.kmsKeyName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.alloydbClusterAutomatedBackupPolicyEncryptionConfigToHclTerraform = alloydbClusterAutomatedBackupPolicyEncryptionConfigToHclTerraform;
class AlloydbClusterAutomatedBackupPolicyEncryptionConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._kmsKeyName !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyName = this._kmsKeyName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._kmsKeyName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._kmsKeyName = value.kmsKeyName;
        }
    }
    get kmsKeyName() {
        return this.getStringAttribute('kms_key_name');
    }
    set kmsKeyName(value) {
        this._kmsKeyName = value;
    }
    resetKmsKeyName() {
        this._kmsKeyName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyNameInput() {
        return this._kmsKeyName;
    }
}
exports.AlloydbClusterAutomatedBackupPolicyEncryptionConfigOutputReference = AlloydbClusterAutomatedBackupPolicyEncryptionConfigOutputReference;
_o = JSII_RTTI_SYMBOL_1;
AlloydbClusterAutomatedBackupPolicyEncryptionConfigOutputReference[_o] = { fqn: "@cdktf/provider-google.alloydbCluster.AlloydbClusterAutomatedBackupPolicyEncryptionConfigOutputReference", version: "14.13.1" };
function alloydbClusterAutomatedBackupPolicyQuantityBasedRetentionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        count: cdktf.numberToTerraform(struct.count),
    };
}
exports.alloydbClusterAutomatedBackupPolicyQuantityBasedRetentionToTerraform = alloydbClusterAutomatedBackupPolicyQuantityBasedRetentionToTerraform;
function alloydbClusterAutomatedBackupPolicyQuantityBasedRetentionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        count: {
            value: cdktf.numberToHclTerraform(struct.count),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.alloydbClusterAutomatedBackupPolicyQuantityBasedRetentionToHclTerraform = alloydbClusterAutomatedBackupPolicyQuantityBasedRetentionToHclTerraform;
class AlloydbClusterAutomatedBackupPolicyQuantityBasedRetentionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._count !== undefined) {
            hasAnyValues = true;
            internalValueResult.count = this._count;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._count = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._count = value.count;
        }
    }
    get count() {
        return this.getNumberAttribute('count');
    }
    set count(value) {
        this._count = value;
    }
    resetCount() {
        this._count = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get countInput() {
        return this._count;
    }
}
exports.AlloydbClusterAutomatedBackupPolicyQuantityBasedRetentionOutputReference = AlloydbClusterAutomatedBackupPolicyQuantityBasedRetentionOutputReference;
_p = JSII_RTTI_SYMBOL_1;
AlloydbClusterAutomatedBackupPolicyQuantityBasedRetentionOutputReference[_p] = { fqn: "@cdktf/provider-google.alloydbCluster.AlloydbClusterAutomatedBackupPolicyQuantityBasedRetentionOutputReference", version: "14.13.1" };
function alloydbClusterAutomatedBackupPolicyTimeBasedRetentionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        retention_period: cdktf.stringToTerraform(struct.retentionPeriod),
    };
}
exports.alloydbClusterAutomatedBackupPolicyTimeBasedRetentionToTerraform = alloydbClusterAutomatedBackupPolicyTimeBasedRetentionToTerraform;
function alloydbClusterAutomatedBackupPolicyTimeBasedRetentionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        retention_period: {
            value: cdktf.stringToHclTerraform(struct.retentionPeriod),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.alloydbClusterAutomatedBackupPolicyTimeBasedRetentionToHclTerraform = alloydbClusterAutomatedBackupPolicyTimeBasedRetentionToHclTerraform;
class AlloydbClusterAutomatedBackupPolicyTimeBasedRetentionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._retentionPeriod !== undefined) {
            hasAnyValues = true;
            internalValueResult.retentionPeriod = this._retentionPeriod;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._retentionPeriod = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._retentionPeriod = value.retentionPeriod;
        }
    }
    get retentionPeriod() {
        return this.getStringAttribute('retention_period');
    }
    set retentionPeriod(value) {
        this._retentionPeriod = value;
    }
    resetRetentionPeriod() {
        this._retentionPeriod = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get retentionPeriodInput() {
        return this._retentionPeriod;
    }
}
exports.AlloydbClusterAutomatedBackupPolicyTimeBasedRetentionOutputReference = AlloydbClusterAutomatedBackupPolicyTimeBasedRetentionOutputReference;
_q = JSII_RTTI_SYMBOL_1;
AlloydbClusterAutomatedBackupPolicyTimeBasedRetentionOutputReference[_q] = { fqn: "@cdktf/provider-google.alloydbCluster.AlloydbClusterAutomatedBackupPolicyTimeBasedRetentionOutputReference", version: "14.13.1" };
function alloydbClusterAutomatedBackupPolicyWeeklyScheduleStartTimesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        hours: cdktf.numberToTerraform(struct.hours),
        minutes: cdktf.numberToTerraform(struct.minutes),
        nanos: cdktf.numberToTerraform(struct.nanos),
        seconds: cdktf.numberToTerraform(struct.seconds),
    };
}
exports.alloydbClusterAutomatedBackupPolicyWeeklyScheduleStartTimesToTerraform = alloydbClusterAutomatedBackupPolicyWeeklyScheduleStartTimesToTerraform;
function alloydbClusterAutomatedBackupPolicyWeeklyScheduleStartTimesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        hours: {
            value: cdktf.numberToHclTerraform(struct.hours),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        minutes: {
            value: cdktf.numberToHclTerraform(struct.minutes),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        nanos: {
            value: cdktf.numberToHclTerraform(struct.nanos),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        seconds: {
            value: cdktf.numberToHclTerraform(struct.seconds),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.alloydbClusterAutomatedBackupPolicyWeeklyScheduleStartTimesToHclTerraform = alloydbClusterAutomatedBackupPolicyWeeklyScheduleStartTimesToHclTerraform;
class AlloydbClusterAutomatedBackupPolicyWeeklyScheduleStartTimesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hours !== undefined) {
            hasAnyValues = true;
            internalValueResult.hours = this._hours;
        }
        if (this._minutes !== undefined) {
            hasAnyValues = true;
            internalValueResult.minutes = this._minutes;
        }
        if (this._nanos !== undefined) {
            hasAnyValues = true;
            internalValueResult.nanos = this._nanos;
        }
        if (this._seconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.seconds = this._seconds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._hours = undefined;
            this._minutes = undefined;
            this._nanos = undefined;
            this._seconds = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._hours = value.hours;
            this._minutes = value.minutes;
            this._nanos = value.nanos;
            this._seconds = value.seconds;
        }
    }
    get hours() {
        return this.getNumberAttribute('hours');
    }
    set hours(value) {
        this._hours = value;
    }
    resetHours() {
        this._hours = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hoursInput() {
        return this._hours;
    }
    get minutes() {
        return this.getNumberAttribute('minutes');
    }
    set minutes(value) {
        this._minutes = value;
    }
    resetMinutes() {
        this._minutes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minutesInput() {
        return this._minutes;
    }
    get nanos() {
        return this.getNumberAttribute('nanos');
    }
    set nanos(value) {
        this._nanos = value;
    }
    resetNanos() {
        this._nanos = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nanosInput() {
        return this._nanos;
    }
    get seconds() {
        return this.getNumberAttribute('seconds');
    }
    set seconds(value) {
        this._seconds = value;
    }
    resetSeconds() {
        this._seconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secondsInput() {
        return this._seconds;
    }
}
exports.AlloydbClusterAutomatedBackupPolicyWeeklyScheduleStartTimesOutputReference = AlloydbClusterAutomatedBackupPolicyWeeklyScheduleStartTimesOutputReference;
_r = JSII_RTTI_SYMBOL_1;
AlloydbClusterAutomatedBackupPolicyWeeklyScheduleStartTimesOutputReference[_r] = { fqn: "@cdktf/provider-google.alloydbCluster.AlloydbClusterAutomatedBackupPolicyWeeklyScheduleStartTimesOutputReference", version: "14.13.1" };
class AlloydbClusterAutomatedBackupPolicyWeeklyScheduleStartTimesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AlloydbClusterAutomatedBackupPolicyWeeklyScheduleStartTimesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AlloydbClusterAutomatedBackupPolicyWeeklyScheduleStartTimesList = AlloydbClusterAutomatedBackupPolicyWeeklyScheduleStartTimesList;
_s = JSII_RTTI_SYMBOL_1;
AlloydbClusterAutomatedBackupPolicyWeeklyScheduleStartTimesList[_s] = { fqn: "@cdktf/provider-google.alloydbCluster.AlloydbClusterAutomatedBackupPolicyWeeklyScheduleStartTimesList", version: "14.13.1" };
function alloydbClusterAutomatedBackupPolicyWeeklyScheduleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        days_of_week: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.daysOfWeek),
        start_times: cdktf.listMapper(alloydbClusterAutomatedBackupPolicyWeeklyScheduleStartTimesToTerraform, true)(struct.startTimes),
    };
}
exports.alloydbClusterAutomatedBackupPolicyWeeklyScheduleToTerraform = alloydbClusterAutomatedBackupPolicyWeeklyScheduleToTerraform;
function alloydbClusterAutomatedBackupPolicyWeeklyScheduleToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        days_of_week: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.daysOfWeek),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        start_times: {
            value: cdktf.listMapperHcl(alloydbClusterAutomatedBackupPolicyWeeklyScheduleStartTimesToHclTerraform, true)(struct.startTimes),
            isBlock: true,
            type: "list",
            storageClassType: "AlloydbClusterAutomatedBackupPolicyWeeklyScheduleStartTimesList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.alloydbClusterAutomatedBackupPolicyWeeklyScheduleToHclTerraform = alloydbClusterAutomatedBackupPolicyWeeklyScheduleToHclTerraform;
class AlloydbClusterAutomatedBackupPolicyWeeklyScheduleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // start_times - computed: false, optional: false, required: true
        this._startTimes = new AlloydbClusterAutomatedBackupPolicyWeeklyScheduleStartTimesList(this, "start_times", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._daysOfWeek !== undefined) {
            hasAnyValues = true;
            internalValueResult.daysOfWeek = this._daysOfWeek;
        }
        if (this._startTimes?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.startTimes = this._startTimes?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._daysOfWeek = undefined;
            this._startTimes.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._daysOfWeek = value.daysOfWeek;
            this._startTimes.internalValue = value.startTimes;
        }
    }
    get daysOfWeek() {
        return this.getListAttribute('days_of_week');
    }
    set daysOfWeek(value) {
        this._daysOfWeek = value;
    }
    resetDaysOfWeek() {
        this._daysOfWeek = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get daysOfWeekInput() {
        return this._daysOfWeek;
    }
    get startTimes() {
        return this._startTimes;
    }
    putStartTimes(value) {
        this._startTimes.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get startTimesInput() {
        return this._startTimes.internalValue;
    }
}
exports.AlloydbClusterAutomatedBackupPolicyWeeklyScheduleOutputReference = AlloydbClusterAutomatedBackupPolicyWeeklyScheduleOutputReference;
_t = JSII_RTTI_SYMBOL_1;
AlloydbClusterAutomatedBackupPolicyWeeklyScheduleOutputReference[_t] = { fqn: "@cdktf/provider-google.alloydbCluster.AlloydbClusterAutomatedBackupPolicyWeeklyScheduleOutputReference", version: "14.13.1" };
function alloydbClusterAutomatedBackupPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        backup_window: cdktf.stringToTerraform(struct.backupWindow),
        enabled: cdktf.booleanToTerraform(struct.enabled),
        labels: cdktf.hashMapper(cdktf.stringToTerraform)(struct.labels),
        location: cdktf.stringToTerraform(struct.location),
        encryption_config: alloydbClusterAutomatedBackupPolicyEncryptionConfigToTerraform(struct.encryptionConfig),
        quantity_based_retention: alloydbClusterAutomatedBackupPolicyQuantityBasedRetentionToTerraform(struct.quantityBasedRetention),
        time_based_retention: alloydbClusterAutomatedBackupPolicyTimeBasedRetentionToTerraform(struct.timeBasedRetention),
        weekly_schedule: alloydbClusterAutomatedBackupPolicyWeeklyScheduleToTerraform(struct.weeklySchedule),
    };
}
exports.alloydbClusterAutomatedBackupPolicyToTerraform = alloydbClusterAutomatedBackupPolicyToTerraform;
function alloydbClusterAutomatedBackupPolicyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        backup_window: {
            value: cdktf.stringToHclTerraform(struct.backupWindow),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        labels: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.labels),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        location: {
            value: cdktf.stringToHclTerraform(struct.location),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        encryption_config: {
            value: alloydbClusterAutomatedBackupPolicyEncryptionConfigToHclTerraform(struct.encryptionConfig),
            isBlock: true,
            type: "list",
            storageClassType: "AlloydbClusterAutomatedBackupPolicyEncryptionConfigList",
        },
        quantity_based_retention: {
            value: alloydbClusterAutomatedBackupPolicyQuantityBasedRetentionToHclTerraform(struct.quantityBasedRetention),
            isBlock: true,
            type: "list",
            storageClassType: "AlloydbClusterAutomatedBackupPolicyQuantityBasedRetentionList",
        },
        time_based_retention: {
            value: alloydbClusterAutomatedBackupPolicyTimeBasedRetentionToHclTerraform(struct.timeBasedRetention),
            isBlock: true,
            type: "list",
            storageClassType: "AlloydbClusterAutomatedBackupPolicyTimeBasedRetentionList",
        },
        weekly_schedule: {
            value: alloydbClusterAutomatedBackupPolicyWeeklyScheduleToHclTerraform(struct.weeklySchedule),
            isBlock: true,
            type: "list",
            storageClassType: "AlloydbClusterAutomatedBackupPolicyWeeklyScheduleList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.alloydbClusterAutomatedBackupPolicyToHclTerraform = alloydbClusterAutomatedBackupPolicyToHclTerraform;
class AlloydbClusterAutomatedBackupPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // encryption_config - computed: false, optional: true, required: false
        this._encryptionConfig = new AlloydbClusterAutomatedBackupPolicyEncryptionConfigOutputReference(this, "encryption_config");
        // quantity_based_retention - computed: false, optional: true, required: false
        this._quantityBasedRetention = new AlloydbClusterAutomatedBackupPolicyQuantityBasedRetentionOutputReference(this, "quantity_based_retention");
        // time_based_retention - computed: false, optional: true, required: false
        this._timeBasedRetention = new AlloydbClusterAutomatedBackupPolicyTimeBasedRetentionOutputReference(this, "time_based_retention");
        // weekly_schedule - computed: false, optional: true, required: false
        this._weeklySchedule = new AlloydbClusterAutomatedBackupPolicyWeeklyScheduleOutputReference(this, "weekly_schedule");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._backupWindow !== undefined) {
            hasAnyValues = true;
            internalValueResult.backupWindow = this._backupWindow;
        }
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._labels !== undefined) {
            hasAnyValues = true;
            internalValueResult.labels = this._labels;
        }
        if (this._location !== undefined) {
            hasAnyValues = true;
            internalValueResult.location = this._location;
        }
        if (this._encryptionConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.encryptionConfig = this._encryptionConfig?.internalValue;
        }
        if (this._quantityBasedRetention?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.quantityBasedRetention = this._quantityBasedRetention?.internalValue;
        }
        if (this._timeBasedRetention?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.timeBasedRetention = this._timeBasedRetention?.internalValue;
        }
        if (this._weeklySchedule?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.weeklySchedule = this._weeklySchedule?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._backupWindow = undefined;
            this._enabled = undefined;
            this._labels = undefined;
            this._location = undefined;
            this._encryptionConfig.internalValue = undefined;
            this._quantityBasedRetention.internalValue = undefined;
            this._timeBasedRetention.internalValue = undefined;
            this._weeklySchedule.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._backupWindow = value.backupWindow;
            this._enabled = value.enabled;
            this._labels = value.labels;
            this._location = value.location;
            this._encryptionConfig.internalValue = value.encryptionConfig;
            this._quantityBasedRetention.internalValue = value.quantityBasedRetention;
            this._timeBasedRetention.internalValue = value.timeBasedRetention;
            this._weeklySchedule.internalValue = value.weeklySchedule;
        }
    }
    get backupWindow() {
        return this.getStringAttribute('backup_window');
    }
    set backupWindow(value) {
        this._backupWindow = value;
    }
    resetBackupWindow() {
        this._backupWindow = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get backupWindowInput() {
        return this._backupWindow;
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    resetLocation() {
        this._location = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    get encryptionConfig() {
        return this._encryptionConfig;
    }
    putEncryptionConfig(value) {
        this._encryptionConfig.internalValue = value;
    }
    resetEncryptionConfig() {
        this._encryptionConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encryptionConfigInput() {
        return this._encryptionConfig.internalValue;
    }
    get quantityBasedRetention() {
        return this._quantityBasedRetention;
    }
    putQuantityBasedRetention(value) {
        this._quantityBasedRetention.internalValue = value;
    }
    resetQuantityBasedRetention() {
        this._quantityBasedRetention.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get quantityBasedRetentionInput() {
        return this._quantityBasedRetention.internalValue;
    }
    get timeBasedRetention() {
        return this._timeBasedRetention;
    }
    putTimeBasedRetention(value) {
        this._timeBasedRetention.internalValue = value;
    }
    resetTimeBasedRetention() {
        this._timeBasedRetention.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeBasedRetentionInput() {
        return this._timeBasedRetention.internalValue;
    }
    get weeklySchedule() {
        return this._weeklySchedule;
    }
    putWeeklySchedule(value) {
        this._weeklySchedule.internalValue = value;
    }
    resetWeeklySchedule() {
        this._weeklySchedule.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get weeklyScheduleInput() {
        return this._weeklySchedule.internalValue;
    }
}
exports.AlloydbClusterAutomatedBackupPolicyOutputReference = AlloydbClusterAutomatedBackupPolicyOutputReference;
_u = JSII_RTTI_SYMBOL_1;
AlloydbClusterAutomatedBackupPolicyOutputReference[_u] = { fqn: "@cdktf/provider-google.alloydbCluster.AlloydbClusterAutomatedBackupPolicyOutputReference", version: "14.13.1" };
function alloydbClusterContinuousBackupConfigEncryptionConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        kms_key_name: cdktf.stringToTerraform(struct.kmsKeyName),
    };
}
exports.alloydbClusterContinuousBackupConfigEncryptionConfigToTerraform = alloydbClusterContinuousBackupConfigEncryptionConfigToTerraform;
function alloydbClusterContinuousBackupConfigEncryptionConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        kms_key_name: {
            value: cdktf.stringToHclTerraform(struct.kmsKeyName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.alloydbClusterContinuousBackupConfigEncryptionConfigToHclTerraform = alloydbClusterContinuousBackupConfigEncryptionConfigToHclTerraform;
class AlloydbClusterContinuousBackupConfigEncryptionConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._kmsKeyName !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyName = this._kmsKeyName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._kmsKeyName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._kmsKeyName = value.kmsKeyName;
        }
    }
    get kmsKeyName() {
        return this.getStringAttribute('kms_key_name');
    }
    set kmsKeyName(value) {
        this._kmsKeyName = value;
    }
    resetKmsKeyName() {
        this._kmsKeyName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyNameInput() {
        return this._kmsKeyName;
    }
}
exports.AlloydbClusterContinuousBackupConfigEncryptionConfigOutputReference = AlloydbClusterContinuousBackupConfigEncryptionConfigOutputReference;
_v = JSII_RTTI_SYMBOL_1;
AlloydbClusterContinuousBackupConfigEncryptionConfigOutputReference[_v] = { fqn: "@cdktf/provider-google.alloydbCluster.AlloydbClusterContinuousBackupConfigEncryptionConfigOutputReference", version: "14.13.1" };
function alloydbClusterContinuousBackupConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        recovery_window_days: cdktf.numberToTerraform(struct.recoveryWindowDays),
        encryption_config: alloydbClusterContinuousBackupConfigEncryptionConfigToTerraform(struct.encryptionConfig),
    };
}
exports.alloydbClusterContinuousBackupConfigToTerraform = alloydbClusterContinuousBackupConfigToTerraform;
function alloydbClusterContinuousBackupConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        recovery_window_days: {
            value: cdktf.numberToHclTerraform(struct.recoveryWindowDays),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        encryption_config: {
            value: alloydbClusterContinuousBackupConfigEncryptionConfigToHclTerraform(struct.encryptionConfig),
            isBlock: true,
            type: "list",
            storageClassType: "AlloydbClusterContinuousBackupConfigEncryptionConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.alloydbClusterContinuousBackupConfigToHclTerraform = alloydbClusterContinuousBackupConfigToHclTerraform;
class AlloydbClusterContinuousBackupConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // encryption_config - computed: false, optional: true, required: false
        this._encryptionConfig = new AlloydbClusterContinuousBackupConfigEncryptionConfigOutputReference(this, "encryption_config");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._recoveryWindowDays !== undefined) {
            hasAnyValues = true;
            internalValueResult.recoveryWindowDays = this._recoveryWindowDays;
        }
        if (this._encryptionConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.encryptionConfig = this._encryptionConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._recoveryWindowDays = undefined;
            this._encryptionConfig.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._recoveryWindowDays = value.recoveryWindowDays;
            this._encryptionConfig.internalValue = value.encryptionConfig;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get recoveryWindowDays() {
        return this.getNumberAttribute('recovery_window_days');
    }
    set recoveryWindowDays(value) {
        this._recoveryWindowDays = value;
    }
    resetRecoveryWindowDays() {
        this._recoveryWindowDays = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get recoveryWindowDaysInput() {
        return this._recoveryWindowDays;
    }
    get encryptionConfig() {
        return this._encryptionConfig;
    }
    putEncryptionConfig(value) {
        this._encryptionConfig.internalValue = value;
    }
    resetEncryptionConfig() {
        this._encryptionConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encryptionConfigInput() {
        return this._encryptionConfig.internalValue;
    }
}
exports.AlloydbClusterContinuousBackupConfigOutputReference = AlloydbClusterContinuousBackupConfigOutputReference;
_w = JSII_RTTI_SYMBOL_1;
AlloydbClusterContinuousBackupConfigOutputReference[_w] = { fqn: "@cdktf/provider-google.alloydbCluster.AlloydbClusterContinuousBackupConfigOutputReference", version: "14.13.1" };
function alloydbClusterEncryptionConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        kms_key_name: cdktf.stringToTerraform(struct.kmsKeyName),
    };
}
exports.alloydbClusterEncryptionConfigToTerraform = alloydbClusterEncryptionConfigToTerraform;
function alloydbClusterEncryptionConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        kms_key_name: {
            value: cdktf.stringToHclTerraform(struct.kmsKeyName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.alloydbClusterEncryptionConfigToHclTerraform = alloydbClusterEncryptionConfigToHclTerraform;
class AlloydbClusterEncryptionConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._kmsKeyName !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeyName = this._kmsKeyName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._kmsKeyName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._kmsKeyName = value.kmsKeyName;
        }
    }
    get kmsKeyName() {
        return this.getStringAttribute('kms_key_name');
    }
    set kmsKeyName(value) {
        this._kmsKeyName = value;
    }
    resetKmsKeyName() {
        this._kmsKeyName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeyNameInput() {
        return this._kmsKeyName;
    }
}
exports.AlloydbClusterEncryptionConfigOutputReference = AlloydbClusterEncryptionConfigOutputReference;
_x = JSII_RTTI_SYMBOL_1;
AlloydbClusterEncryptionConfigOutputReference[_x] = { fqn: "@cdktf/provider-google.alloydbCluster.AlloydbClusterEncryptionConfigOutputReference", version: "14.13.1" };
function alloydbClusterInitialUserToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        password: cdktf.stringToTerraform(struct.password),
        user: cdktf.stringToTerraform(struct.user),
    };
}
exports.alloydbClusterInitialUserToTerraform = alloydbClusterInitialUserToTerraform;
function alloydbClusterInitialUserToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        password: {
            value: cdktf.stringToHclTerraform(struct.password),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        user: {
            value: cdktf.stringToHclTerraform(struct.user),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.alloydbClusterInitialUserToHclTerraform = alloydbClusterInitialUserToHclTerraform;
class AlloydbClusterInitialUserOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._password !== undefined) {
            hasAnyValues = true;
            internalValueResult.password = this._password;
        }
        if (this._user !== undefined) {
            hasAnyValues = true;
            internalValueResult.user = this._user;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._password = undefined;
            this._user = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._password = value.password;
            this._user = value.user;
        }
    }
    get password() {
        return this.getStringAttribute('password');
    }
    set password(value) {
        this._password = value;
    }
    // Temporarily expose input value. Use with caution.
    get passwordInput() {
        return this._password;
    }
    get user() {
        return this.getStringAttribute('user');
    }
    set user(value) {
        this._user = value;
    }
    resetUser() {
        this._user = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get userInput() {
        return this._user;
    }
}
exports.AlloydbClusterInitialUserOutputReference = AlloydbClusterInitialUserOutputReference;
_y = JSII_RTTI_SYMBOL_1;
AlloydbClusterInitialUserOutputReference[_y] = { fqn: "@cdktf/provider-google.alloydbCluster.AlloydbClusterInitialUserOutputReference", version: "14.13.1" };
function alloydbClusterMaintenanceUpdatePolicyMaintenanceWindowsStartTimeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        hours: cdktf.numberToTerraform(struct.hours),
        minutes: cdktf.numberToTerraform(struct.minutes),
        nanos: cdktf.numberToTerraform(struct.nanos),
        seconds: cdktf.numberToTerraform(struct.seconds),
    };
}
exports.alloydbClusterMaintenanceUpdatePolicyMaintenanceWindowsStartTimeToTerraform = alloydbClusterMaintenanceUpdatePolicyMaintenanceWindowsStartTimeToTerraform;
function alloydbClusterMaintenanceUpdatePolicyMaintenanceWindowsStartTimeToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        hours: {
            value: cdktf.numberToHclTerraform(struct.hours),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        minutes: {
            value: cdktf.numberToHclTerraform(struct.minutes),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        nanos: {
            value: cdktf.numberToHclTerraform(struct.nanos),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        seconds: {
            value: cdktf.numberToHclTerraform(struct.seconds),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.alloydbClusterMaintenanceUpdatePolicyMaintenanceWindowsStartTimeToHclTerraform = alloydbClusterMaintenanceUpdatePolicyMaintenanceWindowsStartTimeToHclTerraform;
class AlloydbClusterMaintenanceUpdatePolicyMaintenanceWindowsStartTimeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hours !== undefined) {
            hasAnyValues = true;
            internalValueResult.hours = this._hours;
        }
        if (this._minutes !== undefined) {
            hasAnyValues = true;
            internalValueResult.minutes = this._minutes;
        }
        if (this._nanos !== undefined) {
            hasAnyValues = true;
            internalValueResult.nanos = this._nanos;
        }
        if (this._seconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.seconds = this._seconds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hours = undefined;
            this._minutes = undefined;
            this._nanos = undefined;
            this._seconds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hours = value.hours;
            this._minutes = value.minutes;
            this._nanos = value.nanos;
            this._seconds = value.seconds;
        }
    }
    get hours() {
        return this.getNumberAttribute('hours');
    }
    set hours(value) {
        this._hours = value;
    }
    // Temporarily expose input value. Use with caution.
    get hoursInput() {
        return this._hours;
    }
    get minutes() {
        return this.getNumberAttribute('minutes');
    }
    set minutes(value) {
        this._minutes = value;
    }
    resetMinutes() {
        this._minutes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minutesInput() {
        return this._minutes;
    }
    get nanos() {
        return this.getNumberAttribute('nanos');
    }
    set nanos(value) {
        this._nanos = value;
    }
    resetNanos() {
        this._nanos = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nanosInput() {
        return this._nanos;
    }
    get seconds() {
        return this.getNumberAttribute('seconds');
    }
    set seconds(value) {
        this._seconds = value;
    }
    resetSeconds() {
        this._seconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secondsInput() {
        return this._seconds;
    }
}
exports.AlloydbClusterMaintenanceUpdatePolicyMaintenanceWindowsStartTimeOutputReference = AlloydbClusterMaintenanceUpdatePolicyMaintenanceWindowsStartTimeOutputReference;
_z = JSII_RTTI_SYMBOL_1;
AlloydbClusterMaintenanceUpdatePolicyMaintenanceWindowsStartTimeOutputReference[_z] = { fqn: "@cdktf/provider-google.alloydbCluster.AlloydbClusterMaintenanceUpdatePolicyMaintenanceWindowsStartTimeOutputReference", version: "14.13.1" };
function alloydbClusterMaintenanceUpdatePolicyMaintenanceWindowsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        day: cdktf.stringToTerraform(struct.day),
        start_time: alloydbClusterMaintenanceUpdatePolicyMaintenanceWindowsStartTimeToTerraform(struct.startTime),
    };
}
exports.alloydbClusterMaintenanceUpdatePolicyMaintenanceWindowsToTerraform = alloydbClusterMaintenanceUpdatePolicyMaintenanceWindowsToTerraform;
function alloydbClusterMaintenanceUpdatePolicyMaintenanceWindowsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        day: {
            value: cdktf.stringToHclTerraform(struct.day),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        start_time: {
            value: alloydbClusterMaintenanceUpdatePolicyMaintenanceWindowsStartTimeToHclTerraform(struct.startTime),
            isBlock: true,
            type: "list",
            storageClassType: "AlloydbClusterMaintenanceUpdatePolicyMaintenanceWindowsStartTimeList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.alloydbClusterMaintenanceUpdatePolicyMaintenanceWindowsToHclTerraform = alloydbClusterMaintenanceUpdatePolicyMaintenanceWindowsToHclTerraform;
class AlloydbClusterMaintenanceUpdatePolicyMaintenanceWindowsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // start_time - computed: false, optional: false, required: true
        this._startTime = new AlloydbClusterMaintenanceUpdatePolicyMaintenanceWindowsStartTimeOutputReference(this, "start_time");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._day !== undefined) {
            hasAnyValues = true;
            internalValueResult.day = this._day;
        }
        if (this._startTime?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.startTime = this._startTime?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._day = undefined;
            this._startTime.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._day = value.day;
            this._startTime.internalValue = value.startTime;
        }
    }
    get day() {
        return this.getStringAttribute('day');
    }
    set day(value) {
        this._day = value;
    }
    // Temporarily expose input value. Use with caution.
    get dayInput() {
        return this._day;
    }
    get startTime() {
        return this._startTime;
    }
    putStartTime(value) {
        this._startTime.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get startTimeInput() {
        return this._startTime.internalValue;
    }
}
exports.AlloydbClusterMaintenanceUpdatePolicyMaintenanceWindowsOutputReference = AlloydbClusterMaintenanceUpdatePolicyMaintenanceWindowsOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
AlloydbClusterMaintenanceUpdatePolicyMaintenanceWindowsOutputReference[_0] = { fqn: "@cdktf/provider-google.alloydbCluster.AlloydbClusterMaintenanceUpdatePolicyMaintenanceWindowsOutputReference", version: "14.13.1" };
class AlloydbClusterMaintenanceUpdatePolicyMaintenanceWindowsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AlloydbClusterMaintenanceUpdatePolicyMaintenanceWindowsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AlloydbClusterMaintenanceUpdatePolicyMaintenanceWindowsList = AlloydbClusterMaintenanceUpdatePolicyMaintenanceWindowsList;
_1 = JSII_RTTI_SYMBOL_1;
AlloydbClusterMaintenanceUpdatePolicyMaintenanceWindowsList[_1] = { fqn: "@cdktf/provider-google.alloydbCluster.AlloydbClusterMaintenanceUpdatePolicyMaintenanceWindowsList", version: "14.13.1" };
function alloydbClusterMaintenanceUpdatePolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        maintenance_windows: cdktf.listMapper(alloydbClusterMaintenanceUpdatePolicyMaintenanceWindowsToTerraform, true)(struct.maintenanceWindows),
    };
}
exports.alloydbClusterMaintenanceUpdatePolicyToTerraform = alloydbClusterMaintenanceUpdatePolicyToTerraform;
function alloydbClusterMaintenanceUpdatePolicyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        maintenance_windows: {
            value: cdktf.listMapperHcl(alloydbClusterMaintenanceUpdatePolicyMaintenanceWindowsToHclTerraform, true)(struct.maintenanceWindows),
            isBlock: true,
            type: "list",
            storageClassType: "AlloydbClusterMaintenanceUpdatePolicyMaintenanceWindowsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.alloydbClusterMaintenanceUpdatePolicyToHclTerraform = alloydbClusterMaintenanceUpdatePolicyToHclTerraform;
class AlloydbClusterMaintenanceUpdatePolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // maintenance_windows - computed: false, optional: true, required: false
        this._maintenanceWindows = new AlloydbClusterMaintenanceUpdatePolicyMaintenanceWindowsList(this, "maintenance_windows", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._maintenanceWindows?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.maintenanceWindows = this._maintenanceWindows?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._maintenanceWindows.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._maintenanceWindows.internalValue = value.maintenanceWindows;
        }
    }
    get maintenanceWindows() {
        return this._maintenanceWindows;
    }
    putMaintenanceWindows(value) {
        this._maintenanceWindows.internalValue = value;
    }
    resetMaintenanceWindows() {
        this._maintenanceWindows.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maintenanceWindowsInput() {
        return this._maintenanceWindows.internalValue;
    }
}
exports.AlloydbClusterMaintenanceUpdatePolicyOutputReference = AlloydbClusterMaintenanceUpdatePolicyOutputReference;
_2 = JSII_RTTI_SYMBOL_1;
AlloydbClusterMaintenanceUpdatePolicyOutputReference[_2] = { fqn: "@cdktf/provider-google.alloydbCluster.AlloydbClusterMaintenanceUpdatePolicyOutputReference", version: "14.13.1" };
function alloydbClusterNetworkConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        allocated_ip_range: cdktf.stringToTerraform(struct.allocatedIpRange),
        network: cdktf.stringToTerraform(struct.network),
    };
}
exports.alloydbClusterNetworkConfigToTerraform = alloydbClusterNetworkConfigToTerraform;
function alloydbClusterNetworkConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        allocated_ip_range: {
            value: cdktf.stringToHclTerraform(struct.allocatedIpRange),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        network: {
            value: cdktf.stringToHclTerraform(struct.network),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.alloydbClusterNetworkConfigToHclTerraform = alloydbClusterNetworkConfigToHclTerraform;
class AlloydbClusterNetworkConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._allocatedIpRange !== undefined) {
            hasAnyValues = true;
            internalValueResult.allocatedIpRange = this._allocatedIpRange;
        }
        if (this._network !== undefined) {
            hasAnyValues = true;
            internalValueResult.network = this._network;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._allocatedIpRange = undefined;
            this._network = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._allocatedIpRange = value.allocatedIpRange;
            this._network = value.network;
        }
    }
    get allocatedIpRange() {
        return this.getStringAttribute('allocated_ip_range');
    }
    set allocatedIpRange(value) {
        this._allocatedIpRange = value;
    }
    resetAllocatedIpRange() {
        this._allocatedIpRange = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allocatedIpRangeInput() {
        return this._allocatedIpRange;
    }
    get network() {
        return this.getStringAttribute('network');
    }
    set network(value) {
        this._network = value;
    }
    resetNetwork() {
        this._network = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkInput() {
        return this._network;
    }
}
exports.AlloydbClusterNetworkConfigOutputReference = AlloydbClusterNetworkConfigOutputReference;
_3 = JSII_RTTI_SYMBOL_1;
AlloydbClusterNetworkConfigOutputReference[_3] = { fqn: "@cdktf/provider-google.alloydbCluster.AlloydbClusterNetworkConfigOutputReference", version: "14.13.1" };
function alloydbClusterPscConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        psc_enabled: cdktf.booleanToTerraform(struct.pscEnabled),
    };
}
exports.alloydbClusterPscConfigToTerraform = alloydbClusterPscConfigToTerraform;
function alloydbClusterPscConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        psc_enabled: {
            value: cdktf.booleanToHclTerraform(struct.pscEnabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.alloydbClusterPscConfigToHclTerraform = alloydbClusterPscConfigToHclTerraform;
class AlloydbClusterPscConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._pscEnabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.pscEnabled = this._pscEnabled;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._pscEnabled = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._pscEnabled = value.pscEnabled;
        }
    }
    get pscEnabled() {
        return this.getBooleanAttribute('psc_enabled');
    }
    set pscEnabled(value) {
        this._pscEnabled = value;
    }
    resetPscEnabled() {
        this._pscEnabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pscEnabledInput() {
        return this._pscEnabled;
    }
}
exports.AlloydbClusterPscConfigOutputReference = AlloydbClusterPscConfigOutputReference;
_4 = JSII_RTTI_SYMBOL_1;
AlloydbClusterPscConfigOutputReference[_4] = { fqn: "@cdktf/provider-google.alloydbCluster.AlloydbClusterPscConfigOutputReference", version: "14.13.1" };
function alloydbClusterRestoreBackupSourceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        backup_name: cdktf.stringToTerraform(struct.backupName),
    };
}
exports.alloydbClusterRestoreBackupSourceToTerraform = alloydbClusterRestoreBackupSourceToTerraform;
function alloydbClusterRestoreBackupSourceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        backup_name: {
            value: cdktf.stringToHclTerraform(struct.backupName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.alloydbClusterRestoreBackupSourceToHclTerraform = alloydbClusterRestoreBackupSourceToHclTerraform;
class AlloydbClusterRestoreBackupSourceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._backupName !== undefined) {
            hasAnyValues = true;
            internalValueResult.backupName = this._backupName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._backupName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._backupName = value.backupName;
        }
    }
    get backupName() {
        return this.getStringAttribute('backup_name');
    }
    set backupName(value) {
        this._backupName = value;
    }
    // Temporarily expose input value. Use with caution.
    get backupNameInput() {
        return this._backupName;
    }
}
exports.AlloydbClusterRestoreBackupSourceOutputReference = AlloydbClusterRestoreBackupSourceOutputReference;
_5 = JSII_RTTI_SYMBOL_1;
AlloydbClusterRestoreBackupSourceOutputReference[_5] = { fqn: "@cdktf/provider-google.alloydbCluster.AlloydbClusterRestoreBackupSourceOutputReference", version: "14.13.1" };
function alloydbClusterRestoreContinuousBackupSourceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cluster: cdktf.stringToTerraform(struct.cluster),
        point_in_time: cdktf.stringToTerraform(struct.pointInTime),
    };
}
exports.alloydbClusterRestoreContinuousBackupSourceToTerraform = alloydbClusterRestoreContinuousBackupSourceToTerraform;
function alloydbClusterRestoreContinuousBackupSourceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cluster: {
            value: cdktf.stringToHclTerraform(struct.cluster),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        point_in_time: {
            value: cdktf.stringToHclTerraform(struct.pointInTime),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.alloydbClusterRestoreContinuousBackupSourceToHclTerraform = alloydbClusterRestoreContinuousBackupSourceToHclTerraform;
class AlloydbClusterRestoreContinuousBackupSourceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cluster !== undefined) {
            hasAnyValues = true;
            internalValueResult.cluster = this._cluster;
        }
        if (this._pointInTime !== undefined) {
            hasAnyValues = true;
            internalValueResult.pointInTime = this._pointInTime;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._cluster = undefined;
            this._pointInTime = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._cluster = value.cluster;
            this._pointInTime = value.pointInTime;
        }
    }
    get cluster() {
        return this.getStringAttribute('cluster');
    }
    set cluster(value) {
        this._cluster = value;
    }
    // Temporarily expose input value. Use with caution.
    get clusterInput() {
        return this._cluster;
    }
    get pointInTime() {
        return this.getStringAttribute('point_in_time');
    }
    set pointInTime(value) {
        this._pointInTime = value;
    }
    // Temporarily expose input value. Use with caution.
    get pointInTimeInput() {
        return this._pointInTime;
    }
}
exports.AlloydbClusterRestoreContinuousBackupSourceOutputReference = AlloydbClusterRestoreContinuousBackupSourceOutputReference;
_6 = JSII_RTTI_SYMBOL_1;
AlloydbClusterRestoreContinuousBackupSourceOutputReference[_6] = { fqn: "@cdktf/provider-google.alloydbCluster.AlloydbClusterRestoreContinuousBackupSourceOutputReference", version: "14.13.1" };
function alloydbClusterSecondaryConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        primary_cluster_name: cdktf.stringToTerraform(struct.primaryClusterName),
    };
}
exports.alloydbClusterSecondaryConfigToTerraform = alloydbClusterSecondaryConfigToTerraform;
function alloydbClusterSecondaryConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        primary_cluster_name: {
            value: cdktf.stringToHclTerraform(struct.primaryClusterName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.alloydbClusterSecondaryConfigToHclTerraform = alloydbClusterSecondaryConfigToHclTerraform;
class AlloydbClusterSecondaryConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._primaryClusterName !== undefined) {
            hasAnyValues = true;
            internalValueResult.primaryClusterName = this._primaryClusterName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._primaryClusterName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._primaryClusterName = value.primaryClusterName;
        }
    }
    get primaryClusterName() {
        return this.getStringAttribute('primary_cluster_name');
    }
    set primaryClusterName(value) {
        this._primaryClusterName = value;
    }
    // Temporarily expose input value. Use with caution.
    get primaryClusterNameInput() {
        return this._primaryClusterName;
    }
}
exports.AlloydbClusterSecondaryConfigOutputReference = AlloydbClusterSecondaryConfigOutputReference;
_7 = JSII_RTTI_SYMBOL_1;
AlloydbClusterSecondaryConfigOutputReference[_7] = { fqn: "@cdktf/provider-google.alloydbCluster.AlloydbClusterSecondaryConfigOutputReference", version: "14.13.1" };
function alloydbClusterTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.alloydbClusterTimeoutsToTerraform = alloydbClusterTimeoutsToTerraform;
function alloydbClusterTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.alloydbClusterTimeoutsToHclTerraform = alloydbClusterTimeoutsToHclTerraform;
class AlloydbClusterTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.AlloydbClusterTimeoutsOutputReference = AlloydbClusterTimeoutsOutputReference;
_8 = JSII_RTTI_SYMBOL_1;
AlloydbClusterTimeoutsOutputReference[_8] = { fqn: "@cdktf/provider-google.alloydbCluster.AlloydbClusterTimeoutsOutputReference", version: "14.13.1" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/alloydb_cluster google_alloydb_cluster}
*/
class AlloydbCluster extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a AlloydbCluster resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the AlloydbCluster to import
    * @param importFromId The id of the existing AlloydbCluster that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/alloydb_cluster#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the AlloydbCluster to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_alloydb_cluster", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/alloydb_cluster google_alloydb_cluster} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options AlloydbClusterConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_alloydb_cluster',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // backup_source - computed: true, optional: false, required: false
        this._backupSource = new AlloydbClusterBackupSourceList(this, "backup_source", false);
        // continuous_backup_info - computed: true, optional: false, required: false
        this._continuousBackupInfo = new AlloydbClusterContinuousBackupInfoList(this, "continuous_backup_info", false);
        // effective_annotations - computed: true, optional: false, required: false
        this._effectiveAnnotations = new cdktf.StringMap(this, "effective_annotations");
        // effective_labels - computed: true, optional: false, required: false
        this._effectiveLabels = new cdktf.StringMap(this, "effective_labels");
        // encryption_info - computed: true, optional: false, required: false
        this._encryptionInfo = new AlloydbClusterEncryptionInfoList(this, "encryption_info", false);
        // migration_source - computed: true, optional: false, required: false
        this._migrationSource = new AlloydbClusterMigrationSourceList(this, "migration_source", false);
        // terraform_labels - computed: true, optional: false, required: false
        this._terraformLabels = new cdktf.StringMap(this, "terraform_labels");
        // trial_metadata - computed: true, optional: false, required: false
        this._trialMetadata = new AlloydbClusterTrialMetadataList(this, "trial_metadata", false);
        // automated_backup_policy - computed: false, optional: true, required: false
        this._automatedBackupPolicy = new AlloydbClusterAutomatedBackupPolicyOutputReference(this, "automated_backup_policy");
        // continuous_backup_config - computed: false, optional: true, required: false
        this._continuousBackupConfig = new AlloydbClusterContinuousBackupConfigOutputReference(this, "continuous_backup_config");
        // encryption_config - computed: false, optional: true, required: false
        this._encryptionConfig = new AlloydbClusterEncryptionConfigOutputReference(this, "encryption_config");
        // initial_user - computed: false, optional: true, required: false
        this._initialUser = new AlloydbClusterInitialUserOutputReference(this, "initial_user");
        // maintenance_update_policy - computed: false, optional: true, required: false
        this._maintenanceUpdatePolicy = new AlloydbClusterMaintenanceUpdatePolicyOutputReference(this, "maintenance_update_policy");
        // network_config - computed: false, optional: true, required: false
        this._networkConfig = new AlloydbClusterNetworkConfigOutputReference(this, "network_config");
        // psc_config - computed: false, optional: true, required: false
        this._pscConfig = new AlloydbClusterPscConfigOutputReference(this, "psc_config");
        // restore_backup_source - computed: false, optional: true, required: false
        this._restoreBackupSource = new AlloydbClusterRestoreBackupSourceOutputReference(this, "restore_backup_source");
        // restore_continuous_backup_source - computed: false, optional: true, required: false
        this._restoreContinuousBackupSource = new AlloydbClusterRestoreContinuousBackupSourceOutputReference(this, "restore_continuous_backup_source");
        // secondary_config - computed: false, optional: true, required: false
        this._secondaryConfig = new AlloydbClusterSecondaryConfigOutputReference(this, "secondary_config");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new AlloydbClusterTimeoutsOutputReference(this, "timeouts");
        this._annotations = config.annotations;
        this._clusterId = config.clusterId;
        this._clusterType = config.clusterType;
        this._databaseVersion = config.databaseVersion;
        this._deletionPolicy = config.deletionPolicy;
        this._displayName = config.displayName;
        this._etag = config.etag;
        this._id = config.id;
        this._labels = config.labels;
        this._location = config.location;
        this._project = config.project;
        this._subscriptionType = config.subscriptionType;
        this._automatedBackupPolicy.internalValue = config.automatedBackupPolicy;
        this._continuousBackupConfig.internalValue = config.continuousBackupConfig;
        this._encryptionConfig.internalValue = config.encryptionConfig;
        this._initialUser.internalValue = config.initialUser;
        this._maintenanceUpdatePolicy.internalValue = config.maintenanceUpdatePolicy;
        this._networkConfig.internalValue = config.networkConfig;
        this._pscConfig.internalValue = config.pscConfig;
        this._restoreBackupSource.internalValue = config.restoreBackupSource;
        this._restoreContinuousBackupSource.internalValue = config.restoreContinuousBackupSource;
        this._secondaryConfig.internalValue = config.secondaryConfig;
        this._timeouts.internalValue = config.timeouts;
    }
    get annotations() {
        return this.getStringMapAttribute('annotations');
    }
    set annotations(value) {
        this._annotations = value;
    }
    resetAnnotations() {
        this._annotations = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get annotationsInput() {
        return this._annotations;
    }
    get backupSource() {
        return this._backupSource;
    }
    get clusterId() {
        return this.getStringAttribute('cluster_id');
    }
    set clusterId(value) {
        this._clusterId = value;
    }
    // Temporarily expose input value. Use with caution.
    get clusterIdInput() {
        return this._clusterId;
    }
    get clusterType() {
        return this.getStringAttribute('cluster_type');
    }
    set clusterType(value) {
        this._clusterType = value;
    }
    resetClusterType() {
        this._clusterType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clusterTypeInput() {
        return this._clusterType;
    }
    get continuousBackupInfo() {
        return this._continuousBackupInfo;
    }
    get databaseVersion() {
        return this.getStringAttribute('database_version');
    }
    set databaseVersion(value) {
        this._databaseVersion = value;
    }
    resetDatabaseVersion() {
        this._databaseVersion = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get databaseVersionInput() {
        return this._databaseVersion;
    }
    get deletionPolicy() {
        return this.getStringAttribute('deletion_policy');
    }
    set deletionPolicy(value) {
        this._deletionPolicy = value;
    }
    resetDeletionPolicy() {
        this._deletionPolicy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deletionPolicyInput() {
        return this._deletionPolicy;
    }
    get displayName() {
        return this.getStringAttribute('display_name');
    }
    set displayName(value) {
        this._displayName = value;
    }
    resetDisplayName() {
        this._displayName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get displayNameInput() {
        return this._displayName;
    }
    get effectiveAnnotations() {
        return this._effectiveAnnotations;
    }
    get effectiveLabels() {
        return this._effectiveLabels;
    }
    get encryptionInfo() {
        return this._encryptionInfo;
    }
    get etag() {
        return this.getStringAttribute('etag');
    }
    set etag(value) {
        this._etag = value;
    }
    resetEtag() {
        this._etag = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get etagInput() {
        return this._etag;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    get migrationSource() {
        return this._migrationSource;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    // reconciling - computed: true, optional: false, required: false
    get reconciling() {
        return this.getBooleanAttribute('reconciling');
    }
    // state - computed: true, optional: false, required: false
    get state() {
        return this.getStringAttribute('state');
    }
    get subscriptionType() {
        return this.getStringAttribute('subscription_type');
    }
    set subscriptionType(value) {
        this._subscriptionType = value;
    }
    resetSubscriptionType() {
        this._subscriptionType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subscriptionTypeInput() {
        return this._subscriptionType;
    }
    get terraformLabels() {
        return this._terraformLabels;
    }
    get trialMetadata() {
        return this._trialMetadata;
    }
    // uid - computed: true, optional: false, required: false
    get uid() {
        return this.getStringAttribute('uid');
    }
    get automatedBackupPolicy() {
        return this._automatedBackupPolicy;
    }
    putAutomatedBackupPolicy(value) {
        this._automatedBackupPolicy.internalValue = value;
    }
    resetAutomatedBackupPolicy() {
        this._automatedBackupPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get automatedBackupPolicyInput() {
        return this._automatedBackupPolicy.internalValue;
    }
    get continuousBackupConfig() {
        return this._continuousBackupConfig;
    }
    putContinuousBackupConfig(value) {
        this._continuousBackupConfig.internalValue = value;
    }
    resetContinuousBackupConfig() {
        this._continuousBackupConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get continuousBackupConfigInput() {
        return this._continuousBackupConfig.internalValue;
    }
    get encryptionConfig() {
        return this._encryptionConfig;
    }
    putEncryptionConfig(value) {
        this._encryptionConfig.internalValue = value;
    }
    resetEncryptionConfig() {
        this._encryptionConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get encryptionConfigInput() {
        return this._encryptionConfig.internalValue;
    }
    get initialUser() {
        return this._initialUser;
    }
    putInitialUser(value) {
        this._initialUser.internalValue = value;
    }
    resetInitialUser() {
        this._initialUser.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get initialUserInput() {
        return this._initialUser.internalValue;
    }
    get maintenanceUpdatePolicy() {
        return this._maintenanceUpdatePolicy;
    }
    putMaintenanceUpdatePolicy(value) {
        this._maintenanceUpdatePolicy.internalValue = value;
    }
    resetMaintenanceUpdatePolicy() {
        this._maintenanceUpdatePolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maintenanceUpdatePolicyInput() {
        return this._maintenanceUpdatePolicy.internalValue;
    }
    get networkConfig() {
        return this._networkConfig;
    }
    putNetworkConfig(value) {
        this._networkConfig.internalValue = value;
    }
    resetNetworkConfig() {
        this._networkConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkConfigInput() {
        return this._networkConfig.internalValue;
    }
    get pscConfig() {
        return this._pscConfig;
    }
    putPscConfig(value) {
        this._pscConfig.internalValue = value;
    }
    resetPscConfig() {
        this._pscConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pscConfigInput() {
        return this._pscConfig.internalValue;
    }
    get restoreBackupSource() {
        return this._restoreBackupSource;
    }
    putRestoreBackupSource(value) {
        this._restoreBackupSource.internalValue = value;
    }
    resetRestoreBackupSource() {
        this._restoreBackupSource.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get restoreBackupSourceInput() {
        return this._restoreBackupSource.internalValue;
    }
    get restoreContinuousBackupSource() {
        return this._restoreContinuousBackupSource;
    }
    putRestoreContinuousBackupSource(value) {
        this._restoreContinuousBackupSource.internalValue = value;
    }
    resetRestoreContinuousBackupSource() {
        this._restoreContinuousBackupSource.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get restoreContinuousBackupSourceInput() {
        return this._restoreContinuousBackupSource.internalValue;
    }
    get secondaryConfig() {
        return this._secondaryConfig;
    }
    putSecondaryConfig(value) {
        this._secondaryConfig.internalValue = value;
    }
    resetSecondaryConfig() {
        this._secondaryConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get secondaryConfigInput() {
        return this._secondaryConfig.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            annotations: cdktf.hashMapper(cdktf.stringToTerraform)(this._annotations),
            cluster_id: cdktf.stringToTerraform(this._clusterId),
            cluster_type: cdktf.stringToTerraform(this._clusterType),
            database_version: cdktf.stringToTerraform(this._databaseVersion),
            deletion_policy: cdktf.stringToTerraform(this._deletionPolicy),
            display_name: cdktf.stringToTerraform(this._displayName),
            etag: cdktf.stringToTerraform(this._etag),
            id: cdktf.stringToTerraform(this._id),
            labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._labels),
            location: cdktf.stringToTerraform(this._location),
            project: cdktf.stringToTerraform(this._project),
            subscription_type: cdktf.stringToTerraform(this._subscriptionType),
            automated_backup_policy: alloydbClusterAutomatedBackupPolicyToTerraform(this._automatedBackupPolicy.internalValue),
            continuous_backup_config: alloydbClusterContinuousBackupConfigToTerraform(this._continuousBackupConfig.internalValue),
            encryption_config: alloydbClusterEncryptionConfigToTerraform(this._encryptionConfig.internalValue),
            initial_user: alloydbClusterInitialUserToTerraform(this._initialUser.internalValue),
            maintenance_update_policy: alloydbClusterMaintenanceUpdatePolicyToTerraform(this._maintenanceUpdatePolicy.internalValue),
            network_config: alloydbClusterNetworkConfigToTerraform(this._networkConfig.internalValue),
            psc_config: alloydbClusterPscConfigToTerraform(this._pscConfig.internalValue),
            restore_backup_source: alloydbClusterRestoreBackupSourceToTerraform(this._restoreBackupSource.internalValue),
            restore_continuous_backup_source: alloydbClusterRestoreContinuousBackupSourceToTerraform(this._restoreContinuousBackupSource.internalValue),
            secondary_config: alloydbClusterSecondaryConfigToTerraform(this._secondaryConfig.internalValue),
            timeouts: alloydbClusterTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            annotations: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._annotations),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            cluster_id: {
                value: cdktf.stringToHclTerraform(this._clusterId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            cluster_type: {
                value: cdktf.stringToHclTerraform(this._clusterType),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            database_version: {
                value: cdktf.stringToHclTerraform(this._databaseVersion),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            deletion_policy: {
                value: cdktf.stringToHclTerraform(this._deletionPolicy),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            display_name: {
                value: cdktf.stringToHclTerraform(this._displayName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            etag: {
                value: cdktf.stringToHclTerraform(this._etag),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            labels: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._labels),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            location: {
                value: cdktf.stringToHclTerraform(this._location),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            project: {
                value: cdktf.stringToHclTerraform(this._project),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            subscription_type: {
                value: cdktf.stringToHclTerraform(this._subscriptionType),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            automated_backup_policy: {
                value: alloydbClusterAutomatedBackupPolicyToHclTerraform(this._automatedBackupPolicy.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "AlloydbClusterAutomatedBackupPolicyList",
            },
            continuous_backup_config: {
                value: alloydbClusterContinuousBackupConfigToHclTerraform(this._continuousBackupConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "AlloydbClusterContinuousBackupConfigList",
            },
            encryption_config: {
                value: alloydbClusterEncryptionConfigToHclTerraform(this._encryptionConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "AlloydbClusterEncryptionConfigList",
            },
            initial_user: {
                value: alloydbClusterInitialUserToHclTerraform(this._initialUser.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "AlloydbClusterInitialUserList",
            },
            maintenance_update_policy: {
                value: alloydbClusterMaintenanceUpdatePolicyToHclTerraform(this._maintenanceUpdatePolicy.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "AlloydbClusterMaintenanceUpdatePolicyList",
            },
            network_config: {
                value: alloydbClusterNetworkConfigToHclTerraform(this._networkConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "AlloydbClusterNetworkConfigList",
            },
            psc_config: {
                value: alloydbClusterPscConfigToHclTerraform(this._pscConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "AlloydbClusterPscConfigList",
            },
            restore_backup_source: {
                value: alloydbClusterRestoreBackupSourceToHclTerraform(this._restoreBackupSource.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "AlloydbClusterRestoreBackupSourceList",
            },
            restore_continuous_backup_source: {
                value: alloydbClusterRestoreContinuousBackupSourceToHclTerraform(this._restoreContinuousBackupSource.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "AlloydbClusterRestoreContinuousBackupSourceList",
            },
            secondary_config: {
                value: alloydbClusterSecondaryConfigToHclTerraform(this._secondaryConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "AlloydbClusterSecondaryConfigList",
            },
            timeouts: {
                value: alloydbClusterTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "AlloydbClusterTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.AlloydbCluster = AlloydbCluster;
_9 = JSII_RTTI_SYMBOL_1;
AlloydbCluster[_9] = { fqn: "@cdktf/provider-google.alloydbCluster.AlloydbCluster", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
AlloydbCluster.tfResourceType = "google_alloydb_cluster";
//# sourceMappingURL=data:application/json;base64,