"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7;
Object.defineProperty(exports, "__esModule", { value: true });
exports.computeInstanceFromTemplateSchedulingLocalSsdRecoveryTimeoutToHclTerraform = exports.computeInstanceFromTemplateSchedulingLocalSsdRecoveryTimeoutToTerraform = exports.ComputeInstanceFromTemplateReservationAffinityOutputReference = exports.computeInstanceFromTemplateReservationAffinityToHclTerraform = exports.computeInstanceFromTemplateReservationAffinityToTerraform = exports.ComputeInstanceFromTemplateReservationAffinitySpecificReservationOutputReference = exports.computeInstanceFromTemplateReservationAffinitySpecificReservationToHclTerraform = exports.computeInstanceFromTemplateReservationAffinitySpecificReservationToTerraform = exports.ComputeInstanceFromTemplateParamsOutputReference = exports.computeInstanceFromTemplateParamsToHclTerraform = exports.computeInstanceFromTemplateParamsToTerraform = exports.ComputeInstanceFromTemplateNetworkPerformanceConfigOutputReference = exports.computeInstanceFromTemplateNetworkPerformanceConfigToHclTerraform = exports.computeInstanceFromTemplateNetworkPerformanceConfigToTerraform = exports.ComputeInstanceFromTemplateNetworkInterfaceList = exports.ComputeInstanceFromTemplateNetworkInterfaceOutputReference = exports.computeInstanceFromTemplateNetworkInterfaceToHclTerraform = exports.computeInstanceFromTemplateNetworkInterfaceToTerraform = exports.ComputeInstanceFromTemplateNetworkInterfaceIpv6AccessConfigList = exports.ComputeInstanceFromTemplateNetworkInterfaceIpv6AccessConfigOutputReference = exports.computeInstanceFromTemplateNetworkInterfaceIpv6AccessConfigToHclTerraform = exports.computeInstanceFromTemplateNetworkInterfaceIpv6AccessConfigToTerraform = exports.ComputeInstanceFromTemplateNetworkInterfaceAliasIpRangeList = exports.ComputeInstanceFromTemplateNetworkInterfaceAliasIpRangeOutputReference = exports.computeInstanceFromTemplateNetworkInterfaceAliasIpRangeToHclTerraform = exports.computeInstanceFromTemplateNetworkInterfaceAliasIpRangeToTerraform = exports.ComputeInstanceFromTemplateNetworkInterfaceAccessConfigList = exports.ComputeInstanceFromTemplateNetworkInterfaceAccessConfigOutputReference = exports.computeInstanceFromTemplateNetworkInterfaceAccessConfigToHclTerraform = exports.computeInstanceFromTemplateNetworkInterfaceAccessConfigToTerraform = exports.ComputeInstanceFromTemplateGuestAcceleratorList = exports.ComputeInstanceFromTemplateGuestAcceleratorOutputReference = exports.computeInstanceFromTemplateGuestAcceleratorToHclTerraform = exports.computeInstanceFromTemplateGuestAcceleratorToTerraform = exports.ComputeInstanceFromTemplateConfidentialInstanceConfigOutputReference = exports.computeInstanceFromTemplateConfidentialInstanceConfigToHclTerraform = exports.computeInstanceFromTemplateConfidentialInstanceConfigToTerraform = exports.ComputeInstanceFromTemplateBootDiskOutputReference = exports.computeInstanceFromTemplateBootDiskToHclTerraform = exports.computeInstanceFromTemplateBootDiskToTerraform = exports.ComputeInstanceFromTemplateBootDiskInitializeParamsOutputReference = exports.computeInstanceFromTemplateBootDiskInitializeParamsToHclTerraform = exports.computeInstanceFromTemplateBootDiskInitializeParamsToTerraform = exports.ComputeInstanceFromTemplateAttachedDiskList = exports.ComputeInstanceFromTemplateAttachedDiskOutputReference = exports.computeInstanceFromTemplateAttachedDiskToHclTerraform = exports.computeInstanceFromTemplateAttachedDiskToTerraform = exports.ComputeInstanceFromTemplateAdvancedMachineFeaturesOutputReference = exports.computeInstanceFromTemplateAdvancedMachineFeaturesToHclTerraform = exports.computeInstanceFromTemplateAdvancedMachineFeaturesToTerraform = void 0;
exports.ComputeInstanceFromTemplate = exports.ComputeInstanceFromTemplateTimeoutsOutputReference = exports.computeInstanceFromTemplateTimeoutsToHclTerraform = exports.computeInstanceFromTemplateTimeoutsToTerraform = exports.ComputeInstanceFromTemplateShieldedInstanceConfigOutputReference = exports.computeInstanceFromTemplateShieldedInstanceConfigToHclTerraform = exports.computeInstanceFromTemplateShieldedInstanceConfigToTerraform = exports.ComputeInstanceFromTemplateServiceAccountOutputReference = exports.computeInstanceFromTemplateServiceAccountToHclTerraform = exports.computeInstanceFromTemplateServiceAccountToTerraform = exports.ComputeInstanceFromTemplateScratchDiskList = exports.ComputeInstanceFromTemplateScratchDiskOutputReference = exports.computeInstanceFromTemplateScratchDiskToHclTerraform = exports.computeInstanceFromTemplateScratchDiskToTerraform = exports.ComputeInstanceFromTemplateSchedulingOutputReference = exports.computeInstanceFromTemplateSchedulingToHclTerraform = exports.computeInstanceFromTemplateSchedulingToTerraform = exports.ComputeInstanceFromTemplateSchedulingOnInstanceStopActionOutputReference = exports.computeInstanceFromTemplateSchedulingOnInstanceStopActionToHclTerraform = exports.computeInstanceFromTemplateSchedulingOnInstanceStopActionToTerraform = exports.ComputeInstanceFromTemplateSchedulingNodeAffinitiesList = exports.ComputeInstanceFromTemplateSchedulingNodeAffinitiesOutputReference = exports.computeInstanceFromTemplateSchedulingNodeAffinitiesToHclTerraform = exports.computeInstanceFromTemplateSchedulingNodeAffinitiesToTerraform = exports.ComputeInstanceFromTemplateSchedulingMaxRunDurationOutputReference = exports.computeInstanceFromTemplateSchedulingMaxRunDurationToHclTerraform = exports.computeInstanceFromTemplateSchedulingMaxRunDurationToTerraform = exports.ComputeInstanceFromTemplateSchedulingLocalSsdRecoveryTimeoutOutputReference = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function computeInstanceFromTemplateAdvancedMachineFeaturesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enable_nested_virtualization: cdktf.booleanToTerraform(struct.enableNestedVirtualization),
        enable_uefi_networking: cdktf.booleanToTerraform(struct.enableUefiNetworking),
        performance_monitoring_unit: cdktf.stringToTerraform(struct.performanceMonitoringUnit),
        threads_per_core: cdktf.numberToTerraform(struct.threadsPerCore),
        turbo_mode: cdktf.stringToTerraform(struct.turboMode),
        visible_core_count: cdktf.numberToTerraform(struct.visibleCoreCount),
    };
}
exports.computeInstanceFromTemplateAdvancedMachineFeaturesToTerraform = computeInstanceFromTemplateAdvancedMachineFeaturesToTerraform;
function computeInstanceFromTemplateAdvancedMachineFeaturesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enable_nested_virtualization: {
            value: cdktf.booleanToHclTerraform(struct.enableNestedVirtualization),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        enable_uefi_networking: {
            value: cdktf.booleanToHclTerraform(struct.enableUefiNetworking),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        performance_monitoring_unit: {
            value: cdktf.stringToHclTerraform(struct.performanceMonitoringUnit),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        threads_per_core: {
            value: cdktf.numberToHclTerraform(struct.threadsPerCore),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        turbo_mode: {
            value: cdktf.stringToHclTerraform(struct.turboMode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        visible_core_count: {
            value: cdktf.numberToHclTerraform(struct.visibleCoreCount),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeInstanceFromTemplateAdvancedMachineFeaturesToHclTerraform = computeInstanceFromTemplateAdvancedMachineFeaturesToHclTerraform;
class ComputeInstanceFromTemplateAdvancedMachineFeaturesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enableNestedVirtualization !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableNestedVirtualization = this._enableNestedVirtualization;
        }
        if (this._enableUefiNetworking !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableUefiNetworking = this._enableUefiNetworking;
        }
        if (this._performanceMonitoringUnit !== undefined) {
            hasAnyValues = true;
            internalValueResult.performanceMonitoringUnit = this._performanceMonitoringUnit;
        }
        if (this._threadsPerCore !== undefined) {
            hasAnyValues = true;
            internalValueResult.threadsPerCore = this._threadsPerCore;
        }
        if (this._turboMode !== undefined) {
            hasAnyValues = true;
            internalValueResult.turboMode = this._turboMode;
        }
        if (this._visibleCoreCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.visibleCoreCount = this._visibleCoreCount;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enableNestedVirtualization = undefined;
            this._enableUefiNetworking = undefined;
            this._performanceMonitoringUnit = undefined;
            this._threadsPerCore = undefined;
            this._turboMode = undefined;
            this._visibleCoreCount = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enableNestedVirtualization = value.enableNestedVirtualization;
            this._enableUefiNetworking = value.enableUefiNetworking;
            this._performanceMonitoringUnit = value.performanceMonitoringUnit;
            this._threadsPerCore = value.threadsPerCore;
            this._turboMode = value.turboMode;
            this._visibleCoreCount = value.visibleCoreCount;
        }
    }
    get enableNestedVirtualization() {
        return this.getBooleanAttribute('enable_nested_virtualization');
    }
    set enableNestedVirtualization(value) {
        this._enableNestedVirtualization = value;
    }
    resetEnableNestedVirtualization() {
        this._enableNestedVirtualization = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableNestedVirtualizationInput() {
        return this._enableNestedVirtualization;
    }
    get enableUefiNetworking() {
        return this.getBooleanAttribute('enable_uefi_networking');
    }
    set enableUefiNetworking(value) {
        this._enableUefiNetworking = value;
    }
    resetEnableUefiNetworking() {
        this._enableUefiNetworking = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableUefiNetworkingInput() {
        return this._enableUefiNetworking;
    }
    get performanceMonitoringUnit() {
        return this.getStringAttribute('performance_monitoring_unit');
    }
    set performanceMonitoringUnit(value) {
        this._performanceMonitoringUnit = value;
    }
    resetPerformanceMonitoringUnit() {
        this._performanceMonitoringUnit = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get performanceMonitoringUnitInput() {
        return this._performanceMonitoringUnit;
    }
    get threadsPerCore() {
        return this.getNumberAttribute('threads_per_core');
    }
    set threadsPerCore(value) {
        this._threadsPerCore = value;
    }
    resetThreadsPerCore() {
        this._threadsPerCore = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get threadsPerCoreInput() {
        return this._threadsPerCore;
    }
    get turboMode() {
        return this.getStringAttribute('turbo_mode');
    }
    set turboMode(value) {
        this._turboMode = value;
    }
    resetTurboMode() {
        this._turboMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get turboModeInput() {
        return this._turboMode;
    }
    get visibleCoreCount() {
        return this.getNumberAttribute('visible_core_count');
    }
    set visibleCoreCount(value) {
        this._visibleCoreCount = value;
    }
    resetVisibleCoreCount() {
        this._visibleCoreCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get visibleCoreCountInput() {
        return this._visibleCoreCount;
    }
}
exports.ComputeInstanceFromTemplateAdvancedMachineFeaturesOutputReference = ComputeInstanceFromTemplateAdvancedMachineFeaturesOutputReference;
_a = JSII_RTTI_SYMBOL_1;
ComputeInstanceFromTemplateAdvancedMachineFeaturesOutputReference[_a] = { fqn: "@cdktf/provider-google.computeInstanceFromTemplate.ComputeInstanceFromTemplateAdvancedMachineFeaturesOutputReference", version: "14.13.1" };
function computeInstanceFromTemplateAttachedDiskToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        device_name: cdktf.stringToTerraform(struct.deviceName),
        disk_encryption_key_raw: cdktf.stringToTerraform(struct.diskEncryptionKeyRaw),
        kms_key_self_link: cdktf.stringToTerraform(struct.kmsKeySelfLink),
        mode: cdktf.stringToTerraform(struct.mode),
        source: cdktf.stringToTerraform(struct.source),
    };
}
exports.computeInstanceFromTemplateAttachedDiskToTerraform = computeInstanceFromTemplateAttachedDiskToTerraform;
function computeInstanceFromTemplateAttachedDiskToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        device_name: {
            value: cdktf.stringToHclTerraform(struct.deviceName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        disk_encryption_key_raw: {
            value: cdktf.stringToHclTerraform(struct.diskEncryptionKeyRaw),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        kms_key_self_link: {
            value: cdktf.stringToHclTerraform(struct.kmsKeySelfLink),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        mode: {
            value: cdktf.stringToHclTerraform(struct.mode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        source: {
            value: cdktf.stringToHclTerraform(struct.source),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeInstanceFromTemplateAttachedDiskToHclTerraform = computeInstanceFromTemplateAttachedDiskToHclTerraform;
class ComputeInstanceFromTemplateAttachedDiskOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._deviceName !== undefined) {
            hasAnyValues = true;
            internalValueResult.deviceName = this._deviceName;
        }
        if (this._diskEncryptionKeyRaw !== undefined) {
            hasAnyValues = true;
            internalValueResult.diskEncryptionKeyRaw = this._diskEncryptionKeyRaw;
        }
        if (this._kmsKeySelfLink !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeySelfLink = this._kmsKeySelfLink;
        }
        if (this._mode !== undefined) {
            hasAnyValues = true;
            internalValueResult.mode = this._mode;
        }
        if (this._source !== undefined) {
            hasAnyValues = true;
            internalValueResult.source = this._source;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._deviceName = undefined;
            this._diskEncryptionKeyRaw = undefined;
            this._kmsKeySelfLink = undefined;
            this._mode = undefined;
            this._source = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._deviceName = value.deviceName;
            this._diskEncryptionKeyRaw = value.diskEncryptionKeyRaw;
            this._kmsKeySelfLink = value.kmsKeySelfLink;
            this._mode = value.mode;
            this._source = value.source;
        }
    }
    get deviceName() {
        return this.getStringAttribute('device_name');
    }
    set deviceName(value) {
        this._deviceName = value;
    }
    resetDeviceName() {
        this._deviceName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deviceNameInput() {
        return this._deviceName;
    }
    get diskEncryptionKeyRaw() {
        return this.getStringAttribute('disk_encryption_key_raw');
    }
    set diskEncryptionKeyRaw(value) {
        this._diskEncryptionKeyRaw = value;
    }
    resetDiskEncryptionKeyRaw() {
        this._diskEncryptionKeyRaw = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get diskEncryptionKeyRawInput() {
        return this._diskEncryptionKeyRaw;
    }
    // disk_encryption_key_sha256 - computed: true, optional: false, required: false
    get diskEncryptionKeySha256() {
        return this.getStringAttribute('disk_encryption_key_sha256');
    }
    get kmsKeySelfLink() {
        return this.getStringAttribute('kms_key_self_link');
    }
    set kmsKeySelfLink(value) {
        this._kmsKeySelfLink = value;
    }
    resetKmsKeySelfLink() {
        this._kmsKeySelfLink = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeySelfLinkInput() {
        return this._kmsKeySelfLink;
    }
    get mode() {
        return this.getStringAttribute('mode');
    }
    set mode(value) {
        this._mode = value;
    }
    resetMode() {
        this._mode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get modeInput() {
        return this._mode;
    }
    get source() {
        return this.getStringAttribute('source');
    }
    set source(value) {
        this._source = value;
    }
    // Temporarily expose input value. Use with caution.
    get sourceInput() {
        return this._source;
    }
}
exports.ComputeInstanceFromTemplateAttachedDiskOutputReference = ComputeInstanceFromTemplateAttachedDiskOutputReference;
_b = JSII_RTTI_SYMBOL_1;
ComputeInstanceFromTemplateAttachedDiskOutputReference[_b] = { fqn: "@cdktf/provider-google.computeInstanceFromTemplate.ComputeInstanceFromTemplateAttachedDiskOutputReference", version: "14.13.1" };
class ComputeInstanceFromTemplateAttachedDiskList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeInstanceFromTemplateAttachedDiskOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeInstanceFromTemplateAttachedDiskList = ComputeInstanceFromTemplateAttachedDiskList;
_c = JSII_RTTI_SYMBOL_1;
ComputeInstanceFromTemplateAttachedDiskList[_c] = { fqn: "@cdktf/provider-google.computeInstanceFromTemplate.ComputeInstanceFromTemplateAttachedDiskList", version: "14.13.1" };
function computeInstanceFromTemplateBootDiskInitializeParamsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enable_confidential_compute: cdktf.booleanToTerraform(struct.enableConfidentialCompute),
        image: cdktf.stringToTerraform(struct.image),
        labels: cdktf.hashMapper(cdktf.stringToTerraform)(struct.labels),
        provisioned_iops: cdktf.numberToTerraform(struct.provisionedIops),
        provisioned_throughput: cdktf.numberToTerraform(struct.provisionedThroughput),
        resource_manager_tags: cdktf.hashMapper(cdktf.stringToTerraform)(struct.resourceManagerTags),
        resource_policies: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.resourcePolicies),
        size: cdktf.numberToTerraform(struct.size),
        storage_pool: cdktf.stringToTerraform(struct.storagePool),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.computeInstanceFromTemplateBootDiskInitializeParamsToTerraform = computeInstanceFromTemplateBootDiskInitializeParamsToTerraform;
function computeInstanceFromTemplateBootDiskInitializeParamsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enable_confidential_compute: {
            value: cdktf.booleanToHclTerraform(struct.enableConfidentialCompute),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        image: {
            value: cdktf.stringToHclTerraform(struct.image),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        labels: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.labels),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        provisioned_iops: {
            value: cdktf.numberToHclTerraform(struct.provisionedIops),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        provisioned_throughput: {
            value: cdktf.numberToHclTerraform(struct.provisionedThroughput),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        resource_manager_tags: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.resourceManagerTags),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        resource_policies: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.resourcePolicies),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
        size: {
            value: cdktf.numberToHclTerraform(struct.size),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        storage_pool: {
            value: cdktf.stringToHclTerraform(struct.storagePool),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        type: {
            value: cdktf.stringToHclTerraform(struct.type),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeInstanceFromTemplateBootDiskInitializeParamsToHclTerraform = computeInstanceFromTemplateBootDiskInitializeParamsToHclTerraform;
class ComputeInstanceFromTemplateBootDiskInitializeParamsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enableConfidentialCompute !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableConfidentialCompute = this._enableConfidentialCompute;
        }
        if (this._image !== undefined) {
            hasAnyValues = true;
            internalValueResult.image = this._image;
        }
        if (this._labels !== undefined) {
            hasAnyValues = true;
            internalValueResult.labels = this._labels;
        }
        if (this._provisionedIops !== undefined) {
            hasAnyValues = true;
            internalValueResult.provisionedIops = this._provisionedIops;
        }
        if (this._provisionedThroughput !== undefined) {
            hasAnyValues = true;
            internalValueResult.provisionedThroughput = this._provisionedThroughput;
        }
        if (this._resourceManagerTags !== undefined) {
            hasAnyValues = true;
            internalValueResult.resourceManagerTags = this._resourceManagerTags;
        }
        if (this._resourcePolicies !== undefined) {
            hasAnyValues = true;
            internalValueResult.resourcePolicies = this._resourcePolicies;
        }
        if (this._size !== undefined) {
            hasAnyValues = true;
            internalValueResult.size = this._size;
        }
        if (this._storagePool !== undefined) {
            hasAnyValues = true;
            internalValueResult.storagePool = this._storagePool;
        }
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enableConfidentialCompute = undefined;
            this._image = undefined;
            this._labels = undefined;
            this._provisionedIops = undefined;
            this._provisionedThroughput = undefined;
            this._resourceManagerTags = undefined;
            this._resourcePolicies = undefined;
            this._size = undefined;
            this._storagePool = undefined;
            this._type = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enableConfidentialCompute = value.enableConfidentialCompute;
            this._image = value.image;
            this._labels = value.labels;
            this._provisionedIops = value.provisionedIops;
            this._provisionedThroughput = value.provisionedThroughput;
            this._resourceManagerTags = value.resourceManagerTags;
            this._resourcePolicies = value.resourcePolicies;
            this._size = value.size;
            this._storagePool = value.storagePool;
            this._type = value.type;
        }
    }
    get enableConfidentialCompute() {
        return this.getBooleanAttribute('enable_confidential_compute');
    }
    set enableConfidentialCompute(value) {
        this._enableConfidentialCompute = value;
    }
    resetEnableConfidentialCompute() {
        this._enableConfidentialCompute = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableConfidentialComputeInput() {
        return this._enableConfidentialCompute;
    }
    get image() {
        return this.getStringAttribute('image');
    }
    set image(value) {
        this._image = value;
    }
    resetImage() {
        this._image = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get imageInput() {
        return this._image;
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get provisionedIops() {
        return this.getNumberAttribute('provisioned_iops');
    }
    set provisionedIops(value) {
        this._provisionedIops = value;
    }
    resetProvisionedIops() {
        this._provisionedIops = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get provisionedIopsInput() {
        return this._provisionedIops;
    }
    get provisionedThroughput() {
        return this.getNumberAttribute('provisioned_throughput');
    }
    set provisionedThroughput(value) {
        this._provisionedThroughput = value;
    }
    resetProvisionedThroughput() {
        this._provisionedThroughput = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get provisionedThroughputInput() {
        return this._provisionedThroughput;
    }
    get resourceManagerTags() {
        return this.getStringMapAttribute('resource_manager_tags');
    }
    set resourceManagerTags(value) {
        this._resourceManagerTags = value;
    }
    resetResourceManagerTags() {
        this._resourceManagerTags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceManagerTagsInput() {
        return this._resourceManagerTags;
    }
    get resourcePolicies() {
        return this.getListAttribute('resource_policies');
    }
    set resourcePolicies(value) {
        this._resourcePolicies = value;
    }
    resetResourcePolicies() {
        this._resourcePolicies = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourcePoliciesInput() {
        return this._resourcePolicies;
    }
    get size() {
        return this.getNumberAttribute('size');
    }
    set size(value) {
        this._size = value;
    }
    resetSize() {
        this._size = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sizeInput() {
        return this._size;
    }
    get storagePool() {
        return this.getStringAttribute('storage_pool');
    }
    set storagePool(value) {
        this._storagePool = value;
    }
    resetStoragePool() {
        this._storagePool = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get storagePoolInput() {
        return this._storagePool;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    resetType() {
        this._type = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
}
exports.ComputeInstanceFromTemplateBootDiskInitializeParamsOutputReference = ComputeInstanceFromTemplateBootDiskInitializeParamsOutputReference;
_d = JSII_RTTI_SYMBOL_1;
ComputeInstanceFromTemplateBootDiskInitializeParamsOutputReference[_d] = { fqn: "@cdktf/provider-google.computeInstanceFromTemplate.ComputeInstanceFromTemplateBootDiskInitializeParamsOutputReference", version: "14.13.1" };
function computeInstanceFromTemplateBootDiskToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        auto_delete: cdktf.booleanToTerraform(struct.autoDelete),
        device_name: cdktf.stringToTerraform(struct.deviceName),
        disk_encryption_key_raw: cdktf.stringToTerraform(struct.diskEncryptionKeyRaw),
        interface: cdktf.stringToTerraform(struct.interface),
        kms_key_self_link: cdktf.stringToTerraform(struct.kmsKeySelfLink),
        mode: cdktf.stringToTerraform(struct.mode),
        source: cdktf.stringToTerraform(struct.source),
        initialize_params: computeInstanceFromTemplateBootDiskInitializeParamsToTerraform(struct.initializeParams),
    };
}
exports.computeInstanceFromTemplateBootDiskToTerraform = computeInstanceFromTemplateBootDiskToTerraform;
function computeInstanceFromTemplateBootDiskToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        auto_delete: {
            value: cdktf.booleanToHclTerraform(struct.autoDelete),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        device_name: {
            value: cdktf.stringToHclTerraform(struct.deviceName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        disk_encryption_key_raw: {
            value: cdktf.stringToHclTerraform(struct.diskEncryptionKeyRaw),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        interface: {
            value: cdktf.stringToHclTerraform(struct.interface),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        kms_key_self_link: {
            value: cdktf.stringToHclTerraform(struct.kmsKeySelfLink),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        mode: {
            value: cdktf.stringToHclTerraform(struct.mode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        source: {
            value: cdktf.stringToHclTerraform(struct.source),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        initialize_params: {
            value: computeInstanceFromTemplateBootDiskInitializeParamsToHclTerraform(struct.initializeParams),
            isBlock: true,
            type: "list",
            storageClassType: "ComputeInstanceFromTemplateBootDiskInitializeParamsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeInstanceFromTemplateBootDiskToHclTerraform = computeInstanceFromTemplateBootDiskToHclTerraform;
class ComputeInstanceFromTemplateBootDiskOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // initialize_params - computed: false, optional: true, required: false
        this._initializeParams = new ComputeInstanceFromTemplateBootDiskInitializeParamsOutputReference(this, "initialize_params");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._autoDelete !== undefined) {
            hasAnyValues = true;
            internalValueResult.autoDelete = this._autoDelete;
        }
        if (this._deviceName !== undefined) {
            hasAnyValues = true;
            internalValueResult.deviceName = this._deviceName;
        }
        if (this._diskEncryptionKeyRaw !== undefined) {
            hasAnyValues = true;
            internalValueResult.diskEncryptionKeyRaw = this._diskEncryptionKeyRaw;
        }
        if (this._interface !== undefined) {
            hasAnyValues = true;
            internalValueResult.interface = this._interface;
        }
        if (this._kmsKeySelfLink !== undefined) {
            hasAnyValues = true;
            internalValueResult.kmsKeySelfLink = this._kmsKeySelfLink;
        }
        if (this._mode !== undefined) {
            hasAnyValues = true;
            internalValueResult.mode = this._mode;
        }
        if (this._source !== undefined) {
            hasAnyValues = true;
            internalValueResult.source = this._source;
        }
        if (this._initializeParams?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.initializeParams = this._initializeParams?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._autoDelete = undefined;
            this._deviceName = undefined;
            this._diskEncryptionKeyRaw = undefined;
            this._interface = undefined;
            this._kmsKeySelfLink = undefined;
            this._mode = undefined;
            this._source = undefined;
            this._initializeParams.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._autoDelete = value.autoDelete;
            this._deviceName = value.deviceName;
            this._diskEncryptionKeyRaw = value.diskEncryptionKeyRaw;
            this._interface = value.interface;
            this._kmsKeySelfLink = value.kmsKeySelfLink;
            this._mode = value.mode;
            this._source = value.source;
            this._initializeParams.internalValue = value.initializeParams;
        }
    }
    get autoDelete() {
        return this.getBooleanAttribute('auto_delete');
    }
    set autoDelete(value) {
        this._autoDelete = value;
    }
    resetAutoDelete() {
        this._autoDelete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get autoDeleteInput() {
        return this._autoDelete;
    }
    get deviceName() {
        return this.getStringAttribute('device_name');
    }
    set deviceName(value) {
        this._deviceName = value;
    }
    resetDeviceName() {
        this._deviceName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deviceNameInput() {
        return this._deviceName;
    }
    get diskEncryptionKeyRaw() {
        return this.getStringAttribute('disk_encryption_key_raw');
    }
    set diskEncryptionKeyRaw(value) {
        this._diskEncryptionKeyRaw = value;
    }
    resetDiskEncryptionKeyRaw() {
        this._diskEncryptionKeyRaw = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get diskEncryptionKeyRawInput() {
        return this._diskEncryptionKeyRaw;
    }
    // disk_encryption_key_sha256 - computed: true, optional: false, required: false
    get diskEncryptionKeySha256() {
        return this.getStringAttribute('disk_encryption_key_sha256');
    }
    get interface() {
        return this.getStringAttribute('interface');
    }
    set interface(value) {
        this._interface = value;
    }
    resetInterface() {
        this._interface = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get interfaceInput() {
        return this._interface;
    }
    get kmsKeySelfLink() {
        return this.getStringAttribute('kms_key_self_link');
    }
    set kmsKeySelfLink(value) {
        this._kmsKeySelfLink = value;
    }
    resetKmsKeySelfLink() {
        this._kmsKeySelfLink = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get kmsKeySelfLinkInput() {
        return this._kmsKeySelfLink;
    }
    get mode() {
        return this.getStringAttribute('mode');
    }
    set mode(value) {
        this._mode = value;
    }
    resetMode() {
        this._mode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get modeInput() {
        return this._mode;
    }
    get source() {
        return this.getStringAttribute('source');
    }
    set source(value) {
        this._source = value;
    }
    resetSource() {
        this._source = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sourceInput() {
        return this._source;
    }
    get initializeParams() {
        return this._initializeParams;
    }
    putInitializeParams(value) {
        this._initializeParams.internalValue = value;
    }
    resetInitializeParams() {
        this._initializeParams.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get initializeParamsInput() {
        return this._initializeParams.internalValue;
    }
}
exports.ComputeInstanceFromTemplateBootDiskOutputReference = ComputeInstanceFromTemplateBootDiskOutputReference;
_e = JSII_RTTI_SYMBOL_1;
ComputeInstanceFromTemplateBootDiskOutputReference[_e] = { fqn: "@cdktf/provider-google.computeInstanceFromTemplate.ComputeInstanceFromTemplateBootDiskOutputReference", version: "14.13.1" };
function computeInstanceFromTemplateConfidentialInstanceConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        confidential_instance_type: cdktf.stringToTerraform(struct.confidentialInstanceType),
        enable_confidential_compute: cdktf.booleanToTerraform(struct.enableConfidentialCompute),
    };
}
exports.computeInstanceFromTemplateConfidentialInstanceConfigToTerraform = computeInstanceFromTemplateConfidentialInstanceConfigToTerraform;
function computeInstanceFromTemplateConfidentialInstanceConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        confidential_instance_type: {
            value: cdktf.stringToHclTerraform(struct.confidentialInstanceType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        enable_confidential_compute: {
            value: cdktf.booleanToHclTerraform(struct.enableConfidentialCompute),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeInstanceFromTemplateConfidentialInstanceConfigToHclTerraform = computeInstanceFromTemplateConfidentialInstanceConfigToHclTerraform;
class ComputeInstanceFromTemplateConfidentialInstanceConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._confidentialInstanceType !== undefined) {
            hasAnyValues = true;
            internalValueResult.confidentialInstanceType = this._confidentialInstanceType;
        }
        if (this._enableConfidentialCompute !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableConfidentialCompute = this._enableConfidentialCompute;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._confidentialInstanceType = undefined;
            this._enableConfidentialCompute = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._confidentialInstanceType = value.confidentialInstanceType;
            this._enableConfidentialCompute = value.enableConfidentialCompute;
        }
    }
    get confidentialInstanceType() {
        return this.getStringAttribute('confidential_instance_type');
    }
    set confidentialInstanceType(value) {
        this._confidentialInstanceType = value;
    }
    resetConfidentialInstanceType() {
        this._confidentialInstanceType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get confidentialInstanceTypeInput() {
        return this._confidentialInstanceType;
    }
    get enableConfidentialCompute() {
        return this.getBooleanAttribute('enable_confidential_compute');
    }
    set enableConfidentialCompute(value) {
        this._enableConfidentialCompute = value;
    }
    resetEnableConfidentialCompute() {
        this._enableConfidentialCompute = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableConfidentialComputeInput() {
        return this._enableConfidentialCompute;
    }
}
exports.ComputeInstanceFromTemplateConfidentialInstanceConfigOutputReference = ComputeInstanceFromTemplateConfidentialInstanceConfigOutputReference;
_f = JSII_RTTI_SYMBOL_1;
ComputeInstanceFromTemplateConfidentialInstanceConfigOutputReference[_f] = { fqn: "@cdktf/provider-google.computeInstanceFromTemplate.ComputeInstanceFromTemplateConfidentialInstanceConfigOutputReference", version: "14.13.1" };
function computeInstanceFromTemplateGuestAcceleratorToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        count: cdktf.numberToTerraform(struct.count),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.computeInstanceFromTemplateGuestAcceleratorToTerraform = computeInstanceFromTemplateGuestAcceleratorToTerraform;
function computeInstanceFromTemplateGuestAcceleratorToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        count: {
            value: cdktf.numberToHclTerraform(struct.count),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        type: {
            value: cdktf.stringToHclTerraform(struct.type),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeInstanceFromTemplateGuestAcceleratorToHclTerraform = computeInstanceFromTemplateGuestAcceleratorToHclTerraform;
class ComputeInstanceFromTemplateGuestAcceleratorOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._count !== undefined) {
            hasAnyValues = true;
            internalValueResult.count = this._count;
        }
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._count = undefined;
            this._type = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._count = value.count;
            this._type = value.type;
        }
    }
    get count() {
        return this.getNumberAttribute('count');
    }
    set count(value) {
        this._count = value;
    }
    // Temporarily expose input value. Use with caution.
    get countInput() {
        return this._count;
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
}
exports.ComputeInstanceFromTemplateGuestAcceleratorOutputReference = ComputeInstanceFromTemplateGuestAcceleratorOutputReference;
_g = JSII_RTTI_SYMBOL_1;
ComputeInstanceFromTemplateGuestAcceleratorOutputReference[_g] = { fqn: "@cdktf/provider-google.computeInstanceFromTemplate.ComputeInstanceFromTemplateGuestAcceleratorOutputReference", version: "14.13.1" };
class ComputeInstanceFromTemplateGuestAcceleratorList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeInstanceFromTemplateGuestAcceleratorOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeInstanceFromTemplateGuestAcceleratorList = ComputeInstanceFromTemplateGuestAcceleratorList;
_h = JSII_RTTI_SYMBOL_1;
ComputeInstanceFromTemplateGuestAcceleratorList[_h] = { fqn: "@cdktf/provider-google.computeInstanceFromTemplate.ComputeInstanceFromTemplateGuestAcceleratorList", version: "14.13.1" };
function computeInstanceFromTemplateNetworkInterfaceAccessConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        nat_ip: cdktf.stringToTerraform(struct.natIp),
        network_tier: cdktf.stringToTerraform(struct.networkTier),
        public_ptr_domain_name: cdktf.stringToTerraform(struct.publicPtrDomainName),
    };
}
exports.computeInstanceFromTemplateNetworkInterfaceAccessConfigToTerraform = computeInstanceFromTemplateNetworkInterfaceAccessConfigToTerraform;
function computeInstanceFromTemplateNetworkInterfaceAccessConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        nat_ip: {
            value: cdktf.stringToHclTerraform(struct.natIp),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        network_tier: {
            value: cdktf.stringToHclTerraform(struct.networkTier),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        public_ptr_domain_name: {
            value: cdktf.stringToHclTerraform(struct.publicPtrDomainName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeInstanceFromTemplateNetworkInterfaceAccessConfigToHclTerraform = computeInstanceFromTemplateNetworkInterfaceAccessConfigToHclTerraform;
class ComputeInstanceFromTemplateNetworkInterfaceAccessConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._natIp !== undefined) {
            hasAnyValues = true;
            internalValueResult.natIp = this._natIp;
        }
        if (this._networkTier !== undefined) {
            hasAnyValues = true;
            internalValueResult.networkTier = this._networkTier;
        }
        if (this._publicPtrDomainName !== undefined) {
            hasAnyValues = true;
            internalValueResult.publicPtrDomainName = this._publicPtrDomainName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._natIp = undefined;
            this._networkTier = undefined;
            this._publicPtrDomainName = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._natIp = value.natIp;
            this._networkTier = value.networkTier;
            this._publicPtrDomainName = value.publicPtrDomainName;
        }
    }
    get natIp() {
        return this.getStringAttribute('nat_ip');
    }
    set natIp(value) {
        this._natIp = value;
    }
    resetNatIp() {
        this._natIp = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get natIpInput() {
        return this._natIp;
    }
    get networkTier() {
        return this.getStringAttribute('network_tier');
    }
    set networkTier(value) {
        this._networkTier = value;
    }
    resetNetworkTier() {
        this._networkTier = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkTierInput() {
        return this._networkTier;
    }
    get publicPtrDomainName() {
        return this.getStringAttribute('public_ptr_domain_name');
    }
    set publicPtrDomainName(value) {
        this._publicPtrDomainName = value;
    }
    resetPublicPtrDomainName() {
        this._publicPtrDomainName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get publicPtrDomainNameInput() {
        return this._publicPtrDomainName;
    }
}
exports.ComputeInstanceFromTemplateNetworkInterfaceAccessConfigOutputReference = ComputeInstanceFromTemplateNetworkInterfaceAccessConfigOutputReference;
_j = JSII_RTTI_SYMBOL_1;
ComputeInstanceFromTemplateNetworkInterfaceAccessConfigOutputReference[_j] = { fqn: "@cdktf/provider-google.computeInstanceFromTemplate.ComputeInstanceFromTemplateNetworkInterfaceAccessConfigOutputReference", version: "14.13.1" };
class ComputeInstanceFromTemplateNetworkInterfaceAccessConfigList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeInstanceFromTemplateNetworkInterfaceAccessConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeInstanceFromTemplateNetworkInterfaceAccessConfigList = ComputeInstanceFromTemplateNetworkInterfaceAccessConfigList;
_k = JSII_RTTI_SYMBOL_1;
ComputeInstanceFromTemplateNetworkInterfaceAccessConfigList[_k] = { fqn: "@cdktf/provider-google.computeInstanceFromTemplate.ComputeInstanceFromTemplateNetworkInterfaceAccessConfigList", version: "14.13.1" };
function computeInstanceFromTemplateNetworkInterfaceAliasIpRangeToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        ip_cidr_range: cdktf.stringToTerraform(struct.ipCidrRange),
        subnetwork_range_name: cdktf.stringToTerraform(struct.subnetworkRangeName),
    };
}
exports.computeInstanceFromTemplateNetworkInterfaceAliasIpRangeToTerraform = computeInstanceFromTemplateNetworkInterfaceAliasIpRangeToTerraform;
function computeInstanceFromTemplateNetworkInterfaceAliasIpRangeToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        ip_cidr_range: {
            value: cdktf.stringToHclTerraform(struct.ipCidrRange),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        subnetwork_range_name: {
            value: cdktf.stringToHclTerraform(struct.subnetworkRangeName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeInstanceFromTemplateNetworkInterfaceAliasIpRangeToHclTerraform = computeInstanceFromTemplateNetworkInterfaceAliasIpRangeToHclTerraform;
class ComputeInstanceFromTemplateNetworkInterfaceAliasIpRangeOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._ipCidrRange !== undefined) {
            hasAnyValues = true;
            internalValueResult.ipCidrRange = this._ipCidrRange;
        }
        if (this._subnetworkRangeName !== undefined) {
            hasAnyValues = true;
            internalValueResult.subnetworkRangeName = this._subnetworkRangeName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._ipCidrRange = undefined;
            this._subnetworkRangeName = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._ipCidrRange = value.ipCidrRange;
            this._subnetworkRangeName = value.subnetworkRangeName;
        }
    }
    get ipCidrRange() {
        return this.getStringAttribute('ip_cidr_range');
    }
    set ipCidrRange(value) {
        this._ipCidrRange = value;
    }
    // Temporarily expose input value. Use with caution.
    get ipCidrRangeInput() {
        return this._ipCidrRange;
    }
    get subnetworkRangeName() {
        return this.getStringAttribute('subnetwork_range_name');
    }
    set subnetworkRangeName(value) {
        this._subnetworkRangeName = value;
    }
    resetSubnetworkRangeName() {
        this._subnetworkRangeName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subnetworkRangeNameInput() {
        return this._subnetworkRangeName;
    }
}
exports.ComputeInstanceFromTemplateNetworkInterfaceAliasIpRangeOutputReference = ComputeInstanceFromTemplateNetworkInterfaceAliasIpRangeOutputReference;
_l = JSII_RTTI_SYMBOL_1;
ComputeInstanceFromTemplateNetworkInterfaceAliasIpRangeOutputReference[_l] = { fqn: "@cdktf/provider-google.computeInstanceFromTemplate.ComputeInstanceFromTemplateNetworkInterfaceAliasIpRangeOutputReference", version: "14.13.1" };
class ComputeInstanceFromTemplateNetworkInterfaceAliasIpRangeList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeInstanceFromTemplateNetworkInterfaceAliasIpRangeOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeInstanceFromTemplateNetworkInterfaceAliasIpRangeList = ComputeInstanceFromTemplateNetworkInterfaceAliasIpRangeList;
_m = JSII_RTTI_SYMBOL_1;
ComputeInstanceFromTemplateNetworkInterfaceAliasIpRangeList[_m] = { fqn: "@cdktf/provider-google.computeInstanceFromTemplate.ComputeInstanceFromTemplateNetworkInterfaceAliasIpRangeList", version: "14.13.1" };
function computeInstanceFromTemplateNetworkInterfaceIpv6AccessConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        external_ipv6: cdktf.stringToTerraform(struct.externalIpv6),
        external_ipv6_prefix_length: cdktf.stringToTerraform(struct.externalIpv6PrefixLength),
        name: cdktf.stringToTerraform(struct.name),
        network_tier: cdktf.stringToTerraform(struct.networkTier),
        public_ptr_domain_name: cdktf.stringToTerraform(struct.publicPtrDomainName),
    };
}
exports.computeInstanceFromTemplateNetworkInterfaceIpv6AccessConfigToTerraform = computeInstanceFromTemplateNetworkInterfaceIpv6AccessConfigToTerraform;
function computeInstanceFromTemplateNetworkInterfaceIpv6AccessConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        external_ipv6: {
            value: cdktf.stringToHclTerraform(struct.externalIpv6),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        external_ipv6_prefix_length: {
            value: cdktf.stringToHclTerraform(struct.externalIpv6PrefixLength),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        name: {
            value: cdktf.stringToHclTerraform(struct.name),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        network_tier: {
            value: cdktf.stringToHclTerraform(struct.networkTier),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        public_ptr_domain_name: {
            value: cdktf.stringToHclTerraform(struct.publicPtrDomainName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeInstanceFromTemplateNetworkInterfaceIpv6AccessConfigToHclTerraform = computeInstanceFromTemplateNetworkInterfaceIpv6AccessConfigToHclTerraform;
class ComputeInstanceFromTemplateNetworkInterfaceIpv6AccessConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._externalIpv6 !== undefined) {
            hasAnyValues = true;
            internalValueResult.externalIpv6 = this._externalIpv6;
        }
        if (this._externalIpv6PrefixLength !== undefined) {
            hasAnyValues = true;
            internalValueResult.externalIpv6PrefixLength = this._externalIpv6PrefixLength;
        }
        if (this._name !== undefined) {
            hasAnyValues = true;
            internalValueResult.name = this._name;
        }
        if (this._networkTier !== undefined) {
            hasAnyValues = true;
            internalValueResult.networkTier = this._networkTier;
        }
        if (this._publicPtrDomainName !== undefined) {
            hasAnyValues = true;
            internalValueResult.publicPtrDomainName = this._publicPtrDomainName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._externalIpv6 = undefined;
            this._externalIpv6PrefixLength = undefined;
            this._name = undefined;
            this._networkTier = undefined;
            this._publicPtrDomainName = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._externalIpv6 = value.externalIpv6;
            this._externalIpv6PrefixLength = value.externalIpv6PrefixLength;
            this._name = value.name;
            this._networkTier = value.networkTier;
            this._publicPtrDomainName = value.publicPtrDomainName;
        }
    }
    get externalIpv6() {
        return this.getStringAttribute('external_ipv6');
    }
    set externalIpv6(value) {
        this._externalIpv6 = value;
    }
    resetExternalIpv6() {
        this._externalIpv6 = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get externalIpv6Input() {
        return this._externalIpv6;
    }
    get externalIpv6PrefixLength() {
        return this.getStringAttribute('external_ipv6_prefix_length');
    }
    set externalIpv6PrefixLength(value) {
        this._externalIpv6PrefixLength = value;
    }
    resetExternalIpv6PrefixLength() {
        this._externalIpv6PrefixLength = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get externalIpv6PrefixLengthInput() {
        return this._externalIpv6PrefixLength;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    resetName() {
        this._name = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get networkTier() {
        return this.getStringAttribute('network_tier');
    }
    set networkTier(value) {
        this._networkTier = value;
    }
    // Temporarily expose input value. Use with caution.
    get networkTierInput() {
        return this._networkTier;
    }
    get publicPtrDomainName() {
        return this.getStringAttribute('public_ptr_domain_name');
    }
    set publicPtrDomainName(value) {
        this._publicPtrDomainName = value;
    }
    resetPublicPtrDomainName() {
        this._publicPtrDomainName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get publicPtrDomainNameInput() {
        return this._publicPtrDomainName;
    }
}
exports.ComputeInstanceFromTemplateNetworkInterfaceIpv6AccessConfigOutputReference = ComputeInstanceFromTemplateNetworkInterfaceIpv6AccessConfigOutputReference;
_o = JSII_RTTI_SYMBOL_1;
ComputeInstanceFromTemplateNetworkInterfaceIpv6AccessConfigOutputReference[_o] = { fqn: "@cdktf/provider-google.computeInstanceFromTemplate.ComputeInstanceFromTemplateNetworkInterfaceIpv6AccessConfigOutputReference", version: "14.13.1" };
class ComputeInstanceFromTemplateNetworkInterfaceIpv6AccessConfigList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeInstanceFromTemplateNetworkInterfaceIpv6AccessConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeInstanceFromTemplateNetworkInterfaceIpv6AccessConfigList = ComputeInstanceFromTemplateNetworkInterfaceIpv6AccessConfigList;
_p = JSII_RTTI_SYMBOL_1;
ComputeInstanceFromTemplateNetworkInterfaceIpv6AccessConfigList[_p] = { fqn: "@cdktf/provider-google.computeInstanceFromTemplate.ComputeInstanceFromTemplateNetworkInterfaceIpv6AccessConfigList", version: "14.13.1" };
function computeInstanceFromTemplateNetworkInterfaceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        internal_ipv6_prefix_length: cdktf.numberToTerraform(struct.internalIpv6PrefixLength),
        ipv6_address: cdktf.stringToTerraform(struct.ipv6Address),
        network: cdktf.stringToTerraform(struct.network),
        network_ip: cdktf.stringToTerraform(struct.networkIp),
        nic_type: cdktf.stringToTerraform(struct.nicType),
        queue_count: cdktf.numberToTerraform(struct.queueCount),
        stack_type: cdktf.stringToTerraform(struct.stackType),
        subnetwork: cdktf.stringToTerraform(struct.subnetwork),
        subnetwork_project: cdktf.stringToTerraform(struct.subnetworkProject),
        access_config: cdktf.listMapper(computeInstanceFromTemplateNetworkInterfaceAccessConfigToTerraform, true)(struct.accessConfig),
        alias_ip_range: cdktf.listMapper(computeInstanceFromTemplateNetworkInterfaceAliasIpRangeToTerraform, true)(struct.aliasIpRange),
        ipv6_access_config: cdktf.listMapper(computeInstanceFromTemplateNetworkInterfaceIpv6AccessConfigToTerraform, true)(struct.ipv6AccessConfig),
    };
}
exports.computeInstanceFromTemplateNetworkInterfaceToTerraform = computeInstanceFromTemplateNetworkInterfaceToTerraform;
function computeInstanceFromTemplateNetworkInterfaceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        internal_ipv6_prefix_length: {
            value: cdktf.numberToHclTerraform(struct.internalIpv6PrefixLength),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        ipv6_address: {
            value: cdktf.stringToHclTerraform(struct.ipv6Address),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        network: {
            value: cdktf.stringToHclTerraform(struct.network),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        network_ip: {
            value: cdktf.stringToHclTerraform(struct.networkIp),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        nic_type: {
            value: cdktf.stringToHclTerraform(struct.nicType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        queue_count: {
            value: cdktf.numberToHclTerraform(struct.queueCount),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        stack_type: {
            value: cdktf.stringToHclTerraform(struct.stackType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        subnetwork: {
            value: cdktf.stringToHclTerraform(struct.subnetwork),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        subnetwork_project: {
            value: cdktf.stringToHclTerraform(struct.subnetworkProject),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        access_config: {
            value: cdktf.listMapperHcl(computeInstanceFromTemplateNetworkInterfaceAccessConfigToHclTerraform, true)(struct.accessConfig),
            isBlock: true,
            type: "list",
            storageClassType: "ComputeInstanceFromTemplateNetworkInterfaceAccessConfigList",
        },
        alias_ip_range: {
            value: cdktf.listMapperHcl(computeInstanceFromTemplateNetworkInterfaceAliasIpRangeToHclTerraform, true)(struct.aliasIpRange),
            isBlock: true,
            type: "list",
            storageClassType: "ComputeInstanceFromTemplateNetworkInterfaceAliasIpRangeList",
        },
        ipv6_access_config: {
            value: cdktf.listMapperHcl(computeInstanceFromTemplateNetworkInterfaceIpv6AccessConfigToHclTerraform, true)(struct.ipv6AccessConfig),
            isBlock: true,
            type: "list",
            storageClassType: "ComputeInstanceFromTemplateNetworkInterfaceIpv6AccessConfigList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeInstanceFromTemplateNetworkInterfaceToHclTerraform = computeInstanceFromTemplateNetworkInterfaceToHclTerraform;
class ComputeInstanceFromTemplateNetworkInterfaceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // access_config - computed: false, optional: true, required: false
        this._accessConfig = new ComputeInstanceFromTemplateNetworkInterfaceAccessConfigList(this, "access_config", false);
        // alias_ip_range - computed: false, optional: true, required: false
        this._aliasIpRange = new ComputeInstanceFromTemplateNetworkInterfaceAliasIpRangeList(this, "alias_ip_range", false);
        // ipv6_access_config - computed: false, optional: true, required: false
        this._ipv6AccessConfig = new ComputeInstanceFromTemplateNetworkInterfaceIpv6AccessConfigList(this, "ipv6_access_config", false);
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._internalIpv6PrefixLength !== undefined) {
            hasAnyValues = true;
            internalValueResult.internalIpv6PrefixLength = this._internalIpv6PrefixLength;
        }
        if (this._ipv6Address !== undefined) {
            hasAnyValues = true;
            internalValueResult.ipv6Address = this._ipv6Address;
        }
        if (this._network !== undefined) {
            hasAnyValues = true;
            internalValueResult.network = this._network;
        }
        if (this._networkIp !== undefined) {
            hasAnyValues = true;
            internalValueResult.networkIp = this._networkIp;
        }
        if (this._nicType !== undefined) {
            hasAnyValues = true;
            internalValueResult.nicType = this._nicType;
        }
        if (this._queueCount !== undefined) {
            hasAnyValues = true;
            internalValueResult.queueCount = this._queueCount;
        }
        if (this._stackType !== undefined) {
            hasAnyValues = true;
            internalValueResult.stackType = this._stackType;
        }
        if (this._subnetwork !== undefined) {
            hasAnyValues = true;
            internalValueResult.subnetwork = this._subnetwork;
        }
        if (this._subnetworkProject !== undefined) {
            hasAnyValues = true;
            internalValueResult.subnetworkProject = this._subnetworkProject;
        }
        if (this._accessConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.accessConfig = this._accessConfig?.internalValue;
        }
        if (this._aliasIpRange?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.aliasIpRange = this._aliasIpRange?.internalValue;
        }
        if (this._ipv6AccessConfig?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.ipv6AccessConfig = this._ipv6AccessConfig?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._internalIpv6PrefixLength = undefined;
            this._ipv6Address = undefined;
            this._network = undefined;
            this._networkIp = undefined;
            this._nicType = undefined;
            this._queueCount = undefined;
            this._stackType = undefined;
            this._subnetwork = undefined;
            this._subnetworkProject = undefined;
            this._accessConfig.internalValue = undefined;
            this._aliasIpRange.internalValue = undefined;
            this._ipv6AccessConfig.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._internalIpv6PrefixLength = value.internalIpv6PrefixLength;
            this._ipv6Address = value.ipv6Address;
            this._network = value.network;
            this._networkIp = value.networkIp;
            this._nicType = value.nicType;
            this._queueCount = value.queueCount;
            this._stackType = value.stackType;
            this._subnetwork = value.subnetwork;
            this._subnetworkProject = value.subnetworkProject;
            this._accessConfig.internalValue = value.accessConfig;
            this._aliasIpRange.internalValue = value.aliasIpRange;
            this._ipv6AccessConfig.internalValue = value.ipv6AccessConfig;
        }
    }
    get internalIpv6PrefixLength() {
        return this.getNumberAttribute('internal_ipv6_prefix_length');
    }
    set internalIpv6PrefixLength(value) {
        this._internalIpv6PrefixLength = value;
    }
    resetInternalIpv6PrefixLength() {
        this._internalIpv6PrefixLength = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get internalIpv6PrefixLengthInput() {
        return this._internalIpv6PrefixLength;
    }
    // ipv6_access_type - computed: true, optional: false, required: false
    get ipv6AccessType() {
        return this.getStringAttribute('ipv6_access_type');
    }
    get ipv6Address() {
        return this.getStringAttribute('ipv6_address');
    }
    set ipv6Address(value) {
        this._ipv6Address = value;
    }
    resetIpv6Address() {
        this._ipv6Address = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ipv6AddressInput() {
        return this._ipv6Address;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get network() {
        return this.getStringAttribute('network');
    }
    set network(value) {
        this._network = value;
    }
    resetNetwork() {
        this._network = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkInput() {
        return this._network;
    }
    get networkIp() {
        return this.getStringAttribute('network_ip');
    }
    set networkIp(value) {
        this._networkIp = value;
    }
    resetNetworkIp() {
        this._networkIp = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkIpInput() {
        return this._networkIp;
    }
    get nicType() {
        return this.getStringAttribute('nic_type');
    }
    set nicType(value) {
        this._nicType = value;
    }
    resetNicType() {
        this._nicType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nicTypeInput() {
        return this._nicType;
    }
    get queueCount() {
        return this.getNumberAttribute('queue_count');
    }
    set queueCount(value) {
        this._queueCount = value;
    }
    resetQueueCount() {
        this._queueCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get queueCountInput() {
        return this._queueCount;
    }
    get stackType() {
        return this.getStringAttribute('stack_type');
    }
    set stackType(value) {
        this._stackType = value;
    }
    resetStackType() {
        this._stackType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get stackTypeInput() {
        return this._stackType;
    }
    get subnetwork() {
        return this.getStringAttribute('subnetwork');
    }
    set subnetwork(value) {
        this._subnetwork = value;
    }
    resetSubnetwork() {
        this._subnetwork = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subnetworkInput() {
        return this._subnetwork;
    }
    get subnetworkProject() {
        return this.getStringAttribute('subnetwork_project');
    }
    set subnetworkProject(value) {
        this._subnetworkProject = value;
    }
    resetSubnetworkProject() {
        this._subnetworkProject = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subnetworkProjectInput() {
        return this._subnetworkProject;
    }
    get accessConfig() {
        return this._accessConfig;
    }
    putAccessConfig(value) {
        this._accessConfig.internalValue = value;
    }
    resetAccessConfig() {
        this._accessConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accessConfigInput() {
        return this._accessConfig.internalValue;
    }
    get aliasIpRange() {
        return this._aliasIpRange;
    }
    putAliasIpRange(value) {
        this._aliasIpRange.internalValue = value;
    }
    resetAliasIpRange() {
        this._aliasIpRange.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get aliasIpRangeInput() {
        return this._aliasIpRange.internalValue;
    }
    get ipv6AccessConfig() {
        return this._ipv6AccessConfig;
    }
    putIpv6AccessConfig(value) {
        this._ipv6AccessConfig.internalValue = value;
    }
    resetIpv6AccessConfig() {
        this._ipv6AccessConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ipv6AccessConfigInput() {
        return this._ipv6AccessConfig.internalValue;
    }
}
exports.ComputeInstanceFromTemplateNetworkInterfaceOutputReference = ComputeInstanceFromTemplateNetworkInterfaceOutputReference;
_q = JSII_RTTI_SYMBOL_1;
ComputeInstanceFromTemplateNetworkInterfaceOutputReference[_q] = { fqn: "@cdktf/provider-google.computeInstanceFromTemplate.ComputeInstanceFromTemplateNetworkInterfaceOutputReference", version: "14.13.1" };
class ComputeInstanceFromTemplateNetworkInterfaceList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeInstanceFromTemplateNetworkInterfaceOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeInstanceFromTemplateNetworkInterfaceList = ComputeInstanceFromTemplateNetworkInterfaceList;
_r = JSII_RTTI_SYMBOL_1;
ComputeInstanceFromTemplateNetworkInterfaceList[_r] = { fqn: "@cdktf/provider-google.computeInstanceFromTemplate.ComputeInstanceFromTemplateNetworkInterfaceList", version: "14.13.1" };
function computeInstanceFromTemplateNetworkPerformanceConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        total_egress_bandwidth_tier: cdktf.stringToTerraform(struct.totalEgressBandwidthTier),
    };
}
exports.computeInstanceFromTemplateNetworkPerformanceConfigToTerraform = computeInstanceFromTemplateNetworkPerformanceConfigToTerraform;
function computeInstanceFromTemplateNetworkPerformanceConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        total_egress_bandwidth_tier: {
            value: cdktf.stringToHclTerraform(struct.totalEgressBandwidthTier),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeInstanceFromTemplateNetworkPerformanceConfigToHclTerraform = computeInstanceFromTemplateNetworkPerformanceConfigToHclTerraform;
class ComputeInstanceFromTemplateNetworkPerformanceConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._totalEgressBandwidthTier !== undefined) {
            hasAnyValues = true;
            internalValueResult.totalEgressBandwidthTier = this._totalEgressBandwidthTier;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._totalEgressBandwidthTier = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._totalEgressBandwidthTier = value.totalEgressBandwidthTier;
        }
    }
    get totalEgressBandwidthTier() {
        return this.getStringAttribute('total_egress_bandwidth_tier');
    }
    set totalEgressBandwidthTier(value) {
        this._totalEgressBandwidthTier = value;
    }
    // Temporarily expose input value. Use with caution.
    get totalEgressBandwidthTierInput() {
        return this._totalEgressBandwidthTier;
    }
}
exports.ComputeInstanceFromTemplateNetworkPerformanceConfigOutputReference = ComputeInstanceFromTemplateNetworkPerformanceConfigOutputReference;
_s = JSII_RTTI_SYMBOL_1;
ComputeInstanceFromTemplateNetworkPerformanceConfigOutputReference[_s] = { fqn: "@cdktf/provider-google.computeInstanceFromTemplate.ComputeInstanceFromTemplateNetworkPerformanceConfigOutputReference", version: "14.13.1" };
function computeInstanceFromTemplateParamsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        resource_manager_tags: cdktf.hashMapper(cdktf.stringToTerraform)(struct.resourceManagerTags),
    };
}
exports.computeInstanceFromTemplateParamsToTerraform = computeInstanceFromTemplateParamsToTerraform;
function computeInstanceFromTemplateParamsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        resource_manager_tags: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.resourceManagerTags),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeInstanceFromTemplateParamsToHclTerraform = computeInstanceFromTemplateParamsToHclTerraform;
class ComputeInstanceFromTemplateParamsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._resourceManagerTags !== undefined) {
            hasAnyValues = true;
            internalValueResult.resourceManagerTags = this._resourceManagerTags;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._resourceManagerTags = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._resourceManagerTags = value.resourceManagerTags;
        }
    }
    get resourceManagerTags() {
        return this.getStringMapAttribute('resource_manager_tags');
    }
    set resourceManagerTags(value) {
        this._resourceManagerTags = value;
    }
    resetResourceManagerTags() {
        this._resourceManagerTags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceManagerTagsInput() {
        return this._resourceManagerTags;
    }
}
exports.ComputeInstanceFromTemplateParamsOutputReference = ComputeInstanceFromTemplateParamsOutputReference;
_t = JSII_RTTI_SYMBOL_1;
ComputeInstanceFromTemplateParamsOutputReference[_t] = { fqn: "@cdktf/provider-google.computeInstanceFromTemplate.ComputeInstanceFromTemplateParamsOutputReference", version: "14.13.1" };
function computeInstanceFromTemplateReservationAffinitySpecificReservationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.values),
    };
}
exports.computeInstanceFromTemplateReservationAffinitySpecificReservationToTerraform = computeInstanceFromTemplateReservationAffinitySpecificReservationToTerraform;
function computeInstanceFromTemplateReservationAffinitySpecificReservationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        key: {
            value: cdktf.stringToHclTerraform(struct.key),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        values: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.values),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeInstanceFromTemplateReservationAffinitySpecificReservationToHclTerraform = computeInstanceFromTemplateReservationAffinitySpecificReservationToHclTerraform;
class ComputeInstanceFromTemplateReservationAffinitySpecificReservationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._values !== undefined) {
            hasAnyValues = true;
            internalValueResult.values = this._values;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._key = undefined;
            this._values = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._key = value.key;
            this._values = value.values;
        }
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get values() {
        return this.getListAttribute('values');
    }
    set values(value) {
        this._values = value;
    }
    // Temporarily expose input value. Use with caution.
    get valuesInput() {
        return this._values;
    }
}
exports.ComputeInstanceFromTemplateReservationAffinitySpecificReservationOutputReference = ComputeInstanceFromTemplateReservationAffinitySpecificReservationOutputReference;
_u = JSII_RTTI_SYMBOL_1;
ComputeInstanceFromTemplateReservationAffinitySpecificReservationOutputReference[_u] = { fqn: "@cdktf/provider-google.computeInstanceFromTemplate.ComputeInstanceFromTemplateReservationAffinitySpecificReservationOutputReference", version: "14.13.1" };
function computeInstanceFromTemplateReservationAffinityToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        type: cdktf.stringToTerraform(struct.type),
        specific_reservation: computeInstanceFromTemplateReservationAffinitySpecificReservationToTerraform(struct.specificReservation),
    };
}
exports.computeInstanceFromTemplateReservationAffinityToTerraform = computeInstanceFromTemplateReservationAffinityToTerraform;
function computeInstanceFromTemplateReservationAffinityToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        type: {
            value: cdktf.stringToHclTerraform(struct.type),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        specific_reservation: {
            value: computeInstanceFromTemplateReservationAffinitySpecificReservationToHclTerraform(struct.specificReservation),
            isBlock: true,
            type: "list",
            storageClassType: "ComputeInstanceFromTemplateReservationAffinitySpecificReservationList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeInstanceFromTemplateReservationAffinityToHclTerraform = computeInstanceFromTemplateReservationAffinityToHclTerraform;
class ComputeInstanceFromTemplateReservationAffinityOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // specific_reservation - computed: false, optional: true, required: false
        this._specificReservation = new ComputeInstanceFromTemplateReservationAffinitySpecificReservationOutputReference(this, "specific_reservation");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._type !== undefined) {
            hasAnyValues = true;
            internalValueResult.type = this._type;
        }
        if (this._specificReservation?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.specificReservation = this._specificReservation?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._type = undefined;
            this._specificReservation.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._type = value.type;
            this._specificReservation.internalValue = value.specificReservation;
        }
    }
    get type() {
        return this.getStringAttribute('type');
    }
    set type(value) {
        this._type = value;
    }
    // Temporarily expose input value. Use with caution.
    get typeInput() {
        return this._type;
    }
    get specificReservation() {
        return this._specificReservation;
    }
    putSpecificReservation(value) {
        this._specificReservation.internalValue = value;
    }
    resetSpecificReservation() {
        this._specificReservation.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get specificReservationInput() {
        return this._specificReservation.internalValue;
    }
}
exports.ComputeInstanceFromTemplateReservationAffinityOutputReference = ComputeInstanceFromTemplateReservationAffinityOutputReference;
_v = JSII_RTTI_SYMBOL_1;
ComputeInstanceFromTemplateReservationAffinityOutputReference[_v] = { fqn: "@cdktf/provider-google.computeInstanceFromTemplate.ComputeInstanceFromTemplateReservationAffinityOutputReference", version: "14.13.1" };
function computeInstanceFromTemplateSchedulingLocalSsdRecoveryTimeoutToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        nanos: cdktf.numberToTerraform(struct.nanos),
        seconds: cdktf.numberToTerraform(struct.seconds),
    };
}
exports.computeInstanceFromTemplateSchedulingLocalSsdRecoveryTimeoutToTerraform = computeInstanceFromTemplateSchedulingLocalSsdRecoveryTimeoutToTerraform;
function computeInstanceFromTemplateSchedulingLocalSsdRecoveryTimeoutToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        nanos: {
            value: cdktf.numberToHclTerraform(struct.nanos),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        seconds: {
            value: cdktf.numberToHclTerraform(struct.seconds),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeInstanceFromTemplateSchedulingLocalSsdRecoveryTimeoutToHclTerraform = computeInstanceFromTemplateSchedulingLocalSsdRecoveryTimeoutToHclTerraform;
class ComputeInstanceFromTemplateSchedulingLocalSsdRecoveryTimeoutOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._nanos !== undefined) {
            hasAnyValues = true;
            internalValueResult.nanos = this._nanos;
        }
        if (this._seconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.seconds = this._seconds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._nanos = undefined;
            this._seconds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._nanos = value.nanos;
            this._seconds = value.seconds;
        }
    }
    get nanos() {
        return this.getNumberAttribute('nanos');
    }
    set nanos(value) {
        this._nanos = value;
    }
    resetNanos() {
        this._nanos = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nanosInput() {
        return this._nanos;
    }
    get seconds() {
        return this.getNumberAttribute('seconds');
    }
    set seconds(value) {
        this._seconds = value;
    }
    // Temporarily expose input value. Use with caution.
    get secondsInput() {
        return this._seconds;
    }
}
exports.ComputeInstanceFromTemplateSchedulingLocalSsdRecoveryTimeoutOutputReference = ComputeInstanceFromTemplateSchedulingLocalSsdRecoveryTimeoutOutputReference;
_w = JSII_RTTI_SYMBOL_1;
ComputeInstanceFromTemplateSchedulingLocalSsdRecoveryTimeoutOutputReference[_w] = { fqn: "@cdktf/provider-google.computeInstanceFromTemplate.ComputeInstanceFromTemplateSchedulingLocalSsdRecoveryTimeoutOutputReference", version: "14.13.1" };
function computeInstanceFromTemplateSchedulingMaxRunDurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        nanos: cdktf.numberToTerraform(struct.nanos),
        seconds: cdktf.numberToTerraform(struct.seconds),
    };
}
exports.computeInstanceFromTemplateSchedulingMaxRunDurationToTerraform = computeInstanceFromTemplateSchedulingMaxRunDurationToTerraform;
function computeInstanceFromTemplateSchedulingMaxRunDurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        nanos: {
            value: cdktf.numberToHclTerraform(struct.nanos),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        seconds: {
            value: cdktf.numberToHclTerraform(struct.seconds),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeInstanceFromTemplateSchedulingMaxRunDurationToHclTerraform = computeInstanceFromTemplateSchedulingMaxRunDurationToHclTerraform;
class ComputeInstanceFromTemplateSchedulingMaxRunDurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._nanos !== undefined) {
            hasAnyValues = true;
            internalValueResult.nanos = this._nanos;
        }
        if (this._seconds !== undefined) {
            hasAnyValues = true;
            internalValueResult.seconds = this._seconds;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._nanos = undefined;
            this._seconds = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._nanos = value.nanos;
            this._seconds = value.seconds;
        }
    }
    get nanos() {
        return this.getNumberAttribute('nanos');
    }
    set nanos(value) {
        this._nanos = value;
    }
    resetNanos() {
        this._nanos = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nanosInput() {
        return this._nanos;
    }
    get seconds() {
        return this.getNumberAttribute('seconds');
    }
    set seconds(value) {
        this._seconds = value;
    }
    // Temporarily expose input value. Use with caution.
    get secondsInput() {
        return this._seconds;
    }
}
exports.ComputeInstanceFromTemplateSchedulingMaxRunDurationOutputReference = ComputeInstanceFromTemplateSchedulingMaxRunDurationOutputReference;
_x = JSII_RTTI_SYMBOL_1;
ComputeInstanceFromTemplateSchedulingMaxRunDurationOutputReference[_x] = { fqn: "@cdktf/provider-google.computeInstanceFromTemplate.ComputeInstanceFromTemplateSchedulingMaxRunDurationOutputReference", version: "14.13.1" };
function computeInstanceFromTemplateSchedulingNodeAffinitiesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        key: cdktf.stringToTerraform(struct.key),
        operator: cdktf.stringToTerraform(struct.operator),
        values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.values),
    };
}
exports.computeInstanceFromTemplateSchedulingNodeAffinitiesToTerraform = computeInstanceFromTemplateSchedulingNodeAffinitiesToTerraform;
function computeInstanceFromTemplateSchedulingNodeAffinitiesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        key: {
            value: cdktf.stringToHclTerraform(struct.key),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        operator: {
            value: cdktf.stringToHclTerraform(struct.operator),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        values: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.values),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeInstanceFromTemplateSchedulingNodeAffinitiesToHclTerraform = computeInstanceFromTemplateSchedulingNodeAffinitiesToHclTerraform;
class ComputeInstanceFromTemplateSchedulingNodeAffinitiesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._key !== undefined) {
            hasAnyValues = true;
            internalValueResult.key = this._key;
        }
        if (this._operator !== undefined) {
            hasAnyValues = true;
            internalValueResult.operator = this._operator;
        }
        if (this._values !== undefined) {
            hasAnyValues = true;
            internalValueResult.values = this._values;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._key = undefined;
            this._operator = undefined;
            this._values = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._key = value.key;
            this._operator = value.operator;
            this._values = value.values;
        }
    }
    get key() {
        return this.getStringAttribute('key');
    }
    set key(value) {
        this._key = value;
    }
    // Temporarily expose input value. Use with caution.
    get keyInput() {
        return this._key;
    }
    get operator() {
        return this.getStringAttribute('operator');
    }
    set operator(value) {
        this._operator = value;
    }
    // Temporarily expose input value. Use with caution.
    get operatorInput() {
        return this._operator;
    }
    get values() {
        return cdktf.Fn.tolist(this.getListAttribute('values'));
    }
    set values(value) {
        this._values = value;
    }
    // Temporarily expose input value. Use with caution.
    get valuesInput() {
        return this._values;
    }
}
exports.ComputeInstanceFromTemplateSchedulingNodeAffinitiesOutputReference = ComputeInstanceFromTemplateSchedulingNodeAffinitiesOutputReference;
_y = JSII_RTTI_SYMBOL_1;
ComputeInstanceFromTemplateSchedulingNodeAffinitiesOutputReference[_y] = { fqn: "@cdktf/provider-google.computeInstanceFromTemplate.ComputeInstanceFromTemplateSchedulingNodeAffinitiesOutputReference", version: "14.13.1" };
class ComputeInstanceFromTemplateSchedulingNodeAffinitiesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeInstanceFromTemplateSchedulingNodeAffinitiesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeInstanceFromTemplateSchedulingNodeAffinitiesList = ComputeInstanceFromTemplateSchedulingNodeAffinitiesList;
_z = JSII_RTTI_SYMBOL_1;
ComputeInstanceFromTemplateSchedulingNodeAffinitiesList[_z] = { fqn: "@cdktf/provider-google.computeInstanceFromTemplate.ComputeInstanceFromTemplateSchedulingNodeAffinitiesList", version: "14.13.1" };
function computeInstanceFromTemplateSchedulingOnInstanceStopActionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        discard_local_ssd: cdktf.booleanToTerraform(struct.discardLocalSsd),
    };
}
exports.computeInstanceFromTemplateSchedulingOnInstanceStopActionToTerraform = computeInstanceFromTemplateSchedulingOnInstanceStopActionToTerraform;
function computeInstanceFromTemplateSchedulingOnInstanceStopActionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        discard_local_ssd: {
            value: cdktf.booleanToHclTerraform(struct.discardLocalSsd),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeInstanceFromTemplateSchedulingOnInstanceStopActionToHclTerraform = computeInstanceFromTemplateSchedulingOnInstanceStopActionToHclTerraform;
class ComputeInstanceFromTemplateSchedulingOnInstanceStopActionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._discardLocalSsd !== undefined) {
            hasAnyValues = true;
            internalValueResult.discardLocalSsd = this._discardLocalSsd;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._discardLocalSsd = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._discardLocalSsd = value.discardLocalSsd;
        }
    }
    get discardLocalSsd() {
        return this.getBooleanAttribute('discard_local_ssd');
    }
    set discardLocalSsd(value) {
        this._discardLocalSsd = value;
    }
    resetDiscardLocalSsd() {
        this._discardLocalSsd = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get discardLocalSsdInput() {
        return this._discardLocalSsd;
    }
}
exports.ComputeInstanceFromTemplateSchedulingOnInstanceStopActionOutputReference = ComputeInstanceFromTemplateSchedulingOnInstanceStopActionOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
ComputeInstanceFromTemplateSchedulingOnInstanceStopActionOutputReference[_0] = { fqn: "@cdktf/provider-google.computeInstanceFromTemplate.ComputeInstanceFromTemplateSchedulingOnInstanceStopActionOutputReference", version: "14.13.1" };
function computeInstanceFromTemplateSchedulingToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        automatic_restart: cdktf.booleanToTerraform(struct.automaticRestart),
        instance_termination_action: cdktf.stringToTerraform(struct.instanceTerminationAction),
        min_node_cpus: cdktf.numberToTerraform(struct.minNodeCpus),
        on_host_maintenance: cdktf.stringToTerraform(struct.onHostMaintenance),
        preemptible: cdktf.booleanToTerraform(struct.preemptible),
        provisioning_model: cdktf.stringToTerraform(struct.provisioningModel),
        local_ssd_recovery_timeout: computeInstanceFromTemplateSchedulingLocalSsdRecoveryTimeoutToTerraform(struct.localSsdRecoveryTimeout),
        max_run_duration: computeInstanceFromTemplateSchedulingMaxRunDurationToTerraform(struct.maxRunDuration),
        node_affinities: cdktf.listMapper(computeInstanceFromTemplateSchedulingNodeAffinitiesToTerraform, true)(struct.nodeAffinities),
        on_instance_stop_action: computeInstanceFromTemplateSchedulingOnInstanceStopActionToTerraform(struct.onInstanceStopAction),
    };
}
exports.computeInstanceFromTemplateSchedulingToTerraform = computeInstanceFromTemplateSchedulingToTerraform;
function computeInstanceFromTemplateSchedulingToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        automatic_restart: {
            value: cdktf.booleanToHclTerraform(struct.automaticRestart),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        instance_termination_action: {
            value: cdktf.stringToHclTerraform(struct.instanceTerminationAction),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        min_node_cpus: {
            value: cdktf.numberToHclTerraform(struct.minNodeCpus),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        on_host_maintenance: {
            value: cdktf.stringToHclTerraform(struct.onHostMaintenance),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        preemptible: {
            value: cdktf.booleanToHclTerraform(struct.preemptible),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        provisioning_model: {
            value: cdktf.stringToHclTerraform(struct.provisioningModel),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        local_ssd_recovery_timeout: {
            value: computeInstanceFromTemplateSchedulingLocalSsdRecoveryTimeoutToHclTerraform(struct.localSsdRecoveryTimeout),
            isBlock: true,
            type: "list",
            storageClassType: "ComputeInstanceFromTemplateSchedulingLocalSsdRecoveryTimeoutList",
        },
        max_run_duration: {
            value: computeInstanceFromTemplateSchedulingMaxRunDurationToHclTerraform(struct.maxRunDuration),
            isBlock: true,
            type: "list",
            storageClassType: "ComputeInstanceFromTemplateSchedulingMaxRunDurationList",
        },
        node_affinities: {
            value: cdktf.listMapperHcl(computeInstanceFromTemplateSchedulingNodeAffinitiesToHclTerraform, true)(struct.nodeAffinities),
            isBlock: true,
            type: "set",
            storageClassType: "ComputeInstanceFromTemplateSchedulingNodeAffinitiesList",
        },
        on_instance_stop_action: {
            value: computeInstanceFromTemplateSchedulingOnInstanceStopActionToHclTerraform(struct.onInstanceStopAction),
            isBlock: true,
            type: "list",
            storageClassType: "ComputeInstanceFromTemplateSchedulingOnInstanceStopActionList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeInstanceFromTemplateSchedulingToHclTerraform = computeInstanceFromTemplateSchedulingToHclTerraform;
class ComputeInstanceFromTemplateSchedulingOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // local_ssd_recovery_timeout - computed: false, optional: true, required: false
        this._localSsdRecoveryTimeout = new ComputeInstanceFromTemplateSchedulingLocalSsdRecoveryTimeoutOutputReference(this, "local_ssd_recovery_timeout");
        // max_run_duration - computed: false, optional: true, required: false
        this._maxRunDuration = new ComputeInstanceFromTemplateSchedulingMaxRunDurationOutputReference(this, "max_run_duration");
        // node_affinities - computed: false, optional: true, required: false
        this._nodeAffinities = new ComputeInstanceFromTemplateSchedulingNodeAffinitiesList(this, "node_affinities", true);
        // on_instance_stop_action - computed: false, optional: true, required: false
        this._onInstanceStopAction = new ComputeInstanceFromTemplateSchedulingOnInstanceStopActionOutputReference(this, "on_instance_stop_action");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._automaticRestart !== undefined) {
            hasAnyValues = true;
            internalValueResult.automaticRestart = this._automaticRestart;
        }
        if (this._instanceTerminationAction !== undefined) {
            hasAnyValues = true;
            internalValueResult.instanceTerminationAction = this._instanceTerminationAction;
        }
        if (this._minNodeCpus !== undefined) {
            hasAnyValues = true;
            internalValueResult.minNodeCpus = this._minNodeCpus;
        }
        if (this._onHostMaintenance !== undefined) {
            hasAnyValues = true;
            internalValueResult.onHostMaintenance = this._onHostMaintenance;
        }
        if (this._preemptible !== undefined) {
            hasAnyValues = true;
            internalValueResult.preemptible = this._preemptible;
        }
        if (this._provisioningModel !== undefined) {
            hasAnyValues = true;
            internalValueResult.provisioningModel = this._provisioningModel;
        }
        if (this._localSsdRecoveryTimeout?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.localSsdRecoveryTimeout = this._localSsdRecoveryTimeout?.internalValue;
        }
        if (this._maxRunDuration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxRunDuration = this._maxRunDuration?.internalValue;
        }
        if (this._nodeAffinities?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.nodeAffinities = this._nodeAffinities?.internalValue;
        }
        if (this._onInstanceStopAction?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.onInstanceStopAction = this._onInstanceStopAction?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._automaticRestart = undefined;
            this._instanceTerminationAction = undefined;
            this._minNodeCpus = undefined;
            this._onHostMaintenance = undefined;
            this._preemptible = undefined;
            this._provisioningModel = undefined;
            this._localSsdRecoveryTimeout.internalValue = undefined;
            this._maxRunDuration.internalValue = undefined;
            this._nodeAffinities.internalValue = undefined;
            this._onInstanceStopAction.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._automaticRestart = value.automaticRestart;
            this._instanceTerminationAction = value.instanceTerminationAction;
            this._minNodeCpus = value.minNodeCpus;
            this._onHostMaintenance = value.onHostMaintenance;
            this._preemptible = value.preemptible;
            this._provisioningModel = value.provisioningModel;
            this._localSsdRecoveryTimeout.internalValue = value.localSsdRecoveryTimeout;
            this._maxRunDuration.internalValue = value.maxRunDuration;
            this._nodeAffinities.internalValue = value.nodeAffinities;
            this._onInstanceStopAction.internalValue = value.onInstanceStopAction;
        }
    }
    get automaticRestart() {
        return this.getBooleanAttribute('automatic_restart');
    }
    set automaticRestart(value) {
        this._automaticRestart = value;
    }
    resetAutomaticRestart() {
        this._automaticRestart = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get automaticRestartInput() {
        return this._automaticRestart;
    }
    get instanceTerminationAction() {
        return this.getStringAttribute('instance_termination_action');
    }
    set instanceTerminationAction(value) {
        this._instanceTerminationAction = value;
    }
    resetInstanceTerminationAction() {
        this._instanceTerminationAction = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get instanceTerminationActionInput() {
        return this._instanceTerminationAction;
    }
    get minNodeCpus() {
        return this.getNumberAttribute('min_node_cpus');
    }
    set minNodeCpus(value) {
        this._minNodeCpus = value;
    }
    resetMinNodeCpus() {
        this._minNodeCpus = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minNodeCpusInput() {
        return this._minNodeCpus;
    }
    get onHostMaintenance() {
        return this.getStringAttribute('on_host_maintenance');
    }
    set onHostMaintenance(value) {
        this._onHostMaintenance = value;
    }
    resetOnHostMaintenance() {
        this._onHostMaintenance = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get onHostMaintenanceInput() {
        return this._onHostMaintenance;
    }
    get preemptible() {
        return this.getBooleanAttribute('preemptible');
    }
    set preemptible(value) {
        this._preemptible = value;
    }
    resetPreemptible() {
        this._preemptible = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get preemptibleInput() {
        return this._preemptible;
    }
    get provisioningModel() {
        return this.getStringAttribute('provisioning_model');
    }
    set provisioningModel(value) {
        this._provisioningModel = value;
    }
    resetProvisioningModel() {
        this._provisioningModel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get provisioningModelInput() {
        return this._provisioningModel;
    }
    get localSsdRecoveryTimeout() {
        return this._localSsdRecoveryTimeout;
    }
    putLocalSsdRecoveryTimeout(value) {
        this._localSsdRecoveryTimeout.internalValue = value;
    }
    resetLocalSsdRecoveryTimeout() {
        this._localSsdRecoveryTimeout.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get localSsdRecoveryTimeoutInput() {
        return this._localSsdRecoveryTimeout.internalValue;
    }
    get maxRunDuration() {
        return this._maxRunDuration;
    }
    putMaxRunDuration(value) {
        this._maxRunDuration.internalValue = value;
    }
    resetMaxRunDuration() {
        this._maxRunDuration.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxRunDurationInput() {
        return this._maxRunDuration.internalValue;
    }
    get nodeAffinities() {
        return this._nodeAffinities;
    }
    putNodeAffinities(value) {
        this._nodeAffinities.internalValue = value;
    }
    resetNodeAffinities() {
        this._nodeAffinities.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get nodeAffinitiesInput() {
        return this._nodeAffinities.internalValue;
    }
    get onInstanceStopAction() {
        return this._onInstanceStopAction;
    }
    putOnInstanceStopAction(value) {
        this._onInstanceStopAction.internalValue = value;
    }
    resetOnInstanceStopAction() {
        this._onInstanceStopAction.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get onInstanceStopActionInput() {
        return this._onInstanceStopAction.internalValue;
    }
}
exports.ComputeInstanceFromTemplateSchedulingOutputReference = ComputeInstanceFromTemplateSchedulingOutputReference;
_1 = JSII_RTTI_SYMBOL_1;
ComputeInstanceFromTemplateSchedulingOutputReference[_1] = { fqn: "@cdktf/provider-google.computeInstanceFromTemplate.ComputeInstanceFromTemplateSchedulingOutputReference", version: "14.13.1" };
function computeInstanceFromTemplateScratchDiskToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        device_name: cdktf.stringToTerraform(struct.deviceName),
        interface: cdktf.stringToTerraform(struct.interface),
        size: cdktf.numberToTerraform(struct.size),
    };
}
exports.computeInstanceFromTemplateScratchDiskToTerraform = computeInstanceFromTemplateScratchDiskToTerraform;
function computeInstanceFromTemplateScratchDiskToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        device_name: {
            value: cdktf.stringToHclTerraform(struct.deviceName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        interface: {
            value: cdktf.stringToHclTerraform(struct.interface),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        size: {
            value: cdktf.numberToHclTerraform(struct.size),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeInstanceFromTemplateScratchDiskToHclTerraform = computeInstanceFromTemplateScratchDiskToHclTerraform;
class ComputeInstanceFromTemplateScratchDiskOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._deviceName !== undefined) {
            hasAnyValues = true;
            internalValueResult.deviceName = this._deviceName;
        }
        if (this._interface !== undefined) {
            hasAnyValues = true;
            internalValueResult.interface = this._interface;
        }
        if (this._size !== undefined) {
            hasAnyValues = true;
            internalValueResult.size = this._size;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._deviceName = undefined;
            this._interface = undefined;
            this._size = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._deviceName = value.deviceName;
            this._interface = value.interface;
            this._size = value.size;
        }
    }
    get deviceName() {
        return this.getStringAttribute('device_name');
    }
    set deviceName(value) {
        this._deviceName = value;
    }
    resetDeviceName() {
        this._deviceName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deviceNameInput() {
        return this._deviceName;
    }
    get interface() {
        return this.getStringAttribute('interface');
    }
    set interface(value) {
        this._interface = value;
    }
    // Temporarily expose input value. Use with caution.
    get interfaceInput() {
        return this._interface;
    }
    get size() {
        return this.getNumberAttribute('size');
    }
    set size(value) {
        this._size = value;
    }
    resetSize() {
        this._size = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sizeInput() {
        return this._size;
    }
}
exports.ComputeInstanceFromTemplateScratchDiskOutputReference = ComputeInstanceFromTemplateScratchDiskOutputReference;
_2 = JSII_RTTI_SYMBOL_1;
ComputeInstanceFromTemplateScratchDiskOutputReference[_2] = { fqn: "@cdktf/provider-google.computeInstanceFromTemplate.ComputeInstanceFromTemplateScratchDiskOutputReference", version: "14.13.1" };
class ComputeInstanceFromTemplateScratchDiskList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ComputeInstanceFromTemplateScratchDiskOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ComputeInstanceFromTemplateScratchDiskList = ComputeInstanceFromTemplateScratchDiskList;
_3 = JSII_RTTI_SYMBOL_1;
ComputeInstanceFromTemplateScratchDiskList[_3] = { fqn: "@cdktf/provider-google.computeInstanceFromTemplate.ComputeInstanceFromTemplateScratchDiskList", version: "14.13.1" };
function computeInstanceFromTemplateServiceAccountToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        email: cdktf.stringToTerraform(struct.email),
        scopes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.scopes),
    };
}
exports.computeInstanceFromTemplateServiceAccountToTerraform = computeInstanceFromTemplateServiceAccountToTerraform;
function computeInstanceFromTemplateServiceAccountToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        email: {
            value: cdktf.stringToHclTerraform(struct.email),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        scopes: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.scopes),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeInstanceFromTemplateServiceAccountToHclTerraform = computeInstanceFromTemplateServiceAccountToHclTerraform;
class ComputeInstanceFromTemplateServiceAccountOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._email !== undefined) {
            hasAnyValues = true;
            internalValueResult.email = this._email;
        }
        if (this._scopes !== undefined) {
            hasAnyValues = true;
            internalValueResult.scopes = this._scopes;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._email = undefined;
            this._scopes = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._email = value.email;
            this._scopes = value.scopes;
        }
    }
    get email() {
        return this.getStringAttribute('email');
    }
    set email(value) {
        this._email = value;
    }
    resetEmail() {
        this._email = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get emailInput() {
        return this._email;
    }
    get scopes() {
        return cdktf.Fn.tolist(this.getListAttribute('scopes'));
    }
    set scopes(value) {
        this._scopes = value;
    }
    // Temporarily expose input value. Use with caution.
    get scopesInput() {
        return this._scopes;
    }
}
exports.ComputeInstanceFromTemplateServiceAccountOutputReference = ComputeInstanceFromTemplateServiceAccountOutputReference;
_4 = JSII_RTTI_SYMBOL_1;
ComputeInstanceFromTemplateServiceAccountOutputReference[_4] = { fqn: "@cdktf/provider-google.computeInstanceFromTemplate.ComputeInstanceFromTemplateServiceAccountOutputReference", version: "14.13.1" };
function computeInstanceFromTemplateShieldedInstanceConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enable_integrity_monitoring: cdktf.booleanToTerraform(struct.enableIntegrityMonitoring),
        enable_secure_boot: cdktf.booleanToTerraform(struct.enableSecureBoot),
        enable_vtpm: cdktf.booleanToTerraform(struct.enableVtpm),
    };
}
exports.computeInstanceFromTemplateShieldedInstanceConfigToTerraform = computeInstanceFromTemplateShieldedInstanceConfigToTerraform;
function computeInstanceFromTemplateShieldedInstanceConfigToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enable_integrity_monitoring: {
            value: cdktf.booleanToHclTerraform(struct.enableIntegrityMonitoring),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        enable_secure_boot: {
            value: cdktf.booleanToHclTerraform(struct.enableSecureBoot),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        enable_vtpm: {
            value: cdktf.booleanToHclTerraform(struct.enableVtpm),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeInstanceFromTemplateShieldedInstanceConfigToHclTerraform = computeInstanceFromTemplateShieldedInstanceConfigToHclTerraform;
class ComputeInstanceFromTemplateShieldedInstanceConfigOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enableIntegrityMonitoring !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableIntegrityMonitoring = this._enableIntegrityMonitoring;
        }
        if (this._enableSecureBoot !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableSecureBoot = this._enableSecureBoot;
        }
        if (this._enableVtpm !== undefined) {
            hasAnyValues = true;
            internalValueResult.enableVtpm = this._enableVtpm;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enableIntegrityMonitoring = undefined;
            this._enableSecureBoot = undefined;
            this._enableVtpm = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enableIntegrityMonitoring = value.enableIntegrityMonitoring;
            this._enableSecureBoot = value.enableSecureBoot;
            this._enableVtpm = value.enableVtpm;
        }
    }
    get enableIntegrityMonitoring() {
        return this.getBooleanAttribute('enable_integrity_monitoring');
    }
    set enableIntegrityMonitoring(value) {
        this._enableIntegrityMonitoring = value;
    }
    resetEnableIntegrityMonitoring() {
        this._enableIntegrityMonitoring = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableIntegrityMonitoringInput() {
        return this._enableIntegrityMonitoring;
    }
    get enableSecureBoot() {
        return this.getBooleanAttribute('enable_secure_boot');
    }
    set enableSecureBoot(value) {
        this._enableSecureBoot = value;
    }
    resetEnableSecureBoot() {
        this._enableSecureBoot = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableSecureBootInput() {
        return this._enableSecureBoot;
    }
    get enableVtpm() {
        return this.getBooleanAttribute('enable_vtpm');
    }
    set enableVtpm(value) {
        this._enableVtpm = value;
    }
    resetEnableVtpm() {
        this._enableVtpm = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableVtpmInput() {
        return this._enableVtpm;
    }
}
exports.ComputeInstanceFromTemplateShieldedInstanceConfigOutputReference = ComputeInstanceFromTemplateShieldedInstanceConfigOutputReference;
_5 = JSII_RTTI_SYMBOL_1;
ComputeInstanceFromTemplateShieldedInstanceConfigOutputReference[_5] = { fqn: "@cdktf/provider-google.computeInstanceFromTemplate.ComputeInstanceFromTemplateShieldedInstanceConfigOutputReference", version: "14.13.1" };
function computeInstanceFromTemplateTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.computeInstanceFromTemplateTimeoutsToTerraform = computeInstanceFromTemplateTimeoutsToTerraform;
function computeInstanceFromTemplateTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.computeInstanceFromTemplateTimeoutsToHclTerraform = computeInstanceFromTemplateTimeoutsToHclTerraform;
class ComputeInstanceFromTemplateTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.ComputeInstanceFromTemplateTimeoutsOutputReference = ComputeInstanceFromTemplateTimeoutsOutputReference;
_6 = JSII_RTTI_SYMBOL_1;
ComputeInstanceFromTemplateTimeoutsOutputReference[_6] = { fqn: "@cdktf/provider-google.computeInstanceFromTemplate.ComputeInstanceFromTemplateTimeoutsOutputReference", version: "14.13.1" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/compute_instance_from_template google_compute_instance_from_template}
*/
class ComputeInstanceFromTemplate extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a ComputeInstanceFromTemplate resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the ComputeInstanceFromTemplate to import
    * @param importFromId The id of the existing ComputeInstanceFromTemplate that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/compute_instance_from_template#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the ComputeInstanceFromTemplate to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_compute_instance_from_template", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/compute_instance_from_template google_compute_instance_from_template} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ComputeInstanceFromTemplateConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_compute_instance_from_template',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // effective_labels - computed: true, optional: false, required: false
        this._effectiveLabels = new cdktf.StringMap(this, "effective_labels");
        // terraform_labels - computed: true, optional: false, required: false
        this._terraformLabels = new cdktf.StringMap(this, "terraform_labels");
        // advanced_machine_features - computed: false, optional: true, required: false
        this._advancedMachineFeatures = new ComputeInstanceFromTemplateAdvancedMachineFeaturesOutputReference(this, "advanced_machine_features");
        // attached_disk - computed: false, optional: true, required: false
        this._attachedDisk = new ComputeInstanceFromTemplateAttachedDiskList(this, "attached_disk", false);
        // boot_disk - computed: false, optional: true, required: false
        this._bootDisk = new ComputeInstanceFromTemplateBootDiskOutputReference(this, "boot_disk");
        // confidential_instance_config - computed: false, optional: true, required: false
        this._confidentialInstanceConfig = new ComputeInstanceFromTemplateConfidentialInstanceConfigOutputReference(this, "confidential_instance_config");
        // guest_accelerator - computed: false, optional: true, required: false
        this._guestAccelerator = new ComputeInstanceFromTemplateGuestAcceleratorList(this, "guest_accelerator", false);
        // network_interface - computed: false, optional: true, required: false
        this._networkInterface = new ComputeInstanceFromTemplateNetworkInterfaceList(this, "network_interface", false);
        // network_performance_config - computed: false, optional: true, required: false
        this._networkPerformanceConfig = new ComputeInstanceFromTemplateNetworkPerformanceConfigOutputReference(this, "network_performance_config");
        // params - computed: false, optional: true, required: false
        this._params = new ComputeInstanceFromTemplateParamsOutputReference(this, "params");
        // reservation_affinity - computed: false, optional: true, required: false
        this._reservationAffinity = new ComputeInstanceFromTemplateReservationAffinityOutputReference(this, "reservation_affinity");
        // scheduling - computed: false, optional: true, required: false
        this._scheduling = new ComputeInstanceFromTemplateSchedulingOutputReference(this, "scheduling");
        // scratch_disk - computed: false, optional: true, required: false
        this._scratchDisk = new ComputeInstanceFromTemplateScratchDiskList(this, "scratch_disk", false);
        // service_account - computed: false, optional: true, required: false
        this._serviceAccount = new ComputeInstanceFromTemplateServiceAccountOutputReference(this, "service_account");
        // shielded_instance_config - computed: false, optional: true, required: false
        this._shieldedInstanceConfig = new ComputeInstanceFromTemplateShieldedInstanceConfigOutputReference(this, "shielded_instance_config");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new ComputeInstanceFromTemplateTimeoutsOutputReference(this, "timeouts");
        this._allowStoppingForUpdate = config.allowStoppingForUpdate;
        this._canIpForward = config.canIpForward;
        this._deletionProtection = config.deletionProtection;
        this._description = config.description;
        this._desiredStatus = config.desiredStatus;
        this._enableDisplay = config.enableDisplay;
        this._hostname = config.hostname;
        this._id = config.id;
        this._keyRevocationActionType = config.keyRevocationActionType;
        this._labels = config.labels;
        this._machineType = config.machineType;
        this._metadata = config.metadata;
        this._metadataStartupScript = config.metadataStartupScript;
        this._minCpuPlatform = config.minCpuPlatform;
        this._name = config.name;
        this._project = config.project;
        this._resourcePolicies = config.resourcePolicies;
        this._sourceInstanceTemplate = config.sourceInstanceTemplate;
        this._tags = config.tags;
        this._zone = config.zone;
        this._advancedMachineFeatures.internalValue = config.advancedMachineFeatures;
        this._attachedDisk.internalValue = config.attachedDisk;
        this._bootDisk.internalValue = config.bootDisk;
        this._confidentialInstanceConfig.internalValue = config.confidentialInstanceConfig;
        this._guestAccelerator.internalValue = config.guestAccelerator;
        this._networkInterface.internalValue = config.networkInterface;
        this._networkPerformanceConfig.internalValue = config.networkPerformanceConfig;
        this._params.internalValue = config.params;
        this._reservationAffinity.internalValue = config.reservationAffinity;
        this._scheduling.internalValue = config.scheduling;
        this._scratchDisk.internalValue = config.scratchDisk;
        this._serviceAccount.internalValue = config.serviceAccount;
        this._shieldedInstanceConfig.internalValue = config.shieldedInstanceConfig;
        this._timeouts.internalValue = config.timeouts;
    }
    get allowStoppingForUpdate() {
        return this.getBooleanAttribute('allow_stopping_for_update');
    }
    set allowStoppingForUpdate(value) {
        this._allowStoppingForUpdate = value;
    }
    resetAllowStoppingForUpdate() {
        this._allowStoppingForUpdate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get allowStoppingForUpdateInput() {
        return this._allowStoppingForUpdate;
    }
    get canIpForward() {
        return this.getBooleanAttribute('can_ip_forward');
    }
    set canIpForward(value) {
        this._canIpForward = value;
    }
    resetCanIpForward() {
        this._canIpForward = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get canIpForwardInput() {
        return this._canIpForward;
    }
    // cpu_platform - computed: true, optional: false, required: false
    get cpuPlatform() {
        return this.getStringAttribute('cpu_platform');
    }
    // creation_timestamp - computed: true, optional: false, required: false
    get creationTimestamp() {
        return this.getStringAttribute('creation_timestamp');
    }
    // current_status - computed: true, optional: false, required: false
    get currentStatus() {
        return this.getStringAttribute('current_status');
    }
    get deletionProtection() {
        return this.getBooleanAttribute('deletion_protection');
    }
    set deletionProtection(value) {
        this._deletionProtection = value;
    }
    resetDeletionProtection() {
        this._deletionProtection = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deletionProtectionInput() {
        return this._deletionProtection;
    }
    get description() {
        return this.getStringAttribute('description');
    }
    set description(value) {
        this._description = value;
    }
    resetDescription() {
        this._description = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get descriptionInput() {
        return this._description;
    }
    get desiredStatus() {
        return this.getStringAttribute('desired_status');
    }
    set desiredStatus(value) {
        this._desiredStatus = value;
    }
    resetDesiredStatus() {
        this._desiredStatus = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get desiredStatusInput() {
        return this._desiredStatus;
    }
    get effectiveLabels() {
        return this._effectiveLabels;
    }
    get enableDisplay() {
        return this.getBooleanAttribute('enable_display');
    }
    set enableDisplay(value) {
        this._enableDisplay = value;
    }
    resetEnableDisplay() {
        this._enableDisplay = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableDisplayInput() {
        return this._enableDisplay;
    }
    get hostname() {
        return this.getStringAttribute('hostname');
    }
    set hostname(value) {
        this._hostname = value;
    }
    resetHostname() {
        this._hostname = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get hostnameInput() {
        return this._hostname;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // instance_id - computed: true, optional: false, required: false
    get instanceId() {
        return this.getStringAttribute('instance_id');
    }
    get keyRevocationActionType() {
        return this.getStringAttribute('key_revocation_action_type');
    }
    set keyRevocationActionType(value) {
        this._keyRevocationActionType = value;
    }
    resetKeyRevocationActionType() {
        this._keyRevocationActionType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get keyRevocationActionTypeInput() {
        return this._keyRevocationActionType;
    }
    // label_fingerprint - computed: true, optional: false, required: false
    get labelFingerprint() {
        return this.getStringAttribute('label_fingerprint');
    }
    get labels() {
        return this.getStringMapAttribute('labels');
    }
    set labels(value) {
        this._labels = value;
    }
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get labelsInput() {
        return this._labels;
    }
    get machineType() {
        return this.getStringAttribute('machine_type');
    }
    set machineType(value) {
        this._machineType = value;
    }
    resetMachineType() {
        this._machineType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get machineTypeInput() {
        return this._machineType;
    }
    get metadata() {
        return this.getStringMapAttribute('metadata');
    }
    set metadata(value) {
        this._metadata = value;
    }
    resetMetadata() {
        this._metadata = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get metadataInput() {
        return this._metadata;
    }
    // metadata_fingerprint - computed: true, optional: false, required: false
    get metadataFingerprint() {
        return this.getStringAttribute('metadata_fingerprint');
    }
    get metadataStartupScript() {
        return this.getStringAttribute('metadata_startup_script');
    }
    set metadataStartupScript(value) {
        this._metadataStartupScript = value;
    }
    resetMetadataStartupScript() {
        this._metadataStartupScript = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get metadataStartupScriptInput() {
        return this._metadataStartupScript;
    }
    get minCpuPlatform() {
        return this.getStringAttribute('min_cpu_platform');
    }
    set minCpuPlatform(value) {
        this._minCpuPlatform = value;
    }
    resetMinCpuPlatform() {
        this._minCpuPlatform = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get minCpuPlatformInput() {
        return this._minCpuPlatform;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get resourcePolicies() {
        return this.getListAttribute('resource_policies');
    }
    set resourcePolicies(value) {
        this._resourcePolicies = value;
    }
    resetResourcePolicies() {
        this._resourcePolicies = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourcePoliciesInput() {
        return this._resourcePolicies;
    }
    // self_link - computed: true, optional: false, required: false
    get selfLink() {
        return this.getStringAttribute('self_link');
    }
    get sourceInstanceTemplate() {
        return this.getStringAttribute('source_instance_template');
    }
    set sourceInstanceTemplate(value) {
        this._sourceInstanceTemplate = value;
    }
    // Temporarily expose input value. Use with caution.
    get sourceInstanceTemplateInput() {
        return this._sourceInstanceTemplate;
    }
    get tags() {
        return cdktf.Fn.tolist(this.getListAttribute('tags'));
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    // tags_fingerprint - computed: true, optional: false, required: false
    get tagsFingerprint() {
        return this.getStringAttribute('tags_fingerprint');
    }
    get terraformLabels() {
        return this._terraformLabels;
    }
    get zone() {
        return this.getStringAttribute('zone');
    }
    set zone(value) {
        this._zone = value;
    }
    resetZone() {
        this._zone = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get zoneInput() {
        return this._zone;
    }
    get advancedMachineFeatures() {
        return this._advancedMachineFeatures;
    }
    putAdvancedMachineFeatures(value) {
        this._advancedMachineFeatures.internalValue = value;
    }
    resetAdvancedMachineFeatures() {
        this._advancedMachineFeatures.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get advancedMachineFeaturesInput() {
        return this._advancedMachineFeatures.internalValue;
    }
    get attachedDisk() {
        return this._attachedDisk;
    }
    putAttachedDisk(value) {
        this._attachedDisk.internalValue = value;
    }
    resetAttachedDisk() {
        this._attachedDisk.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get attachedDiskInput() {
        return this._attachedDisk.internalValue;
    }
    get bootDisk() {
        return this._bootDisk;
    }
    putBootDisk(value) {
        this._bootDisk.internalValue = value;
    }
    resetBootDisk() {
        this._bootDisk.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get bootDiskInput() {
        return this._bootDisk.internalValue;
    }
    get confidentialInstanceConfig() {
        return this._confidentialInstanceConfig;
    }
    putConfidentialInstanceConfig(value) {
        this._confidentialInstanceConfig.internalValue = value;
    }
    resetConfidentialInstanceConfig() {
        this._confidentialInstanceConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get confidentialInstanceConfigInput() {
        return this._confidentialInstanceConfig.internalValue;
    }
    get guestAccelerator() {
        return this._guestAccelerator;
    }
    putGuestAccelerator(value) {
        this._guestAccelerator.internalValue = value;
    }
    resetGuestAccelerator() {
        this._guestAccelerator.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get guestAcceleratorInput() {
        return this._guestAccelerator.internalValue;
    }
    get networkInterface() {
        return this._networkInterface;
    }
    putNetworkInterface(value) {
        this._networkInterface.internalValue = value;
    }
    resetNetworkInterface() {
        this._networkInterface.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkInterfaceInput() {
        return this._networkInterface.internalValue;
    }
    get networkPerformanceConfig() {
        return this._networkPerformanceConfig;
    }
    putNetworkPerformanceConfig(value) {
        this._networkPerformanceConfig.internalValue = value;
    }
    resetNetworkPerformanceConfig() {
        this._networkPerformanceConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get networkPerformanceConfigInput() {
        return this._networkPerformanceConfig.internalValue;
    }
    get params() {
        return this._params;
    }
    putParams(value) {
        this._params.internalValue = value;
    }
    resetParams() {
        this._params.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get paramsInput() {
        return this._params.internalValue;
    }
    get reservationAffinity() {
        return this._reservationAffinity;
    }
    putReservationAffinity(value) {
        this._reservationAffinity.internalValue = value;
    }
    resetReservationAffinity() {
        this._reservationAffinity.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get reservationAffinityInput() {
        return this._reservationAffinity.internalValue;
    }
    get scheduling() {
        return this._scheduling;
    }
    putScheduling(value) {
        this._scheduling.internalValue = value;
    }
    resetScheduling() {
        this._scheduling.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get schedulingInput() {
        return this._scheduling.internalValue;
    }
    get scratchDisk() {
        return this._scratchDisk;
    }
    putScratchDisk(value) {
        this._scratchDisk.internalValue = value;
    }
    resetScratchDisk() {
        this._scratchDisk.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get scratchDiskInput() {
        return this._scratchDisk.internalValue;
    }
    get serviceAccount() {
        return this._serviceAccount;
    }
    putServiceAccount(value) {
        this._serviceAccount.internalValue = value;
    }
    resetServiceAccount() {
        this._serviceAccount.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceAccountInput() {
        return this._serviceAccount.internalValue;
    }
    get shieldedInstanceConfig() {
        return this._shieldedInstanceConfig;
    }
    putShieldedInstanceConfig(value) {
        this._shieldedInstanceConfig.internalValue = value;
    }
    resetShieldedInstanceConfig() {
        this._shieldedInstanceConfig.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get shieldedInstanceConfigInput() {
        return this._shieldedInstanceConfig.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            allow_stopping_for_update: cdktf.booleanToTerraform(this._allowStoppingForUpdate),
            can_ip_forward: cdktf.booleanToTerraform(this._canIpForward),
            deletion_protection: cdktf.booleanToTerraform(this._deletionProtection),
            description: cdktf.stringToTerraform(this._description),
            desired_status: cdktf.stringToTerraform(this._desiredStatus),
            enable_display: cdktf.booleanToTerraform(this._enableDisplay),
            hostname: cdktf.stringToTerraform(this._hostname),
            id: cdktf.stringToTerraform(this._id),
            key_revocation_action_type: cdktf.stringToTerraform(this._keyRevocationActionType),
            labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._labels),
            machine_type: cdktf.stringToTerraform(this._machineType),
            metadata: cdktf.hashMapper(cdktf.stringToTerraform)(this._metadata),
            metadata_startup_script: cdktf.stringToTerraform(this._metadataStartupScript),
            min_cpu_platform: cdktf.stringToTerraform(this._minCpuPlatform),
            name: cdktf.stringToTerraform(this._name),
            project: cdktf.stringToTerraform(this._project),
            resource_policies: cdktf.listMapper(cdktf.stringToTerraform, false)(this._resourcePolicies),
            source_instance_template: cdktf.stringToTerraform(this._sourceInstanceTemplate),
            tags: cdktf.listMapper(cdktf.stringToTerraform, false)(this._tags),
            zone: cdktf.stringToTerraform(this._zone),
            advanced_machine_features: computeInstanceFromTemplateAdvancedMachineFeaturesToTerraform(this._advancedMachineFeatures.internalValue),
            attached_disk: cdktf.listMapper(computeInstanceFromTemplateAttachedDiskToTerraform, true)(this._attachedDisk.internalValue),
            boot_disk: computeInstanceFromTemplateBootDiskToTerraform(this._bootDisk.internalValue),
            confidential_instance_config: computeInstanceFromTemplateConfidentialInstanceConfigToTerraform(this._confidentialInstanceConfig.internalValue),
            guest_accelerator: cdktf.listMapper(computeInstanceFromTemplateGuestAcceleratorToTerraform, true)(this._guestAccelerator.internalValue),
            network_interface: cdktf.listMapper(computeInstanceFromTemplateNetworkInterfaceToTerraform, true)(this._networkInterface.internalValue),
            network_performance_config: computeInstanceFromTemplateNetworkPerformanceConfigToTerraform(this._networkPerformanceConfig.internalValue),
            params: computeInstanceFromTemplateParamsToTerraform(this._params.internalValue),
            reservation_affinity: computeInstanceFromTemplateReservationAffinityToTerraform(this._reservationAffinity.internalValue),
            scheduling: computeInstanceFromTemplateSchedulingToTerraform(this._scheduling.internalValue),
            scratch_disk: cdktf.listMapper(computeInstanceFromTemplateScratchDiskToTerraform, true)(this._scratchDisk.internalValue),
            service_account: computeInstanceFromTemplateServiceAccountToTerraform(this._serviceAccount.internalValue),
            shielded_instance_config: computeInstanceFromTemplateShieldedInstanceConfigToTerraform(this._shieldedInstanceConfig.internalValue),
            timeouts: computeInstanceFromTemplateTimeoutsToTerraform(this._timeouts.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            allow_stopping_for_update: {
                value: cdktf.booleanToHclTerraform(this._allowStoppingForUpdate),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            can_ip_forward: {
                value: cdktf.booleanToHclTerraform(this._canIpForward),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            deletion_protection: {
                value: cdktf.booleanToHclTerraform(this._deletionProtection),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            description: {
                value: cdktf.stringToHclTerraform(this._description),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            desired_status: {
                value: cdktf.stringToHclTerraform(this._desiredStatus),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            enable_display: {
                value: cdktf.booleanToHclTerraform(this._enableDisplay),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            hostname: {
                value: cdktf.stringToHclTerraform(this._hostname),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            key_revocation_action_type: {
                value: cdktf.stringToHclTerraform(this._keyRevocationActionType),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            labels: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._labels),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            machine_type: {
                value: cdktf.stringToHclTerraform(this._machineType),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            metadata: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._metadata),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            metadata_startup_script: {
                value: cdktf.stringToHclTerraform(this._metadataStartupScript),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            min_cpu_platform: {
                value: cdktf.stringToHclTerraform(this._minCpuPlatform),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            name: {
                value: cdktf.stringToHclTerraform(this._name),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            project: {
                value: cdktf.stringToHclTerraform(this._project),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            resource_policies: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._resourcePolicies),
                isBlock: false,
                type: "list",
                storageClassType: "stringList",
            },
            source_instance_template: {
                value: cdktf.stringToHclTerraform(this._sourceInstanceTemplate),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            tags: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._tags),
                isBlock: false,
                type: "set",
                storageClassType: "stringList",
            },
            zone: {
                value: cdktf.stringToHclTerraform(this._zone),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            advanced_machine_features: {
                value: computeInstanceFromTemplateAdvancedMachineFeaturesToHclTerraform(this._advancedMachineFeatures.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ComputeInstanceFromTemplateAdvancedMachineFeaturesList",
            },
            attached_disk: {
                value: cdktf.listMapperHcl(computeInstanceFromTemplateAttachedDiskToHclTerraform, true)(this._attachedDisk.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ComputeInstanceFromTemplateAttachedDiskList",
            },
            boot_disk: {
                value: computeInstanceFromTemplateBootDiskToHclTerraform(this._bootDisk.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ComputeInstanceFromTemplateBootDiskList",
            },
            confidential_instance_config: {
                value: computeInstanceFromTemplateConfidentialInstanceConfigToHclTerraform(this._confidentialInstanceConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ComputeInstanceFromTemplateConfidentialInstanceConfigList",
            },
            guest_accelerator: {
                value: cdktf.listMapperHcl(computeInstanceFromTemplateGuestAcceleratorToHclTerraform, true)(this._guestAccelerator.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ComputeInstanceFromTemplateGuestAcceleratorList",
            },
            network_interface: {
                value: cdktf.listMapperHcl(computeInstanceFromTemplateNetworkInterfaceToHclTerraform, true)(this._networkInterface.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ComputeInstanceFromTemplateNetworkInterfaceList",
            },
            network_performance_config: {
                value: computeInstanceFromTemplateNetworkPerformanceConfigToHclTerraform(this._networkPerformanceConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ComputeInstanceFromTemplateNetworkPerformanceConfigList",
            },
            params: {
                value: computeInstanceFromTemplateParamsToHclTerraform(this._params.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ComputeInstanceFromTemplateParamsList",
            },
            reservation_affinity: {
                value: computeInstanceFromTemplateReservationAffinityToHclTerraform(this._reservationAffinity.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ComputeInstanceFromTemplateReservationAffinityList",
            },
            scheduling: {
                value: computeInstanceFromTemplateSchedulingToHclTerraform(this._scheduling.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ComputeInstanceFromTemplateSchedulingList",
            },
            scratch_disk: {
                value: cdktf.listMapperHcl(computeInstanceFromTemplateScratchDiskToHclTerraform, true)(this._scratchDisk.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ComputeInstanceFromTemplateScratchDiskList",
            },
            service_account: {
                value: computeInstanceFromTemplateServiceAccountToHclTerraform(this._serviceAccount.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ComputeInstanceFromTemplateServiceAccountList",
            },
            shielded_instance_config: {
                value: computeInstanceFromTemplateShieldedInstanceConfigToHclTerraform(this._shieldedInstanceConfig.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "ComputeInstanceFromTemplateShieldedInstanceConfigList",
            },
            timeouts: {
                value: computeInstanceFromTemplateTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "ComputeInstanceFromTemplateTimeouts",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.ComputeInstanceFromTemplate = ComputeInstanceFromTemplate;
_7 = JSII_RTTI_SYMBOL_1;
ComputeInstanceFromTemplate[_7] = { fqn: "@cdktf/provider-google.computeInstanceFromTemplate.ComputeInstanceFromTemplate", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
ComputeInstanceFromTemplate.tfResourceType = "google_compute_instance_from_template";
//# sourceMappingURL=data:application/json;base64,