"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56;
Object.defineProperty(exports, "__esModule", { value: true });
exports.dialogflowCxPageEventHandlersTriggerFulfillmentMessagesOutputAudioTextToTerraform = exports.DialogflowCxPageEventHandlersTriggerFulfillmentMessagesLiveAgentHandoffOutputReference = exports.dialogflowCxPageEventHandlersTriggerFulfillmentMessagesLiveAgentHandoffToHclTerraform = exports.dialogflowCxPageEventHandlersTriggerFulfillmentMessagesLiveAgentHandoffToTerraform = exports.DialogflowCxPageEventHandlersTriggerFulfillmentMessagesConversationSuccessOutputReference = exports.dialogflowCxPageEventHandlersTriggerFulfillmentMessagesConversationSuccessToHclTerraform = exports.dialogflowCxPageEventHandlersTriggerFulfillmentMessagesConversationSuccessToTerraform = exports.DialogflowCxPageEventHandlersTriggerFulfillmentConditionalCasesList = exports.DialogflowCxPageEventHandlersTriggerFulfillmentConditionalCasesOutputReference = exports.dialogflowCxPageEventHandlersTriggerFulfillmentConditionalCasesToHclTerraform = exports.dialogflowCxPageEventHandlersTriggerFulfillmentConditionalCasesToTerraform = exports.DialogflowCxPageEntryFulfillmentOutputReference = exports.dialogflowCxPageEntryFulfillmentToHclTerraform = exports.dialogflowCxPageEntryFulfillmentToTerraform = exports.DialogflowCxPageEntryFulfillmentSetParameterActionsList = exports.DialogflowCxPageEntryFulfillmentSetParameterActionsOutputReference = exports.dialogflowCxPageEntryFulfillmentSetParameterActionsToHclTerraform = exports.dialogflowCxPageEntryFulfillmentSetParameterActionsToTerraform = exports.DialogflowCxPageEntryFulfillmentMessagesList = exports.DialogflowCxPageEntryFulfillmentMessagesOutputReference = exports.dialogflowCxPageEntryFulfillmentMessagesToHclTerraform = exports.dialogflowCxPageEntryFulfillmentMessagesToTerraform = exports.DialogflowCxPageEntryFulfillmentMessagesTextOutputReference = exports.dialogflowCxPageEntryFulfillmentMessagesTextToHclTerraform = exports.dialogflowCxPageEntryFulfillmentMessagesTextToTerraform = exports.DialogflowCxPageEntryFulfillmentMessagesTelephonyTransferCallOutputReference = exports.dialogflowCxPageEntryFulfillmentMessagesTelephonyTransferCallToHclTerraform = exports.dialogflowCxPageEntryFulfillmentMessagesTelephonyTransferCallToTerraform = exports.DialogflowCxPageEntryFulfillmentMessagesPlayAudioOutputReference = exports.dialogflowCxPageEntryFulfillmentMessagesPlayAudioToHclTerraform = exports.dialogflowCxPageEntryFulfillmentMessagesPlayAudioToTerraform = exports.DialogflowCxPageEntryFulfillmentMessagesOutputAudioTextOutputReference = exports.dialogflowCxPageEntryFulfillmentMessagesOutputAudioTextToHclTerraform = exports.dialogflowCxPageEntryFulfillmentMessagesOutputAudioTextToTerraform = exports.DialogflowCxPageEntryFulfillmentMessagesLiveAgentHandoffOutputReference = exports.dialogflowCxPageEntryFulfillmentMessagesLiveAgentHandoffToHclTerraform = exports.dialogflowCxPageEntryFulfillmentMessagesLiveAgentHandoffToTerraform = exports.DialogflowCxPageEntryFulfillmentMessagesConversationSuccessOutputReference = exports.dialogflowCxPageEntryFulfillmentMessagesConversationSuccessToHclTerraform = exports.dialogflowCxPageEntryFulfillmentMessagesConversationSuccessToTerraform = exports.DialogflowCxPageEntryFulfillmentConditionalCasesList = exports.DialogflowCxPageEntryFulfillmentConditionalCasesOutputReference = exports.dialogflowCxPageEntryFulfillmentConditionalCasesToHclTerraform = exports.dialogflowCxPageEntryFulfillmentConditionalCasesToTerraform = exports.DialogflowCxPageAdvancedSettingsOutputReference = exports.dialogflowCxPageAdvancedSettingsToHclTerraform = exports.dialogflowCxPageAdvancedSettingsToTerraform = exports.DialogflowCxPageAdvancedSettingsDtmfSettingsOutputReference = exports.dialogflowCxPageAdvancedSettingsDtmfSettingsToHclTerraform = exports.dialogflowCxPageAdvancedSettingsDtmfSettingsToTerraform = void 0;
exports.dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTelephonyTransferCallToHclTerraform = exports.dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTelephonyTransferCallToTerraform = exports.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesPlayAudioOutputReference = exports.dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesPlayAudioToHclTerraform = exports.dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesPlayAudioToTerraform = exports.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesOutputAudioTextOutputReference = exports.dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesOutputAudioTextToHclTerraform = exports.dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesOutputAudioTextToTerraform = exports.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesLiveAgentHandoffOutputReference = exports.dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesLiveAgentHandoffToHclTerraform = exports.dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesLiveAgentHandoffToTerraform = exports.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesConversationSuccessOutputReference = exports.dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesConversationSuccessToHclTerraform = exports.dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesConversationSuccessToTerraform = exports.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentConditionalCasesList = exports.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentConditionalCasesOutputReference = exports.dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentConditionalCasesToHclTerraform = exports.dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentConditionalCasesToTerraform = exports.DialogflowCxPageFormParametersAdvancedSettingsOutputReference = exports.dialogflowCxPageFormParametersAdvancedSettingsToHclTerraform = exports.dialogflowCxPageFormParametersAdvancedSettingsToTerraform = exports.DialogflowCxPageFormParametersAdvancedSettingsDtmfSettingsOutputReference = exports.dialogflowCxPageFormParametersAdvancedSettingsDtmfSettingsToHclTerraform = exports.dialogflowCxPageFormParametersAdvancedSettingsDtmfSettingsToTerraform = exports.DialogflowCxPageEventHandlersList = exports.DialogflowCxPageEventHandlersOutputReference = exports.dialogflowCxPageEventHandlersToHclTerraform = exports.dialogflowCxPageEventHandlersToTerraform = exports.DialogflowCxPageEventHandlersTriggerFulfillmentOutputReference = exports.dialogflowCxPageEventHandlersTriggerFulfillmentToHclTerraform = exports.dialogflowCxPageEventHandlersTriggerFulfillmentToTerraform = exports.DialogflowCxPageEventHandlersTriggerFulfillmentSetParameterActionsList = exports.DialogflowCxPageEventHandlersTriggerFulfillmentSetParameterActionsOutputReference = exports.dialogflowCxPageEventHandlersTriggerFulfillmentSetParameterActionsToHclTerraform = exports.dialogflowCxPageEventHandlersTriggerFulfillmentSetParameterActionsToTerraform = exports.DialogflowCxPageEventHandlersTriggerFulfillmentMessagesList = exports.DialogflowCxPageEventHandlersTriggerFulfillmentMessagesOutputReference = exports.dialogflowCxPageEventHandlersTriggerFulfillmentMessagesToHclTerraform = exports.dialogflowCxPageEventHandlersTriggerFulfillmentMessagesToTerraform = exports.DialogflowCxPageEventHandlersTriggerFulfillmentMessagesTextOutputReference = exports.dialogflowCxPageEventHandlersTriggerFulfillmentMessagesTextToHclTerraform = exports.dialogflowCxPageEventHandlersTriggerFulfillmentMessagesTextToTerraform = exports.DialogflowCxPageEventHandlersTriggerFulfillmentMessagesTelephonyTransferCallOutputReference = exports.dialogflowCxPageEventHandlersTriggerFulfillmentMessagesTelephonyTransferCallToHclTerraform = exports.dialogflowCxPageEventHandlersTriggerFulfillmentMessagesTelephonyTransferCallToTerraform = exports.DialogflowCxPageEventHandlersTriggerFulfillmentMessagesPlayAudioOutputReference = exports.dialogflowCxPageEventHandlersTriggerFulfillmentMessagesPlayAudioToHclTerraform = exports.dialogflowCxPageEventHandlersTriggerFulfillmentMessagesPlayAudioToTerraform = exports.DialogflowCxPageEventHandlersTriggerFulfillmentMessagesOutputAudioTextOutputReference = exports.dialogflowCxPageEventHandlersTriggerFulfillmentMessagesOutputAudioTextToHclTerraform = void 0;
exports.dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersToHclTerraform = exports.dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersToTerraform = exports.DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentOutputReference = exports.dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentToHclTerraform = exports.dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentToTerraform = exports.DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentSetParameterActionsList = exports.DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentSetParameterActionsOutputReference = exports.dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentSetParameterActionsToHclTerraform = exports.dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentSetParameterActionsToTerraform = exports.DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesList = exports.DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesOutputReference = exports.dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesToHclTerraform = exports.dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesToTerraform = exports.DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesTextOutputReference = exports.dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesTextToHclTerraform = exports.dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesTextToTerraform = exports.DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesTelephonyTransferCallOutputReference = exports.dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesTelephonyTransferCallToHclTerraform = exports.dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesTelephonyTransferCallToTerraform = exports.DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesPlayAudioOutputReference = exports.dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesPlayAudioToHclTerraform = exports.dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesPlayAudioToTerraform = exports.DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesOutputAudioTextOutputReference = exports.dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesOutputAudioTextToHclTerraform = exports.dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesOutputAudioTextToTerraform = exports.DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesLiveAgentHandoffOutputReference = exports.dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesLiveAgentHandoffToHclTerraform = exports.dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesLiveAgentHandoffToTerraform = exports.DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesConversationSuccessOutputReference = exports.dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesConversationSuccessToHclTerraform = exports.dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesConversationSuccessToTerraform = exports.DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentConditionalCasesList = exports.DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentConditionalCasesOutputReference = exports.dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentConditionalCasesToHclTerraform = exports.dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentConditionalCasesToTerraform = exports.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentOutputReference = exports.dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentToHclTerraform = exports.dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentToTerraform = exports.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentSetParameterActionsList = exports.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentSetParameterActionsOutputReference = exports.dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentSetParameterActionsToHclTerraform = exports.dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentSetParameterActionsToTerraform = exports.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesList = exports.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesOutputReference = exports.dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesToHclTerraform = exports.dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesToTerraform = exports.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTextOutputReference = exports.dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTextToHclTerraform = exports.dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTextToTerraform = exports.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTelephonyTransferCallOutputReference = void 0;
exports.dialogflowCxPageTransitionRoutesToHclTerraform = exports.dialogflowCxPageTransitionRoutesToTerraform = exports.DialogflowCxPageTransitionRoutesTriggerFulfillmentOutputReference = exports.dialogflowCxPageTransitionRoutesTriggerFulfillmentToHclTerraform = exports.dialogflowCxPageTransitionRoutesTriggerFulfillmentToTerraform = exports.DialogflowCxPageTransitionRoutesTriggerFulfillmentSetParameterActionsList = exports.DialogflowCxPageTransitionRoutesTriggerFulfillmentSetParameterActionsOutputReference = exports.dialogflowCxPageTransitionRoutesTriggerFulfillmentSetParameterActionsToHclTerraform = exports.dialogflowCxPageTransitionRoutesTriggerFulfillmentSetParameterActionsToTerraform = exports.DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesList = exports.DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesOutputReference = exports.dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesToHclTerraform = exports.dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesToTerraform = exports.DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTextOutputReference = exports.dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTextToHclTerraform = exports.dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTextToTerraform = exports.DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTelephonyTransferCallOutputReference = exports.dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTelephonyTransferCallToHclTerraform = exports.dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTelephonyTransferCallToTerraform = exports.DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesPlayAudioOutputReference = exports.dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesPlayAudioToHclTerraform = exports.dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesPlayAudioToTerraform = exports.DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesOutputAudioTextOutputReference = exports.dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesOutputAudioTextToHclTerraform = exports.dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesOutputAudioTextToTerraform = exports.DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesLiveAgentHandoffOutputReference = exports.dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesLiveAgentHandoffToHclTerraform = exports.dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesLiveAgentHandoffToTerraform = exports.DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesConversationSuccessOutputReference = exports.dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesConversationSuccessToHclTerraform = exports.dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesConversationSuccessToTerraform = exports.DialogflowCxPageTransitionRoutesTriggerFulfillmentConditionalCasesList = exports.DialogflowCxPageTransitionRoutesTriggerFulfillmentConditionalCasesOutputReference = exports.dialogflowCxPageTransitionRoutesTriggerFulfillmentConditionalCasesToHclTerraform = exports.dialogflowCxPageTransitionRoutesTriggerFulfillmentConditionalCasesToTerraform = exports.DialogflowCxPageTimeoutsOutputReference = exports.dialogflowCxPageTimeoutsToHclTerraform = exports.dialogflowCxPageTimeoutsToTerraform = exports.DialogflowCxPageFormOutputReference = exports.dialogflowCxPageFormToHclTerraform = exports.dialogflowCxPageFormToTerraform = exports.DialogflowCxPageFormParametersList = exports.DialogflowCxPageFormParametersOutputReference = exports.dialogflowCxPageFormParametersToHclTerraform = exports.dialogflowCxPageFormParametersToTerraform = exports.DialogflowCxPageFormParametersFillBehaviorOutputReference = exports.dialogflowCxPageFormParametersFillBehaviorToHclTerraform = exports.dialogflowCxPageFormParametersFillBehaviorToTerraform = exports.DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersList = exports.DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersOutputReference = void 0;
exports.DialogflowCxPage = exports.DialogflowCxPageTransitionRoutesList = exports.DialogflowCxPageTransitionRoutesOutputReference = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function dialogflowCxPageAdvancedSettingsDtmfSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        finish_digit: cdktf.stringToTerraform(struct.finishDigit),
        max_digits: cdktf.numberToTerraform(struct.maxDigits),
    };
}
exports.dialogflowCxPageAdvancedSettingsDtmfSettingsToTerraform = dialogflowCxPageAdvancedSettingsDtmfSettingsToTerraform;
function dialogflowCxPageAdvancedSettingsDtmfSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        finish_digit: {
            value: cdktf.stringToHclTerraform(struct.finishDigit),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        max_digits: {
            value: cdktf.numberToHclTerraform(struct.maxDigits),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageAdvancedSettingsDtmfSettingsToHclTerraform = dialogflowCxPageAdvancedSettingsDtmfSettingsToHclTerraform;
class DialogflowCxPageAdvancedSettingsDtmfSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._finishDigit !== undefined) {
            hasAnyValues = true;
            internalValueResult.finishDigit = this._finishDigit;
        }
        if (this._maxDigits !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxDigits = this._maxDigits;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._finishDigit = undefined;
            this._maxDigits = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._finishDigit = value.finishDigit;
            this._maxDigits = value.maxDigits;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get finishDigit() {
        return this.getStringAttribute('finish_digit');
    }
    set finishDigit(value) {
        this._finishDigit = value;
    }
    resetFinishDigit() {
        this._finishDigit = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get finishDigitInput() {
        return this._finishDigit;
    }
    get maxDigits() {
        return this.getNumberAttribute('max_digits');
    }
    set maxDigits(value) {
        this._maxDigits = value;
    }
    resetMaxDigits() {
        this._maxDigits = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxDigitsInput() {
        return this._maxDigits;
    }
}
exports.DialogflowCxPageAdvancedSettingsDtmfSettingsOutputReference = DialogflowCxPageAdvancedSettingsDtmfSettingsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
DialogflowCxPageAdvancedSettingsDtmfSettingsOutputReference[_a] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageAdvancedSettingsDtmfSettingsOutputReference", version: "14.13.1" };
function dialogflowCxPageAdvancedSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        dtmf_settings: dialogflowCxPageAdvancedSettingsDtmfSettingsToTerraform(struct.dtmfSettings),
    };
}
exports.dialogflowCxPageAdvancedSettingsToTerraform = dialogflowCxPageAdvancedSettingsToTerraform;
function dialogflowCxPageAdvancedSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        dtmf_settings: {
            value: dialogflowCxPageAdvancedSettingsDtmfSettingsToHclTerraform(struct.dtmfSettings),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageAdvancedSettingsDtmfSettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageAdvancedSettingsToHclTerraform = dialogflowCxPageAdvancedSettingsToHclTerraform;
class DialogflowCxPageAdvancedSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // dtmf_settings - computed: false, optional: true, required: false
        this._dtmfSettings = new DialogflowCxPageAdvancedSettingsDtmfSettingsOutputReference(this, "dtmf_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dtmfSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dtmfSettings = this._dtmfSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._dtmfSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._dtmfSettings.internalValue = value.dtmfSettings;
        }
    }
    get dtmfSettings() {
        return this._dtmfSettings;
    }
    putDtmfSettings(value) {
        this._dtmfSettings.internalValue = value;
    }
    resetDtmfSettings() {
        this._dtmfSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dtmfSettingsInput() {
        return this._dtmfSettings.internalValue;
    }
}
exports.DialogflowCxPageAdvancedSettingsOutputReference = DialogflowCxPageAdvancedSettingsOutputReference;
_b = JSII_RTTI_SYMBOL_1;
DialogflowCxPageAdvancedSettingsOutputReference[_b] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageAdvancedSettingsOutputReference", version: "14.13.1" };
function dialogflowCxPageEntryFulfillmentConditionalCasesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cases: cdktf.stringToTerraform(struct.cases),
    };
}
exports.dialogflowCxPageEntryFulfillmentConditionalCasesToTerraform = dialogflowCxPageEntryFulfillmentConditionalCasesToTerraform;
function dialogflowCxPageEntryFulfillmentConditionalCasesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cases: {
            value: cdktf.stringToHclTerraform(struct.cases),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageEntryFulfillmentConditionalCasesToHclTerraform = dialogflowCxPageEntryFulfillmentConditionalCasesToHclTerraform;
class DialogflowCxPageEntryFulfillmentConditionalCasesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cases !== undefined) {
            hasAnyValues = true;
            internalValueResult.cases = this._cases;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._cases = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._cases = value.cases;
        }
    }
    get cases() {
        return this.getStringAttribute('cases');
    }
    set cases(value) {
        this._cases = value;
    }
    resetCases() {
        this._cases = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get casesInput() {
        return this._cases;
    }
}
exports.DialogflowCxPageEntryFulfillmentConditionalCasesOutputReference = DialogflowCxPageEntryFulfillmentConditionalCasesOutputReference;
_c = JSII_RTTI_SYMBOL_1;
DialogflowCxPageEntryFulfillmentConditionalCasesOutputReference[_c] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageEntryFulfillmentConditionalCasesOutputReference", version: "14.13.1" };
class DialogflowCxPageEntryFulfillmentConditionalCasesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DialogflowCxPageEntryFulfillmentConditionalCasesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DialogflowCxPageEntryFulfillmentConditionalCasesList = DialogflowCxPageEntryFulfillmentConditionalCasesList;
_d = JSII_RTTI_SYMBOL_1;
DialogflowCxPageEntryFulfillmentConditionalCasesList[_d] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageEntryFulfillmentConditionalCasesList", version: "14.13.1" };
function dialogflowCxPageEntryFulfillmentMessagesConversationSuccessToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        metadata: cdktf.stringToTerraform(struct.metadata),
    };
}
exports.dialogflowCxPageEntryFulfillmentMessagesConversationSuccessToTerraform = dialogflowCxPageEntryFulfillmentMessagesConversationSuccessToTerraform;
function dialogflowCxPageEntryFulfillmentMessagesConversationSuccessToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        metadata: {
            value: cdktf.stringToHclTerraform(struct.metadata),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageEntryFulfillmentMessagesConversationSuccessToHclTerraform = dialogflowCxPageEntryFulfillmentMessagesConversationSuccessToHclTerraform;
class DialogflowCxPageEntryFulfillmentMessagesConversationSuccessOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._metadata !== undefined) {
            hasAnyValues = true;
            internalValueResult.metadata = this._metadata;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._metadata = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._metadata = value.metadata;
        }
    }
    get metadata() {
        return this.getStringAttribute('metadata');
    }
    set metadata(value) {
        this._metadata = value;
    }
    resetMetadata() {
        this._metadata = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get metadataInput() {
        return this._metadata;
    }
}
exports.DialogflowCxPageEntryFulfillmentMessagesConversationSuccessOutputReference = DialogflowCxPageEntryFulfillmentMessagesConversationSuccessOutputReference;
_e = JSII_RTTI_SYMBOL_1;
DialogflowCxPageEntryFulfillmentMessagesConversationSuccessOutputReference[_e] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageEntryFulfillmentMessagesConversationSuccessOutputReference", version: "14.13.1" };
function dialogflowCxPageEntryFulfillmentMessagesLiveAgentHandoffToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        metadata: cdktf.stringToTerraform(struct.metadata),
    };
}
exports.dialogflowCxPageEntryFulfillmentMessagesLiveAgentHandoffToTerraform = dialogflowCxPageEntryFulfillmentMessagesLiveAgentHandoffToTerraform;
function dialogflowCxPageEntryFulfillmentMessagesLiveAgentHandoffToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        metadata: {
            value: cdktf.stringToHclTerraform(struct.metadata),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageEntryFulfillmentMessagesLiveAgentHandoffToHclTerraform = dialogflowCxPageEntryFulfillmentMessagesLiveAgentHandoffToHclTerraform;
class DialogflowCxPageEntryFulfillmentMessagesLiveAgentHandoffOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._metadata !== undefined) {
            hasAnyValues = true;
            internalValueResult.metadata = this._metadata;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._metadata = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._metadata = value.metadata;
        }
    }
    get metadata() {
        return this.getStringAttribute('metadata');
    }
    set metadata(value) {
        this._metadata = value;
    }
    resetMetadata() {
        this._metadata = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get metadataInput() {
        return this._metadata;
    }
}
exports.DialogflowCxPageEntryFulfillmentMessagesLiveAgentHandoffOutputReference = DialogflowCxPageEntryFulfillmentMessagesLiveAgentHandoffOutputReference;
_f = JSII_RTTI_SYMBOL_1;
DialogflowCxPageEntryFulfillmentMessagesLiveAgentHandoffOutputReference[_f] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageEntryFulfillmentMessagesLiveAgentHandoffOutputReference", version: "14.13.1" };
function dialogflowCxPageEntryFulfillmentMessagesOutputAudioTextToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        ssml: cdktf.stringToTerraform(struct.ssml),
        text: cdktf.stringToTerraform(struct.text),
    };
}
exports.dialogflowCxPageEntryFulfillmentMessagesOutputAudioTextToTerraform = dialogflowCxPageEntryFulfillmentMessagesOutputAudioTextToTerraform;
function dialogflowCxPageEntryFulfillmentMessagesOutputAudioTextToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        ssml: {
            value: cdktf.stringToHclTerraform(struct.ssml),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        text: {
            value: cdktf.stringToHclTerraform(struct.text),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageEntryFulfillmentMessagesOutputAudioTextToHclTerraform = dialogflowCxPageEntryFulfillmentMessagesOutputAudioTextToHclTerraform;
class DialogflowCxPageEntryFulfillmentMessagesOutputAudioTextOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._ssml !== undefined) {
            hasAnyValues = true;
            internalValueResult.ssml = this._ssml;
        }
        if (this._text !== undefined) {
            hasAnyValues = true;
            internalValueResult.text = this._text;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._ssml = undefined;
            this._text = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._ssml = value.ssml;
            this._text = value.text;
        }
    }
    // allow_playback_interruption - computed: true, optional: false, required: false
    get allowPlaybackInterruption() {
        return this.getBooleanAttribute('allow_playback_interruption');
    }
    get ssml() {
        return this.getStringAttribute('ssml');
    }
    set ssml(value) {
        this._ssml = value;
    }
    resetSsml() {
        this._ssml = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ssmlInput() {
        return this._ssml;
    }
    get text() {
        return this.getStringAttribute('text');
    }
    set text(value) {
        this._text = value;
    }
    resetText() {
        this._text = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get textInput() {
        return this._text;
    }
}
exports.DialogflowCxPageEntryFulfillmentMessagesOutputAudioTextOutputReference = DialogflowCxPageEntryFulfillmentMessagesOutputAudioTextOutputReference;
_g = JSII_RTTI_SYMBOL_1;
DialogflowCxPageEntryFulfillmentMessagesOutputAudioTextOutputReference[_g] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageEntryFulfillmentMessagesOutputAudioTextOutputReference", version: "14.13.1" };
function dialogflowCxPageEntryFulfillmentMessagesPlayAudioToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        audio_uri: cdktf.stringToTerraform(struct.audioUri),
    };
}
exports.dialogflowCxPageEntryFulfillmentMessagesPlayAudioToTerraform = dialogflowCxPageEntryFulfillmentMessagesPlayAudioToTerraform;
function dialogflowCxPageEntryFulfillmentMessagesPlayAudioToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        audio_uri: {
            value: cdktf.stringToHclTerraform(struct.audioUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageEntryFulfillmentMessagesPlayAudioToHclTerraform = dialogflowCxPageEntryFulfillmentMessagesPlayAudioToHclTerraform;
class DialogflowCxPageEntryFulfillmentMessagesPlayAudioOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._audioUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioUri = this._audioUri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._audioUri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._audioUri = value.audioUri;
        }
    }
    // allow_playback_interruption - computed: true, optional: false, required: false
    get allowPlaybackInterruption() {
        return this.getBooleanAttribute('allow_playback_interruption');
    }
    get audioUri() {
        return this.getStringAttribute('audio_uri');
    }
    set audioUri(value) {
        this._audioUri = value;
    }
    // Temporarily expose input value. Use with caution.
    get audioUriInput() {
        return this._audioUri;
    }
}
exports.DialogflowCxPageEntryFulfillmentMessagesPlayAudioOutputReference = DialogflowCxPageEntryFulfillmentMessagesPlayAudioOutputReference;
_h = JSII_RTTI_SYMBOL_1;
DialogflowCxPageEntryFulfillmentMessagesPlayAudioOutputReference[_h] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageEntryFulfillmentMessagesPlayAudioOutputReference", version: "14.13.1" };
function dialogflowCxPageEntryFulfillmentMessagesTelephonyTransferCallToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        phone_number: cdktf.stringToTerraform(struct.phoneNumber),
    };
}
exports.dialogflowCxPageEntryFulfillmentMessagesTelephonyTransferCallToTerraform = dialogflowCxPageEntryFulfillmentMessagesTelephonyTransferCallToTerraform;
function dialogflowCxPageEntryFulfillmentMessagesTelephonyTransferCallToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        phone_number: {
            value: cdktf.stringToHclTerraform(struct.phoneNumber),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageEntryFulfillmentMessagesTelephonyTransferCallToHclTerraform = dialogflowCxPageEntryFulfillmentMessagesTelephonyTransferCallToHclTerraform;
class DialogflowCxPageEntryFulfillmentMessagesTelephonyTransferCallOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._phoneNumber !== undefined) {
            hasAnyValues = true;
            internalValueResult.phoneNumber = this._phoneNumber;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._phoneNumber = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._phoneNumber = value.phoneNumber;
        }
    }
    get phoneNumber() {
        return this.getStringAttribute('phone_number');
    }
    set phoneNumber(value) {
        this._phoneNumber = value;
    }
    // Temporarily expose input value. Use with caution.
    get phoneNumberInput() {
        return this._phoneNumber;
    }
}
exports.DialogflowCxPageEntryFulfillmentMessagesTelephonyTransferCallOutputReference = DialogflowCxPageEntryFulfillmentMessagesTelephonyTransferCallOutputReference;
_j = JSII_RTTI_SYMBOL_1;
DialogflowCxPageEntryFulfillmentMessagesTelephonyTransferCallOutputReference[_j] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageEntryFulfillmentMessagesTelephonyTransferCallOutputReference", version: "14.13.1" };
function dialogflowCxPageEntryFulfillmentMessagesTextToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        text: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.text),
    };
}
exports.dialogflowCxPageEntryFulfillmentMessagesTextToTerraform = dialogflowCxPageEntryFulfillmentMessagesTextToTerraform;
function dialogflowCxPageEntryFulfillmentMessagesTextToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        text: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.text),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageEntryFulfillmentMessagesTextToHclTerraform = dialogflowCxPageEntryFulfillmentMessagesTextToHclTerraform;
class DialogflowCxPageEntryFulfillmentMessagesTextOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._text !== undefined) {
            hasAnyValues = true;
            internalValueResult.text = this._text;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._text = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._text = value.text;
        }
    }
    // allow_playback_interruption - computed: true, optional: false, required: false
    get allowPlaybackInterruption() {
        return this.getBooleanAttribute('allow_playback_interruption');
    }
    get text() {
        return this.getListAttribute('text');
    }
    set text(value) {
        this._text = value;
    }
    resetText() {
        this._text = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get textInput() {
        return this._text;
    }
}
exports.DialogflowCxPageEntryFulfillmentMessagesTextOutputReference = DialogflowCxPageEntryFulfillmentMessagesTextOutputReference;
_k = JSII_RTTI_SYMBOL_1;
DialogflowCxPageEntryFulfillmentMessagesTextOutputReference[_k] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageEntryFulfillmentMessagesTextOutputReference", version: "14.13.1" };
function dialogflowCxPageEntryFulfillmentMessagesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        channel: cdktf.stringToTerraform(struct.channel),
        payload: cdktf.stringToTerraform(struct.payload),
        conversation_success: dialogflowCxPageEntryFulfillmentMessagesConversationSuccessToTerraform(struct.conversationSuccess),
        live_agent_handoff: dialogflowCxPageEntryFulfillmentMessagesLiveAgentHandoffToTerraform(struct.liveAgentHandoff),
        output_audio_text: dialogflowCxPageEntryFulfillmentMessagesOutputAudioTextToTerraform(struct.outputAudioText),
        play_audio: dialogflowCxPageEntryFulfillmentMessagesPlayAudioToTerraform(struct.playAudio),
        telephony_transfer_call: dialogflowCxPageEntryFulfillmentMessagesTelephonyTransferCallToTerraform(struct.telephonyTransferCall),
        text: dialogflowCxPageEntryFulfillmentMessagesTextToTerraform(struct.text),
    };
}
exports.dialogflowCxPageEntryFulfillmentMessagesToTerraform = dialogflowCxPageEntryFulfillmentMessagesToTerraform;
function dialogflowCxPageEntryFulfillmentMessagesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        channel: {
            value: cdktf.stringToHclTerraform(struct.channel),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        payload: {
            value: cdktf.stringToHclTerraform(struct.payload),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        conversation_success: {
            value: dialogflowCxPageEntryFulfillmentMessagesConversationSuccessToHclTerraform(struct.conversationSuccess),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageEntryFulfillmentMessagesConversationSuccessList",
        },
        live_agent_handoff: {
            value: dialogflowCxPageEntryFulfillmentMessagesLiveAgentHandoffToHclTerraform(struct.liveAgentHandoff),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageEntryFulfillmentMessagesLiveAgentHandoffList",
        },
        output_audio_text: {
            value: dialogflowCxPageEntryFulfillmentMessagesOutputAudioTextToHclTerraform(struct.outputAudioText),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageEntryFulfillmentMessagesOutputAudioTextList",
        },
        play_audio: {
            value: dialogflowCxPageEntryFulfillmentMessagesPlayAudioToHclTerraform(struct.playAudio),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageEntryFulfillmentMessagesPlayAudioList",
        },
        telephony_transfer_call: {
            value: dialogflowCxPageEntryFulfillmentMessagesTelephonyTransferCallToHclTerraform(struct.telephonyTransferCall),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageEntryFulfillmentMessagesTelephonyTransferCallList",
        },
        text: {
            value: dialogflowCxPageEntryFulfillmentMessagesTextToHclTerraform(struct.text),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageEntryFulfillmentMessagesTextList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageEntryFulfillmentMessagesToHclTerraform = dialogflowCxPageEntryFulfillmentMessagesToHclTerraform;
class DialogflowCxPageEntryFulfillmentMessagesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // conversation_success - computed: false, optional: true, required: false
        this._conversationSuccess = new DialogflowCxPageEntryFulfillmentMessagesConversationSuccessOutputReference(this, "conversation_success");
        // live_agent_handoff - computed: false, optional: true, required: false
        this._liveAgentHandoff = new DialogflowCxPageEntryFulfillmentMessagesLiveAgentHandoffOutputReference(this, "live_agent_handoff");
        // output_audio_text - computed: false, optional: true, required: false
        this._outputAudioText = new DialogflowCxPageEntryFulfillmentMessagesOutputAudioTextOutputReference(this, "output_audio_text");
        // play_audio - computed: false, optional: true, required: false
        this._playAudio = new DialogflowCxPageEntryFulfillmentMessagesPlayAudioOutputReference(this, "play_audio");
        // telephony_transfer_call - computed: false, optional: true, required: false
        this._telephonyTransferCall = new DialogflowCxPageEntryFulfillmentMessagesTelephonyTransferCallOutputReference(this, "telephony_transfer_call");
        // text - computed: false, optional: true, required: false
        this._text = new DialogflowCxPageEntryFulfillmentMessagesTextOutputReference(this, "text");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._channel !== undefined) {
            hasAnyValues = true;
            internalValueResult.channel = this._channel;
        }
        if (this._payload !== undefined) {
            hasAnyValues = true;
            internalValueResult.payload = this._payload;
        }
        if (this._conversationSuccess?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.conversationSuccess = this._conversationSuccess?.internalValue;
        }
        if (this._liveAgentHandoff?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.liveAgentHandoff = this._liveAgentHandoff?.internalValue;
        }
        if (this._outputAudioText?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.outputAudioText = this._outputAudioText?.internalValue;
        }
        if (this._playAudio?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.playAudio = this._playAudio?.internalValue;
        }
        if (this._telephonyTransferCall?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.telephonyTransferCall = this._telephonyTransferCall?.internalValue;
        }
        if (this._text?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.text = this._text?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._channel = undefined;
            this._payload = undefined;
            this._conversationSuccess.internalValue = undefined;
            this._liveAgentHandoff.internalValue = undefined;
            this._outputAudioText.internalValue = undefined;
            this._playAudio.internalValue = undefined;
            this._telephonyTransferCall.internalValue = undefined;
            this._text.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._channel = value.channel;
            this._payload = value.payload;
            this._conversationSuccess.internalValue = value.conversationSuccess;
            this._liveAgentHandoff.internalValue = value.liveAgentHandoff;
            this._outputAudioText.internalValue = value.outputAudioText;
            this._playAudio.internalValue = value.playAudio;
            this._telephonyTransferCall.internalValue = value.telephonyTransferCall;
            this._text.internalValue = value.text;
        }
    }
    get channel() {
        return this.getStringAttribute('channel');
    }
    set channel(value) {
        this._channel = value;
    }
    resetChannel() {
        this._channel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get channelInput() {
        return this._channel;
    }
    get payload() {
        return this.getStringAttribute('payload');
    }
    set payload(value) {
        this._payload = value;
    }
    resetPayload() {
        this._payload = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get payloadInput() {
        return this._payload;
    }
    get conversationSuccess() {
        return this._conversationSuccess;
    }
    putConversationSuccess(value) {
        this._conversationSuccess.internalValue = value;
    }
    resetConversationSuccess() {
        this._conversationSuccess.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get conversationSuccessInput() {
        return this._conversationSuccess.internalValue;
    }
    get liveAgentHandoff() {
        return this._liveAgentHandoff;
    }
    putLiveAgentHandoff(value) {
        this._liveAgentHandoff.internalValue = value;
    }
    resetLiveAgentHandoff() {
        this._liveAgentHandoff.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get liveAgentHandoffInput() {
        return this._liveAgentHandoff.internalValue;
    }
    get outputAudioText() {
        return this._outputAudioText;
    }
    putOutputAudioText(value) {
        this._outputAudioText.internalValue = value;
    }
    resetOutputAudioText() {
        this._outputAudioText.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get outputAudioTextInput() {
        return this._outputAudioText.internalValue;
    }
    get playAudio() {
        return this._playAudio;
    }
    putPlayAudio(value) {
        this._playAudio.internalValue = value;
    }
    resetPlayAudio() {
        this._playAudio.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get playAudioInput() {
        return this._playAudio.internalValue;
    }
    get telephonyTransferCall() {
        return this._telephonyTransferCall;
    }
    putTelephonyTransferCall(value) {
        this._telephonyTransferCall.internalValue = value;
    }
    resetTelephonyTransferCall() {
        this._telephonyTransferCall.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get telephonyTransferCallInput() {
        return this._telephonyTransferCall.internalValue;
    }
    get text() {
        return this._text;
    }
    putText(value) {
        this._text.internalValue = value;
    }
    resetText() {
        this._text.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get textInput() {
        return this._text.internalValue;
    }
}
exports.DialogflowCxPageEntryFulfillmentMessagesOutputReference = DialogflowCxPageEntryFulfillmentMessagesOutputReference;
_l = JSII_RTTI_SYMBOL_1;
DialogflowCxPageEntryFulfillmentMessagesOutputReference[_l] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageEntryFulfillmentMessagesOutputReference", version: "14.13.1" };
class DialogflowCxPageEntryFulfillmentMessagesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DialogflowCxPageEntryFulfillmentMessagesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DialogflowCxPageEntryFulfillmentMessagesList = DialogflowCxPageEntryFulfillmentMessagesList;
_m = JSII_RTTI_SYMBOL_1;
DialogflowCxPageEntryFulfillmentMessagesList[_m] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageEntryFulfillmentMessagesList", version: "14.13.1" };
function dialogflowCxPageEntryFulfillmentSetParameterActionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        parameter: cdktf.stringToTerraform(struct.parameter),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.dialogflowCxPageEntryFulfillmentSetParameterActionsToTerraform = dialogflowCxPageEntryFulfillmentSetParameterActionsToTerraform;
function dialogflowCxPageEntryFulfillmentSetParameterActionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        parameter: {
            value: cdktf.stringToHclTerraform(struct.parameter),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageEntryFulfillmentSetParameterActionsToHclTerraform = dialogflowCxPageEntryFulfillmentSetParameterActionsToHclTerraform;
class DialogflowCxPageEntryFulfillmentSetParameterActionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._parameter !== undefined) {
            hasAnyValues = true;
            internalValueResult.parameter = this._parameter;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._parameter = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._parameter = value.parameter;
            this._value = value.value;
        }
    }
    get parameter() {
        return this.getStringAttribute('parameter');
    }
    set parameter(value) {
        this._parameter = value;
    }
    resetParameter() {
        this._parameter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parameterInput() {
        return this._parameter;
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    resetValue() {
        this._value = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.DialogflowCxPageEntryFulfillmentSetParameterActionsOutputReference = DialogflowCxPageEntryFulfillmentSetParameterActionsOutputReference;
_o = JSII_RTTI_SYMBOL_1;
DialogflowCxPageEntryFulfillmentSetParameterActionsOutputReference[_o] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageEntryFulfillmentSetParameterActionsOutputReference", version: "14.13.1" };
class DialogflowCxPageEntryFulfillmentSetParameterActionsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DialogflowCxPageEntryFulfillmentSetParameterActionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DialogflowCxPageEntryFulfillmentSetParameterActionsList = DialogflowCxPageEntryFulfillmentSetParameterActionsList;
_p = JSII_RTTI_SYMBOL_1;
DialogflowCxPageEntryFulfillmentSetParameterActionsList[_p] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageEntryFulfillmentSetParameterActionsList", version: "14.13.1" };
function dialogflowCxPageEntryFulfillmentToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        return_partial_responses: cdktf.booleanToTerraform(struct.returnPartialResponses),
        tag: cdktf.stringToTerraform(struct.tag),
        webhook: cdktf.stringToTerraform(struct.webhook),
        conditional_cases: cdktf.listMapper(dialogflowCxPageEntryFulfillmentConditionalCasesToTerraform, true)(struct.conditionalCases),
        messages: cdktf.listMapper(dialogflowCxPageEntryFulfillmentMessagesToTerraform, true)(struct.messages),
        set_parameter_actions: cdktf.listMapper(dialogflowCxPageEntryFulfillmentSetParameterActionsToTerraform, true)(struct.setParameterActions),
    };
}
exports.dialogflowCxPageEntryFulfillmentToTerraform = dialogflowCxPageEntryFulfillmentToTerraform;
function dialogflowCxPageEntryFulfillmentToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        return_partial_responses: {
            value: cdktf.booleanToHclTerraform(struct.returnPartialResponses),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        tag: {
            value: cdktf.stringToHclTerraform(struct.tag),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        webhook: {
            value: cdktf.stringToHclTerraform(struct.webhook),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        conditional_cases: {
            value: cdktf.listMapperHcl(dialogflowCxPageEntryFulfillmentConditionalCasesToHclTerraform, true)(struct.conditionalCases),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageEntryFulfillmentConditionalCasesList",
        },
        messages: {
            value: cdktf.listMapperHcl(dialogflowCxPageEntryFulfillmentMessagesToHclTerraform, true)(struct.messages),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageEntryFulfillmentMessagesList",
        },
        set_parameter_actions: {
            value: cdktf.listMapperHcl(dialogflowCxPageEntryFulfillmentSetParameterActionsToHclTerraform, true)(struct.setParameterActions),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageEntryFulfillmentSetParameterActionsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageEntryFulfillmentToHclTerraform = dialogflowCxPageEntryFulfillmentToHclTerraform;
class DialogflowCxPageEntryFulfillmentOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // conditional_cases - computed: false, optional: true, required: false
        this._conditionalCases = new DialogflowCxPageEntryFulfillmentConditionalCasesList(this, "conditional_cases", false);
        // messages - computed: false, optional: true, required: false
        this._messages = new DialogflowCxPageEntryFulfillmentMessagesList(this, "messages", false);
        // set_parameter_actions - computed: false, optional: true, required: false
        this._setParameterActions = new DialogflowCxPageEntryFulfillmentSetParameterActionsList(this, "set_parameter_actions", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._returnPartialResponses !== undefined) {
            hasAnyValues = true;
            internalValueResult.returnPartialResponses = this._returnPartialResponses;
        }
        if (this._tag !== undefined) {
            hasAnyValues = true;
            internalValueResult.tag = this._tag;
        }
        if (this._webhook !== undefined) {
            hasAnyValues = true;
            internalValueResult.webhook = this._webhook;
        }
        if (this._conditionalCases?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.conditionalCases = this._conditionalCases?.internalValue;
        }
        if (this._messages?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.messages = this._messages?.internalValue;
        }
        if (this._setParameterActions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.setParameterActions = this._setParameterActions?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._returnPartialResponses = undefined;
            this._tag = undefined;
            this._webhook = undefined;
            this._conditionalCases.internalValue = undefined;
            this._messages.internalValue = undefined;
            this._setParameterActions.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._returnPartialResponses = value.returnPartialResponses;
            this._tag = value.tag;
            this._webhook = value.webhook;
            this._conditionalCases.internalValue = value.conditionalCases;
            this._messages.internalValue = value.messages;
            this._setParameterActions.internalValue = value.setParameterActions;
        }
    }
    get returnPartialResponses() {
        return this.getBooleanAttribute('return_partial_responses');
    }
    set returnPartialResponses(value) {
        this._returnPartialResponses = value;
    }
    resetReturnPartialResponses() {
        this._returnPartialResponses = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get returnPartialResponsesInput() {
        return this._returnPartialResponses;
    }
    get tag() {
        return this.getStringAttribute('tag');
    }
    set tag(value) {
        this._tag = value;
    }
    resetTag() {
        this._tag = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagInput() {
        return this._tag;
    }
    get webhook() {
        return this.getStringAttribute('webhook');
    }
    set webhook(value) {
        this._webhook = value;
    }
    resetWebhook() {
        this._webhook = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get webhookInput() {
        return this._webhook;
    }
    get conditionalCases() {
        return this._conditionalCases;
    }
    putConditionalCases(value) {
        this._conditionalCases.internalValue = value;
    }
    resetConditionalCases() {
        this._conditionalCases.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get conditionalCasesInput() {
        return this._conditionalCases.internalValue;
    }
    get messages() {
        return this._messages;
    }
    putMessages(value) {
        this._messages.internalValue = value;
    }
    resetMessages() {
        this._messages.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get messagesInput() {
        return this._messages.internalValue;
    }
    get setParameterActions() {
        return this._setParameterActions;
    }
    putSetParameterActions(value) {
        this._setParameterActions.internalValue = value;
    }
    resetSetParameterActions() {
        this._setParameterActions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get setParameterActionsInput() {
        return this._setParameterActions.internalValue;
    }
}
exports.DialogflowCxPageEntryFulfillmentOutputReference = DialogflowCxPageEntryFulfillmentOutputReference;
_q = JSII_RTTI_SYMBOL_1;
DialogflowCxPageEntryFulfillmentOutputReference[_q] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageEntryFulfillmentOutputReference", version: "14.13.1" };
function dialogflowCxPageEventHandlersTriggerFulfillmentConditionalCasesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cases: cdktf.stringToTerraform(struct.cases),
    };
}
exports.dialogflowCxPageEventHandlersTriggerFulfillmentConditionalCasesToTerraform = dialogflowCxPageEventHandlersTriggerFulfillmentConditionalCasesToTerraform;
function dialogflowCxPageEventHandlersTriggerFulfillmentConditionalCasesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cases: {
            value: cdktf.stringToHclTerraform(struct.cases),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageEventHandlersTriggerFulfillmentConditionalCasesToHclTerraform = dialogflowCxPageEventHandlersTriggerFulfillmentConditionalCasesToHclTerraform;
class DialogflowCxPageEventHandlersTriggerFulfillmentConditionalCasesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cases !== undefined) {
            hasAnyValues = true;
            internalValueResult.cases = this._cases;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._cases = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._cases = value.cases;
        }
    }
    get cases() {
        return this.getStringAttribute('cases');
    }
    set cases(value) {
        this._cases = value;
    }
    resetCases() {
        this._cases = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get casesInput() {
        return this._cases;
    }
}
exports.DialogflowCxPageEventHandlersTriggerFulfillmentConditionalCasesOutputReference = DialogflowCxPageEventHandlersTriggerFulfillmentConditionalCasesOutputReference;
_r = JSII_RTTI_SYMBOL_1;
DialogflowCxPageEventHandlersTriggerFulfillmentConditionalCasesOutputReference[_r] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageEventHandlersTriggerFulfillmentConditionalCasesOutputReference", version: "14.13.1" };
class DialogflowCxPageEventHandlersTriggerFulfillmentConditionalCasesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DialogflowCxPageEventHandlersTriggerFulfillmentConditionalCasesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DialogflowCxPageEventHandlersTriggerFulfillmentConditionalCasesList = DialogflowCxPageEventHandlersTriggerFulfillmentConditionalCasesList;
_s = JSII_RTTI_SYMBOL_1;
DialogflowCxPageEventHandlersTriggerFulfillmentConditionalCasesList[_s] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageEventHandlersTriggerFulfillmentConditionalCasesList", version: "14.13.1" };
function dialogflowCxPageEventHandlersTriggerFulfillmentMessagesConversationSuccessToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        metadata: cdktf.stringToTerraform(struct.metadata),
    };
}
exports.dialogflowCxPageEventHandlersTriggerFulfillmentMessagesConversationSuccessToTerraform = dialogflowCxPageEventHandlersTriggerFulfillmentMessagesConversationSuccessToTerraform;
function dialogflowCxPageEventHandlersTriggerFulfillmentMessagesConversationSuccessToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        metadata: {
            value: cdktf.stringToHclTerraform(struct.metadata),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageEventHandlersTriggerFulfillmentMessagesConversationSuccessToHclTerraform = dialogflowCxPageEventHandlersTriggerFulfillmentMessagesConversationSuccessToHclTerraform;
class DialogflowCxPageEventHandlersTriggerFulfillmentMessagesConversationSuccessOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._metadata !== undefined) {
            hasAnyValues = true;
            internalValueResult.metadata = this._metadata;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._metadata = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._metadata = value.metadata;
        }
    }
    get metadata() {
        return this.getStringAttribute('metadata');
    }
    set metadata(value) {
        this._metadata = value;
    }
    resetMetadata() {
        this._metadata = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get metadataInput() {
        return this._metadata;
    }
}
exports.DialogflowCxPageEventHandlersTriggerFulfillmentMessagesConversationSuccessOutputReference = DialogflowCxPageEventHandlersTriggerFulfillmentMessagesConversationSuccessOutputReference;
_t = JSII_RTTI_SYMBOL_1;
DialogflowCxPageEventHandlersTriggerFulfillmentMessagesConversationSuccessOutputReference[_t] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageEventHandlersTriggerFulfillmentMessagesConversationSuccessOutputReference", version: "14.13.1" };
function dialogflowCxPageEventHandlersTriggerFulfillmentMessagesLiveAgentHandoffToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        metadata: cdktf.stringToTerraform(struct.metadata),
    };
}
exports.dialogflowCxPageEventHandlersTriggerFulfillmentMessagesLiveAgentHandoffToTerraform = dialogflowCxPageEventHandlersTriggerFulfillmentMessagesLiveAgentHandoffToTerraform;
function dialogflowCxPageEventHandlersTriggerFulfillmentMessagesLiveAgentHandoffToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        metadata: {
            value: cdktf.stringToHclTerraform(struct.metadata),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageEventHandlersTriggerFulfillmentMessagesLiveAgentHandoffToHclTerraform = dialogflowCxPageEventHandlersTriggerFulfillmentMessagesLiveAgentHandoffToHclTerraform;
class DialogflowCxPageEventHandlersTriggerFulfillmentMessagesLiveAgentHandoffOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._metadata !== undefined) {
            hasAnyValues = true;
            internalValueResult.metadata = this._metadata;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._metadata = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._metadata = value.metadata;
        }
    }
    get metadata() {
        return this.getStringAttribute('metadata');
    }
    set metadata(value) {
        this._metadata = value;
    }
    resetMetadata() {
        this._metadata = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get metadataInput() {
        return this._metadata;
    }
}
exports.DialogflowCxPageEventHandlersTriggerFulfillmentMessagesLiveAgentHandoffOutputReference = DialogflowCxPageEventHandlersTriggerFulfillmentMessagesLiveAgentHandoffOutputReference;
_u = JSII_RTTI_SYMBOL_1;
DialogflowCxPageEventHandlersTriggerFulfillmentMessagesLiveAgentHandoffOutputReference[_u] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageEventHandlersTriggerFulfillmentMessagesLiveAgentHandoffOutputReference", version: "14.13.1" };
function dialogflowCxPageEventHandlersTriggerFulfillmentMessagesOutputAudioTextToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        ssml: cdktf.stringToTerraform(struct.ssml),
        text: cdktf.stringToTerraform(struct.text),
    };
}
exports.dialogflowCxPageEventHandlersTriggerFulfillmentMessagesOutputAudioTextToTerraform = dialogflowCxPageEventHandlersTriggerFulfillmentMessagesOutputAudioTextToTerraform;
function dialogflowCxPageEventHandlersTriggerFulfillmentMessagesOutputAudioTextToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        ssml: {
            value: cdktf.stringToHclTerraform(struct.ssml),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        text: {
            value: cdktf.stringToHclTerraform(struct.text),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageEventHandlersTriggerFulfillmentMessagesOutputAudioTextToHclTerraform = dialogflowCxPageEventHandlersTriggerFulfillmentMessagesOutputAudioTextToHclTerraform;
class DialogflowCxPageEventHandlersTriggerFulfillmentMessagesOutputAudioTextOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._ssml !== undefined) {
            hasAnyValues = true;
            internalValueResult.ssml = this._ssml;
        }
        if (this._text !== undefined) {
            hasAnyValues = true;
            internalValueResult.text = this._text;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._ssml = undefined;
            this._text = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._ssml = value.ssml;
            this._text = value.text;
        }
    }
    // allow_playback_interruption - computed: true, optional: false, required: false
    get allowPlaybackInterruption() {
        return this.getBooleanAttribute('allow_playback_interruption');
    }
    get ssml() {
        return this.getStringAttribute('ssml');
    }
    set ssml(value) {
        this._ssml = value;
    }
    resetSsml() {
        this._ssml = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ssmlInput() {
        return this._ssml;
    }
    get text() {
        return this.getStringAttribute('text');
    }
    set text(value) {
        this._text = value;
    }
    resetText() {
        this._text = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get textInput() {
        return this._text;
    }
}
exports.DialogflowCxPageEventHandlersTriggerFulfillmentMessagesOutputAudioTextOutputReference = DialogflowCxPageEventHandlersTriggerFulfillmentMessagesOutputAudioTextOutputReference;
_v = JSII_RTTI_SYMBOL_1;
DialogflowCxPageEventHandlersTriggerFulfillmentMessagesOutputAudioTextOutputReference[_v] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageEventHandlersTriggerFulfillmentMessagesOutputAudioTextOutputReference", version: "14.13.1" };
function dialogflowCxPageEventHandlersTriggerFulfillmentMessagesPlayAudioToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        audio_uri: cdktf.stringToTerraform(struct.audioUri),
    };
}
exports.dialogflowCxPageEventHandlersTriggerFulfillmentMessagesPlayAudioToTerraform = dialogflowCxPageEventHandlersTriggerFulfillmentMessagesPlayAudioToTerraform;
function dialogflowCxPageEventHandlersTriggerFulfillmentMessagesPlayAudioToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        audio_uri: {
            value: cdktf.stringToHclTerraform(struct.audioUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageEventHandlersTriggerFulfillmentMessagesPlayAudioToHclTerraform = dialogflowCxPageEventHandlersTriggerFulfillmentMessagesPlayAudioToHclTerraform;
class DialogflowCxPageEventHandlersTriggerFulfillmentMessagesPlayAudioOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._audioUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioUri = this._audioUri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._audioUri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._audioUri = value.audioUri;
        }
    }
    // allow_playback_interruption - computed: true, optional: false, required: false
    get allowPlaybackInterruption() {
        return this.getBooleanAttribute('allow_playback_interruption');
    }
    get audioUri() {
        return this.getStringAttribute('audio_uri');
    }
    set audioUri(value) {
        this._audioUri = value;
    }
    // Temporarily expose input value. Use with caution.
    get audioUriInput() {
        return this._audioUri;
    }
}
exports.DialogflowCxPageEventHandlersTriggerFulfillmentMessagesPlayAudioOutputReference = DialogflowCxPageEventHandlersTriggerFulfillmentMessagesPlayAudioOutputReference;
_w = JSII_RTTI_SYMBOL_1;
DialogflowCxPageEventHandlersTriggerFulfillmentMessagesPlayAudioOutputReference[_w] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageEventHandlersTriggerFulfillmentMessagesPlayAudioOutputReference", version: "14.13.1" };
function dialogflowCxPageEventHandlersTriggerFulfillmentMessagesTelephonyTransferCallToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        phone_number: cdktf.stringToTerraform(struct.phoneNumber),
    };
}
exports.dialogflowCxPageEventHandlersTriggerFulfillmentMessagesTelephonyTransferCallToTerraform = dialogflowCxPageEventHandlersTriggerFulfillmentMessagesTelephonyTransferCallToTerraform;
function dialogflowCxPageEventHandlersTriggerFulfillmentMessagesTelephonyTransferCallToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        phone_number: {
            value: cdktf.stringToHclTerraform(struct.phoneNumber),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageEventHandlersTriggerFulfillmentMessagesTelephonyTransferCallToHclTerraform = dialogflowCxPageEventHandlersTriggerFulfillmentMessagesTelephonyTransferCallToHclTerraform;
class DialogflowCxPageEventHandlersTriggerFulfillmentMessagesTelephonyTransferCallOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._phoneNumber !== undefined) {
            hasAnyValues = true;
            internalValueResult.phoneNumber = this._phoneNumber;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._phoneNumber = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._phoneNumber = value.phoneNumber;
        }
    }
    get phoneNumber() {
        return this.getStringAttribute('phone_number');
    }
    set phoneNumber(value) {
        this._phoneNumber = value;
    }
    // Temporarily expose input value. Use with caution.
    get phoneNumberInput() {
        return this._phoneNumber;
    }
}
exports.DialogflowCxPageEventHandlersTriggerFulfillmentMessagesTelephonyTransferCallOutputReference = DialogflowCxPageEventHandlersTriggerFulfillmentMessagesTelephonyTransferCallOutputReference;
_x = JSII_RTTI_SYMBOL_1;
DialogflowCxPageEventHandlersTriggerFulfillmentMessagesTelephonyTransferCallOutputReference[_x] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageEventHandlersTriggerFulfillmentMessagesTelephonyTransferCallOutputReference", version: "14.13.1" };
function dialogflowCxPageEventHandlersTriggerFulfillmentMessagesTextToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        text: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.text),
    };
}
exports.dialogflowCxPageEventHandlersTriggerFulfillmentMessagesTextToTerraform = dialogflowCxPageEventHandlersTriggerFulfillmentMessagesTextToTerraform;
function dialogflowCxPageEventHandlersTriggerFulfillmentMessagesTextToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        text: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.text),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageEventHandlersTriggerFulfillmentMessagesTextToHclTerraform = dialogflowCxPageEventHandlersTriggerFulfillmentMessagesTextToHclTerraform;
class DialogflowCxPageEventHandlersTriggerFulfillmentMessagesTextOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._text !== undefined) {
            hasAnyValues = true;
            internalValueResult.text = this._text;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._text = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._text = value.text;
        }
    }
    // allow_playback_interruption - computed: true, optional: false, required: false
    get allowPlaybackInterruption() {
        return this.getBooleanAttribute('allow_playback_interruption');
    }
    get text() {
        return this.getListAttribute('text');
    }
    set text(value) {
        this._text = value;
    }
    resetText() {
        this._text = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get textInput() {
        return this._text;
    }
}
exports.DialogflowCxPageEventHandlersTriggerFulfillmentMessagesTextOutputReference = DialogflowCxPageEventHandlersTriggerFulfillmentMessagesTextOutputReference;
_y = JSII_RTTI_SYMBOL_1;
DialogflowCxPageEventHandlersTriggerFulfillmentMessagesTextOutputReference[_y] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageEventHandlersTriggerFulfillmentMessagesTextOutputReference", version: "14.13.1" };
function dialogflowCxPageEventHandlersTriggerFulfillmentMessagesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        channel: cdktf.stringToTerraform(struct.channel),
        payload: cdktf.stringToTerraform(struct.payload),
        conversation_success: dialogflowCxPageEventHandlersTriggerFulfillmentMessagesConversationSuccessToTerraform(struct.conversationSuccess),
        live_agent_handoff: dialogflowCxPageEventHandlersTriggerFulfillmentMessagesLiveAgentHandoffToTerraform(struct.liveAgentHandoff),
        output_audio_text: dialogflowCxPageEventHandlersTriggerFulfillmentMessagesOutputAudioTextToTerraform(struct.outputAudioText),
        play_audio: dialogflowCxPageEventHandlersTriggerFulfillmentMessagesPlayAudioToTerraform(struct.playAudio),
        telephony_transfer_call: dialogflowCxPageEventHandlersTriggerFulfillmentMessagesTelephonyTransferCallToTerraform(struct.telephonyTransferCall),
        text: dialogflowCxPageEventHandlersTriggerFulfillmentMessagesTextToTerraform(struct.text),
    };
}
exports.dialogflowCxPageEventHandlersTriggerFulfillmentMessagesToTerraform = dialogflowCxPageEventHandlersTriggerFulfillmentMessagesToTerraform;
function dialogflowCxPageEventHandlersTriggerFulfillmentMessagesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        channel: {
            value: cdktf.stringToHclTerraform(struct.channel),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        payload: {
            value: cdktf.stringToHclTerraform(struct.payload),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        conversation_success: {
            value: dialogflowCxPageEventHandlersTriggerFulfillmentMessagesConversationSuccessToHclTerraform(struct.conversationSuccess),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageEventHandlersTriggerFulfillmentMessagesConversationSuccessList",
        },
        live_agent_handoff: {
            value: dialogflowCxPageEventHandlersTriggerFulfillmentMessagesLiveAgentHandoffToHclTerraform(struct.liveAgentHandoff),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageEventHandlersTriggerFulfillmentMessagesLiveAgentHandoffList",
        },
        output_audio_text: {
            value: dialogflowCxPageEventHandlersTriggerFulfillmentMessagesOutputAudioTextToHclTerraform(struct.outputAudioText),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageEventHandlersTriggerFulfillmentMessagesOutputAudioTextList",
        },
        play_audio: {
            value: dialogflowCxPageEventHandlersTriggerFulfillmentMessagesPlayAudioToHclTerraform(struct.playAudio),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageEventHandlersTriggerFulfillmentMessagesPlayAudioList",
        },
        telephony_transfer_call: {
            value: dialogflowCxPageEventHandlersTriggerFulfillmentMessagesTelephonyTransferCallToHclTerraform(struct.telephonyTransferCall),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageEventHandlersTriggerFulfillmentMessagesTelephonyTransferCallList",
        },
        text: {
            value: dialogflowCxPageEventHandlersTriggerFulfillmentMessagesTextToHclTerraform(struct.text),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageEventHandlersTriggerFulfillmentMessagesTextList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageEventHandlersTriggerFulfillmentMessagesToHclTerraform = dialogflowCxPageEventHandlersTriggerFulfillmentMessagesToHclTerraform;
class DialogflowCxPageEventHandlersTriggerFulfillmentMessagesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // conversation_success - computed: false, optional: true, required: false
        this._conversationSuccess = new DialogflowCxPageEventHandlersTriggerFulfillmentMessagesConversationSuccessOutputReference(this, "conversation_success");
        // live_agent_handoff - computed: false, optional: true, required: false
        this._liveAgentHandoff = new DialogflowCxPageEventHandlersTriggerFulfillmentMessagesLiveAgentHandoffOutputReference(this, "live_agent_handoff");
        // output_audio_text - computed: false, optional: true, required: false
        this._outputAudioText = new DialogflowCxPageEventHandlersTriggerFulfillmentMessagesOutputAudioTextOutputReference(this, "output_audio_text");
        // play_audio - computed: false, optional: true, required: false
        this._playAudio = new DialogflowCxPageEventHandlersTriggerFulfillmentMessagesPlayAudioOutputReference(this, "play_audio");
        // telephony_transfer_call - computed: false, optional: true, required: false
        this._telephonyTransferCall = new DialogflowCxPageEventHandlersTriggerFulfillmentMessagesTelephonyTransferCallOutputReference(this, "telephony_transfer_call");
        // text - computed: false, optional: true, required: false
        this._text = new DialogflowCxPageEventHandlersTriggerFulfillmentMessagesTextOutputReference(this, "text");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._channel !== undefined) {
            hasAnyValues = true;
            internalValueResult.channel = this._channel;
        }
        if (this._payload !== undefined) {
            hasAnyValues = true;
            internalValueResult.payload = this._payload;
        }
        if (this._conversationSuccess?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.conversationSuccess = this._conversationSuccess?.internalValue;
        }
        if (this._liveAgentHandoff?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.liveAgentHandoff = this._liveAgentHandoff?.internalValue;
        }
        if (this._outputAudioText?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.outputAudioText = this._outputAudioText?.internalValue;
        }
        if (this._playAudio?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.playAudio = this._playAudio?.internalValue;
        }
        if (this._telephonyTransferCall?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.telephonyTransferCall = this._telephonyTransferCall?.internalValue;
        }
        if (this._text?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.text = this._text?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._channel = undefined;
            this._payload = undefined;
            this._conversationSuccess.internalValue = undefined;
            this._liveAgentHandoff.internalValue = undefined;
            this._outputAudioText.internalValue = undefined;
            this._playAudio.internalValue = undefined;
            this._telephonyTransferCall.internalValue = undefined;
            this._text.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._channel = value.channel;
            this._payload = value.payload;
            this._conversationSuccess.internalValue = value.conversationSuccess;
            this._liveAgentHandoff.internalValue = value.liveAgentHandoff;
            this._outputAudioText.internalValue = value.outputAudioText;
            this._playAudio.internalValue = value.playAudio;
            this._telephonyTransferCall.internalValue = value.telephonyTransferCall;
            this._text.internalValue = value.text;
        }
    }
    get channel() {
        return this.getStringAttribute('channel');
    }
    set channel(value) {
        this._channel = value;
    }
    resetChannel() {
        this._channel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get channelInput() {
        return this._channel;
    }
    get payload() {
        return this.getStringAttribute('payload');
    }
    set payload(value) {
        this._payload = value;
    }
    resetPayload() {
        this._payload = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get payloadInput() {
        return this._payload;
    }
    get conversationSuccess() {
        return this._conversationSuccess;
    }
    putConversationSuccess(value) {
        this._conversationSuccess.internalValue = value;
    }
    resetConversationSuccess() {
        this._conversationSuccess.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get conversationSuccessInput() {
        return this._conversationSuccess.internalValue;
    }
    get liveAgentHandoff() {
        return this._liveAgentHandoff;
    }
    putLiveAgentHandoff(value) {
        this._liveAgentHandoff.internalValue = value;
    }
    resetLiveAgentHandoff() {
        this._liveAgentHandoff.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get liveAgentHandoffInput() {
        return this._liveAgentHandoff.internalValue;
    }
    get outputAudioText() {
        return this._outputAudioText;
    }
    putOutputAudioText(value) {
        this._outputAudioText.internalValue = value;
    }
    resetOutputAudioText() {
        this._outputAudioText.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get outputAudioTextInput() {
        return this._outputAudioText.internalValue;
    }
    get playAudio() {
        return this._playAudio;
    }
    putPlayAudio(value) {
        this._playAudio.internalValue = value;
    }
    resetPlayAudio() {
        this._playAudio.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get playAudioInput() {
        return this._playAudio.internalValue;
    }
    get telephonyTransferCall() {
        return this._telephonyTransferCall;
    }
    putTelephonyTransferCall(value) {
        this._telephonyTransferCall.internalValue = value;
    }
    resetTelephonyTransferCall() {
        this._telephonyTransferCall.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get telephonyTransferCallInput() {
        return this._telephonyTransferCall.internalValue;
    }
    get text() {
        return this._text;
    }
    putText(value) {
        this._text.internalValue = value;
    }
    resetText() {
        this._text.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get textInput() {
        return this._text.internalValue;
    }
}
exports.DialogflowCxPageEventHandlersTriggerFulfillmentMessagesOutputReference = DialogflowCxPageEventHandlersTriggerFulfillmentMessagesOutputReference;
_z = JSII_RTTI_SYMBOL_1;
DialogflowCxPageEventHandlersTriggerFulfillmentMessagesOutputReference[_z] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageEventHandlersTriggerFulfillmentMessagesOutputReference", version: "14.13.1" };
class DialogflowCxPageEventHandlersTriggerFulfillmentMessagesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DialogflowCxPageEventHandlersTriggerFulfillmentMessagesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DialogflowCxPageEventHandlersTriggerFulfillmentMessagesList = DialogflowCxPageEventHandlersTriggerFulfillmentMessagesList;
_0 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageEventHandlersTriggerFulfillmentMessagesList[_0] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageEventHandlersTriggerFulfillmentMessagesList", version: "14.13.1" };
function dialogflowCxPageEventHandlersTriggerFulfillmentSetParameterActionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        parameter: cdktf.stringToTerraform(struct.parameter),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.dialogflowCxPageEventHandlersTriggerFulfillmentSetParameterActionsToTerraform = dialogflowCxPageEventHandlersTriggerFulfillmentSetParameterActionsToTerraform;
function dialogflowCxPageEventHandlersTriggerFulfillmentSetParameterActionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        parameter: {
            value: cdktf.stringToHclTerraform(struct.parameter),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageEventHandlersTriggerFulfillmentSetParameterActionsToHclTerraform = dialogflowCxPageEventHandlersTriggerFulfillmentSetParameterActionsToHclTerraform;
class DialogflowCxPageEventHandlersTriggerFulfillmentSetParameterActionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._parameter !== undefined) {
            hasAnyValues = true;
            internalValueResult.parameter = this._parameter;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._parameter = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._parameter = value.parameter;
            this._value = value.value;
        }
    }
    get parameter() {
        return this.getStringAttribute('parameter');
    }
    set parameter(value) {
        this._parameter = value;
    }
    resetParameter() {
        this._parameter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parameterInput() {
        return this._parameter;
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    resetValue() {
        this._value = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.DialogflowCxPageEventHandlersTriggerFulfillmentSetParameterActionsOutputReference = DialogflowCxPageEventHandlersTriggerFulfillmentSetParameterActionsOutputReference;
_1 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageEventHandlersTriggerFulfillmentSetParameterActionsOutputReference[_1] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageEventHandlersTriggerFulfillmentSetParameterActionsOutputReference", version: "14.13.1" };
class DialogflowCxPageEventHandlersTriggerFulfillmentSetParameterActionsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DialogflowCxPageEventHandlersTriggerFulfillmentSetParameterActionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DialogflowCxPageEventHandlersTriggerFulfillmentSetParameterActionsList = DialogflowCxPageEventHandlersTriggerFulfillmentSetParameterActionsList;
_2 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageEventHandlersTriggerFulfillmentSetParameterActionsList[_2] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageEventHandlersTriggerFulfillmentSetParameterActionsList", version: "14.13.1" };
function dialogflowCxPageEventHandlersTriggerFulfillmentToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        return_partial_responses: cdktf.booleanToTerraform(struct.returnPartialResponses),
        tag: cdktf.stringToTerraform(struct.tag),
        webhook: cdktf.stringToTerraform(struct.webhook),
        conditional_cases: cdktf.listMapper(dialogflowCxPageEventHandlersTriggerFulfillmentConditionalCasesToTerraform, true)(struct.conditionalCases),
        messages: cdktf.listMapper(dialogflowCxPageEventHandlersTriggerFulfillmentMessagesToTerraform, true)(struct.messages),
        set_parameter_actions: cdktf.listMapper(dialogflowCxPageEventHandlersTriggerFulfillmentSetParameterActionsToTerraform, true)(struct.setParameterActions),
    };
}
exports.dialogflowCxPageEventHandlersTriggerFulfillmentToTerraform = dialogflowCxPageEventHandlersTriggerFulfillmentToTerraform;
function dialogflowCxPageEventHandlersTriggerFulfillmentToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        return_partial_responses: {
            value: cdktf.booleanToHclTerraform(struct.returnPartialResponses),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        tag: {
            value: cdktf.stringToHclTerraform(struct.tag),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        webhook: {
            value: cdktf.stringToHclTerraform(struct.webhook),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        conditional_cases: {
            value: cdktf.listMapperHcl(dialogflowCxPageEventHandlersTriggerFulfillmentConditionalCasesToHclTerraform, true)(struct.conditionalCases),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageEventHandlersTriggerFulfillmentConditionalCasesList",
        },
        messages: {
            value: cdktf.listMapperHcl(dialogflowCxPageEventHandlersTriggerFulfillmentMessagesToHclTerraform, true)(struct.messages),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageEventHandlersTriggerFulfillmentMessagesList",
        },
        set_parameter_actions: {
            value: cdktf.listMapperHcl(dialogflowCxPageEventHandlersTriggerFulfillmentSetParameterActionsToHclTerraform, true)(struct.setParameterActions),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageEventHandlersTriggerFulfillmentSetParameterActionsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageEventHandlersTriggerFulfillmentToHclTerraform = dialogflowCxPageEventHandlersTriggerFulfillmentToHclTerraform;
class DialogflowCxPageEventHandlersTriggerFulfillmentOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // conditional_cases - computed: false, optional: true, required: false
        this._conditionalCases = new DialogflowCxPageEventHandlersTriggerFulfillmentConditionalCasesList(this, "conditional_cases", false);
        // messages - computed: false, optional: true, required: false
        this._messages = new DialogflowCxPageEventHandlersTriggerFulfillmentMessagesList(this, "messages", false);
        // set_parameter_actions - computed: false, optional: true, required: false
        this._setParameterActions = new DialogflowCxPageEventHandlersTriggerFulfillmentSetParameterActionsList(this, "set_parameter_actions", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._returnPartialResponses !== undefined) {
            hasAnyValues = true;
            internalValueResult.returnPartialResponses = this._returnPartialResponses;
        }
        if (this._tag !== undefined) {
            hasAnyValues = true;
            internalValueResult.tag = this._tag;
        }
        if (this._webhook !== undefined) {
            hasAnyValues = true;
            internalValueResult.webhook = this._webhook;
        }
        if (this._conditionalCases?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.conditionalCases = this._conditionalCases?.internalValue;
        }
        if (this._messages?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.messages = this._messages?.internalValue;
        }
        if (this._setParameterActions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.setParameterActions = this._setParameterActions?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._returnPartialResponses = undefined;
            this._tag = undefined;
            this._webhook = undefined;
            this._conditionalCases.internalValue = undefined;
            this._messages.internalValue = undefined;
            this._setParameterActions.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._returnPartialResponses = value.returnPartialResponses;
            this._tag = value.tag;
            this._webhook = value.webhook;
            this._conditionalCases.internalValue = value.conditionalCases;
            this._messages.internalValue = value.messages;
            this._setParameterActions.internalValue = value.setParameterActions;
        }
    }
    get returnPartialResponses() {
        return this.getBooleanAttribute('return_partial_responses');
    }
    set returnPartialResponses(value) {
        this._returnPartialResponses = value;
    }
    resetReturnPartialResponses() {
        this._returnPartialResponses = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get returnPartialResponsesInput() {
        return this._returnPartialResponses;
    }
    get tag() {
        return this.getStringAttribute('tag');
    }
    set tag(value) {
        this._tag = value;
    }
    resetTag() {
        this._tag = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagInput() {
        return this._tag;
    }
    get webhook() {
        return this.getStringAttribute('webhook');
    }
    set webhook(value) {
        this._webhook = value;
    }
    resetWebhook() {
        this._webhook = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get webhookInput() {
        return this._webhook;
    }
    get conditionalCases() {
        return this._conditionalCases;
    }
    putConditionalCases(value) {
        this._conditionalCases.internalValue = value;
    }
    resetConditionalCases() {
        this._conditionalCases.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get conditionalCasesInput() {
        return this._conditionalCases.internalValue;
    }
    get messages() {
        return this._messages;
    }
    putMessages(value) {
        this._messages.internalValue = value;
    }
    resetMessages() {
        this._messages.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get messagesInput() {
        return this._messages.internalValue;
    }
    get setParameterActions() {
        return this._setParameterActions;
    }
    putSetParameterActions(value) {
        this._setParameterActions.internalValue = value;
    }
    resetSetParameterActions() {
        this._setParameterActions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get setParameterActionsInput() {
        return this._setParameterActions.internalValue;
    }
}
exports.DialogflowCxPageEventHandlersTriggerFulfillmentOutputReference = DialogflowCxPageEventHandlersTriggerFulfillmentOutputReference;
_3 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageEventHandlersTriggerFulfillmentOutputReference[_3] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageEventHandlersTriggerFulfillmentOutputReference", version: "14.13.1" };
function dialogflowCxPageEventHandlersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        event: cdktf.stringToTerraform(struct.event),
        target_flow: cdktf.stringToTerraform(struct.targetFlow),
        target_page: cdktf.stringToTerraform(struct.targetPage),
        trigger_fulfillment: dialogflowCxPageEventHandlersTriggerFulfillmentToTerraform(struct.triggerFulfillment),
    };
}
exports.dialogflowCxPageEventHandlersToTerraform = dialogflowCxPageEventHandlersToTerraform;
function dialogflowCxPageEventHandlersToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        event: {
            value: cdktf.stringToHclTerraform(struct.event),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        target_flow: {
            value: cdktf.stringToHclTerraform(struct.targetFlow),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        target_page: {
            value: cdktf.stringToHclTerraform(struct.targetPage),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        trigger_fulfillment: {
            value: dialogflowCxPageEventHandlersTriggerFulfillmentToHclTerraform(struct.triggerFulfillment),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageEventHandlersTriggerFulfillmentList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageEventHandlersToHclTerraform = dialogflowCxPageEventHandlersToHclTerraform;
class DialogflowCxPageEventHandlersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // trigger_fulfillment - computed: false, optional: true, required: false
        this._triggerFulfillment = new DialogflowCxPageEventHandlersTriggerFulfillmentOutputReference(this, "trigger_fulfillment");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._event !== undefined) {
            hasAnyValues = true;
            internalValueResult.event = this._event;
        }
        if (this._targetFlow !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetFlow = this._targetFlow;
        }
        if (this._targetPage !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetPage = this._targetPage;
        }
        if (this._triggerFulfillment?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.triggerFulfillment = this._triggerFulfillment?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._event = undefined;
            this._targetFlow = undefined;
            this._targetPage = undefined;
            this._triggerFulfillment.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._event = value.event;
            this._targetFlow = value.targetFlow;
            this._targetPage = value.targetPage;
            this._triggerFulfillment.internalValue = value.triggerFulfillment;
        }
    }
    get event() {
        return this.getStringAttribute('event');
    }
    set event(value) {
        this._event = value;
    }
    resetEvent() {
        this._event = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get eventInput() {
        return this._event;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get targetFlow() {
        return this.getStringAttribute('target_flow');
    }
    set targetFlow(value) {
        this._targetFlow = value;
    }
    resetTargetFlow() {
        this._targetFlow = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetFlowInput() {
        return this._targetFlow;
    }
    get targetPage() {
        return this.getStringAttribute('target_page');
    }
    set targetPage(value) {
        this._targetPage = value;
    }
    resetTargetPage() {
        this._targetPage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetPageInput() {
        return this._targetPage;
    }
    get triggerFulfillment() {
        return this._triggerFulfillment;
    }
    putTriggerFulfillment(value) {
        this._triggerFulfillment.internalValue = value;
    }
    resetTriggerFulfillment() {
        this._triggerFulfillment.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get triggerFulfillmentInput() {
        return this._triggerFulfillment.internalValue;
    }
}
exports.DialogflowCxPageEventHandlersOutputReference = DialogflowCxPageEventHandlersOutputReference;
_4 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageEventHandlersOutputReference[_4] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageEventHandlersOutputReference", version: "14.13.1" };
class DialogflowCxPageEventHandlersList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DialogflowCxPageEventHandlersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DialogflowCxPageEventHandlersList = DialogflowCxPageEventHandlersList;
_5 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageEventHandlersList[_5] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageEventHandlersList", version: "14.13.1" };
function dialogflowCxPageFormParametersAdvancedSettingsDtmfSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enabled: cdktf.booleanToTerraform(struct.enabled),
        finish_digit: cdktf.stringToTerraform(struct.finishDigit),
        max_digits: cdktf.numberToTerraform(struct.maxDigits),
    };
}
exports.dialogflowCxPageFormParametersAdvancedSettingsDtmfSettingsToTerraform = dialogflowCxPageFormParametersAdvancedSettingsDtmfSettingsToTerraform;
function dialogflowCxPageFormParametersAdvancedSettingsDtmfSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enabled: {
            value: cdktf.booleanToHclTerraform(struct.enabled),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        finish_digit: {
            value: cdktf.stringToHclTerraform(struct.finishDigit),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        max_digits: {
            value: cdktf.numberToHclTerraform(struct.maxDigits),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageFormParametersAdvancedSettingsDtmfSettingsToHclTerraform = dialogflowCxPageFormParametersAdvancedSettingsDtmfSettingsToHclTerraform;
class DialogflowCxPageFormParametersAdvancedSettingsDtmfSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enabled !== undefined) {
            hasAnyValues = true;
            internalValueResult.enabled = this._enabled;
        }
        if (this._finishDigit !== undefined) {
            hasAnyValues = true;
            internalValueResult.finishDigit = this._finishDigit;
        }
        if (this._maxDigits !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxDigits = this._maxDigits;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enabled = undefined;
            this._finishDigit = undefined;
            this._maxDigits = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enabled = value.enabled;
            this._finishDigit = value.finishDigit;
            this._maxDigits = value.maxDigits;
        }
    }
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    set enabled(value) {
        this._enabled = value;
    }
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enabledInput() {
        return this._enabled;
    }
    get finishDigit() {
        return this.getStringAttribute('finish_digit');
    }
    set finishDigit(value) {
        this._finishDigit = value;
    }
    resetFinishDigit() {
        this._finishDigit = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get finishDigitInput() {
        return this._finishDigit;
    }
    get maxDigits() {
        return this.getNumberAttribute('max_digits');
    }
    set maxDigits(value) {
        this._maxDigits = value;
    }
    resetMaxDigits() {
        this._maxDigits = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxDigitsInput() {
        return this._maxDigits;
    }
}
exports.DialogflowCxPageFormParametersAdvancedSettingsDtmfSettingsOutputReference = DialogflowCxPageFormParametersAdvancedSettingsDtmfSettingsOutputReference;
_6 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageFormParametersAdvancedSettingsDtmfSettingsOutputReference[_6] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageFormParametersAdvancedSettingsDtmfSettingsOutputReference", version: "14.13.1" };
function dialogflowCxPageFormParametersAdvancedSettingsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        dtmf_settings: dialogflowCxPageFormParametersAdvancedSettingsDtmfSettingsToTerraform(struct.dtmfSettings),
    };
}
exports.dialogflowCxPageFormParametersAdvancedSettingsToTerraform = dialogflowCxPageFormParametersAdvancedSettingsToTerraform;
function dialogflowCxPageFormParametersAdvancedSettingsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        dtmf_settings: {
            value: dialogflowCxPageFormParametersAdvancedSettingsDtmfSettingsToHclTerraform(struct.dtmfSettings),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageFormParametersAdvancedSettingsDtmfSettingsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageFormParametersAdvancedSettingsToHclTerraform = dialogflowCxPageFormParametersAdvancedSettingsToHclTerraform;
class DialogflowCxPageFormParametersAdvancedSettingsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // dtmf_settings - computed: false, optional: true, required: false
        this._dtmfSettings = new DialogflowCxPageFormParametersAdvancedSettingsDtmfSettingsOutputReference(this, "dtmf_settings");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._dtmfSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dtmfSettings = this._dtmfSettings?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._dtmfSettings.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._dtmfSettings.internalValue = value.dtmfSettings;
        }
    }
    get dtmfSettings() {
        return this._dtmfSettings;
    }
    putDtmfSettings(value) {
        this._dtmfSettings.internalValue = value;
    }
    resetDtmfSettings() {
        this._dtmfSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dtmfSettingsInput() {
        return this._dtmfSettings.internalValue;
    }
}
exports.DialogflowCxPageFormParametersAdvancedSettingsOutputReference = DialogflowCxPageFormParametersAdvancedSettingsOutputReference;
_7 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageFormParametersAdvancedSettingsOutputReference[_7] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageFormParametersAdvancedSettingsOutputReference", version: "14.13.1" };
function dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentConditionalCasesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cases: cdktf.stringToTerraform(struct.cases),
    };
}
exports.dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentConditionalCasesToTerraform = dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentConditionalCasesToTerraform;
function dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentConditionalCasesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cases: {
            value: cdktf.stringToHclTerraform(struct.cases),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentConditionalCasesToHclTerraform = dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentConditionalCasesToHclTerraform;
class DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentConditionalCasesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cases !== undefined) {
            hasAnyValues = true;
            internalValueResult.cases = this._cases;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._cases = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._cases = value.cases;
        }
    }
    get cases() {
        return this.getStringAttribute('cases');
    }
    set cases(value) {
        this._cases = value;
    }
    resetCases() {
        this._cases = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get casesInput() {
        return this._cases;
    }
}
exports.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentConditionalCasesOutputReference = DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentConditionalCasesOutputReference;
_8 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentConditionalCasesOutputReference[_8] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentConditionalCasesOutputReference", version: "14.13.1" };
class DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentConditionalCasesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentConditionalCasesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentConditionalCasesList = DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentConditionalCasesList;
_9 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentConditionalCasesList[_9] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentConditionalCasesList", version: "14.13.1" };
function dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesConversationSuccessToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        metadata: cdktf.stringToTerraform(struct.metadata),
    };
}
exports.dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesConversationSuccessToTerraform = dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesConversationSuccessToTerraform;
function dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesConversationSuccessToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        metadata: {
            value: cdktf.stringToHclTerraform(struct.metadata),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesConversationSuccessToHclTerraform = dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesConversationSuccessToHclTerraform;
class DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesConversationSuccessOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._metadata !== undefined) {
            hasAnyValues = true;
            internalValueResult.metadata = this._metadata;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._metadata = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._metadata = value.metadata;
        }
    }
    get metadata() {
        return this.getStringAttribute('metadata');
    }
    set metadata(value) {
        this._metadata = value;
    }
    resetMetadata() {
        this._metadata = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get metadataInput() {
        return this._metadata;
    }
}
exports.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesConversationSuccessOutputReference = DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesConversationSuccessOutputReference;
_10 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesConversationSuccessOutputReference[_10] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesConversationSuccessOutputReference", version: "14.13.1" };
function dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesLiveAgentHandoffToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        metadata: cdktf.stringToTerraform(struct.metadata),
    };
}
exports.dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesLiveAgentHandoffToTerraform = dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesLiveAgentHandoffToTerraform;
function dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesLiveAgentHandoffToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        metadata: {
            value: cdktf.stringToHclTerraform(struct.metadata),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesLiveAgentHandoffToHclTerraform = dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesLiveAgentHandoffToHclTerraform;
class DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesLiveAgentHandoffOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._metadata !== undefined) {
            hasAnyValues = true;
            internalValueResult.metadata = this._metadata;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._metadata = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._metadata = value.metadata;
        }
    }
    get metadata() {
        return this.getStringAttribute('metadata');
    }
    set metadata(value) {
        this._metadata = value;
    }
    resetMetadata() {
        this._metadata = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get metadataInput() {
        return this._metadata;
    }
}
exports.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesLiveAgentHandoffOutputReference = DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesLiveAgentHandoffOutputReference;
_11 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesLiveAgentHandoffOutputReference[_11] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesLiveAgentHandoffOutputReference", version: "14.13.1" };
function dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesOutputAudioTextToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        ssml: cdktf.stringToTerraform(struct.ssml),
        text: cdktf.stringToTerraform(struct.text),
    };
}
exports.dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesOutputAudioTextToTerraform = dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesOutputAudioTextToTerraform;
function dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesOutputAudioTextToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        ssml: {
            value: cdktf.stringToHclTerraform(struct.ssml),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        text: {
            value: cdktf.stringToHclTerraform(struct.text),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesOutputAudioTextToHclTerraform = dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesOutputAudioTextToHclTerraform;
class DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesOutputAudioTextOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._ssml !== undefined) {
            hasAnyValues = true;
            internalValueResult.ssml = this._ssml;
        }
        if (this._text !== undefined) {
            hasAnyValues = true;
            internalValueResult.text = this._text;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._ssml = undefined;
            this._text = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._ssml = value.ssml;
            this._text = value.text;
        }
    }
    // allow_playback_interruption - computed: true, optional: false, required: false
    get allowPlaybackInterruption() {
        return this.getBooleanAttribute('allow_playback_interruption');
    }
    get ssml() {
        return this.getStringAttribute('ssml');
    }
    set ssml(value) {
        this._ssml = value;
    }
    resetSsml() {
        this._ssml = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ssmlInput() {
        return this._ssml;
    }
    get text() {
        return this.getStringAttribute('text');
    }
    set text(value) {
        this._text = value;
    }
    resetText() {
        this._text = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get textInput() {
        return this._text;
    }
}
exports.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesOutputAudioTextOutputReference = DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesOutputAudioTextOutputReference;
_12 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesOutputAudioTextOutputReference[_12] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesOutputAudioTextOutputReference", version: "14.13.1" };
function dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesPlayAudioToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        audio_uri: cdktf.stringToTerraform(struct.audioUri),
    };
}
exports.dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesPlayAudioToTerraform = dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesPlayAudioToTerraform;
function dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesPlayAudioToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        audio_uri: {
            value: cdktf.stringToHclTerraform(struct.audioUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesPlayAudioToHclTerraform = dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesPlayAudioToHclTerraform;
class DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesPlayAudioOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._audioUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioUri = this._audioUri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._audioUri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._audioUri = value.audioUri;
        }
    }
    // allow_playback_interruption - computed: true, optional: false, required: false
    get allowPlaybackInterruption() {
        return this.getBooleanAttribute('allow_playback_interruption');
    }
    get audioUri() {
        return this.getStringAttribute('audio_uri');
    }
    set audioUri(value) {
        this._audioUri = value;
    }
    // Temporarily expose input value. Use with caution.
    get audioUriInput() {
        return this._audioUri;
    }
}
exports.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesPlayAudioOutputReference = DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesPlayAudioOutputReference;
_13 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesPlayAudioOutputReference[_13] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesPlayAudioOutputReference", version: "14.13.1" };
function dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTelephonyTransferCallToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        phone_number: cdktf.stringToTerraform(struct.phoneNumber),
    };
}
exports.dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTelephonyTransferCallToTerraform = dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTelephonyTransferCallToTerraform;
function dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTelephonyTransferCallToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        phone_number: {
            value: cdktf.stringToHclTerraform(struct.phoneNumber),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTelephonyTransferCallToHclTerraform = dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTelephonyTransferCallToHclTerraform;
class DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTelephonyTransferCallOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._phoneNumber !== undefined) {
            hasAnyValues = true;
            internalValueResult.phoneNumber = this._phoneNumber;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._phoneNumber = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._phoneNumber = value.phoneNumber;
        }
    }
    get phoneNumber() {
        return this.getStringAttribute('phone_number');
    }
    set phoneNumber(value) {
        this._phoneNumber = value;
    }
    // Temporarily expose input value. Use with caution.
    get phoneNumberInput() {
        return this._phoneNumber;
    }
}
exports.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTelephonyTransferCallOutputReference = DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTelephonyTransferCallOutputReference;
_14 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTelephonyTransferCallOutputReference[_14] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTelephonyTransferCallOutputReference", version: "14.13.1" };
function dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTextToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        text: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.text),
    };
}
exports.dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTextToTerraform = dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTextToTerraform;
function dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTextToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        text: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.text),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTextToHclTerraform = dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTextToHclTerraform;
class DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTextOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._text !== undefined) {
            hasAnyValues = true;
            internalValueResult.text = this._text;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._text = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._text = value.text;
        }
    }
    // allow_playback_interruption - computed: true, optional: false, required: false
    get allowPlaybackInterruption() {
        return this.getBooleanAttribute('allow_playback_interruption');
    }
    get text() {
        return this.getListAttribute('text');
    }
    set text(value) {
        this._text = value;
    }
    resetText() {
        this._text = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get textInput() {
        return this._text;
    }
}
exports.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTextOutputReference = DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTextOutputReference;
_15 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTextOutputReference[_15] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTextOutputReference", version: "14.13.1" };
function dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        channel: cdktf.stringToTerraform(struct.channel),
        payload: cdktf.stringToTerraform(struct.payload),
        conversation_success: dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesConversationSuccessToTerraform(struct.conversationSuccess),
        live_agent_handoff: dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesLiveAgentHandoffToTerraform(struct.liveAgentHandoff),
        output_audio_text: dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesOutputAudioTextToTerraform(struct.outputAudioText),
        play_audio: dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesPlayAudioToTerraform(struct.playAudio),
        telephony_transfer_call: dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTelephonyTransferCallToTerraform(struct.telephonyTransferCall),
        text: dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTextToTerraform(struct.text),
    };
}
exports.dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesToTerraform = dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesToTerraform;
function dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        channel: {
            value: cdktf.stringToHclTerraform(struct.channel),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        payload: {
            value: cdktf.stringToHclTerraform(struct.payload),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        conversation_success: {
            value: dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesConversationSuccessToHclTerraform(struct.conversationSuccess),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesConversationSuccessList",
        },
        live_agent_handoff: {
            value: dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesLiveAgentHandoffToHclTerraform(struct.liveAgentHandoff),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesLiveAgentHandoffList",
        },
        output_audio_text: {
            value: dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesOutputAudioTextToHclTerraform(struct.outputAudioText),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesOutputAudioTextList",
        },
        play_audio: {
            value: dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesPlayAudioToHclTerraform(struct.playAudio),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesPlayAudioList",
        },
        telephony_transfer_call: {
            value: dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTelephonyTransferCallToHclTerraform(struct.telephonyTransferCall),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTelephonyTransferCallList",
        },
        text: {
            value: dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTextToHclTerraform(struct.text),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTextList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesToHclTerraform = dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesToHclTerraform;
class DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // conversation_success - computed: false, optional: true, required: false
        this._conversationSuccess = new DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesConversationSuccessOutputReference(this, "conversation_success");
        // live_agent_handoff - computed: false, optional: true, required: false
        this._liveAgentHandoff = new DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesLiveAgentHandoffOutputReference(this, "live_agent_handoff");
        // output_audio_text - computed: false, optional: true, required: false
        this._outputAudioText = new DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesOutputAudioTextOutputReference(this, "output_audio_text");
        // play_audio - computed: false, optional: true, required: false
        this._playAudio = new DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesPlayAudioOutputReference(this, "play_audio");
        // telephony_transfer_call - computed: false, optional: true, required: false
        this._telephonyTransferCall = new DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTelephonyTransferCallOutputReference(this, "telephony_transfer_call");
        // text - computed: false, optional: true, required: false
        this._text = new DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesTextOutputReference(this, "text");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._channel !== undefined) {
            hasAnyValues = true;
            internalValueResult.channel = this._channel;
        }
        if (this._payload !== undefined) {
            hasAnyValues = true;
            internalValueResult.payload = this._payload;
        }
        if (this._conversationSuccess?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.conversationSuccess = this._conversationSuccess?.internalValue;
        }
        if (this._liveAgentHandoff?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.liveAgentHandoff = this._liveAgentHandoff?.internalValue;
        }
        if (this._outputAudioText?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.outputAudioText = this._outputAudioText?.internalValue;
        }
        if (this._playAudio?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.playAudio = this._playAudio?.internalValue;
        }
        if (this._telephonyTransferCall?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.telephonyTransferCall = this._telephonyTransferCall?.internalValue;
        }
        if (this._text?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.text = this._text?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._channel = undefined;
            this._payload = undefined;
            this._conversationSuccess.internalValue = undefined;
            this._liveAgentHandoff.internalValue = undefined;
            this._outputAudioText.internalValue = undefined;
            this._playAudio.internalValue = undefined;
            this._telephonyTransferCall.internalValue = undefined;
            this._text.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._channel = value.channel;
            this._payload = value.payload;
            this._conversationSuccess.internalValue = value.conversationSuccess;
            this._liveAgentHandoff.internalValue = value.liveAgentHandoff;
            this._outputAudioText.internalValue = value.outputAudioText;
            this._playAudio.internalValue = value.playAudio;
            this._telephonyTransferCall.internalValue = value.telephonyTransferCall;
            this._text.internalValue = value.text;
        }
    }
    get channel() {
        return this.getStringAttribute('channel');
    }
    set channel(value) {
        this._channel = value;
    }
    resetChannel() {
        this._channel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get channelInput() {
        return this._channel;
    }
    get payload() {
        return this.getStringAttribute('payload');
    }
    set payload(value) {
        this._payload = value;
    }
    resetPayload() {
        this._payload = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get payloadInput() {
        return this._payload;
    }
    get conversationSuccess() {
        return this._conversationSuccess;
    }
    putConversationSuccess(value) {
        this._conversationSuccess.internalValue = value;
    }
    resetConversationSuccess() {
        this._conversationSuccess.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get conversationSuccessInput() {
        return this._conversationSuccess.internalValue;
    }
    get liveAgentHandoff() {
        return this._liveAgentHandoff;
    }
    putLiveAgentHandoff(value) {
        this._liveAgentHandoff.internalValue = value;
    }
    resetLiveAgentHandoff() {
        this._liveAgentHandoff.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get liveAgentHandoffInput() {
        return this._liveAgentHandoff.internalValue;
    }
    get outputAudioText() {
        return this._outputAudioText;
    }
    putOutputAudioText(value) {
        this._outputAudioText.internalValue = value;
    }
    resetOutputAudioText() {
        this._outputAudioText.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get outputAudioTextInput() {
        return this._outputAudioText.internalValue;
    }
    get playAudio() {
        return this._playAudio;
    }
    putPlayAudio(value) {
        this._playAudio.internalValue = value;
    }
    resetPlayAudio() {
        this._playAudio.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get playAudioInput() {
        return this._playAudio.internalValue;
    }
    get telephonyTransferCall() {
        return this._telephonyTransferCall;
    }
    putTelephonyTransferCall(value) {
        this._telephonyTransferCall.internalValue = value;
    }
    resetTelephonyTransferCall() {
        this._telephonyTransferCall.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get telephonyTransferCallInput() {
        return this._telephonyTransferCall.internalValue;
    }
    get text() {
        return this._text;
    }
    putText(value) {
        this._text.internalValue = value;
    }
    resetText() {
        this._text.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get textInput() {
        return this._text.internalValue;
    }
}
exports.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesOutputReference = DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesOutputReference;
_16 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesOutputReference[_16] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesOutputReference", version: "14.13.1" };
class DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesList = DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesList;
_17 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesList[_17] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesList", version: "14.13.1" };
function dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentSetParameterActionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        parameter: cdktf.stringToTerraform(struct.parameter),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentSetParameterActionsToTerraform = dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentSetParameterActionsToTerraform;
function dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentSetParameterActionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        parameter: {
            value: cdktf.stringToHclTerraform(struct.parameter),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentSetParameterActionsToHclTerraform = dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentSetParameterActionsToHclTerraform;
class DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentSetParameterActionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._parameter !== undefined) {
            hasAnyValues = true;
            internalValueResult.parameter = this._parameter;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._parameter = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._parameter = value.parameter;
            this._value = value.value;
        }
    }
    get parameter() {
        return this.getStringAttribute('parameter');
    }
    set parameter(value) {
        this._parameter = value;
    }
    resetParameter() {
        this._parameter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parameterInput() {
        return this._parameter;
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    resetValue() {
        this._value = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentSetParameterActionsOutputReference = DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentSetParameterActionsOutputReference;
_18 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentSetParameterActionsOutputReference[_18] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentSetParameterActionsOutputReference", version: "14.13.1" };
class DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentSetParameterActionsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentSetParameterActionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentSetParameterActionsList = DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentSetParameterActionsList;
_19 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentSetParameterActionsList[_19] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentSetParameterActionsList", version: "14.13.1" };
function dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        return_partial_responses: cdktf.booleanToTerraform(struct.returnPartialResponses),
        tag: cdktf.stringToTerraform(struct.tag),
        webhook: cdktf.stringToTerraform(struct.webhook),
        conditional_cases: cdktf.listMapper(dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentConditionalCasesToTerraform, true)(struct.conditionalCases),
        messages: cdktf.listMapper(dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesToTerraform, true)(struct.messages),
        set_parameter_actions: cdktf.listMapper(dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentSetParameterActionsToTerraform, true)(struct.setParameterActions),
    };
}
exports.dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentToTerraform = dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentToTerraform;
function dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        return_partial_responses: {
            value: cdktf.booleanToHclTerraform(struct.returnPartialResponses),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        tag: {
            value: cdktf.stringToHclTerraform(struct.tag),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        webhook: {
            value: cdktf.stringToHclTerraform(struct.webhook),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        conditional_cases: {
            value: cdktf.listMapperHcl(dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentConditionalCasesToHclTerraform, true)(struct.conditionalCases),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentConditionalCasesList",
        },
        messages: {
            value: cdktf.listMapperHcl(dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesToHclTerraform, true)(struct.messages),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesList",
        },
        set_parameter_actions: {
            value: cdktf.listMapperHcl(dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentSetParameterActionsToHclTerraform, true)(struct.setParameterActions),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentSetParameterActionsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentToHclTerraform = dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentToHclTerraform;
class DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // conditional_cases - computed: false, optional: true, required: false
        this._conditionalCases = new DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentConditionalCasesList(this, "conditional_cases", false);
        // messages - computed: false, optional: true, required: false
        this._messages = new DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentMessagesList(this, "messages", false);
        // set_parameter_actions - computed: false, optional: true, required: false
        this._setParameterActions = new DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentSetParameterActionsList(this, "set_parameter_actions", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._returnPartialResponses !== undefined) {
            hasAnyValues = true;
            internalValueResult.returnPartialResponses = this._returnPartialResponses;
        }
        if (this._tag !== undefined) {
            hasAnyValues = true;
            internalValueResult.tag = this._tag;
        }
        if (this._webhook !== undefined) {
            hasAnyValues = true;
            internalValueResult.webhook = this._webhook;
        }
        if (this._conditionalCases?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.conditionalCases = this._conditionalCases?.internalValue;
        }
        if (this._messages?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.messages = this._messages?.internalValue;
        }
        if (this._setParameterActions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.setParameterActions = this._setParameterActions?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._returnPartialResponses = undefined;
            this._tag = undefined;
            this._webhook = undefined;
            this._conditionalCases.internalValue = undefined;
            this._messages.internalValue = undefined;
            this._setParameterActions.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._returnPartialResponses = value.returnPartialResponses;
            this._tag = value.tag;
            this._webhook = value.webhook;
            this._conditionalCases.internalValue = value.conditionalCases;
            this._messages.internalValue = value.messages;
            this._setParameterActions.internalValue = value.setParameterActions;
        }
    }
    get returnPartialResponses() {
        return this.getBooleanAttribute('return_partial_responses');
    }
    set returnPartialResponses(value) {
        this._returnPartialResponses = value;
    }
    resetReturnPartialResponses() {
        this._returnPartialResponses = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get returnPartialResponsesInput() {
        return this._returnPartialResponses;
    }
    get tag() {
        return this.getStringAttribute('tag');
    }
    set tag(value) {
        this._tag = value;
    }
    resetTag() {
        this._tag = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagInput() {
        return this._tag;
    }
    get webhook() {
        return this.getStringAttribute('webhook');
    }
    set webhook(value) {
        this._webhook = value;
    }
    resetWebhook() {
        this._webhook = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get webhookInput() {
        return this._webhook;
    }
    get conditionalCases() {
        return this._conditionalCases;
    }
    putConditionalCases(value) {
        this._conditionalCases.internalValue = value;
    }
    resetConditionalCases() {
        this._conditionalCases.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get conditionalCasesInput() {
        return this._conditionalCases.internalValue;
    }
    get messages() {
        return this._messages;
    }
    putMessages(value) {
        this._messages.internalValue = value;
    }
    resetMessages() {
        this._messages.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get messagesInput() {
        return this._messages.internalValue;
    }
    get setParameterActions() {
        return this._setParameterActions;
    }
    putSetParameterActions(value) {
        this._setParameterActions.internalValue = value;
    }
    resetSetParameterActions() {
        this._setParameterActions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get setParameterActionsInput() {
        return this._setParameterActions.internalValue;
    }
}
exports.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentOutputReference = DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentOutputReference;
_20 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentOutputReference[_20] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentOutputReference", version: "14.13.1" };
function dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentConditionalCasesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cases: cdktf.stringToTerraform(struct.cases),
    };
}
exports.dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentConditionalCasesToTerraform = dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentConditionalCasesToTerraform;
function dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentConditionalCasesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cases: {
            value: cdktf.stringToHclTerraform(struct.cases),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentConditionalCasesToHclTerraform = dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentConditionalCasesToHclTerraform;
class DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentConditionalCasesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cases !== undefined) {
            hasAnyValues = true;
            internalValueResult.cases = this._cases;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._cases = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._cases = value.cases;
        }
    }
    get cases() {
        return this.getStringAttribute('cases');
    }
    set cases(value) {
        this._cases = value;
    }
    resetCases() {
        this._cases = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get casesInput() {
        return this._cases;
    }
}
exports.DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentConditionalCasesOutputReference = DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentConditionalCasesOutputReference;
_21 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentConditionalCasesOutputReference[_21] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentConditionalCasesOutputReference", version: "14.13.1" };
class DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentConditionalCasesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentConditionalCasesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentConditionalCasesList = DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentConditionalCasesList;
_22 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentConditionalCasesList[_22] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentConditionalCasesList", version: "14.13.1" };
function dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesConversationSuccessToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        metadata: cdktf.stringToTerraform(struct.metadata),
    };
}
exports.dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesConversationSuccessToTerraform = dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesConversationSuccessToTerraform;
function dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesConversationSuccessToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        metadata: {
            value: cdktf.stringToHclTerraform(struct.metadata),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesConversationSuccessToHclTerraform = dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesConversationSuccessToHclTerraform;
class DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesConversationSuccessOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._metadata !== undefined) {
            hasAnyValues = true;
            internalValueResult.metadata = this._metadata;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._metadata = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._metadata = value.metadata;
        }
    }
    get metadata() {
        return this.getStringAttribute('metadata');
    }
    set metadata(value) {
        this._metadata = value;
    }
    resetMetadata() {
        this._metadata = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get metadataInput() {
        return this._metadata;
    }
}
exports.DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesConversationSuccessOutputReference = DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesConversationSuccessOutputReference;
_23 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesConversationSuccessOutputReference[_23] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesConversationSuccessOutputReference", version: "14.13.1" };
function dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesLiveAgentHandoffToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        metadata: cdktf.stringToTerraform(struct.metadata),
    };
}
exports.dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesLiveAgentHandoffToTerraform = dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesLiveAgentHandoffToTerraform;
function dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesLiveAgentHandoffToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        metadata: {
            value: cdktf.stringToHclTerraform(struct.metadata),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesLiveAgentHandoffToHclTerraform = dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesLiveAgentHandoffToHclTerraform;
class DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesLiveAgentHandoffOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._metadata !== undefined) {
            hasAnyValues = true;
            internalValueResult.metadata = this._metadata;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._metadata = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._metadata = value.metadata;
        }
    }
    get metadata() {
        return this.getStringAttribute('metadata');
    }
    set metadata(value) {
        this._metadata = value;
    }
    resetMetadata() {
        this._metadata = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get metadataInput() {
        return this._metadata;
    }
}
exports.DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesLiveAgentHandoffOutputReference = DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesLiveAgentHandoffOutputReference;
_24 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesLiveAgentHandoffOutputReference[_24] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesLiveAgentHandoffOutputReference", version: "14.13.1" };
function dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesOutputAudioTextToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        ssml: cdktf.stringToTerraform(struct.ssml),
        text: cdktf.stringToTerraform(struct.text),
    };
}
exports.dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesOutputAudioTextToTerraform = dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesOutputAudioTextToTerraform;
function dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesOutputAudioTextToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        ssml: {
            value: cdktf.stringToHclTerraform(struct.ssml),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        text: {
            value: cdktf.stringToHclTerraform(struct.text),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesOutputAudioTextToHclTerraform = dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesOutputAudioTextToHclTerraform;
class DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesOutputAudioTextOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._ssml !== undefined) {
            hasAnyValues = true;
            internalValueResult.ssml = this._ssml;
        }
        if (this._text !== undefined) {
            hasAnyValues = true;
            internalValueResult.text = this._text;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._ssml = undefined;
            this._text = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._ssml = value.ssml;
            this._text = value.text;
        }
    }
    // allow_playback_interruption - computed: true, optional: false, required: false
    get allowPlaybackInterruption() {
        return this.getBooleanAttribute('allow_playback_interruption');
    }
    get ssml() {
        return this.getStringAttribute('ssml');
    }
    set ssml(value) {
        this._ssml = value;
    }
    resetSsml() {
        this._ssml = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ssmlInput() {
        return this._ssml;
    }
    get text() {
        return this.getStringAttribute('text');
    }
    set text(value) {
        this._text = value;
    }
    resetText() {
        this._text = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get textInput() {
        return this._text;
    }
}
exports.DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesOutputAudioTextOutputReference = DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesOutputAudioTextOutputReference;
_25 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesOutputAudioTextOutputReference[_25] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesOutputAudioTextOutputReference", version: "14.13.1" };
function dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesPlayAudioToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        audio_uri: cdktf.stringToTerraform(struct.audioUri),
    };
}
exports.dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesPlayAudioToTerraform = dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesPlayAudioToTerraform;
function dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesPlayAudioToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        audio_uri: {
            value: cdktf.stringToHclTerraform(struct.audioUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesPlayAudioToHclTerraform = dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesPlayAudioToHclTerraform;
class DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesPlayAudioOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._audioUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioUri = this._audioUri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._audioUri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._audioUri = value.audioUri;
        }
    }
    // allow_playback_interruption - computed: true, optional: false, required: false
    get allowPlaybackInterruption() {
        return this.getBooleanAttribute('allow_playback_interruption');
    }
    get audioUri() {
        return this.getStringAttribute('audio_uri');
    }
    set audioUri(value) {
        this._audioUri = value;
    }
    // Temporarily expose input value. Use with caution.
    get audioUriInput() {
        return this._audioUri;
    }
}
exports.DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesPlayAudioOutputReference = DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesPlayAudioOutputReference;
_26 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesPlayAudioOutputReference[_26] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesPlayAudioOutputReference", version: "14.13.1" };
function dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesTelephonyTransferCallToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        phone_number: cdktf.stringToTerraform(struct.phoneNumber),
    };
}
exports.dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesTelephonyTransferCallToTerraform = dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesTelephonyTransferCallToTerraform;
function dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesTelephonyTransferCallToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        phone_number: {
            value: cdktf.stringToHclTerraform(struct.phoneNumber),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesTelephonyTransferCallToHclTerraform = dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesTelephonyTransferCallToHclTerraform;
class DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesTelephonyTransferCallOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._phoneNumber !== undefined) {
            hasAnyValues = true;
            internalValueResult.phoneNumber = this._phoneNumber;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._phoneNumber = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._phoneNumber = value.phoneNumber;
        }
    }
    get phoneNumber() {
        return this.getStringAttribute('phone_number');
    }
    set phoneNumber(value) {
        this._phoneNumber = value;
    }
    // Temporarily expose input value. Use with caution.
    get phoneNumberInput() {
        return this._phoneNumber;
    }
}
exports.DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesTelephonyTransferCallOutputReference = DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesTelephonyTransferCallOutputReference;
_27 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesTelephonyTransferCallOutputReference[_27] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesTelephonyTransferCallOutputReference", version: "14.13.1" };
function dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesTextToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        text: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.text),
    };
}
exports.dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesTextToTerraform = dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesTextToTerraform;
function dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesTextToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        text: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.text),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesTextToHclTerraform = dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesTextToHclTerraform;
class DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesTextOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._text !== undefined) {
            hasAnyValues = true;
            internalValueResult.text = this._text;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._text = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._text = value.text;
        }
    }
    // allow_playback_interruption - computed: true, optional: false, required: false
    get allowPlaybackInterruption() {
        return this.getBooleanAttribute('allow_playback_interruption');
    }
    get text() {
        return this.getListAttribute('text');
    }
    set text(value) {
        this._text = value;
    }
    resetText() {
        this._text = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get textInput() {
        return this._text;
    }
}
exports.DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesTextOutputReference = DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesTextOutputReference;
_28 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesTextOutputReference[_28] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesTextOutputReference", version: "14.13.1" };
function dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        channel: cdktf.stringToTerraform(struct.channel),
        payload: cdktf.stringToTerraform(struct.payload),
        conversation_success: dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesConversationSuccessToTerraform(struct.conversationSuccess),
        live_agent_handoff: dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesLiveAgentHandoffToTerraform(struct.liveAgentHandoff),
        output_audio_text: dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesOutputAudioTextToTerraform(struct.outputAudioText),
        play_audio: dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesPlayAudioToTerraform(struct.playAudio),
        telephony_transfer_call: dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesTelephonyTransferCallToTerraform(struct.telephonyTransferCall),
        text: dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesTextToTerraform(struct.text),
    };
}
exports.dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesToTerraform = dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesToTerraform;
function dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        channel: {
            value: cdktf.stringToHclTerraform(struct.channel),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        payload: {
            value: cdktf.stringToHclTerraform(struct.payload),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        conversation_success: {
            value: dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesConversationSuccessToHclTerraform(struct.conversationSuccess),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesConversationSuccessList",
        },
        live_agent_handoff: {
            value: dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesLiveAgentHandoffToHclTerraform(struct.liveAgentHandoff),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesLiveAgentHandoffList",
        },
        output_audio_text: {
            value: dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesOutputAudioTextToHclTerraform(struct.outputAudioText),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesOutputAudioTextList",
        },
        play_audio: {
            value: dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesPlayAudioToHclTerraform(struct.playAudio),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesPlayAudioList",
        },
        telephony_transfer_call: {
            value: dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesTelephonyTransferCallToHclTerraform(struct.telephonyTransferCall),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesTelephonyTransferCallList",
        },
        text: {
            value: dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesTextToHclTerraform(struct.text),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesTextList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesToHclTerraform = dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesToHclTerraform;
class DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // conversation_success - computed: false, optional: true, required: false
        this._conversationSuccess = new DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesConversationSuccessOutputReference(this, "conversation_success");
        // live_agent_handoff - computed: false, optional: true, required: false
        this._liveAgentHandoff = new DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesLiveAgentHandoffOutputReference(this, "live_agent_handoff");
        // output_audio_text - computed: false, optional: true, required: false
        this._outputAudioText = new DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesOutputAudioTextOutputReference(this, "output_audio_text");
        // play_audio - computed: false, optional: true, required: false
        this._playAudio = new DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesPlayAudioOutputReference(this, "play_audio");
        // telephony_transfer_call - computed: false, optional: true, required: false
        this._telephonyTransferCall = new DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesTelephonyTransferCallOutputReference(this, "telephony_transfer_call");
        // text - computed: false, optional: true, required: false
        this._text = new DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesTextOutputReference(this, "text");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._channel !== undefined) {
            hasAnyValues = true;
            internalValueResult.channel = this._channel;
        }
        if (this._payload !== undefined) {
            hasAnyValues = true;
            internalValueResult.payload = this._payload;
        }
        if (this._conversationSuccess?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.conversationSuccess = this._conversationSuccess?.internalValue;
        }
        if (this._liveAgentHandoff?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.liveAgentHandoff = this._liveAgentHandoff?.internalValue;
        }
        if (this._outputAudioText?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.outputAudioText = this._outputAudioText?.internalValue;
        }
        if (this._playAudio?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.playAudio = this._playAudio?.internalValue;
        }
        if (this._telephonyTransferCall?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.telephonyTransferCall = this._telephonyTransferCall?.internalValue;
        }
        if (this._text?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.text = this._text?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._channel = undefined;
            this._payload = undefined;
            this._conversationSuccess.internalValue = undefined;
            this._liveAgentHandoff.internalValue = undefined;
            this._outputAudioText.internalValue = undefined;
            this._playAudio.internalValue = undefined;
            this._telephonyTransferCall.internalValue = undefined;
            this._text.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._channel = value.channel;
            this._payload = value.payload;
            this._conversationSuccess.internalValue = value.conversationSuccess;
            this._liveAgentHandoff.internalValue = value.liveAgentHandoff;
            this._outputAudioText.internalValue = value.outputAudioText;
            this._playAudio.internalValue = value.playAudio;
            this._telephonyTransferCall.internalValue = value.telephonyTransferCall;
            this._text.internalValue = value.text;
        }
    }
    get channel() {
        return this.getStringAttribute('channel');
    }
    set channel(value) {
        this._channel = value;
    }
    resetChannel() {
        this._channel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get channelInput() {
        return this._channel;
    }
    get payload() {
        return this.getStringAttribute('payload');
    }
    set payload(value) {
        this._payload = value;
    }
    resetPayload() {
        this._payload = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get payloadInput() {
        return this._payload;
    }
    get conversationSuccess() {
        return this._conversationSuccess;
    }
    putConversationSuccess(value) {
        this._conversationSuccess.internalValue = value;
    }
    resetConversationSuccess() {
        this._conversationSuccess.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get conversationSuccessInput() {
        return this._conversationSuccess.internalValue;
    }
    get liveAgentHandoff() {
        return this._liveAgentHandoff;
    }
    putLiveAgentHandoff(value) {
        this._liveAgentHandoff.internalValue = value;
    }
    resetLiveAgentHandoff() {
        this._liveAgentHandoff.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get liveAgentHandoffInput() {
        return this._liveAgentHandoff.internalValue;
    }
    get outputAudioText() {
        return this._outputAudioText;
    }
    putOutputAudioText(value) {
        this._outputAudioText.internalValue = value;
    }
    resetOutputAudioText() {
        this._outputAudioText.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get outputAudioTextInput() {
        return this._outputAudioText.internalValue;
    }
    get playAudio() {
        return this._playAudio;
    }
    putPlayAudio(value) {
        this._playAudio.internalValue = value;
    }
    resetPlayAudio() {
        this._playAudio.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get playAudioInput() {
        return this._playAudio.internalValue;
    }
    get telephonyTransferCall() {
        return this._telephonyTransferCall;
    }
    putTelephonyTransferCall(value) {
        this._telephonyTransferCall.internalValue = value;
    }
    resetTelephonyTransferCall() {
        this._telephonyTransferCall.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get telephonyTransferCallInput() {
        return this._telephonyTransferCall.internalValue;
    }
    get text() {
        return this._text;
    }
    putText(value) {
        this._text.internalValue = value;
    }
    resetText() {
        this._text.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get textInput() {
        return this._text.internalValue;
    }
}
exports.DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesOutputReference = DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesOutputReference;
_29 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesOutputReference[_29] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesOutputReference", version: "14.13.1" };
class DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesList = DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesList;
_30 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesList[_30] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesList", version: "14.13.1" };
function dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentSetParameterActionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        parameter: cdktf.stringToTerraform(struct.parameter),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentSetParameterActionsToTerraform = dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentSetParameterActionsToTerraform;
function dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentSetParameterActionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        parameter: {
            value: cdktf.stringToHclTerraform(struct.parameter),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentSetParameterActionsToHclTerraform = dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentSetParameterActionsToHclTerraform;
class DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentSetParameterActionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._parameter !== undefined) {
            hasAnyValues = true;
            internalValueResult.parameter = this._parameter;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._parameter = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._parameter = value.parameter;
            this._value = value.value;
        }
    }
    get parameter() {
        return this.getStringAttribute('parameter');
    }
    set parameter(value) {
        this._parameter = value;
    }
    resetParameter() {
        this._parameter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parameterInput() {
        return this._parameter;
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    resetValue() {
        this._value = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentSetParameterActionsOutputReference = DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentSetParameterActionsOutputReference;
_31 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentSetParameterActionsOutputReference[_31] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentSetParameterActionsOutputReference", version: "14.13.1" };
class DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentSetParameterActionsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentSetParameterActionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentSetParameterActionsList = DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentSetParameterActionsList;
_32 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentSetParameterActionsList[_32] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentSetParameterActionsList", version: "14.13.1" };
function dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        return_partial_responses: cdktf.booleanToTerraform(struct.returnPartialResponses),
        tag: cdktf.stringToTerraform(struct.tag),
        webhook: cdktf.stringToTerraform(struct.webhook),
        conditional_cases: cdktf.listMapper(dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentConditionalCasesToTerraform, true)(struct.conditionalCases),
        messages: cdktf.listMapper(dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesToTerraform, true)(struct.messages),
        set_parameter_actions: cdktf.listMapper(dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentSetParameterActionsToTerraform, true)(struct.setParameterActions),
    };
}
exports.dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentToTerraform = dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentToTerraform;
function dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        return_partial_responses: {
            value: cdktf.booleanToHclTerraform(struct.returnPartialResponses),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        tag: {
            value: cdktf.stringToHclTerraform(struct.tag),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        webhook: {
            value: cdktf.stringToHclTerraform(struct.webhook),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        conditional_cases: {
            value: cdktf.listMapperHcl(dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentConditionalCasesToHclTerraform, true)(struct.conditionalCases),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentConditionalCasesList",
        },
        messages: {
            value: cdktf.listMapperHcl(dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesToHclTerraform, true)(struct.messages),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesList",
        },
        set_parameter_actions: {
            value: cdktf.listMapperHcl(dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentSetParameterActionsToHclTerraform, true)(struct.setParameterActions),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentSetParameterActionsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentToHclTerraform = dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentToHclTerraform;
class DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // conditional_cases - computed: false, optional: true, required: false
        this._conditionalCases = new DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentConditionalCasesList(this, "conditional_cases", false);
        // messages - computed: false, optional: true, required: false
        this._messages = new DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentMessagesList(this, "messages", false);
        // set_parameter_actions - computed: false, optional: true, required: false
        this._setParameterActions = new DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentSetParameterActionsList(this, "set_parameter_actions", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._returnPartialResponses !== undefined) {
            hasAnyValues = true;
            internalValueResult.returnPartialResponses = this._returnPartialResponses;
        }
        if (this._tag !== undefined) {
            hasAnyValues = true;
            internalValueResult.tag = this._tag;
        }
        if (this._webhook !== undefined) {
            hasAnyValues = true;
            internalValueResult.webhook = this._webhook;
        }
        if (this._conditionalCases?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.conditionalCases = this._conditionalCases?.internalValue;
        }
        if (this._messages?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.messages = this._messages?.internalValue;
        }
        if (this._setParameterActions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.setParameterActions = this._setParameterActions?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._returnPartialResponses = undefined;
            this._tag = undefined;
            this._webhook = undefined;
            this._conditionalCases.internalValue = undefined;
            this._messages.internalValue = undefined;
            this._setParameterActions.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._returnPartialResponses = value.returnPartialResponses;
            this._tag = value.tag;
            this._webhook = value.webhook;
            this._conditionalCases.internalValue = value.conditionalCases;
            this._messages.internalValue = value.messages;
            this._setParameterActions.internalValue = value.setParameterActions;
        }
    }
    get returnPartialResponses() {
        return this.getBooleanAttribute('return_partial_responses');
    }
    set returnPartialResponses(value) {
        this._returnPartialResponses = value;
    }
    resetReturnPartialResponses() {
        this._returnPartialResponses = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get returnPartialResponsesInput() {
        return this._returnPartialResponses;
    }
    get tag() {
        return this.getStringAttribute('tag');
    }
    set tag(value) {
        this._tag = value;
    }
    resetTag() {
        this._tag = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagInput() {
        return this._tag;
    }
    get webhook() {
        return this.getStringAttribute('webhook');
    }
    set webhook(value) {
        this._webhook = value;
    }
    resetWebhook() {
        this._webhook = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get webhookInput() {
        return this._webhook;
    }
    get conditionalCases() {
        return this._conditionalCases;
    }
    putConditionalCases(value) {
        this._conditionalCases.internalValue = value;
    }
    resetConditionalCases() {
        this._conditionalCases.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get conditionalCasesInput() {
        return this._conditionalCases.internalValue;
    }
    get messages() {
        return this._messages;
    }
    putMessages(value) {
        this._messages.internalValue = value;
    }
    resetMessages() {
        this._messages.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get messagesInput() {
        return this._messages.internalValue;
    }
    get setParameterActions() {
        return this._setParameterActions;
    }
    putSetParameterActions(value) {
        this._setParameterActions.internalValue = value;
    }
    resetSetParameterActions() {
        this._setParameterActions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get setParameterActionsInput() {
        return this._setParameterActions.internalValue;
    }
}
exports.DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentOutputReference = DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentOutputReference;
_33 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentOutputReference[_33] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentOutputReference", version: "14.13.1" };
function dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        event: cdktf.stringToTerraform(struct.event),
        target_flow: cdktf.stringToTerraform(struct.targetFlow),
        target_page: cdktf.stringToTerraform(struct.targetPage),
        trigger_fulfillment: dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentToTerraform(struct.triggerFulfillment),
    };
}
exports.dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersToTerraform = dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersToTerraform;
function dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        event: {
            value: cdktf.stringToHclTerraform(struct.event),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        target_flow: {
            value: cdktf.stringToHclTerraform(struct.targetFlow),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        target_page: {
            value: cdktf.stringToHclTerraform(struct.targetPage),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        trigger_fulfillment: {
            value: dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentToHclTerraform(struct.triggerFulfillment),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersToHclTerraform = dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersToHclTerraform;
class DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // trigger_fulfillment - computed: false, optional: true, required: false
        this._triggerFulfillment = new DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersTriggerFulfillmentOutputReference(this, "trigger_fulfillment");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._event !== undefined) {
            hasAnyValues = true;
            internalValueResult.event = this._event;
        }
        if (this._targetFlow !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetFlow = this._targetFlow;
        }
        if (this._targetPage !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetPage = this._targetPage;
        }
        if (this._triggerFulfillment?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.triggerFulfillment = this._triggerFulfillment?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._event = undefined;
            this._targetFlow = undefined;
            this._targetPage = undefined;
            this._triggerFulfillment.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._event = value.event;
            this._targetFlow = value.targetFlow;
            this._targetPage = value.targetPage;
            this._triggerFulfillment.internalValue = value.triggerFulfillment;
        }
    }
    get event() {
        return this.getStringAttribute('event');
    }
    set event(value) {
        this._event = value;
    }
    resetEvent() {
        this._event = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get eventInput() {
        return this._event;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get targetFlow() {
        return this.getStringAttribute('target_flow');
    }
    set targetFlow(value) {
        this._targetFlow = value;
    }
    resetTargetFlow() {
        this._targetFlow = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetFlowInput() {
        return this._targetFlow;
    }
    get targetPage() {
        return this.getStringAttribute('target_page');
    }
    set targetPage(value) {
        this._targetPage = value;
    }
    resetTargetPage() {
        this._targetPage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetPageInput() {
        return this._targetPage;
    }
    get triggerFulfillment() {
        return this._triggerFulfillment;
    }
    putTriggerFulfillment(value) {
        this._triggerFulfillment.internalValue = value;
    }
    resetTriggerFulfillment() {
        this._triggerFulfillment.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get triggerFulfillmentInput() {
        return this._triggerFulfillment.internalValue;
    }
}
exports.DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersOutputReference = DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersOutputReference;
_34 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersOutputReference[_34] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersOutputReference", version: "14.13.1" };
class DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersList = DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersList;
_35 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersList[_35] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersList", version: "14.13.1" };
function dialogflowCxPageFormParametersFillBehaviorToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        initial_prompt_fulfillment: dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentToTerraform(struct.initialPromptFulfillment),
        reprompt_event_handlers: cdktf.listMapper(dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersToTerraform, true)(struct.repromptEventHandlers),
    };
}
exports.dialogflowCxPageFormParametersFillBehaviorToTerraform = dialogflowCxPageFormParametersFillBehaviorToTerraform;
function dialogflowCxPageFormParametersFillBehaviorToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        initial_prompt_fulfillment: {
            value: dialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentToHclTerraform(struct.initialPromptFulfillment),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentList",
        },
        reprompt_event_handlers: {
            value: cdktf.listMapperHcl(dialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersToHclTerraform, true)(struct.repromptEventHandlers),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageFormParametersFillBehaviorToHclTerraform = dialogflowCxPageFormParametersFillBehaviorToHclTerraform;
class DialogflowCxPageFormParametersFillBehaviorOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // initial_prompt_fulfillment - computed: false, optional: true, required: false
        this._initialPromptFulfillment = new DialogflowCxPageFormParametersFillBehaviorInitialPromptFulfillmentOutputReference(this, "initial_prompt_fulfillment");
        // reprompt_event_handlers - computed: false, optional: true, required: false
        this._repromptEventHandlers = new DialogflowCxPageFormParametersFillBehaviorRepromptEventHandlersList(this, "reprompt_event_handlers", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._initialPromptFulfillment?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.initialPromptFulfillment = this._initialPromptFulfillment?.internalValue;
        }
        if (this._repromptEventHandlers?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.repromptEventHandlers = this._repromptEventHandlers?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._initialPromptFulfillment.internalValue = undefined;
            this._repromptEventHandlers.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._initialPromptFulfillment.internalValue = value.initialPromptFulfillment;
            this._repromptEventHandlers.internalValue = value.repromptEventHandlers;
        }
    }
    get initialPromptFulfillment() {
        return this._initialPromptFulfillment;
    }
    putInitialPromptFulfillment(value) {
        this._initialPromptFulfillment.internalValue = value;
    }
    resetInitialPromptFulfillment() {
        this._initialPromptFulfillment.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get initialPromptFulfillmentInput() {
        return this._initialPromptFulfillment.internalValue;
    }
    get repromptEventHandlers() {
        return this._repromptEventHandlers;
    }
    putRepromptEventHandlers(value) {
        this._repromptEventHandlers.internalValue = value;
    }
    resetRepromptEventHandlers() {
        this._repromptEventHandlers.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get repromptEventHandlersInput() {
        return this._repromptEventHandlers.internalValue;
    }
}
exports.DialogflowCxPageFormParametersFillBehaviorOutputReference = DialogflowCxPageFormParametersFillBehaviorOutputReference;
_36 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageFormParametersFillBehaviorOutputReference[_36] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageFormParametersFillBehaviorOutputReference", version: "14.13.1" };
function dialogflowCxPageFormParametersToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        default_value: cdktf.stringToTerraform(struct.defaultValue),
        display_name: cdktf.stringToTerraform(struct.displayName),
        entity_type: cdktf.stringToTerraform(struct.entityType),
        is_list: cdktf.booleanToTerraform(struct.isList),
        redact: cdktf.booleanToTerraform(struct.redact),
        required: cdktf.booleanToTerraform(struct.required),
        advanced_settings: dialogflowCxPageFormParametersAdvancedSettingsToTerraform(struct.advancedSettings),
        fill_behavior: dialogflowCxPageFormParametersFillBehaviorToTerraform(struct.fillBehavior),
    };
}
exports.dialogflowCxPageFormParametersToTerraform = dialogflowCxPageFormParametersToTerraform;
function dialogflowCxPageFormParametersToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        default_value: {
            value: cdktf.stringToHclTerraform(struct.defaultValue),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        display_name: {
            value: cdktf.stringToHclTerraform(struct.displayName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        entity_type: {
            value: cdktf.stringToHclTerraform(struct.entityType),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        is_list: {
            value: cdktf.booleanToHclTerraform(struct.isList),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        redact: {
            value: cdktf.booleanToHclTerraform(struct.redact),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        required: {
            value: cdktf.booleanToHclTerraform(struct.required),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        advanced_settings: {
            value: dialogflowCxPageFormParametersAdvancedSettingsToHclTerraform(struct.advancedSettings),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageFormParametersAdvancedSettingsList",
        },
        fill_behavior: {
            value: dialogflowCxPageFormParametersFillBehaviorToHclTerraform(struct.fillBehavior),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageFormParametersFillBehaviorList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageFormParametersToHclTerraform = dialogflowCxPageFormParametersToHclTerraform;
class DialogflowCxPageFormParametersOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // advanced_settings - computed: false, optional: true, required: false
        this._advancedSettings = new DialogflowCxPageFormParametersAdvancedSettingsOutputReference(this, "advanced_settings");
        // fill_behavior - computed: false, optional: true, required: false
        this._fillBehavior = new DialogflowCxPageFormParametersFillBehaviorOutputReference(this, "fill_behavior");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._defaultValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.defaultValue = this._defaultValue;
        }
        if (this._displayName !== undefined) {
            hasAnyValues = true;
            internalValueResult.displayName = this._displayName;
        }
        if (this._entityType !== undefined) {
            hasAnyValues = true;
            internalValueResult.entityType = this._entityType;
        }
        if (this._isList !== undefined) {
            hasAnyValues = true;
            internalValueResult.isList = this._isList;
        }
        if (this._redact !== undefined) {
            hasAnyValues = true;
            internalValueResult.redact = this._redact;
        }
        if (this._required !== undefined) {
            hasAnyValues = true;
            internalValueResult.required = this._required;
        }
        if (this._advancedSettings?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.advancedSettings = this._advancedSettings?.internalValue;
        }
        if (this._fillBehavior?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.fillBehavior = this._fillBehavior?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._defaultValue = undefined;
            this._displayName = undefined;
            this._entityType = undefined;
            this._isList = undefined;
            this._redact = undefined;
            this._required = undefined;
            this._advancedSettings.internalValue = undefined;
            this._fillBehavior.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._defaultValue = value.defaultValue;
            this._displayName = value.displayName;
            this._entityType = value.entityType;
            this._isList = value.isList;
            this._redact = value.redact;
            this._required = value.required;
            this._advancedSettings.internalValue = value.advancedSettings;
            this._fillBehavior.internalValue = value.fillBehavior;
        }
    }
    get defaultValue() {
        return this.getStringAttribute('default_value');
    }
    set defaultValue(value) {
        this._defaultValue = value;
    }
    resetDefaultValue() {
        this._defaultValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get defaultValueInput() {
        return this._defaultValue;
    }
    get displayName() {
        return this.getStringAttribute('display_name');
    }
    set displayName(value) {
        this._displayName = value;
    }
    resetDisplayName() {
        this._displayName = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get displayNameInput() {
        return this._displayName;
    }
    get entityType() {
        return this.getStringAttribute('entity_type');
    }
    set entityType(value) {
        this._entityType = value;
    }
    resetEntityType() {
        this._entityType = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get entityTypeInput() {
        return this._entityType;
    }
    get isList() {
        return this.getBooleanAttribute('is_list');
    }
    set isList(value) {
        this._isList = value;
    }
    resetIsList() {
        this._isList = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get isListInput() {
        return this._isList;
    }
    get redact() {
        return this.getBooleanAttribute('redact');
    }
    set redact(value) {
        this._redact = value;
    }
    resetRedact() {
        this._redact = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get redactInput() {
        return this._redact;
    }
    get required() {
        return this.getBooleanAttribute('required');
    }
    set required(value) {
        this._required = value;
    }
    resetRequired() {
        this._required = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get requiredInput() {
        return this._required;
    }
    get advancedSettings() {
        return this._advancedSettings;
    }
    putAdvancedSettings(value) {
        this._advancedSettings.internalValue = value;
    }
    resetAdvancedSettings() {
        this._advancedSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get advancedSettingsInput() {
        return this._advancedSettings.internalValue;
    }
    get fillBehavior() {
        return this._fillBehavior;
    }
    putFillBehavior(value) {
        this._fillBehavior.internalValue = value;
    }
    resetFillBehavior() {
        this._fillBehavior.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fillBehaviorInput() {
        return this._fillBehavior.internalValue;
    }
}
exports.DialogflowCxPageFormParametersOutputReference = DialogflowCxPageFormParametersOutputReference;
_37 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageFormParametersOutputReference[_37] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageFormParametersOutputReference", version: "14.13.1" };
class DialogflowCxPageFormParametersList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DialogflowCxPageFormParametersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DialogflowCxPageFormParametersList = DialogflowCxPageFormParametersList;
_38 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageFormParametersList[_38] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageFormParametersList", version: "14.13.1" };
function dialogflowCxPageFormToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        parameters: cdktf.listMapper(dialogflowCxPageFormParametersToTerraform, true)(struct.parameters),
    };
}
exports.dialogflowCxPageFormToTerraform = dialogflowCxPageFormToTerraform;
function dialogflowCxPageFormToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        parameters: {
            value: cdktf.listMapperHcl(dialogflowCxPageFormParametersToHclTerraform, true)(struct.parameters),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageFormParametersList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageFormToHclTerraform = dialogflowCxPageFormToHclTerraform;
class DialogflowCxPageFormOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // parameters - computed: false, optional: true, required: false
        this._parameters = new DialogflowCxPageFormParametersList(this, "parameters", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._parameters?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.parameters = this._parameters?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._parameters.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._parameters.internalValue = value.parameters;
        }
    }
    get parameters() {
        return this._parameters;
    }
    putParameters(value) {
        this._parameters.internalValue = value;
    }
    resetParameters() {
        this._parameters.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parametersInput() {
        return this._parameters.internalValue;
    }
}
exports.DialogflowCxPageFormOutputReference = DialogflowCxPageFormOutputReference;
_39 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageFormOutputReference[_39] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageFormOutputReference", version: "14.13.1" };
function dialogflowCxPageTimeoutsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        create: cdktf.stringToTerraform(struct.create),
        delete: cdktf.stringToTerraform(struct.delete),
        update: cdktf.stringToTerraform(struct.update),
    };
}
exports.dialogflowCxPageTimeoutsToTerraform = dialogflowCxPageTimeoutsToTerraform;
function dialogflowCxPageTimeoutsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        create: {
            value: cdktf.stringToHclTerraform(struct.create),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        delete: {
            value: cdktf.stringToHclTerraform(struct.delete),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        update: {
            value: cdktf.stringToHclTerraform(struct.update),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageTimeoutsToHclTerraform = dialogflowCxPageTimeoutsToHclTerraform;
class DialogflowCxPageTimeoutsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._create !== undefined) {
            hasAnyValues = true;
            internalValueResult.create = this._create;
        }
        if (this._delete !== undefined) {
            hasAnyValues = true;
            internalValueResult.delete = this._delete;
        }
        if (this._update !== undefined) {
            hasAnyValues = true;
            internalValueResult.update = this._update;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._create = undefined;
            this._delete = undefined;
            this._update = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._create = value.create;
            this._delete = value.delete;
            this._update = value.update;
        }
    }
    get create() {
        return this.getStringAttribute('create');
    }
    set create(value) {
        this._create = value;
    }
    resetCreate() {
        this._create = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get createInput() {
        return this._create;
    }
    get delete() {
        return this.getStringAttribute('delete');
    }
    set delete(value) {
        this._delete = value;
    }
    resetDelete() {
        this._delete = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get deleteInput() {
        return this._delete;
    }
    get update() {
        return this.getStringAttribute('update');
    }
    set update(value) {
        this._update = value;
    }
    resetUpdate() {
        this._update = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get updateInput() {
        return this._update;
    }
}
exports.DialogflowCxPageTimeoutsOutputReference = DialogflowCxPageTimeoutsOutputReference;
_40 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageTimeoutsOutputReference[_40] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageTimeoutsOutputReference", version: "14.13.1" };
function dialogflowCxPageTransitionRoutesTriggerFulfillmentConditionalCasesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        cases: cdktf.stringToTerraform(struct.cases),
    };
}
exports.dialogflowCxPageTransitionRoutesTriggerFulfillmentConditionalCasesToTerraform = dialogflowCxPageTransitionRoutesTriggerFulfillmentConditionalCasesToTerraform;
function dialogflowCxPageTransitionRoutesTriggerFulfillmentConditionalCasesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        cases: {
            value: cdktf.stringToHclTerraform(struct.cases),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageTransitionRoutesTriggerFulfillmentConditionalCasesToHclTerraform = dialogflowCxPageTransitionRoutesTriggerFulfillmentConditionalCasesToHclTerraform;
class DialogflowCxPageTransitionRoutesTriggerFulfillmentConditionalCasesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._cases !== undefined) {
            hasAnyValues = true;
            internalValueResult.cases = this._cases;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._cases = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._cases = value.cases;
        }
    }
    get cases() {
        return this.getStringAttribute('cases');
    }
    set cases(value) {
        this._cases = value;
    }
    resetCases() {
        this._cases = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get casesInput() {
        return this._cases;
    }
}
exports.DialogflowCxPageTransitionRoutesTriggerFulfillmentConditionalCasesOutputReference = DialogflowCxPageTransitionRoutesTriggerFulfillmentConditionalCasesOutputReference;
_41 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageTransitionRoutesTriggerFulfillmentConditionalCasesOutputReference[_41] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageTransitionRoutesTriggerFulfillmentConditionalCasesOutputReference", version: "14.13.1" };
class DialogflowCxPageTransitionRoutesTriggerFulfillmentConditionalCasesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DialogflowCxPageTransitionRoutesTriggerFulfillmentConditionalCasesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DialogflowCxPageTransitionRoutesTriggerFulfillmentConditionalCasesList = DialogflowCxPageTransitionRoutesTriggerFulfillmentConditionalCasesList;
_42 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageTransitionRoutesTriggerFulfillmentConditionalCasesList[_42] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageTransitionRoutesTriggerFulfillmentConditionalCasesList", version: "14.13.1" };
function dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesConversationSuccessToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        metadata: cdktf.stringToTerraform(struct.metadata),
    };
}
exports.dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesConversationSuccessToTerraform = dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesConversationSuccessToTerraform;
function dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesConversationSuccessToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        metadata: {
            value: cdktf.stringToHclTerraform(struct.metadata),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesConversationSuccessToHclTerraform = dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesConversationSuccessToHclTerraform;
class DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesConversationSuccessOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._metadata !== undefined) {
            hasAnyValues = true;
            internalValueResult.metadata = this._metadata;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._metadata = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._metadata = value.metadata;
        }
    }
    get metadata() {
        return this.getStringAttribute('metadata');
    }
    set metadata(value) {
        this._metadata = value;
    }
    resetMetadata() {
        this._metadata = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get metadataInput() {
        return this._metadata;
    }
}
exports.DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesConversationSuccessOutputReference = DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesConversationSuccessOutputReference;
_43 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesConversationSuccessOutputReference[_43] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesConversationSuccessOutputReference", version: "14.13.1" };
function dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesLiveAgentHandoffToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        metadata: cdktf.stringToTerraform(struct.metadata),
    };
}
exports.dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesLiveAgentHandoffToTerraform = dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesLiveAgentHandoffToTerraform;
function dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesLiveAgentHandoffToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        metadata: {
            value: cdktf.stringToHclTerraform(struct.metadata),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesLiveAgentHandoffToHclTerraform = dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesLiveAgentHandoffToHclTerraform;
class DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesLiveAgentHandoffOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._metadata !== undefined) {
            hasAnyValues = true;
            internalValueResult.metadata = this._metadata;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._metadata = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._metadata = value.metadata;
        }
    }
    get metadata() {
        return this.getStringAttribute('metadata');
    }
    set metadata(value) {
        this._metadata = value;
    }
    resetMetadata() {
        this._metadata = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get metadataInput() {
        return this._metadata;
    }
}
exports.DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesLiveAgentHandoffOutputReference = DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesLiveAgentHandoffOutputReference;
_44 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesLiveAgentHandoffOutputReference[_44] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesLiveAgentHandoffOutputReference", version: "14.13.1" };
function dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesOutputAudioTextToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        ssml: cdktf.stringToTerraform(struct.ssml),
        text: cdktf.stringToTerraform(struct.text),
    };
}
exports.dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesOutputAudioTextToTerraform = dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesOutputAudioTextToTerraform;
function dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesOutputAudioTextToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        ssml: {
            value: cdktf.stringToHclTerraform(struct.ssml),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        text: {
            value: cdktf.stringToHclTerraform(struct.text),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesOutputAudioTextToHclTerraform = dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesOutputAudioTextToHclTerraform;
class DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesOutputAudioTextOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._ssml !== undefined) {
            hasAnyValues = true;
            internalValueResult.ssml = this._ssml;
        }
        if (this._text !== undefined) {
            hasAnyValues = true;
            internalValueResult.text = this._text;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._ssml = undefined;
            this._text = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._ssml = value.ssml;
            this._text = value.text;
        }
    }
    // allow_playback_interruption - computed: true, optional: false, required: false
    get allowPlaybackInterruption() {
        return this.getBooleanAttribute('allow_playback_interruption');
    }
    get ssml() {
        return this.getStringAttribute('ssml');
    }
    set ssml(value) {
        this._ssml = value;
    }
    resetSsml() {
        this._ssml = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get ssmlInput() {
        return this._ssml;
    }
    get text() {
        return this.getStringAttribute('text');
    }
    set text(value) {
        this._text = value;
    }
    resetText() {
        this._text = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get textInput() {
        return this._text;
    }
}
exports.DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesOutputAudioTextOutputReference = DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesOutputAudioTextOutputReference;
_45 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesOutputAudioTextOutputReference[_45] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesOutputAudioTextOutputReference", version: "14.13.1" };
function dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesPlayAudioToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        audio_uri: cdktf.stringToTerraform(struct.audioUri),
    };
}
exports.dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesPlayAudioToTerraform = dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesPlayAudioToTerraform;
function dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesPlayAudioToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        audio_uri: {
            value: cdktf.stringToHclTerraform(struct.audioUri),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesPlayAudioToHclTerraform = dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesPlayAudioToHclTerraform;
class DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesPlayAudioOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._audioUri !== undefined) {
            hasAnyValues = true;
            internalValueResult.audioUri = this._audioUri;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._audioUri = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._audioUri = value.audioUri;
        }
    }
    // allow_playback_interruption - computed: true, optional: false, required: false
    get allowPlaybackInterruption() {
        return this.getBooleanAttribute('allow_playback_interruption');
    }
    get audioUri() {
        return this.getStringAttribute('audio_uri');
    }
    set audioUri(value) {
        this._audioUri = value;
    }
    // Temporarily expose input value. Use with caution.
    get audioUriInput() {
        return this._audioUri;
    }
}
exports.DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesPlayAudioOutputReference = DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesPlayAudioOutputReference;
_46 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesPlayAudioOutputReference[_46] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesPlayAudioOutputReference", version: "14.13.1" };
function dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTelephonyTransferCallToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        phone_number: cdktf.stringToTerraform(struct.phoneNumber),
    };
}
exports.dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTelephonyTransferCallToTerraform = dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTelephonyTransferCallToTerraform;
function dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTelephonyTransferCallToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        phone_number: {
            value: cdktf.stringToHclTerraform(struct.phoneNumber),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTelephonyTransferCallToHclTerraform = dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTelephonyTransferCallToHclTerraform;
class DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTelephonyTransferCallOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._phoneNumber !== undefined) {
            hasAnyValues = true;
            internalValueResult.phoneNumber = this._phoneNumber;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._phoneNumber = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._phoneNumber = value.phoneNumber;
        }
    }
    get phoneNumber() {
        return this.getStringAttribute('phone_number');
    }
    set phoneNumber(value) {
        this._phoneNumber = value;
    }
    // Temporarily expose input value. Use with caution.
    get phoneNumberInput() {
        return this._phoneNumber;
    }
}
exports.DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTelephonyTransferCallOutputReference = DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTelephonyTransferCallOutputReference;
_47 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTelephonyTransferCallOutputReference[_47] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTelephonyTransferCallOutputReference", version: "14.13.1" };
function dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTextToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        text: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.text),
    };
}
exports.dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTextToTerraform = dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTextToTerraform;
function dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTextToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        text: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.text),
            isBlock: false,
            type: "list",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTextToHclTerraform = dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTextToHclTerraform;
class DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTextOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._text !== undefined) {
            hasAnyValues = true;
            internalValueResult.text = this._text;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._text = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._text = value.text;
        }
    }
    // allow_playback_interruption - computed: true, optional: false, required: false
    get allowPlaybackInterruption() {
        return this.getBooleanAttribute('allow_playback_interruption');
    }
    get text() {
        return this.getListAttribute('text');
    }
    set text(value) {
        this._text = value;
    }
    resetText() {
        this._text = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get textInput() {
        return this._text;
    }
}
exports.DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTextOutputReference = DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTextOutputReference;
_48 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTextOutputReference[_48] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTextOutputReference", version: "14.13.1" };
function dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        channel: cdktf.stringToTerraform(struct.channel),
        payload: cdktf.stringToTerraform(struct.payload),
        conversation_success: dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesConversationSuccessToTerraform(struct.conversationSuccess),
        live_agent_handoff: dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesLiveAgentHandoffToTerraform(struct.liveAgentHandoff),
        output_audio_text: dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesOutputAudioTextToTerraform(struct.outputAudioText),
        play_audio: dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesPlayAudioToTerraform(struct.playAudio),
        telephony_transfer_call: dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTelephonyTransferCallToTerraform(struct.telephonyTransferCall),
        text: dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTextToTerraform(struct.text),
    };
}
exports.dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesToTerraform = dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesToTerraform;
function dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        channel: {
            value: cdktf.stringToHclTerraform(struct.channel),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        payload: {
            value: cdktf.stringToHclTerraform(struct.payload),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        conversation_success: {
            value: dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesConversationSuccessToHclTerraform(struct.conversationSuccess),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesConversationSuccessList",
        },
        live_agent_handoff: {
            value: dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesLiveAgentHandoffToHclTerraform(struct.liveAgentHandoff),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesLiveAgentHandoffList",
        },
        output_audio_text: {
            value: dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesOutputAudioTextToHclTerraform(struct.outputAudioText),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesOutputAudioTextList",
        },
        play_audio: {
            value: dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesPlayAudioToHclTerraform(struct.playAudio),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesPlayAudioList",
        },
        telephony_transfer_call: {
            value: dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTelephonyTransferCallToHclTerraform(struct.telephonyTransferCall),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTelephonyTransferCallList",
        },
        text: {
            value: dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTextToHclTerraform(struct.text),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTextList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesToHclTerraform = dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesToHclTerraform;
class DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // conversation_success - computed: false, optional: true, required: false
        this._conversationSuccess = new DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesConversationSuccessOutputReference(this, "conversation_success");
        // live_agent_handoff - computed: false, optional: true, required: false
        this._liveAgentHandoff = new DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesLiveAgentHandoffOutputReference(this, "live_agent_handoff");
        // output_audio_text - computed: false, optional: true, required: false
        this._outputAudioText = new DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesOutputAudioTextOutputReference(this, "output_audio_text");
        // play_audio - computed: false, optional: true, required: false
        this._playAudio = new DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesPlayAudioOutputReference(this, "play_audio");
        // telephony_transfer_call - computed: false, optional: true, required: false
        this._telephonyTransferCall = new DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTelephonyTransferCallOutputReference(this, "telephony_transfer_call");
        // text - computed: false, optional: true, required: false
        this._text = new DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesTextOutputReference(this, "text");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._channel !== undefined) {
            hasAnyValues = true;
            internalValueResult.channel = this._channel;
        }
        if (this._payload !== undefined) {
            hasAnyValues = true;
            internalValueResult.payload = this._payload;
        }
        if (this._conversationSuccess?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.conversationSuccess = this._conversationSuccess?.internalValue;
        }
        if (this._liveAgentHandoff?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.liveAgentHandoff = this._liveAgentHandoff?.internalValue;
        }
        if (this._outputAudioText?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.outputAudioText = this._outputAudioText?.internalValue;
        }
        if (this._playAudio?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.playAudio = this._playAudio?.internalValue;
        }
        if (this._telephonyTransferCall?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.telephonyTransferCall = this._telephonyTransferCall?.internalValue;
        }
        if (this._text?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.text = this._text?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._channel = undefined;
            this._payload = undefined;
            this._conversationSuccess.internalValue = undefined;
            this._liveAgentHandoff.internalValue = undefined;
            this._outputAudioText.internalValue = undefined;
            this._playAudio.internalValue = undefined;
            this._telephonyTransferCall.internalValue = undefined;
            this._text.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._channel = value.channel;
            this._payload = value.payload;
            this._conversationSuccess.internalValue = value.conversationSuccess;
            this._liveAgentHandoff.internalValue = value.liveAgentHandoff;
            this._outputAudioText.internalValue = value.outputAudioText;
            this._playAudio.internalValue = value.playAudio;
            this._telephonyTransferCall.internalValue = value.telephonyTransferCall;
            this._text.internalValue = value.text;
        }
    }
    get channel() {
        return this.getStringAttribute('channel');
    }
    set channel(value) {
        this._channel = value;
    }
    resetChannel() {
        this._channel = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get channelInput() {
        return this._channel;
    }
    get payload() {
        return this.getStringAttribute('payload');
    }
    set payload(value) {
        this._payload = value;
    }
    resetPayload() {
        this._payload = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get payloadInput() {
        return this._payload;
    }
    get conversationSuccess() {
        return this._conversationSuccess;
    }
    putConversationSuccess(value) {
        this._conversationSuccess.internalValue = value;
    }
    resetConversationSuccess() {
        this._conversationSuccess.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get conversationSuccessInput() {
        return this._conversationSuccess.internalValue;
    }
    get liveAgentHandoff() {
        return this._liveAgentHandoff;
    }
    putLiveAgentHandoff(value) {
        this._liveAgentHandoff.internalValue = value;
    }
    resetLiveAgentHandoff() {
        this._liveAgentHandoff.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get liveAgentHandoffInput() {
        return this._liveAgentHandoff.internalValue;
    }
    get outputAudioText() {
        return this._outputAudioText;
    }
    putOutputAudioText(value) {
        this._outputAudioText.internalValue = value;
    }
    resetOutputAudioText() {
        this._outputAudioText.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get outputAudioTextInput() {
        return this._outputAudioText.internalValue;
    }
    get playAudio() {
        return this._playAudio;
    }
    putPlayAudio(value) {
        this._playAudio.internalValue = value;
    }
    resetPlayAudio() {
        this._playAudio.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get playAudioInput() {
        return this._playAudio.internalValue;
    }
    get telephonyTransferCall() {
        return this._telephonyTransferCall;
    }
    putTelephonyTransferCall(value) {
        this._telephonyTransferCall.internalValue = value;
    }
    resetTelephonyTransferCall() {
        this._telephonyTransferCall.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get telephonyTransferCallInput() {
        return this._telephonyTransferCall.internalValue;
    }
    get text() {
        return this._text;
    }
    putText(value) {
        this._text.internalValue = value;
    }
    resetText() {
        this._text.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get textInput() {
        return this._text.internalValue;
    }
}
exports.DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesOutputReference = DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesOutputReference;
_49 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesOutputReference[_49] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesOutputReference", version: "14.13.1" };
class DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesList = DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesList;
_50 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesList[_50] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesList", version: "14.13.1" };
function dialogflowCxPageTransitionRoutesTriggerFulfillmentSetParameterActionsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        parameter: cdktf.stringToTerraform(struct.parameter),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.dialogflowCxPageTransitionRoutesTriggerFulfillmentSetParameterActionsToTerraform = dialogflowCxPageTransitionRoutesTriggerFulfillmentSetParameterActionsToTerraform;
function dialogflowCxPageTransitionRoutesTriggerFulfillmentSetParameterActionsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        parameter: {
            value: cdktf.stringToHclTerraform(struct.parameter),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        value: {
            value: cdktf.stringToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageTransitionRoutesTriggerFulfillmentSetParameterActionsToHclTerraform = dialogflowCxPageTransitionRoutesTriggerFulfillmentSetParameterActionsToHclTerraform;
class DialogflowCxPageTransitionRoutesTriggerFulfillmentSetParameterActionsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._parameter !== undefined) {
            hasAnyValues = true;
            internalValueResult.parameter = this._parameter;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._parameter = undefined;
            this._value = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._parameter = value.parameter;
            this._value = value.value;
        }
    }
    get parameter() {
        return this.getStringAttribute('parameter');
    }
    set parameter(value) {
        this._parameter = value;
    }
    resetParameter() {
        this._parameter = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parameterInput() {
        return this._parameter;
    }
    get value() {
        return this.getStringAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    resetValue() {
        this._value = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.DialogflowCxPageTransitionRoutesTriggerFulfillmentSetParameterActionsOutputReference = DialogflowCxPageTransitionRoutesTriggerFulfillmentSetParameterActionsOutputReference;
_51 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageTransitionRoutesTriggerFulfillmentSetParameterActionsOutputReference[_51] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageTransitionRoutesTriggerFulfillmentSetParameterActionsOutputReference", version: "14.13.1" };
class DialogflowCxPageTransitionRoutesTriggerFulfillmentSetParameterActionsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DialogflowCxPageTransitionRoutesTriggerFulfillmentSetParameterActionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DialogflowCxPageTransitionRoutesTriggerFulfillmentSetParameterActionsList = DialogflowCxPageTransitionRoutesTriggerFulfillmentSetParameterActionsList;
_52 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageTransitionRoutesTriggerFulfillmentSetParameterActionsList[_52] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageTransitionRoutesTriggerFulfillmentSetParameterActionsList", version: "14.13.1" };
function dialogflowCxPageTransitionRoutesTriggerFulfillmentToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        return_partial_responses: cdktf.booleanToTerraform(struct.returnPartialResponses),
        tag: cdktf.stringToTerraform(struct.tag),
        webhook: cdktf.stringToTerraform(struct.webhook),
        conditional_cases: cdktf.listMapper(dialogflowCxPageTransitionRoutesTriggerFulfillmentConditionalCasesToTerraform, true)(struct.conditionalCases),
        messages: cdktf.listMapper(dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesToTerraform, true)(struct.messages),
        set_parameter_actions: cdktf.listMapper(dialogflowCxPageTransitionRoutesTriggerFulfillmentSetParameterActionsToTerraform, true)(struct.setParameterActions),
    };
}
exports.dialogflowCxPageTransitionRoutesTriggerFulfillmentToTerraform = dialogflowCxPageTransitionRoutesTriggerFulfillmentToTerraform;
function dialogflowCxPageTransitionRoutesTriggerFulfillmentToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        return_partial_responses: {
            value: cdktf.booleanToHclTerraform(struct.returnPartialResponses),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        tag: {
            value: cdktf.stringToHclTerraform(struct.tag),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        webhook: {
            value: cdktf.stringToHclTerraform(struct.webhook),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        conditional_cases: {
            value: cdktf.listMapperHcl(dialogflowCxPageTransitionRoutesTriggerFulfillmentConditionalCasesToHclTerraform, true)(struct.conditionalCases),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageTransitionRoutesTriggerFulfillmentConditionalCasesList",
        },
        messages: {
            value: cdktf.listMapperHcl(dialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesToHclTerraform, true)(struct.messages),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesList",
        },
        set_parameter_actions: {
            value: cdktf.listMapperHcl(dialogflowCxPageTransitionRoutesTriggerFulfillmentSetParameterActionsToHclTerraform, true)(struct.setParameterActions),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageTransitionRoutesTriggerFulfillmentSetParameterActionsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageTransitionRoutesTriggerFulfillmentToHclTerraform = dialogflowCxPageTransitionRoutesTriggerFulfillmentToHclTerraform;
class DialogflowCxPageTransitionRoutesTriggerFulfillmentOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // conditional_cases - computed: false, optional: true, required: false
        this._conditionalCases = new DialogflowCxPageTransitionRoutesTriggerFulfillmentConditionalCasesList(this, "conditional_cases", false);
        // messages - computed: false, optional: true, required: false
        this._messages = new DialogflowCxPageTransitionRoutesTriggerFulfillmentMessagesList(this, "messages", false);
        // set_parameter_actions - computed: false, optional: true, required: false
        this._setParameterActions = new DialogflowCxPageTransitionRoutesTriggerFulfillmentSetParameterActionsList(this, "set_parameter_actions", false);
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._returnPartialResponses !== undefined) {
            hasAnyValues = true;
            internalValueResult.returnPartialResponses = this._returnPartialResponses;
        }
        if (this._tag !== undefined) {
            hasAnyValues = true;
            internalValueResult.tag = this._tag;
        }
        if (this._webhook !== undefined) {
            hasAnyValues = true;
            internalValueResult.webhook = this._webhook;
        }
        if (this._conditionalCases?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.conditionalCases = this._conditionalCases?.internalValue;
        }
        if (this._messages?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.messages = this._messages?.internalValue;
        }
        if (this._setParameterActions?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.setParameterActions = this._setParameterActions?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._returnPartialResponses = undefined;
            this._tag = undefined;
            this._webhook = undefined;
            this._conditionalCases.internalValue = undefined;
            this._messages.internalValue = undefined;
            this._setParameterActions.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._returnPartialResponses = value.returnPartialResponses;
            this._tag = value.tag;
            this._webhook = value.webhook;
            this._conditionalCases.internalValue = value.conditionalCases;
            this._messages.internalValue = value.messages;
            this._setParameterActions.internalValue = value.setParameterActions;
        }
    }
    get returnPartialResponses() {
        return this.getBooleanAttribute('return_partial_responses');
    }
    set returnPartialResponses(value) {
        this._returnPartialResponses = value;
    }
    resetReturnPartialResponses() {
        this._returnPartialResponses = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get returnPartialResponsesInput() {
        return this._returnPartialResponses;
    }
    get tag() {
        return this.getStringAttribute('tag');
    }
    set tag(value) {
        this._tag = value;
    }
    resetTag() {
        this._tag = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagInput() {
        return this._tag;
    }
    get webhook() {
        return this.getStringAttribute('webhook');
    }
    set webhook(value) {
        this._webhook = value;
    }
    resetWebhook() {
        this._webhook = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get webhookInput() {
        return this._webhook;
    }
    get conditionalCases() {
        return this._conditionalCases;
    }
    putConditionalCases(value) {
        this._conditionalCases.internalValue = value;
    }
    resetConditionalCases() {
        this._conditionalCases.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get conditionalCasesInput() {
        return this._conditionalCases.internalValue;
    }
    get messages() {
        return this._messages;
    }
    putMessages(value) {
        this._messages.internalValue = value;
    }
    resetMessages() {
        this._messages.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get messagesInput() {
        return this._messages.internalValue;
    }
    get setParameterActions() {
        return this._setParameterActions;
    }
    putSetParameterActions(value) {
        this._setParameterActions.internalValue = value;
    }
    resetSetParameterActions() {
        this._setParameterActions.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get setParameterActionsInput() {
        return this._setParameterActions.internalValue;
    }
}
exports.DialogflowCxPageTransitionRoutesTriggerFulfillmentOutputReference = DialogflowCxPageTransitionRoutesTriggerFulfillmentOutputReference;
_53 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageTransitionRoutesTriggerFulfillmentOutputReference[_53] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageTransitionRoutesTriggerFulfillmentOutputReference", version: "14.13.1" };
function dialogflowCxPageTransitionRoutesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        condition: cdktf.stringToTerraform(struct.condition),
        intent: cdktf.stringToTerraform(struct.intent),
        target_flow: cdktf.stringToTerraform(struct.targetFlow),
        target_page: cdktf.stringToTerraform(struct.targetPage),
        trigger_fulfillment: dialogflowCxPageTransitionRoutesTriggerFulfillmentToTerraform(struct.triggerFulfillment),
    };
}
exports.dialogflowCxPageTransitionRoutesToTerraform = dialogflowCxPageTransitionRoutesToTerraform;
function dialogflowCxPageTransitionRoutesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        condition: {
            value: cdktf.stringToHclTerraform(struct.condition),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        intent: {
            value: cdktf.stringToHclTerraform(struct.intent),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        target_flow: {
            value: cdktf.stringToHclTerraform(struct.targetFlow),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        target_page: {
            value: cdktf.stringToHclTerraform(struct.targetPage),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        trigger_fulfillment: {
            value: dialogflowCxPageTransitionRoutesTriggerFulfillmentToHclTerraform(struct.triggerFulfillment),
            isBlock: true,
            type: "list",
            storageClassType: "DialogflowCxPageTransitionRoutesTriggerFulfillmentList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.dialogflowCxPageTransitionRoutesToHclTerraform = dialogflowCxPageTransitionRoutesToHclTerraform;
class DialogflowCxPageTransitionRoutesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // trigger_fulfillment - computed: false, optional: true, required: false
        this._triggerFulfillment = new DialogflowCxPageTransitionRoutesTriggerFulfillmentOutputReference(this, "trigger_fulfillment");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._condition !== undefined) {
            hasAnyValues = true;
            internalValueResult.condition = this._condition;
        }
        if (this._intent !== undefined) {
            hasAnyValues = true;
            internalValueResult.intent = this._intent;
        }
        if (this._targetFlow !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetFlow = this._targetFlow;
        }
        if (this._targetPage !== undefined) {
            hasAnyValues = true;
            internalValueResult.targetPage = this._targetPage;
        }
        if (this._triggerFulfillment?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.triggerFulfillment = this._triggerFulfillment?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._condition = undefined;
            this._intent = undefined;
            this._targetFlow = undefined;
            this._targetPage = undefined;
            this._triggerFulfillment.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._condition = value.condition;
            this._intent = value.intent;
            this._targetFlow = value.targetFlow;
            this._targetPage = value.targetPage;
            this._triggerFulfillment.internalValue = value.triggerFulfillment;
        }
    }
    get condition() {
        return this.getStringAttribute('condition');
    }
    set condition(value) {
        this._condition = value;
    }
    resetCondition() {
        this._condition = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get conditionInput() {
        return this._condition;
    }
    get intent() {
        return this.getStringAttribute('intent');
    }
    set intent(value) {
        this._intent = value;
    }
    resetIntent() {
        this._intent = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get intentInput() {
        return this._intent;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get targetFlow() {
        return this.getStringAttribute('target_flow');
    }
    set targetFlow(value) {
        this._targetFlow = value;
    }
    resetTargetFlow() {
        this._targetFlow = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetFlowInput() {
        return this._targetFlow;
    }
    get targetPage() {
        return this.getStringAttribute('target_page');
    }
    set targetPage(value) {
        this._targetPage = value;
    }
    resetTargetPage() {
        this._targetPage = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get targetPageInput() {
        return this._targetPage;
    }
    get triggerFulfillment() {
        return this._triggerFulfillment;
    }
    putTriggerFulfillment(value) {
        this._triggerFulfillment.internalValue = value;
    }
    resetTriggerFulfillment() {
        this._triggerFulfillment.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get triggerFulfillmentInput() {
        return this._triggerFulfillment.internalValue;
    }
}
exports.DialogflowCxPageTransitionRoutesOutputReference = DialogflowCxPageTransitionRoutesOutputReference;
_54 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageTransitionRoutesOutputReference[_54] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageTransitionRoutesOutputReference", version: "14.13.1" };
class DialogflowCxPageTransitionRoutesList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new DialogflowCxPageTransitionRoutesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.DialogflowCxPageTransitionRoutesList = DialogflowCxPageTransitionRoutesList;
_55 = JSII_RTTI_SYMBOL_1;
DialogflowCxPageTransitionRoutesList[_55] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPageTransitionRoutesList", version: "14.13.1" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/dialogflow_cx_page google_dialogflow_cx_page}
*/
class DialogflowCxPage extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a DialogflowCxPage resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the DialogflowCxPage to import
    * @param importFromId The id of the existing DialogflowCxPage that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/dialogflow_cx_page#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the DialogflowCxPage to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_dialogflow_cx_page", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/resources/dialogflow_cx_page google_dialogflow_cx_page} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DialogflowCxPageConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_dialogflow_cx_page',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // advanced_settings - computed: false, optional: true, required: false
        this._advancedSettings = new DialogflowCxPageAdvancedSettingsOutputReference(this, "advanced_settings");
        // entry_fulfillment - computed: false, optional: true, required: false
        this._entryFulfillment = new DialogflowCxPageEntryFulfillmentOutputReference(this, "entry_fulfillment");
        // event_handlers - computed: false, optional: true, required: false
        this._eventHandlers = new DialogflowCxPageEventHandlersList(this, "event_handlers", false);
        // form - computed: false, optional: true, required: false
        this._form = new DialogflowCxPageFormOutputReference(this, "form");
        // timeouts - computed: false, optional: true, required: false
        this._timeouts = new DialogflowCxPageTimeoutsOutputReference(this, "timeouts");
        // transition_routes - computed: false, optional: true, required: false
        this._transitionRoutes = new DialogflowCxPageTransitionRoutesList(this, "transition_routes", false);
        this._displayName = config.displayName;
        this._id = config.id;
        this._languageCode = config.languageCode;
        this._parent = config.parent;
        this._transitionRouteGroups = config.transitionRouteGroups;
        this._advancedSettings.internalValue = config.advancedSettings;
        this._entryFulfillment.internalValue = config.entryFulfillment;
        this._eventHandlers.internalValue = config.eventHandlers;
        this._form.internalValue = config.form;
        this._timeouts.internalValue = config.timeouts;
        this._transitionRoutes.internalValue = config.transitionRoutes;
    }
    get displayName() {
        return this.getStringAttribute('display_name');
    }
    set displayName(value) {
        this._displayName = value;
    }
    // Temporarily expose input value. Use with caution.
    get displayNameInput() {
        return this._displayName;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get languageCode() {
        return this.getStringAttribute('language_code');
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    resetLanguageCode() {
        this._languageCode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get languageCodeInput() {
        return this._languageCode;
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    get parent() {
        return this.getStringAttribute('parent');
    }
    set parent(value) {
        this._parent = value;
    }
    resetParent() {
        this._parent = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get parentInput() {
        return this._parent;
    }
    get transitionRouteGroups() {
        return this.getListAttribute('transition_route_groups');
    }
    set transitionRouteGroups(value) {
        this._transitionRouteGroups = value;
    }
    resetTransitionRouteGroups() {
        this._transitionRouteGroups = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get transitionRouteGroupsInput() {
        return this._transitionRouteGroups;
    }
    get advancedSettings() {
        return this._advancedSettings;
    }
    putAdvancedSettings(value) {
        this._advancedSettings.internalValue = value;
    }
    resetAdvancedSettings() {
        this._advancedSettings.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get advancedSettingsInput() {
        return this._advancedSettings.internalValue;
    }
    get entryFulfillment() {
        return this._entryFulfillment;
    }
    putEntryFulfillment(value) {
        this._entryFulfillment.internalValue = value;
    }
    resetEntryFulfillment() {
        this._entryFulfillment.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get entryFulfillmentInput() {
        return this._entryFulfillment.internalValue;
    }
    get eventHandlers() {
        return this._eventHandlers;
    }
    putEventHandlers(value) {
        this._eventHandlers.internalValue = value;
    }
    resetEventHandlers() {
        this._eventHandlers.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get eventHandlersInput() {
        return this._eventHandlers.internalValue;
    }
    get form() {
        return this._form;
    }
    putForm(value) {
        this._form.internalValue = value;
    }
    resetForm() {
        this._form.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get formInput() {
        return this._form.internalValue;
    }
    get timeouts() {
        return this._timeouts;
    }
    putTimeouts(value) {
        this._timeouts.internalValue = value;
    }
    resetTimeouts() {
        this._timeouts.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutsInput() {
        return this._timeouts.internalValue;
    }
    get transitionRoutes() {
        return this._transitionRoutes;
    }
    putTransitionRoutes(value) {
        this._transitionRoutes.internalValue = value;
    }
    resetTransitionRoutes() {
        this._transitionRoutes.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get transitionRoutesInput() {
        return this._transitionRoutes.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            display_name: cdktf.stringToTerraform(this._displayName),
            id: cdktf.stringToTerraform(this._id),
            language_code: cdktf.stringToTerraform(this._languageCode),
            parent: cdktf.stringToTerraform(this._parent),
            transition_route_groups: cdktf.listMapper(cdktf.stringToTerraform, false)(this._transitionRouteGroups),
            advanced_settings: dialogflowCxPageAdvancedSettingsToTerraform(this._advancedSettings.internalValue),
            entry_fulfillment: dialogflowCxPageEntryFulfillmentToTerraform(this._entryFulfillment.internalValue),
            event_handlers: cdktf.listMapper(dialogflowCxPageEventHandlersToTerraform, true)(this._eventHandlers.internalValue),
            form: dialogflowCxPageFormToTerraform(this._form.internalValue),
            timeouts: dialogflowCxPageTimeoutsToTerraform(this._timeouts.internalValue),
            transition_routes: cdktf.listMapper(dialogflowCxPageTransitionRoutesToTerraform, true)(this._transitionRoutes.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            display_name: {
                value: cdktf.stringToHclTerraform(this._displayName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            language_code: {
                value: cdktf.stringToHclTerraform(this._languageCode),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            parent: {
                value: cdktf.stringToHclTerraform(this._parent),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            transition_route_groups: {
                value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._transitionRouteGroups),
                isBlock: false,
                type: "list",
                storageClassType: "stringList",
            },
            advanced_settings: {
                value: dialogflowCxPageAdvancedSettingsToHclTerraform(this._advancedSettings.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "DialogflowCxPageAdvancedSettingsList",
            },
            entry_fulfillment: {
                value: dialogflowCxPageEntryFulfillmentToHclTerraform(this._entryFulfillment.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "DialogflowCxPageEntryFulfillmentList",
            },
            event_handlers: {
                value: cdktf.listMapperHcl(dialogflowCxPageEventHandlersToHclTerraform, true)(this._eventHandlers.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "DialogflowCxPageEventHandlersList",
            },
            form: {
                value: dialogflowCxPageFormToHclTerraform(this._form.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "DialogflowCxPageFormList",
            },
            timeouts: {
                value: dialogflowCxPageTimeoutsToHclTerraform(this._timeouts.internalValue),
                isBlock: true,
                type: "struct",
                storageClassType: "DialogflowCxPageTimeouts",
            },
            transition_routes: {
                value: cdktf.listMapperHcl(dialogflowCxPageTransitionRoutesToHclTerraform, true)(this._transitionRoutes.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "DialogflowCxPageTransitionRoutesList",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.DialogflowCxPage = DialogflowCxPage;
_56 = JSII_RTTI_SYMBOL_1;
DialogflowCxPage[_56] = { fqn: "@cdktf/provider-google.dialogflowCxPage.DialogflowCxPage", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
DialogflowCxPage.tfResourceType = "google_dialogflow_cx_page";
//# sourceMappingURL=data:application/json;base64,