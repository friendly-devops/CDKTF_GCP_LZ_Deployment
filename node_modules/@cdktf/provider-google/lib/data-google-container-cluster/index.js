"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataGoogleContainerCluster = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: MPL-2.0
 */
// generated from terraform resource schema
const index_structs_1 = require("./index-structs");
__exportStar(require("./index-structs"), exports);
const cdktf = require("cdktf");
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/data-sources/container_cluster google_container_cluster}
*/
class DataGoogleContainerCluster extends cdktf.TerraformDataSource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a DataGoogleContainerCluster resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the DataGoogleContainerCluster to import
    * @param importFromId The id of the existing DataGoogleContainerCluster that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/data-sources/container_cluster#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the DataGoogleContainerCluster to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "google_container_cluster", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/google/6.14.1/docs/data-sources/container_cluster google_container_cluster} Data Source
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options DataGoogleContainerClusterConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'google_container_cluster',
            terraformGeneratorMetadata: {
                providerName: 'google',
                providerVersion: '6.14.1',
                providerVersionConstraint: '~> 6.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // ==========
        // ATTRIBUTES
        // ==========
        // addons_config - computed: true, optional: false, required: false
        this._addonsConfig = new index_structs_1.DataGoogleContainerClusterAddonsConfigList(this, "addons_config", false);
        // authenticator_groups_config - computed: true, optional: false, required: false
        this._authenticatorGroupsConfig = new index_structs_1.DataGoogleContainerClusterAuthenticatorGroupsConfigList(this, "authenticator_groups_config", false);
        // binary_authorization - computed: true, optional: false, required: false
        this._binaryAuthorization = new index_structs_1.DataGoogleContainerClusterBinaryAuthorizationList(this, "binary_authorization", false);
        // cluster_autoscaling - computed: true, optional: false, required: false
        this._clusterAutoscaling = new index_structs_1.DataGoogleContainerClusterClusterAutoscalingList(this, "cluster_autoscaling", false);
        // confidential_nodes - computed: true, optional: false, required: false
        this._confidentialNodes = new index_structs_1.DataGoogleContainerClusterConfidentialNodesList(this, "confidential_nodes", false);
        // control_plane_endpoints_config - computed: true, optional: false, required: false
        this._controlPlaneEndpointsConfig = new index_structs_1.DataGoogleContainerClusterControlPlaneEndpointsConfigList(this, "control_plane_endpoints_config", false);
        // cost_management_config - computed: true, optional: false, required: false
        this._costManagementConfig = new index_structs_1.DataGoogleContainerClusterCostManagementConfigList(this, "cost_management_config", false);
        // database_encryption - computed: true, optional: false, required: false
        this._databaseEncryption = new index_structs_1.DataGoogleContainerClusterDatabaseEncryptionList(this, "database_encryption", false);
        // default_snat_status - computed: true, optional: false, required: false
        this._defaultSnatStatus = new index_structs_1.DataGoogleContainerClusterDefaultSnatStatusList(this, "default_snat_status", false);
        // dns_config - computed: true, optional: false, required: false
        this._dnsConfig = new index_structs_1.DataGoogleContainerClusterDnsConfigList(this, "dns_config", false);
        // effective_labels - computed: true, optional: false, required: false
        this._effectiveLabels = new cdktf.StringMap(this, "effective_labels");
        // enable_k8s_beta_apis - computed: true, optional: false, required: false
        this._enableK8SBetaApis = new index_structs_1.DataGoogleContainerClusterEnableK8SBetaApisList(this, "enable_k8s_beta_apis", false);
        // enterprise_config - computed: true, optional: false, required: false
        this._enterpriseConfig = new index_structs_1.DataGoogleContainerClusterEnterpriseConfigList(this, "enterprise_config", false);
        // fleet - computed: true, optional: false, required: false
        this._fleet = new index_structs_1.DataGoogleContainerClusterFleetList(this, "fleet", false);
        // gateway_api_config - computed: true, optional: false, required: false
        this._gatewayApiConfig = new index_structs_1.DataGoogleContainerClusterGatewayApiConfigList(this, "gateway_api_config", false);
        // identity_service_config - computed: true, optional: false, required: false
        this._identityServiceConfig = new index_structs_1.DataGoogleContainerClusterIdentityServiceConfigList(this, "identity_service_config", false);
        // ip_allocation_policy - computed: true, optional: false, required: false
        this._ipAllocationPolicy = new index_structs_1.DataGoogleContainerClusterIpAllocationPolicyList(this, "ip_allocation_policy", false);
        // logging_config - computed: true, optional: false, required: false
        this._loggingConfig = new index_structs_1.DataGoogleContainerClusterLoggingConfigList(this, "logging_config", false);
        // maintenance_policy - computed: true, optional: false, required: false
        this._maintenancePolicy = new index_structs_1.DataGoogleContainerClusterMaintenancePolicyList(this, "maintenance_policy", false);
        // master_auth - computed: true, optional: false, required: false
        this._masterAuth = new index_structs_1.DataGoogleContainerClusterMasterAuthList(this, "master_auth", false);
        // master_authorized_networks_config - computed: true, optional: false, required: false
        this._masterAuthorizedNetworksConfig = new index_structs_1.DataGoogleContainerClusterMasterAuthorizedNetworksConfigList(this, "master_authorized_networks_config", false);
        // mesh_certificates - computed: true, optional: false, required: false
        this._meshCertificates = new index_structs_1.DataGoogleContainerClusterMeshCertificatesList(this, "mesh_certificates", false);
        // monitoring_config - computed: true, optional: false, required: false
        this._monitoringConfig = new index_structs_1.DataGoogleContainerClusterMonitoringConfigList(this, "monitoring_config", false);
        // network_policy - computed: true, optional: false, required: false
        this._networkPolicy = new index_structs_1.DataGoogleContainerClusterNetworkPolicyList(this, "network_policy", false);
        // node_config - computed: true, optional: false, required: false
        this._nodeConfig = new index_structs_1.DataGoogleContainerClusterNodeConfigList(this, "node_config", false);
        // node_pool - computed: true, optional: false, required: false
        this._nodePool = new index_structs_1.DataGoogleContainerClusterNodePoolList(this, "node_pool", false);
        // node_pool_auto_config - computed: true, optional: false, required: false
        this._nodePoolAutoConfig = new index_structs_1.DataGoogleContainerClusterNodePoolAutoConfigList(this, "node_pool_auto_config", false);
        // node_pool_defaults - computed: true, optional: false, required: false
        this._nodePoolDefaults = new index_structs_1.DataGoogleContainerClusterNodePoolDefaultsList(this, "node_pool_defaults", false);
        // notification_config - computed: true, optional: false, required: false
        this._notificationConfig = new index_structs_1.DataGoogleContainerClusterNotificationConfigList(this, "notification_config", false);
        // private_cluster_config - computed: true, optional: false, required: false
        this._privateClusterConfig = new index_structs_1.DataGoogleContainerClusterPrivateClusterConfigList(this, "private_cluster_config", false);
        // release_channel - computed: true, optional: false, required: false
        this._releaseChannel = new index_structs_1.DataGoogleContainerClusterReleaseChannelList(this, "release_channel", false);
        // resource_labels - computed: true, optional: false, required: false
        this._resourceLabels = new cdktf.StringMap(this, "resource_labels");
        // resource_usage_export_config - computed: true, optional: false, required: false
        this._resourceUsageExportConfig = new index_structs_1.DataGoogleContainerClusterResourceUsageExportConfigList(this, "resource_usage_export_config", false);
        // secret_manager_config - computed: true, optional: false, required: false
        this._secretManagerConfig = new index_structs_1.DataGoogleContainerClusterSecretManagerConfigList(this, "secret_manager_config", false);
        // security_posture_config - computed: true, optional: false, required: false
        this._securityPostureConfig = new index_structs_1.DataGoogleContainerClusterSecurityPostureConfigList(this, "security_posture_config", false);
        // service_external_ips_config - computed: true, optional: false, required: false
        this._serviceExternalIpsConfig = new index_structs_1.DataGoogleContainerClusterServiceExternalIpsConfigList(this, "service_external_ips_config", false);
        // terraform_labels - computed: true, optional: false, required: false
        this._terraformLabels = new cdktf.StringMap(this, "terraform_labels");
        // user_managed_keys_config - computed: true, optional: false, required: false
        this._userManagedKeysConfig = new index_structs_1.DataGoogleContainerClusterUserManagedKeysConfigList(this, "user_managed_keys_config", false);
        // vertical_pod_autoscaling - computed: true, optional: false, required: false
        this._verticalPodAutoscaling = new index_structs_1.DataGoogleContainerClusterVerticalPodAutoscalingList(this, "vertical_pod_autoscaling", false);
        // workload_identity_config - computed: true, optional: false, required: false
        this._workloadIdentityConfig = new index_structs_1.DataGoogleContainerClusterWorkloadIdentityConfigList(this, "workload_identity_config", false);
        this._id = config.id;
        this._location = config.location;
        this._name = config.name;
        this._project = config.project;
    }
    get addonsConfig() {
        return this._addonsConfig;
    }
    // allow_net_admin - computed: true, optional: false, required: false
    get allowNetAdmin() {
        return this.getBooleanAttribute('allow_net_admin');
    }
    get authenticatorGroupsConfig() {
        return this._authenticatorGroupsConfig;
    }
    get binaryAuthorization() {
        return this._binaryAuthorization;
    }
    get clusterAutoscaling() {
        return this._clusterAutoscaling;
    }
    // cluster_ipv4_cidr - computed: true, optional: false, required: false
    get clusterIpv4Cidr() {
        return this.getStringAttribute('cluster_ipv4_cidr');
    }
    get confidentialNodes() {
        return this._confidentialNodes;
    }
    get controlPlaneEndpointsConfig() {
        return this._controlPlaneEndpointsConfig;
    }
    get costManagementConfig() {
        return this._costManagementConfig;
    }
    get databaseEncryption() {
        return this._databaseEncryption;
    }
    // datapath_provider - computed: true, optional: false, required: false
    get datapathProvider() {
        return this.getStringAttribute('datapath_provider');
    }
    // default_max_pods_per_node - computed: true, optional: false, required: false
    get defaultMaxPodsPerNode() {
        return this.getNumberAttribute('default_max_pods_per_node');
    }
    get defaultSnatStatus() {
        return this._defaultSnatStatus;
    }
    // deletion_protection - computed: true, optional: false, required: false
    get deletionProtection() {
        return this.getBooleanAttribute('deletion_protection');
    }
    // description - computed: true, optional: false, required: false
    get description() {
        return this.getStringAttribute('description');
    }
    get dnsConfig() {
        return this._dnsConfig;
    }
    get effectiveLabels() {
        return this._effectiveLabels;
    }
    // enable_autopilot - computed: true, optional: false, required: false
    get enableAutopilot() {
        return this.getBooleanAttribute('enable_autopilot');
    }
    // enable_cilium_clusterwide_network_policy - computed: true, optional: false, required: false
    get enableCiliumClusterwideNetworkPolicy() {
        return this.getBooleanAttribute('enable_cilium_clusterwide_network_policy');
    }
    // enable_fqdn_network_policy - computed: true, optional: false, required: false
    get enableFqdnNetworkPolicy() {
        return this.getBooleanAttribute('enable_fqdn_network_policy');
    }
    // enable_intranode_visibility - computed: true, optional: false, required: false
    get enableIntranodeVisibility() {
        return this.getBooleanAttribute('enable_intranode_visibility');
    }
    get enableK8SBetaApis() {
        return this._enableK8SBetaApis;
    }
    // enable_kubernetes_alpha - computed: true, optional: false, required: false
    get enableKubernetesAlpha() {
        return this.getBooleanAttribute('enable_kubernetes_alpha');
    }
    // enable_l4_ilb_subsetting - computed: true, optional: false, required: false
    get enableL4IlbSubsetting() {
        return this.getBooleanAttribute('enable_l4_ilb_subsetting');
    }
    // enable_legacy_abac - computed: true, optional: false, required: false
    get enableLegacyAbac() {
        return this.getBooleanAttribute('enable_legacy_abac');
    }
    // enable_multi_networking - computed: true, optional: false, required: false
    get enableMultiNetworking() {
        return this.getBooleanAttribute('enable_multi_networking');
    }
    // enable_shielded_nodes - computed: true, optional: false, required: false
    get enableShieldedNodes() {
        return this.getBooleanAttribute('enable_shielded_nodes');
    }
    // enable_tpu - computed: true, optional: false, required: false
    get enableTpu() {
        return this.getBooleanAttribute('enable_tpu');
    }
    // endpoint - computed: true, optional: false, required: false
    get endpoint() {
        return this.getStringAttribute('endpoint');
    }
    get enterpriseConfig() {
        return this._enterpriseConfig;
    }
    get fleet() {
        return this._fleet;
    }
    get gatewayApiConfig() {
        return this._gatewayApiConfig;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get identityServiceConfig() {
        return this._identityServiceConfig;
    }
    // initial_node_count - computed: true, optional: false, required: false
    get initialNodeCount() {
        return this.getNumberAttribute('initial_node_count');
    }
    get ipAllocationPolicy() {
        return this._ipAllocationPolicy;
    }
    // label_fingerprint - computed: true, optional: false, required: false
    get labelFingerprint() {
        return this.getStringAttribute('label_fingerprint');
    }
    get location() {
        return this.getStringAttribute('location');
    }
    set location(value) {
        this._location = value;
    }
    resetLocation() {
        this._location = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get locationInput() {
        return this._location;
    }
    get loggingConfig() {
        return this._loggingConfig;
    }
    // logging_service - computed: true, optional: false, required: false
    get loggingService() {
        return this.getStringAttribute('logging_service');
    }
    get maintenancePolicy() {
        return this._maintenancePolicy;
    }
    get masterAuth() {
        return this._masterAuth;
    }
    get masterAuthorizedNetworksConfig() {
        return this._masterAuthorizedNetworksConfig;
    }
    // master_version - computed: true, optional: false, required: false
    get masterVersion() {
        return this.getStringAttribute('master_version');
    }
    get meshCertificates() {
        return this._meshCertificates;
    }
    // min_master_version - computed: true, optional: false, required: false
    get minMasterVersion() {
        return this.getStringAttribute('min_master_version');
    }
    get monitoringConfig() {
        return this._monitoringConfig;
    }
    // monitoring_service - computed: true, optional: false, required: false
    get monitoringService() {
        return this.getStringAttribute('monitoring_service');
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    // network - computed: true, optional: false, required: false
    get network() {
        return this.getStringAttribute('network');
    }
    get networkPolicy() {
        return this._networkPolicy;
    }
    // networking_mode - computed: true, optional: false, required: false
    get networkingMode() {
        return this.getStringAttribute('networking_mode');
    }
    get nodeConfig() {
        return this._nodeConfig;
    }
    // node_locations - computed: true, optional: false, required: false
    get nodeLocations() {
        return cdktf.Fn.tolist(this.getListAttribute('node_locations'));
    }
    get nodePool() {
        return this._nodePool;
    }
    get nodePoolAutoConfig() {
        return this._nodePoolAutoConfig;
    }
    get nodePoolDefaults() {
        return this._nodePoolDefaults;
    }
    // node_version - computed: true, optional: false, required: false
    get nodeVersion() {
        return this.getStringAttribute('node_version');
    }
    get notificationConfig() {
        return this._notificationConfig;
    }
    // operation - computed: true, optional: false, required: false
    get operation() {
        return this.getStringAttribute('operation');
    }
    get privateClusterConfig() {
        return this._privateClusterConfig;
    }
    // private_ipv6_google_access - computed: true, optional: false, required: false
    get privateIpv6GoogleAccess() {
        return this.getStringAttribute('private_ipv6_google_access');
    }
    get project() {
        return this.getStringAttribute('project');
    }
    set project(value) {
        this._project = value;
    }
    resetProject() {
        this._project = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get projectInput() {
        return this._project;
    }
    get releaseChannel() {
        return this._releaseChannel;
    }
    // remove_default_node_pool - computed: true, optional: false, required: false
    get removeDefaultNodePool() {
        return this.getBooleanAttribute('remove_default_node_pool');
    }
    get resourceLabels() {
        return this._resourceLabels;
    }
    get resourceUsageExportConfig() {
        return this._resourceUsageExportConfig;
    }
    get secretManagerConfig() {
        return this._secretManagerConfig;
    }
    get securityPostureConfig() {
        return this._securityPostureConfig;
    }
    // self_link - computed: true, optional: false, required: false
    get selfLink() {
        return this.getStringAttribute('self_link');
    }
    get serviceExternalIpsConfig() {
        return this._serviceExternalIpsConfig;
    }
    // services_ipv4_cidr - computed: true, optional: false, required: false
    get servicesIpv4Cidr() {
        return this.getStringAttribute('services_ipv4_cidr');
    }
    // subnetwork - computed: true, optional: false, required: false
    get subnetwork() {
        return this.getStringAttribute('subnetwork');
    }
    get terraformLabels() {
        return this._terraformLabels;
    }
    // tpu_ipv4_cidr_block - computed: true, optional: false, required: false
    get tpuIpv4CidrBlock() {
        return this.getStringAttribute('tpu_ipv4_cidr_block');
    }
    get userManagedKeysConfig() {
        return this._userManagedKeysConfig;
    }
    get verticalPodAutoscaling() {
        return this._verticalPodAutoscaling;
    }
    get workloadIdentityConfig() {
        return this._workloadIdentityConfig;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
            location: cdktf.stringToTerraform(this._location),
            name: cdktf.stringToTerraform(this._name),
            project: cdktf.stringToTerraform(this._project),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            location: {
                value: cdktf.stringToHclTerraform(this._location),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            name: {
                value: cdktf.stringToHclTerraform(this._name),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            project: {
                value: cdktf.stringToHclTerraform(this._project),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.DataGoogleContainerCluster = DataGoogleContainerCluster;
_a = JSII_RTTI_SYMBOL_1;
DataGoogleContainerCluster[_a] = { fqn: "@cdktf/provider-google.dataGoogleContainerCluster.DataGoogleContainerCluster", version: "14.13.1" };
// =================
// STATIC PROPERTIES
// =================
DataGoogleContainerCluster.tfResourceType = "google_container_cluster";
//# sourceMappingURL=data:application/json;base64,